{"level":7,"answer":57.0,"prediction":"import pandas as pd\n\ndef calculate_total_people(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of people who might draw each card and returns the total number of people.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of people who might draw each card.\n    The dataframe should contain \"Number drawn\" and \"Frequency\" columns.\n    Returns:\n    int: The total number of people.\n    \"\"\"\n    # Sum the frequencies in the \"Frequency\" column\n    total_people = df['Frequency'].sum()\n    \n    return total_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number drawn': [4, 5, 6, 7, 8, 9],\n    'Frequency': [2, 14, 4, 17, 13, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_total_people(df))","question":"A math textbook explains probability by showing a set of cards numbered 4 through 9 and showing the number of people who might draw each card. How many people are there in all?","prediction_code":"import pandas as pd\n\ndef calculate_total_people(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of people who might draw each card and returns the total number of people.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of people who might draw each card.\n    The dataframe should contain \"Number drawn\" and \"Frequency\" columns.\n    Returns:\n    int: The total number of people.\n    \"\"\"\n    # Sum the frequencies in the \"Frequency\" column\n    total_people = df['Frequency'].sum()\n    \n    return total_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number drawn': [4, 5, 6, 7, 8, 9],\n    'Frequency': [2, 14, 4, 17, 13, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_total_people(df))","table":"Name: Drawing a card between 4 and 9\nUnit: None\nContent:\nNumber drawn | Frequency\n4 | 2\n5 | 14\n6 | 4\n7 | 17\n8 | 13\n9 | 7"}
{"level":5,"answer":685.02,"prediction":"import pandas as pd\n\ndef calculate_total_payroll_tax(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a pay stub and calculates the total payroll tax paid by an employee.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the pay stub information.\n    The DataFrame should have columns 'Employee', 'Pay period', 'Total earnings', 'Federal income tax', 'State income tax', 'Other taxes', 'Total taxes', 'Pay after taxes'.\n    Returns:\n    float: The total payroll tax paid by the employee.\n    \"\"\"\n    # Get the index of the row with the total taxes\n    total_taxes_index = df[df['Total taxes'].notnull()].index[0]\n    \n    # Get the total payroll tax from the 'Total taxes' column\n    total_payroll_tax = df.loc[total_taxes_index, 'Total taxes']\n    \n    return total_payroll_tax\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Employee': ['Viviana Hall', 'Total earnings', 'Federal income tax', 'State income tax', 'Other taxes', 'Total taxes', 'Pay after taxes'],\n    'Pay period': ['December', '', '', '', '', '', ''],\n    '': ['', '', '', '', '', '', ''],\n    '': ['', '', '', '', '', '', ''],\n    '': ['', '', '', '', '', '', ''],\n    '': ['', '', '', '', '', '', '?'],\n    '': ['', '', '', '', '', '', '?']\n})\n# Call the tool to solve the problem\nprint(calculate_total_payroll_tax(df))","question":"Look at Viviana's pay stub. Viviana lives in a state that has state income tax. How much payroll tax did Viviana pay in total?","prediction_code":"import pandas as pd\n\ndef calculate_total_payroll_tax(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a pay stub and calculates the total payroll tax paid by an employee.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the pay stub information.\n    The DataFrame should have columns 'Employee', 'Pay period', 'Total earnings', 'Federal income tax', 'State income tax', 'Other taxes', 'Total taxes', 'Pay after taxes'.\n    Returns:\n    float: The total payroll tax paid by the employee.\n    \"\"\"\n    # Get the index of the row with the total taxes\n    total_taxes_index = df[df['Total taxes'].notnull()].index[0]\n    \n    # Get the total payroll tax from the 'Total taxes' column\n    total_payroll_tax = df.loc[total_taxes_index, 'Total taxes']\n    \n    return total_payroll_tax","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Employee': ['Viviana Hall', 'Total earnings', 'Federal income tax', 'State income tax', 'Other taxes', 'Total taxes', 'Pay after taxes'],\n    'Pay period': ['December', '', '', '', '', '', ''],\n    '': ['', '', '', '', '', '', ''],\n    '': ['', '', '', '', '', '', ''],\n    '': ['', '', '', '', '', '', ''],\n    '': ['', '', '', '', '', '', '?'],\n    '': ['', '', '', '', '', '', '?']\n})\n# Call the tool to solve the problem\nprint(calculate_total_payroll_tax(df))","table":"Name: None\nUnit: $\nContent:\nEmployee | Pay period |\nViviana Hall | December |\nTotal earnings | | $2,675.00\nFederal income tax | $304.90 |\nState income tax | $175.48 |\nOther taxes | $204.64 |\nTotal taxes | | ?\nPay after taxes | | ?"}
{"level":7,"answer":8.0,"prediction":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of miles hiked per day and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of miles hiked per day.\n    The dataframe should contain \"Day\" and \"Number of miles\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Number of miles\" column\n    mean = df['Number of miles'].mean()\n    \n    return mean\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Number of miles': [8, 7, 8, 9, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","question":"Jayla went on a camping trip and logged the number of miles she hiked each day. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of miles hiked per day and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of miles hiked per day.\n    The dataframe should contain \"Day\" and \"Number of miles\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Number of miles\" column\n    mean = df['Number of miles'].mean()\n    \n    return mean","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Number of miles': [8, 7, 8, 9, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","table":"Name: Miles hiked\nUnit: None\nContent:\nDay | Number of miles\nFriday | 8\nSaturday | 7\nSunday | 8\nMonday | 9\nTuesday | 8"}
{"level":7,"answer":3.5,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item given the quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return None\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['dock washers', 'lock washers', 'fender washers', 'square washers', 'star washers', 'flat washers'],\n    'Price': [3.50, 2.48, 2.95, 2.37, 3.91, 4.52]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'dock washers', 1))","question":"Amelia wants to buy 1 kilogram of dock washers. How much will she spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item given the quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return None","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['dock washers', 'lock washers', 'fender washers', 'square washers', 'star washers', 'flat washers'],\n    'Price': [3.50, 2.48, 2.95, 2.37, 3.91, 4.52]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'dock washers', 1))","table":"Name: None\nUnit: $\nContent:\ndock washers | $3.50 per kilogram\nlock washers | $2.48 per kilogram\nfender washers | $2.95 per kilogram\nsquare washers | $2.37 per kilogram\nstar washers | $3.91 per kilogram\nflat washers | $4.52 per kilogram"}
{"level":4,"answer":12.0,"prediction":"import pandas as pd\n\ndef calculate_pizza_revenue_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pizza sales and calculates the difference in revenue between Dan's Deep Dish and Taste of New York.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the pizza sales data.\n    The DataFrame should have columns 'Restaurant', 'Supreme pizzas', and 'Cheese pizzas'.\n    Returns:\n    float: The difference in revenue between Dan's Deep Dish and Taste of New York.\n    \"\"\"\n    # Filter the DataFrame for Dan's Deep Dish and Taste of New York\n    dan_df = df[df['Restaurant'] == \"Dan's Deep Dish\"]\n    taste_df = df[df['Restaurant'] == \"Taste of New York\"]\n    \n    # Get the revenue for each restaurant\n    dan_revenue = dan_df['Supreme pizzas'].values[0] + dan_df['Cheese pizzas'].values[0]\n    taste_revenue = taste_df['Supreme pizzas'].values[0] + taste_df['Cheese pizzas'].values[0]\n    \n    # Calculate the difference in revenue\n    revenue_difference = dan_revenue - taste_revenue\n    \n    return revenue_difference\n########################################\n# Initialize the table into a DataFrame\ndf = pd.DataFrame({\n    'Restaurant': ['Taste of New York', 'New York Slice', \"Dan's Deep Dish\", 'The Big Cheese'],\n    'Supreme pizzas': [9, 20, 12, 7],\n    'Cheese pizzas': [10, 16, 19, 8]\n})\n\n# Call the tool to solve the problem\nprint(calculate_pizza_revenue_difference(df))","question":"A food industry researcher compiled the revenues of several pizzerias. How much more did Dan's Deep Dish make from pizzas than Taste of New York?","prediction_code":"import pandas as pd\n\ndef calculate_pizza_revenue_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pizza sales and calculates the difference in revenue between Dan's Deep Dish and Taste of New York.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the pizza sales data.\n    The DataFrame should have columns 'Restaurant', 'Supreme pizzas', and 'Cheese pizzas'.\n    Returns:\n    float: The difference in revenue between Dan's Deep Dish and Taste of New York.\n    \"\"\"\n    # Filter the DataFrame for Dan's Deep Dish and Taste of New York\n    dan_df = df[df['Restaurant'] == \"Dan's Deep Dish\"]\n    taste_df = df[df['Restaurant'] == \"Taste of New York\"]\n    \n    # Get the revenue for each restaurant\n    dan_revenue = dan_df['Supreme pizzas'].values[0] + dan_df['Cheese pizzas'].values[0]\n    taste_revenue = taste_df['Supreme pizzas'].values[0] + taste_df['Cheese pizzas'].values[0]\n    \n    # Calculate the difference in revenue\n    revenue_difference = dan_revenue - taste_revenue\n    \n    return revenue_difference","prediction_call":"# Initialize the table into a DataFrame\ndf = pd.DataFrame({\n    'Restaurant': ['Taste of New York', 'New York Slice', \"Dan's Deep Dish\", 'The Big Cheese'],\n    'Supreme pizzas': [9, 20, 12, 7],\n    'Cheese pizzas': [10, 16, 19, 8]\n})\n\n# Call the tool to solve the problem\nprint(calculate_pizza_revenue_difference(df))","table":"Name: Pizza sales\nUnit: $\nContent:\nRestaurant | Supreme pizzas | Cheese pizzas\nTaste of New York | $9 | $10\nNew York Slice | $20 | $16\nDan's Deep Dish | $12 | $19\nThe Big Cheese | $7 | $8"}
{"level":7,"answer":26.0,"prediction":"import pandas as pd\n\ndef count_people_drew_less_than_8(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of people who drew each card, and returns the number of people who drew a number less than 8.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of people who drew each card.\n    The dataframe should contain \"Number drawn\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who drew a number less than 8.\n    \"\"\"\n    # Filter the DataFrame for numbers less than 8\n    filtered_df = df[df['Number drawn'] < 8]\n    \n    # Sum the frequencies of the filtered numbers\n    num_people = filtered_df['Frequency'].sum()\n    \n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number drawn': [4, 5, 6, 7, 8, 9],\n    'Frequency': [1, 9, 2, 14, 19, 8]\n})\n# Call the tool to solve the problem\nprint(count_people_drew_less_than_8(df))","question":"A math textbook explains probability by showing a set of cards numbered 4 through 9 and showing the number of people who might draw each card. How many people drew a number less than 8?","prediction_code":"import pandas as pd\n\ndef count_people_drew_less_than_8(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of people who drew each card, and returns the number of people who drew a number less than 8.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of people who drew each card.\n    The dataframe should contain \"Number drawn\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who drew a number less than 8.\n    \"\"\"\n    # Filter the DataFrame for numbers less than 8\n    filtered_df = df[df['Number drawn'] < 8]\n    \n    # Sum the frequencies of the filtered numbers\n    num_people = filtered_df['Frequency'].sum()\n    \n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number drawn': [4, 5, 6, 7, 8, 9],\n    'Frequency': [1, 9, 2, 14, 19, 8]\n})\n# Call the tool to solve the problem\nprint(count_people_drew_less_than_8(df))","table":"Name: Drawing a card between 4 and 9\nUnit: None\nContent:\nNumber drawn | Frequency\n4 | 1\n5 | 9\n6 | 2\n7 | 14\n8 | 19\n9 | 8"}
{"level":5,"answer":9.0,"prediction":"import pandas as pd\n\ndef find_smallest_number_of_desks(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of desks per classroom and returns the smallest number of desks.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of desks per classroom.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of desks.\n    \"\"\"\n    # prepare a list to store all the desks\n    desks = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the total number of desks in each classroom\n        for j in range(len(leaf)):\n            desks.append(stem * 10 + leaf[j])\n    # find the smallest number of desks\n    smallest_desks = min(desks)\n    return smallest_desks\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3, 4],\n    'Leaf': [[9], [1, 2, 9, 9], [0, 0, 0, 1, 1, 2, 2, 7], [1, 5, 6, 7, 8], [3, 4, 6, 6, 7, 8]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_desks(df))","question":"Evelyn counted the number of desks in each classroom at her school. What is the smallest number of desks?","prediction_code":"import pandas as pd\n\ndef find_smallest_number_of_desks(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of desks per classroom and returns the smallest number of desks.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of desks per classroom.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of desks.\n    \"\"\"\n    # prepare a list to store all the desks\n    desks = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the total number of desks in each classroom\n        for j in range(len(leaf)):\n            desks.append(stem * 10 + leaf[j])\n    # find the smallest number of desks\n    smallest_desks = min(desks)\n    return smallest_desks","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3, 4],\n    'Leaf': [[9], [1, 2, 9, 9], [0, 0, 0, 1, 1, 2, 2, 7], [1, 5, 6, 7, 8], [3, 4, 6, 6, 7, 8]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_desks(df))","table":"Name: Desks per classroom\nUnit: desks\nContent:\nStem | Leaf \n0 | 9\n1 | 1, 2, 9, 9\n2 | 0, 0, 0, 1, 1, 2, 2, 7\n3 | 1, 5, 6, 7, 8\n4 | 3, 4, 6, 6, 7, 8"}
{"level":6,"answer":5.0,"prediction":"import pandas as pd\n\ndef count_bags_with_lemon_candies(df, min_candies, max_candies):\n    \"\"\"\n    This function takes in a pandas dataframe of lemon-flavored candies per bag, and returns the number of bags that have at least min_candies lemon-flavored candies but fewer than max_candies lemon-flavored candies.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of lemon-flavored candies per bag.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_candies (int): The minimum number of lemon-flavored candies required in a bag.\n    max_candies (int): The maximum number of lemon-flavored candies allowed in a bag.\n    Returns:\n    int: The number of bags that have at least min_candies lemon-flavored candies but fewer than max_candies lemon-flavored candies.\n    \"\"\"\n    # prepare a list to calculate candies in each bag\n    candies = []\n    # calculate the total number of lemon-flavored candies in each bag\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            candies.append(stem * 10 + leaf[j])\n    # filter the bags where the total number of lemon-flavored candies is within the specified range\n    filtered = [candy for candy in candies if min_candies <= candy < max_candies]\n    # count the number of rows\n    num_bags = len(filtered)\n    return num_bags\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7, 8],\n    'Leaf': [[0, 3, 6, 7], [6], [0, 1, 4, 7, 8, 8], [0, 5, 6, 9, 9], [3], [2, 2, 3]]\n})\n# Set the minimum and maximum number of lemon-flavored candies\nmin_candies = 46\nmax_candies = 58\n# Call the tool to solve the problem\nprint(count_bags_with_lemon_candies(df, min_candies, max_candies))","question":"A machine at the candy factory dispensed different numbers of lemon-flavored candies into various bags. How many bags had at least 46 lemon-flavored candies but fewer than 58 lemon-flavored candies?","prediction_code":"import pandas as pd\n\ndef count_bags_with_lemon_candies(df, min_candies, max_candies):\n    \"\"\"\n    This function takes in a pandas dataframe of lemon-flavored candies per bag, and returns the number of bags that have at least min_candies lemon-flavored candies but fewer than max_candies lemon-flavored candies.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of lemon-flavored candies per bag.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_candies (int): The minimum number of lemon-flavored candies required in a bag.\n    max_candies (int): The maximum number of lemon-flavored candies allowed in a bag.\n    Returns:\n    int: The number of bags that have at least min_candies lemon-flavored candies but fewer than max_candies lemon-flavored candies.\n    \"\"\"\n    # prepare a list to calculate candies in each bag\n    candies = []\n    # calculate the total number of lemon-flavored candies in each bag\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            candies.append(stem * 10 + leaf[j])\n    # filter the bags where the total number of lemon-flavored candies is within the specified range\n    filtered = [candy for candy in candies if min_candies <= candy < max_candies]\n    # count the number of rows\n    num_bags = len(filtered)\n    return num_bags","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7, 8],\n    'Leaf': [[0, 3, 6, 7], [6], [0, 1, 4, 7, 8, 8], [0, 5, 6, 9, 9], [3], [2, 2, 3]]\n})\n# Set the minimum and maximum number of lemon-flavored candies\nmin_candies = 46\nmax_candies = 58\n# Call the tool to solve the problem\nprint(count_bags_with_lemon_candies(df, min_candies, max_candies))","table":"Name: Lemon-flavored candies per bag\nUnit: bags\nContent:\nStem | Leaf \n3 | 0, 3, 6, 7\n4 | 6\n5 | 0, 1, 4, 7, 8, 8\n6 | 0, 5, 6, 9, 9\n7 | 3\n8 | 2, 2, 3"}
{"level":8,"answer":4.12,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item given its quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price per kilogram of the item\n    price_per_kg = item_df['Price'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price_per_kg * quantity\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['pink bananas', 'plantains', 'bananitos', 'yellow bananas'],\n    'Price': [0.71, 0.70, 1.03, 0.83]\n})\n\n# Call the tool to solve the problem\nitem = 'bananitos'\nquantity = 4\ntotal_cost = calculate_total_cost(df, item, quantity)\n\n# Print out the answer\nprint(total_cost)","question":"Hanson wants to buy 4 kilograms of bananitos. How much will he spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item given its quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price per kilogram of the item\n    price_per_kg = item_df['Price'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price_per_kg * quantity\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['pink bananas', 'plantains', 'bananitos', 'yellow bananas'],\n    'Price': [0.71, 0.70, 1.03, 0.83]\n})\n\n# Call the tool to solve the problem\nitem = 'bananitos'\nquantity = 4\ntotal_cost = calculate_total_cost(df, item, quantity)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\npink bananas | $0.71\/kg\nplantains | $0.70\/kg\nbananitos | $1.03\/kg\nyellow bananas | $0.83\/kg"}
{"level":4,"answer":0.14,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['package of pencil lead', 'purple colored pencil', 'thin blue marker', 'orange marker', 'black pen', 'silver pen'],\n    'Price': [0.01, 0.02, 0.05, 0.04, 0.05, 0.08]\n})\n\n# Define the items to be purchased\nitems = ['orange marker', 'purple colored pencil', 'silver pen']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, items)\n\n# Print out the answer\nprint(total_cost)","question":"How much money does Evelyn need to buy an orange marker, a purple colored pencil, and a silver pen?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['package of pencil lead', 'purple colored pencil', 'thin blue marker', 'orange marker', 'black pen', 'silver pen'],\n    'Price': [0.01, 0.02, 0.05, 0.04, 0.05, 0.08]\n})\n\n# Define the items to be purchased\nitems = ['orange marker', 'purple colored pencil', 'silver pen']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, items)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\npackage of pencil lead | $0.01\npurple colored pencil | $0.02\nthin blue marker | $0.05\norange marker | $0.04\nblack pen | $0.05\nsilver pen | $0.08"}
{"level":4,"answer":15.0,"prediction":"import pandas as pd\n\ndef find_smallest_number(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of lemon-flavored candies per bag and returns the smallest number of lemon-flavored candies.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of lemon-flavored candies per bag.\n    The DataFrame should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of lemon-flavored candies.\n    \"\"\"\n    # Initialize the smallest number as infinity\n    smallest_number = float('inf')\n    \n    # Iterate through the DataFrame and update the smallest number if a smaller value is found\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            number = stem * 10 + leaf[j]\n            if number < smallest_number:\n                smallest_number = number\n    \n    return smallest_number\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[5], [0], [7, 8, 9], [], [], [1], [4, 6], [0], [0]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number(df))","question":"A machine at the candy factory dispensed different numbers of lemon-flavored candies into various bags. What is the smallest number of lemon-flavored candies?","prediction_code":"import pandas as pd\n\ndef find_smallest_number(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of lemon-flavored candies per bag and returns the smallest number of lemon-flavored candies.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of lemon-flavored candies per bag.\n    The DataFrame should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of lemon-flavored candies.\n    \"\"\"\n    # Initialize the smallest number as infinity\n    smallest_number = float('inf')\n    \n    # Iterate through the DataFrame and update the smallest number if a smaller value is found\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            number = stem * 10 + leaf[j]\n            if number < smallest_number:\n                smallest_number = number\n    \n    return smallest_number","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[5], [0], [7, 8, 9], [], [], [1], [4, 6], [0], [0]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number(df))","table":"Name: Lemon-flavored candies per bag\nUnit: lemon-flavored candies\nContent:\nStem | Leaf \n1 | 5\n2 | 0\n3 | 7, 8, 9\n4 | \n5 | \n6 | 1\n7 | 4, 6\n8 | 0\n9 | 0"}
{"level":7,"answer":1117.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    items (list): A list of item names to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['antique marbletop vanity', 'antique pine chest of drawers', 'antique cast-iron bench', 'antique maplewood rocking chair', 'antique rosewood corner cabinet', 'antique cherry bookcase'],\n    'Price': [642.00, 436.00, 860.00, 369.00, 818.00, 748.00]\n})\n\n# Define the items to calculate the total cost\nitems = ['antique cherry bookcase', 'antique maplewood rocking chair']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, items)\n\n# Print out the answer\nprint(total_cost)","question":"How much money does Arianna need to buy an antique cherry bookcase and an antique maplewood rocking chair?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    items (list): A list of item names to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['antique marbletop vanity', 'antique pine chest of drawers', 'antique cast-iron bench', 'antique maplewood rocking chair', 'antique rosewood corner cabinet', 'antique cherry bookcase'],\n    'Price': [642.00, 436.00, 860.00, 369.00, 818.00, 748.00]\n})\n\n# Define the items to calculate the total cost\nitems = ['antique cherry bookcase', 'antique maplewood rocking chair']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, items)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\nantique marbletop vanity | $642.00\nantique pine chest of drawers | $436.00\nantique cast-iron bench | $860.00\nantique maplewood rocking chair | $369.00\nantique rosewood corner cabinet | $818.00\nantique cherry bookcase | $748.00"}
{"level":8,"answer":7.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of miles driven per day and returns the range of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of miles driven per day.\n    The dataframe should contain \"Day\" and \"Number of miles\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of miles\" column\n    min_value = df['Number of miles'].min()\n    max_value = df['Number of miles'].max()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Number of miles': [10, 3, 4, 9, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"Madelyn kept a driving log to see how many miles she drove each day. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of miles driven per day and returns the range of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of miles driven per day.\n    The dataframe should contain \"Day\" and \"Number of miles\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of miles\" column\n    min_value = df['Number of miles'].min()\n    max_value = df['Number of miles'].max()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Number of miles': [10, 3, 4, 9, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Miles driven\nUnit: None\nContent:\nDay | Number of miles\nMonday | 10\nTuesday | 3\nWednesday | 4\nThursday | 9\nFriday | 6"}
{"level":1,"answer":25.0,"prediction":"import pandas as pd\n\ndef calculate_total_bowls(df, num_tables):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of bowls of cereal per restaurant table and the number of tables, and returns the total number of bowls of cereal.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of bowls of cereal per restaurant table.\n    The dataframe should contain \"Number of restaurant tables\" and \"Number of bowls of cereal\" columns.\n    num_tables (int): The number of restaurant tables.\n    Returns:\n    int: The total number of bowls of cereal.\n    \"\"\"\n    # Filter the DataFrame for the specific number of tables\n    table_df = df[df['Number of restaurant tables'] == num_tables]\n    \n    # Get the number of bowls of cereal for the specific number of tables\n    num_bowls = table_df['Number of bowls of cereal'].values[0]\n    \n    # Calculate the total number of bowls of cereal\n    total_bowls = num_bowls * num_tables\n    \n    return total_bowls\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of restaurant tables': [1, 2, 3, 4, 5],\n    'Number of bowls of cereal': [5, 10, 15, 20, None]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_bowls(df, 5))","question":"Each restaurant table has 5 bowls of cereal. How many bowls of cereal are on 5 restaurant tables?","prediction_code":"import pandas as pd\n\ndef calculate_total_bowls(df, num_tables):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of bowls of cereal per restaurant table and the number of tables, and returns the total number of bowls of cereal.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of bowls of cereal per restaurant table.\n    The dataframe should contain \"Number of restaurant tables\" and \"Number of bowls of cereal\" columns.\n    num_tables (int): The number of restaurant tables.\n    Returns:\n    int: The total number of bowls of cereal.\n    \"\"\"\n    # Filter the DataFrame for the specific number of tables\n    table_df = df[df['Number of restaurant tables'] == num_tables]\n    \n    # Get the number of bowls of cereal for the specific number of tables\n    num_bowls = table_df['Number of bowls of cereal'].values[0]\n    \n    # Calculate the total number of bowls of cereal\n    total_bowls = num_bowls * num_tables\n    \n    return total_bowls","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of restaurant tables': [1, 2, 3, 4, 5],\n    'Number of bowls of cereal': [5, 10, 15, 20, None]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_bowls(df, 5))","table":"Name: None\nUnit: bowls of cereal\nContent:\nNumber of restaurant tables | Number of bowls of cereal\n1 | 5\n2 | 10\n3 | 15\n4 | 20\n5 | ?"}
{"level":7,"answer":4.0,"prediction":"import pandas as pd\n\ndef count_companies_with_44_employees(df):\n    \"\"\"\n    This function takes in a pandas dataframe of company sizes (number of employees), and returns the number of companies that have exactly 44 employees.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of employees per company.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of companies that have exactly 44 employees.\n    \"\"\"\n    # prepare a list to calculate the number of employees in each company\n    employees = []\n    # calculate the total number of employees in each company\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            employees.append(stem * 10 + leaf[j])\n    # count the number of companies with exactly 44 employees\n    num_companies = employees.count(44)\n    return num_companies\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[1, 4], [9], [4, 4, 4, 4], [], [3], [9], [], [0]]\n})\n# Call the tool to solve the problem\nprint(count_companies_with_44_employees(df))","question":"The Oxford Chamber of Commerce researched the number of employees working at local companies. How many companies have exactly 44 employees?","prediction_code":"import pandas as pd\n\ndef count_companies_with_44_employees(df):\n    \"\"\"\n    This function takes in a pandas dataframe of company sizes (number of employees), and returns the number of companies that have exactly 44 employees.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of employees per company.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of companies that have exactly 44 employees.\n    \"\"\"\n    # prepare a list to calculate the number of employees in each company\n    employees = []\n    # calculate the total number of employees in each company\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            employees.append(stem * 10 + leaf[j])\n    # count the number of companies with exactly 44 employees\n    num_companies = employees.count(44)\n    return num_companies","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[1, 4], [9], [4, 4, 4, 4], [], [3], [9], [], [0]]\n})\n# Call the tool to solve the problem\nprint(count_companies_with_44_employees(df))","table":"Name: Company sizes (number of employees)\nUnit: companies\nContent:\nStem | Leaf \n2 | 1, 4\n3 | 9\n4 | 4, 4, 4, 4\n5 | \n6 | 3\n7 | 9\n8 | \n9 | 0"}
{"level":5,"answer":8.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of class sizes and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the class sizes with columns 'Teacher' and 'Number of students'.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the 'Number of students' column\n    min_students = df['Number of students'].min()\n    max_students = df['Number of students'].max()\n    \n    # Calculate the range\n    range_of_numbers = max_students - min_students\n    \n    return range_of_numbers\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Teacher': ['Miss Jones', 'Miss Urban', 'Mrs. King', 'Mr. Cohen', 'Mrs. Truman', 'Mr. Chen', 'Ms. Hershfeld', 'Mrs. Novak'],\n    'Number of students': [18, 15, 12, 16, 19, 20, 17, 13]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"Some teachers compared how many students are in their classes. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of class sizes and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the class sizes with columns 'Teacher' and 'Number of students'.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the 'Number of students' column\n    min_students = df['Number of students'].min()\n    max_students = df['Number of students'].max()\n    \n    # Calculate the range\n    range_of_numbers = max_students - min_students\n    \n    return range_of_numbers","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Teacher': ['Miss Jones', 'Miss Urban', 'Mrs. King', 'Mr. Cohen', 'Mrs. Truman', 'Mr. Chen', 'Ms. Hershfeld', 'Mrs. Novak'],\n    'Number of students': [18, 15, 12, 16, 19, 20, 17, 13]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Class size\nUnit: None\nContent:\nTeacher | Number of students\nMiss Jones | 18\nMiss Urban | 15\nMrs. King | 12\nMr. Cohen | 16\nMrs. Truman | 19\nMr. Chen | 20\nMs. Hershfeld | 17\nMrs. Novak | 13"}
{"level":6,"answer":3.0,"prediction":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of quiz show scores and returns the mode of the scores.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the quiz show scores with columns 'Name' and 'Score'.\n    Returns:\n    int: The mode of the scores.\n    \"\"\"\n    # Get the 'Score' column from the DataFrame\n    scores = df['Score']\n    \n    # Calculate the mode using the value_counts() function\n    mode = scores.mode().values[0]\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Rob', 'Denise', 'Nina', 'Ian', 'Jim', 'Lila', 'Will', 'Evan'],\n    'Score': [5, 4, 3, 3, 5, 6, 3, 4]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"The players on a quiz show received the following scores. What is the mode of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of quiz show scores and returns the mode of the scores.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the quiz show scores with columns 'Name' and 'Score'.\n    Returns:\n    int: The mode of the scores.\n    \"\"\"\n    # Get the 'Score' column from the DataFrame\n    scores = df['Score']\n    \n    # Calculate the mode using the value_counts() function\n    mode = scores.mode().values[0]\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Rob', 'Denise', 'Nina', 'Ian', 'Jim', 'Lila', 'Will', 'Evan'],\n    'Score': [5, 4, 3, 3, 5, 6, 3, 4]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Quiz show scores\nUnit: None\nContent:\nName | Score\nRob | 5\nDenise | 4\nNina | 3\nIan | 3\nJim | 5\nLila | 6\nWill | 3\nEvan | 4"}
{"level":4,"answer":8.0,"prediction":"import pandas as pd\n\ndef count_shipments_with_26_broken_tiles(df):\n    \"\"\"\n    This function takes in a pandas dataframe of broken tiles per shipment, and returns the number of shipments that have at least 26 broken tiles.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken tiles per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of shipments that have at least 26 broken tiles.\n    \"\"\"\n    # prepare a list to calculate broken tiles in each shipment\n    broken_tiles = []\n    # calculate the total number of broken tiles in each shipment\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            broken_tiles.append(stem * 10 + leaf[j])\n    # filter the shipments where the total number of broken tiles is greater than or equal to 26\n    filtered = [tiles for tiles in broken_tiles if tiles >= 26]\n    # count the number of shipments\n    num_shipments = len(filtered)\n    return num_shipments\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[1, 5], [9], [0], [4], [3], [4, 4], [5], [7]]\n})\n# Call the tool to solve the problem\nprint(count_shipments_with_26_broken_tiles(df))","question":"Westminster Flooring tracked the number of broken tiles in each shipment it received last year. How many shipments had at least 26 broken tiles?","prediction_code":"import pandas as pd\n\ndef count_shipments_with_26_broken_tiles(df):\n    \"\"\"\n    This function takes in a pandas dataframe of broken tiles per shipment, and returns the number of shipments that have at least 26 broken tiles.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken tiles per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of shipments that have at least 26 broken tiles.\n    \"\"\"\n    # prepare a list to calculate broken tiles in each shipment\n    broken_tiles = []\n    # calculate the total number of broken tiles in each shipment\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            broken_tiles.append(stem * 10 + leaf[j])\n    # filter the shipments where the total number of broken tiles is greater than or equal to 26\n    filtered = [tiles for tiles in broken_tiles if tiles >= 26]\n    # count the number of shipments\n    num_shipments = len(filtered)\n    return num_shipments","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[1, 5], [9], [0], [4], [3], [4, 4], [5], [7]]\n})\n# Call the tool to solve the problem\nprint(count_shipments_with_26_broken_tiles(df))","table":"Name: Broken tiles per shipment\nUnit: None\nContent:\nStem | Leaf \n1 | 1, 5\n2 | 9\n3 | 0\n4 | 4\n5 | 3\n6 | 4, 4\n7 | 5\n8 | 7"}
{"level":7,"answer":11.0,"prediction":"import pandas as pd\n\ndef count_books_with_60_pages(df):\n    \"\"\"\n    This function takes in a pandas dataframe of pages per book, and returns the number of books that have at least 60 pages.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pages per book.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of books that have at least 60 pages.\n    \"\"\"\n    # prepare a list to calculate pages in each book\n    pages = []\n    # calculate the total number of pages in each book\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            pages.append(stem * 10 + leaf[j])\n    # filter the books where the total number of pages is greater than or equal to 60\n    filtered = [page for page in pages if page >= 60]\n    # count the number of books\n    num_books = len(filtered)\n    return num_books\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7, 8, 9],\n    'Leaf': [[1, 1, 1, 2, 4, 4, 5, 6, 7, 8, 9, 9], [0, 2], [2, 4, 6], [2, 2, 6, 7], [5, 5, 7], [0]]\n})\n# Call the tool to solve the problem\nprint(count_books_with_60_pages(df))","question":"David counted the pages in each book on his English class's required reading list. How many books had at least 60 pages?","prediction_code":"import pandas as pd\n\ndef count_books_with_60_pages(df):\n    \"\"\"\n    This function takes in a pandas dataframe of pages per book, and returns the number of books that have at least 60 pages.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pages per book.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of books that have at least 60 pages.\n    \"\"\"\n    # prepare a list to calculate pages in each book\n    pages = []\n    # calculate the total number of pages in each book\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            pages.append(stem * 10 + leaf[j])\n    # filter the books where the total number of pages is greater than or equal to 60\n    filtered = [page for page in pages if page >= 60]\n    # count the number of books\n    num_books = len(filtered)\n    return num_books","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7, 8, 9],\n    'Leaf': [[1, 1, 1, 2, 4, 4, 5, 6, 7, 8, 9, 9], [0, 2], [2, 4, 6], [2, 2, 6, 7], [5, 5, 7], [0]]\n})\n# Call the tool to solve the problem\nprint(count_books_with_60_pages(df))","table":"Name: Pages per book\nUnit: books\nContent:\nStem | Leaf \n4 | 1, 1, 1, 2, 4, 4, 5, 6, 7, 8, 9, 9\n5 | 0, 2\n6 | 2, 4, 6\n7 | 2, 2, 6, 7\n8 | 5, 5, 7\n9 | 0"}
{"level":8,"answer":90.0,"prediction":"import pandas as pd\n\ndef find_largest_number_of_roses(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of roses per bush and returns the largest number of roses.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of roses per bush.\n    The DataFrame should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of roses.\n    \"\"\"\n    # Initialize the largest number of roses\n    largest_roses = 0\n    \n    # Iterate through the DataFrame and update the largest number of roses if a larger value is found\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            roses = stem * 10 + leaf[j]\n            if roses > largest_roses:\n                largest_roses = roses\n    \n    return largest_roses\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [1, 6, 7, 7, [4, 5], 4, [2, 4], 0]\n})\n# Call the tool to solve the problem\nprint(find_largest_number_of_roses(df))","question":"The owner of a plant nursery wrote down the number of roses on each bush. What is the largest number of roses?","prediction_code":"import pandas as pd\n\ndef find_largest_number_of_roses(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of roses per bush and returns the largest number of roses.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of roses per bush.\n    The DataFrame should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of roses.\n    \"\"\"\n    # Initialize the largest number of roses\n    largest_roses = 0\n    \n    # Iterate through the DataFrame and update the largest number of roses if a larger value is found\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            roses = stem * 10 + leaf[j]\n            if roses > largest_roses:\n                largest_roses = roses\n    \n    return largest_roses","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [1, 6, 7, 7, [4, 5], 4, [2, 4], 0]\n})\n# Call the tool to solve the problem\nprint(find_largest_number_of_roses(df))","table":"Name: Roses per bush\nUnit: roses\nContent:\nStem | Leaf \n2 | 1\n3 | 6\n4 | 7\n5 | 7\n6 | 4, 5\n7 | 4\n8 | 2, 4\n9 | 0"}
{"level":6,"answer":1.8,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on the quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information for different items.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price per pound for the item\n    price_per_lb = item_df['Unit'].values[0]\n    \n    # Calculate the total cost based on the quantity\n    total_cost = price_per_lb * quantity\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['gummy bears', 'trail mix', 'dried berries', 'granola bars', 'cookie bites', 'nuts'],\n    'Unit': [7, 6, 5, 5, 7, 4]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'trail mix', 0.3))","question":"Shane bought 0.3 pounds of trail mix. How much did he spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on the quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information for different items.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price per pound for the item\n    price_per_lb = item_df['Unit'].values[0]\n    \n    # Calculate the total cost based on the quantity\n    total_cost = price_per_lb * quantity\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['gummy bears', 'trail mix', 'dried berries', 'granola bars', 'cookie bites', 'nuts'],\n    'Unit': [7, 6, 5, 5, 7, 4]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'trail mix', 0.3))","table":"Name: None\nUnit: $\nContent:\ngummy bears | $7 per lb\ntrail mix | $6 per lb\ndried berries | $5 per lb\ngranola bars | $5 per lb\ncookie bites | $7 per lb\nnuts | $4 per lb"}
{"level":2,"answer":6.0,"prediction":"import pandas as pd\n\ndef calculate_total_goldfish(df, num_aquariums):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of goldfish per aquarium and the number of aquariums, and returns the total number of goldfish.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of goldfish per aquarium.\n    The dataframe should contain \"Number of aquariums\" and \"Number of goldfish\" columns.\n    num_aquariums (int): The number of aquariums.\n    Returns:\n    int: The total number of goldfish in the given number of aquariums.\n    \"\"\"\n    # Filter the DataFrame for the given number of aquariums\n    filtered_df = df[df['Number of aquariums'] <= num_aquariums]\n    \n    # Calculate the total number of goldfish\n    total_goldfish = filtered_df['Number of goldfish'].sum()\n    \n    return total_goldfish\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of aquariums': [1, 2, 3],\n    'Number of goldfish': [2, 4, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_goldfish(df, 3))","question":"Each aquarium has 2 goldfish. How many goldfish are in 3 aquariums?","prediction_code":"import pandas as pd\n\ndef calculate_total_goldfish(df, num_aquariums):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of goldfish per aquarium and the number of aquariums, and returns the total number of goldfish.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of goldfish per aquarium.\n    The dataframe should contain \"Number of aquariums\" and \"Number of goldfish\" columns.\n    num_aquariums (int): The number of aquariums.\n    Returns:\n    int: The total number of goldfish in the given number of aquariums.\n    \"\"\"\n    # Filter the DataFrame for the given number of aquariums\n    filtered_df = df[df['Number of aquariums'] <= num_aquariums]\n    \n    # Calculate the total number of goldfish\n    total_goldfish = filtered_df['Number of goldfish'].sum()\n    \n    return total_goldfish","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of aquariums': [1, 2, 3],\n    'Number of goldfish': [2, 4, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_goldfish(df, 3))","table":"Name: None\nUnit: None\nContent:\nNumber of aquariums | Number of goldfish\n1 | 2\n2 | 4\n3 | ?"}
{"level":5,"answer":19.0,"prediction":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of years of teaching and returns the mode of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the years of teaching with columns 'Teacher' and 'Number of years'.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the 'Number of years' column from the DataFrame\n    years = df['Number of years']\n    \n    # Calculate the mode using the mode() function from pandas\n    mode = years.mode().values[0]\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Teacher': ['Miss Torres', 'Ms. Yamamoto', 'Mr. Nakamura', 'Mr. Park', 'Miss Watson', 'Ms. Chan', 'Mr. Gutierrez'],\n    'Number of years': [16, 19, 20, 16, 20, 19, 19]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"Some teachers compared how many years they have been teaching. What is the mode of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of years of teaching and returns the mode of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the years of teaching with columns 'Teacher' and 'Number of years'.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the 'Number of years' column from the DataFrame\n    years = df['Number of years']\n    \n    # Calculate the mode using the mode() function from pandas\n    mode = years.mode().values[0]\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Teacher': ['Miss Torres', 'Ms. Yamamoto', 'Mr. Nakamura', 'Mr. Park', 'Miss Watson', 'Ms. Chan', 'Mr. Gutierrez'],\n    'Number of years': [16, 19, 20, 16, 20, 19, 19]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Years of teaching\nUnit: None\nContent:\nTeacher | Number of years\nMiss Torres | 16\nMs. Yamamoto | 19\nMr. Nakamura | 20\nMr. Park | 16\nMiss Watson | 20\nMs. Chan | 19\nMr. Gutierrez | 19"}
{"level":6,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_mean_years(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of years of teaching experience and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the names of teachers and the number of years they have been teaching.\n    The DataFrame should have columns 'Teacher' and 'Number of years'.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Extract the 'Number of years' column from the DataFrame\n    years = df['Number of years']\n    \n    # Calculate the mean of the numbers\n    mean_years = years.mean()\n    \n    return mean_years\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Teacher': ['Miss Watson', 'Miss Torres', 'Mr. Boone', 'Mr. Park', 'Mr. Gutierrez', 'Mrs. Ramirez'],\n    'Number of years': [5, 6, 6, 8, 2, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_years(df))","question":"Some teachers compared how many years they have been teaching. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean_years(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of years of teaching experience and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the names of teachers and the number of years they have been teaching.\n    The DataFrame should have columns 'Teacher' and 'Number of years'.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Extract the 'Number of years' column from the DataFrame\n    years = df['Number of years']\n    \n    # Calculate the mean of the numbers\n    mean_years = years.mean()\n    \n    return mean_years","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Teacher': ['Miss Watson', 'Miss Torres', 'Mr. Boone', 'Mr. Park', 'Mr. Gutierrez', 'Mrs. Ramirez'],\n    'Number of years': [5, 6, 6, 8, 2, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_years(df))","table":"Name: Years of teaching\nUnit: None\nContent:\nTeacher | Number of years\nMiss Watson | 5\nMiss Torres | 6\nMr. Boone | 6\nMr. Park | 8\nMr. Gutierrez | 2\nMrs. Ramirez | 3"}
{"level":8,"answer":52.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of purchasing a certain quantity of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item to be purchased.\n    quantity (int): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of purchasing the specified quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['volleyball', 'bowling ball', 'fishing pole', 'volleyball net', 'bicycle helmet'],\n    'Price': [16, 34, 26, 11, 20]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'fishing pole', 2))","question":"How much money does Hassan need to buy 2 fishing poles?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of purchasing a certain quantity of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item to be purchased.\n    quantity (int): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of purchasing the specified quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['volleyball', 'bowling ball', 'fishing pole', 'volleyball net', 'bicycle helmet'],\n    'Price': [16, 34, 26, 11, 20]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'fishing pole', 2))","table":"Name: None\nUnit: $\nContent:\nvolleyball | $16\nbowling ball | $34\nfishing pole | $26\nvolleyball net | $11\nbicycle helmet | $20"}
{"level":2,"answer":60.0,"prediction":"import pandas as pd\n\ndef calculate_total_books(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of books in each pile and returns the total number of books in all piles.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of books in each pile.\n    The DataFrame should have columns 'Number of piles' and 'Number of books'.\n    Returns:\n    int: The total number of books in all piles.\n    \"\"\"\n    # Calculate the total number of books in all piles\n    total_books = df['Number of piles'].sum() * 10\n    \n    return total_books\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of piles': [1, 2, 3, 4, 5, 6],\n    'Number of books': [10, 20, 30, 40, 50, '?']\n})\n# Call the tool to solve the problem\nprint(calculate_total_books(df))","question":"Each pile has 10 books. How many books are in 6 piles?","prediction_code":"import pandas as pd\n\ndef calculate_total_books(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of books in each pile and returns the total number of books in all piles.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of books in each pile.\n    The DataFrame should have columns 'Number of piles' and 'Number of books'.\n    Returns:\n    int: The total number of books in all piles.\n    \"\"\"\n    # Calculate the total number of books in all piles\n    total_books = df['Number of piles'].sum() * 10\n    \n    return total_books","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of piles': [1, 2, 3, 4, 5, 6],\n    'Number of books': [10, 20, 30, 40, 50, '?']\n})\n# Call the tool to solve the problem\nprint(calculate_total_books(df))","table":"Name: None\nUnit: None\nContent:\nNumber of piles | Number of books\n1 | 10\n2 | 20\n3 | 30\n4 | 40\n5 | 50\n6 | ?"}
{"level":6,"answer":3.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of flower plants and returns the range of the numbers of flowers planted.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of flowers planted per day.\n    The dataframe should contain \"Day\" and \"Number of flowers\" columns.\n    Returns:\n    int: The range of the numbers of flowers planted.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of flowers\" column\n    min_flowers = df['Number of flowers'].min()\n    max_flowers = df['Number of flowers'].max()\n    \n    # Calculate the range\n    flower_range = max_flowers - min_flowers\n    \n    return flower_range\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of flowers': [7, 5, 7, 7, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"Tim paid attention to how many flowers he planted in the garden during the past 5 days. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of flower plants and returns the range of the numbers of flowers planted.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of flowers planted per day.\n    The dataframe should contain \"Day\" and \"Number of flowers\" columns.\n    Returns:\n    int: The range of the numbers of flowers planted.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of flowers\" column\n    min_flowers = df['Number of flowers'].min()\n    max_flowers = df['Number of flowers'].max()\n    \n    # Calculate the range\n    flower_range = max_flowers - min_flowers\n    \n    return flower_range","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of flowers': [7, 5, 7, 7, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Flowers plants\nUnit: None\nContent:\nDay | Number of flowers\nTuesday | 7\nWednesday | 5\nThursday | 7\nFriday | 7\nSaturday | 8"}
{"level":6,"answer":18.5,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of an item based on its weight.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per pound for each item.\n    item (str): The name of the item.\n    weight (float): The weight of the item in pounds.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * weight\n        return total_cost\n    else:\n        return None\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['potato salad', 'green salad', 'macaroni salad', 'egg salad'],\n    'Price': [5, 5, 3, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'potato salad', 3 + 7\/10))","question":"Josiah went to the store and bought 3+7\/10 pounds of potato salad. How much did he spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of an item based on its weight.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per pound for each item.\n    item (str): The name of the item.\n    weight (float): The weight of the item in pounds.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * weight\n        return total_cost\n    else:\n        return None","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['potato salad', 'green salad', 'macaroni salad', 'egg salad'],\n    'Price': [5, 5, 3, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'potato salad', 3 + 7\/10))","table":"Name: None\nUnit: $\nContent:\npotato salad | $5 per lb\ngreen salad | $5 per lb\nmacaroni salad | $3 per lb\negg salad | $3 per lb"}
{"level":8,"answer":7.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of spelling words practiced and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of spelling words practiced each day.\n    The dataframe should contain \"Day\" and \"Number of spelling words\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of spelling words']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday'],\n    'Number of spelling words': [7, 4, 9, 7, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"Reggie wrote down how many spelling words he practiced each day. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of spelling words practiced and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of spelling words practiced each day.\n    The dataframe should contain \"Day\" and \"Number of spelling words\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of spelling words']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday'],\n    'Number of spelling words': [7, 4, 9, 7, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Spelling words practiced\nUnit: None\nContent:\nDay | Number of spelling words\nSaturday | 7\nSunday | 4\nMonday | 9\nTuesday | 7\nWednesday | 8"}
{"level":4,"answer":2.0,"prediction":"import pandas as pd\n\ndef calculate_boys_vs_girls_difference(df, teacher_name):\n    \"\"\"\n    This function takes in a pandas DataFrame of fifth grade classes and a teacher's name, and returns the difference between the number of boys and girls in the teacher's class.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of boys and girls in each fifth grade class.\n    The DataFrame should have columns 'Teacher', 'Boys', and 'Girls'.\n    teacher_name (str): The name of the teacher whose class we want to calculate the difference for.\n    Returns:\n    int: The difference between the number of boys and girls in the teacher's class.\n    \"\"\"\n    # Filter the DataFrame for the specific teacher's class\n    teacher_df = df[df['Teacher'] == teacher_name]\n    \n    # Calculate the difference between the number of boys and girls in the teacher's class\n    boys = teacher_df['Boys'].values[0]\n    girls = teacher_df['Girls'].values[0]\n    difference = boys - girls\n    \n    return difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Teacher': ['Mr. Burgundy', 'Ms. Brown', 'Mr. Orange', 'Miss Black'],\n    'Boys': [8, 18, 6, 14],\n    'Girls': [11, 18, 4, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_boys_vs_girls_difference(df, 'Mr. Orange'))","question":"How many more boys than girls are in Mr. Orange's class?","prediction_code":"import pandas as pd\n\ndef calculate_boys_vs_girls_difference(df, teacher_name):\n    \"\"\"\n    This function takes in a pandas DataFrame of fifth grade classes and a teacher's name, and returns the difference between the number of boys and girls in the teacher's class.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of boys and girls in each fifth grade class.\n    The DataFrame should have columns 'Teacher', 'Boys', and 'Girls'.\n    teacher_name (str): The name of the teacher whose class we want to calculate the difference for.\n    Returns:\n    int: The difference between the number of boys and girls in the teacher's class.\n    \"\"\"\n    # Filter the DataFrame for the specific teacher's class\n    teacher_df = df[df['Teacher'] == teacher_name]\n    \n    # Calculate the difference between the number of boys and girls in the teacher's class\n    boys = teacher_df['Boys'].values[0]\n    girls = teacher_df['Girls'].values[0]\n    difference = boys - girls\n    \n    return difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Teacher': ['Mr. Burgundy', 'Ms. Brown', 'Mr. Orange', 'Miss Black'],\n    'Boys': [8, 18, 6, 14],\n    'Girls': [11, 18, 4, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_boys_vs_girls_difference(df, 'Mr. Orange'))","table":"Name: Fifth grade classes\nUnit: boys\nContent:\nTeacher | Boys | Girls\nMr. Burgundy | 8 | 11\nMs. Brown | 18 | 18\nMr. Orange | 6 | 4\nMiss Black | 14 | 6"}
{"level":1,"answer":30.0,"prediction":"import pandas as pd\n\ndef calculate_total_scones(df, num_trays):\n    \"\"\"\n    This function takes in a pandas DataFrame of blueberry scones per tray and the number of trays, and returns the total number of blueberry scones.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of blueberry scones per tray.\n    The dataframe should contain \"Number of trays\" and \"Number of blueberry scones\" columns.\n    num_trays (int): The number of trays.\n    Returns:\n    int: The total number of blueberry scones.\n    \"\"\"\n    # Filter the DataFrame for the specific number of trays\n    tray_df = df[df['Number of trays'] == num_trays]\n    \n    # Get the number of blueberry scones from the filtered DataFrame\n    num_scones = tray_df['Number of blueberry scones'].values[0]\n    \n    return num_scones\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trays': [1, 2, 3, 4, 5, 6],\n    'Number of blueberry scones': [5, 10, 15, 20, 25, '?']\n})\n\n# Call the tool to solve the problem\nnum_scones = calculate_total_scones(df, 6)\n\n# Print out the answer\nprint(num_scones)","question":"Each tray has 5 blueberry scones. How many blueberry scones are on 6 trays?","prediction_code":"import pandas as pd\n\ndef calculate_total_scones(df, num_trays):\n    \"\"\"\n    This function takes in a pandas DataFrame of blueberry scones per tray and the number of trays, and returns the total number of blueberry scones.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of blueberry scones per tray.\n    The dataframe should contain \"Number of trays\" and \"Number of blueberry scones\" columns.\n    num_trays (int): The number of trays.\n    Returns:\n    int: The total number of blueberry scones.\n    \"\"\"\n    # Filter the DataFrame for the specific number of trays\n    tray_df = df[df['Number of trays'] == num_trays]\n    \n    # Get the number of blueberry scones from the filtered DataFrame\n    num_scones = tray_df['Number of blueberry scones'].values[0]\n    \n    return num_scones","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trays': [1, 2, 3, 4, 5, 6],\n    'Number of blueberry scones': [5, 10, 15, 20, 25, '?']\n})\n\n# Call the tool to solve the problem\nnum_scones = calculate_total_scones(df, 6)\n\n# Print out the answer\nprint(num_scones)","table":"Name: None\nUnit: blueberry scones\nContent:\nNumber of trays | Number of blueberry scones\n1 | 5\n2 | 10\n3 | 15\n4 | 20\n5 | 25\n6 | ?"}
{"level":8,"answer":24.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (dict): A dictionary where the keys are item names and the values are the quantities of each item.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item, quantity in items.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['soybeans', 'pumpkin seeds', 'lentils', 'sesame seeds', 'sunflower seeds'],\n    'Price': [4, 4, 4, 7, 3]\n})\n\n# Initialize the items dictionary\nitems = {\n    'sunflower seeds': 4,\n    'soybeans': 3\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"Lauren went to the store. She bought 4 pounds of sunflower seeds and 3 pounds of soybeans. How much did she spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (dict): A dictionary where the keys are item names and the values are the quantities of each item.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item, quantity in items.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['soybeans', 'pumpkin seeds', 'lentils', 'sesame seeds', 'sunflower seeds'],\n    'Price': [4, 4, 4, 7, 3]\n})\n\n# Initialize the items dictionary\nitems = {\n    'sunflower seeds': 4,\n    'soybeans': 3\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nsoybeans | $4\/lb\npumpkin seeds | $4\/lb\nlentils | $4\/lb\nsesame seeds | $7\/lb\nsunflower seeds | $3\/lb"}
{"level":3,"answer":2677.0,"prediction":"import pandas as pd\n\ndef calculate_total_slices_sold(df, restaurants):\n    \"\"\"\n    This function takes in a pandas DataFrame of pizza slices sold and a list of restaurant names, and returns the total number of pizza slices sold by the specified restaurants.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the pizza slices sold with columns 'Restaurant' and 'Number of slices sold'.\n    restaurants (list): A list of restaurant names to calculate the total slices sold for.\n    Returns:\n    int: The total number of pizza slices sold by the specified restaurants.\n    \"\"\"\n    # Filter the DataFrame for the specified restaurants\n    filtered_df = df[df['Restaurant'].isin(restaurants)]\n    \n    # Calculate the total slices sold by the specified restaurants\n    total_slices_sold = filtered_df['Number of slices sold'].sum()\n    \n    return total_slices_sold\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Restaurant': ['Antonio\\'s Pizzeria', 'Pizzas Only', 'Mario\\'s Pizzeria', 'The Big Cheese'],\n    'Number of slices sold': [2364, 1470, 1207, 1667]\n})\n\n# Specify the restaurants to calculate the total slices sold\nrestaurants = ['Pizzas Only', 'Mario\\'s Pizzeria']\n\n# Call the tool to solve the problem\nprint(calculate_total_slices_sold(df, restaurants))","question":"Some pizza restaurants compared their pizza sales. In all, how many pizza slices did Pizzas Only and Mario's Pizzeria sell?","prediction_code":"import pandas as pd\n\ndef calculate_total_slices_sold(df, restaurants):\n    \"\"\"\n    This function takes in a pandas DataFrame of pizza slices sold and a list of restaurant names, and returns the total number of pizza slices sold by the specified restaurants.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the pizza slices sold with columns 'Restaurant' and 'Number of slices sold'.\n    restaurants (list): A list of restaurant names to calculate the total slices sold for.\n    Returns:\n    int: The total number of pizza slices sold by the specified restaurants.\n    \"\"\"\n    # Filter the DataFrame for the specified restaurants\n    filtered_df = df[df['Restaurant'].isin(restaurants)]\n    \n    # Calculate the total slices sold by the specified restaurants\n    total_slices_sold = filtered_df['Number of slices sold'].sum()\n    \n    return total_slices_sold","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Restaurant': ['Antonio\\'s Pizzeria', 'Pizzas Only', 'Mario\\'s Pizzeria', 'The Big Cheese'],\n    'Number of slices sold': [2364, 1470, 1207, 1667]\n})\n\n# Specify the restaurants to calculate the total slices sold\nrestaurants = ['Pizzas Only', 'Mario\\'s Pizzeria']\n\n# Call the tool to solve the problem\nprint(calculate_total_slices_sold(df, restaurants))","table":"Name: Pizza slices sold\nUnit: pizza slices\nContent:\nRestaurant | Number of slices sold\nAntonio's Pizzeria | 2,364\nPizzas Only | 1,470\nMario's Pizzeria | 1,207\nThe Big Cheese | 1,667"}
{"level":7,"answer":6.0,"prediction":"import pandas as pd\n\ndef count_bins_with_fewer_toys(df, threshold):\n    \"\"\"\n    This function takes in a pandas dataframe of toys per bin and a threshold value, and returns the number of bins that have fewer than the threshold number of toys.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of toys per bin.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    threshold (int): The threshold number of toys.\n    Returns:\n    int: The number of bins that have fewer than the threshold number of toys.\n    \"\"\"\n    # prepare a list to calculate the number of toys in each bin\n    toys = []\n    # calculate the total number of toys in each bin\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            toys.append(stem * 10 + leaf[j])\n    # filter the bins where the total number of toys is less than the threshold\n    filtered = [toy for toy in toys if toy < threshold]\n    # count the number of bins\n    num_bins = len(filtered)\n    return num_bins\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[4, 7], [0, 8], [9], [6], [6, 8], [0, 0, 6], [0, 1, 2, 4], [2, 3]]\n})\n# Set the threshold value\nthreshold = 54\n# Call the tool to solve the problem\nprint(count_bins_with_fewer_toys(df, threshold))","question":"A toy store employee counted the number of toys in each bin in the sale section. How many bins had fewer than 54 toys?","prediction_code":"import pandas as pd\n\ndef count_bins_with_fewer_toys(df, threshold):\n    \"\"\"\n    This function takes in a pandas dataframe of toys per bin and a threshold value, and returns the number of bins that have fewer than the threshold number of toys.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of toys per bin.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    threshold (int): The threshold number of toys.\n    Returns:\n    int: The number of bins that have fewer than the threshold number of toys.\n    \"\"\"\n    # prepare a list to calculate the number of toys in each bin\n    toys = []\n    # calculate the total number of toys in each bin\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            toys.append(stem * 10 + leaf[j])\n    # filter the bins where the total number of toys is less than the threshold\n    filtered = [toy for toy in toys if toy < threshold]\n    # count the number of bins\n    num_bins = len(filtered)\n    return num_bins","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[4, 7], [0, 8], [9], [6], [6, 8], [0, 0, 6], [0, 1, 2, 4], [2, 3]]\n})\n# Set the threshold value\nthreshold = 54\n# Call the tool to solve the problem\nprint(count_bins_with_fewer_toys(df, threshold))","table":"Name: Toys per bin\nUnit: bins\nContent:\nStem | Leaf \n1 | 4, 7\n2 | 0, 8\n3 | 9\n4 | 6\n5 | 6, 8\n6 | 0, 0, 6\n7 | 0, 1, 2, 4\n8 | 2, 3"}
{"level":6,"answer":14.0,"prediction":"import pandas as pd\n\ndef count_parks_with_10_roller_coasters(df):\n    \"\"\"\n    This function takes in a pandas dataframe of roller coasters per amusement park, and returns the number of amusement parks that have at least 10 roller coasters.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of roller coasters per amusement park.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of amusement parks that have at least 10 roller coasters.\n    \"\"\"\n    # prepare a list to calculate roller coasters in each amusement park\n    roller_coasters = []\n    # calculate the total number of roller coasters in each amusement park\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            roller_coasters.append(stem * 10 + leaf[j])\n    # filter the amusement parks where the total number of roller coasters is greater than or equal to 10\n    filtered = [coaster for coaster in roller_coasters if coaster >= 10]\n    # count the number of rows\n    num_parks = len(filtered)\n    return num_parks\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[2, 4], [3, 5, 6, 9], [0, 6, 9, 9, 9], [0, 8, 9]]\n})\n# Call the tool to solve the problem\nprint(count_parks_with_10_roller_coasters(df))","question":"Jasper found a list of the number of roller coasters at each amusement park in the state. How many amusement parks have at least 10 roller coasters?","prediction_code":"import pandas as pd\n\ndef count_parks_with_10_roller_coasters(df):\n    \"\"\"\n    This function takes in a pandas dataframe of roller coasters per amusement park, and returns the number of amusement parks that have at least 10 roller coasters.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of roller coasters per amusement park.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of amusement parks that have at least 10 roller coasters.\n    \"\"\"\n    # prepare a list to calculate roller coasters in each amusement park\n    roller_coasters = []\n    # calculate the total number of roller coasters in each amusement park\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            roller_coasters.append(stem * 10 + leaf[j])\n    # filter the amusement parks where the total number of roller coasters is greater than or equal to 10\n    filtered = [coaster for coaster in roller_coasters if coaster >= 10]\n    # count the number of rows\n    num_parks = len(filtered)\n    return num_parks","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[2, 4], [3, 5, 6, 9], [0, 6, 9, 9, 9], [0, 8, 9]]\n})\n# Call the tool to solve the problem\nprint(count_parks_with_10_roller_coasters(df))","table":"Name: Roller coasters per amusement park\nUnit: amusement parks\nContent:\nStem | Leaf \n1 | 2, 4\n2 | 3, 5, 6, 9\n3 | 0, 6, 9, 9, 9\n4 | 0, 8, 9"}
{"level":4,"answer":20.0,"prediction":"import pandas as pd\n\ndef find_shortest_wait_time(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of doctor's office wait times and returns the shortest wait time.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the wait times for each patient.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The shortest wait time in minutes.\n    \"\"\"\n    # prepare a list to store all wait times\n    wait_times = []\n    # iterate through each row of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the wait time for each patient\n        for j in range(len(leaf)):\n            wait_times.append(stem * 10 + leaf[j])\n    # find the shortest wait time\n    shortest_wait_time = min(wait_times)\n    return shortest_wait_time\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6],\n    'Leaf': [[0, 2, 5, 6, 8, 8], [], [0, 2, 4, 5], [1, 1, 2, 5, 5, 5, 7], [0, 0, 3, 7, 7, 8, 9]]\n})\n# Call the tool to solve the problem\nprint(find_shortest_wait_time(df))","question":"The receptionist at a doctor's office kept track of each patient's wait time. What is the shortest wait time?","prediction_code":"import pandas as pd\n\ndef find_shortest_wait_time(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of doctor's office wait times and returns the shortest wait time.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the wait times for each patient.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The shortest wait time in minutes.\n    \"\"\"\n    # prepare a list to store all wait times\n    wait_times = []\n    # iterate through each row of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the wait time for each patient\n        for j in range(len(leaf)):\n            wait_times.append(stem * 10 + leaf[j])\n    # find the shortest wait time\n    shortest_wait_time = min(wait_times)\n    return shortest_wait_time","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6],\n    'Leaf': [[0, 2, 5, 6, 8, 8], [], [0, 2, 4, 5], [1, 1, 2, 5, 5, 5, 7], [0, 0, 3, 7, 7, 8, 9]]\n})\n# Call the tool to solve the problem\nprint(find_shortest_wait_time(df))","table":"Name: Doctor's office wait times (minutes)\nUnit: minutes\nContent:\nStem | Leaf \n2 | 0, 2, 5, 6, 8, 8\n3 | \n4 | 0, 2, 4, 5\n5 | 1, 1, 2, 5, 5, 5, 7\n6 | 0, 0, 3, 7, 7, 8, 9"}
{"level":6,"answer":14.7,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item given its quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price of the item\n        price = item_df['Price'].values[0]\n        \n        # Calculate the total cost\n        total_cost = price * quantity\n        \n        return total_cost\n    else:\n        return None\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['dried pear', 'dried mango', 'raisins', 'banana chips', 'dried apple', 'dried pineapple'],\n    'Price': [2, 4, 2, 3, 3, 3]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'banana chips', 4.9))","question":"Bobby buys 4.9 pounds of banana chips. How much does he spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item given its quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price of the item\n        price = item_df['Price'].values[0]\n        \n        # Calculate the total cost\n        total_cost = price * quantity\n        \n        return total_cost\n    else:\n        return None","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['dried pear', 'dried mango', 'raisins', 'banana chips', 'dried apple', 'dried pineapple'],\n    'Price': [2, 4, 2, 3, 3, 3]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'banana chips', 4.9))","table":"Name: None\nUnit: $\nContent:\ndried pear | $2\/pound\ndried mango | $4\/pound\nraisins | $2\/pound\nbanana chips | $3\/pound\ndried apple | $3\/pound\ndried pineapple | $3\/pound"}
{"level":8,"answer":2.0,"prediction":"import pandas as pd\n\ndef count_people_with_exact_frequency(df, frequency):\n    \"\"\"\n    This function takes in a pandas DataFrame of swimming frequency and a frequency value, and returns the number of people who went swimming exactly the given number of times.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of times people went swimming and their corresponding frequencies.\n    The DataFrame should contain \"Number of times\" and \"Frequency\" columns.\n    frequency (int): The number of times people went swimming to count.\n    Returns:\n    int: The number of people who went swimming exactly the given number of times.\n    \"\"\"\n    # Filter the DataFrame for the rows with the given frequency\n    filtered_df = df[df['Number of times'] == frequency]\n    \n    # Sum the frequencies of the filtered rows\n    num_people = filtered_df['Frequency'].sum()\n    \n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of times': [1, 2, 3, 4],\n    'Frequency': [15, 2, 4, 5]\n})\n# Call the tool to solve the problem\nprint(count_people_with_exact_frequency(df, 2))","question":"Cedarburg will decide whether to extend its public pool's hours by looking at the number of times its residents visited the pool last month. How many people went swimming exactly twice last month?","prediction_code":"import pandas as pd\n\ndef count_people_with_exact_frequency(df, frequency):\n    \"\"\"\n    This function takes in a pandas DataFrame of swimming frequency and a frequency value, and returns the number of people who went swimming exactly the given number of times.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of times people went swimming and their corresponding frequencies.\n    The DataFrame should contain \"Number of times\" and \"Frequency\" columns.\n    frequency (int): The number of times people went swimming to count.\n    Returns:\n    int: The number of people who went swimming exactly the given number of times.\n    \"\"\"\n    # Filter the DataFrame for the rows with the given frequency\n    filtered_df = df[df['Number of times'] == frequency]\n    \n    # Sum the frequencies of the filtered rows\n    num_people = filtered_df['Frequency'].sum()\n    \n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of times': [1, 2, 3, 4],\n    'Frequency': [15, 2, 4, 5]\n})\n# Call the tool to solve the problem\nprint(count_people_with_exact_frequency(df, 2))","table":"Name: Going swimming last month\nUnit: None\nContent:\nNumber of times | Frequency\n1 | 15\n2 | 2\n3 | 4\n4 | 5"}
{"level":4,"answer":10.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['purple T-shirt', 'pair of white socks', 'orange T-shirt', 'black skirt'],\n    'Price': [8, 6, 2, 3]\n})\n\n# Define the items to be purchased\nitems = ['purple T-shirt', 'orange T-shirt']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, items)\n\n# Print out the answer\nprint(total_cost)","question":"How much money does Jessica need to buy a purple T-shirt and an orange T-shirt?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['purple T-shirt', 'pair of white socks', 'orange T-shirt', 'black skirt'],\n    'Price': [8, 6, 2, 3]\n})\n\n# Define the items to be purchased\nitems = ['purple T-shirt', 'orange T-shirt']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, items)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\npurple T-shirt | $8\npair of white socks | $6\norange T-shirt | $2\nblack skirt | $3"}
{"level":3,"answer":625.0,"prediction":"import pandas as pd\n\ndef calculate_difference(df, restaurant1, restaurant2):\n    \"\"\"\n    This function takes in a pandas DataFrame of pizza slices sold and two restaurant names, and returns the difference in pizza slices sold between the two restaurants.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of pizza slices sold by each restaurant.\n    The DataFrame should have columns 'Restaurant' and 'Number of slices sold'.\n    restaurant1 (str): The name of the first restaurant.\n    restaurant2 (str): The name of the second restaurant.\n    Returns:\n    int: The difference in pizza slices sold between the two restaurants.\n    \"\"\"\n    # Filter the DataFrame for the two restaurants\n    restaurant1_df = df[df['Restaurant'] == restaurant1]\n    restaurant2_df = df[df['Restaurant'] == restaurant2]\n    \n    # Get the number of slices sold for each restaurant\n    slices_sold1 = restaurant1_df['Number of slices sold'].values[0]\n    slices_sold2 = restaurant2_df['Number of slices sold'].values[0]\n    \n    # Calculate the difference in slices sold\n    difference = slices_sold2 - slices_sold1\n    \n    return difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Restaurant': ['Pizzeria Italiano', \"Mario's Pizzeria\", 'The Real Chicago'],\n    'Number of slices sold': [213, 660, 838]\n})\n# Call the tool to solve the problem\nprint(calculate_difference(df, 'Pizzeria Italiano', 'The Real Chicago'))","question":"Some pizza restaurants compared their pizza sales. How many more pizza slices did The Real Chicago sell than Pizzeria Italiano?","prediction_code":"import pandas as pd\n\ndef calculate_difference(df, restaurant1, restaurant2):\n    \"\"\"\n    This function takes in a pandas DataFrame of pizza slices sold and two restaurant names, and returns the difference in pizza slices sold between the two restaurants.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of pizza slices sold by each restaurant.\n    The DataFrame should have columns 'Restaurant' and 'Number of slices sold'.\n    restaurant1 (str): The name of the first restaurant.\n    restaurant2 (str): The name of the second restaurant.\n    Returns:\n    int: The difference in pizza slices sold between the two restaurants.\n    \"\"\"\n    # Filter the DataFrame for the two restaurants\n    restaurant1_df = df[df['Restaurant'] == restaurant1]\n    restaurant2_df = df[df['Restaurant'] == restaurant2]\n    \n    # Get the number of slices sold for each restaurant\n    slices_sold1 = restaurant1_df['Number of slices sold'].values[0]\n    slices_sold2 = restaurant2_df['Number of slices sold'].values[0]\n    \n    # Calculate the difference in slices sold\n    difference = slices_sold2 - slices_sold1\n    \n    return difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Restaurant': ['Pizzeria Italiano', \"Mario's Pizzeria\", 'The Real Chicago'],\n    'Number of slices sold': [213, 660, 838]\n})\n# Call the tool to solve the problem\nprint(calculate_difference(df, 'Pizzeria Italiano', 'The Real Chicago'))","table":"Name: Pizza slices sold\nUnit: pizza slices\nContent:\nRestaurant | Number of slices sold\nPizzeria Italiano | 213\nMario's Pizzeria | 660\nThe Real Chicago | 838"}
{"level":7,"answer":4.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of hours of babysitting per month and returns the median of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of hours of babysitting per month.\n    The dataframe should contain \"Month\" and \"Hours\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the \"Hours\" column from the DataFrame\n    hours = df['Hours']\n    \n    # Calculate the median using the pandas median function\n    median = hours.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['September', 'October', 'November', 'December', 'January', 'February', 'March'],\n    'Hours': [3, 8, 2, 4, 3, 6, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"Kimi looked at her calendar to figure out how much time she spent babysitting each month. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of hours of babysitting per month and returns the median of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of hours of babysitting per month.\n    The dataframe should contain \"Month\" and \"Hours\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the \"Hours\" column from the DataFrame\n    hours = df['Hours']\n    \n    # Calculate the median using the pandas median function\n    median = hours.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['September', 'October', 'November', 'December', 'January', 'February', 'March'],\n    'Hours': [3, 8, 2, 4, 3, 6, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Hours of babysitting\nUnit: None\nContent:\nMonth | Hours\nSeptember | 3\nOctober | 8\nNovember | 2\nDecember | 4\nJanuary | 3\nFebruary | 6\nMarch | 9"}
{"level":8,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of photographs taken and returns the median of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of photographs taken each day.\n    The dataframe should contain \"Day\" and \"Number of photographs\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the number of photographs for the past 5 days\n    past_5_days = df.tail(5)\n    \n    # Get the number of photographs as a list\n    num_photos = past_5_days['Number of photographs'].tolist()\n    \n    # Calculate the median\n    median = pd.Series(num_photos).median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Number of photographs': [5, 3, 4, 5, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"Camilla looked at the dates of the digital photos on her computer to find out how many she had taken in the past 5 days. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of photographs taken and returns the median of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of photographs taken each day.\n    The dataframe should contain \"Day\" and \"Number of photographs\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the number of photographs for the past 5 days\n    past_5_days = df.tail(5)\n    \n    # Get the number of photographs as a list\n    num_photos = past_5_days['Number of photographs'].tolist()\n    \n    # Calculate the median\n    median = pd.Series(num_photos).median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Number of photographs': [5, 3, 4, 5, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Photographs taken\nUnit: None\nContent:\nDay | Number of photographs\nFriday | 5\nSaturday | 3\nSunday | 4\nMonday | 5\nTuesday | 8"}
{"level":6,"answer":4.8,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its price per pound and the quantity purchased.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per pound for different items with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item purchased in pounds.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price per pound for the item\n        price_per_pound = item_df['Price'].values[0]\n        \n        # Calculate the total cost\n        total_cost = price_per_pound * quantity\n        \n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['licorice', 'yogurt-covered peanuts', 'lemon sours', 'chocolate-covered raisins'],\n    'Price': [4, 3, 4, 4]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'chocolate-covered raisins', 1.2))","question":"Oscar bought 1.2 pounds of chocolate-covered raisins. How much did he spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its price per pound and the quantity purchased.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per pound for different items with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item purchased in pounds.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price per pound for the item\n        price_per_pound = item_df['Price'].values[0]\n        \n        # Calculate the total cost\n        total_cost = price_per_pound * quantity\n        \n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['licorice', 'yogurt-covered peanuts', 'lemon sours', 'chocolate-covered raisins'],\n    'Price': [4, 3, 4, 4]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'chocolate-covered raisins', 1.2))","table":"Name: None\nUnit: $\nContent:\nlicorice | $4\/lb\nyogurt-covered peanuts | $3\/lb\nlemon sours | $4\/lb\nchocolate-covered raisins | $4\/lb"}
{"level":2,"answer":60.0,"prediction":"import pandas as pd\n\ndef calculate_total_tadpoles(df, num_tanks):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of tanks and number of tadpoles per tank, and returns the total number of tadpoles in a given number of tanks.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of tanks and number of tadpoles per tank.\n    The dataframe should contain \"Number of tanks\" and \"Number of tadpoles\" columns.\n    num_tanks (int): The number of tanks to calculate the total number of tadpoles for.\n    Returns:\n    int: The total number of tadpoles in the given number of tanks.\n    \"\"\"\n    # Filter the DataFrame for the given number of tanks\n    filtered_df = df[df['Number of tanks'] <= num_tanks]\n    \n    # Calculate the total number of tadpoles\n    total_tadpoles = filtered_df['Number of tadpoles'].sum()\n    \n    return total_tadpoles\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of tanks': [1, 2, 3, 4, 5, 6],\n    'Number of tadpoles': [10, 20, 30, 40, 50, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_tadpoles(df, 6))","question":"Each tank has 10 tadpoles. How many tadpoles are in 6 tanks?","prediction_code":"import pandas as pd\n\ndef calculate_total_tadpoles(df, num_tanks):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of tanks and number of tadpoles per tank, and returns the total number of tadpoles in a given number of tanks.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of tanks and number of tadpoles per tank.\n    The dataframe should contain \"Number of tanks\" and \"Number of tadpoles\" columns.\n    num_tanks (int): The number of tanks to calculate the total number of tadpoles for.\n    Returns:\n    int: The total number of tadpoles in the given number of tanks.\n    \"\"\"\n    # Filter the DataFrame for the given number of tanks\n    filtered_df = df[df['Number of tanks'] <= num_tanks]\n    \n    # Calculate the total number of tadpoles\n    total_tadpoles = filtered_df['Number of tadpoles'].sum()\n    \n    return total_tadpoles","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of tanks': [1, 2, 3, 4, 5, 6],\n    'Number of tadpoles': [10, 20, 30, 40, 50, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_tadpoles(df, 6))","table":"Name: None\nUnit: None\nContent:\nNumber of tanks | Number of tadpoles\n1 | 10\n2 | 20\n3 | 30\n4 | 40\n5 | 50\n6 | ?"}
{"level":6,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of fire hydrants per street and returns the median number of hydrants.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of fire hydrants per street.\n    The dataframe should contain \"Street\" and \"Number of hydrants\" columns.\n    Returns:\n    float: The median number of fire hydrants.\n    \"\"\"\n    # Get the column of number of hydrants\n    hydrants = df['Number of hydrants']\n    \n    # Calculate the median\n    median = hydrants.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Street': ['Maple Street', 'Cedar Street', 'Fir Street', 'Oak Street', 'Pine Street', 'Rose Street', 'Aspen Street'],\n    'Number of hydrants': [6, 5, 4, 4, 6, 5, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"The city recorded how many fire hydrants there are on each street. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of fire hydrants per street and returns the median number of hydrants.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of fire hydrants per street.\n    The dataframe should contain \"Street\" and \"Number of hydrants\" columns.\n    Returns:\n    float: The median number of fire hydrants.\n    \"\"\"\n    # Get the column of number of hydrants\n    hydrants = df['Number of hydrants']\n    \n    # Calculate the median\n    median = hydrants.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Street': ['Maple Street', 'Cedar Street', 'Fir Street', 'Oak Street', 'Pine Street', 'Rose Street', 'Aspen Street'],\n    'Number of hydrants': [6, 5, 4, 4, 6, 5, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Fire hydrants\nUnit: None\nContent:\nStreet | Number of hydrants\nMaple Street | 6\nCedar Street | 5\nFir Street | 4\nOak Street | 4\nPine Street | 6\nRose Street | 5\nAspen Street | 7"}
{"level":8,"answer":2.0,"prediction":"import pandas as pd\n\ndef count_people_saw_whales(df, num_whales):\n    \"\"\"\n    This function takes in a pandas DataFrame of whale sightings and the number of whales, and returns the number of people who saw exactly the given number of whales.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of whales spotted and their frequencies.\n    The DataFrame should have columns 'Whales spotted' and 'Frequency'.\n    num_whales (int): The number of whales to count.\n    Returns:\n    int: The number of people who saw exactly the given number of whales.\n    \"\"\"\n    # Filter the DataFrame for the rows where the number of whales spotted is equal to the given number\n    filtered_df = df[df['Whales spotted'] == num_whales]\n    \n    # Get the frequency for the filtered rows\n    frequency = filtered_df['Frequency'].values[0]\n    \n    return frequency\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Whales spotted': [0, 1, 2, 3, 4, 5, 6],\n    'Frequency': [1, 18, 20, 8, 0, 17, 2]\n})\n# Call the tool to solve the problem\nprint(count_people_saw_whales(df, 6))","question":"An adventure tour company found out how many whales people saw on its most popular whale tour. How many people saw exactly 6 whales?","prediction_code":"import pandas as pd\n\ndef count_people_saw_whales(df, num_whales):\n    \"\"\"\n    This function takes in a pandas DataFrame of whale sightings and the number of whales, and returns the number of people who saw exactly the given number of whales.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of whales spotted and their frequencies.\n    The DataFrame should have columns 'Whales spotted' and 'Frequency'.\n    num_whales (int): The number of whales to count.\n    Returns:\n    int: The number of people who saw exactly the given number of whales.\n    \"\"\"\n    # Filter the DataFrame for the rows where the number of whales spotted is equal to the given number\n    filtered_df = df[df['Whales spotted'] == num_whales]\n    \n    # Get the frequency for the filtered rows\n    frequency = filtered_df['Frequency'].values[0]\n    \n    return frequency","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Whales spotted': [0, 1, 2, 3, 4, 5, 6],\n    'Frequency': [1, 18, 20, 8, 0, 17, 2]\n})\n# Call the tool to solve the problem\nprint(count_people_saw_whales(df, 6))","table":"Name: Whale watching\nUnit: None\nContent:\nWhales spotted | Frequency\n0 | 1\n1 | 18\n2 | 20\n3 | 8\n4 | 0\n5 | 17\n6 | 2"}
{"level":8,"answer":384.0,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, hotel1, hotel2):\n    \"\"\"\n    This function takes in a pandas DataFrame of hotel prices and the names of two hotels, and returns the price difference between the two hotels.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing hotel prices with columns 'Hotel' and 'Price'.\n    hotel1 (str): The name of the first hotel.\n    hotel2 (str): The name of the second hotel.\n    Returns:\n    float: The price difference between the two hotels.\n    \"\"\"\n    # Filter the DataFrame for the two hotels\n    hotel1_df = df[df['Hotel'] == hotel1]\n    hotel2_df = df[df['Hotel'] == hotel2]\n    \n    # Get the prices for the two hotels\n    hotel1_price = hotel1_df['Price'].values[0]\n    hotel2_price = hotel2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = hotel2_price - hotel1_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Hotel': [\"night's stay at Grand Vista Hotel\", \"night's stay at Lakeview Hotel\", \"night's stay at Hotel Marie\", \"night's stay at Quiet Harbor Motel\", \"night's stay at Bay Breeze Resort\"],\n    'Price': [302.00, 761.00, 162.00, 101.00, 377.00]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, \"night's stay at Lakeview Hotel\", \"night's stay at Bay Breeze Resort\"))","question":"How much more does a night's stay at Lakeview Hotel cost than a night's stay at Bay Breeze Resort?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, hotel1, hotel2):\n    \"\"\"\n    This function takes in a pandas DataFrame of hotel prices and the names of two hotels, and returns the price difference between the two hotels.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing hotel prices with columns 'Hotel' and 'Price'.\n    hotel1 (str): The name of the first hotel.\n    hotel2 (str): The name of the second hotel.\n    Returns:\n    float: The price difference between the two hotels.\n    \"\"\"\n    # Filter the DataFrame for the two hotels\n    hotel1_df = df[df['Hotel'] == hotel1]\n    hotel2_df = df[df['Hotel'] == hotel2]\n    \n    # Get the prices for the two hotels\n    hotel1_price = hotel1_df['Price'].values[0]\n    hotel2_price = hotel2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = hotel2_price - hotel1_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Hotel': [\"night's stay at Grand Vista Hotel\", \"night's stay at Lakeview Hotel\", \"night's stay at Hotel Marie\", \"night's stay at Quiet Harbor Motel\", \"night's stay at Bay Breeze Resort\"],\n    'Price': [302.00, 761.00, 162.00, 101.00, 377.00]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, \"night's stay at Lakeview Hotel\", \"night's stay at Bay Breeze Resort\"))","table":"Name: None\nUnit: $\nContent:\nnight's stay at Grand Vista Hotel | $302.00\nnight's stay at Lakeview Hotel | $761.00\nnight's stay at Hotel Marie | $162.00\nnight's stay at Quiet Harbor Motel | $101.00\nnight's stay at Bay Breeze Resort | $377.00"}
{"level":5,"answer":11.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of watermelons harvested and returns the range of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of watermelons harvested.\n    The dataframe should contain \"Day\" and \"Number of watermelons\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of watermelons\" column\n    min_value = df['Number of watermelons'].min()\n    max_value = df['Number of watermelons'].max()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Number of watermelons': [14, 21, 10, 11, 12, 19, 13]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"A farmer recalled how many watermelons were harvested in the past 7 days. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of watermelons harvested and returns the range of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of watermelons harvested.\n    The dataframe should contain \"Day\" and \"Number of watermelons\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of watermelons\" column\n    min_value = df['Number of watermelons'].min()\n    max_value = df['Number of watermelons'].max()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Number of watermelons': [14, 21, 10, 11, 12, 19, 13]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Watermelons harvested\nUnit: None\nContent:\nDay | Number of watermelons\nFriday | 14\nSaturday | 21\nSunday | 10\nMonday | 11\nTuesday | 12\nWednesday | 19\nThursday | 13"}
{"level":6,"answer":1.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a given item and quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information for different items.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price per kilogram\n        price_per_kg = item_df['Unit'].values[0]\n        \n        # Calculate the total cost\n        total_cost = price_per_kg * quantity\n        \n        return total_cost\n    else:\n        return None\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['pimento olives', 'Greek olives', 'Kalamata olives', 'Spanish olives', 'green olives'],\n    'Unit': [3, 2, 3, 3, 3]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'Greek olives', 0.5))","question":"If Christine buys 1\/2 of a kilogram of Greek olives, how much will she spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a given item and quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information for different items.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price per kilogram\n        price_per_kg = item_df['Unit'].values[0]\n        \n        # Calculate the total cost\n        total_cost = price_per_kg * quantity\n        \n        return total_cost\n    else:\n        return None","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['pimento olives', 'Greek olives', 'Kalamata olives', 'Spanish olives', 'green olives'],\n    'Unit': [3, 2, 3, 3, 3]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'Greek olives', 0.5))","table":"Name: None\nUnit: $\nContent:\npimento olives | $3\/kilogram\nGreek olives | $2\/kilogram\nKalamata olives | $3\/kilogram\nSpanish olives | $3\/kilogram\ngreen olives | $3\/kilogram"}
{"level":6,"answer":1.4,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its price per pound and the quantity purchased.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per pound for each item.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item purchased in pounds.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price per pound for the item\n    price_per_pound = item_df['Unit'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price_per_pound * quantity\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['rice', 'barley', 'couscous', 'rye'],\n    'Unit': [3, 2, 1, 1]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'couscous', 1.4))","question":"Tori went to the store. She bought 1.4 pounds of couscous. How much did she spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its price per pound and the quantity purchased.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per pound for each item.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item purchased in pounds.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price per pound for the item\n    price_per_pound = item_df['Unit'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price_per_pound * quantity\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['rice', 'barley', 'couscous', 'rye'],\n    'Unit': [3, 2, 1, 1]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'couscous', 1.4))","table":"Name: None\nUnit: $\nContent:\nrice | $3 per pound\nbarley | $2 per pound\ncouscous | $1 per pound\nrye | $1 per pound"}
{"level":8,"answer":13.45,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of items, and returns the total cost of the items using pandas.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (dict): A dictionary where the keys are item names and the values are the quantities of each item.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item, quantity in items.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['smoked bacon', 'salami', 'pepperoni', 'sliced ham'],\n    'Price': [2.61, 3.25, 2.01, 1.69]\n})\n\n# Initialize the items dictionary\nitems = {\n    'pepperoni': 1,\n    'sliced ham': 1,\n    'salami': 3\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"Wyatt buys 1 kilogram of pepperoni, 1 kilogram of sliced ham, and 3 kilograms of salami. How much does he spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of items, and returns the total cost of the items using pandas.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (dict): A dictionary where the keys are item names and the values are the quantities of each item.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item, quantity in items.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['smoked bacon', 'salami', 'pepperoni', 'sliced ham'],\n    'Price': [2.61, 3.25, 2.01, 1.69]\n})\n\n# Initialize the items dictionary\nitems = {\n    'pepperoni': 1,\n    'sliced ham': 1,\n    'salami': 3\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nsmoked bacon | $2.61 per kilogram\nsalami | $3.25 per kilogram\npepperoni | $2.01 per kilogram\nsliced ham | $1.69 per kilogram"}
{"level":8,"answer":22.0,"prediction":"import pandas as pd\n\ndef find_smallest_number_of_actors(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of actors per movie and returns the smallest number of actors.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of actors per movie.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of actors.\n    \"\"\"\n    # prepare a list to store the number of actors in each movie\n    actors = []\n    # calculate the total number of actors in each movie\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        actors.append(stem * 10 + min(leaf))\n    # find the smallest number of actors\n    smallest_number_of_actors = min(actors)\n    return smallest_number_of_actors\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7],\n    'Leaf': [[2, 3, 4, 6, 7, 9], [0, 2, 4, 4, 6, 6, 6, 7], [2, 3, 5], [], [5, 6, 6], [0, 4, 4, 9]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_actors(df))","question":"The movie critic liked to count the number of actors in each movie he saw. What is the smallest number of actors?","prediction_code":"import pandas as pd\n\ndef find_smallest_number_of_actors(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of actors per movie and returns the smallest number of actors.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of actors per movie.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of actors.\n    \"\"\"\n    # prepare a list to store the number of actors in each movie\n    actors = []\n    # calculate the total number of actors in each movie\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        actors.append(stem * 10 + min(leaf))\n    # find the smallest number of actors\n    smallest_number_of_actors = min(actors)\n    return smallest_number_of_actors","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7],\n    'Leaf': [[2, 3, 4, 6, 7, 9], [0, 2, 4, 4, 6, 6, 6, 7], [2, 3, 5], [], [5, 6, 6], [0, 4, 4, 9]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_actors(df))","table":"Name: Actors per movie\nUnit: actors\nContent:\nStem | Leaf \n2 | 2, 3, 4, 6, 7, 9\n3 | 0, 2, 4, 4, 6, 6, 6, 7\n4 | 2, 3, 5\n5 | \n6 | 5, 6, 6\n7 | 0, 4, 4, 9"}
{"level":6,"answer":6.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of grocery stores in each town and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of grocery stores in each town.\n    The dataframe should contain \"Town\" and \"Number of stores\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of stores\" column\n    min_stores = df['Number of stores'].min()\n    max_stores = df['Number of stores'].max()\n    \n    # Calculate the range\n    range_stores = max_stores - min_stores\n    \n    return range_stores\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Town': ['Columbia', 'Riverside', 'Mayfield', 'Salem', 'Ashland', 'Watertown', 'Greenwood', 'Richmond'],\n    'Number of stores': [8, 4, 5, 6, 8, 9, 3, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"A newspaper researched how many grocery stores there are in each town. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of grocery stores in each town and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of grocery stores in each town.\n    The dataframe should contain \"Town\" and \"Number of stores\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of stores\" column\n    min_stores = df['Number of stores'].min()\n    max_stores = df['Number of stores'].max()\n    \n    # Calculate the range\n    range_stores = max_stores - min_stores\n    \n    return range_stores","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Town': ['Columbia', 'Riverside', 'Mayfield', 'Salem', 'Ashland', 'Watertown', 'Greenwood', 'Richmond'],\n    'Number of stores': [8, 4, 5, 6, 8, 9, 3, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Grocery stores in each town\nUnit: None\nContent:\nTown | Number of stores\nColumbia | 8\nRiverside | 4\nMayfield | 5\nSalem | 6\nAshland | 8\nWatertown | 9\nGreenwood | 3\nRichmond | 8"}
{"level":3,"answer":3996.0,"prediction":"import pandas as pd\n\ndef calculate_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of charity donations and returns the difference in the number of donations between June and May.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of donations per month.\n    The DataFrame should have columns 'Month' and 'Number of donations'.\n    Returns:\n    int: The difference in the number of donations between June and May.\n    \"\"\"\n    # Filter the DataFrame for June and May\n    june_donations = df[df['Month'] == 'June']['Number of donations'].values[0]\n    may_donations = df[df['Month'] == 'May']['Number of donations'].values[0]\n    \n    # Calculate the difference\n    difference = june_donations - may_donations\n    \n    return difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['March', 'April', 'May', 'June', 'July'],\n    'Number of donations': [6439, 2880, 1268, 5264, 7549]\n})\n# Call the tool to solve the problem\nprint(calculate_difference(df))","question":"A charity recorded how many donations it received each month. How many more donations did the charity receive in June than in May?","prediction_code":"import pandas as pd\n\ndef calculate_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of charity donations and returns the difference in the number of donations between June and May.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of donations per month.\n    The DataFrame should have columns 'Month' and 'Number of donations'.\n    Returns:\n    int: The difference in the number of donations between June and May.\n    \"\"\"\n    # Filter the DataFrame for June and May\n    june_donations = df[df['Month'] == 'June']['Number of donations'].values[0]\n    may_donations = df[df['Month'] == 'May']['Number of donations'].values[0]\n    \n    # Calculate the difference\n    difference = june_donations - may_donations\n    \n    return difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['March', 'April', 'May', 'June', 'July'],\n    'Number of donations': [6439, 2880, 1268, 5264, 7549]\n})\n# Call the tool to solve the problem\nprint(calculate_difference(df))","table":"Name: Charity donations\nUnit: donations\nContent:\nMonth | Number of donations\nMarch | 6,439\nApril | 2,880\nMay | 1,268\nJune | 5,264\nJuly | 7,549"}
{"level":5,"answer":208.71,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['chandelier', 'crystal sculpture', 'lamp', 'silver coat rack', 'ceramic vase', 'crystal vase'],\n    'Price': [86.17, 70.50, 91.45, 56.81, 77.87, 60.34]\n})\n\n# Define the items to calculate the total cost\nitems = ['crystal vase', 'crystal sculpture', 'ceramic vase']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, items)\n\n# Print out the answer\nprint(total_cost)","question":"How much money does Brody need to buy a crystal vase, a crystal sculpture, and a ceramic vase?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['chandelier', 'crystal sculpture', 'lamp', 'silver coat rack', 'ceramic vase', 'crystal vase'],\n    'Price': [86.17, 70.50, 91.45, 56.81, 77.87, 60.34]\n})\n\n# Define the items to calculate the total cost\nitems = ['crystal vase', 'crystal sculpture', 'ceramic vase']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, items)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\nchandelier | $86.17\ncrystal sculpture | $70.50\nlamp | $91.45\nsilver coat rack | $56.81\nceramic vase | $77.87\ncrystal vase | $60.34"}
{"level":7,"answer":20.0,"prediction":"import pandas as pd\n\ndef count_participants_with_more_than_4_pullups(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pull-up data and returns the number of participants who completed more than 4 pull-ups.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of pull-ups completed by each participant.\n    The DataFrame should contain \"Number of pull-ups\" and \"Frequency\" columns.\n    Returns:\n    int: The number of participants who completed more than 4 pull-ups.\n    \"\"\"\n    # Filter the DataFrame for participants who completed more than 4 pull-ups\n    filtered_df = df[df['Number of pull-ups'] > 4]\n    \n    # Calculate the total number of participants\n    num_participants = filtered_df['Frequency'].sum()\n    \n    return num_participants\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of pull-ups': [0, 1, 2, 3, 4, 5, 6],\n    'Frequency': [7, 20, 19, 10, 2, 8, 12]\n})\n# Call the tool to solve the problem\nprint(count_participants_with_more_than_4_pullups(df))","question":"Regan, a fitness counselor, counted the number of pull-ups completed by each bootcamp participant. How many participants did more than 4 pull-ups?","prediction_code":"import pandas as pd\n\ndef count_participants_with_more_than_4_pullups(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pull-up data and returns the number of participants who completed more than 4 pull-ups.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of pull-ups completed by each participant.\n    The DataFrame should contain \"Number of pull-ups\" and \"Frequency\" columns.\n    Returns:\n    int: The number of participants who completed more than 4 pull-ups.\n    \"\"\"\n    # Filter the DataFrame for participants who completed more than 4 pull-ups\n    filtered_df = df[df['Number of pull-ups'] > 4]\n    \n    # Calculate the total number of participants\n    num_participants = filtered_df['Frequency'].sum()\n    \n    return num_participants","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of pull-ups': [0, 1, 2, 3, 4, 5, 6],\n    'Frequency': [7, 20, 19, 10, 2, 8, 12]\n})\n# Call the tool to solve the problem\nprint(count_participants_with_more_than_4_pullups(df))","table":"Name: Doing pull-ups\nUnit: None\nContent:\nNumber of pull-ups | Frequency\n0 | 7\n1 | 20\n2 | 19\n3 | 10\n4 | 2\n5 | 8\n6 | 12"}
{"level":6,"answer":9.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of stuffed animal collections and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and numbers of stuffed animals.\n    The dataframe should contain \"Name\" and \"Number of stuffed animals\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of stuffed animals']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Tiana', 'Mitch', 'Riley', 'Lucy', 'Seth'],\n    'Number of stuffed animals': [9, 9, 8, 6, 10]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"Some friends compared the sizes of their stuffed animal collections. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of stuffed animal collections and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and numbers of stuffed animals.\n    The dataframe should contain \"Name\" and \"Number of stuffed animals\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of stuffed animals']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Tiana', 'Mitch', 'Riley', 'Lucy', 'Seth'],\n    'Number of stuffed animals': [9, 9, 8, 6, 10]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Stuffed animal collections\nUnit: None\nContent:\nName | Number of stuffed animals\nTiana | 9\nMitch | 9\nRiley | 8\nLucy | 6\nSeth | 10"}
{"level":5,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_medal_difference(df, country):\n    \"\"\"\n    This function takes in a pandas DataFrame of Olympic medals won by countries and a specific country name, and returns the difference in medals won by that country between two years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of medals won by countries in different years.\n    The DataFrame should have columns 'Country', '2004', and '2008'.\n    country (str): The name of the country to calculate the medal difference for.\n    Returns:\n    int: The difference in medals won by the country between 2008 and 2004.\n    \"\"\"\n    # Filter the DataFrame for the specific country\n    country_df = df[df['Country'] == country]\n    \n    # Get the number of medals won by the country in 2004 and 2008\n    medals_2004 = country_df['2004'].values[0]\n    medals_2008 = country_df['2008'].values[0]\n    \n    # Calculate the difference in medals\n    medal_difference = medals_2008 - medals_2004\n    \n    return medal_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Country': ['Finland', 'Brazil', 'Sweden'],\n    '2004': [2, 10, 7],\n    '2008': [4, 15, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_medal_difference(df, 'Brazil'))","question":"A sports fan decided to examine the pattern of medals won by certain countries at several Olympic games. How many more medals did Brazil win in 2008 than in 2004?","prediction_code":"import pandas as pd\n\ndef calculate_medal_difference(df, country):\n    \"\"\"\n    This function takes in a pandas DataFrame of Olympic medals won by countries and a specific country name, and returns the difference in medals won by that country between two years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of medals won by countries in different years.\n    The DataFrame should have columns 'Country', '2004', and '2008'.\n    country (str): The name of the country to calculate the medal difference for.\n    Returns:\n    int: The difference in medals won by the country between 2008 and 2004.\n    \"\"\"\n    # Filter the DataFrame for the specific country\n    country_df = df[df['Country'] == country]\n    \n    # Get the number of medals won by the country in 2004 and 2008\n    medals_2004 = country_df['2004'].values[0]\n    medals_2008 = country_df['2008'].values[0]\n    \n    # Calculate the difference in medals\n    medal_difference = medals_2008 - medals_2004\n    \n    return medal_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Country': ['Finland', 'Brazil', 'Sweden'],\n    '2004': [2, 10, 7],\n    '2008': [4, 15, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_medal_difference(df, 'Brazil'))","table":"Name: Olympic medals\nUnit: medals\nContent:\nCountry | 2004 | 2008\nFinland | 2 | 4\nBrazil | 10 | 15\nSweden | 7 | 5"}
{"level":5,"answer":1992.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(items_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    items_df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = items_df[items_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['pair of designer shoes', 'designer scarf', 'pair of designer boots', 'designer skirt', 'designer coat', 'designer handbag'],\n    'Price': [587, 746, 548, 215, 582, 823]\n})\n\n# Define the items to calculate the total cost\nitems = ['pair of designer shoes', 'designer coat', 'designer handbag']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Florence need to buy a pair of designer shoes, a designer coat, and a designer handbag?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(items_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    items_df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = items_df[items_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['pair of designer shoes', 'designer scarf', 'pair of designer boots', 'designer skirt', 'designer coat', 'designer handbag'],\n    'Price': [587, 746, 548, 215, 582, 823]\n})\n\n# Define the items to calculate the total cost\nitems = ['pair of designer shoes', 'designer coat', 'designer handbag']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\npair of designer shoes | $587\ndesigner scarf | $746\npair of designer boots | $548\ndesigner skirt | $215\ndesigner coat | $582\ndesigner handbag | $823"}
{"level":8,"answer":14.0,"prediction":"import pandas as pd\n\ndef count_people_who_visited_once(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of trips and their frequencies, and returns the number of people who visited the water park exactly once.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of trips and their frequencies.\n    The DataFrame should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who visited the water park exactly once.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of trips is 1\n    visited_once_df = df[df['Number of trips'] == 1]\n    \n    # Calculate the total number of people who visited once\n    num_people = visited_once_df['Frequency'].sum()\n    \n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [1, 2, 3, 4, 5],\n    'Frequency': [14, 8, 19, 18, 1]\n})\n# Call the tool to solve the problem\nprint(count_people_who_visited_once(df))","question":"A theme park developer recorded the number of people who visited the local water park last summer. How many people went to the water park exactly once last summer?","prediction_code":"import pandas as pd\n\ndef count_people_who_visited_once(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of trips and their frequencies, and returns the number of people who visited the water park exactly once.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of trips and their frequencies.\n    The DataFrame should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who visited the water park exactly once.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of trips is 1\n    visited_once_df = df[df['Number of trips'] == 1]\n    \n    # Calculate the total number of people who visited once\n    num_people = visited_once_df['Frequency'].sum()\n    \n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [1, 2, 3, 4, 5],\n    'Frequency': [14, 8, 19, 18, 1]\n})\n# Call the tool to solve the problem\nprint(count_people_who_visited_once(df))","table":"Name: Going to the water park last summer\nUnit: None\nContent:\nNumber of trips | Frequency\n1 | 14\n2 | 8\n3 | 19\n4 | 18\n5 | 1"}
{"level":5,"answer":33.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of coin collections and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and number of coins for each person.\n    The dataframe should contain \"Name\" and \"Number of coins\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of coins']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Franklin', 'Elise', 'Christina', 'Annie', 'Janice'],\n    'Number of coins': [33, 28, 38, 35, 27]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"Some friends discussed the sizes of their coin collections. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of coin collections and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and number of coins for each person.\n    The dataframe should contain \"Name\" and \"Number of coins\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of coins']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Franklin', 'Elise', 'Christina', 'Annie', 'Janice'],\n    'Number of coins': [33, 28, 38, 35, 27]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Coin collections\nUnit: None\nContent:\nName | Number of coins\nFranklin | 33\nElise | 28\nChristina | 38\nAnnie | 35\nJanice | 27"}
{"level":6,"answer":0.5,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a given item and quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = quantity * item_price\n        return total_cost\n    else:\n        return None\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['strawberries', 'blackberries', 'blueberries', 'raspberries', 'loganberries'],\n    'Price': [2, 3, 3, 3, 5]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'strawberries', 1\/4))","question":"Diego went to the store and bought 1\/4 of a pound of strawberries. How much did he spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a given item and quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = quantity * item_price\n        return total_cost\n    else:\n        return None","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['strawberries', 'blackberries', 'blueberries', 'raspberries', 'loganberries'],\n    'Price': [2, 3, 3, 3, 5]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'strawberries', 1\/4))","table":"Name: None\nUnit: $\nContent:\nstrawberries | $2 per lb\nblackberries | $3 per lb\nblueberries | $3 per lb\nraspberries | $3 per lb\nloganberries | $5 per lb"}
{"level":5,"answer":8.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of hours worked per day and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of hours worked per day.\n    The dataframe should contain \"Day\" and \"Hours\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the maximum and minimum values of the \"Hours\" column\n    max_hours = df['Hours'].max()\n    min_hours = df['Hours'].min()\n    \n    # Calculate the range\n    range_hours = max_hours - min_hours\n    \n    return range_hours\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Hours': [4, 9, 1, 7, 1]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"Barry looked at his calendar to see how many hours he had worked in the past 5 days. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of hours worked per day and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of hours worked per day.\n    The dataframe should contain \"Day\" and \"Hours\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the maximum and minimum values of the \"Hours\" column\n    max_hours = df['Hours'].max()\n    min_hours = df['Hours'].min()\n    \n    # Calculate the range\n    range_hours = max_hours - min_hours\n    \n    return range_hours","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Hours': [4, 9, 1, 7, 1]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Hours worked\nUnit: None\nContent:\nDay | Hours\nMonday | 4\nTuesday | 9\nWednesday | 1\nThursday | 7\nFriday | 1"}
{"level":8,"answer":32.22,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of buying a certain quantity of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item to be purchased.\n    quantity (int): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of buying the specified quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price of the item\n    price = item_df['Price'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price * quantity\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['ladder', 'hammer', 'wrench', 'shovel', 'broom', 'can of paint'],\n    'Price': [42.15, 10.74, 14.71, 19.79, 16.29, 12.44]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'hammer', 3))","question":"How much money does Leon need to buy 3 hammers?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of buying a certain quantity of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item to be purchased.\n    quantity (int): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of buying the specified quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price of the item\n    price = item_df['Price'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price * quantity\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['ladder', 'hammer', 'wrench', 'shovel', 'broom', 'can of paint'],\n    'Price': [42.15, 10.74, 14.71, 19.79, 16.29, 12.44]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'hammer', 3))","table":"Name: None\nUnit: $\nContent:\nladder | $42.15\nhammer | $10.74\nwrench | $14.71\nshovel | $19.79\nbroom | $16.29\ncan of paint | $12.44"}
{"level":7,"answer":7.0,"prediction":"import pandas as pd\n\ndef count_people_more_than_3_times(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of trips to the library and their frequencies, and returns the number of people who went to the library more than 3 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of trips and their frequencies.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who went to the library more than 3 times.\n    \"\"\"\n    # Filter the DataFrame for trips with more than 3 visits\n    filtered_df = df[df['Number of trips'] > 3]\n    \n    # Calculate the total number of people who went to the library more than 3 times\n    num_people = filtered_df['Frequency'].sum()\n    \n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [1, 2, 3, 4],\n    'Frequency': [1, 10, 19, 7]\n})\n# Call the tool to solve the problem\nprint(count_people_more_than_3_times(df))","question":"In considering whether to open a new branch, the city council examined the number of times some typical residents went to the library last month. How many people went to the library more than 3 times last month?","prediction_code":"import pandas as pd\n\ndef count_people_more_than_3_times(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of trips to the library and their frequencies, and returns the number of people who went to the library more than 3 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of trips and their frequencies.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who went to the library more than 3 times.\n    \"\"\"\n    # Filter the DataFrame for trips with more than 3 visits\n    filtered_df = df[df['Number of trips'] > 3]\n    \n    # Calculate the total number of people who went to the library more than 3 times\n    num_people = filtered_df['Frequency'].sum()\n    \n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [1, 2, 3, 4],\n    'Frequency': [1, 10, 19, 7]\n})\n# Call the tool to solve the problem\nprint(count_people_more_than_3_times(df))","table":"Name: Going to the library last month\nUnit: None\nContent:\nNumber of trips | Frequency\n1 | 1\n2 | 10\n3 | 19\n4 | 7"}
{"level":8,"answer":13.0,"prediction":"import pandas as pd\n\ndef count_necklaces_with_beads(df):\n    \"\"\"\n    This function takes in a pandas dataframe of beads per necklace, and returns the number of necklaces that have at least 50 beads but fewer than 90 beads.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of beads per necklace.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of necklaces that have at least 50 beads but fewer than 90 beads.\n    \"\"\"\n    # prepare a list to calculate beads in each necklace\n    beads = []\n    # calculate the total number of beads in each necklace\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            beads.append(stem * 10 + leaf[j])\n    # filter the necklaces where the total number of beads is greater than or equal to 50 and less than 90\n    filtered = [bead for bead in beads if 50 <= bead < 90]\n    # count the number of rows\n    num_necklaces = len(filtered)\n    return num_necklaces\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7, 8, 9],\n    'Leaf': [[2], [0, 5, 5, 7], [4, 6], [0, 3, 5, 7, 8, 8], [9], [0, 0]]\n})\n# Call the tool to solve the problem\nprint(count_necklaces_with_beads(df))","question":"Julie counted all the beads in each necklace at the jewelry store where she works. How many necklaces had at least 50 beads but fewer than 90 beads?","prediction_code":"import pandas as pd\n\ndef count_necklaces_with_beads(df):\n    \"\"\"\n    This function takes in a pandas dataframe of beads per necklace, and returns the number of necklaces that have at least 50 beads but fewer than 90 beads.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of beads per necklace.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of necklaces that have at least 50 beads but fewer than 90 beads.\n    \"\"\"\n    # prepare a list to calculate beads in each necklace\n    beads = []\n    # calculate the total number of beads in each necklace\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            beads.append(stem * 10 + leaf[j])\n    # filter the necklaces where the total number of beads is greater than or equal to 50 and less than 90\n    filtered = [bead for bead in beads if 50 <= bead < 90]\n    # count the number of rows\n    num_necklaces = len(filtered)\n    return num_necklaces","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7, 8, 9],\n    'Leaf': [[2], [0, 5, 5, 7], [4, 6], [0, 3, 5, 7, 8, 8], [9], [0, 0]]\n})\n# Call the tool to solve the problem\nprint(count_necklaces_with_beads(df))","table":"Name: Beads per necklace\nUnit: necklaces\nContent:\nStem | Leaf \n4 | 2\n5 | 0, 5, 5, 7\n6 | 4, 6\n7 | 0, 3, 5, 7, 8, 8\n8 | 9\n9 | 0, 0"}
{"level":8,"answer":7.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of basketball hoops per park and returns the median number of basketball hoops.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of basketball hoops per park.\n    The dataframe should contain \"Park\" and \"Number of basketball hoops\" columns.\n    Returns:\n    float: The median number of basketball hoops.\n    \"\"\"\n    # Get the column with the number of basketball hoops\n    hoops_column = df['Number of basketball hoops']\n    \n    # Calculate the median\n    median = hoops_column.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Park': ['Pinehurst Park', 'Otter Park', 'Riverfront Park', 'Canal Park', 'Westfield Park', 'Linden Park', 'Kelly Park'],\n    'Number of basketball hoops': [6, 7, 1, 9, 7, 10, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"The parks department compared how many basketball hoops there are at each park. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of basketball hoops per park and returns the median number of basketball hoops.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of basketball hoops per park.\n    The dataframe should contain \"Park\" and \"Number of basketball hoops\" columns.\n    Returns:\n    float: The median number of basketball hoops.\n    \"\"\"\n    # Get the column with the number of basketball hoops\n    hoops_column = df['Number of basketball hoops']\n    \n    # Calculate the median\n    median = hoops_column.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Park': ['Pinehurst Park', 'Otter Park', 'Riverfront Park', 'Canal Park', 'Westfield Park', 'Linden Park', 'Kelly Park'],\n    'Number of basketball hoops': [6, 7, 1, 9, 7, 10, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Basketball hoops\nUnit: None\nContent:\nPark | Number of basketball hoops\nPinehurst Park | 6\nOtter Park | 7\nRiverfront Park | 1\nCanal Park | 9\nWestfield Park | 7\nLinden Park | 10\nKelly Park | 6"}
{"level":7,"answer":90.0,"prediction":"import pandas as pd\n\ndef find_largest_number_of_bricks(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of bricks per building and returns the largest number of bricks.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of bricks per building.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of bricks.\n    \"\"\"\n    # Create an empty list to store all the bricks counts\n    bricks_counts = []\n    \n    # Iterate through each row of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # If the leaf column is not empty, split the values by comma and add them to the bricks_counts list\n        if leaf:\n            leaf_values = leaf.split(',')\n            for value in leaf_values:\n                bricks_counts.append(int(str(stem) + value.strip()))\n    \n    # Find the largest number of bricks\n    largest_bricks = max(bricks_counts)\n    \n    return largest_bricks\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': ['2', '4, 8, 9', '', '5, 6, 8', '9', '1, 4, 7', '4', '0']\n})\n# Call the tool to solve the problem\nprint(find_largest_number_of_bricks(df))","question":"The architecture student counted the number of bricks in each building in her neighborhood. What is the largest number of bricks?","prediction_code":"import pandas as pd\n\ndef find_largest_number_of_bricks(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of bricks per building and returns the largest number of bricks.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of bricks per building.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of bricks.\n    \"\"\"\n    # Create an empty list to store all the bricks counts\n    bricks_counts = []\n    \n    # Iterate through each row of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # If the leaf column is not empty, split the values by comma and add them to the bricks_counts list\n        if leaf:\n            leaf_values = leaf.split(',')\n            for value in leaf_values:\n                bricks_counts.append(int(str(stem) + value.strip()))\n    \n    # Find the largest number of bricks\n    largest_bricks = max(bricks_counts)\n    \n    return largest_bricks","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': ['2', '4, 8, 9', '', '5, 6, 8', '9', '1, 4, 7', '4', '0']\n})\n# Call the tool to solve the problem\nprint(find_largest_number_of_bricks(df))","table":"Name: Bricks per building\nUnit: bricks\nContent:\nStem | Leaf \n2 | 2\n3 | 4, 8, 9\n4 | \n5 | 5, 6, 8\n6 | 9\n7 | 1, 4, 7\n8 | 4\n9 | 0"}
{"level":2,"answer":15.0,"prediction":"import pandas as pd\n\ndef calculate_total_poppies(df, num_vases):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of vases and the number of poppies per vase, and returns the total number of poppies in a given number of vases.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of vases and the number of poppies per vase.\n    The dataframe should contain \"Number of vases\" and \"Number of poppies\" columns.\n    num_vases (int): The number of vases to calculate the total number of poppies for.\n    Returns:\n    int: The total number of poppies in the given number of vases.\n    \"\"\"\n    # Get the number of poppies per vase\n    poppies_per_vase = df['Number of poppies'].values[0]\n    \n    # Calculate the total number of poppies\n    total_poppies = poppies_per_vase * num_vases\n    \n    return total_poppies\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of vases': [1, 2, 3],\n    'Number of poppies': [5, 10, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_poppies(df, 3))","question":"Each vase has 5 poppies. How many poppies are in 3 vases?","prediction_code":"import pandas as pd\n\ndef calculate_total_poppies(df, num_vases):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of vases and the number of poppies per vase, and returns the total number of poppies in a given number of vases.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of vases and the number of poppies per vase.\n    The dataframe should contain \"Number of vases\" and \"Number of poppies\" columns.\n    num_vases (int): The number of vases to calculate the total number of poppies for.\n    Returns:\n    int: The total number of poppies in the given number of vases.\n    \"\"\"\n    # Get the number of poppies per vase\n    poppies_per_vase = df['Number of poppies'].values[0]\n    \n    # Calculate the total number of poppies\n    total_poppies = poppies_per_vase * num_vases\n    \n    return total_poppies","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of vases': [1, 2, 3],\n    'Number of poppies': [5, 10, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_poppies(df, 3))","table":"Name: None\nUnit: None\nContent:\nNumber of vases | Number of poppies\n1 | 5\n2 | 10\n3 | ?"}
{"level":7,"answer":3.0,"prediction":"import pandas as pd\n\ndef count_students_with_2_siblings(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of siblings per student and returns the number of students who have exactly 2 siblings.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of siblings per student.\n    The DataFrame should contain \"Number of siblings\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who have exactly 2 siblings.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of siblings is 2\n    filtered_df = df[df['Number of siblings'] == 2]\n    \n    # Get the frequency of students with 2 siblings\n    num_students = filtered_df['Frequency'].sum()\n    \n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of siblings': [0, 1, 2, 3, 4],\n    'Frequency': [12, 4, 3, 10, 1]\n})\n# Call the tool to solve the problem\nprint(count_students_with_2_siblings(df))","question":"The students in Mr. Davis's class recorded the number of siblings that each has. How many students in the class have exactly 2 siblings?","prediction_code":"import pandas as pd\n\ndef count_students_with_2_siblings(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of siblings per student and returns the number of students who have exactly 2 siblings.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of siblings per student.\n    The DataFrame should contain \"Number of siblings\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who have exactly 2 siblings.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of siblings is 2\n    filtered_df = df[df['Number of siblings'] == 2]\n    \n    # Get the frequency of students with 2 siblings\n    num_students = filtered_df['Frequency'].sum()\n    \n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of siblings': [0, 1, 2, 3, 4],\n    'Frequency': [12, 4, 3, 10, 1]\n})\n# Call the tool to solve the problem\nprint(count_students_with_2_siblings(df))","table":"Name: Siblings\nUnit: None\nContent:\nNumber of siblings | Frequency\n0 | 12\n1 | 4\n2 | 3\n3 | 10\n4 | 1"}
{"level":7,"answer":0.2,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['spool of metallic cord', 'fake red rose', 'tube of paste', 'spool of gold wire', 'spool of thread'],\n    'Price': [0.62, 0.77, 0.54, 0.18, 0.74]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'spool of thread', 'tube of paste'))","question":"How much more does a spool of thread cost than a tube of paste?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['spool of metallic cord', 'fake red rose', 'tube of paste', 'spool of gold wire', 'spool of thread'],\n    'Price': [0.62, 0.77, 0.54, 0.18, 0.74]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'spool of thread', 'tube of paste'))","table":"Name: None\nUnit: $\nContent:\nspool of metallic cord | $0.62\nfake red rose | $0.77\ntube of paste | $0.54\nspool of gold wire | $0.18\nspool of thread | $0.74"}
{"level":3,"answer":2940.0,"prediction":"import pandas as pd\n\ndef calculate_total_patients(df, months):\n    \"\"\"\n    This function takes in a pandas DataFrame of patients seen per month and a list of months, and returns the total number of patients seen in the specified months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of patients seen per month.\n    The dataframe should contain \"Month\" and \"Number of patients\" columns.\n    months (list): A list of months for which the total number of patients should be calculated.\n    Returns:\n    int: The total number of patients seen in the specified months.\n    \"\"\"\n    # Filter the DataFrame for the specified months\n    filtered_df = df[df['Month'].isin(months)]\n    \n    # Calculate the total number of patients seen in the specified months\n    total_patients = filtered_df['Number of patients'].sum()\n    \n    return total_patients\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['April', 'May', 'June', 'July', 'August'],\n    'Number of patients': [1942, 1532, 1433, 1981, 1507]\n})\n\n# Specify the months for which the total number of patients should be calculated\nmonths = ['June', 'August']\n\n# Call the tool to solve the problem\nprint(calculate_total_patients(df, months))","question":"A doctor's records revealed how many patients he saw each month. How many patients did the doctor see in total in June and August?","prediction_code":"import pandas as pd\n\ndef calculate_total_patients(df, months):\n    \"\"\"\n    This function takes in a pandas DataFrame of patients seen per month and a list of months, and returns the total number of patients seen in the specified months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of patients seen per month.\n    The dataframe should contain \"Month\" and \"Number of patients\" columns.\n    months (list): A list of months for which the total number of patients should be calculated.\n    Returns:\n    int: The total number of patients seen in the specified months.\n    \"\"\"\n    # Filter the DataFrame for the specified months\n    filtered_df = df[df['Month'].isin(months)]\n    \n    # Calculate the total number of patients seen in the specified months\n    total_patients = filtered_df['Number of patients'].sum()\n    \n    return total_patients","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['April', 'May', 'June', 'July', 'August'],\n    'Number of patients': [1942, 1532, 1433, 1981, 1507]\n})\n\n# Specify the months for which the total number of patients should be calculated\nmonths = ['June', 'August']\n\n# Call the tool to solve the problem\nprint(calculate_total_patients(df, months))","table":"Name: Patients seen\nUnit: patients\nContent:\nMonth | Number of patients\nApril | 1,942\nMay | 1,532\nJune | 1,433\nJuly | 1,981\nAugust | 1,507"}
{"level":5,"answer":90.0,"prediction":"import pandas as pd\n\ndef find_largest_team(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of track team sizes and returns the size of the largest team.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the sizes of track teams.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The size of the largest team.\n    \"\"\"\n    # Create a list to store all team sizes\n    team_sizes = []\n    \n    # Iterate through each row of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Calculate the team size for each row\n        team_size = stem * 10 + sum(leaf)\n        \n        # Append the team size to the list\n        team_sizes.append(team_size)\n    \n    # Find the maximum team size\n    max_team_size = max(team_sizes)\n    \n    return max_team_size\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[9], [0], [], [7], [3, 5], [], [9], [0]]\n})\n# Call the tool to solve the problem\nprint(find_largest_team(df))","question":"Mr. Dodson, a track coach, recorded the sizes of all the nearby track teams. What is the size of the largest team?","prediction_code":"import pandas as pd\n\ndef find_largest_team(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of track team sizes and returns the size of the largest team.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the sizes of track teams.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The size of the largest team.\n    \"\"\"\n    # Create a list to store all team sizes\n    team_sizes = []\n    \n    # Iterate through each row of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Calculate the team size for each row\n        team_size = stem * 10 + sum(leaf)\n        \n        # Append the team size to the list\n        team_sizes.append(team_size)\n    \n    # Find the maximum team size\n    max_team_size = max(team_sizes)\n    \n    return max_team_size","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[9], [0], [], [7], [3, 5], [], [9], [0]]\n})\n# Call the tool to solve the problem\nprint(find_largest_team(df))","table":"Name: Track team sizes (number of members)\nUnit: members\nContent:\nStem | Leaf \n2 | 9\n3 | 0\n4 | \n5 | 7\n6 | 3, 5\n7 | \n8 | 9\n9 | 0"}
{"level":5,"answer":34.0,"prediction":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of people on the bus each day and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of people on the bus each day.\n    The dataframe should contain \"Day\" and \"Number of people\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Number of people\" column\n    mean = df['Number of people'].mean()\n    \n    return mean\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday'],\n    'Number of people': [35, 45, 26, 33, 31]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","question":"A bus driver paid attention to how many passengers his bus had each day. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of people on the bus each day and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of people on the bus each day.\n    The dataframe should contain \"Day\" and \"Number of people\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Number of people\" column\n    mean = df['Number of people'].mean()\n    \n    return mean","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday'],\n    'Number of people': [35, 45, 26, 33, 31]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","table":"Name: People on the bus\nUnit: None\nContent:\nDay | Number of people\nThursday | 35\nFriday | 45\nSaturday | 26\nSunday | 33\nMonday | 31"}
{"level":8,"answer":25.32,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item given its quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price per pound of the item\n    price_per_lb = item_df['Price'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price_per_lb * quantity\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['powdered sugar', 'granulated sugar', 'dark brown sugar', 'agave syrup'],\n    'Price': [2.17, 6.33, 2.38, 6.37]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'granulated sugar', 4))","question":"Marvin purchased 4 pounds of granulated sugar. What was the total cost?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item given its quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price per pound of the item\n    price_per_lb = item_df['Price'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price_per_lb * quantity\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['powdered sugar', 'granulated sugar', 'dark brown sugar', 'agave syrup'],\n    'Price': [2.17, 6.33, 2.38, 6.37]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'granulated sugar', 4))","table":"Name: None\nUnit: $\nContent:\npowdered sugar | $2.17 per lb\ngranulated sugar | $6.33 per lb\ndark brown sugar | $2.38 per lb\nagave syrup | $6.37 per lb"}
{"level":5,"answer":3.0,"prediction":"import pandas as pd\n\ndef calculate_chocolate_consumption_difference(df, country):\n    \"\"\"\n    This function takes in a pandas DataFrame of chocolate consumption per capita and a country name, and returns the difference in chocolate consumption per capita for the given country between two years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing chocolate consumption per capita data.\n    The DataFrame should have columns 'Country', '2002', and '2005'.\n    country (str): The name of the country to calculate the difference for.\n    Returns:\n    int: The difference in chocolate consumption per capita for the given country between 2005 and 2002.\n    \"\"\"\n    # Filter the DataFrame for the given country\n    country_df = df[df['Country'] == country]\n    \n    # Get the chocolate consumption values for 2002 and 2005\n    consumption_2002 = country_df['2002'].values[0]\n    consumption_2005 = country_df['2005'].values[0]\n    \n    # Calculate the difference in consumption\n    difference = consumption_2005 - consumption_2002\n    \n    return difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Country': ['Belgium', 'Denmark', 'Australia'],\n    '2002': [8, 9, 4],\n    '2005': [11, 8, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_chocolate_consumption_difference(df, 'Belgium'))","question":"Kamal's Candies has been studying how much chocolate people have been eating in different countries. How much more chocolate did Belgium consume per capita in 2005 than in 2002?","prediction_code":"import pandas as pd\n\ndef calculate_chocolate_consumption_difference(df, country):\n    \"\"\"\n    This function takes in a pandas DataFrame of chocolate consumption per capita and a country name, and returns the difference in chocolate consumption per capita for the given country between two years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing chocolate consumption per capita data.\n    The DataFrame should have columns 'Country', '2002', and '2005'.\n    country (str): The name of the country to calculate the difference for.\n    Returns:\n    int: The difference in chocolate consumption per capita for the given country between 2005 and 2002.\n    \"\"\"\n    # Filter the DataFrame for the given country\n    country_df = df[df['Country'] == country]\n    \n    # Get the chocolate consumption values for 2002 and 2005\n    consumption_2002 = country_df['2002'].values[0]\n    consumption_2005 = country_df['2005'].values[0]\n    \n    # Calculate the difference in consumption\n    difference = consumption_2005 - consumption_2002\n    \n    return difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Country': ['Belgium', 'Denmark', 'Australia'],\n    '2002': [8, 9, 4],\n    '2005': [11, 8, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_chocolate_consumption_difference(df, 'Belgium'))","table":"Name: Chocolate consumption per capita (kg)\nUnit: kg\nContent:\nCountry | 2002 | 2005\nBelgium | 8 | 11\nDenmark | 9 | 8\nAustralia | 4 | 5"}
{"level":7,"answer":4.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item given its quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price of the item\n    price = item_df['Price'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price * quantity\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['romaine lettuce', 'Chinese lettuce', 'kale', 'butterhead lettuce', 'Swiss chard', 'summer crisp lettuce'],\n    'Price': [2, 1, 1, 1, 1, 2]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'Swiss chard', 4))","question":"Becky buys 4 kilograms of Swiss chard. What is the total cost?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item given its quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price of the item\n    price = item_df['Price'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price * quantity\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['romaine lettuce', 'Chinese lettuce', 'kale', 'butterhead lettuce', 'Swiss chard', 'summer crisp lettuce'],\n    'Price': [2, 1, 1, 1, 1, 2]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'Swiss chard', 4))","table":"Name: None\nUnit: $\nContent:\nromaine lettuce | $2\/kg\nChinese lettuce | $1\/kg\nkale | $1\/kg\nbutterhead lettuce | $1\/kg\nSwiss chard | $1\/kg\nsummer crisp lettuce | $2\/kg"}
{"level":4,"answer":0.2,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of item names.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['piece of pink paper', 'sheet of green paper', 'piece of floral stationery', 'piece of polka-dotted paper', 'sheet of shiny silver paper', 'piece of elegant stationery'],\n    'Price': [0.55, 0.43, 0.42, 0.10, 0.78, 0.10]\n})\n\n# Define the items Polly needs to buy\nitems = ['piece of elegant stationery', 'piece of polka-dotted paper']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, items)\n\n# Print out the answer\nprint(total_cost)","question":"How much money does Polly need to buy a piece of elegant stationery and a piece of polka-dotted paper?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of item names.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['piece of pink paper', 'sheet of green paper', 'piece of floral stationery', 'piece of polka-dotted paper', 'sheet of shiny silver paper', 'piece of elegant stationery'],\n    'Price': [0.55, 0.43, 0.42, 0.10, 0.78, 0.10]\n})\n\n# Define the items Polly needs to buy\nitems = ['piece of elegant stationery', 'piece of polka-dotted paper']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, items)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\npiece of pink paper | $0.55\nsheet of green paper | $0.43\npiece of floral stationery | $0.42\npiece of polka-dotted paper | $0.10\nsheet of shiny silver paper | $0.78\npiece of elegant stationery | $0.10"}
{"level":8,"answer":17.0,"prediction":"import pandas as pd\n\ndef count_people_with_fewer_pullups(df, threshold):\n    \"\"\"\n    This function takes in a pandas dataframe of pull-up competition results and a threshold value, and returns the number of people who did fewer than the threshold number of pull-ups.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pull-ups for each person.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    threshold (int): The threshold number of pull-ups.\n    Returns:\n    int: The number of people who did fewer than the threshold number of pull-ups.\n    \"\"\"\n    # prepare a list to calculate the number of pull-ups for each person\n    pullups = []\n    # calculate the total number of pull-ups for each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            pullups.append(stem * 10 + leaf[j])\n    # filter the people who did fewer than the threshold number of pull-ups\n    filtered = [pullup for pullup in pullups if pullup < threshold]\n    # count the number of people\n    num_people = len(filtered)\n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[0, 4, 4], [3, 4, 7, 8], [0, 1, 1, 5, 6], [], [0, 1, 4, 5, 5], [0, 0, 1, 6, 6, 7], [0]]\n})\n# Set the threshold number of pull-ups\nthreshold = 80\n# Call the tool to solve the problem\nprint(count_people_with_fewer_pullups(df, threshold))","question":"During Fitness Day at school, Gordon and his classmates took part in a pull-up competition, keeping track of the results. How many people did fewer than 80 pull-ups?","prediction_code":"import pandas as pd\n\ndef count_people_with_fewer_pullups(df, threshold):\n    \"\"\"\n    This function takes in a pandas dataframe of pull-up competition results and a threshold value, and returns the number of people who did fewer than the threshold number of pull-ups.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pull-ups for each person.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    threshold (int): The threshold number of pull-ups.\n    Returns:\n    int: The number of people who did fewer than the threshold number of pull-ups.\n    \"\"\"\n    # prepare a list to calculate the number of pull-ups for each person\n    pullups = []\n    # calculate the total number of pull-ups for each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            pullups.append(stem * 10 + leaf[j])\n    # filter the people who did fewer than the threshold number of pull-ups\n    filtered = [pullup for pullup in pullups if pullup < threshold]\n    # count the number of people\n    num_people = len(filtered)\n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[0, 4, 4], [3, 4, 7, 8], [0, 1, 1, 5, 6], [], [0, 1, 4, 5, 5], [0, 0, 1, 6, 6, 7], [0]]\n})\n# Set the threshold number of pull-ups\nthreshold = 80\n# Call the tool to solve the problem\nprint(count_people_with_fewer_pullups(df, threshold))","table":"Name: Pull-up competition (number of pull-ups)\nUnit: people\nContent:\nStem | Leaf \n3 | 0, 4, 4\n4 | 3, 4, 7, 8\n5 | 0, 1, 1, 5, 6\n6 | \n7 | 0, 1, 4, 5, 5\n8 | 0, 0, 1, 6, 6, 7\n9 | 0"}
{"level":5,"answer":47.0,"prediction":"import pandas as pd\n\ndef calculate_mean_miles(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of miles biked by club members and returns the mean of the miles.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and miles biked by club members.\n    The dataframe should contain \"Name\" and \"Miles\" columns.\n    Returns:\n    float: The mean of the miles biked by club members.\n    \"\"\"\n    # Calculate the mean of the miles column\n    mean_miles = df['Miles'].mean()\n    \n    return mean_miles\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Kira', 'Dirk', 'Chase', 'Toby', 'Steve'],\n    'Miles': [41, 46, 46, 54, 48]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_miles(df))","question":"The members of the cycling club compared how many miles they biked last week. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean_miles(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of miles biked by club members and returns the mean of the miles.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and miles biked by club members.\n    The dataframe should contain \"Name\" and \"Miles\" columns.\n    Returns:\n    float: The mean of the miles biked by club members.\n    \"\"\"\n    # Calculate the mean of the miles column\n    mean_miles = df['Miles'].mean()\n    \n    return mean_miles","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Kira', 'Dirk', 'Chase', 'Toby', 'Steve'],\n    'Miles': [41, 46, 46, 54, 48]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_miles(df))","table":"Name: Biking last week\nUnit: None\nContent:\nName | Miles\nKira | 41\nDirk | 46\nChase | 46\nToby | 54\nSteve | 48"}
{"level":1,"answer":15.0,"prediction":"import pandas as pd\n\ndef calculate_purple_beads(df, num_bracelets):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of purple beads per bracelet and the number of bracelets, and returns the total number of purple beads.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of purple beads per bracelet.\n    The dataframe should contain \"Number of bracelets\" and \"Number of purple beads\" columns.\n    num_bracelets (int): The number of bracelets.\n    Returns:\n    int: The total number of purple beads.\n    \"\"\"\n    # Filter the DataFrame for the specific number of bracelets\n    bracelets_df = df[df['Number of bracelets'] == num_bracelets]\n    \n    # Get the number of purple beads for the specific number of bracelets\n    num_purple_beads = bracelets_df['Number of purple beads'].values[0]\n    \n    # Calculate the total number of purple beads\n    total_purple_beads = num_purple_beads * num_bracelets\n    \n    return total_purple_beads\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of bracelets': [1, 2, 3],\n    'Number of purple beads': [5, 10, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_purple_beads(df, 3))","question":"Each bracelet has 5 purple beads. How many purple beads are on 3 bracelets?","prediction_code":"import pandas as pd\n\ndef calculate_purple_beads(df, num_bracelets):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of purple beads per bracelet and the number of bracelets, and returns the total number of purple beads.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of purple beads per bracelet.\n    The dataframe should contain \"Number of bracelets\" and \"Number of purple beads\" columns.\n    num_bracelets (int): The number of bracelets.\n    Returns:\n    int: The total number of purple beads.\n    \"\"\"\n    # Filter the DataFrame for the specific number of bracelets\n    bracelets_df = df[df['Number of bracelets'] == num_bracelets]\n    \n    # Get the number of purple beads for the specific number of bracelets\n    num_purple_beads = bracelets_df['Number of purple beads'].values[0]\n    \n    # Calculate the total number of purple beads\n    total_purple_beads = num_purple_beads * num_bracelets\n    \n    return total_purple_beads","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of bracelets': [1, 2, 3],\n    'Number of purple beads': [5, 10, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_purple_beads(df, 3))","table":"Name: None\nUnit: purple beads\nContent:\nNumber of bracelets | Number of purple beads\n1 | 5\n2 | 10\n3 | ?"}
{"level":3,"answer":1.36,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['pink conch shell', 'spiral snail shell', 'oyster shell', 'purple clam shell', 'pink and white striped shell', 'dark gray shell'],\n    'Price': [0.97, 0.45, 0.89, 0.44, 0.91, 0.65]\n})\n\n# Call the tool to solve the problem\nitems = ['spiral snail shell', 'pink and white striped shell']\nprint(calculate_total_cost(df, items))","question":"How much money does Tracy need to buy a spiral snail shell and a pink and white striped shell?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['pink conch shell', 'spiral snail shell', 'oyster shell', 'purple clam shell', 'pink and white striped shell', 'dark gray shell'],\n    'Price': [0.97, 0.45, 0.89, 0.44, 0.91, 0.65]\n})\n\n# Call the tool to solve the problem\nitems = ['spiral snail shell', 'pink and white striped shell']\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\npink conch shell | $0.97\nspiral snail shell | $0.45\noyster shell | $0.89\npurple clam shell | $0.44\npink and white striped shell | $0.91\ndark gray shell | $0.65"}
{"level":6,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of swing counts per elementary school and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the swing counts per elementary school.\n    The dataframe should contain \"School\" and \"Number of swings\" columns.\n    Returns:\n    int: The range of the swing counts.\n    \"\"\"\n    # Get the minimum and maximum swing counts\n    min_count = df['Number of swings'].min()\n    max_count = df['Number of swings'].max()\n    \n    # Calculate the range\n    range_count = max_count - min_count\n    \n    return range_count\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'School': ['Hillside Elementary', 'Canyon Elementary', 'Roseville Elementary', 'Boyd Elementary', 'Lincoln Elementary', 'Jefferson Elementary', 'Valley Elementary'],\n    'Number of swings': [4, 7, 8, 4, 6, 6, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"The school district compared how many swings each elementary school has. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of swing counts per elementary school and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the swing counts per elementary school.\n    The dataframe should contain \"School\" and \"Number of swings\" columns.\n    Returns:\n    int: The range of the swing counts.\n    \"\"\"\n    # Get the minimum and maximum swing counts\n    min_count = df['Number of swings'].min()\n    max_count = df['Number of swings'].max()\n    \n    # Calculate the range\n    range_count = max_count - min_count\n    \n    return range_count","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'School': ['Hillside Elementary', 'Canyon Elementary', 'Roseville Elementary', 'Boyd Elementary', 'Lincoln Elementary', 'Jefferson Elementary', 'Valley Elementary'],\n    'Number of swings': [4, 7, 8, 4, 6, 6, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Swings\nUnit: None\nContent:\nSchool | Number of swings\nHillside Elementary | 4\nCanyon Elementary | 7\nRoseville Elementary | 8\nBoyd Elementary | 4\nLincoln Elementary | 6\nJefferson Elementary | 6\nValley Elementary | 3"}
{"level":8,"answer":2.0,"prediction":"import pandas as pd\n\ndef count_bags_with_50_butterscotch_candies(df):\n    \"\"\"\n    This function takes in a pandas dataframe of butterscotch candies per bag, and returns the number of bags that have at least 50 butterscotch candies.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of butterscotch candies per bag.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of bags that have at least 50 butterscotch candies.\n    \"\"\"\n    # prepare a list to calculate candies in each bag\n    candies = []\n    # calculate the total number of butterscotch candies in each bag\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        if pd.notnull(leaf):\n            for j in range(len(leaf)):\n                candies.append(stem * 10 + leaf[j])\n        else:\n            candies.append(stem * 10)\n    # filter the bags where the total number of butterscotch candies is greater than or equal to 50\n    filtered = [candy for candy in candies if candy >= 50]\n    # count the number of rows\n    num_bags = len(filtered)\n    return num_bags\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[0], [6], [0, 2], [], [], [], [8], [0]]\n})\n# Call the tool to solve the problem\nprint(count_bags_with_50_butterscotch_candies(df))","question":"At a candy factory, butterscotch candies were packaged into bags of different sizes. How many bags had at least 50 butterscotch candies?","prediction_code":"import pandas as pd\n\ndef count_bags_with_50_butterscotch_candies(df):\n    \"\"\"\n    This function takes in a pandas dataframe of butterscotch candies per bag, and returns the number of bags that have at least 50 butterscotch candies.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of butterscotch candies per bag.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of bags that have at least 50 butterscotch candies.\n    \"\"\"\n    # prepare a list to calculate candies in each bag\n    candies = []\n    # calculate the total number of butterscotch candies in each bag\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        if pd.notnull(leaf):\n            for j in range(len(leaf)):\n                candies.append(stem * 10 + leaf[j])\n        else:\n            candies.append(stem * 10)\n    # filter the bags where the total number of butterscotch candies is greater than or equal to 50\n    filtered = [candy for candy in candies if candy >= 50]\n    # count the number of rows\n    num_bags = len(filtered)\n    return num_bags","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[0], [6], [0, 2], [], [], [], [8], [0]]\n})\n# Call the tool to solve the problem\nprint(count_bags_with_50_butterscotch_candies(df))","table":"Name: Butterscotch candies per bag\nUnit: bags\nContent:\nStem | Leaf \n2 | 0\n3 | 6\n4 | 0, 2\n5 | \n6 | \n7 | \n8 | 8\n9 | 0"}
{"level":8,"answer":-3.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, month1, month2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average waiting time at a doctor's office and two months, and returns the rate of change between the two months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average waiting time at the doctor's office.\n    The DataFrame should have \"Month\" and \"Waiting time (minutes)\" columns.\n    month1 (str): The first month for calculating the rate of change.\n    month2 (str): The second month for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two months.\n    \"\"\"\n    # Filter the DataFrame for the two months\n    month1_df = df[df['Month'] == month1]\n    month2_df = df[df['Month'] == month2]\n    \n    # Get the waiting time for the two months\n    waiting_time1 = month1_df['Waiting time (minutes)'].values[0]\n    waiting_time2 = month2_df['Waiting time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (waiting_time2 - waiting_time1) \/ waiting_time1\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['April', 'May', 'June', 'July', 'August'],\n    'Waiting time (minutes)': [46, 43, 43, 45, 45]\n})\n\n# Call the tool to solve the problem\nrate_of_change = calculate_rate_of_change(df, 'April', 'May')\nprint(rate_of_change)","question":"Shivani, a doctor's office receptionist, tracked the average waiting time at the office each month. According to the table, what was the rate of change between April and May?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, month1, month2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average waiting time at a doctor's office and two months, and returns the rate of change between the two months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average waiting time at the doctor's office.\n    The DataFrame should have \"Month\" and \"Waiting time (minutes)\" columns.\n    month1 (str): The first month for calculating the rate of change.\n    month2 (str): The second month for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two months.\n    \"\"\"\n    # Filter the DataFrame for the two months\n    month1_df = df[df['Month'] == month1]\n    month2_df = df[df['Month'] == month2]\n    \n    # Get the waiting time for the two months\n    waiting_time1 = month1_df['Waiting time (minutes)'].values[0]\n    waiting_time2 = month2_df['Waiting time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (waiting_time2 - waiting_time1) \/ waiting_time1\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['April', 'May', 'June', 'July', 'August'],\n    'Waiting time (minutes)': [46, 43, 43, 45, 45]\n})\n\n# Call the tool to solve the problem\nrate_of_change = calculate_rate_of_change(df, 'April', 'May')\nprint(rate_of_change)","table":"Name: Average waiting time at a doctor's office\nUnit: minutes per month\nContent:\nMonth | Waiting time (minutes)\nApril | 46\nMay | 43\nJune | 43\nJuly | 45\nAugust | 45"}
{"level":1,"answer":60.0,"prediction":"import pandas as pd\n\ndef calculate_total_roosters(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of roosters in each field and returns the total number of roosters in 6 fields.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of fields and the number of roosters in each field.\n    The DataFrame should have columns 'Number of fields' and 'Number of roosters'.\n    Returns:\n    int: The total number of roosters in 6 fields.\n    \"\"\"\n    # Filter the DataFrame for the rows where the number of fields is 6\n    filtered_df = df[df['Number of fields'] == 6]\n    \n    # Get the number of roosters in the 6 fields\n    total_roosters = filtered_df['Number of roosters'].values[0]\n    \n    return total_roosters\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of fields': [1, 2, 3, 4, 5, 6],\n    'Number of roosters': [10, 20, 30, 40, 50, '?']\n})\n# Call the tool to solve the problem\nprint(calculate_total_roosters(df))","question":"Each field has 10 roosters. How many roosters are in 6 fields?","prediction_code":"import pandas as pd\n\ndef calculate_total_roosters(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of roosters in each field and returns the total number of roosters in 6 fields.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of fields and the number of roosters in each field.\n    The DataFrame should have columns 'Number of fields' and 'Number of roosters'.\n    Returns:\n    int: The total number of roosters in 6 fields.\n    \"\"\"\n    # Filter the DataFrame for the rows where the number of fields is 6\n    filtered_df = df[df['Number of fields'] == 6]\n    \n    # Get the number of roosters in the 6 fields\n    total_roosters = filtered_df['Number of roosters'].values[0]\n    \n    return total_roosters","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of fields': [1, 2, 3, 4, 5, 6],\n    'Number of roosters': [10, 20, 30, 40, 50, '?']\n})\n# Call the tool to solve the problem\nprint(calculate_total_roosters(df))","table":"Name: None\nUnit: roosters\nContent:\nNumber of fields | Number of roosters\n1 | 10\n2 | 20\n3 | 30\n4 | 40\n5 | 50\n6 | ?"}
{"level":3,"answer":0.91,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price of each item with columns 'Name' and 'Price'.\n    items (list): A list of item names.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['orange', 'onion', 'apple', 'tomato', 'red pepper'],\n    'Price': [0.52, 0.39, 0.39, 0.70, 0.86]\n})\n\n# Define the items to calculate the total cost\nitems = ['apple', 'orange']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Anthony need to buy an apple and an orange?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price of each item with columns 'Name' and 'Price'.\n    items (list): A list of item names.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['orange', 'onion', 'apple', 'tomato', 'red pepper'],\n    'Price': [0.52, 0.39, 0.39, 0.70, 0.86]\n})\n\n# Define the items to calculate the total cost\nitems = ['apple', 'orange']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\norange | $0.52\nonion | $0.39\napple | $0.39\ntomato | $0.70\nred pepper | $0.86"}
{"level":8,"answer":-13.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of games won by a baseball team each year, and calculates the rate of change between two specified years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of games won each year.\n    The dataframe should contain \"Year\" and \"Games won\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the specified years.\n    \"\"\"\n    # Filter the DataFrame for the specified years\n    start_games_won = df[df['Year'] == start_year]['Games won'].values[0]\n    end_games_won = df[df['Year'] == end_year]['Games won'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_games_won - start_games_won) \/ (end_year - start_year)\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2015, 2016, 2017, 2018, 2019],\n    'Games won': [30, 39, 26, 34, 31]\n})\n\n# Call the tool to solve the problem\nrate_of_change = calculate_rate_of_change(df, 2016, 2017)\n\n# Print out the answer\nprint(rate_of_change)","question":"Fans of the Winchester baseball team compared the number of games won by their team each year. According to the table, what was the rate of change between 2016 and 2017?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of games won by a baseball team each year, and calculates the rate of change between two specified years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of games won each year.\n    The dataframe should contain \"Year\" and \"Games won\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the specified years.\n    \"\"\"\n    # Filter the DataFrame for the specified years\n    start_games_won = df[df['Year'] == start_year]['Games won'].values[0]\n    end_games_won = df[df['Year'] == end_year]['Games won'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_games_won - start_games_won) \/ (end_year - start_year)\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2015, 2016, 2017, 2018, 2019],\n    'Games won': [30, 39, 26, 34, 31]\n})\n\n# Call the tool to solve the problem\nrate_of_change = calculate_rate_of_change(df, 2016, 2017)\n\n# Print out the answer\nprint(rate_of_change)","table":"Name: Games won by the Winchester baseball team\nUnit: games per year\nContent:\nYear | Games won\n2015 | 30\n2016 | 39\n2017 | 26\n2018 | 34\n2019 | 31"}
{"level":4,"answer":7.0,"prediction":"import pandas as pd\n\ndef count_more_boys_voted(df, fruit1, fruit2):\n    \"\"\"\n    This function takes in a pandas DataFrame of favorite fruits voted by boys and girls, and returns the difference in the number of boys who voted for two specific fruits.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the favorite fruits voted by boys and girls.\n    The dataframe should contain \"Fruit\", \"Boys\", and \"Girls\" columns.\n    fruit1 (str): The name of the first fruit.\n    fruit2 (str): The name of the second fruit.\n    Returns:\n    int: The difference in the number of boys who voted for the two specific fruits.\n    \"\"\"\n    # Get the number of boys who voted for the first fruit\n    boys_fruit1 = df[df['Fruit'] == fruit1]['Boys'].values[0]\n    \n    # Get the number of boys who voted for the second fruit\n    boys_fruit2 = df[df['Fruit'] == fruit2]['Boys'].values[0]\n    \n    # Calculate the difference\n    diff_boys = boys_fruit1 - boys_fruit2\n    \n    return diff_boys\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Fruit': ['Plums', 'Oranges', 'Bananas'],\n    'Boys': [13, 8, 1],\n    'Girls': [14, 6, 12]\n})\n\n# Call the tool to solve the problem\nprint(count_more_boys_voted(df, 'Oranges', 'Bananas'))","question":"A nutritionist designing a healthy lunch menu asked students at Silvergrove Elementary School to vote for their favorite fruits. How many more boys voted for oranges than bananas?","prediction_code":"import pandas as pd\n\ndef count_more_boys_voted(df, fruit1, fruit2):\n    \"\"\"\n    This function takes in a pandas DataFrame of favorite fruits voted by boys and girls, and returns the difference in the number of boys who voted for two specific fruits.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the favorite fruits voted by boys and girls.\n    The dataframe should contain \"Fruit\", \"Boys\", and \"Girls\" columns.\n    fruit1 (str): The name of the first fruit.\n    fruit2 (str): The name of the second fruit.\n    Returns:\n    int: The difference in the number of boys who voted for the two specific fruits.\n    \"\"\"\n    # Get the number of boys who voted for the first fruit\n    boys_fruit1 = df[df['Fruit'] == fruit1]['Boys'].values[0]\n    \n    # Get the number of boys who voted for the second fruit\n    boys_fruit2 = df[df['Fruit'] == fruit2]['Boys'].values[0]\n    \n    # Calculate the difference\n    diff_boys = boys_fruit1 - boys_fruit2\n    \n    return diff_boys","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Fruit': ['Plums', 'Oranges', 'Bananas'],\n    'Boys': [13, 8, 1],\n    'Girls': [14, 6, 12]\n})\n\n# Call the tool to solve the problem\nprint(count_more_boys_voted(df, 'Oranges', 'Bananas'))","table":"Name: Favorite fruits\nUnit: boys\nContent:\nFruit | Boys | Girls\nPlums | 13 | 14\nOranges | 8 | 6\nBananas | 1 | 12"}
{"level":6,"answer":18.0,"prediction":"import pandas as pd\n\ndef count_students_below_threshold(df, threshold):\n    \"\"\"\n    This function takes in a pandas DataFrame of science test scores and a threshold, and returns the number of students who scored below the threshold.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the test scores.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    threshold (int): The threshold score.\n    Returns:\n    int: The number of students who scored below the threshold.\n    \"\"\"\n    # prepare a list to calculate scores of each student\n    scores = []\n    # calculate the total score of each student\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # filter the students who scored below the threshold\n    filtered = [score for score in scores if score < threshold]\n    # count the number of students\n    num_students = len(filtered)\n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [5, 6, 7, 8],\n    'Leaf': [[0, 6, 6, 8, 9], [4, 7], [0, 0, 0, 1, 3, 3, 3, 9, 9], [2, 2, 8, 9]]\n})\n# Set the threshold score\nthreshold = 83\n# Call the tool to solve the problem\nprint(count_students_below_threshold(df, threshold))","question":"Mrs. Dickerson, the science teacher, informed her students of their scores on Monday's test. How many students scored fewer than 83 points?","prediction_code":"import pandas as pd\n\ndef count_students_below_threshold(df, threshold):\n    \"\"\"\n    This function takes in a pandas DataFrame of science test scores and a threshold, and returns the number of students who scored below the threshold.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the test scores.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    threshold (int): The threshold score.\n    Returns:\n    int: The number of students who scored below the threshold.\n    \"\"\"\n    # prepare a list to calculate scores of each student\n    scores = []\n    # calculate the total score of each student\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # filter the students who scored below the threshold\n    filtered = [score for score in scores if score < threshold]\n    # count the number of students\n    num_students = len(filtered)\n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [5, 6, 7, 8],\n    'Leaf': [[0, 6, 6, 8, 9], [4, 7], [0, 0, 0, 1, 3, 3, 3, 9, 9], [2, 2, 8, 9]]\n})\n# Set the threshold score\nthreshold = 83\n# Call the tool to solve the problem\nprint(count_students_below_threshold(df, threshold))","table":"Name: Science test scores\nUnit: students\nContent:\nStem | Leaf \n5 | 0, 6, 6, 8, 9\n6 | 4, 7\n7 | 0, 0, 0, 1, 3, 3, 3, 9, 9\n8 | 2, 2, 8, 9"}
{"level":5,"answer":59.0,"prediction":"import pandas as pd\nimport statistics\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of bags of popcorn sold and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of bags of popcorn sold.\n    The dataframe should contain \"Day\" and \"Number of bags of popcorn\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of bags of popcorn']\n    \n    # Calculate the mode using the statistics module\n    mode = statistics.mode(numbers)\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n    'Number of bags of popcorn': [59, 59, 71, 66, 66, 71, 59]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"A concession stand worker at the movie theater looked up how many bags of popcorn were sold in the past 7 days. What is the mode of the numbers?","prediction_code":"import pandas as pd\nimport statistics\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of bags of popcorn sold and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of bags of popcorn sold.\n    The dataframe should contain \"Day\" and \"Number of bags of popcorn\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of bags of popcorn']\n    \n    # Calculate the mode using the statistics module\n    mode = statistics.mode(numbers)\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n    'Number of bags of popcorn': [59, 59, 71, 66, 66, 71, 59]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Bags of popcorn sold\nUnit: None\nContent:\nDay | Number of bags of popcorn\nMonday | 59\nTuesday | 59\nWednesday | 71\nThursday | 66\nFriday | 66\nSaturday | 71\nSunday | 59"}
{"level":6,"answer":6.0,"prediction":"import pandas as pd\nfrom statistics import mode\n\ndef find_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of computer counts in classrooms and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the teacher names and the number of computers in their classrooms.\n    The DataFrame should have columns 'Teacher' and 'Number of computers'.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of computer counts\n    computer_counts = df['Number of computers']\n    \n    # Calculate the mode of the numbers\n    mode_value = mode(computer_counts)\n    \n    return mode_value\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Teacher': ['Mr. Schmidt', 'Mr. Morales', 'Mrs. Jansen', 'Ms. Cohen', 'Miss Murphy', 'Mr. Lim', 'Mrs. Rossi', 'Mrs. Tan'],\n    'Number of computers': [6, 7, 6, 8, 2, 6, 2, 7]\n})\n# Call the tool to solve the problem\nprint(find_mode(df))","question":"The teachers at a middle school counted how many computers they had in their classrooms. What is the mode of the numbers?","prediction_code":"import pandas as pd\nfrom statistics import mode\n\ndef find_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of computer counts in classrooms and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the teacher names and the number of computers in their classrooms.\n    The DataFrame should have columns 'Teacher' and 'Number of computers'.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of computer counts\n    computer_counts = df['Number of computers']\n    \n    # Calculate the mode of the numbers\n    mode_value = mode(computer_counts)\n    \n    return mode_value","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Teacher': ['Mr. Schmidt', 'Mr. Morales', 'Mrs. Jansen', 'Ms. Cohen', 'Miss Murphy', 'Mr. Lim', 'Mrs. Rossi', 'Mrs. Tan'],\n    'Number of computers': [6, 7, 6, 8, 2, 6, 2, 7]\n})\n# Call the tool to solve the problem\nprint(find_mode(df))","table":"Name: Computers in classrooms\nUnit: None\nContent:\nTeacher | Number of computers\nMr. Schmidt | 6\nMr. Morales | 7\nMrs. Jansen | 6\nMs. Cohen | 8\nMiss Murphy | 2\nMr. Lim | 6\nMrs. Rossi | 2\nMrs. Tan | 7"}
{"level":8,"answer":30.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(items_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to be purchased.\n    It returns the total cost of the items.\n    Args:\n    items_df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = items_df[items_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['wrench', 'watering can', 'can of paint', 'hammer', 'lawn mower', 'lawn sprinkler'],\n    'Price': [11, 18, 14, 14, 95, 19]\n})\n\n# Define the items to be purchased\nitems = ['lawn sprinkler', 'wrench']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Brenna need to buy a lawn sprinkler and a wrench?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(items_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to be purchased.\n    It returns the total cost of the items.\n    Args:\n    items_df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = items_df[items_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['wrench', 'watering can', 'can of paint', 'hammer', 'lawn mower', 'lawn sprinkler'],\n    'Price': [11, 18, 14, 14, 95, 19]\n})\n\n# Define the items to be purchased\nitems = ['lawn sprinkler', 'wrench']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nwrench | $11\nwatering can | $18\ncan of paint | $14\nhammer | $14\nlawn mower | $95\nlawn sprinkler | $19"}
{"level":7,"answer":7.9,"prediction":"import pandas as pd\n\ndef calculate_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the cost of buying a certain quantity of an item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item to calculate the cost for.\n    quantity (float): The quantity of the item to calculate the cost for.\n    Returns:\n    float: The cost of buying the specified quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price per pound for the item\n    price_per_lb = item_df['Price'].values[0]\n    \n    # Calculate the cost by multiplying the price per pound by the quantity\n    cost = price_per_lb * quantity\n    \n    return cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['garlic peanuts', 'salted peanuts', 'honey roasted peanuts', 'unshelled peanuts'],\n    'Price': [1.38, 2.54, 2.27, 1.58]\n})\n\n# Call the tool to solve the problem\nprint(calculate_cost(df, 'unshelled peanuts', 5))","question":"How much would it cost to buy 5 pounds of unshelled peanuts?","prediction_code":"import pandas as pd\n\ndef calculate_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the cost of buying a certain quantity of an item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item to calculate the cost for.\n    quantity (float): The quantity of the item to calculate the cost for.\n    Returns:\n    float: The cost of buying the specified quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price per pound for the item\n    price_per_lb = item_df['Price'].values[0]\n    \n    # Calculate the cost by multiplying the price per pound by the quantity\n    cost = price_per_lb * quantity\n    \n    return cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['garlic peanuts', 'salted peanuts', 'honey roasted peanuts', 'unshelled peanuts'],\n    'Price': [1.38, 2.54, 2.27, 1.58]\n})\n\n# Call the tool to solve the problem\nprint(calculate_cost(df, 'unshelled peanuts', 5))","table":"Name: None\nUnit: $\nContent:\ngarlic peanuts | $1.38 per lb\nsalted peanuts | $2.54 per lb\nhoney roasted peanuts | $2.27 per lb\nunshelled peanuts | $1.58 per lb"}
{"level":7,"answer":7.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of grocery stores in each town and returns the median of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of grocery stores in each town.\n    The dataframe should contain \"Town\" and \"Number of stores\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the \"Number of stores\" column as a Series\n    num_stores = df['Number of stores']\n    \n    # Calculate the median using pandas\n    median = num_stores.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Town': ['Watertown', 'Greenwood', 'Richmond', 'Springfield', 'Marion'],\n    'Number of stores': [7, 8, 4, 8, 2]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"A newspaper researched how many grocery stores there are in each town. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of grocery stores in each town and returns the median of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of grocery stores in each town.\n    The dataframe should contain \"Town\" and \"Number of stores\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the \"Number of stores\" column as a Series\n    num_stores = df['Number of stores']\n    \n    # Calculate the median using pandas\n    median = num_stores.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Town': ['Watertown', 'Greenwood', 'Richmond', 'Springfield', 'Marion'],\n    'Number of stores': [7, 8, 4, 8, 2]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Grocery stores in each town\nUnit: None\nContent:\nTown | Number of stores\nWatertown | 7\nGreenwood | 8\nRichmond | 4\nSpringfield | 8\nMarion | 2"}
{"level":7,"answer":12.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of a budget table and two years, and returns the rate of change between the two years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the budget table with columns 'Year' and 'Per-student budget'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_budget = df[df['Year'] == start_year]['Per-student budget'].values[0]\n    end_budget = df[df['Year'] == end_year]['Per-student budget'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_budget - start_budget) \/ start_budget * 100\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2013, 2014, 2015, 2016, 2017],\n    'Per-student budget': [37, 49, 33, 41, 42]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2013, 2014))","question":"Each year the Kensington School District publishes its annual budget, which includes information on the sports program's per-student spending. According to the table, what was the rate of change between 2013 and 2014?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of a budget table and two years, and returns the rate of change between the two years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the budget table with columns 'Year' and 'Per-student budget'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_budget = df[df['Year'] == start_year]['Per-student budget'].values[0]\n    end_budget = df[df['Year'] == end_year]['Per-student budget'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_budget - start_budget) \/ start_budget * 100\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2013, 2014, 2015, 2016, 2017],\n    'Per-student budget': [37, 49, 33, 41, 42]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2013, 2014))","table":"Name: Kensington School District sports budget\nUnit: $, per year\nContent:\nYear | Per-student budget\n2013 | $37\n2014 | $49\n2015 | $33\n2016 | $41\n2017 | $42"}
{"level":1,"answer":6.0,"prediction":"import pandas as pd\n\ndef calculate_blocks_of_cheese(df, num_shelves):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of blocks of cheese per shelf and the number of shelves, and returns the total number of blocks of cheese.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of blocks of cheese per shelf.\n    The DataFrame should have columns 'Number of shelves' and 'Number of blocks of cheese'.\n    num_shelves (int): The number of shelves to calculate the total number of blocks of cheese.\n    Returns:\n    int: The total number of blocks of cheese on the specified number of shelves.\n    \"\"\"\n    # Filter the DataFrame for the specified number of shelves\n    shelves_df = df[df['Number of shelves'] == num_shelves]\n    \n    # Get the number of blocks of cheese for the specified number of shelves\n    num_blocks = shelves_df['Number of blocks of cheese'].values[0]\n    \n    return num_blocks\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of shelves': [1, 2, 3],\n    'Number of blocks of cheese': [2, 4, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_blocks_of_cheese(df, 3))","question":"Each shelf has 2 blocks of cheese. How many blocks of cheese are on 3 shelves?","prediction_code":"import pandas as pd\n\ndef calculate_blocks_of_cheese(df, num_shelves):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of blocks of cheese per shelf and the number of shelves, and returns the total number of blocks of cheese.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of blocks of cheese per shelf.\n    The DataFrame should have columns 'Number of shelves' and 'Number of blocks of cheese'.\n    num_shelves (int): The number of shelves to calculate the total number of blocks of cheese.\n    Returns:\n    int: The total number of blocks of cheese on the specified number of shelves.\n    \"\"\"\n    # Filter the DataFrame for the specified number of shelves\n    shelves_df = df[df['Number of shelves'] == num_shelves]\n    \n    # Get the number of blocks of cheese for the specified number of shelves\n    num_blocks = shelves_df['Number of blocks of cheese'].values[0]\n    \n    return num_blocks","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of shelves': [1, 2, 3],\n    'Number of blocks of cheese': [2, 4, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_blocks_of_cheese(df, 3))","table":"Name: None\nUnit: blocks of cheese\nContent:\nNumber of shelves | Number of blocks of cheese\n1 | 2\n2 | 4\n3 | ?"}
{"level":6,"answer":15.6,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost for a given item and quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information for different items.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost for the given item and quantity.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price per kilogram for the item\n    price_per_kg = item_df['Price'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price_per_kg * quantity\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['canvas scraps', 'silk scraps', 'felt scraps', 'faux fur scraps'],\n    'Price': [4, 3, 4, 4]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'felt scraps', 3 + 9\/10))","question":"If Judith buys 3+9\/10 kilograms of felt scraps, how much will she spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost for a given item and quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information for different items.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost for the given item and quantity.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price per kilogram for the item\n    price_per_kg = item_df['Price'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price_per_kg * quantity\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['canvas scraps', 'silk scraps', 'felt scraps', 'faux fur scraps'],\n    'Price': [4, 3, 4, 4]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'felt scraps', 3 + 9\/10))","table":"Name: None\nUnit: $\nContent:\ncanvas scraps | $4\/kilogram\nsilk scraps | $3\/kilogram\nfelt scraps | $4\/kilogram\nfaux fur scraps | $4\/kilogram"}
{"level":6,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of miles driven per day and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of miles driven per day.\n    The dataframe should contain \"Day\" and \"Number of miles\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the \"Number of miles\" column as a Series\n    miles_series = df['Number of miles']\n    \n    # Calculate the median using pandas\n    median = miles_series.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Number of miles': [5, 10, 1, 5, 2]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"Nora kept a driving log to see how many miles she drove each day. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of miles driven per day and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of miles driven per day.\n    The dataframe should contain \"Day\" and \"Number of miles\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the \"Number of miles\" column as a Series\n    miles_series = df['Number of miles']\n    \n    # Calculate the median using pandas\n    median = miles_series.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Number of miles': [5, 10, 1, 5, 2]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Miles driven\nUnit: None\nContent:\nDay | Number of miles\nSunday | 5\nMonday | 10\nTuesday | 1\nWednesday | 5\nThursday | 2"}
{"level":4,"answer":3.0,"prediction":"import pandas as pd\n\ndef count_pages_with_47_words(df):\n    \"\"\"\n    This function takes in a pandas dataframe of words per page, and returns the number of pages that have exactly 47 words.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of words per page.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of pages that have exactly 47 words.\n    \"\"\"\n    # prepare a list to calculate words in each page\n    words = []\n    # calculate the total number of words in each page\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            words.append(stem * 10 + leaf[j])\n    # filter the pages where the total number of words is equal to 47\n    filtered = [word for word in words if word == 47]\n    # count the number of rows\n    num_pages = len(filtered)\n    return num_pages\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6],\n    'Leaf': [[8], [7, 7, 7, 9], [1, 8], [0, 7]]\n})\n# Call the tool to solve the problem\nprint(count_pages_with_47_words(df))","question":"Owen counted the number of words per page in his new book. How many pages have exactly 47 words?","prediction_code":"import pandas as pd\n\ndef count_pages_with_47_words(df):\n    \"\"\"\n    This function takes in a pandas dataframe of words per page, and returns the number of pages that have exactly 47 words.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of words per page.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of pages that have exactly 47 words.\n    \"\"\"\n    # prepare a list to calculate words in each page\n    words = []\n    # calculate the total number of words in each page\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            words.append(stem * 10 + leaf[j])\n    # filter the pages where the total number of words is equal to 47\n    filtered = [word for word in words if word == 47]\n    # count the number of rows\n    num_pages = len(filtered)\n    return num_pages","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6],\n    'Leaf': [[8], [7, 7, 7, 9], [1, 8], [0, 7]]\n})\n# Call the tool to solve the problem\nprint(count_pages_with_47_words(df))","table":"Name: Words per page\nUnit: None\nContent:\nStem | Leaf \n3 | 8\n4 | 7, 7, 7, 9\n5 | 1, 8\n6 | 0, 7"}
{"level":7,"answer":0.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of employees with health care benefits and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of employees with health care benefits for each year.\n    The DataFrame should have \"Year\" and \"Employees\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_employees = df[df['Year'] == start_year]['Employees'].values[0]\n    end_employees = df[df['Year'] == end_year]['Employees'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_employees - start_employees) \/ start_employees * 100\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2006, 2007, 2008, 2009, 2010],\n    'Employees': [10, 7, 7, 6, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2007, 2008))","question":"At Norwood Consulting, the head of human resources examined how the number of employees with health care benefits varied in response to policy changes. According to the table, what was the rate of change between 2007 and 2008?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of employees with health care benefits and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of employees with health care benefits for each year.\n    The DataFrame should have \"Year\" and \"Employees\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_employees = df[df['Year'] == start_year]['Employees'].values[0]\n    end_employees = df[df['Year'] == end_year]['Employees'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_employees - start_employees) \/ start_employees * 100\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2006, 2007, 2008, 2009, 2010],\n    'Employees': [10, 7, 7, 6, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2007, 2008))","table":"Name: Employees with health care benefits\nUnit: employees per year\nContent:\nYear | Employees\n2006 | 10\n2007 | 7\n2008 | 7\n2009 | 6\n2010 | 5"}
{"level":5,"answer":20.0,"prediction":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of swing counts per elementary school and returns the mode of the swing counts.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the swing counts per elementary school.\n    The dataframe should contain \"School\" and \"Number of swings\" columns.\n    Returns:\n    int: The mode of the swing counts.\n    \"\"\"\n    # Get the swing counts column\n    swing_counts = df['Number of swings']\n    \n    # Calculate the mode using the value_counts() function\n    mode = swing_counts.mode().values[0]\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'School': ['Shoreline Elementary', 'Valley Elementary', 'Jefferson Elementary', 'Boyd Elementary', 'Roseville Elementary', 'Canyon Elementary', 'Newberry Elementary'],\n    'Number of swings': [19, 20, 20, 19, 9, 20, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"The school district compared how many swings each elementary school has. What is the mode of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of swing counts per elementary school and returns the mode of the swing counts.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the swing counts per elementary school.\n    The dataframe should contain \"School\" and \"Number of swings\" columns.\n    Returns:\n    int: The mode of the swing counts.\n    \"\"\"\n    # Get the swing counts column\n    swing_counts = df['Number of swings']\n    \n    # Calculate the mode using the value_counts() function\n    mode = swing_counts.mode().values[0]\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'School': ['Shoreline Elementary', 'Valley Elementary', 'Jefferson Elementary', 'Boyd Elementary', 'Roseville Elementary', 'Canyon Elementary', 'Newberry Elementary'],\n    'Number of swings': [19, 20, 20, 19, 9, 20, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Swings\nUnit: None\nContent:\nSchool | Number of swings\nShoreline Elementary | 19\nValley Elementary | 20\nJefferson Elementary | 20\nBoyd Elementary | 19\nRoseville Elementary | 9\nCanyon Elementary | 20\nNewberry Elementary | 9"}
{"level":4,"answer":0.03,"prediction":"import pandas as pd\n\ndef calculate_remaining_money(df, budget, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, a budget, and a list of items to buy.\n    It returns the remaining money after buying the specified items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    budget (float): The budget for buying the items.\n    items (list): A list of items to buy.\n    Returns:\n    float: The remaining money after buying the specified items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    # Calculate the remaining money\n    remaining_money = budget - total_cost\n    \n    return remaining_money\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['toy guitar', 'yo-yo', 'board game', 'toy truck', 'toy dinosaur'],\n    'Price': [9.95, 4.20, 9.12, 4.02, 2.11]\n})\n\n# Set the budget and items to buy\nbudget = 14.00\nitems = ['toy truck', 'toy guitar']\n\n# Call the tool to solve the problem\nremaining_money = calculate_remaining_money(df, budget, items)\n\n# Print out the answer\nprint(remaining_money)","question":"Oliver has $14.00. How much money will Oliver have left if he buys a toy truck and a toy guitar?","prediction_code":"import pandas as pd\n\ndef calculate_remaining_money(df, budget, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, a budget, and a list of items to buy.\n    It returns the remaining money after buying the specified items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    budget (float): The budget for buying the items.\n    items (list): A list of items to buy.\n    Returns:\n    float: The remaining money after buying the specified items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    # Calculate the remaining money\n    remaining_money = budget - total_cost\n    \n    return remaining_money","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['toy guitar', 'yo-yo', 'board game', 'toy truck', 'toy dinosaur'],\n    'Price': [9.95, 4.20, 9.12, 4.02, 2.11]\n})\n\n# Set the budget and items to buy\nbudget = 14.00\nitems = ['toy truck', 'toy guitar']\n\n# Call the tool to solve the problem\nremaining_money = calculate_remaining_money(df, budget, items)\n\n# Print out the answer\nprint(remaining_money)","table":"Name: None\nUnit: $\nContent:\ntoy guitar | $9.95\nyo-yo | $4.20\nboard game | $9.12\ntoy truck | $4.02\ntoy dinosaur | $2.11"}
{"level":4,"answer":99.12,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to be purchased.\n    It returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['computer keyboard', 'DVD', 'blender', 'DVD player', 'calculator', 'CD player'],\n    'Price': [36.82, 13.00, 11.63, 75.80, 72.20, 26.92]\n})\n\n# Define the items to be purchased\nitems = ['CD player', 'calculator']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, items)\n\n# Print out the answer\nprint(total_cost)","question":"How much money does Lena need to buy a CD player and a calculator?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to be purchased.\n    It returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['computer keyboard', 'DVD', 'blender', 'DVD player', 'calculator', 'CD player'],\n    'Price': [36.82, 13.00, 11.63, 75.80, 72.20, 26.92]\n})\n\n# Define the items to be purchased\nitems = ['CD player', 'calculator']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, items)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\ncomputer keyboard | $36.82\nDVD | $13.00\nblender | $11.63\nDVD player | $75.80\ncalculator | $72.20\nCD player | $26.92"}
{"level":7,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_range(df, name):\n    \"\"\"\n    This function takes in a pandas DataFrame of science articles read and a name, and returns the range of the numbers of science articles read by Meg's classmates.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the names and numbers of science articles read.\n    The DataFrame should have columns 'Name' and 'Number of science articles'.\n    name (str): The name of the person whose classmates' science articles are being considered.\n    Returns:\n    int: The range of the numbers of science articles read by Meg's classmates.\n    \"\"\"\n    # Filter the DataFrame for Meg's classmates\n    classmates_df = df[df['Name'] != name]\n    \n    # Calculate the range of the numbers of science articles read\n    range_articles = classmates_df['Number of science articles'].max() - classmates_df['Number of science articles'].min()\n    \n    return range_articles\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Meg', 'Becky', 'Whitney', 'Stanley', 'Aubrey', 'Olivia', 'Isaac', 'Destiny'],\n    'Number of science articles': [9, 10, 9, 8, 6, 10, 9, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df, 'Meg'))","question":"Meg's classmates revealed how many science articles they read. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df, name):\n    \"\"\"\n    This function takes in a pandas DataFrame of science articles read and a name, and returns the range of the numbers of science articles read by Meg's classmates.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the names and numbers of science articles read.\n    The DataFrame should have columns 'Name' and 'Number of science articles'.\n    name (str): The name of the person whose classmates' science articles are being considered.\n    Returns:\n    int: The range of the numbers of science articles read by Meg's classmates.\n    \"\"\"\n    # Filter the DataFrame for Meg's classmates\n    classmates_df = df[df['Name'] != name]\n    \n    # Calculate the range of the numbers of science articles read\n    range_articles = classmates_df['Number of science articles'].max() - classmates_df['Number of science articles'].min()\n    \n    return range_articles","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Meg', 'Becky', 'Whitney', 'Stanley', 'Aubrey', 'Olivia', 'Isaac', 'Destiny'],\n    'Number of science articles': [9, 10, 9, 8, 6, 10, 9, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df, 'Meg'))","table":"Name: Science articles read\nUnit: None\nContent:\nName | Number of science articles\nMeg | 9\nBecky | 10\nWhitney | 9\nStanley | 8\nAubrey | 6\nOlivia | 10\nIsaac | 9\nDestiny | 5"}
{"level":8,"answer":7.0,"prediction":"import pandas as pd\n\ndef count_children_in_weight_range(df, min_weight, max_weight):\n    \"\"\"\n    This function takes in a pandas DataFrame of children's weights and returns the number of children who weighed at least min_weight pounds but less than max_weight pounds.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the weights of children.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_weight (int): The minimum weight in pounds.\n    max_weight (int): The maximum weight in pounds.\n    Returns:\n    int: The number of children who weighed at least min_weight pounds but less than max_weight pounds.\n    \"\"\"\n    # prepare a list to calculate weights of each child\n    weights = []\n    # calculate the weight of each child\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            weights.append(stem * 10 + leaf[j])\n    # filter the children who weighed at least min_weight pounds but less than max_weight pounds\n    filtered = [weight for weight in weights if min_weight <= weight < max_weight]\n    # count the number of children\n    num_children = len(filtered)\n    return num_children\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [5, 6, 7, 8, 9],\n    'Leaf': [[1, 2, 3, 6, 6, 9], [7], [], [1, 7, 8], [0, 0]]\n})\n# Call the tool to solve the problem\nprint(count_children_in_weight_range(df, 50, 70))","question":"Dr. Palmer, a pediatrician, weighed all the children who recently visited her office. How many children weighed at least 50 pounds but less than 70 pounds?","prediction_code":"import pandas as pd\n\ndef count_children_in_weight_range(df, min_weight, max_weight):\n    \"\"\"\n    This function takes in a pandas DataFrame of children's weights and returns the number of children who weighed at least min_weight pounds but less than max_weight pounds.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the weights of children.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_weight (int): The minimum weight in pounds.\n    max_weight (int): The maximum weight in pounds.\n    Returns:\n    int: The number of children who weighed at least min_weight pounds but less than max_weight pounds.\n    \"\"\"\n    # prepare a list to calculate weights of each child\n    weights = []\n    # calculate the weight of each child\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            weights.append(stem * 10 + leaf[j])\n    # filter the children who weighed at least min_weight pounds but less than max_weight pounds\n    filtered = [weight for weight in weights if min_weight <= weight < max_weight]\n    # count the number of children\n    num_children = len(filtered)\n    return num_children","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [5, 6, 7, 8, 9],\n    'Leaf': [[1, 2, 3, 6, 6, 9], [7], [], [1, 7, 8], [0, 0]]\n})\n# Call the tool to solve the problem\nprint(count_children_in_weight_range(df, 50, 70))","table":"Name: Children's weights (lbs)\nUnit: children\nContent:\nStem | Leaf \n5 | 1, 2, 3, 6, 6, 9\n6 | 7\n7 | \n8 | 1, 7, 8\n9 | 0, 0"}
{"level":4,"answer":3.0,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['casserole dish', 'cutting board', 'serving platter', 'ice cream scoop', 'glass measuring cup'],\n    'Price': [4, 8, 4, 9, 5]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'cutting board', 'glass measuring cup'))","question":"How much more does a cutting board cost than a glass measuring cup?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['casserole dish', 'cutting board', 'serving platter', 'ice cream scoop', 'glass measuring cup'],\n    'Price': [4, 8, 4, 9, 5]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'cutting board', 'glass measuring cup'))","table":"Name: None\nUnit: $\nContent:\ncasserole dish | $4\ncutting board | $8\nserving platter | $4\nice cream scoop | $9\nglass measuring cup | $5"}
{"level":7,"answer":-4.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of hockey games won by Fulton High School and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of games won by Fulton High School each year.\n    The DataFrame should have \"Year\" and \"Games won\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_games_won = df[df['Year'] == start_year]['Games won'].values[0]\n    end_games_won = df[df['Year'] == end_year]['Games won'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_games_won - start_games_won) \/ (end_year - start_year)\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2008, 2009, 2010, 2011, 2012],\n    'Games won': [15, 11, 15, 11, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2010, 2011))","question":"A pair of Fulton High School hockey fans counted the number of games won by the school each year. According to the table, what was the rate of change between 2010 and 2011?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of hockey games won by Fulton High School and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of games won by Fulton High School each year.\n    The DataFrame should have \"Year\" and \"Games won\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_games_won = df[df['Year'] == start_year]['Games won'].values[0]\n    end_games_won = df[df['Year'] == end_year]['Games won'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_games_won - start_games_won) \/ (end_year - start_year)\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2008, 2009, 2010, 2011, 2012],\n    'Games won': [15, 11, 15, 11, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2010, 2011))","table":"Name: Hockey games won by Fulton High\nUnit: games per year\nContent:\nYear | Games won\n2008 | 15\n2009 | 11\n2010 | 15\n2011 | 11\n2012 | 7"}
{"level":5,"answer":4.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trivia game scores and returns the range of the scores.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and scores of the players.\n    The dataframe should contain \"Name\" and \"Score\" columns.\n    Returns:\n    int: The range of the scores.\n    \"\"\"\n    # Get the minimum and maximum scores\n    min_score = df['Score'].min()\n    max_score = df['Score'].max()\n    \n    # Calculate the range\n    score_range = max_score - min_score\n    \n    return score_range\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Erica', 'Dirk', 'Lillian', 'Malik', 'Grayson', 'Seth', 'Justine', 'Andrew'],\n    'Score': [10, 12, 10, 9, 10, 8, 9, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"Some friends played a trivia game and recorded their scores. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trivia game scores and returns the range of the scores.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and scores of the players.\n    The dataframe should contain \"Name\" and \"Score\" columns.\n    Returns:\n    int: The range of the scores.\n    \"\"\"\n    # Get the minimum and maximum scores\n    min_score = df['Score'].min()\n    max_score = df['Score'].max()\n    \n    # Calculate the range\n    score_range = max_score - min_score\n    \n    return score_range","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Erica', 'Dirk', 'Lillian', 'Malik', 'Grayson', 'Seth', 'Justine', 'Andrew'],\n    'Score': [10, 12, 10, 9, 10, 8, 9, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Trivia game scores\nUnit: None\nContent:\nName | Score\nErica | 10\nDirk | 12\nLillian | 10\nMalik | 9\nGrayson | 10\nSeth | 8\nJustine | 9\nAndrew | 8"}
{"level":8,"answer":20.0,"prediction":"import pandas as pd\n\ndef count_ponds_with_ducks(df, min_ducks, max_ducks):\n    \"\"\"\n    This function takes in a pandas dataframe of ducks per pond and returns the number of ponds that have at least min_ducks ducks but fewer than max_ducks ducks.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of ducks per pond.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_ducks (int): The minimum number of ducks per pond to consider.\n    max_ducks (int): The maximum number of ducks per pond to consider.\n    Returns:\n    int: The number of ponds that have at least min_ducks ducks but fewer than max_ducks ducks.\n    \"\"\"\n    # prepare a list to calculate the number of ducks in each pond\n    ducks = []\n    # calculate the total number of ducks in each pond\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            ducks.append(stem * 10 + leaf[j])\n    # filter the ponds where the total number of ducks is greater than or equal to min_ducks and less than max_ducks\n    filtered = [duck for duck in ducks if duck >= min_ducks and duck < max_ducks]\n    # count the number of ponds\n    num_ponds = len(filtered)\n    return num_ponds\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [5, 6, 7, 8],\n    'Leaf': [[2, 5, 7, 8, 9], [0, 2, 4, 5, 5], [0, 1, 2, 2, 6, 7, 8, 9], [0, 1, 2, 3, 5, 9, 9]]\n})\n# Call the tool to solve the problem\nprint(count_ponds_with_ducks(df, 60, 90))","question":"Aisha counted the number of ducks at each pond in the city. How many ponds had at least 60 ducks but fewer than 90 ducks?","prediction_code":"import pandas as pd\n\ndef count_ponds_with_ducks(df, min_ducks, max_ducks):\n    \"\"\"\n    This function takes in a pandas dataframe of ducks per pond and returns the number of ponds that have at least min_ducks ducks but fewer than max_ducks ducks.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of ducks per pond.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_ducks (int): The minimum number of ducks per pond to consider.\n    max_ducks (int): The maximum number of ducks per pond to consider.\n    Returns:\n    int: The number of ponds that have at least min_ducks ducks but fewer than max_ducks ducks.\n    \"\"\"\n    # prepare a list to calculate the number of ducks in each pond\n    ducks = []\n    # calculate the total number of ducks in each pond\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            ducks.append(stem * 10 + leaf[j])\n    # filter the ponds where the total number of ducks is greater than or equal to min_ducks and less than max_ducks\n    filtered = [duck for duck in ducks if duck >= min_ducks and duck < max_ducks]\n    # count the number of ponds\n    num_ponds = len(filtered)\n    return num_ponds","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [5, 6, 7, 8],\n    'Leaf': [[2, 5, 7, 8, 9], [0, 2, 4, 5, 5], [0, 1, 2, 2, 6, 7, 8, 9], [0, 1, 2, 3, 5, 9, 9]]\n})\n# Call the tool to solve the problem\nprint(count_ponds_with_ducks(df, 60, 90))","table":"Name: Ducks per pond\nUnit: ponds\nContent:\nStem | Leaf \n5 | 2, 5, 7, 8, 9\n6 | 0, 2, 4, 5, 5\n7 | 0, 1, 2, 2, 6, 7, 8, 9\n8 | 0, 1, 2, 3, 5, 9, 9"}
{"level":7,"answer":2.0,"prediction":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of bird sightings and returns the mode of the number of birds seen.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of birds seen each day.\n    The DataFrame should have columns 'Day' and 'Number of birds'.\n    Returns:\n    int: The mode of the number of birds seen.\n    \"\"\"\n    # Get the column of number of birds\n    num_birds = df['Number of birds']\n    \n    # Calculate the mode using the value_counts() function\n    mode = num_birds.value_counts().idxmax()\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Number of birds': [3, 2, 10, 2, 10, 2]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"Maureen went on a bird watching trip and jotted down the number of birds she saw each day. What is the mode of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of bird sightings and returns the mode of the number of birds seen.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of birds seen each day.\n    The DataFrame should have columns 'Day' and 'Number of birds'.\n    Returns:\n    int: The mode of the number of birds seen.\n    \"\"\"\n    # Get the column of number of birds\n    num_birds = df['Number of birds']\n    \n    # Calculate the mode using the value_counts() function\n    mode = num_birds.value_counts().idxmax()\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Number of birds': [3, 2, 10, 2, 10, 2]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Number of birds\nUnit: None\nContent:\nDay | Number of birds\nSaturday | 3\nSunday | 2\nMonday | 10\nTuesday | 2\nWednesday | 10\nThursday | 2"}
{"level":7,"answer":1.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, month1, month2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average waiting times at the DMV and two months, and returns the rate of change between the two months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average waiting times at the DMV with columns 'Month' and 'Waiting time (minutes)'.\n    month1 (str): The first month for calculating the rate of change.\n    month2 (str): The second month for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two months.\n    \"\"\"\n    # Filter the DataFrame for the two months\n    month1_df = df[df['Month'] == month1]\n    month2_df = df[df['Month'] == month2]\n    \n    # Get the waiting times for the two months\n    waiting_time1 = month1_df['Waiting time (minutes)'].values[0]\n    waiting_time2 = month2_df['Waiting time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (waiting_time2 - waiting_time1) \/ waiting_time1\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['March', 'April', 'May', 'June', 'July'],\n    'Waiting time (minutes)': [43, 27, 21, 48, 49]\n})\n\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'June', 'July'))","question":"An administrator at the Department of Motor Vehicles (DMV) tracked the average wait time from month to month. According to the table, what was the rate of change between June and July?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, month1, month2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average waiting times at the DMV and two months, and returns the rate of change between the two months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average waiting times at the DMV with columns 'Month' and 'Waiting time (minutes)'.\n    month1 (str): The first month for calculating the rate of change.\n    month2 (str): The second month for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two months.\n    \"\"\"\n    # Filter the DataFrame for the two months\n    month1_df = df[df['Month'] == month1]\n    month2_df = df[df['Month'] == month2]\n    \n    # Get the waiting times for the two months\n    waiting_time1 = month1_df['Waiting time (minutes)'].values[0]\n    waiting_time2 = month2_df['Waiting time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (waiting_time2 - waiting_time1) \/ waiting_time1\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['March', 'April', 'May', 'June', 'July'],\n    'Waiting time (minutes)': [43, 27, 21, 48, 49]\n})\n\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'June', 'July'))","table":"Name: Average waiting time at the DMV\nUnit: minutes per month\nContent:\nMonth | Waiting time (minutes)\nMarch | 43\nApril | 27\nMay | 21\nJune | 48\nJuly | 49"}
{"level":4,"answer":6.0,"prediction":"import pandas as pd\n\ndef count_commutes_less_than_51_minutes(df):\n    \"\"\"\n    This function takes in a pandas dataframe of commute times and returns the number of commutes that are less than 51 minutes.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the commute times.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of commutes that are less than 51 minutes.\n    \"\"\"\n    # prepare a list to calculate commute times\n    commute_times = []\n    # calculate the total commute time for each commute\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            commute_times.append(stem * 10 + leaf[j])\n    # filter the commutes where the total commute time is less than 51 minutes\n    filtered = [time for time in commute_times if time < 51]\n    # count the number of commutes\n    num_commutes = len(filtered)\n    return num_commutes\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6],\n    'Leaf': [[0, 8], [1, 4, 4], [0, 1, 2, 7, 7], [2, 5, 7, 9, 9]]\n})\n# Call the tool to solve the problem\nprint(count_commutes_less_than_51_minutes(df))","question":"A business magazine surveyed its readers about their commute times. How many commutes are less than 51 minutes?","prediction_code":"import pandas as pd\n\ndef count_commutes_less_than_51_minutes(df):\n    \"\"\"\n    This function takes in a pandas dataframe of commute times and returns the number of commutes that are less than 51 minutes.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the commute times.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of commutes that are less than 51 minutes.\n    \"\"\"\n    # prepare a list to calculate commute times\n    commute_times = []\n    # calculate the total commute time for each commute\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            commute_times.append(stem * 10 + leaf[j])\n    # filter the commutes where the total commute time is less than 51 minutes\n    filtered = [time for time in commute_times if time < 51]\n    # count the number of commutes\n    num_commutes = len(filtered)\n    return num_commutes","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6],\n    'Leaf': [[0, 8], [1, 4, 4], [0, 1, 2, 7, 7], [2, 5, 7, 9, 9]]\n})\n# Call the tool to solve the problem\nprint(count_commutes_less_than_51_minutes(df))","table":"Name: Commute time (minutes)\nUnit: None\nContent:\nStem | Leaf \n3 | 0, 8\n4 | 1, 4, 4\n5 | 0, 1, 2, 7, 7\n6 | 2, 5, 7, 9, 9"}
{"level":8,"answer":24.0,"prediction":"import pandas as pd\n\ndef count_shipments_with_20_cracked_panes(df):\n    \"\"\"\n    This function takes in a pandas dataframe of cracked window panes per shipment, and returns the number of shipments that have at least 20 cracked window panes.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of cracked window panes per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of shipments that have at least 20 cracked window panes.\n    \"\"\"\n    # prepare a list to calculate the number of cracked window panes in each shipment\n    panes = []\n    # calculate the total number of cracked window panes in each shipment\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            panes.append(stem * 10 + leaf[j])\n    # filter the shipments where the total number of cracked window panes is greater than or equal to 20\n    filtered = [pane for pane in panes if pane >= 20]\n    # count the number of shipments\n    num_shipments = len(filtered)\n    return num_shipments\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[1], [0, 4], [1, 3, 4], [1, 5, 9], [1, 3, 9], [1, 1, 5, 5, 7], [1, 2, 6, 8, 9], [6, 8], [0]]\n})\n# Call the tool to solve the problem\nprint(count_shipments_with_20_cracked_panes(df))","question":"The employees at Manuel's Construction monitored the number of cracked window panes in each shipment they received. How many shipments had at least 20 cracked window panes?","prediction_code":"import pandas as pd\n\ndef count_shipments_with_20_cracked_panes(df):\n    \"\"\"\n    This function takes in a pandas dataframe of cracked window panes per shipment, and returns the number of shipments that have at least 20 cracked window panes.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of cracked window panes per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of shipments that have at least 20 cracked window panes.\n    \"\"\"\n    # prepare a list to calculate the number of cracked window panes in each shipment\n    panes = []\n    # calculate the total number of cracked window panes in each shipment\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            panes.append(stem * 10 + leaf[j])\n    # filter the shipments where the total number of cracked window panes is greater than or equal to 20\n    filtered = [pane for pane in panes if pane >= 20]\n    # count the number of shipments\n    num_shipments = len(filtered)\n    return num_shipments","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[1], [0, 4], [1, 3, 4], [1, 5, 9], [1, 3, 9], [1, 1, 5, 5, 7], [1, 2, 6, 8, 9], [6, 8], [0]]\n})\n# Call the tool to solve the problem\nprint(count_shipments_with_20_cracked_panes(df))","table":"Name: Cracked window panes per shipment\nUnit: shipments\nContent:\nStem | Leaf \n1 | 1\n2 | 0, 4\n3 | 1, 3, 4\n4 | 1, 5, 9\n5 | 1, 3, 9\n6 | 1, 1, 5, 5, 7\n7 | 1, 2, 6, 8, 9\n8 | 6, 8\n9 | 0"}
{"level":8,"answer":112.04,"prediction":"import pandas as pd\n\ndef calculate_total_cost(menu_df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the menu items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = menu_df[menu_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\nmenu_df = pd.DataFrame({\n    'Item': ['lasagna', 'steamed broccoli', 'grilled steak', 'pasta with clams', 'pepperoni pizza', 'cheese pizza'],\n    'Price': [6.24, 3.88, 8.93, 9.07, 9.64, 4.78]\n})\n\n# Initialize the orders dictionary\norders = {\n    'steamed broccoli': 9,\n    'pepperoni pizza': 8\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(menu_df, orders))","question":"How much money does Brianna need to buy 9 orders of steamed broccoli and 8 pepperoni pizzas?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(menu_df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the menu items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = menu_df[menu_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\nmenu_df = pd.DataFrame({\n    'Item': ['lasagna', 'steamed broccoli', 'grilled steak', 'pasta with clams', 'pepperoni pizza', 'cheese pizza'],\n    'Price': [6.24, 3.88, 8.93, 9.07, 9.64, 4.78]\n})\n\n# Initialize the orders dictionary\norders = {\n    'steamed broccoli': 9,\n    'pepperoni pizza': 8\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(menu_df, orders))","table":"Name: None\nUnit: $\nContent:\nlasagna | $6.24\nsteamed broccoli | $3.88\ngrilled steak | $8.93\npasta with clams | $9.07\npepperoni pizza | $9.64\ncheese pizza | $4.78"}
{"level":6,"answer":17.0,"prediction":"import pandas as pd\n\ndef find_smallest_number_of_menu_items(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of menu items per restaurant and returns the smallest number of menu items among all restaurants.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of menu items per restaurant.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of menu items among all restaurants.\n    \"\"\"\n    # prepare a list to store the number of menu items for each restaurant\n    menu_items = []\n    # calculate the total number of menu items for each restaurant\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        menu_items.append(stem + len(leaf))\n    # find the smallest number of menu items\n    smallest_number = min(menu_items)\n    return smallest_number\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[7, 8, 8], [1, 6, 7], [4, 5], [1], [4, 5], [2, 3, 4, 5], [3], [3, 8]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_menu_items(df))","question":"A food critic counted the number of menu items at each restaurant in town. What is the smallest number of menu items?","prediction_code":"import pandas as pd\n\ndef find_smallest_number_of_menu_items(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of menu items per restaurant and returns the smallest number of menu items among all restaurants.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of menu items per restaurant.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of menu items among all restaurants.\n    \"\"\"\n    # prepare a list to store the number of menu items for each restaurant\n    menu_items = []\n    # calculate the total number of menu items for each restaurant\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        menu_items.append(stem + len(leaf))\n    # find the smallest number of menu items\n    smallest_number = min(menu_items)\n    return smallest_number","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[7, 8, 8], [1, 6, 7], [4, 5], [1], [4, 5], [2, 3, 4, 5], [3], [3, 8]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_menu_items(df))","table":"Name: Menu items per restaurant\nUnit: menu items\nContent:\nStem | Leaf \n1 | 7, 8, 8\n2 | 1, 6, 7\n3 | 4, 5\n4 | 1\n5 | 4, 5\n6 | 2, 3, 4, 5\n7 | 3\n8 | 3, 8"}
{"level":6,"answer":11.0,"prediction":"import pandas as pd\n\ndef find_smallest_club(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of club sizes and returns the size of the smallest club.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the sizes of the clubs.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The size of the smallest club.\n    \"\"\"\n    # prepare a list to store all club sizes\n    club_sizes = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the size of each club and add it to the list\n        for j in range(len(leaf)):\n            club_sizes.append(stem * 10 + leaf[j])\n    # find the smallest club size\n    smallest_club = min(club_sizes)\n    return smallest_club\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[1, 8, 8], [1, 3], [0, 1, 2, 3, 7], [2, 5, 5], [6, 8], [0, 2, 2, 7], [1, 5, 6], [6]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_club(df))","question":"Kathleen found out the sizes of all the clubs at her school. What is the size of the smallest club?","prediction_code":"import pandas as pd\n\ndef find_smallest_club(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of club sizes and returns the size of the smallest club.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the sizes of the clubs.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The size of the smallest club.\n    \"\"\"\n    # prepare a list to store all club sizes\n    club_sizes = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the size of each club and add it to the list\n        for j in range(len(leaf)):\n            club_sizes.append(stem * 10 + leaf[j])\n    # find the smallest club size\n    smallest_club = min(club_sizes)\n    return smallest_club","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[1, 8, 8], [1, 3], [0, 1, 2, 3, 7], [2, 5, 5], [6, 8], [0, 2, 2, 7], [1, 5, 6], [6]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_club(df))","table":"Name: Club sizes (number of members)\nUnit: members\nContent:\nStem | Leaf \n1 | 1, 8, 8\n2 | 1, 3\n3 | 0, 1, 2, 3, 7\n4 | 2, 5, 5\n5 | 6, 8\n6 | 0, 2, 2, 7\n7 | 1, 5, 6\n8 | 6"}
{"level":8,"answer":35.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its price per unit and the quantity purchased.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price table with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (int): The quantity of the item purchased.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price per unit of the item\n        price_per_unit = item_df['Price'].values[0]\n        \n        # Calculate the total cost\n        total_cost = price_per_unit * quantity\n        \n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['size 6 screws', 'size 1 screws', 'size 5 screws', 'size 3 screws', 'size 2 screws', 'size 4 screws'],\n    'Price': [6, 5, 8, 10, 7, 7]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'size 4 screws', 5))","question":"Judy buys 5 pounds of size 4 screws. How much does she spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its price per unit and the quantity purchased.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price table with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (int): The quantity of the item purchased.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price per unit of the item\n        price_per_unit = item_df['Price'].values[0]\n        \n        # Calculate the total cost\n        total_cost = price_per_unit * quantity\n        \n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['size 6 screws', 'size 1 screws', 'size 5 screws', 'size 3 screws', 'size 2 screws', 'size 4 screws'],\n    'Price': [6, 5, 8, 10, 7, 7]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'size 4 screws', 5))","table":"Name: None\nUnit: $\nContent:\nsize 6 screws | $6\/lb\nsize 1 screws | $5\/lb\nsize 5 screws | $8\/lb\nsize 3 screws | $10\/lb\nsize 2 screws | $7\/lb\nsize 4 screws | $7\/lb"}
{"level":7,"answer":0.0,"prediction":"import pandas as pd\n\ndef count_people_with_41_points(df):\n    \"\"\"\n    This function takes in a pandas dataframe of quiz show scores and returns the number of people who scored exactly 41 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the scores of the people competing on the quiz show.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of people who scored exactly 41 points.\n    \"\"\"\n    # prepare a list to calculate scores of each person\n    scores = []\n    # calculate the total score of each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # count the number of people who scored exactly 41 points\n    num_people = scores.count(41)\n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7, 8, 9],\n    'Leaf': [[4, 4, 6, 6, 9], [0], [4, 9], [0, 1, 2, 2, 3, 7, 7], [1, 9], [0, 0, 0]]\n})\n# Call the tool to solve the problem\nprint(count_people_with_41_points(df))","question":"For a math assignment, Eva researched the scores of the people competing on her favorite quiz show. How many people scored exactly 41 points?","prediction_code":"import pandas as pd\n\ndef count_people_with_41_points(df):\n    \"\"\"\n    This function takes in a pandas dataframe of quiz show scores and returns the number of people who scored exactly 41 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the scores of the people competing on the quiz show.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of people who scored exactly 41 points.\n    \"\"\"\n    # prepare a list to calculate scores of each person\n    scores = []\n    # calculate the total score of each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # count the number of people who scored exactly 41 points\n    num_people = scores.count(41)\n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7, 8, 9],\n    'Leaf': [[4, 4, 6, 6, 9], [0], [4, 9], [0, 1, 2, 2, 3, 7, 7], [1, 9], [0, 0, 0]]\n})\n# Call the tool to solve the problem\nprint(count_people_with_41_points(df))","table":"Name: Quiz show scores\nUnit: people\nContent:\nStem | Leaf \n4 | 4, 4, 6, 6, 9\n5 | 0\n6 | 4, 9\n7 | 0, 1, 2, 2, 3, 7, 7\n8 | 1, 9\n9 | 0, 0, 0"}
{"level":7,"answer":-3.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of dog show data and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the dog show data with columns 'Year' and 'Weight (kg)'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_weight = df[df['Year'] == start_year]['Weight (kg)'].values[0]\n    end_weight = df[df['Year'] == end_year]['Weight (kg)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_weight - start_weight) \/ start_weight\n    \n    return rate_of_change\n########################################\n# Initialize the table into a DataFrame\ndf = pd.DataFrame({\n    'Year': [2010, 2011, 2012, 2013, 2014],\n    'Weight (kg)': [45, 42, 45, 11, 34]\n})\n\n# Call the tool function to calculate the rate of change between 2010 and 2011\nrate_of_change = calculate_rate_of_change(df, 2010, 2011)\n\n# Print out the answer\nprint(rate_of_change)","question":"A dog show enthusiast recorded the weight of the winning dog at recent dog shows. According to the table, what was the rate of change between 2010 and 2011?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of dog show data and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the dog show data with columns 'Year' and 'Weight (kg)'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_weight = df[df['Year'] == start_year]['Weight (kg)'].values[0]\n    end_weight = df[df['Year'] == end_year]['Weight (kg)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_weight - start_weight) \/ start_weight\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a DataFrame\ndf = pd.DataFrame({\n    'Year': [2010, 2011, 2012, 2013, 2014],\n    'Weight (kg)': [45, 42, 45, 11, 34]\n})\n\n# Call the tool function to calculate the rate of change between 2010 and 2011\nrate_of_change = calculate_rate_of_change(df, 2010, 2011)\n\n# Print out the answer\nprint(rate_of_change)","table":"Name: Weight of winning dog at a dog show\nUnit: kilograms per year\nContent:\nYear | Weight (kg)\n2010 | 45\n2011 | 42\n2012 | 45\n2013 | 11\n2014 | 34"}
{"level":8,"answer":5.0,"prediction":"import pandas as pd\n\ndef count_ponds_with_ducks(df, min_ducks, max_ducks):\n    \"\"\"\n    This function takes in a pandas dataframe of ducks per pond and returns the number of ponds that have at least min_ducks ducks but fewer than max_ducks ducks.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of ducks per pond.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_ducks (int): The minimum number of ducks required per pond.\n    max_ducks (int): The maximum number of ducks allowed per pond.\n    Returns:\n    int: The number of ponds that have at least min_ducks ducks but fewer than max_ducks ducks.\n    \"\"\"\n    # prepare a list to calculate the number of ducks in each pond\n    ducks = []\n    # calculate the total number of ducks in each pond\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            ducks.append(stem * 10 + leaf[j])\n    # filter the ponds where the total number of ducks is greater than or equal to min_ducks and less than max_ducks\n    filtered = [duck for duck in ducks if duck >= min_ducks and duck < max_ducks]\n    # count the number of ponds\n    num_ponds = len(filtered)\n    return num_ponds\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7],\n    'Leaf': [[0, 4, 5, 6], [2, 4], [1, 2, 3, 9], [0, 1, 4, 5, 6, 9]]\n})\n# Call the tool to solve the problem\nprint(count_ponds_with_ducks(df, 50, 68))","question":"Damon counted the number of ducks at each pond in the city. How many ponds had at least 50 ducks but fewer than 68 ducks?","prediction_code":"import pandas as pd\n\ndef count_ponds_with_ducks(df, min_ducks, max_ducks):\n    \"\"\"\n    This function takes in a pandas dataframe of ducks per pond and returns the number of ponds that have at least min_ducks ducks but fewer than max_ducks ducks.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of ducks per pond.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_ducks (int): The minimum number of ducks required per pond.\n    max_ducks (int): The maximum number of ducks allowed per pond.\n    Returns:\n    int: The number of ponds that have at least min_ducks ducks but fewer than max_ducks ducks.\n    \"\"\"\n    # prepare a list to calculate the number of ducks in each pond\n    ducks = []\n    # calculate the total number of ducks in each pond\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            ducks.append(stem * 10 + leaf[j])\n    # filter the ponds where the total number of ducks is greater than or equal to min_ducks and less than max_ducks\n    filtered = [duck for duck in ducks if duck >= min_ducks and duck < max_ducks]\n    # count the number of ponds\n    num_ponds = len(filtered)\n    return num_ponds","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7],\n    'Leaf': [[0, 4, 5, 6], [2, 4], [1, 2, 3, 9], [0, 1, 4, 5, 6, 9]]\n})\n# Call the tool to solve the problem\nprint(count_ponds_with_ducks(df, 50, 68))","table":"Name: Ducks per pond\nUnit: ponds\nContent:\nStem | Leaf \n4 | 0, 4, 5, 6\n5 | 2, 4\n6 | 1, 2, 3, 9\n7 | 0, 1, 4, 5, 6, 9"}
{"level":4,"answer":19.27,"prediction":"import pandas as pd\n\ndef calculate_total_cost(items_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to be purchased,\n    and returns the total cost of the items.\n    Args:\n    items_df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = items_df[items_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['softball glove', 'bicycle helmet', 'baseball', 'golf ball', 'swimsuit', 'bike horn'],\n    'Price': [9.69, 8.14, 2.18, 2.33, 8.80, 5.86]\n})\n\n# Define the items to be purchased\nitems = ['golf ball', 'bicycle helmet', 'swimsuit']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Ben need to buy a golf ball, a bicycle helmet, and a swimsuit?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(items_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to be purchased,\n    and returns the total cost of the items.\n    Args:\n    items_df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = items_df[items_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['softball glove', 'bicycle helmet', 'baseball', 'golf ball', 'swimsuit', 'bike horn'],\n    'Price': [9.69, 8.14, 2.18, 2.33, 8.80, 5.86]\n})\n\n# Define the items to be purchased\nitems = ['golf ball', 'bicycle helmet', 'swimsuit']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nsoftball glove | $9.69\nbicycle helmet | $8.14\nbaseball | $2.18\ngolf ball | $2.33\nswimsuit | $8.80\nbike horn | $5.86"}
{"level":2,"answer":40.0,"prediction":"import pandas as pd\n\ndef calculate_total_glass_beads(df, num_bags):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of glass beads per bag and the number of bags, and returns the total number of glass beads.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of glass beads per bag.\n    The dataframe should contain \"Number of bags\" and \"Number of glass beads\" columns.\n    num_bags (int): The number of bags.\n    Returns:\n    int: The total number of glass beads.\n    \"\"\"\n    # Filter the DataFrame for the specific number of bags\n    bags_df = df[df['Number of bags'] == num_bags]\n    \n    # Get the number of glass beads for the specific number of bags\n    num_glass_beads = bags_df['Number of glass beads'].values[0]\n    \n    # Calculate the total number of glass beads\n    total_glass_beads = num_glass_beads * num_bags\n    \n    return total_glass_beads\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of bags': [1, 2, 3, 4],\n    'Number of glass beads': [10, 20, 30, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_glass_beads(df, 4))","question":"Each bag has 10 glass beads. How many glass beads are in 4 bags?","prediction_code":"import pandas as pd\n\ndef calculate_total_glass_beads(df, num_bags):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of glass beads per bag and the number of bags, and returns the total number of glass beads.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of glass beads per bag.\n    The dataframe should contain \"Number of bags\" and \"Number of glass beads\" columns.\n    num_bags (int): The number of bags.\n    Returns:\n    int: The total number of glass beads.\n    \"\"\"\n    # Filter the DataFrame for the specific number of bags\n    bags_df = df[df['Number of bags'] == num_bags]\n    \n    # Get the number of glass beads for the specific number of bags\n    num_glass_beads = bags_df['Number of glass beads'].values[0]\n    \n    # Calculate the total number of glass beads\n    total_glass_beads = num_glass_beads * num_bags\n    \n    return total_glass_beads","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of bags': [1, 2, 3, 4],\n    'Number of glass beads': [10, 20, 30, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_glass_beads(df, 4))","table":"Name: None\nUnit: None\nContent:\nNumber of bags | Number of glass beads\n1 | 10\n2 | 20\n3 | 30\n4 | ?"}
{"level":6,"answer":8.0,"prediction":"import pandas as pd\n\ndef count_offices_in_range(df, min_size, max_size):\n    \"\"\"\n    This function takes in a pandas DataFrame of office sizes and returns the number of offices that are at least min_size square meters but less than max_size square meters.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the sizes of offices.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_size (int): The minimum size of the offices to be counted.\n    max_size (int): The maximum size of the offices to be counted.\n    Returns:\n    int: The number of offices that are at least min_size square meters but less than max_size square meters.\n    \"\"\"\n    # prepare a list to calculate sizes of each office\n    sizes = []\n    # calculate the size of each office\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            sizes.append(stem * 10 + leaf[j])\n    # filter the offices that are at least min_size square meters but less than max_size square meters\n    filtered = [size for size in sizes if min_size <= size < max_size]\n    # count the number of offices\n    num_offices = len(filtered)\n    return num_offices\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7, 8],\n    'Leaf': [[4, 4, 8], [2, 7], [3, 9], [], [2, 6, 6], [1, 6]]\n})\n# Call the tool to solve the problem\nprint(count_offices_in_range(df, 40, 83))","question":"Jamie, who rents properties for a living, measures all the offices in a building he is renting. How many offices are at least 40 square meters but less than 83 square meters?","prediction_code":"import pandas as pd\n\ndef count_offices_in_range(df, min_size, max_size):\n    \"\"\"\n    This function takes in a pandas DataFrame of office sizes and returns the number of offices that are at least min_size square meters but less than max_size square meters.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the sizes of offices.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_size (int): The minimum size of the offices to be counted.\n    max_size (int): The maximum size of the offices to be counted.\n    Returns:\n    int: The number of offices that are at least min_size square meters but less than max_size square meters.\n    \"\"\"\n    # prepare a list to calculate sizes of each office\n    sizes = []\n    # calculate the size of each office\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            sizes.append(stem * 10 + leaf[j])\n    # filter the offices that are at least min_size square meters but less than max_size square meters\n    filtered = [size for size in sizes if min_size <= size < max_size]\n    # count the number of offices\n    num_offices = len(filtered)\n    return num_offices","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7, 8],\n    'Leaf': [[4, 4, 8], [2, 7], [3, 9], [], [2, 6, 6], [1, 6]]\n})\n# Call the tool to solve the problem\nprint(count_offices_in_range(df, 40, 83))","table":"Name: Office sizes (square meters)\nUnit: offices\nContent:\nStem | Leaf \n3 | 4, 4, 8\n4 | 2, 7\n5 | 3, 9\n6 | \n7 | 2, 6, 6\n8 | 1, 6"}
{"level":8,"answer":8.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of numbers and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing a column of numbers.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers from the DataFrame\n    numbers = df['Number of cans of food']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Emmett', 'Luther', 'Bruce', 'Scott', 'Mabel', 'Roxanne', 'Kevin'],\n    'Number of cans of food': [8, 7, 10, 9, 9, 5, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"Emmett's class recorded how many cans of food each student collected for their canned food drive. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of numbers and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing a column of numbers.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers from the DataFrame\n    numbers = df['Number of cans of food']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Emmett', 'Luther', 'Bruce', 'Scott', 'Mabel', 'Roxanne', 'Kevin'],\n    'Number of cans of food': [8, 7, 10, 9, 9, 5, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Cans of food collected\nUnit: None\nContent:\nName | Number of cans of food\nEmmett | 8\nLuther | 7\nBruce | 10\nScott | 9\nMabel | 9\nRoxanne | 5\nKevin | 8"}
{"level":8,"answer":60.0,"prediction":"import pandas as pd\n\ndef count_students(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of rolls of a 6-sided die and returns the total number of students.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the rolls of a 6-sided die and their frequencies.\n    The DataFrame should have columns 'Rolls of a' and 'Numbers rolled'.\n    Returns:\n    int: The total number of students.\n    \"\"\"\n    # Get the frequencies of each roll\n    frequencies = df['Numbers rolled'].tolist()\n    \n    # Calculate the total number of students\n    total_students = sum(frequencies)\n    \n    return total_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Rolls of a': [1, 2, 3, 4, 5, 6],\n    'Numbers rolled': [4, 5, 20, 16, 6, 9]\n})\n\n# Call the tool to solve the problem\nprint(count_students(df))","question":"During a lab exercise, students in Professor Brady's class rolled a 6-sided die and recorded the results. How many students are there in all?","prediction_code":"import pandas as pd\n\ndef count_students(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of rolls of a 6-sided die and returns the total number of students.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the rolls of a 6-sided die and their frequencies.\n    The DataFrame should have columns 'Rolls of a' and 'Numbers rolled'.\n    Returns:\n    int: The total number of students.\n    \"\"\"\n    # Get the frequencies of each roll\n    frequencies = df['Numbers rolled'].tolist()\n    \n    # Calculate the total number of students\n    total_students = sum(frequencies)\n    \n    return total_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Rolls of a': [1, 2, 3, 4, 5, 6],\n    'Numbers rolled': [4, 5, 20, 16, 6, 9]\n})\n\n# Call the tool to solve the problem\nprint(count_students(df))","table":"Name: None\nUnit: None\nContent:\nRolls of a | 6-sided die\nNumbers rolled | Frequency\n1 | 4\n2 | 5\n3 | 20\n4 | 16\n5 | 6\n6 | 9"}
{"level":8,"answer":74.0,"prediction":"import pandas as pd\n\ndef count_members(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trips to the zoo last year and returns the total number of members in the science club.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of trips and their frequencies.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The total number of members in the science club.\n    \"\"\"\n    # Calculate the total number of members by summing the frequencies\n    total_members = df['Frequency'].sum()\n    \n    return total_members\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [0, 1, 2, 3, 4],\n    'Frequency': [18, 16, 17, 20, 3]\n})\n# Call the tool to solve the problem\nprint(count_members(df))","question":"The members of the science club shared how many times they had been to the zoo last year. How many members are there in all?","prediction_code":"import pandas as pd\n\ndef count_members(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trips to the zoo last year and returns the total number of members in the science club.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of trips and their frequencies.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The total number of members in the science club.\n    \"\"\"\n    # Calculate the total number of members by summing the frequencies\n    total_members = df['Frequency'].sum()\n    \n    return total_members","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [0, 1, 2, 3, 4],\n    'Frequency': [18, 16, 17, 20, 3]\n})\n# Call the tool to solve the problem\nprint(count_members(df))","table":"Name: Trips to the zoo last year\nUnit: None\nContent:\nNumber of trips | Frequency\n0 | 18\n1 | 16\n2 | 17\n3 | 20\n4 | 3"}
{"level":2,"answer":12.0,"prediction":"import pandas as pd\n\ndef calculate_grasshoppers(df, num_twigs):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of twigs and grasshoppers, and returns the number of grasshoppers on a given number of twigs.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of twigs and grasshoppers.\n    The dataframe should contain \"Number of twigs\" and \"Number of grasshoppers\" columns.\n    num_twigs (int): The number of twigs to calculate the number of grasshoppers on.\n    Returns:\n    int: The number of grasshoppers on the given number of twigs.\n    \"\"\"\n    # Filter the DataFrame for the specific number of twigs\n    twigs_df = df[df['Number of twigs'] == num_twigs]\n    \n    # Check if the DataFrame is empty\n    if twigs_df.empty:\n        return None\n    \n    # Get the number of grasshoppers on the given number of twigs\n    num_grasshoppers = twigs_df['Number of grasshoppers'].values[0]\n    \n    return num_grasshoppers\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of twigs': [1, 2, 3, 4, 5, 6],\n    'Number of grasshoppers': [2, 4, 6, 8, 10, '?']\n})\n\n# Call the tool to solve the problem\nnum_grasshoppers = calculate_grasshoppers(df, 6)\n\n# Print out the answer\nprint(num_grasshoppers)","question":"Each twig has 2 grasshoppers. How many grasshoppers are on 6 twigs?","prediction_code":"import pandas as pd\n\ndef calculate_grasshoppers(df, num_twigs):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of twigs and grasshoppers, and returns the number of grasshoppers on a given number of twigs.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of twigs and grasshoppers.\n    The dataframe should contain \"Number of twigs\" and \"Number of grasshoppers\" columns.\n    num_twigs (int): The number of twigs to calculate the number of grasshoppers on.\n    Returns:\n    int: The number of grasshoppers on the given number of twigs.\n    \"\"\"\n    # Filter the DataFrame for the specific number of twigs\n    twigs_df = df[df['Number of twigs'] == num_twigs]\n    \n    # Check if the DataFrame is empty\n    if twigs_df.empty:\n        return None\n    \n    # Get the number of grasshoppers on the given number of twigs\n    num_grasshoppers = twigs_df['Number of grasshoppers'].values[0]\n    \n    return num_grasshoppers","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of twigs': [1, 2, 3, 4, 5, 6],\n    'Number of grasshoppers': [2, 4, 6, 8, 10, '?']\n})\n\n# Call the tool to solve the problem\nnum_grasshoppers = calculate_grasshoppers(df, 6)\n\n# Print out the answer\nprint(num_grasshoppers)","table":"Name: None\nUnit: None\nContent:\nNumber of twigs | Number of grasshoppers\n1 | 2\n2 | 4\n3 | 6\n4 | 8\n5 | 10\n6 | ?"}
{"level":5,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_remaining_money(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to be purchased.\n    It returns the amount of money remaining after purchasing the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The amount of money remaining after purchasing the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the total cost\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    # Calculate the remaining money\n    remaining_money = df['Price'].sum() - total_cost\n    \n    return remaining_money\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['bucket', 'mop', 'broom', 'wrench', 'padlock', 'measuring tape'],\n    'Price': [8, 7, 3, 4, 3, 6]\n})\n\n# Define the items to be purchased\nitems = ['broom', 'bucket']\n\n# Call the tool to solve the problem\nprint(calculate_remaining_money(df, items))","question":"Colin has $16. How much money will Colin have left if he buys a broom and a bucket?","prediction_code":"import pandas as pd\n\ndef calculate_remaining_money(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to be purchased.\n    It returns the amount of money remaining after purchasing the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The amount of money remaining after purchasing the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the total cost\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    # Calculate the remaining money\n    remaining_money = df['Price'].sum() - total_cost\n    \n    return remaining_money","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['bucket', 'mop', 'broom', 'wrench', 'padlock', 'measuring tape'],\n    'Price': [8, 7, 3, 4, 3, 6]\n})\n\n# Define the items to be purchased\nitems = ['broom', 'bucket']\n\n# Call the tool to solve the problem\nprint(calculate_remaining_money(df, items))","table":"Name: None\nUnit: $\nContent:\nbucket | $8\nmop | $7\nbroom | $3\nwrench | $4\npadlock | $3\nmeasuring tape | $6"}
{"level":8,"answer":8.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of hockey games won by Douglas High School and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of games won per year with columns 'Year' and 'Games won'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_games_won = df[df['Year'] == start_year]['Games won'].values[0]\n    end_games_won = df[df['Year'] == end_year]['Games won'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_games_won - start_games_won) \/ (end_year - start_year)\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2016, 2017, 2018, 2019, 2020],\n    'Games won': [1, 9, 11, 11, 8]\n})\n\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2016, 2017))","question":"A pair of Douglas High School hockey fans counted the number of games won by the school each year. According to the table, what was the rate of change between 2016 and 2017?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of hockey games won by Douglas High School and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of games won per year with columns 'Year' and 'Games won'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_games_won = df[df['Year'] == start_year]['Games won'].values[0]\n    end_games_won = df[df['Year'] == end_year]['Games won'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_games_won - start_games_won) \/ (end_year - start_year)\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2016, 2017, 2018, 2019, 2020],\n    'Games won': [1, 9, 11, 11, 8]\n})\n\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2016, 2017))","table":"Name: Hockey games won by Douglas High\nUnit: games per year\nContent:\nYear | Games won\n2016 | 1\n2017 | 9\n2018 | 11\n2019 | 11\n2020 | 8"}
{"level":8,"answer":3.0,"prediction":"import pandas as pd\nimport statistics\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of math teachers per high school and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of math teachers per high school.\n    The dataframe should contain \"High school\" and \"Number of math teachers\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of math teachers']\n    \n    # Calculate the mode using the statistics module\n    mode = statistics.mode(numbers)\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'High school': ['Cedar High', 'River High', 'Lincoln High', 'Hillview High', 'Westside High'],\n    'Number of math teachers': [5, 3, 5, 3, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"The school district compared how many math teachers each high school has. What is the mode of the numbers?","prediction_code":"import pandas as pd\nimport statistics\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of math teachers per high school and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of math teachers per high school.\n    The dataframe should contain \"High school\" and \"Number of math teachers\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of math teachers']\n    \n    # Calculate the mode using the statistics module\n    mode = statistics.mode(numbers)\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'High school': ['Cedar High', 'River High', 'Lincoln High', 'Hillview High', 'Westside High'],\n    'Number of math teachers': [5, 3, 5, 3, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Math teachers\nUnit: None\nContent:\nHigh school | Number of math teachers\nCedar High | 5\nRiver High | 3\nLincoln High | 5\nHillview High | 3\nWestside High | 3"}
{"level":2,"answer":15.0,"prediction":"import pandas as pd\n\ndef calculate_total_stools(df, num_offices):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of offices and the number of stools per office, and returns the total number of stools in a given number of offices.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of offices and the number of stools per office with columns 'Number of offices' and 'Number of stools'.\n    num_offices (int): The number of offices to calculate the total number of stools for.\n    Returns:\n    int: The total number of stools in the given number of offices.\n    \"\"\"\n    # Filter the DataFrame for the given number of offices\n    filtered_df = df[df['Number of offices'] <= num_offices]\n    \n    # Calculate the total number of stools\n    total_stools = filtered_df['Number of stools'].sum()\n    \n    return total_stools\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of offices': [1, 2, 3],\n    'Number of stools': [5, 10, '?']\n})\n\n# Convert the '?' value to NaN\ndf['Number of stools'] = pd.to_numeric(df['Number of stools'], errors='coerce')\n\n# Call the tool to solve the problem\nprint(calculate_total_stools(df, 3))","question":"Each office has 5 stools. How many stools are in 3 offices?","prediction_code":"import pandas as pd\n\ndef calculate_total_stools(df, num_offices):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of offices and the number of stools per office, and returns the total number of stools in a given number of offices.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of offices and the number of stools per office with columns 'Number of offices' and 'Number of stools'.\n    num_offices (int): The number of offices to calculate the total number of stools for.\n    Returns:\n    int: The total number of stools in the given number of offices.\n    \"\"\"\n    # Filter the DataFrame for the given number of offices\n    filtered_df = df[df['Number of offices'] <= num_offices]\n    \n    # Calculate the total number of stools\n    total_stools = filtered_df['Number of stools'].sum()\n    \n    return total_stools","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of offices': [1, 2, 3],\n    'Number of stools': [5, 10, '?']\n})\n\n# Convert the '?' value to NaN\ndf['Number of stools'] = pd.to_numeric(df['Number of stools'], errors='coerce')\n\n# Call the tool to solve the problem\nprint(calculate_total_stools(df, 3))","table":"Name: None\nUnit: None\nContent:\nNumber of offices | Number of stools\n1 | 5\n2 | 10\n3 | ?"}
{"level":5,"answer":7.0,"prediction":"import pandas as pd\n\ndef count_people_waited_less_than_60_minutes(df):\n    \"\"\"\n    This function takes in a pandas dataframe of technical assistance wait times and returns the number of people who waited for less than 60 minutes.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the wait times of customers.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of people who waited for less than 60 minutes.\n    \"\"\"\n    # prepare a list to calculate wait times for each person\n    wait_times = []\n    # calculate the total wait time for each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            wait_times.append(stem * 10 + leaf[j])\n    # filter the wait times where the total wait time is less than 60 minutes\n    filtered = [wait_time for wait_time in wait_times if wait_time < 60]\n    # count the number of people\n    num_people = len(filtered)\n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[3, 5], [9], [4, 6], [], [9], [6], [1, 5, 5, 8], [2, 5, 5, 5, 7], [6]]\n})\n# Call the tool to solve the problem\nprint(count_people_waited_less_than_60_minutes(df))","question":"A Technical Assistance Manager monitored his customers' wait times. How many people waited for less than 60 minutes?","prediction_code":"import pandas as pd\n\ndef count_people_waited_less_than_60_minutes(df):\n    \"\"\"\n    This function takes in a pandas dataframe of technical assistance wait times and returns the number of people who waited for less than 60 minutes.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the wait times of customers.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of people who waited for less than 60 minutes.\n    \"\"\"\n    # prepare a list to calculate wait times for each person\n    wait_times = []\n    # calculate the total wait time for each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            wait_times.append(stem * 10 + leaf[j])\n    # filter the wait times where the total wait time is less than 60 minutes\n    filtered = [wait_time for wait_time in wait_times if wait_time < 60]\n    # count the number of people\n    num_people = len(filtered)\n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[3, 5], [9], [4, 6], [], [9], [6], [1, 5, 5, 8], [2, 5, 5, 5, 7], [6]]\n})\n# Call the tool to solve the problem\nprint(count_people_waited_less_than_60_minutes(df))","table":"Name: Technical assistance wait times (minutes)\nUnit: people\nContent:\nStem | Leaf \n0 | 3, 5\n1 | 9\n2 | 4, 6\n3 | \n4 | 9\n5 | 6\n6 | 1, 5, 5, 8\n7 | 2, 5, 5, 5, 7\n8 | 6"}
{"level":8,"answer":7.0,"prediction":"import pandas as pd\n\ndef calculate_mean_temperature(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of temperature at noon for 7 days and returns the mean of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the temperature at noon for 7 days.\n    The dataframe should contain \"Day\" and \"Temperature (\u00b0C)\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Extract the temperature values from the DataFrame\n    temperatures = df['Temperature (\u00b0C)'].values\n    \n    # Calculate the mean of the numbers\n    mean_temperature = sum(temperatures) \/ len(temperatures)\n    \n    return mean_temperature\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday'],\n    'Temperature (\u00b0C)': [10, 10, 5, 7, 6, 6, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_temperature(df))","question":"Julie graphed the temperature at noon for 7 days. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean_temperature(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of temperature at noon for 7 days and returns the mean of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the temperature at noon for 7 days.\n    The dataframe should contain \"Day\" and \"Temperature (\u00b0C)\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Extract the temperature values from the DataFrame\n    temperatures = df['Temperature (\u00b0C)'].values\n    \n    # Calculate the mean of the numbers\n    mean_temperature = sum(temperatures) \/ len(temperatures)\n    \n    return mean_temperature","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday'],\n    'Temperature (\u00b0C)': [10, 10, 5, 7, 6, 6, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_temperature(df))","table":"Name: Temperature at noon\nUnit: None\nContent:\nDay | Temperature (\u00c2\u00b0C)\nThursday | 10\nFriday | 10\nSaturday | 5\nSunday | 7\nMonday | 6\nTuesday | 6\nWednesday | 5"}
{"level":5,"answer":7978.0,"prediction":"import pandas as pd\n\ndef calculate_remaining_money(df, budget, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, a budget, and a list of items to buy.\n    It returns the remaining money after buying the specified items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    budget (float): The initial budget.\n    items (list): A list of items to buy.\n    Returns:\n    float: The remaining money after buying the specified items.\n    \"\"\"\n    # Initialize the remaining money\n    remaining_money = budget\n    \n    # Iterate through the items and subtract their prices from the remaining money\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            remaining_money -= item_price\n    \n    return remaining_money\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['jersey signed by a famous hockey player', 'book signed by a famous author', 'bat signed by a famous baseball player', 'jersey signed by a famous basketball player', 'shirt signed by a famous soccer player', 'photograph signed by a famous race car driver'],\n    'Price': [1849.00, 5562.00, 9569.00, 7648.00, 2275.00, 2946.00]\n})\n\n# Set the initial budget\nbudget = 19822.00\n\n# Set the items to buy\nitems = ['bat signed by a famous baseball player', 'shirt signed by a famous soccer player']\n\n# Call the tool to solve the problem\nremaining_money = calculate_remaining_money(df, budget, items)\n\n# Print out the answer\nprint(remaining_money)","question":"Mariana has $19,822.00. How much money will Mariana have left if she buys a bat signed by a famous baseball player and a shirt signed by a famous soccer player?","prediction_code":"import pandas as pd\n\ndef calculate_remaining_money(df, budget, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, a budget, and a list of items to buy.\n    It returns the remaining money after buying the specified items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    budget (float): The initial budget.\n    items (list): A list of items to buy.\n    Returns:\n    float: The remaining money after buying the specified items.\n    \"\"\"\n    # Initialize the remaining money\n    remaining_money = budget\n    \n    # Iterate through the items and subtract their prices from the remaining money\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            remaining_money -= item_price\n    \n    return remaining_money","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['jersey signed by a famous hockey player', 'book signed by a famous author', 'bat signed by a famous baseball player', 'jersey signed by a famous basketball player', 'shirt signed by a famous soccer player', 'photograph signed by a famous race car driver'],\n    'Price': [1849.00, 5562.00, 9569.00, 7648.00, 2275.00, 2946.00]\n})\n\n# Set the initial budget\nbudget = 19822.00\n\n# Set the items to buy\nitems = ['bat signed by a famous baseball player', 'shirt signed by a famous soccer player']\n\n# Call the tool to solve the problem\nremaining_money = calculate_remaining_money(df, budget, items)\n\n# Print out the answer\nprint(remaining_money)","table":"Name: None\nUnit: $\nContent:\njersey signed by a famous hockey player | $1,849.00\nbook signed by a famous author | $5,562.00\nbat signed by a famous baseball player | $9,569.00\njersey signed by a famous basketball player | $7,648.00\nshirt signed by a famous soccer player | $2,275.00\nphotograph signed by a famous race car driver | $2,946.00"}
{"level":6,"answer":19.2,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a quantity of an item, and returns the total cost of the item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == 'paper beads']\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = quantity * item_price\n        return total_cost\n    else:\n        return None\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['wooden beads', 'crystal beads', 'paper beads', 'metal beads'],\n    'Price': [2, 4, 4, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 4 + 4\/5))","question":"What is the total cost for 4+4\/5 kilograms of paper beads?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a quantity of an item, and returns the total cost of the item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == 'paper beads']\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = quantity * item_price\n        return total_cost\n    else:\n        return None","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['wooden beads', 'crystal beads', 'paper beads', 'metal beads'],\n    'Price': [2, 4, 4, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 4 + 4\/5))","table":"Name: None\nUnit: $\nContent:\nwooden beads | $2\/kilogram\ncrystal beads | $4\/kilogram\npaper beads | $4\/kilogram\nmetal beads | $5\/kilogram"}
{"level":7,"answer":2.0,"prediction":"import pandas as pd\n\ndef calculate_constant_of_proportionality(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of a proportional relationship between the number of times Gina pedals and the number of times the wheels rotate,\n    and returns the constant of proportionality.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of times Gina pedals and the number of times the wheels rotate.\n    The dataframe should contain \"x\" and \"y\" columns.\n    Returns:\n    float: The constant of proportionality.\n    \"\"\"\n    # Calculate the constant of proportionality by dividing the number of times the wheels rotate by the number of times Gina pedals\n    constant_of_proportionality = df['y'] \/ df['x']\n    \n    return constant_of_proportionality\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'x': [4, 7, 9, 10],\n    'y': [8, 14, 18, 20]\n})\n# Call the tool to solve the problem\nprint(calculate_constant_of_proportionality(df))","question":"Gina has outgrown the bike she rode when she was small. So, for her twelfth birthday, her parents surprise her with a five-speed Blaze Rider 2000! Gina has never had a bike with multiple speeds before, and she is eager to learn how it works. She starts by testing the middle speed. There is a proportional relationship between the number of times Gina pedals, x, and the number of times the wheels rotate, y. What is the constant of proportionality? Write your answer as a whole number or decimal.","prediction_code":"import pandas as pd\n\ndef calculate_constant_of_proportionality(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of a proportional relationship between the number of times Gina pedals and the number of times the wheels rotate,\n    and returns the constant of proportionality.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of times Gina pedals and the number of times the wheels rotate.\n    The dataframe should contain \"x\" and \"y\" columns.\n    Returns:\n    float: The constant of proportionality.\n    \"\"\"\n    # Calculate the constant of proportionality by dividing the number of times the wheels rotate by the number of times Gina pedals\n    constant_of_proportionality = df['y'] \/ df['x']\n    \n    return constant_of_proportionality","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'x': [4, 7, 9, 10],\n    'y': [8, 14, 18, 20]\n})\n# Call the tool to solve the problem\nprint(calculate_constant_of_proportionality(df))","table":"Name: x (times Gina pedals) y (times the wheels rotate)\nUnit: wheel rotations per time Gina pedals\nContent:\n4 | 8\n7 | 14\n9 | 18\n10 | 20"}
{"level":6,"answer":10.0,"prediction":"import pandas as pd\n\ndef count_students_below_50(df):\n    \"\"\"\n    This function takes in a pandas dataframe of midterm exam scores and returns the number of students who scored fewer than 50 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the midterm exam scores.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of students who scored fewer than 50 points.\n    \"\"\"\n    # prepare a list to calculate scores of each student\n    scores = []\n    # calculate the total score of each student\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # filter the scores where the score is less than 50\n    filtered = [score for score in scores if score < 50]\n    # count the number of students\n    num_students = len(filtered)\n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[1, 4, 7, 7], [0, 2], [7, 7, 9], [9], [1, 7], [2], [2], [1, 4], [0]]\n})\n# Call the tool to solve the problem\nprint(count_students_below_50(df))","question":"Professor McMillan informed his students of their scores on the midterm exam. How many students scored fewer than 50 points?","prediction_code":"import pandas as pd\n\ndef count_students_below_50(df):\n    \"\"\"\n    This function takes in a pandas dataframe of midterm exam scores and returns the number of students who scored fewer than 50 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the midterm exam scores.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of students who scored fewer than 50 points.\n    \"\"\"\n    # prepare a list to calculate scores of each student\n    scores = []\n    # calculate the total score of each student\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # filter the scores where the score is less than 50\n    filtered = [score for score in scores if score < 50]\n    # count the number of students\n    num_students = len(filtered)\n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[1, 4, 7, 7], [0, 2], [7, 7, 9], [9], [1, 7], [2], [2], [1, 4], [0]]\n})\n# Call the tool to solve the problem\nprint(count_students_below_50(df))","table":"Name: Midterm exam scores\nUnit: students\nContent:\nStem | Leaf \n1 | 1, 4, 7, 7\n2 | 0, 2\n3 | 7, 7, 9\n4 | 9\n5 | 1, 7\n6 | 2\n7 | 2\n8 | 1, 4\n9 | 0"}
{"level":8,"answer":0.99,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    items (list): A list of item names to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['beautiful yellow shell', 'shiny gold shell', 'pink and white striped shell', 'oyster shell'],\n    'Price': [0.43, 0.69, 0.56, 0.68]\n})\n\n# Define the items to calculate the total cost\nitems = ['pink and white striped shell', 'beautiful yellow shell']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Madelyn need to buy a pink and white striped shell and a beautiful yellow shell?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    items (list): A list of item names to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['beautiful yellow shell', 'shiny gold shell', 'pink and white striped shell', 'oyster shell'],\n    'Price': [0.43, 0.69, 0.56, 0.68]\n})\n\n# Define the items to calculate the total cost\nitems = ['pink and white striped shell', 'beautiful yellow shell']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nbeautiful yellow shell | $0.43\nshiny gold shell | $0.69\npink and white striped shell | $0.56\noyster shell | $0.68"}
{"level":8,"answer":10.0,"prediction":"import pandas as pd\n\ndef count_people_with_5_trips(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of library trips and returns the number of people who went to the library exactly 5 times last month.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of trips and their frequencies.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who went to the library exactly 5 times last month.\n    \"\"\"\n    # Filter the DataFrame for the rows where the number of trips is 5\n    filtered_df = df[df['Number of trips'] == 5]\n    \n    # Get the frequency of trips for those rows\n    frequency = filtered_df['Frequency'].values[0]\n    \n    return frequency\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [1, 2, 3, 4, 5, 6],\n    'Frequency': [6, 18, 17, 8, 10, 2]\n})\n# Call the tool to solve the problem\nprint(count_people_with_5_trips(df))","question":"In considering whether to open a new branch, the city council examined the number of times some typical residents went to the library last month. How many people went to the library exactly 5 times last month?","prediction_code":"import pandas as pd\n\ndef count_people_with_5_trips(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of library trips and returns the number of people who went to the library exactly 5 times last month.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of trips and their frequencies.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who went to the library exactly 5 times last month.\n    \"\"\"\n    # Filter the DataFrame for the rows where the number of trips is 5\n    filtered_df = df[df['Number of trips'] == 5]\n    \n    # Get the frequency of trips for those rows\n    frequency = filtered_df['Frequency'].values[0]\n    \n    return frequency","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [1, 2, 3, 4, 5, 6],\n    'Frequency': [6, 18, 17, 8, 10, 2]\n})\n# Call the tool to solve the problem\nprint(count_people_with_5_trips(df))","table":"Name: Going to the library last month\nUnit: None\nContent:\nNumber of trips | Frequency\n1 | 6\n2 | 18\n3 | 17\n4 | 8\n5 | 10\n6 | 2"}
{"level":7,"answer":6.82,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, purchases):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of purchases, and returns the total cost of the purchases using pandas.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    purchases (dict): A dictionary where the keys are item names and the values are the quantities purchased for each item.\n    Returns:\n    float: The total cost of the purchases.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the purchases and calculate the cost for each item\n    for item, quantity in purchases.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['lentils', 'soybeans', 'pumpkin seeds', 'sunflower seeds', 'flax seeds'],\n    'Price': [0.98, 0.48, 1.05, 1.34, 2.45]\n})\n\n# Initialize the purchases dictionary\npurchases = {\n    'flax seeds': 2,\n    'soybeans': 4\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, purchases))","question":"Bernard purchased 2 kilograms of flax seeds and 4 kilograms of soybeans. What was the total cost?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, purchases):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of purchases, and returns the total cost of the purchases using pandas.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    purchases (dict): A dictionary where the keys are item names and the values are the quantities purchased for each item.\n    Returns:\n    float: The total cost of the purchases.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the purchases and calculate the cost for each item\n    for item, quantity in purchases.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['lentils', 'soybeans', 'pumpkin seeds', 'sunflower seeds', 'flax seeds'],\n    'Price': [0.98, 0.48, 1.05, 1.34, 2.45]\n})\n\n# Initialize the purchases dictionary\npurchases = {\n    'flax seeds': 2,\n    'soybeans': 4\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, purchases))","table":"Name: None\nUnit: $\nContent:\nlentils | $0.98 per kg\nsoybeans | $0.48 per kg\npumpkin seeds | $1.05 per kg\nsunflower seeds | $1.34 per kg\nflax seeds | $2.45 per kg"}
{"level":2,"answer":10.0,"prediction":"import pandas as pd\n\ndef calculate_total_bricks(df, num_piles):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of bricks per pile and the number of piles, and returns the total number of bricks.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of bricks per pile.\n    The dataframe should contain \"Number of piles\" and \"Number of bricks\" columns.\n    num_piles (int): The number of piles to calculate the total number of bricks for.\n    Returns:\n    int: The total number of bricks in the specified number of piles.\n    \"\"\"\n    # Filter the DataFrame for the specified number of piles\n    filtered_df = df[df['Number of piles'] <= num_piles]\n    \n    # Calculate the total number of bricks\n    total_bricks = filtered_df['Number of bricks'].sum()\n    \n    return total_bricks\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of piles': [1, 2, 3, 4, 5],\n    'Number of bricks': [2, 4, 6, 8, None]\n})\n\n# Specify the number of piles\nnum_piles = 5\n\n# Call the tool to solve the problem\nprint(calculate_total_bricks(df, num_piles))","question":"Each pile has 2 bricks. How many bricks are in 5 piles?","prediction_code":"import pandas as pd\n\ndef calculate_total_bricks(df, num_piles):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of bricks per pile and the number of piles, and returns the total number of bricks.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of bricks per pile.\n    The dataframe should contain \"Number of piles\" and \"Number of bricks\" columns.\n    num_piles (int): The number of piles to calculate the total number of bricks for.\n    Returns:\n    int: The total number of bricks in the specified number of piles.\n    \"\"\"\n    # Filter the DataFrame for the specified number of piles\n    filtered_df = df[df['Number of piles'] <= num_piles]\n    \n    # Calculate the total number of bricks\n    total_bricks = filtered_df['Number of bricks'].sum()\n    \n    return total_bricks","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of piles': [1, 2, 3, 4, 5],\n    'Number of bricks': [2, 4, 6, 8, None]\n})\n\n# Specify the number of piles\nnum_piles = 5\n\n# Call the tool to solve the problem\nprint(calculate_total_bricks(df, num_piles))","table":"Name: None\nUnit: None\nContent:\nNumber of piles | Number of bricks\n1 | 2\n2 | 4\n3 | 6\n4 | 8\n5 | ?"}
{"level":8,"answer":0.21,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['bright yellow highlighter', 'package of pencil lead', 'purple colored pencil', 'thick black marker', 'glue stick'],\n    'Price': [0.71, 0.88, 0.50, 0.65, 0.29]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'purple colored pencil', 'glue stick'))","question":"How much more does a purple colored pencil cost than a glue stick?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['bright yellow highlighter', 'package of pencil lead', 'purple colored pencil', 'thick black marker', 'glue stick'],\n    'Price': [0.71, 0.88, 0.50, 0.65, 0.29]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'purple colored pencil', 'glue stick'))","table":"Name: None\nUnit: $\nContent:\nbright yellow highlighter | $0.71\npackage of pencil lead | $0.88\npurple colored pencil | $0.50\nthick black marker | $0.65\nglue stick | $0.29"}
{"level":7,"answer":0.1,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['butterfly stamp', 'tulip stamp', 'roll of packaging tape', 'large cardboard box', 'bird postcard', 'large yellow envelope'],\n    'Price': [0.30, 0.23, 0.63, 0.41, 0.61, 0.53]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'roll of packaging tape', 'large yellow envelope'))","question":"How much more does a roll of packaging tape cost than a large yellow envelope?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['butterfly stamp', 'tulip stamp', 'roll of packaging tape', 'large cardboard box', 'bird postcard', 'large yellow envelope'],\n    'Price': [0.30, 0.23, 0.63, 0.41, 0.61, 0.53]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'roll of packaging tape', 'large yellow envelope'))","table":"Name: None\nUnit: $\nContent:\nbutterfly stamp | $0.30\ntulip stamp | $0.23\nroll of packaging tape | $0.63\nlarge cardboard box | $0.41\nbird postcard | $0.61\nlarge yellow envelope | $0.53"}
{"level":8,"answer":7.22,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of orders, and returns the total cost of the orders.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per kilogram for each item.\n    The DataFrame should have columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are item names and the values are the number of kilograms for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the orders and calculate the cost for each item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['raspberry yogurt', 'low-fat yogurt', 'blueberry yogurt', 'plain yogurt'],\n    'Price': [0.73, 1.44, 0.96, 0.58]\n})\n\n# Initialize the orders\norders = {\n    'low-fat yogurt': 3,\n    'plain yogurt': 5\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","question":"Reba buys 3 kilograms of low-fat yogurt and 5 kilograms of plain yogurt. How much does she spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of orders, and returns the total cost of the orders.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per kilogram for each item.\n    The DataFrame should have columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are item names and the values are the number of kilograms for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the orders and calculate the cost for each item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['raspberry yogurt', 'low-fat yogurt', 'blueberry yogurt', 'plain yogurt'],\n    'Price': [0.73, 1.44, 0.96, 0.58]\n})\n\n# Initialize the orders\norders = {\n    'low-fat yogurt': 3,\n    'plain yogurt': 5\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","table":"Name: None\nUnit: $\nContent:\nraspberry yogurt | $0.73 per kilogram\nlow-fat yogurt | $1.44 per kilogram\nblueberry yogurt | $0.96 per kilogram\nplain yogurt | $0.58 per kilogram"}
{"level":3,"answer":322.0,"prediction":"import pandas as pd\n\ndef calculate_phone_calls_difference(df, company1, company2):\n    \"\"\"\n    This function takes in a pandas DataFrame of phone calls made by different companies and returns the difference in the number of phone calls made by two specified companies.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of phone calls made by different companies.\n    The DataFrame should have columns 'Company' and 'Number of phone calls'.\n    company1 (str): The name of the first company.\n    company2 (str): The name of the second company.\n    Returns:\n    int: The difference in the number of phone calls made by the two specified companies.\n    \"\"\"\n    # Filter the DataFrame for the two specified companies\n    company1_calls = df[df['Company'] == company1]['Number of phone calls'].values[0]\n    company2_calls = df[df['Company'] == company2]['Number of phone calls'].values[0]\n    \n    # Calculate the difference in the number of phone calls\n    difference = company1_calls - company2_calls\n    \n    return difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Company': ['Brave New Day Corporation', 'Critical Insight Consulting', 'Northside Cycles', 'Reardon Corporation', 'Tad\\'s Coffee Company'],\n    'Number of phone calls': [867, 186, 608, 347, 508]\n})\n# Call the tool to solve the problem\nprint(calculate_phone_calls_difference(df, \"Tad's Coffee Company\", \"Critical Insight Consulting\"))","question":"Some companies compared how many phone calls they made. How many more phone calls did Tad's Coffee Company make than Critical Insight Consulting?","prediction_code":"import pandas as pd\n\ndef calculate_phone_calls_difference(df, company1, company2):\n    \"\"\"\n    This function takes in a pandas DataFrame of phone calls made by different companies and returns the difference in the number of phone calls made by two specified companies.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of phone calls made by different companies.\n    The DataFrame should have columns 'Company' and 'Number of phone calls'.\n    company1 (str): The name of the first company.\n    company2 (str): The name of the second company.\n    Returns:\n    int: The difference in the number of phone calls made by the two specified companies.\n    \"\"\"\n    # Filter the DataFrame for the two specified companies\n    company1_calls = df[df['Company'] == company1]['Number of phone calls'].values[0]\n    company2_calls = df[df['Company'] == company2]['Number of phone calls'].values[0]\n    \n    # Calculate the difference in the number of phone calls\n    difference = company1_calls - company2_calls\n    \n    return difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Company': ['Brave New Day Corporation', 'Critical Insight Consulting', 'Northside Cycles', 'Reardon Corporation', 'Tad\\'s Coffee Company'],\n    'Number of phone calls': [867, 186, 608, 347, 508]\n})\n# Call the tool to solve the problem\nprint(calculate_phone_calls_difference(df, \"Tad's Coffee Company\", \"Critical Insight Consulting\"))","table":"Name: Phone calls\nUnit: phone calls\nContent:\nCompany | Number of phone calls\nBrave New Day Corporation | 867\nCritical Insight Consulting | 186\nNorthside Cycles | 608\nReardon Corporation | 347\nTad's Coffee Company | 508"}
{"level":4,"answer":1065.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(table, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table and a list of items, and returns the total cost of the items.\n    Args:\n    table (pd.DataFrame): A pandas DataFrame containing the items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost for.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = table[table['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['designer skirt', 'designer handbag', 'designer scarf', 'designer coat'],\n    'Price': [456, 794, 271, 881]\n})\n\n# Define the items to calculate the total cost for\nitems = ['designer handbag', 'designer scarf']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Mackenzie need to buy a designer handbag and a designer scarf?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(table, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table and a list of items, and returns the total cost of the items.\n    Args:\n    table (pd.DataFrame): A pandas DataFrame containing the items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost for.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = table[table['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['designer skirt', 'designer handbag', 'designer scarf', 'designer coat'],\n    'Price': [456, 794, 271, 881]\n})\n\n# Define the items to calculate the total cost for\nitems = ['designer handbag', 'designer scarf']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\ndesigner skirt | $456\ndesigner handbag | $794\ndesigner scarf | $271\ndesigner coat | $881"}
{"level":3,"answer":676.0,"prediction":"import pandas as pd\n\ndef calculate_total_cookies(df, names):\n    \"\"\"\n    This function takes in a pandas DataFrame of cookies baked by students and a list of names, and returns the total number of cookies baked by the specified students.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the names and number of cookies baked by each student.\n    The DataFrame should have columns 'Name' and 'Number of cookies'.\n    names (list): A list of names of the students to calculate the total number of cookies baked.\n    Returns:\n    int: The total number of cookies baked by the specified students.\n    \"\"\"\n    # Filter the DataFrame for the specified names\n    filtered_df = df[df['Name'].isin(names)]\n    \n    # Calculate the total number of cookies baked by the specified students\n    total_cookies = filtered_df['Number of cookies'].sum()\n    \n    return total_cookies\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Whitney', 'Jeanette', 'Zachary'],\n    'Number of cookies': [437, 239, 222]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cookies(df, ['Whitney', 'Jeanette']))","question":"The art club examined how many cookies each student baked for the bake sale. Together, how many cookies did Whitney and Jeanette bake?","prediction_code":"import pandas as pd\n\ndef calculate_total_cookies(df, names):\n    \"\"\"\n    This function takes in a pandas DataFrame of cookies baked by students and a list of names, and returns the total number of cookies baked by the specified students.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the names and number of cookies baked by each student.\n    The DataFrame should have columns 'Name' and 'Number of cookies'.\n    names (list): A list of names of the students to calculate the total number of cookies baked.\n    Returns:\n    int: The total number of cookies baked by the specified students.\n    \"\"\"\n    # Filter the DataFrame for the specified names\n    filtered_df = df[df['Name'].isin(names)]\n    \n    # Calculate the total number of cookies baked by the specified students\n    total_cookies = filtered_df['Number of cookies'].sum()\n    \n    return total_cookies","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Whitney', 'Jeanette', 'Zachary'],\n    'Number of cookies': [437, 239, 222]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cookies(df, ['Whitney', 'Jeanette']))","table":"Name: Cookies baked\nUnit: cookies\nContent:\nName | Number of cookies\nWhitney | 437\nJeanette | 239\nZachary | 222"}
{"level":4,"answer":20.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(items_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to be purchased.\n    It returns the total cost of the items.\n    Args:\n    items_df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = items_df[items_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['book of crossword puzzles', 'map of Canada', 'cookbook', 'cat calendar', 'airplane calendar'],\n    'Price': [8, 9, 3, 4, 7]\n})\n\n# Define the items to be purchased\nitems = ['book of crossword puzzles', 'map of Canada', 'cookbook']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Kimberly need to buy a book of crossword puzzles, a map of Canada, and a cookbook?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(items_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to be purchased.\n    It returns the total cost of the items.\n    Args:\n    items_df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = items_df[items_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['book of crossword puzzles', 'map of Canada', 'cookbook', 'cat calendar', 'airplane calendar'],\n    'Price': [8, 9, 3, 4, 7]\n})\n\n# Define the items to be purchased\nitems = ['book of crossword puzzles', 'map of Canada', 'cookbook']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nbook of crossword puzzles | $8\nmap of Canada | $9\ncookbook | $3\ncat calendar | $4\nairplane calendar | $7"}
{"level":8,"answer":15.0,"prediction":"import pandas as pd\n\ndef count_customers_less_than_3(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of times customers ate pizza and returns the number of customers who ate pizza fewer than 3 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of times customers ate pizza.\n    The dataframe should contain \"Times eaten\" and \"Frequency\" columns.\n    Returns:\n    int: The number of customers who ate pizza fewer than 3 times.\n    \"\"\"\n    # Filter the DataFrame for customers who ate pizza fewer than 3 times\n    filtered_df = df[df['Times eaten'] < 3]\n    \n    # Calculate the total number of customers who ate pizza fewer than 3 times\n    num_customers = filtered_df['Frequency'].sum()\n    \n    return num_customers\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Times eaten': [0, 1, 2, 3, 4],\n    'Frequency': [2, 5, 8, 15, 17]\n})\n# Call the tool to solve the problem\nprint(count_customers_less_than_3(df))","question":"An Italian restaurant monitored the number of times its regular customers ate pizza last month. How many customers ate pizza fewer than 3 times?","prediction_code":"import pandas as pd\n\ndef count_customers_less_than_3(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of times customers ate pizza and returns the number of customers who ate pizza fewer than 3 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of times customers ate pizza.\n    The dataframe should contain \"Times eaten\" and \"Frequency\" columns.\n    Returns:\n    int: The number of customers who ate pizza fewer than 3 times.\n    \"\"\"\n    # Filter the DataFrame for customers who ate pizza fewer than 3 times\n    filtered_df = df[df['Times eaten'] < 3]\n    \n    # Calculate the total number of customers who ate pizza fewer than 3 times\n    num_customers = filtered_df['Frequency'].sum()\n    \n    return num_customers","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Times eaten': [0, 1, 2, 3, 4],\n    'Frequency': [2, 5, 8, 15, 17]\n})\n# Call the tool to solve the problem\nprint(count_customers_less_than_3(df))","table":"Name: Eating pizza last month\nUnit: None\nContent:\nTimes eaten | Frequency\n0 | 2\n1 | 5\n2 | 8\n3 | 15\n4 | 17"}
{"level":5,"answer":1159.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['pair of designer shoes', 'designer scarf', 'designer skirt', 'pair of designer boots', 'designer handbag', 'designer coat'],\n    'Price': [884, 342, 104, 390, 885, 769]\n})\n\n# Call the tool to solve the problem\nitems = ['designer coat', 'pair of designer boots']\nprint(calculate_total_cost(df, items))","question":"How much money does Ling need to buy a designer coat and a pair of designer boots?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['pair of designer shoes', 'designer scarf', 'designer skirt', 'pair of designer boots', 'designer handbag', 'designer coat'],\n    'Price': [884, 342, 104, 390, 885, 769]\n})\n\n# Call the tool to solve the problem\nitems = ['designer coat', 'pair of designer boots']\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\npair of designer shoes | $884\ndesigner scarf | $342\ndesigner skirt | $104\npair of designer boots | $390\ndesigner handbag | $885\ndesigner coat | $769"}
{"level":7,"answer":3.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of fire hydrants per street and returns the range of the numbers of fire hydrants.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of fire hydrants per street.\n    The dataframe should contain \"Street\" and \"Number of hydrants\" columns.\n    Returns:\n    int: The range of the numbers of fire hydrants.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of hydrants\" column\n    min_hydrants = df['Number of hydrants'].min()\n    max_hydrants = df['Number of hydrants'].max()\n    \n    # Calculate the range\n    hydrant_range = max_hydrants - min_hydrants\n    \n    return hydrant_range\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Street': ['Lemon Street', 'Fir Street', 'Cedar Street', 'Elm Street', 'Aspen Street', 'Pine Street', 'Oak Street'],\n    'Number of hydrants': [3, 1, 3, 4, 4, 3, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"The city recorded how many fire hydrants there are on each street. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of fire hydrants per street and returns the range of the numbers of fire hydrants.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of fire hydrants per street.\n    The dataframe should contain \"Street\" and \"Number of hydrants\" columns.\n    Returns:\n    int: The range of the numbers of fire hydrants.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of hydrants\" column\n    min_hydrants = df['Number of hydrants'].min()\n    max_hydrants = df['Number of hydrants'].max()\n    \n    # Calculate the range\n    hydrant_range = max_hydrants - min_hydrants\n    \n    return hydrant_range","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Street': ['Lemon Street', 'Fir Street', 'Cedar Street', 'Elm Street', 'Aspen Street', 'Pine Street', 'Oak Street'],\n    'Number of hydrants': [3, 1, 3, 4, 4, 3, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Fire hydrants\nUnit: None\nContent:\nStreet | Number of hydrants\nLemon Street | 3\nFir Street | 1\nCedar Street | 3\nElm Street | 4\nAspen Street | 4\nPine Street | 3\nOak Street | 3"}
{"level":6,"answer":6.0,"prediction":"import pandas as pd\nfrom statistics import mode\n\ndef find_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of numbers and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the numbers.\n    Returns:\n    float or int: The mode of the numbers.\n    \"\"\"\n    # Get the column containing the numbers\n    column = df.columns[1]\n    \n    # Get the values in the column\n    values = df[column].tolist()\n    \n    # Calculate the mode of the numbers\n    mode_value = mode(values)\n    \n    return mode_value\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Teacher': ['Ms. Rojas', 'Ms. Cohen', 'Mr. Lim', 'Mrs. Rossi', 'Mr. Morales', 'Mr. Schmidt', 'Miss Murphy', 'Mrs. Tan'],\n    'Number of computers': [6, 4, 5, 6, 9, 4, 6, 5]\n})\n# Call the tool to solve the problem\nprint(find_mode(df))","question":"The teachers at a middle school counted how many computers they had in their classrooms. What is the mode of the numbers?","prediction_code":"import pandas as pd\nfrom statistics import mode\n\ndef find_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of numbers and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the numbers.\n    Returns:\n    float or int: The mode of the numbers.\n    \"\"\"\n    # Get the column containing the numbers\n    column = df.columns[1]\n    \n    # Get the values in the column\n    values = df[column].tolist()\n    \n    # Calculate the mode of the numbers\n    mode_value = mode(values)\n    \n    return mode_value","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Teacher': ['Ms. Rojas', 'Ms. Cohen', 'Mr. Lim', 'Mrs. Rossi', 'Mr. Morales', 'Mr. Schmidt', 'Miss Murphy', 'Mrs. Tan'],\n    'Number of computers': [6, 4, 5, 6, 9, 4, 6, 5]\n})\n# Call the tool to solve the problem\nprint(find_mode(df))","table":"Name: Computers in classrooms\nUnit: None\nContent:\nTeacher | Number of computers\nMs. Rojas | 6\nMs. Cohen | 4\nMr. Lim | 5\nMrs. Rossi | 6\nMr. Morales | 9\nMr. Schmidt | 4\nMiss Murphy | 6\nMrs. Tan | 5"}
{"level":2,"answer":15.0,"prediction":"import pandas as pd\n\ndef calculate_scarves_on_coat_racks(df, num_coat_racks):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of scarves on coat racks and the number of coat racks, and returns the total number of scarves.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of coat racks and the number of scarves on each coat rack.\n    The DataFrame should have columns 'Number of coat racks' and 'Number of scarves'.\n    num_coat_racks (int): The number of coat racks to calculate the total number of scarves for.\n    Returns:\n    int: The total number of scarves on the specified number of coat racks.\n    \"\"\"\n    # Filter the DataFrame for the specified number of coat racks\n    coat_racks_df = df[df['Number of coat racks'] == num_coat_racks]\n    \n    # Get the number of scarves on the coat racks\n    num_scarves = coat_racks_df['Number of scarves'].values[0]\n    \n    # Calculate the total number of scarves\n    total_scarves = num_scarves * num_coat_racks\n    \n    return total_scarves\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of coat racks': [1, 2, 3],\n    'Number of scarves': [5, 10, '?']\n})\n\n# Specify the number of coat racks\nnum_coat_racks = 3\n\n# Call the tool to solve the problem\nprint(calculate_scarves_on_coat_racks(df, num_coat_racks))","question":"Each coat rack has 5 scarves. How many scarves are on 3 coat racks?","prediction_code":"import pandas as pd\n\ndef calculate_scarves_on_coat_racks(df, num_coat_racks):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of scarves on coat racks and the number of coat racks, and returns the total number of scarves.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of coat racks and the number of scarves on each coat rack.\n    The DataFrame should have columns 'Number of coat racks' and 'Number of scarves'.\n    num_coat_racks (int): The number of coat racks to calculate the total number of scarves for.\n    Returns:\n    int: The total number of scarves on the specified number of coat racks.\n    \"\"\"\n    # Filter the DataFrame for the specified number of coat racks\n    coat_racks_df = df[df['Number of coat racks'] == num_coat_racks]\n    \n    # Get the number of scarves on the coat racks\n    num_scarves = coat_racks_df['Number of scarves'].values[0]\n    \n    # Calculate the total number of scarves\n    total_scarves = num_scarves * num_coat_racks\n    \n    return total_scarves","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of coat racks': [1, 2, 3],\n    'Number of scarves': [5, 10, '?']\n})\n\n# Specify the number of coat racks\nnum_coat_racks = 3\n\n# Call the tool to solve the problem\nprint(calculate_scarves_on_coat_racks(df, num_coat_racks))","table":"Name: None\nUnit: None\nContent:\nNumber of coat racks | Number of scarves\n1 | 5\n2 | 10\n3 | ?"}
{"level":6,"answer":4.0,"prediction":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of photographs taken and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of photographs taken each day.\n    The dataframe should contain \"Day\" and \"Number of photographs\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the \"Number of photographs\" column\n    numbers = df['Number of photographs']\n    \n    # Calculate the mode using the value_counts() function\n    mode = numbers.value_counts().idxmax()\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Number of photographs': [4, 4, 10, 4, 10]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"Carla looked at the dates of the digital photos on her computer to find out how many she had taken in the past 5 days. What is the mode of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of photographs taken and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of photographs taken each day.\n    The dataframe should contain \"Day\" and \"Number of photographs\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the \"Number of photographs\" column\n    numbers = df['Number of photographs']\n    \n    # Calculate the mode using the value_counts() function\n    mode = numbers.value_counts().idxmax()\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Number of photographs': [4, 4, 10, 4, 10]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Photographs taken\nUnit: None\nContent:\nDay | Number of photographs\nSunday | 4\nMonday | 4\nTuesday | 10\nWednesday | 4\nThursday | 10"}
{"level":7,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_mean_soccer_fields(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of soccer fields per park and returns the mean number of soccer fields.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of soccer fields per park.\n    The dataframe should contain \"Park\" and \"Number of soccer fields\" columns.\n    Returns:\n    float: The mean number of soccer fields.\n    \"\"\"\n    # Calculate the mean of the \"Number of soccer fields\" column\n    mean_soccer_fields = df['Number of soccer fields'].mean()\n    \n    return mean_soccer_fields\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Park': ['Juniper Park', 'Madison Park', 'Canyon Park', 'Windy Hill Park', 'Lighthouse Park', 'Elmhurst Park'],\n    'Number of soccer fields': [7, 7, 4, 3, 7, 2]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_soccer_fields(df))","question":"The parks department compared how many soccer fields there are at each park. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean_soccer_fields(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of soccer fields per park and returns the mean number of soccer fields.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of soccer fields per park.\n    The dataframe should contain \"Park\" and \"Number of soccer fields\" columns.\n    Returns:\n    float: The mean number of soccer fields.\n    \"\"\"\n    # Calculate the mean of the \"Number of soccer fields\" column\n    mean_soccer_fields = df['Number of soccer fields'].mean()\n    \n    return mean_soccer_fields","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Park': ['Juniper Park', 'Madison Park', 'Canyon Park', 'Windy Hill Park', 'Lighthouse Park', 'Elmhurst Park'],\n    'Number of soccer fields': [7, 7, 4, 3, 7, 2]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_soccer_fields(df))","table":"Name: Soccer fields\nUnit: None\nContent:\nPark | Number of soccer fields\nJuniper Park | 7\nMadison Park | 7\nCanyon Park | 4\nWindy Hill Park | 3\nLighthouse Park | 7\nElmhurst Park | 2"}
{"level":5,"answer":69.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of ice cream cones sold and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of ice cream cones sold for each day.\n    The DataFrame should have columns 'Day' and 'Number of ice cream cones'.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of ice cream cones']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday'],\n    'Number of ice cream cones': [69, 54, 72, 68, 83, 74, 59]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"An ice cream shop kept track of how many ice cream cones it sold in the past 7 days. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of ice cream cones sold and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of ice cream cones sold for each day.\n    The DataFrame should have columns 'Day' and 'Number of ice cream cones'.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of ice cream cones']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday'],\n    'Number of ice cream cones': [69, 54, 72, 68, 83, 74, 59]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Ice cream cones sold\nUnit: None\nContent:\nDay | Number of ice cream cones\nThursday | 69\nFriday | 54\nSaturday | 72\nSunday | 68\nMonday | 83\nTuesday | 74\nWednesday | 59"}
{"level":8,"answer":1.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of rounds in the spelling bee per year and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the rounds in the spelling bee per year.\n    The DataFrame should have columns 'Year' and 'Rounds'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_rounds = df[df['Year'] == start_year]['Rounds'].values[0]\n    end_rounds = df[df['Year'] == end_year]['Rounds'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_rounds - start_rounds) \/ (end_year - start_year)\n    \n    return rate_of_change\n########################################\n# Initialize the table into a DataFrame\ndf = pd.DataFrame({\n    'Year': [2011, 2012, 2013, 2014, 2015],\n    'Rounds': [9, 12, 6, 7, 8]\n})\n\n# Call the tool function to calculate the rate of change between 2013 and 2014\nrate_of_change = calculate_rate_of_change(df, 2013, 2014)\n\n# Print out the answer\nprint(rate_of_change)","question":"Mrs. Kelly told students how many rounds to expect in the spelling bee based on previous years. According to the table, what was the rate of change between 2013 and 2014?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of rounds in the spelling bee per year and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the rounds in the spelling bee per year.\n    The DataFrame should have columns 'Year' and 'Rounds'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_rounds = df[df['Year'] == start_year]['Rounds'].values[0]\n    end_rounds = df[df['Year'] == end_year]['Rounds'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_rounds - start_rounds) \/ (end_year - start_year)\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a DataFrame\ndf = pd.DataFrame({\n    'Year': [2011, 2012, 2013, 2014, 2015],\n    'Rounds': [9, 12, 6, 7, 8]\n})\n\n# Call the tool function to calculate the rate of change between 2013 and 2014\nrate_of_change = calculate_rate_of_change(df, 2013, 2014)\n\n# Print out the answer\nprint(rate_of_change)","table":"Name: Rounds in the spelling bee\nUnit: rounds per year\nContent:\nYear | Rounds\n2011 | 9\n2012 | 12\n2013 | 6\n2014 | 7\n2015 | 8"}
{"level":4,"answer":28.21,"prediction":"import pandas as pd\n\ndef calculate_remaining_money(df, budget, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, a budget, and a list of items to buy.\n    It returns the remaining money after buying the specified items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    budget (float): The budget for buying the items.\n    items (list): A list of items to buy.\n    Returns:\n    float: The remaining money after buying the specified items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    # Calculate the remaining money\n    remaining_money = budget - total_cost\n    \n    return remaining_money\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['math book', 'science book', 'coloring book', 'picture book', 'history book'],\n    'Price': [19.79, 19.29, 19.22, 12.69, 18.88]\n})\n\n# Set the budget and items to buy\nbudget = 60.19\nitems = ['picture book', 'science book']\n\n# Call the tool to solve the problem\nremaining_money = calculate_remaining_money(df, budget, items)\n\n# Print out the answer\nprint(remaining_money)","question":"Justin has $60.19. How much money will Justin have left if he buys a picture book and a science book?","prediction_code":"import pandas as pd\n\ndef calculate_remaining_money(df, budget, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, a budget, and a list of items to buy.\n    It returns the remaining money after buying the specified items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    budget (float): The budget for buying the items.\n    items (list): A list of items to buy.\n    Returns:\n    float: The remaining money after buying the specified items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    # Calculate the remaining money\n    remaining_money = budget - total_cost\n    \n    return remaining_money","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['math book', 'science book', 'coloring book', 'picture book', 'history book'],\n    'Price': [19.79, 19.29, 19.22, 12.69, 18.88]\n})\n\n# Set the budget and items to buy\nbudget = 60.19\nitems = ['picture book', 'science book']\n\n# Call the tool to solve the problem\nremaining_money = calculate_remaining_money(df, budget, items)\n\n# Print out the answer\nprint(remaining_money)","table":"Name: None\nUnit: $\nContent:\nmath book | $19.79\nscience book | $19.29\ncoloring book | $19.22\npicture book | $12.69\nhistory book | $18.88"}
{"level":4,"answer":2.39,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to be purchased.\n    It returns the total cost of the items.\n    \n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    \n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['sand castle magnet', 'pink flamingo pen', 'picture of a shark', 'beach postcard', 'whale keychain'],\n    'Price': [0.97, 0.12, 0.54, 0.61, 0.81]\n})\n\n# Define the items to be purchased\nitems = ['whale keychain', 'beach postcard', 'sand castle magnet']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, items)\n\n# Print out the answer\nprint(total_cost)","question":"How much money does Lauren need to buy a whale keychain, a beach postcard, and a sand castle magnet?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to be purchased.\n    It returns the total cost of the items.\n    \n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    \n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['sand castle magnet', 'pink flamingo pen', 'picture of a shark', 'beach postcard', 'whale keychain'],\n    'Price': [0.97, 0.12, 0.54, 0.61, 0.81]\n})\n\n# Define the items to be purchased\nitems = ['whale keychain', 'beach postcard', 'sand castle magnet']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, items)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\nsand castle magnet | $0.97\npink flamingo pen | $0.12\npicture of a shark | $0.54\nbeach postcard | $0.61\nwhale keychain | $0.81"}
{"level":3,"answer":273.0,"prediction":"import pandas as pd\n\ndef calculate_kilograms_sold(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of cherries sold and returns the difference in kilograms of cherries sold on Monday and Sunday.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of kilograms of cherries sold on different days.\n    The dataframe should contain \"Day\" and \"Kilograms\" columns.\n    Returns:\n    int: The difference in kilograms of cherries sold on Monday and Sunday.\n    \"\"\"\n    # Filter the DataFrame for Monday and Sunday\n    monday_df = df[df['Day'] == 'Monday']\n    sunday_df = df[df['Day'] == 'Sunday']\n    \n    # Get the kilograms sold on Monday and Sunday\n    monday_kg = monday_df['Kilograms'].values[0]\n    sunday_kg = sunday_df['Kilograms'].values[0]\n    \n    # Calculate the difference in kilograms sold\n    difference = monday_kg - sunday_kg\n    \n    return difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Kilograms': [646, 546, 819, 127]\n})\n# Call the tool to solve the problem\nprint(calculate_kilograms_sold(df))","question":"A farmer wrote down how many kilograms of cherries were sold in the past 4 days. How many more kilograms of cherries were sold on Monday than on Sunday?","prediction_code":"import pandas as pd\n\ndef calculate_kilograms_sold(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of cherries sold and returns the difference in kilograms of cherries sold on Monday and Sunday.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of kilograms of cherries sold on different days.\n    The dataframe should contain \"Day\" and \"Kilograms\" columns.\n    Returns:\n    int: The difference in kilograms of cherries sold on Monday and Sunday.\n    \"\"\"\n    # Filter the DataFrame for Monday and Sunday\n    monday_df = df[df['Day'] == 'Monday']\n    sunday_df = df[df['Day'] == 'Sunday']\n    \n    # Get the kilograms sold on Monday and Sunday\n    monday_kg = monday_df['Kilograms'].values[0]\n    sunday_kg = sunday_df['Kilograms'].values[0]\n    \n    # Calculate the difference in kilograms sold\n    difference = monday_kg - sunday_kg\n    \n    return difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Kilograms': [646, 546, 819, 127]\n})\n# Call the tool to solve the problem\nprint(calculate_kilograms_sold(df))","table":"Name: Cherries sold\nUnit: kilograms of cherries\nContent:\nDay | Kilograms\nSaturday | 646\nSunday | 546\nMonday | 819\nTuesday | 127"}
{"level":4,"answer":13560.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost for.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['business desktop', 'wide-screen desktop', 'high-tech laptop', 'super desktop'],\n    'Price': [8409.00, 5151.00, 6362.00, 9580.00]\n})\n\n# Define the items to calculate the total cost for\nitems = ['business desktop', 'wide-screen desktop']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Zane need to buy a business desktop and a wide-screen desktop?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost for.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['business desktop', 'wide-screen desktop', 'high-tech laptop', 'super desktop'],\n    'Price': [8409.00, 5151.00, 6362.00, 9580.00]\n})\n\n# Define the items to calculate the total cost for\nitems = ['business desktop', 'wide-screen desktop']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nbusiness desktop | $8,409.00\nwide-screen desktop | $5,151.00\nhigh-tech laptop | $6,362.00\nsuper desktop | $9,580.00"}
{"level":4,"answer":11.49,"prediction":"import pandas as pd\n\ndef calculate_total_cost(table, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of buying two specific items.\n    Args:\n    table (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The total cost of buying the two items.\n    \"\"\"\n    # Filter the DataFrame for the specific items\n    item1_df = table[table['Name'] == item1]\n    item2_df = table[table['Name'] == item2]\n    \n    # Get the prices of the items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the total cost\n    total_cost = item1_price + item2_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['jigsaw puzzle', 'mystery game', 'teddy bear', 'board game', 'toy boat', 'jar of clay'],\n    'Price': [5.30, 9.70, 7.40, 8.75, 6.19, 3.12]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'jigsaw puzzle', 'toy boat'))","question":"How much money does Sally need to buy a jigsaw puzzle and a toy boat?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(table, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of buying two specific items.\n    Args:\n    table (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The total cost of buying the two items.\n    \"\"\"\n    # Filter the DataFrame for the specific items\n    item1_df = table[table['Name'] == item1]\n    item2_df = table[table['Name'] == item2]\n    \n    # Get the prices of the items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the total cost\n    total_cost = item1_price + item2_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['jigsaw puzzle', 'mystery game', 'teddy bear', 'board game', 'toy boat', 'jar of clay'],\n    'Price': [5.30, 9.70, 7.40, 8.75, 6.19, 3.12]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'jigsaw puzzle', 'toy boat'))","table":"Name: None\nUnit: $\nContent:\njigsaw puzzle | $5.30\nmystery game | $9.70\nteddy bear | $7.40\nboard game | $8.75\ntoy boat | $6.19\njar of clay | $3.12"}
{"level":5,"answer":109.33,"prediction":"import pandas as pd\n\ndef calculate_total_cost(table, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table and a list of items, and returns the total cost of the items.\n    Args:\n    table (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost for.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = table[table['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['tennis ticket', 'baseball ticket', 'soccer ticket', 'basketball ticket'],\n    'Price': [91.60, 73.23, 92.47, 16.86]\n})\n\n# Define the items to calculate the total cost for\nitems = ['soccer ticket', 'basketball ticket']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Jamal need to buy a soccer ticket and a basketball ticket?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(table, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table and a list of items, and returns the total cost of the items.\n    Args:\n    table (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost for.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = table[table['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['tennis ticket', 'baseball ticket', 'soccer ticket', 'basketball ticket'],\n    'Price': [91.60, 73.23, 92.47, 16.86]\n})\n\n# Define the items to calculate the total cost for\nitems = ['soccer ticket', 'basketball ticket']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\ntennis ticket | $91.60\nbaseball ticket | $73.23\nsoccer ticket | $92.47\nbasketball ticket | $16.86"}
{"level":7,"answer":0.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, year1, year2):\n    \"\"\"\n    This function takes in a pandas DataFrame of vacation days taken by Christina and two years, and returns the rate of change between the two years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the vacation days taken by Christina with columns 'Year' and 'Vacation days'.\n    year1 (int): The first year.\n    year2 (int): The second year.\n    Returns:\n    float: The rate of change between the two years.\n    \"\"\"\n    # Filter the DataFrame for the two years\n    year1_df = df[df['Year'] == year1]\n    year2_df = df[df['Year'] == year2]\n    \n    # Get the vacation days for the two years\n    vacation_days1 = year1_df['Vacation days'].values[0]\n    vacation_days2 = year2_df['Vacation days'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (vacation_days2 - vacation_days1) \/ (year2 - year1)\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2017, 2018, 2019, 2020, 2021],\n    'Vacation days': [21, 12, 14, 14, 15]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2019, 2020))","question":"To figure out how many vacation days she had left to use, Christina looked over her old calendars to figure out how many days of vacation she had taken each year. According to the table, what was the rate of change between 2019 and 2020?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, year1, year2):\n    \"\"\"\n    This function takes in a pandas DataFrame of vacation days taken by Christina and two years, and returns the rate of change between the two years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the vacation days taken by Christina with columns 'Year' and 'Vacation days'.\n    year1 (int): The first year.\n    year2 (int): The second year.\n    Returns:\n    float: The rate of change between the two years.\n    \"\"\"\n    # Filter the DataFrame for the two years\n    year1_df = df[df['Year'] == year1]\n    year2_df = df[df['Year'] == year2]\n    \n    # Get the vacation days for the two years\n    vacation_days1 = year1_df['Vacation days'].values[0]\n    vacation_days2 = year2_df['Vacation days'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (vacation_days2 - vacation_days1) \/ (year2 - year1)\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2017, 2018, 2019, 2020, 2021],\n    'Vacation days': [21, 12, 14, 14, 15]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2019, 2020))","table":"Name: Vacation days taken by Christina\nUnit: vacation days per year\nContent:\nYear | Vacation days\n2017 | 21\n2018 | 12\n2019 | 14\n2020 | 14\n2021 | 15"}
{"level":6,"answer":8.0,"prediction":"import pandas as pd\n\ndef calculate_median_hours(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of hours worked per day and returns the median of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of hours worked per day.\n    The dataframe should contain \"Day\" and \"Hours\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the \"Hours\" column from the DataFrame\n    hours = df['Hours']\n    \n    # Calculate the median using the pandas median function\n    median_hours = hours.median()\n    \n    return median_hours\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n    'Hours': [3, 9, 8, 8, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_median_hours(df))","question":"A waitress kept track of how many hours she worked each day. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median_hours(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of hours worked per day and returns the median of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of hours worked per day.\n    The dataframe should contain \"Day\" and \"Hours\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the \"Hours\" column from the DataFrame\n    hours = df['Hours']\n    \n    # Calculate the median using the pandas median function\n    median_hours = hours.median()\n    \n    return median_hours","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n    'Hours': [3, 9, 8, 8, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_median_hours(df))","table":"Name: Hours worked\nUnit: None\nContent:\nDay | Hours\nWednesday | 3\nThursday | 9\nFriday | 8\nSaturday | 8\nSunday | 6"}
{"level":4,"answer":929.0,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame of prices and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the prices of different items.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item2_price - item1_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['funnel cake stand', 'pretzel stand', 'popcorn cart', 'shaved ice cart', 'popsicle stand'],\n    'Price': [9238, 5115, 6725, 5796, 7973]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'popcorn cart', 'shaved ice cart'))","question":"How much more does a popcorn cart cost than a shaved ice cart?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame of prices and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the prices of different items.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item2_price - item1_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['funnel cake stand', 'pretzel stand', 'popcorn cart', 'shaved ice cart', 'popsicle stand'],\n    'Price': [9238, 5115, 6725, 5796, 7973]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'popcorn cart', 'shaved ice cart'))","table":"Name: None\nUnit: $\nContent:\nfunnel cake stand | $9,238\npretzel stand | $5,115\npopcorn cart | $6,725\nshaved ice cart | $5,796\npopsicle stand | $7,973"}
{"level":8,"answer":-1.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of emails received per day and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of emails received per day.\n    The dataframe should contain \"Day\" and \"Emails\" columns.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Get the number of emails for day1 and day2\n    emails_day1 = df[df['Day'] == day1]['Emails'].values[0]\n    emails_day2 = df[df['Day'] == day2]['Emails'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (emails_day2 - emails_day1) \/ emails_day1\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Emails': [1, 2, 3, 2, 1]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Tuesday', 'Wednesday'))","question":"Kate kept a tally of the number of emails she received each day for a week. According to the table, what was the rate of change between Tuesday and Wednesday?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of emails received per day and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of emails received per day.\n    The dataframe should contain \"Day\" and \"Emails\" columns.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Get the number of emails for day1 and day2\n    emails_day1 = df[df['Day'] == day1]['Emails'].values[0]\n    emails_day2 = df[df['Day'] == day2]['Emails'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (emails_day2 - emails_day1) \/ emails_day1\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Emails': [1, 2, 3, 2, 1]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Tuesday', 'Wednesday'))","table":"Name: Emails Kate received\nUnit: emails per day\nContent:\nDay | Emails\nSunday | 1\nMonday | 2\nTuesday | 3\nWednesday | 2\nThursday | 1"}
{"level":7,"answer":24.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of orders, and returns the total cost of the orders.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per kilogram for different items.\n    The DataFrame should have columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are item names and the values are the number of kilograms ordered for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the orders and calculate the cost for each item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['39-mm washers', '78-mm washers', '66-mm washers', '24-mm washers', '50-mm washers'],\n    'Price': [4, 3, 3, 3, 4]\n})\n\n# Initialize the orders dictionary\norders = {\n    '66-mm washers': 4,\n    '50-mm washers': 3\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","question":"Deion bought 4 kilograms of 66-mm washers and 3 kilograms of 50-mm washers. How much did he spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of orders, and returns the total cost of the orders.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per kilogram for different items.\n    The DataFrame should have columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are item names and the values are the number of kilograms ordered for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the orders and calculate the cost for each item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['39-mm washers', '78-mm washers', '66-mm washers', '24-mm washers', '50-mm washers'],\n    'Price': [4, 3, 3, 3, 4]\n})\n\n# Initialize the orders dictionary\norders = {\n    '66-mm washers': 4,\n    '50-mm washers': 3\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","table":"Name: None\nUnit: $\nContent:\n39-mm washers | $4 per kilogram\n78-mm washers | $3 per kilogram\n66-mm washers | $3 per kilogram\n24-mm washers | $3 per kilogram\n50-mm washers | $4 per kilogram"}
{"level":8,"answer":6.0,"prediction":"import pandas as pd\n\ndef calculate_mean_number_of_pets(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pet ownership and returns the mean number of pets.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and number of pets for each student.\n    The DataFrame should have columns 'Name' and 'Number of pets'.\n    Returns:\n    float: The mean number of pets.\n    \"\"\"\n    # Calculate the mean number of pets\n    mean_number_of_pets = df['Number of pets'].mean()\n    \n    return mean_number_of_pets\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Javier', 'Noah', 'Tammy', 'Sanjay', 'Rosanne', 'Chandler', 'Wendy', 'Meg'],\n    'Number of pets': [10, 7, 1, 1, 6, 9, 10, 4]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_number_of_pets(df))","question":"Some students compared how many pets they have. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean_number_of_pets(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pet ownership and returns the mean number of pets.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and number of pets for each student.\n    The DataFrame should have columns 'Name' and 'Number of pets'.\n    Returns:\n    float: The mean number of pets.\n    \"\"\"\n    # Calculate the mean number of pets\n    mean_number_of_pets = df['Number of pets'].mean()\n    \n    return mean_number_of_pets","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Javier', 'Noah', 'Tammy', 'Sanjay', 'Rosanne', 'Chandler', 'Wendy', 'Meg'],\n    'Number of pets': [10, 7, 1, 1, 6, 9, 10, 4]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_number_of_pets(df))","table":"Name: Pets\nUnit: None\nContent:\nName | Number of pets\nJavier | 10\nNoah | 7\nTammy | 1\nSanjay | 1\nRosanne | 6\nChandler | 9\nWendy | 10\nMeg | 4"}
{"level":8,"answer":2.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of daily snowfall and returns the median of the snowfall amounts.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the daily snowfall amounts with columns 'Day' and 'Snowfall (inches)'.\n    Returns:\n    float: The median of the snowfall amounts.\n    \"\"\"\n    # Get the snowfall amounts as a list\n    snowfall_list = df['Snowfall (inches)'].tolist()\n    \n    # Sort the list in ascending order\n    snowfall_list.sort()\n    \n    # Calculate the median\n    if len(snowfall_list) % 2 == 0:\n        # If the list has an even number of elements, take the average of the middle two elements\n        median = (snowfall_list[len(snowfall_list)\/\/2 - 1] + snowfall_list[len(snowfall_list)\/\/2]) \/ 2\n    else:\n        # If the list has an odd number of elements, take the middle element\n        median = snowfall_list[len(snowfall_list)\/\/2]\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Snowfall (inches)': [0, 4, 2, 1, 1, 2, 2]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"Allie graphed the amount of snow that fell in the last 7 days. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of daily snowfall and returns the median of the snowfall amounts.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the daily snowfall amounts with columns 'Day' and 'Snowfall (inches)'.\n    Returns:\n    float: The median of the snowfall amounts.\n    \"\"\"\n    # Get the snowfall amounts as a list\n    snowfall_list = df['Snowfall (inches)'].tolist()\n    \n    # Sort the list in ascending order\n    snowfall_list.sort()\n    \n    # Calculate the median\n    if len(snowfall_list) % 2 == 0:\n        # If the list has an even number of elements, take the average of the middle two elements\n        median = (snowfall_list[len(snowfall_list)\/\/2 - 1] + snowfall_list[len(snowfall_list)\/\/2]) \/ 2\n    else:\n        # If the list has an odd number of elements, take the middle element\n        median = snowfall_list[len(snowfall_list)\/\/2]\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Snowfall (inches)': [0, 4, 2, 1, 1, 2, 2]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Daily snowfall\nUnit: None\nContent:\nDay | Snowfall (inches)\nWednesday | 0\nThursday | 4\nFriday | 2\nSaturday | 1\nSunday | 1\nMonday | 2\nTuesday | 2"}
{"level":4,"answer":11.0,"prediction":"import pandas as pd\n\ndef get_nobel_prize_winners(df, country, decade):\n    \"\"\"\n    This function takes in a pandas DataFrame of Nobel Prize winners by country and decade, and returns the number of Nobel Prize winners for a specific country in a specific decade.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of Nobel Prize winners by country and decade.\n    The dataframe should contain \"Country\", \"1980s\", and \"1990s\" columns.\n    country (str): The name of the country.\n    decade (str): The decade in which to count the Nobel Prize winners.\n    Returns:\n    int: The number of Nobel Prize winners for the specific country in the specific decade.\n    \"\"\"\n    # Filter the DataFrame for the specific country and decade\n    country_df = df[df['Country'] == country]\n    num_winners = country_df[decade].values[0]\n    \n    return num_winners\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Country': ['Germany', 'Russia', 'Canada', 'France', 'Japan'],\n    '1980s': [11, 1, 3, 5, 2],\n    '1990s': [7, 1, 8, 3, 1]\n})\n# Call the tool to solve the problem\nprint(get_nobel_prize_winners(df, 'Germany', '1980s'))","question":"For an assignment, Annie looked at which countries got the most Nobel Prizes in various decades. How many Nobel Prize winners did Germany have in the 1980s?","prediction_code":"import pandas as pd\n\ndef get_nobel_prize_winners(df, country, decade):\n    \"\"\"\n    This function takes in a pandas DataFrame of Nobel Prize winners by country and decade, and returns the number of Nobel Prize winners for a specific country in a specific decade.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of Nobel Prize winners by country and decade.\n    The dataframe should contain \"Country\", \"1980s\", and \"1990s\" columns.\n    country (str): The name of the country.\n    decade (str): The decade in which to count the Nobel Prize winners.\n    Returns:\n    int: The number of Nobel Prize winners for the specific country in the specific decade.\n    \"\"\"\n    # Filter the DataFrame for the specific country and decade\n    country_df = df[df['Country'] == country]\n    num_winners = country_df[decade].values[0]\n    \n    return num_winners","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Country': ['Germany', 'Russia', 'Canada', 'France', 'Japan'],\n    '1980s': [11, 1, 3, 5, 2],\n    '1990s': [7, 1, 8, 3, 1]\n})\n# Call the tool to solve the problem\nprint(get_nobel_prize_winners(df, 'Germany', '1980s'))","table":"Name: Nobel Prize winners\nUnit: Nobel Prize winners\nContent:\nCountry | 1980s | 1990s\nGermany | 11 | 7\nRussia | 1 | 1\nCanada | 3 | 8\nFrance | 5 | 3\nJapan | 2 | 1"}
{"level":8,"answer":285.0,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['big screen TV', 'portable DVD player', 'video game system', 'laptop computer', 'stereo speaker'],\n    'Price': [419.00, 317.00, 259.00, 704.00, 353.00]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'laptop computer', 'big screen TV'))","question":"How much more does a laptop computer cost than a big screen TV?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['big screen TV', 'portable DVD player', 'video game system', 'laptop computer', 'stereo speaker'],\n    'Price': [419.00, 317.00, 259.00, 704.00, 353.00]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'laptop computer', 'big screen TV'))","table":"Name: None\nUnit: $\nContent:\nbig screen TV | $419.00\nportable DVD player | $317.00\nvideo game system | $259.00\nlaptop computer | $704.00\nstereo speaker | $353.00"}
{"level":5,"answer":5.0,"prediction":"import pandas as pd\n\ndef find_lowest_score(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of final exam scores and returns the lowest score.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the final exam scores.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The lowest score.\n    \"\"\"\n    # Create a list to store all the scores\n    scores = []\n    \n    # Iterate through the rows of the DataFrame and extract the scores\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    \n    # Find the lowest score\n    lowest_score = min(scores)\n    \n    return lowest_score\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3, 4, 5, 6, 7],\n    'Leaf': [[5], [3, 7], [], [], [5], [], [3, 8], [0]]\n})\n# Call the tool to solve the problem\nprint(find_lowest_score(df))","question":"Mrs. Wong kept track of her students' scores on last year's final exam. What is the lowest score?","prediction_code":"import pandas as pd\n\ndef find_lowest_score(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of final exam scores and returns the lowest score.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the final exam scores.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The lowest score.\n    \"\"\"\n    # Create a list to store all the scores\n    scores = []\n    \n    # Iterate through the rows of the DataFrame and extract the scores\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    \n    # Find the lowest score\n    lowest_score = min(scores)\n    \n    return lowest_score","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3, 4, 5, 6, 7],\n    'Leaf': [[5], [3, 7], [], [], [5], [], [3, 8], [0]]\n})\n# Call the tool to solve the problem\nprint(find_lowest_score(df))","table":"Name: Final exam scores\nUnit: points\nContent:\nStem | Leaf \n0 | 5\n1 | 3, 7\n2 | \n3 | \n4 | 5\n5 | \n6 | 3, 8\n7 | 0"}
{"level":8,"answer":48.0,"prediction":"import pandas as pd\n\ndef find_largest_number_of_pepperoni(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pieces of pepperoni per pizza and returns the largest number of pieces of pepperoni.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pieces of pepperoni per pizza.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of pieces of pepperoni.\n    \"\"\"\n    # prepare a list to store the number of pieces of pepperoni\n    pepperoni = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the total number of pieces of pepperoni for each pizza\n        total_pepperoni = stem * 10 + sum(leaf)\n        pepperoni.append(total_pepperoni)\n    # find the largest number of pieces of pepperoni\n    largest_number = max(pepperoni)\n    return largest_number\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[7, 7, 9], [5, 5, 6, 7], [0, 0, 8, 8], [0, 5, 5, 6, 8, 8]]\n})\n# Call the tool to solve the problem\nprint(find_largest_number_of_pepperoni(df))","question":"Dean counted the number of pieces of pepperoni on each pizza he made. What is the largest number of pieces of pepperoni?","prediction_code":"import pandas as pd\n\ndef find_largest_number_of_pepperoni(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pieces of pepperoni per pizza and returns the largest number of pieces of pepperoni.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pieces of pepperoni per pizza.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of pieces of pepperoni.\n    \"\"\"\n    # prepare a list to store the number of pieces of pepperoni\n    pepperoni = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the total number of pieces of pepperoni for each pizza\n        total_pepperoni = stem * 10 + sum(leaf)\n        pepperoni.append(total_pepperoni)\n    # find the largest number of pieces of pepperoni\n    largest_number = max(pepperoni)\n    return largest_number","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[7, 7, 9], [5, 5, 6, 7], [0, 0, 8, 8], [0, 5, 5, 6, 8, 8]]\n})\n# Call the tool to solve the problem\nprint(find_largest_number_of_pepperoni(df))","table":"Name: Pieces of pepperoni per pizza\nUnit: pieces of pepperoni\nContent:\nStem | Leaf \n1 | 7, 7, 9\n2 | 5, 5, 6, 7\n3 | 0, 0, 8, 8\n4 | 0, 5, 5, 6, 8, 8"}
{"level":5,"answer":2.0,"prediction":"import pandas as pd\n\ndef count_temperature_readings(df):\n    \"\"\"\n    This function takes in a pandas dataframe of daily temperatures and returns the number of temperature readings that are at least 10\u00b0C but less than 20\u00b0C.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the daily temperature readings.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of temperature readings that are at least 10\u00b0C but less than 20\u00b0C.\n    \"\"\"\n    # prepare a list to store temperature readings\n    temperatures = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # iterate through each leaf value in the row\n        for j in range(len(leaf)):\n            temperature = stem * 10 + leaf[j]\n            temperatures.append(temperature)\n    # filter the temperature readings that are at least 10\u00b0C but less than 20\u00b0C\n    filtered = [temperature for temperature in temperatures if temperature >= 10 and temperature < 20]\n    # count the number of temperature readings\n    num_readings = len(filtered)\n    return num_readings\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3],\n    'Leaf': [[0, 0, 2, 4, 7], [4, 9], [2, 7, 8], [1, 3, 9]]\n})\n# Call the tool to solve the problem\nprint(count_temperature_readings(df))","question":"Zack decided to record the temperature every morning when he woke up. How many temperature readings were at least 10\u00b0C but less than 20\u00b0C?","prediction_code":"import pandas as pd\n\ndef count_temperature_readings(df):\n    \"\"\"\n    This function takes in a pandas dataframe of daily temperatures and returns the number of temperature readings that are at least 10\u00b0C but less than 20\u00b0C.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the daily temperature readings.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of temperature readings that are at least 10\u00b0C but less than 20\u00b0C.\n    \"\"\"\n    # prepare a list to store temperature readings\n    temperatures = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # iterate through each leaf value in the row\n        for j in range(len(leaf)):\n            temperature = stem * 10 + leaf[j]\n            temperatures.append(temperature)\n    # filter the temperature readings that are at least 10\u00b0C but less than 20\u00b0C\n    filtered = [temperature for temperature in temperatures if temperature >= 10 and temperature < 20]\n    # count the number of temperature readings\n    num_readings = len(filtered)\n    return num_readings","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3],\n    'Leaf': [[0, 0, 2, 4, 7], [4, 9], [2, 7, 8], [1, 3, 9]]\n})\n# Call the tool to solve the problem\nprint(count_temperature_readings(df))","table":"Name: Daily temperatures (\u00b0C)\nUnit: temperature readings\nContent:\nStem | Leaf \n0 | 0, 0, 2, 4, 7\n1 | 4, 9\n2 | 2, 7, 8\n3 | 1, 3, 9"}
{"level":7,"answer":15.58,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a dictionary of orders,\n    and returns the total cost of the orders.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['flannel sheet', 'red pillowcase', 'green kitchen towel', 'navy blue bath mat', 'beach blanket', 'beach towel'],\n    'Price': [9.66, 1.42, 4.24, 7.67, 5.87, 6.86]\n})\n\n# Initialize the orders dictionary\norders = {\n    'red pillowcase': 5,\n    'green kitchen towel': 2\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","question":"How much money does Deb need to buy 5 red pillowcases and 2 green kitchen towels?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a dictionary of orders,\n    and returns the total cost of the orders.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['flannel sheet', 'red pillowcase', 'green kitchen towel', 'navy blue bath mat', 'beach blanket', 'beach towel'],\n    'Price': [9.66, 1.42, 4.24, 7.67, 5.87, 6.86]\n})\n\n# Initialize the orders dictionary\norders = {\n    'red pillowcase': 5,\n    'green kitchen towel': 2\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","table":"Name: None\nUnit: $\nContent:\nflannel sheet | $9.66\nred pillowcase | $1.42\ngreen kitchen towel | $4.24\nnavy blue bath mat | $7.67\nbeach blanket | $5.87\nbeach towel | $6.86"}
{"level":7,"answer":45.0,"prediction":"import pandas as pd\n\ndef count_students_with_more_than_1_pet(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of pets per student and returns the number of students who have more than 1 pet.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of pets per student.\n    The DataFrame should contain \"Number of pets\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who have more than 1 pet.\n    \"\"\"\n    # Filter the DataFrame for students who have more than 1 pet\n    filtered_df = df[df['Number of pets'] > 1]\n    \n    # Calculate the total number of students who have more than 1 pet\n    num_students = filtered_df['Frequency'].sum()\n    \n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of pets': [0, 1, 2, 3, 4, 5],\n    'Frequency': [11, 0, 2, 7, 20, 16]\n})\n# Call the tool to solve the problem\nprint(count_students_with_more_than_1_pet(df))","question":"For a math project, students in Mrs. Holloway's class recorded the number of pets that each student has. How many students have more than 1 pet?","prediction_code":"import pandas as pd\n\ndef count_students_with_more_than_1_pet(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of pets per student and returns the number of students who have more than 1 pet.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of pets per student.\n    The DataFrame should contain \"Number of pets\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who have more than 1 pet.\n    \"\"\"\n    # Filter the DataFrame for students who have more than 1 pet\n    filtered_df = df[df['Number of pets'] > 1]\n    \n    # Calculate the total number of students who have more than 1 pet\n    num_students = filtered_df['Frequency'].sum()\n    \n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of pets': [0, 1, 2, 3, 4, 5],\n    'Frequency': [11, 0, 2, 7, 20, 16]\n})\n# Call the tool to solve the problem\nprint(count_students_with_more_than_1_pet(df))","table":"Name: Pets\nUnit: None\nContent:\nNumber of pets | Frequency\n0 | 11\n1 | 0\n2 | 2\n3 | 7\n4 | 20\n5 | 16"}
{"level":4,"answer":83.0,"prediction":"import pandas as pd\n\ndef find_largest_number_of_books(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of books per shelf and returns the largest number of books.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of books per shelf.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of books.\n    \"\"\"\n    # Create an empty list to store the number of books on each shelf\n    books = []\n    \n    # Iterate through each row of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Calculate the total number of books on the shelf\n        total_books = stem * 10 + sum(leaf)\n        \n        # Append the total number of books to the list\n        books.append(total_books)\n    \n    # Find the largest number of books\n    largest_number_of_books = max(books)\n    \n    return largest_number_of_books\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[1, 5, 6, 8], [1, 2, 9], [1, 2], [7], [1, 1, 4, 8], [3], [1, 2, 3], [2, 3]]\n})\n# Call the tool to solve the problem\nprint(find_largest_number_of_books(df))","question":"The librarian at the public library counted the number of books on each shelf. What is the largest number of books?","prediction_code":"import pandas as pd\n\ndef find_largest_number_of_books(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of books per shelf and returns the largest number of books.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of books per shelf.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of books.\n    \"\"\"\n    # Create an empty list to store the number of books on each shelf\n    books = []\n    \n    # Iterate through each row of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Calculate the total number of books on the shelf\n        total_books = stem * 10 + sum(leaf)\n        \n        # Append the total number of books to the list\n        books.append(total_books)\n    \n    # Find the largest number of books\n    largest_number_of_books = max(books)\n    \n    return largest_number_of_books","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[1, 5, 6, 8], [1, 2, 9], [1, 2], [7], [1, 1, 4, 8], [3], [1, 2, 3], [2, 3]]\n})\n# Call the tool to solve the problem\nprint(find_largest_number_of_books(df))","table":"Name: Books per shelf\nUnit: books\nContent:\nStem | Leaf \n1 | 1, 5, 6, 8\n2 | 1, 2, 9\n3 | 1, 2\n4 | 7\n5 | 1, 1, 4, 8\n6 | 3\n7 | 1, 2, 3\n8 | 2, 3"}
{"level":6,"answer":5.0,"prediction":"import pandas as pd\nfrom scipy import stats\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of club membership and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the names and number of clubs for each student.\n    The dataframe should contain \"Name\" and \"Number of clubs\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of clubs']\n    \n    # Calculate the mode\n    mode = stats.mode(numbers)[0][0]\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Craig', 'Harry', 'Jayla', 'Noah', 'Tyrone'],\n    'Number of clubs': [10, 5, 5, 10, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"Some students compared how many clubs they belong to. What is the mode of the numbers?","prediction_code":"import pandas as pd\nfrom scipy import stats\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of club membership and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the names and number of clubs for each student.\n    The dataframe should contain \"Name\" and \"Number of clubs\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of clubs']\n    \n    # Calculate the mode\n    mode = stats.mode(numbers)[0][0]\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Craig', 'Harry', 'Jayla', 'Noah', 'Tyrone'],\n    'Number of clubs': [10, 5, 5, 10, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Clubs\nUnit: None\nContent:\nName | Number of clubs\nCraig | 10\nHarry | 5\nJayla | 5\nNoah | 10\nTyrone | 5"}
{"level":7,"answer":13.0,"prediction":"import pandas as pd\n\ndef count_people_with_more_than_4_pine_cones(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pine cones found by each team member and returns the number of people who found more than 4 pine cones.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of pine cones found by each team member.\n    The DataFrame should contain \"Pine cones found\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who found more than 4 pine cones.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of pine cones found is greater than 4\n    filtered_df = df[df['Pine cones found'] > 4]\n    \n    # Calculate the total number of people who found more than 4 pine cones\n    num_people = filtered_df['Frequency'].sum()\n    \n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Pine cones found': [1, 2, 3, 4, 5],\n    'Frequency': [2, 0, 12, 11, 13]\n})\n# Call the tool to solve the problem\nprint(count_people_with_more_than_4_pine_cones(df))","question":"After a scavenger hunt, a team counted the number of pine cones found by each of its members. How many people found more than 4 pine cones?","prediction_code":"import pandas as pd\n\ndef count_people_with_more_than_4_pine_cones(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pine cones found by each team member and returns the number of people who found more than 4 pine cones.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of pine cones found by each team member.\n    The DataFrame should contain \"Pine cones found\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who found more than 4 pine cones.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of pine cones found is greater than 4\n    filtered_df = df[df['Pine cones found'] > 4]\n    \n    # Calculate the total number of people who found more than 4 pine cones\n    num_people = filtered_df['Frequency'].sum()\n    \n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Pine cones found': [1, 2, 3, 4, 5],\n    'Frequency': [2, 0, 12, 11, 13]\n})\n# Call the tool to solve the problem\nprint(count_people_with_more_than_4_pine_cones(df))","table":"Name: Finding pine cones\nUnit: None\nContent:\nPine cones found | Frequency\n1 | 2\n2 | 0\n3 | 12\n4 | 11\n5 | 13"}
{"level":7,"answer":489.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of buying a certain quantity of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item to calculate the cost for.\n    quantity (int): The quantity of the item to calculate the cost for.\n    Returns:\n    float: The total cost of buying the specified quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['teddy bear', 'model railroad set', 'toy guitar', 'chess board'],\n    'Price': [14.62, 81.50, 18.28, 14.52]\n})\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, 'model railroad set', 6)\n\n# Print out the answer\nprint(total_cost)","question":"How much money does Joy need to buy 6 model railroad sets?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of buying a certain quantity of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item to calculate the cost for.\n    quantity (int): The quantity of the item to calculate the cost for.\n    Returns:\n    float: The total cost of buying the specified quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['teddy bear', 'model railroad set', 'toy guitar', 'chess board'],\n    'Price': [14.62, 81.50, 18.28, 14.52]\n})\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, 'model railroad set', 6)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\nteddy bear | $14.62\nmodel railroad set | $81.50\ntoy guitar | $18.28\nchess board | $14.52"}
{"level":8,"answer":521.0,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the price difference between two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['bat signed by a famous baseball player', 'photograph signed by a famous movie star', 'photograph signed by a famous race car driver', 'jersey signed by a famous hockey player', 'painting signed by a famous artist', 'photograph signed by a famous television star'],\n    'Price': [4410.00, 7282.00, 1664.00, 1691.00, 5405.00, 3889.00]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'bat signed by a famous baseball player', 'photograph signed by a famous television star'))","question":"How much more does a bat signed by a famous baseball player cost than a photograph signed by a famous television star?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the price difference between two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['bat signed by a famous baseball player', 'photograph signed by a famous movie star', 'photograph signed by a famous race car driver', 'jersey signed by a famous hockey player', 'painting signed by a famous artist', 'photograph signed by a famous television star'],\n    'Price': [4410.00, 7282.00, 1664.00, 1691.00, 5405.00, 3889.00]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'bat signed by a famous baseball player', 'photograph signed by a famous television star'))","table":"Name: None\nUnit: $\nContent:\nbat signed by a famous baseball player | $4,410.00\nphotograph signed by a famous movie star | $7,282.00\nphotograph signed by a famous race car driver | $1,664.00\njersey signed by a famous hockey player | $1,691.00\npainting signed by a famous artist | $5,405.00\nphotograph signed by a famous television star | $3,889.00"}
{"level":5,"answer":8.0,"prediction":"import pandas as pd\n\ndef calculate_toll_difference(df, bridge_name):\n    \"\"\"\n    This function takes in a pandas DataFrame of bridge tolls and a bridge name, and returns the difference in tolls between a truck and a car for the specified bridge.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge toll information with columns 'Bridge', 'Truck', and 'Car'.\n    bridge_name (str): The name of the bridge to calculate the toll difference for.\n    Returns:\n    float: The difference in tolls between a truck and a car for the specified bridge.\n    \"\"\"\n    # Filter the DataFrame for the specified bridge\n    bridge_df = df[df['Bridge'] == bridge_name]\n    \n    # Get the tolls for a truck and a car for the specified bridge\n    truck_toll = bridge_df['Truck'].values[0]\n    car_toll = bridge_df['Car'].values[0]\n    \n    # Calculate the toll difference\n    toll_difference = truck_toll - car_toll\n    \n    return toll_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['Tacoma Narrows', 'Hatem', 'George Washington', 'San Mateo'],\n    'Truck': [4, 10, 16, 6],\n    'Car': [3, 5, 8, 4]\n})\n\n# Call the tool to solve the problem\nprint(calculate_toll_difference(df, 'George Washington'))","question":"A transportation analyst compared various bridges' tolls. On the George Washington bridge, how much more is the toll for a truck than for a car?","prediction_code":"import pandas as pd\n\ndef calculate_toll_difference(df, bridge_name):\n    \"\"\"\n    This function takes in a pandas DataFrame of bridge tolls and a bridge name, and returns the difference in tolls between a truck and a car for the specified bridge.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge toll information with columns 'Bridge', 'Truck', and 'Car'.\n    bridge_name (str): The name of the bridge to calculate the toll difference for.\n    Returns:\n    float: The difference in tolls between a truck and a car for the specified bridge.\n    \"\"\"\n    # Filter the DataFrame for the specified bridge\n    bridge_df = df[df['Bridge'] == bridge_name]\n    \n    # Get the tolls for a truck and a car for the specified bridge\n    truck_toll = bridge_df['Truck'].values[0]\n    car_toll = bridge_df['Car'].values[0]\n    \n    # Calculate the toll difference\n    toll_difference = truck_toll - car_toll\n    \n    return toll_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['Tacoma Narrows', 'Hatem', 'George Washington', 'San Mateo'],\n    'Truck': [4, 10, 16, 6],\n    'Car': [3, 5, 8, 4]\n})\n\n# Call the tool to solve the problem\nprint(calculate_toll_difference(df, 'George Washington'))","table":"Name: Bridge tolls\nUnit: $\nContent:\nBridge | Truck | Car\nTacoma Narrows | $4 | $3\nHatem | $10 | $5\nGeorge Washington | $16 | $8\nSan Mateo | $6 | $4"}
{"level":4,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_donation_difference(df, person1, person2, cause):\n    \"\"\"\n    This function takes in a pandas DataFrame of donations and calculates the difference in donation amounts between two people for a specific cause.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing donation amounts with columns 'Person', 'Hunger prevention', and 'Clean water'.\n    person1 (str): The name of the first person.\n    person2 (str): The name of the second person.\n    cause (str): The cause for which the donation amounts are being compared ('Hunger prevention' or 'Clean water').\n    Returns:\n    float: The difference in donation amounts between person1 and person2 for the specified cause.\n    \"\"\"\n    # Filter the DataFrame for the specified cause and the two people\n    cause_df = df[['Person', cause]]\n    filtered_df = cause_df[cause_df['Person'].isin([person1, person2])]\n    \n    # Get the donation amounts for the two people\n    person1_donation = filtered_df[filtered_df['Person'] == person1][cause].values[0]\n    person2_donation = filtered_df[filtered_df['Person'] == person2][cause].values[0]\n    \n    # Calculate the difference in donation amounts\n    donation_difference = person2_donation - person1_donation\n    \n    return donation_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Person': ['Ellie', 'Valentina', 'Dana'],\n    'Hunger prevention': [4, 16, 18],\n    'Clean water': [6, 5, 11]\n})\n# Call the tool to solve the problem\nprint(calculate_donation_difference(df, 'Ellie', 'Dana', 'Clean water'))","question":"A philanthropic organization compared the amounts of money that its members donated to certain causes. How much more money did Dana donate to clean water than Ellie?","prediction_code":"import pandas as pd\n\ndef calculate_donation_difference(df, person1, person2, cause):\n    \"\"\"\n    This function takes in a pandas DataFrame of donations and calculates the difference in donation amounts between two people for a specific cause.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing donation amounts with columns 'Person', 'Hunger prevention', and 'Clean water'.\n    person1 (str): The name of the first person.\n    person2 (str): The name of the second person.\n    cause (str): The cause for which the donation amounts are being compared ('Hunger prevention' or 'Clean water').\n    Returns:\n    float: The difference in donation amounts between person1 and person2 for the specified cause.\n    \"\"\"\n    # Filter the DataFrame for the specified cause and the two people\n    cause_df = df[['Person', cause]]\n    filtered_df = cause_df[cause_df['Person'].isin([person1, person2])]\n    \n    # Get the donation amounts for the two people\n    person1_donation = filtered_df[filtered_df['Person'] == person1][cause].values[0]\n    person2_donation = filtered_df[filtered_df['Person'] == person2][cause].values[0]\n    \n    # Calculate the difference in donation amounts\n    donation_difference = person2_donation - person1_donation\n    \n    return donation_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Person': ['Ellie', 'Valentina', 'Dana'],\n    'Hunger prevention': [4, 16, 18],\n    'Clean water': [6, 5, 11]\n})\n# Call the tool to solve the problem\nprint(calculate_donation_difference(df, 'Ellie', 'Dana', 'Clean water'))","table":"Name: Donations\nUnit: $\nContent:\nPerson | Hunger prevention | Clean water\nEllie | $4 | $6\nValentina | $16 | $5\nDana | $18 | $11"}
{"level":6,"answer":23.0,"prediction":"import pandas as pd\n\ndef count_scarves_between_lengths(df, min_length, max_length):\n    \"\"\"\n    This function takes in a pandas dataframe of scarf lengths and returns the number of scarves that are at least min_length centimeters but less than max_length centimeters.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the lengths of scarves.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_length (int): The minimum length of scarves to consider.\n    max_length (int): The maximum length of scarves to consider.\n    Returns:\n    int: The number of scarves that are at least min_length centimeters but less than max_length centimeters.\n    \"\"\"\n    # prepare a list to calculate lengths of each scarf\n    lengths = []\n    # calculate the total length of each scarf\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            lengths.append(stem * 10 + leaf[j])\n    # filter the scarves where the length is greater than or equal to min_length and less than max_length\n    filtered = [length for length in lengths if min_length <= length < max_length]\n    # count the number of scarves\n    num_scarves = len(filtered)\n    return num_scarves\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [6, 7, 8, 9],\n    'Leaf': [[9], [1, 1, 3, 3, 3, 3, 7, 7, 8, 8], [0, 0, 0, 2, 2, 4, 6, 7, 8, 8, 8], [0]]\n})\n# Call the tool to solve the problem\nprint(count_scarves_between_lengths(df, 66, 99))","question":"Cora measured the length of each scarf in the clothing store where she works. How many scarves are at least 66 centimeters but less than 99 centimeters?","prediction_code":"import pandas as pd\n\ndef count_scarves_between_lengths(df, min_length, max_length):\n    \"\"\"\n    This function takes in a pandas dataframe of scarf lengths and returns the number of scarves that are at least min_length centimeters but less than max_length centimeters.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the lengths of scarves.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_length (int): The minimum length of scarves to consider.\n    max_length (int): The maximum length of scarves to consider.\n    Returns:\n    int: The number of scarves that are at least min_length centimeters but less than max_length centimeters.\n    \"\"\"\n    # prepare a list to calculate lengths of each scarf\n    lengths = []\n    # calculate the total length of each scarf\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            lengths.append(stem * 10 + leaf[j])\n    # filter the scarves where the length is greater than or equal to min_length and less than max_length\n    filtered = [length for length in lengths if min_length <= length < max_length]\n    # count the number of scarves\n    num_scarves = len(filtered)\n    return num_scarves","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [6, 7, 8, 9],\n    'Leaf': [[9], [1, 1, 3, 3, 3, 3, 7, 7, 8, 8], [0, 0, 0, 2, 2, 4, 6, 7, 8, 8, 8], [0]]\n})\n# Call the tool to solve the problem\nprint(count_scarves_between_lengths(df, 66, 99))","table":"Name: Scarf lengths (centimeters)\nUnit: scarves\nContent:\nStem | Leaf \n6 | 9\n7 | 1, 1, 3, 3, 3, 3, 7, 7, 8, 8\n8 | 0, 0, 0, 2, 2, 4, 6, 7, 8, 8, 8\n9 | 0"}
{"level":7,"answer":12.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of art contest entries per year and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of art contest entries per year.\n    The dataframe should contain \"Year\" and \"Number of entries\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_entries = df[df['Year'] == start_year]['Number of entries'].values[0]\n    end_entries = df[df['Year'] == end_year]['Number of entries'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_entries - start_entries) \/ start_entries\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2010, 2011, 2012, 2013, 2014],\n    'Number of entries': [34, 34, 46, 38, 36]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2011, 2012))","question":"Mrs. Hardin hosts an annual art contest for kids, and she keeps a record of the number of entries each year. According to the table, what was the rate of change between 2011 and 2012?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of art contest entries per year and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of art contest entries per year.\n    The dataframe should contain \"Year\" and \"Number of entries\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_entries = df[df['Year'] == start_year]['Number of entries'].values[0]\n    end_entries = df[df['Year'] == end_year]['Number of entries'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_entries - start_entries) \/ start_entries\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2010, 2011, 2012, 2013, 2014],\n    'Number of entries': [34, 34, 46, 38, 36]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2011, 2012))","table":"Name: Art contest entries\nUnit: entries per year\nContent:\nYear | Number of entries\n2010 | 34\n2011 | 34\n2012 | 46\n2013 | 38\n2014 | 36"}
{"level":4,"answer":47.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost for.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['lawn sprinkler', 'ladder', 'wheelbarrow', 'wrench', 'lawn mower', 'can of paint'],\n    'Price': [13.00, 36.00, 30.00, 11.00, 96.00, 15.00]\n})\n\n# Define the items Kylie wants to buy\nitems = ['ladder', 'wrench']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, items)\n\n# Print out the answer\nprint(total_cost)","question":"How much money does Kylie need to buy a ladder and a wrench?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost for.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['lawn sprinkler', 'ladder', 'wheelbarrow', 'wrench', 'lawn mower', 'can of paint'],\n    'Price': [13.00, 36.00, 30.00, 11.00, 96.00, 15.00]\n})\n\n# Define the items Kylie wants to buy\nitems = ['ladder', 'wrench']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, items)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\nlawn sprinkler | $13.00\nladder | $36.00\nwheelbarrow | $30.00\nwrench | $11.00\nlawn mower | $96.00\ncan of paint | $15.00"}
{"level":7,"answer":3.0,"prediction":"import pandas as pd\n\ndef count_shipments_with_77_broken_plates(df):\n    \"\"\"\n    This function takes in a pandas dataframe of broken plates per shipment and returns the number of shipments that had exactly 77 broken plates.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken plates per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of shipments that had exactly 77 broken plates.\n    \"\"\"\n    # prepare a list to calculate the number of broken plates in each shipment\n    broken_plates = []\n    # calculate the total number of broken plates in each shipment\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            broken_plates.append(stem * 10 + leaf[j])\n    # filter the shipments where the total number of broken plates is equal to 77\n    filtered = [plates for plates in broken_plates if plates == 77]\n    # count the number of shipments\n    num_shipments = len(filtered)\n    return num_shipments\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[8], [4], [0], [8], [0, 6], [4, 6, 7, 7, 7], [0, 2, 7], [0]],\n})\n# Call the tool to solve the problem\nprint(count_shipments_with_77_broken_plates(df))","question":"A pottery factory kept track of the number of broken plates per shipment last week. How many shipments had exactly 77 broken plates?","prediction_code":"import pandas as pd\n\ndef count_shipments_with_77_broken_plates(df):\n    \"\"\"\n    This function takes in a pandas dataframe of broken plates per shipment and returns the number of shipments that had exactly 77 broken plates.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken plates per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of shipments that had exactly 77 broken plates.\n    \"\"\"\n    # prepare a list to calculate the number of broken plates in each shipment\n    broken_plates = []\n    # calculate the total number of broken plates in each shipment\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            broken_plates.append(stem * 10 + leaf[j])\n    # filter the shipments where the total number of broken plates is equal to 77\n    filtered = [plates for plates in broken_plates if plates == 77]\n    # count the number of shipments\n    num_shipments = len(filtered)\n    return num_shipments","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[8], [4], [0], [8], [0, 6], [4, 6, 7, 7, 7], [0, 2, 7], [0]],\n})\n# Call the tool to solve the problem\nprint(count_shipments_with_77_broken_plates(df))","table":"Name: Broken plates per shipment\nUnit: shipments\nContent:\nStem | Leaf \n2 | 8\n3 | 4\n4 | 0\n5 | 8\n6 | 0, 6\n7 | 4, 6, 7, 7, 7\n8 | 0, 2, 7\n9 | 0"}
{"level":5,"answer":0.01,"prediction":"import pandas as pd\n\ndef calculate_remaining_money(df, initial_money, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price list and calculates the remaining money after buying certain items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    initial_money (float): The initial amount of money.\n    items (list): A list of items to buy.\n    Returns:\n    float: The remaining amount of money after buying the items.\n    \"\"\"\n    # Initialize the remaining money\n    remaining_money = initial_money\n    \n    # Iterate through the items and subtract their prices from the remaining money\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            remaining_money -= item_price\n    \n    return remaining_money\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['piece of licorice', 'peppermint candy', 'butterscotch candy', 'cinnamon candy', 'gum drop', 'gummy bear'],\n    'Price': [0.09, 0.08, 0.08, 0.09, 0.07, 0.09]\n})\n\n# Set the initial amount of money\ninitial_money = 0.16\n\n# Set the items to buy\nitems = ['peppermint candy', 'gum drop']\n\n# Call the tool to solve the problem\nremaining_money = calculate_remaining_money(df, initial_money, items)\n\n# Print out the answer\nprint(remaining_money)","question":"Miranda has $0.16. How much money will Miranda have left if she buys a peppermint candy and a gum drop?","prediction_code":"import pandas as pd\n\ndef calculate_remaining_money(df, initial_money, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price list and calculates the remaining money after buying certain items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    initial_money (float): The initial amount of money.\n    items (list): A list of items to buy.\n    Returns:\n    float: The remaining amount of money after buying the items.\n    \"\"\"\n    # Initialize the remaining money\n    remaining_money = initial_money\n    \n    # Iterate through the items and subtract their prices from the remaining money\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            remaining_money -= item_price\n    \n    return remaining_money","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['piece of licorice', 'peppermint candy', 'butterscotch candy', 'cinnamon candy', 'gum drop', 'gummy bear'],\n    'Price': [0.09, 0.08, 0.08, 0.09, 0.07, 0.09]\n})\n\n# Set the initial amount of money\ninitial_money = 0.16\n\n# Set the items to buy\nitems = ['peppermint candy', 'gum drop']\n\n# Call the tool to solve the problem\nremaining_money = calculate_remaining_money(df, initial_money, items)\n\n# Print out the answer\nprint(remaining_money)","table":"Name: None\nUnit: $\nContent:\npiece of licorice | $0.09\npeppermint candy | $0.08\nbutterscotch candy | $0.08\ncinnamon candy | $0.09\ngum drop | $0.07\ngummy bear | $0.09"}
{"level":6,"answer":19.0,"prediction":"import pandas as pd\n\ndef calculate_chicken_cost(df, chicken_type, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the chicken prices per kilogram and calculates the cost of buying a specific weight of a specific type of chicken.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the chicken prices per kilogram with columns 'Chicken' and 'Price'.\n    chicken_type (str): The type of chicken to calculate the cost for.\n    weight (float): The weight of chicken to calculate the cost for in kilograms.\n    Returns:\n    float: The cost of buying the specified weight of the specified type of chicken.\n    \"\"\"\n    # Filter the DataFrame for the specific type of chicken\n    chicken_df = df[df['Chicken'] == chicken_type]\n    \n    # Check if the chicken type exists in the DataFrame\n    if not chicken_df.empty:\n        # Get the price per kilogram for the chicken type\n        price_per_kg = chicken_df['Price'].values[0]\n        \n        # Calculate the total cost based on the weight\n        total_cost = price_per_kg * weight\n        \n        return total_cost\n    else:\n        return None\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Chicken': ['baked chicken', 'roast chicken', 'breaded chicken', 'sauteed chicken', 'curried chicken', 'fried chicken'],\n    'Price': [3, 3, 4, 4, 2, 3]\n})\n\n# Call the tool to solve the problem\nprint(calculate_chicken_cost(df, 'sauteed chicken', 4 + 3\/4))","question":"How much would it cost to buy 4+3\/4 kilograms of sauteed chicken?","prediction_code":"import pandas as pd\n\ndef calculate_chicken_cost(df, chicken_type, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the chicken prices per kilogram and calculates the cost of buying a specific weight of a specific type of chicken.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the chicken prices per kilogram with columns 'Chicken' and 'Price'.\n    chicken_type (str): The type of chicken to calculate the cost for.\n    weight (float): The weight of chicken to calculate the cost for in kilograms.\n    Returns:\n    float: The cost of buying the specified weight of the specified type of chicken.\n    \"\"\"\n    # Filter the DataFrame for the specific type of chicken\n    chicken_df = df[df['Chicken'] == chicken_type]\n    \n    # Check if the chicken type exists in the DataFrame\n    if not chicken_df.empty:\n        # Get the price per kilogram for the chicken type\n        price_per_kg = chicken_df['Price'].values[0]\n        \n        # Calculate the total cost based on the weight\n        total_cost = price_per_kg * weight\n        \n        return total_cost\n    else:\n        return None","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Chicken': ['baked chicken', 'roast chicken', 'breaded chicken', 'sauteed chicken', 'curried chicken', 'fried chicken'],\n    'Price': [3, 3, 4, 4, 2, 3]\n})\n\n# Call the tool to solve the problem\nprint(calculate_chicken_cost(df, 'sauteed chicken', 4 + 3\/4))","table":"Name: None\nUnit: $\nContent:\nbaked chicken | $3 per kg\nroast chicken | $3 per kg\nbreaded chicken | $4 per kg\nsauteed chicken | $4 per kg\ncurried chicken | $2 per kg\nfried chicken | $3 per kg"}
{"level":7,"answer":23.0,"prediction":"import pandas as pd\n\ndef count_people_with_4_or_more_trips(df):\n    \"\"\"\n    This function takes in a pandas dataframe of trips to the mall last month, and returns the number of people who went to the mall at least 4 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of trips to the mall and their frequencies.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who went to the mall at least 4 times.\n    \"\"\"\n    # filter the dataframe for trips with 4 or more visits\n    filtered_df = df[df['Number of trips'] >= 4]\n    # calculate the total number of people who went to the mall at least 4 times\n    num_people = filtered_df['Frequency'].sum()\n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [0, 1, 2, 3, 4, 5],\n    'Frequency': [19, 3, 5, 2, 17, 6]\n})\n# Call the tool to solve the problem\nprint(count_people_with_4_or_more_trips(df))","question":"A marketing research firm asked people how many times they visited the mall last month. How many people went to the mall at least 4 times?","prediction_code":"import pandas as pd\n\ndef count_people_with_4_or_more_trips(df):\n    \"\"\"\n    This function takes in a pandas dataframe of trips to the mall last month, and returns the number of people who went to the mall at least 4 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of trips to the mall and their frequencies.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who went to the mall at least 4 times.\n    \"\"\"\n    # filter the dataframe for trips with 4 or more visits\n    filtered_df = df[df['Number of trips'] >= 4]\n    # calculate the total number of people who went to the mall at least 4 times\n    num_people = filtered_df['Frequency'].sum()\n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [0, 1, 2, 3, 4, 5],\n    'Frequency': [19, 3, 5, 2, 17, 6]\n})\n# Call the tool to solve the problem\nprint(count_people_with_4_or_more_trips(df))","table":"Name: Trips to the mall last month\nUnit: None\nContent:\nNumber of trips | Frequency\n0 | 19\n1 | 3\n2 | 5\n3 | 2\n4 | 17\n5 | 6"}
{"level":4,"answer":5.0,"prediction":"import pandas as pd\n\ndef count_jars_with_candies(df, min_candies, max_candies):\n    \"\"\"\n    This function takes in a pandas dataframe of peppermint candies per jar, and returns the number of jars that have at least min_candies peppermint candies but fewer than max_candies peppermint candies.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of peppermint candies per jar.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_candies (int): The minimum number of peppermint candies required in a jar.\n    max_candies (int): The maximum number of peppermint candies allowed in a jar.\n    Returns:\n    int: The number of jars that have at least min_candies peppermint candies but fewer than max_candies peppermint candies.\n    \"\"\"\n    # prepare a list to calculate candies in each jar\n    candies = []\n    # calculate the total number of peppermint candies in each jar\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            candies.append(stem * 10 + leaf[j])\n    # filter the jars where the total number of peppermint candies is within the specified range\n    filtered = [candy for candy in candies if min_candies <= candy < max_candies]\n    # count the number of jars\n    num_jars = len(filtered)\n    return num_jars\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [6, 7, 8, 9],\n    'Leaf': [[3, 5, 7], [0, 1, 9], [9], [0]]\n})\n# Call the tool to solve the problem\nprint(count_jars_with_candies(df, 68, 93))","question":"Belle, a candy store employee, placed peppermint candies into jars of various sizes. How many jars had at least 68 peppermint candies but fewer than 93 peppermint candies?","prediction_code":"import pandas as pd\n\ndef count_jars_with_candies(df, min_candies, max_candies):\n    \"\"\"\n    This function takes in a pandas dataframe of peppermint candies per jar, and returns the number of jars that have at least min_candies peppermint candies but fewer than max_candies peppermint candies.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of peppermint candies per jar.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_candies (int): The minimum number of peppermint candies required in a jar.\n    max_candies (int): The maximum number of peppermint candies allowed in a jar.\n    Returns:\n    int: The number of jars that have at least min_candies peppermint candies but fewer than max_candies peppermint candies.\n    \"\"\"\n    # prepare a list to calculate candies in each jar\n    candies = []\n    # calculate the total number of peppermint candies in each jar\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            candies.append(stem * 10 + leaf[j])\n    # filter the jars where the total number of peppermint candies is within the specified range\n    filtered = [candy for candy in candies if min_candies <= candy < max_candies]\n    # count the number of jars\n    num_jars = len(filtered)\n    return num_jars","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [6, 7, 8, 9],\n    'Leaf': [[3, 5, 7], [0, 1, 9], [9], [0]]\n})\n# Call the tool to solve the problem\nprint(count_jars_with_candies(df, 68, 93))","table":"Name: Peppermint candies per jar\nUnit: None\nContent:\nStem | Leaf \n6 | 3, 5, 7\n7 | 0, 1, 9\n8 | 9\n9 | 0"}
{"level":6,"answer":7.0,"prediction":"import pandas as pd\n\ndef calculate_mean_temperature(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of daily low temperatures and returns the mean temperature.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the daily low temperatures.\n    The dataframe should contain \"Day\" and \"Temperature (\u00b0C)\" columns.\n    Returns:\n    float: The mean temperature.\n    \"\"\"\n    # Extract the temperature column from the DataFrame\n    temperatures = df['Temperature (\u00b0C)']\n    \n    # Calculate the mean temperature using pandas\n    mean_temperature = temperatures.mean()\n    \n    return mean_temperature\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Temperature (\u00b0C)': [7, 5, 9, 4, 10]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_temperature(df))","question":"Jayden graphed the daily low temperature for 5 days. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean_temperature(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of daily low temperatures and returns the mean temperature.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the daily low temperatures.\n    The dataframe should contain \"Day\" and \"Temperature (\u00b0C)\" columns.\n    Returns:\n    float: The mean temperature.\n    \"\"\"\n    # Extract the temperature column from the DataFrame\n    temperatures = df['Temperature (\u00b0C)']\n    \n    # Calculate the mean temperature using pandas\n    mean_temperature = temperatures.mean()\n    \n    return mean_temperature","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Temperature (\u00b0C)': [7, 5, 9, 4, 10]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_temperature(df))","table":"Name: Daily low temperature\nUnit: None\nContent:\nDay | Temperature (\u00c2\u00b0C)\nMonday | 7\nTuesday | 5\nWednesday | 9\nThursday | 4\nFriday | 10"}
{"level":7,"answer":1.66,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item2_price - item1_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['cookbook', 'airplane calendar', 'history book', 'atlas'],\n    'Price': [19.53, 12.94, 11.28, 16.61]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'airplane calendar', 'history book'))","question":"How much more does an airplane calendar cost than a history book?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item2_price - item1_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['cookbook', 'airplane calendar', 'history book', 'atlas'],\n    'Price': [19.53, 12.94, 11.28, 16.61]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'airplane calendar', 'history book'))","table":"Name: None\nUnit: $\nContent:\ncookbook | $19.53\nairplane calendar | $12.94\nhistory book | $11.28\natlas | $16.61"}
{"level":4,"answer":3.0,"prediction":"import pandas as pd\n\ndef calculate_remaining_money(menu_df, initial_money, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table, the initial amount of money, and a dictionary of orders, and returns the remaining amount of money after making the purchases using pandas.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    initial_money (float): The initial amount of money.\n    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.\n    Returns:\n    float: The remaining amount of money after making the purchases.\n    \"\"\"\n    # Calculate the total cost of the orders using the calculate_total_cost function\n    total_cost = calculate_total_cost(menu_df, orders)\n    \n    # Calculate the remaining amount of money\n    remaining_money = initial_money - total_cost\n    \n    return remaining_money\n########################################\n# Initialize the table into a dataframe\nmenu_df = pd.DataFrame({\n    'Item': ['cheese pizza', 'spaghetti and meatballs', 'pasta with white sauce', 'steamed broccoli', 'grilled eggplant', 'green salad'],\n    'Price': [6.00, 5.00, 6.00, 5.00, 8.00, 3.00]\n})\n\n# Initialize the initial amount of money and the orders\ninitial_money = 15.00\norders = {'cheese pizza': 1, 'pasta with white sauce': 1}\n\n# Call the tool to solve the problem\nprint(calculate_remaining_money(menu_df, initial_money, orders))","question":"Leo has $15.00. How much money will Leo have left if he buys a cheese pizza and pasta with white sauce?","prediction_code":"import pandas as pd\n\ndef calculate_remaining_money(menu_df, initial_money, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table, the initial amount of money, and a dictionary of orders, and returns the remaining amount of money after making the purchases using pandas.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    initial_money (float): The initial amount of money.\n    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.\n    Returns:\n    float: The remaining amount of money after making the purchases.\n    \"\"\"\n    # Calculate the total cost of the orders using the calculate_total_cost function\n    total_cost = calculate_total_cost(menu_df, orders)\n    \n    # Calculate the remaining amount of money\n    remaining_money = initial_money - total_cost\n    \n    return remaining_money","prediction_call":"# Initialize the table into a dataframe\nmenu_df = pd.DataFrame({\n    'Item': ['cheese pizza', 'spaghetti and meatballs', 'pasta with white sauce', 'steamed broccoli', 'grilled eggplant', 'green salad'],\n    'Price': [6.00, 5.00, 6.00, 5.00, 8.00, 3.00]\n})\n\n# Initialize the initial amount of money and the orders\ninitial_money = 15.00\norders = {'cheese pizza': 1, 'pasta with white sauce': 1}\n\n# Call the tool to solve the problem\nprint(calculate_remaining_money(menu_df, initial_money, orders))","table":"Name: None\nUnit: $\nContent:\ncheese pizza | $6.00\nspaghetti and meatballs | $5.00\npasta with white sauce | $6.00\nsteamed broccoli | $5.00\ngrilled eggplant | $8.00\ngreen salad | $3.00"}
{"level":3,"answer":4442.0,"prediction":"import pandas as pd\n\ndef calculate_attendance_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of tickets sold per day and returns the difference in attendance between Saturday and Friday.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of tickets sold per day.\n    The dataframe should contain \"Day\" and \"Number of tickets\" columns.\n    Returns:\n    int: The difference in attendance between Saturday and Friday.\n    \"\"\"\n    # Filter the DataFrame for Saturday and Friday\n    saturday_tickets = df[df['Day'] == 'Saturday']['Number of tickets'].values[0]\n    friday_tickets = df[df['Day'] == 'Friday']['Number of tickets'].values[0]\n    \n    # Calculate the difference in attendance\n    attendance_difference = saturday_tickets - friday_tickets\n    \n    return attendance_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday'],\n    'Number of tickets': [2136, 6578, 8187, 5009]\n})\n# Call the tool to solve the problem\nprint(calculate_attendance_difference(df))","question":"Matt tracked the attendance at the school play. How many more people attended the play on Saturday than on Friday?","prediction_code":"import pandas as pd\n\ndef calculate_attendance_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of tickets sold per day and returns the difference in attendance between Saturday and Friday.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of tickets sold per day.\n    The dataframe should contain \"Day\" and \"Number of tickets\" columns.\n    Returns:\n    int: The difference in attendance between Saturday and Friday.\n    \"\"\"\n    # Filter the DataFrame for Saturday and Friday\n    saturday_tickets = df[df['Day'] == 'Saturday']['Number of tickets'].values[0]\n    friday_tickets = df[df['Day'] == 'Friday']['Number of tickets'].values[0]\n    \n    # Calculate the difference in attendance\n    attendance_difference = saturday_tickets - friday_tickets\n    \n    return attendance_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday'],\n    'Number of tickets': [2136, 6578, 8187, 5009]\n})\n# Call the tool to solve the problem\nprint(calculate_attendance_difference(df))","table":"Name: Tickets sold\nUnit: people\nContent:\nDay | Number of tickets\nFriday | 2,136\nSaturday | 6,578\nSunday | 8,187\nMonday | 5,009"}
{"level":6,"answer":9.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of numbers and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the numbers.\n    The DataFrame should have two columns: 'Day' and 'Number of cartwheels'.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of cartwheels']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of cartwheels': [7, 10, 10, 8, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"A gymnast jotted down the number of cartwheels she did each day. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of numbers and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the numbers.\n    The DataFrame should have two columns: 'Day' and 'Number of cartwheels'.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of cartwheels']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of cartwheels': [7, 10, 10, 8, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Doing cartwheels\nUnit: None\nContent:\nDay | Number of cartwheels\nTuesday | 7\nWednesday | 10\nThursday | 10\nFriday | 8\nSaturday | 9"}
{"level":5,"answer":15.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of numbers and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing a column of numbers.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers from the DataFrame\n    numbers = df['Number of blocks']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Miles', 'Tisha', 'Patrick', 'Lucy', 'Darnel', 'Olivia', 'Norma'],\n    'Number of blocks': [20, 12, 11, 14, 20, 15, 15]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"Some students compared how many blocks they live from school. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of numbers and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing a column of numbers.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers from the DataFrame\n    numbers = df['Number of blocks']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Miles', 'Tisha', 'Patrick', 'Lucy', 'Darnel', 'Olivia', 'Norma'],\n    'Number of blocks': [20, 12, 11, 14, 20, 15, 15]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Blocks from school\nUnit: None\nContent:\nName | Number of blocks\nMiles | 20\nTisha | 12\nPatrick | 11\nLucy | 14\nDarnel | 20\nOlivia | 15\nNorma | 15"}
{"level":7,"answer":-8.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of employees with health care benefits and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of employees with health care benefits for each year.\n    The DataFrame should have columns 'Year' and 'Employees'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_row = df[df['Year'] == start_year]\n    end_row = df[df['Year'] == end_year]\n    \n    # Get the number of employees for the start and end years\n    start_employees = start_row['Employees'].values[0]\n    end_employees = end_row['Employees'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_employees - start_employees) \/ start_employees * 100\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2008, 2009, 2010, 2011, 2012],\n    'Employees': [35, 39, 34, 40, 32]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2011, 2012))","question":"At Springtown Consulting, the head of human resources examined how the number of employees with health care benefits varied in response to policy changes. According to the table, what was the rate of change between 2011 and 2012?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of employees with health care benefits and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of employees with health care benefits for each year.\n    The DataFrame should have columns 'Year' and 'Employees'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_row = df[df['Year'] == start_year]\n    end_row = df[df['Year'] == end_year]\n    \n    # Get the number of employees for the start and end years\n    start_employees = start_row['Employees'].values[0]\n    end_employees = end_row['Employees'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_employees - start_employees) \/ start_employees * 100\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2008, 2009, 2010, 2011, 2012],\n    'Employees': [35, 39, 34, 40, 32]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2011, 2012))","table":"Name: Employees with health care benefits\nUnit: employees per year\nContent:\nYear | Employees\n2008 | 35\n2009 | 39\n2010 | 34\n2011 | 40\n2012 | 32"}
{"level":5,"answer":4.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of coin collections and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and numbers of coins for each person.\n    The dataframe should contain \"Name\" and \"Number of coins\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of coins\" column\n    min_value = df['Number of coins'].min()\n    max_value = df['Number of coins'].max()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Tara', 'Emily', 'Joel', 'Nicholas', 'Finn'],\n    'Number of coins': [45, 46, 44, 42, 45]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"Some friends discussed the sizes of their coin collections. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of coin collections and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and numbers of coins for each person.\n    The dataframe should contain \"Name\" and \"Number of coins\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of coins\" column\n    min_value = df['Number of coins'].min()\n    max_value = df['Number of coins'].max()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Tara', 'Emily', 'Joel', 'Nicholas', 'Finn'],\n    'Number of coins': [45, 46, 44, 42, 45]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Coin collections\nUnit: None\nContent:\nName | Number of coins\nTara | 45\nEmily | 46\nJoel | 44\nNicholas | 42\nFinn | 45"}
{"level":8,"answer":14.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of vacation days taken by Ronald and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the vacation days taken by Ronald with columns 'Year' and 'Vacation days'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_row = df[df['Year'] == start_year]\n    end_row = df[df['Year'] == end_year]\n    \n    # Get the vacation days for the start and end years\n    start_days = start_row['Vacation days'].values[0]\n    end_days = end_row['Vacation days'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_days - start_days) \/ (end_year - start_year)\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2016, 2017, 2018, 2019, 2020],\n    'Vacation days': [14, 28, 12, 15, 27]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2016, 2017))","question":"To figure out how many vacation days he had left to use, Ronald looked over his old calendars to figure out how many days of vacation he had taken each year. According to the table, what was the rate of change between 2016 and 2017?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of vacation days taken by Ronald and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the vacation days taken by Ronald with columns 'Year' and 'Vacation days'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_row = df[df['Year'] == start_year]\n    end_row = df[df['Year'] == end_year]\n    \n    # Get the vacation days for the start and end years\n    start_days = start_row['Vacation days'].values[0]\n    end_days = end_row['Vacation days'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_days - start_days) \/ (end_year - start_year)\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2016, 2017, 2018, 2019, 2020],\n    'Vacation days': [14, 28, 12, 15, 27]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2016, 2017))","table":"Name: Vacation days taken by Ronald\nUnit: vacation days per year\nContent:\nYear | Vacation days\n2016 | 14\n2017 | 28\n2018 | 12\n2019 | 15\n2020 | 27"}
{"level":7,"answer":18.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, month1, month2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average waiting time at the DMV and two months, and returns the rate of change between the two months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average waiting time at the DMV with columns 'Month' and 'Waiting time (minutes)'.\n    month1 (str): The first month for calculating the rate of change.\n    month2 (str): The second month for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two months.\n    \"\"\"\n    # Filter the DataFrame for the two months\n    month1_df = df[df['Month'] == month1]\n    month2_df = df[df['Month'] == month2]\n    \n    # Get the waiting time for each month\n    waiting_time1 = month1_df['Waiting time (minutes)'].values[0]\n    waiting_time2 = month2_df['Waiting time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (waiting_time2 - waiting_time1) \/ waiting_time1\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['March', 'April', 'May', 'June', 'July'],\n    'Waiting time (minutes)': [20, 10, 28, 25, 30]\n})\n\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'April', 'May'))","question":"An administrator at the Department of Motor Vehicles (DMV) tracked the average wait time from month to month. According to the table, what was the rate of change between April and May?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, month1, month2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average waiting time at the DMV and two months, and returns the rate of change between the two months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average waiting time at the DMV with columns 'Month' and 'Waiting time (minutes)'.\n    month1 (str): The first month for calculating the rate of change.\n    month2 (str): The second month for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two months.\n    \"\"\"\n    # Filter the DataFrame for the two months\n    month1_df = df[df['Month'] == month1]\n    month2_df = df[df['Month'] == month2]\n    \n    # Get the waiting time for each month\n    waiting_time1 = month1_df['Waiting time (minutes)'].values[0]\n    waiting_time2 = month2_df['Waiting time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (waiting_time2 - waiting_time1) \/ waiting_time1\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['March', 'April', 'May', 'June', 'July'],\n    'Waiting time (minutes)': [20, 10, 28, 25, 30]\n})\n\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'April', 'May'))","table":"Name: Average waiting time at the DMV\nUnit: minutes per month\nContent:\nMonth | Waiting time (minutes)\nMarch | 20\nApril | 10\nMay | 28\nJune | 25\nJuly | 30"}
{"level":8,"answer":11.0,"prediction":"import pandas as pd\n\ndef count_authors_with_more_than_5_stories(df):\n    \"\"\"\n    This function takes in a pandas dataframe of stories written by authors and returns the number of authors who wrote more than 5 stories.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of stories written by each author.\n    The dataframe should contain \"Stories written\" and \"Frequency\" columns.\n    Returns:\n    int: The number of authors who wrote more than 5 stories.\n    \"\"\"\n    # Filter the dataframe for authors who wrote more than 5 stories\n    filtered_df = df[df['Stories written'] > 5]\n    \n    # Count the number of authors\n    num_authors = len(filtered_df)\n    \n    return num_authors\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stories written': [1, 2, 3, 4, 5, 6],\n    'Frequency': [3, 9, 13, 0, 4, 11]\n})\n# Call the tool to solve the problem\nprint(count_authors_with_more_than_5_stories(df))","question":"A publisher invited authors to write stories for a special anthology. How many authors wrote more than 5 stories?","prediction_code":"import pandas as pd\n\ndef count_authors_with_more_than_5_stories(df):\n    \"\"\"\n    This function takes in a pandas dataframe of stories written by authors and returns the number of authors who wrote more than 5 stories.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of stories written by each author.\n    The dataframe should contain \"Stories written\" and \"Frequency\" columns.\n    Returns:\n    int: The number of authors who wrote more than 5 stories.\n    \"\"\"\n    # Filter the dataframe for authors who wrote more than 5 stories\n    filtered_df = df[df['Stories written'] > 5]\n    \n    # Count the number of authors\n    num_authors = len(filtered_df)\n    \n    return num_authors","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stories written': [1, 2, 3, 4, 5, 6],\n    'Frequency': [3, 9, 13, 0, 4, 11]\n})\n# Call the tool to solve the problem\nprint(count_authors_with_more_than_5_stories(df))","table":"Name: Writing stories\nUnit: None\nContent:\nStories written | Frequency\n1 | 3\n2 | 9\n3 | 13\n4 | 0\n5 | 4\n6 | 11"}
{"level":5,"answer":8.0,"prediction":"import pandas as pd\n\ndef count_necklaces_with_beads(df, min_beads, max_beads):\n    \"\"\"\n    This function takes in a pandas dataframe of beads per necklace, and returns the number of necklaces that have at least min_beads beads but fewer than max_beads beads.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of beads per necklace.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_beads (int): The minimum number of beads required for a necklace to be counted.\n    max_beads (int): The maximum number of beads allowed for a necklace to be counted.\n    Returns:\n    int: The number of necklaces that have at least min_beads beads but fewer than max_beads beads.\n    \"\"\"\n    # prepare a list to calculate beads in each necklace\n    beads = []\n    # calculate the total number of beads in each necklace\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            beads.append(stem * 10 + leaf[j])\n    # filter the necklaces where the total number of beads is greater than or equal to min_beads and less than max_beads\n    filtered = [bead for bead in beads if min_beads <= bead < max_beads]\n    # count the number of rows\n    num_necklaces = len(filtered)\n    return num_necklaces\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [6, 7, 8, 9],\n    'Leaf': [[2, 6, 7], [2, 4], [0, 1, 2, 3, 8], [0]]\n})\n# Call the tool to solve the problem\nprint(count_necklaces_with_beads(df, 69, 91))","question":"Tom counted all the beads in each necklace at the jewelry store where he works. How many necklaces had at least 69 beads but fewer than 91 beads?","prediction_code":"import pandas as pd\n\ndef count_necklaces_with_beads(df, min_beads, max_beads):\n    \"\"\"\n    This function takes in a pandas dataframe of beads per necklace, and returns the number of necklaces that have at least min_beads beads but fewer than max_beads beads.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of beads per necklace.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_beads (int): The minimum number of beads required for a necklace to be counted.\n    max_beads (int): The maximum number of beads allowed for a necklace to be counted.\n    Returns:\n    int: The number of necklaces that have at least min_beads beads but fewer than max_beads beads.\n    \"\"\"\n    # prepare a list to calculate beads in each necklace\n    beads = []\n    # calculate the total number of beads in each necklace\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            beads.append(stem * 10 + leaf[j])\n    # filter the necklaces where the total number of beads is greater than or equal to min_beads and less than max_beads\n    filtered = [bead for bead in beads if min_beads <= bead < max_beads]\n    # count the number of rows\n    num_necklaces = len(filtered)\n    return num_necklaces","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [6, 7, 8, 9],\n    'Leaf': [[2, 6, 7], [2, 4], [0, 1, 2, 3, 8], [0]]\n})\n# Call the tool to solve the problem\nprint(count_necklaces_with_beads(df, 69, 91))","table":"Name: Beads per necklace\nUnit: necklaces\nContent:\nStem | Leaf \n6 | 2, 6, 7\n7 | 2, 4\n8 | 0, 1, 2, 3, 8\n9 | 0"}
{"level":5,"answer":13.0,"prediction":"import pandas as pd\n\ndef get_donation_amount(df, cause, month):\n    \"\"\"\n    This function takes in a pandas DataFrame of donations received and returns the amount of money raised for a specific cause in a specific month.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the donations received with columns 'Cause', 'May', and 'June'.\n    cause (str): The name of the cause.\n    month (str): The name of the month.\n    Returns:\n    float: The amount of money raised for the specific cause in the specific month.\n    \"\"\"\n    # Filter the DataFrame for the specific cause and month\n    donation_df = df[(df['Cause'] == cause) & (df['Month'] == month)]\n    \n    # Get the donation amount\n    donation_amount = donation_df.iloc[0][month]\n    \n    return donation_amount\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Cause': ['Medical research', 'Animals', 'Hunger', 'Parks'],\n    'May': [16, 13, 12, 8],\n    'June': [8, 8, 10, 10]\n})\n\n# Call the tool to solve the problem\nprint(get_donation_amount(df, 'Animals', 'May'))","question":"A county agency recorded the money donated to several charitable causes over time. How much money was raised for animals in May?","prediction_code":"import pandas as pd\n\ndef get_donation_amount(df, cause, month):\n    \"\"\"\n    This function takes in a pandas DataFrame of donations received and returns the amount of money raised for a specific cause in a specific month.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the donations received with columns 'Cause', 'May', and 'June'.\n    cause (str): The name of the cause.\n    month (str): The name of the month.\n    Returns:\n    float: The amount of money raised for the specific cause in the specific month.\n    \"\"\"\n    # Filter the DataFrame for the specific cause and month\n    donation_df = df[(df['Cause'] == cause) & (df['Month'] == month)]\n    \n    # Get the donation amount\n    donation_amount = donation_df.iloc[0][month]\n    \n    return donation_amount","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Cause': ['Medical research', 'Animals', 'Hunger', 'Parks'],\n    'May': [16, 13, 12, 8],\n    'June': [8, 8, 10, 10]\n})\n\n# Call the tool to solve the problem\nprint(get_donation_amount(df, 'Animals', 'May'))","table":"Name: Donations received\nUnit: $\nContent:\nCause | May | June\nMedical research | $16 | $8\nAnimals | $13 | $8\nHunger | $12 | $10\nParks | $8 | $10"}
{"level":6,"answer":2.9,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its weight.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information for different items.\n    item (str): The name of the item.\n    weight (float): The weight of the item in pounds.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price per pound for the item\n    price_per_pound = item_df['Unit'].values[0]\n    \n    # Calculate the total cost based on the weight\n    total_cost = price_per_pound * weight\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['apple muffin mix', 'bran muffin mix', 'blueberry muffin mix', 'cranberry muffin mix'],\n    'Unit': [1, 1, 1, 2]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'apple muffin mix', 2 + 9\/10))","question":"Wayne wants to buy 2+9\/10 pounds of apple muffin mix. How much will he spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its weight.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information for different items.\n    item (str): The name of the item.\n    weight (float): The weight of the item in pounds.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price per pound for the item\n    price_per_pound = item_df['Unit'].values[0]\n    \n    # Calculate the total cost based on the weight\n    total_cost = price_per_pound * weight\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['apple muffin mix', 'bran muffin mix', 'blueberry muffin mix', 'cranberry muffin mix'],\n    'Unit': [1, 1, 1, 2]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'apple muffin mix', 2 + 9\/10))","table":"Name: None\nUnit: $\nContent:\napple muffin mix | $1 per pound\nbran muffin mix | $1 per pound\nblueberry muffin mix | $1 per pound\ncranberry muffin mix | $2 per pound"}
{"level":8,"answer":2.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of games won by the Lakeside baseball team and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of games won per year with columns 'Year' and 'Games won'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_games_won = df[df['Year'] == start_year]['Games won'].values[0]\n    end_games_won = df[df['Year'] == end_year]['Games won'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_games_won - start_games_won) \/ (end_year - start_year)\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2013, 2014, 2015, 2016, 2017],\n    'Games won': [46, 50, 40, 47, 49]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2016, 2017))","question":"Fans of the Lakeside baseball team compared the number of games won by their team each year. According to the table, what was the rate of change between 2016 and 2017?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of games won by the Lakeside baseball team and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of games won per year with columns 'Year' and 'Games won'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_games_won = df[df['Year'] == start_year]['Games won'].values[0]\n    end_games_won = df[df['Year'] == end_year]['Games won'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_games_won - start_games_won) \/ (end_year - start_year)\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2013, 2014, 2015, 2016, 2017],\n    'Games won': [46, 50, 40, 47, 49]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2016, 2017))","table":"Name: Games won by the Lakeside baseball team\nUnit: games per year\nContent:\nYear | Games won\n2013 | 46\n2014 | 50\n2015 | 40\n2016 | 47\n2017 | 49"}
{"level":6,"answer":4.5,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on the quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the item names and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['breaded chicken', 'roast chicken', 'baked chicken', 'curried chicken', 'fried chicken', 'sauteed chicken'],\n    'Price': [7, 3, 9, 7, 10, 6]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'baked chicken', 0.5))","question":"Julia bought 1\/2 of a pound of baked chicken. How much did she spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on the quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the item names and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['breaded chicken', 'roast chicken', 'baked chicken', 'curried chicken', 'fried chicken', 'sauteed chicken'],\n    'Price': [7, 3, 9, 7, 10, 6]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'baked chicken', 0.5))","table":"Name: None\nUnit: $\nContent:\nbreaded chicken | $7\/pound\nroast chicken | $3\/pound\nbaked chicken | $9\/pound\ncurried chicken | $7\/pound\nfried chicken | $10\/pound\nsauteed chicken | $6\/pound"}
{"level":7,"answer":27.0,"prediction":"import pandas as pd\n\ndef count_people_with_at_least_2_bananas(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of bananas eaten by people and returns the number of people who ate at least 2 bananas.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of bananas eaten by people.\n    The DataFrame should contain \"Bananas eaten\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who ate at least 2 bananas.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of bananas eaten is greater than or equal to 2\n    filtered_df = df[df['Bananas eaten'] >= 2]\n    \n    # Calculate the total number of people who ate at least 2 bananas\n    num_people = filtered_df['Frequency'].sum()\n    \n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bananas eaten': [0, 1, 2, 3, 4],\n    'Frequency': [13, 3, 10, 6, 11]\n})\n# Call the tool to solve the problem\nprint(count_people_with_at_least_2_bananas(df))","question":"A chef kept track of the number of bananas people ate last week in her cafeteria. How many people ate at least 2 bananas last week?","prediction_code":"import pandas as pd\n\ndef count_people_with_at_least_2_bananas(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of bananas eaten by people and returns the number of people who ate at least 2 bananas.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of bananas eaten by people.\n    The DataFrame should contain \"Bananas eaten\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who ate at least 2 bananas.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of bananas eaten is greater than or equal to 2\n    filtered_df = df[df['Bananas eaten'] >= 2]\n    \n    # Calculate the total number of people who ate at least 2 bananas\n    num_people = filtered_df['Frequency'].sum()\n    \n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bananas eaten': [0, 1, 2, 3, 4],\n    'Frequency': [13, 3, 10, 6, 11]\n})\n# Call the tool to solve the problem\nprint(count_people_with_at_least_2_bananas(df))","table":"Name: Eating bananas last week\nUnit: None\nContent:\nBananas eaten | Frequency\n0 | 13\n1 | 3\n2 | 10\n3 | 6\n4 | 11"}
{"level":1,"answer":25.0,"prediction":"import pandas as pd\n\ndef calculate_total_basketballs(df, num_lockers):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of basketballs per locker and the number of lockers, and returns the total number of basketballs in the given number of lockers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of basketballs per locker with columns 'Number of lockers' and 'Number of basketballs'.\n    num_lockers (int): The number of lockers to calculate the total number of basketballs for.\n    Returns:\n    int: The total number of basketballs in the given number of lockers.\n    \"\"\"\n    # Filter the DataFrame for the given number of lockers\n    filtered_df = df[df['Number of lockers'] <= num_lockers]\n    \n    # Calculate the total number of basketballs\n    total_basketballs = filtered_df['Number of basketballs'].sum()\n    \n    return total_basketballs\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of lockers': [1, 2, 3, 4, 5],\n    'Number of basketballs': [5, 10, 15, 20, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_basketballs(df, 5))","question":"Each locker has 5 basketballs. How many basketballs are in 5 lockers?","prediction_code":"import pandas as pd\n\ndef calculate_total_basketballs(df, num_lockers):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of basketballs per locker and the number of lockers, and returns the total number of basketballs in the given number of lockers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of basketballs per locker with columns 'Number of lockers' and 'Number of basketballs'.\n    num_lockers (int): The number of lockers to calculate the total number of basketballs for.\n    Returns:\n    int: The total number of basketballs in the given number of lockers.\n    \"\"\"\n    # Filter the DataFrame for the given number of lockers\n    filtered_df = df[df['Number of lockers'] <= num_lockers]\n    \n    # Calculate the total number of basketballs\n    total_basketballs = filtered_df['Number of basketballs'].sum()\n    \n    return total_basketballs","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of lockers': [1, 2, 3, 4, 5],\n    'Number of basketballs': [5, 10, 15, 20, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_basketballs(df, 5))","table":"Name: None\nUnit: basketballs\nContent:\nNumber of lockers | Number of basketballs\n1 | 5\n2 | 10\n3 | 15\n4 | 20\n5 | ?"}
{"level":8,"answer":31.0,"prediction":"import pandas as pd\n\ndef count_people_spun_less_than_4(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of times visitors spun numbers 1 through 6, and returns the number of people who spun a number less than 4.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of times each number was spun.\n    The DataFrame should contain \"Number spun\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who spun a number less than 4.\n    \"\"\"\n    # Filter the DataFrame for numbers less than 4\n    filtered_df = df[df['Number spun'] < 4]\n    \n    # Sum the frequencies of the filtered numbers\n    num_people = filtered_df['Frequency'].sum()\n    \n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number spun': [1, 2, 3, 4, 5, 6],\n    'Frequency': [2, 14, 15, 12, 3, 6]\n})\n# Call the tool to solve the problem\nprint(count_people_spun_less_than_4(df))","question":"At a school carnival, a curious student volunteer counted the number of times visitors to her booth spun the numbers 1 through 6. How many people spun a number less than 4?","prediction_code":"import pandas as pd\n\ndef count_people_spun_less_than_4(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of times visitors spun numbers 1 through 6, and returns the number of people who spun a number less than 4.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of times each number was spun.\n    The DataFrame should contain \"Number spun\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who spun a number less than 4.\n    \"\"\"\n    # Filter the DataFrame for numbers less than 4\n    filtered_df = df[df['Number spun'] < 4]\n    \n    # Sum the frequencies of the filtered numbers\n    num_people = filtered_df['Frequency'].sum()\n    \n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number spun': [1, 2, 3, 4, 5, 6],\n    'Frequency': [2, 14, 15, 12, 3, 6]\n})\n# Call the tool to solve the problem\nprint(count_people_spun_less_than_4(df))","table":"Name: Spinning a wheel numbered 1 through 6\nUnit: None\nContent:\nNumber spun | Frequency\n1 | 2\n2 | 14\n3 | 15\n4 | 12\n5 | 3\n6 | 6"}
{"level":7,"answer":2.0,"prediction":"import pandas as pd\n\ndef calculate_constant_of_proportionality(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table with a proportional relationship between x and y, and returns the constant of proportionality.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the values of x and y with columns 'x' and 'y'.\n    Returns:\n    float: The constant of proportionality.\n    \"\"\"\n    # Calculate the ratio of y to x for each row\n    df['ratio'] = df['y'] \/ df['x']\n    \n    # Take the mean of the ratios to get the constant of proportionality\n    constant_of_proportionality = df['ratio'].mean()\n    \n    return constant_of_proportionality\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'x': [4, 5, 9, 10],\n    'y': [8, 10, 18, 20]\n})\n# Call the tool to solve the problem\nprint(calculate_constant_of_proportionality(df))","question":"Ellen loves to wear socks with crazy patterns. She finds a great deal for these kinds of socks at her favorite store, Rock Those Socks. There is a proportional relationship between the number of pairs of socks that Ellen buys, x, and the total cost (in dollars), y. What is the constant of proportionality? Write your answer as a whole number or decimal.","prediction_code":"import pandas as pd\n\ndef calculate_constant_of_proportionality(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table with a proportional relationship between x and y, and returns the constant of proportionality.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the values of x and y with columns 'x' and 'y'.\n    Returns:\n    float: The constant of proportionality.\n    \"\"\"\n    # Calculate the ratio of y to x for each row\n    df['ratio'] = df['y'] \/ df['x']\n    \n    # Take the mean of the ratios to get the constant of proportionality\n    constant_of_proportionality = df['ratio'].mean()\n    \n    return constant_of_proportionality","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'x': [4, 5, 9, 10],\n    'y': [8, 10, 18, 20]\n})\n# Call the tool to solve the problem\nprint(calculate_constant_of_proportionality(df))","table":"Name: x (pairs of socks) y (dollars)\nUnit: dollars per pair of socks\nContent:\n4 | $8\n5 | $10\n9 | $18\n10 | $20"}
{"level":5,"answer":8.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of kilometers walked per day and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of kilometers walked per day.\n    The dataframe should contain \"Day\" and \"Kilometers\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Kilometers\" column\n    min_value = df['Kilometers'].min()\n    max_value = df['Kilometers'].max()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Kilometers': [4, 4, 10, 2, 7, 3, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"Manny kept track of how many kilometers he walked during the past 7 days. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of kilometers walked per day and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of kilometers walked per day.\n    The dataframe should contain \"Day\" and \"Kilometers\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Kilometers\" column\n    min_value = df['Kilometers'].min()\n    max_value = df['Kilometers'].max()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Kilometers': [4, 4, 10, 2, 7, 3, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Kilometers walked\nUnit: None\nContent:\nDay | Kilometers\nSunday | 4\nMonday | 4\nTuesday | 10\nWednesday | 2\nThursday | 7\nFriday | 3\nSaturday | 7"}
{"level":8,"answer":6.0,"prediction":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of baseballs hit per day and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of baseballs hit per day.\n    The dataframe should contain \"Day\" and \"Number of baseballs\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Number of baseballs\" column\n    mean = df['Number of baseballs'].mean()\n    \n    return mean\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Number of baseballs': [3, 6, 7, 8, 8, 4]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","question":"A baseball player paid attention to how many baseballs he hit in practice each day. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of baseballs hit per day and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of baseballs hit per day.\n    The dataframe should contain \"Day\" and \"Number of baseballs\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Number of baseballs\" column\n    mean = df['Number of baseballs'].mean()\n    \n    return mean","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Number of baseballs': [3, 6, 7, 8, 8, 4]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","table":"Name: Baseballs hit\nUnit: None\nContent:\nDay | Number of baseballs\nThursday | 3\nFriday | 6\nSaturday | 7\nSunday | 8\nMonday | 8\nTuesday | 4"}
{"level":5,"answer":55.0,"prediction":"import pandas as pd\n\ndef count_cars_in_stock(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of cars in stock and returns the total number of cars.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the color and frequency of cars in stock.\n    The DataFrame should have columns 'Color' and 'Frequency'.\n    Returns:\n    int: The total number of cars in stock.\n    \"\"\"\n    # Sum the frequencies of all cars\n    total_cars = df['Frequency'].sum()\n    \n    return total_cars\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Color': ['white', 'black', 'red', 'silver'],\n    'Frequency': [13, 14, 5, 23]\n})\n# Call the tool to solve the problem\nprint(count_cars_in_stock(df))","question":"Francesca owns a used car dealership. The frequency chart shows the cars she has in stock. How many cars does Francesca have in stock?","prediction_code":"import pandas as pd\n\ndef count_cars_in_stock(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of cars in stock and returns the total number of cars.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the color and frequency of cars in stock.\n    The DataFrame should have columns 'Color' and 'Frequency'.\n    Returns:\n    int: The total number of cars in stock.\n    \"\"\"\n    # Sum the frequencies of all cars\n    total_cars = df['Frequency'].sum()\n    \n    return total_cars","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Color': ['white', 'black', 'red', 'silver'],\n    'Frequency': [13, 14, 5, 23]\n})\n# Call the tool to solve the problem\nprint(count_cars_in_stock(df))","table":"Name: Cars in stock\nUnit: cars\nContent:\nColor | Frequency\nwhite | 13\nblack | 14\nred | 5\nsilver | 23"}
{"level":6,"answer":13.0,"prediction":"import pandas as pd\n\ndef count_children_with_30_pounds(df):\n    \"\"\"\n    This function takes in a pandas dataframe of children's weights and returns the number of children who weigh at least 30 pounds.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the weights of children.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of children who weigh at least 30 pounds.\n    \"\"\"\n    # prepare a list to calculate weights of each child\n    weights = []\n    # calculate the total weight of each child\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            weights.append(stem * 10 + leaf[j])\n    # filter the children who weigh at least 30 pounds\n    filtered = [weight for weight in weights if weight >= 30]\n    # count the number of children\n    num_children = len(filtered)\n    return num_children\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[1, 6], [], [0, 2, 6, 9, 9, 9], [1, 2, 2, 4, 7, 7, 7]]\n})\n# Call the tool to solve the problem\nprint(count_children_with_30_pounds(df))","question":"As part of a statistics project, a math class weighed all the children who were willing to participate. How many children weighed at least 30 pounds?","prediction_code":"import pandas as pd\n\ndef count_children_with_30_pounds(df):\n    \"\"\"\n    This function takes in a pandas dataframe of children's weights and returns the number of children who weigh at least 30 pounds.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the weights of children.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of children who weigh at least 30 pounds.\n    \"\"\"\n    # prepare a list to calculate weights of each child\n    weights = []\n    # calculate the total weight of each child\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            weights.append(stem * 10 + leaf[j])\n    # filter the children who weigh at least 30 pounds\n    filtered = [weight for weight in weights if weight >= 30]\n    # count the number of children\n    num_children = len(filtered)\n    return num_children","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[1, 6], [], [0, 2, 6, 9, 9, 9], [1, 2, 2, 4, 7, 7, 7]]\n})\n# Call the tool to solve the problem\nprint(count_children_with_30_pounds(df))","table":"Name: Children's weights (lbs)\nUnit: children\nContent:\nStem | Leaf \n1 | 1, 6\n2 | \n3 | 0, 2, 6, 9, 9, 9\n4 | 1, 2, 2, 4, 7, 7, 7"}
{"level":1,"answer":8.0,"prediction":"import pandas as pd\n\ndef calculate_buttons_on_shirts(df, num_shirts):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of buttons per shirt and the number of shirts, and returns the total number of buttons on the given number of shirts.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of buttons per shirt.\n    The dataframe should contain \"Number of shirts\" and \"Number of buttons\" columns.\n    num_shirts (int): The number of shirts to calculate the total number of buttons for.\n    Returns:\n    int: The total number of buttons on the given number of shirts.\n    \"\"\"\n    # Filter the DataFrame for the given number of shirts\n    df_filtered = df[df['Number of shirts'] == num_shirts]\n    \n    # Get the number of buttons for the given number of shirts\n    num_buttons = df_filtered['Number of buttons'].values[0]\n    \n    return num_buttons\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of shirts': [1, 2, 3, 4],\n    'Number of buttons': [2, 4, 6, '?']\n})\n\n# Call the tool to solve the problem\nnum_buttons = calculate_buttons_on_shirts(df, 4)\n\n# Print out the answer\nprint(num_buttons)","question":"Each shirt has 2 buttons. How many buttons are on 4 shirts?","prediction_code":"import pandas as pd\n\ndef calculate_buttons_on_shirts(df, num_shirts):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of buttons per shirt and the number of shirts, and returns the total number of buttons on the given number of shirts.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of buttons per shirt.\n    The dataframe should contain \"Number of shirts\" and \"Number of buttons\" columns.\n    num_shirts (int): The number of shirts to calculate the total number of buttons for.\n    Returns:\n    int: The total number of buttons on the given number of shirts.\n    \"\"\"\n    # Filter the DataFrame for the given number of shirts\n    df_filtered = df[df['Number of shirts'] == num_shirts]\n    \n    # Get the number of buttons for the given number of shirts\n    num_buttons = df_filtered['Number of buttons'].values[0]\n    \n    return num_buttons","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of shirts': [1, 2, 3, 4],\n    'Number of buttons': [2, 4, 6, '?']\n})\n\n# Call the tool to solve the problem\nnum_buttons = calculate_buttons_on_shirts(df, 4)\n\n# Print out the answer\nprint(num_buttons)","table":"Name: None\nUnit: buttons\nContent:\nNumber of shirts | Number of buttons\n1 | 2\n2 | 4\n3 | 6\n4 | ?"}
{"level":7,"answer":-9.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_day, end_day):\n    \"\"\"\n    This function takes in a pandas DataFrame of voicemail messages per day and calculates the rate of change between two given days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of voicemail messages per day.\n    The DataFrame should have columns 'Day' and 'Voicemail messages'.\n    start_day (str): The starting day for calculating the rate of change.\n    end_day (str): The ending day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given days.\n    \"\"\"\n    # Filter the DataFrame for the start and end days\n    start_df = df[df['Day'] == start_day]\n    end_df = df[df['Day'] == end_day]\n    \n    # Get the number of voicemail messages for the start and end days\n    start_messages = start_df['Voicemail messages'].values[0]\n    end_messages = end_df['Voicemail messages'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_messages - start_messages) \/ (df.index.get_loc(end_df.index[0]) - df.index.get_loc(start_df.index[0]))\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Voicemail messages': [22, 13, 12, 13, 12]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Monday', 'Tuesday'))","question":"Worried about going over her storage limit, Erica monitored the number of undeleted voicemail messages stored on her phone each day. According to the table, what was the rate of change between Monday and Tuesday?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_day, end_day):\n    \"\"\"\n    This function takes in a pandas DataFrame of voicemail messages per day and calculates the rate of change between two given days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of voicemail messages per day.\n    The DataFrame should have columns 'Day' and 'Voicemail messages'.\n    start_day (str): The starting day for calculating the rate of change.\n    end_day (str): The ending day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given days.\n    \"\"\"\n    # Filter the DataFrame for the start and end days\n    start_df = df[df['Day'] == start_day]\n    end_df = df[df['Day'] == end_day]\n    \n    # Get the number of voicemail messages for the start and end days\n    start_messages = start_df['Voicemail messages'].values[0]\n    end_messages = end_df['Voicemail messages'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_messages - start_messages) \/ (df.index.get_loc(end_df.index[0]) - df.index.get_loc(start_df.index[0]))\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Voicemail messages': [22, 13, 12, 13, 12]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Monday', 'Tuesday'))","table":"Name: Voicemail messages on Erica's phone\nUnit: voicemail messages per day\nContent:\nDay | Voicemail messages\nMonday | 22\nTuesday | 13\nWednesday | 12\nThursday | 13\nFriday | 12"}
{"level":8,"answer":7.0,"prediction":"import pandas as pd\n\ndef count_teams_with_50_to_70_members(df):\n    \"\"\"\n    This function takes in a pandas dataframe of track team sizes and returns the number of teams that have at least 50 members but fewer than 70 members.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the sizes of track teams.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of teams that have at least 50 members but fewer than 70 members.\n    \"\"\"\n    # prepare a list to calculate the size of each team\n    team_sizes = []\n    # calculate the size of each team\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            team_sizes.append(stem * 10 + leaf[j])\n    # filter the teams where the size is greater than or equal to 50 and less than 70\n    filtered = [size for size in team_sizes if 50 <= size < 70]\n    # count the number of teams\n    num_teams = len(filtered)\n    return num_teams\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[4], [3, 9], [0, 5], [1, 6, 9], [4, 7, 7, 8], [1, 3, 9], [1, 2, 4, 9], [2, 3, 4, 8, 9, 9]]\n})\n# Call the tool to solve the problem\nprint(count_teams_with_50_to_70_members(df))","question":"Mr. Stanley, a track coach, recorded the sizes of all the nearby track teams. How many teams have at least 50 members but fewer than 70 members?","prediction_code":"import pandas as pd\n\ndef count_teams_with_50_to_70_members(df):\n    \"\"\"\n    This function takes in a pandas dataframe of track team sizes and returns the number of teams that have at least 50 members but fewer than 70 members.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the sizes of track teams.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of teams that have at least 50 members but fewer than 70 members.\n    \"\"\"\n    # prepare a list to calculate the size of each team\n    team_sizes = []\n    # calculate the size of each team\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            team_sizes.append(stem * 10 + leaf[j])\n    # filter the teams where the size is greater than or equal to 50 and less than 70\n    filtered = [size for size in team_sizes if 50 <= size < 70]\n    # count the number of teams\n    num_teams = len(filtered)\n    return num_teams","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[4], [3, 9], [0, 5], [1, 6, 9], [4, 7, 7, 8], [1, 3, 9], [1, 2, 4, 9], [2, 3, 4, 8, 9, 9]]\n})\n# Call the tool to solve the problem\nprint(count_teams_with_50_to_70_members(df))","table":"Name: Track team sizes (number of members)\nUnit: teams\nContent:\nStem | Leaf \n1 | 4\n2 | 3, 9\n3 | 0, 5\n4 | 1, 6, 9\n5 | 4, 7, 7, 8\n6 | 1, 3, 9\n7 | 1, 2, 4, 9\n8 | 2, 3, 4, 8, 9, 9"}
{"level":8,"answer":1842.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of buying a certain quantity of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item to be purchased.\n    quantity (int): The number of items to be purchased.\n    Returns:\n    float: The total cost of buying the specified quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['video game system', 'laptop computer', 'big screen TV', 'portable DVD player', 'cell phone', 'digital camera'],\n    'Price': [469, 614, 702, 359, 329, 538]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'laptop computer', 3))","question":"How much money does Chloe need to buy 3 laptop computers?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of buying a certain quantity of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item to be purchased.\n    quantity (int): The number of items to be purchased.\n    Returns:\n    float: The total cost of buying the specified quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['video game system', 'laptop computer', 'big screen TV', 'portable DVD player', 'cell phone', 'digital camera'],\n    'Price': [469, 614, 702, 359, 329, 538]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'laptop computer', 3))","table":"Name: None\nUnit: $\nContent:\nvideo game system | $469\nlaptop computer | $614\nbig screen TV | $702\nportable DVD player | $359\ncell phone | $329\ndigital camera | $538"}
{"level":4,"answer":8.0,"prediction":"import pandas as pd\n\ndef count_bags_with_red_gumdrops(df, min_gumdrops, max_gumdrops):\n    \"\"\"\n    This function takes in a pandas dataframe of red gumdrops per bag, and returns the number of bags that have at least min_gumdrops red gumdrops but less than max_gumdrops red gumdrops.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of red gumdrops per bag.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_gumdrops (int): The minimum number of red gumdrops per bag.\n    max_gumdrops (int): The maximum number of red gumdrops per bag.\n    Returns:\n    int: The number of bags that have at least min_gumdrops red gumdrops but less than max_gumdrops red gumdrops.\n    \"\"\"\n    # prepare a list to calculate gumdrops in each bag\n    gumdrops = []\n    # calculate the total number of red gumdrops in each bag\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            gumdrops.append(stem * 10 + leaf[j])\n    # filter the bags where the total number of red gumdrops is within the specified range\n    filtered = [gumdrop for gumdrop in gumdrops if min_gumdrops <= gumdrop < max_gumdrops]\n    # count the number of rows\n    num_bags = len(filtered)\n    return num_bags\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[2, 7], [8], [2, 9], [6, 7, 7], [], [6, 6], [], [0]]\n})\n# Call the tool to solve the problem\nprint(count_bags_with_red_gumdrops(df, 30, 90))","question":"A machine dispensed red gumdrops into bags of various sizes. How many bags had at least 30 red gumdrops but less than 90 red gumdrops?","prediction_code":"import pandas as pd\n\ndef count_bags_with_red_gumdrops(df, min_gumdrops, max_gumdrops):\n    \"\"\"\n    This function takes in a pandas dataframe of red gumdrops per bag, and returns the number of bags that have at least min_gumdrops red gumdrops but less than max_gumdrops red gumdrops.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of red gumdrops per bag.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_gumdrops (int): The minimum number of red gumdrops per bag.\n    max_gumdrops (int): The maximum number of red gumdrops per bag.\n    Returns:\n    int: The number of bags that have at least min_gumdrops red gumdrops but less than max_gumdrops red gumdrops.\n    \"\"\"\n    # prepare a list to calculate gumdrops in each bag\n    gumdrops = []\n    # calculate the total number of red gumdrops in each bag\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            gumdrops.append(stem * 10 + leaf[j])\n    # filter the bags where the total number of red gumdrops is within the specified range\n    filtered = [gumdrop for gumdrop in gumdrops if min_gumdrops <= gumdrop < max_gumdrops]\n    # count the number of rows\n    num_bags = len(filtered)\n    return num_bags","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[2, 7], [8], [2, 9], [6, 7, 7], [], [6, 6], [], [0]]\n})\n# Call the tool to solve the problem\nprint(count_bags_with_red_gumdrops(df, 30, 90))","table":"Name: Red gumdrops per bag\nUnit: None\nContent:\nStem | Leaf \n2 | 2, 7\n3 | 8\n4 | 2, 9\n5 | 6, 7, 7\n6 | \n7 | 6, 6\n8 | \n9 | 0"}
{"level":4,"answer":35.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(table, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of buying two specific items.\n    Args:\n    table (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The total cost of buying the two items.\n    \"\"\"\n    # Filter the DataFrame for the specific items\n    item1_df = table[table['Name'] == item1]\n    item2_df = table[table['Name'] == item2]\n    \n    # Get the prices of the items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the total cost\n    total_cost = item1_price + item2_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['math book', 'poetry book', 'picture book', 'mystery novel'],\n    'Price': [18, 17, 10, 25]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'picture book', 'mystery novel'))","question":"How much money does Barry need to buy a picture book and a mystery novel?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(table, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of buying two specific items.\n    Args:\n    table (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The total cost of buying the two items.\n    \"\"\"\n    # Filter the DataFrame for the specific items\n    item1_df = table[table['Name'] == item1]\n    item2_df = table[table['Name'] == item2]\n    \n    # Get the prices of the items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the total cost\n    total_cost = item1_price + item2_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['math book', 'poetry book', 'picture book', 'mystery novel'],\n    'Price': [18, 17, 10, 25]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'picture book', 'mystery novel'))","table":"Name: None\nUnit: $\nContent:\nmath book | $18\npoetry book | $17\npicture book | $10\nmystery novel | $25"}
{"level":7,"answer":46.0,"prediction":"import pandas as pd\n\ndef count_members(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of seeds planted in the garden and returns the total number of members.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of seeds planted and the corresponding frequency.\n    The DataFrame should contain \"Seeds planted\" and \"Frequency\" columns.\n    Returns:\n    int: The total number of members.\n    \"\"\"\n    # Sum the frequencies to get the total number of members\n    total_members = df['Frequency'].sum()\n    \n    return total_members\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Seeds planted': [0, 1, 2, 3],\n    'Frequency': [20, 13, 6, 7]\n})\n# Call the tool to solve the problem\nprint(count_members(df))","question":"For Earth Day, Dover High's environmental club tracked the number of seeds planted by its members. How many members are there in all?","prediction_code":"import pandas as pd\n\ndef count_members(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of seeds planted in the garden and returns the total number of members.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of seeds planted and the corresponding frequency.\n    The DataFrame should contain \"Seeds planted\" and \"Frequency\" columns.\n    Returns:\n    int: The total number of members.\n    \"\"\"\n    # Sum the frequencies to get the total number of members\n    total_members = df['Frequency'].sum()\n    \n    return total_members","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Seeds planted': [0, 1, 2, 3],\n    'Frequency': [20, 13, 6, 7]\n})\n# Call the tool to solve the problem\nprint(count_members(df))","table":"Name: Planting seeds in the garden\nUnit: None\nContent:\nSeeds planted | Frequency\n0 | 20\n1 | 13\n2 | 6\n3 | 7"}
{"level":1,"answer":15.0,"prediction":"import pandas as pd\n\ndef calculate_total_balloons(df, num_bunches):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of balloons per bunch and the number of bunches, and returns the total number of balloons.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of balloons per bunch.\n    The dataframe should contain \"Number of bunches\" and \"Number of balloons\" columns.\n    num_bunches (int): The number of bunches.\n    Returns:\n    int: The total number of balloons.\n    \"\"\"\n    # Filter the DataFrame for the specific number of bunches\n    bunch_df = df[df['Number of bunches'] == num_bunches]\n    \n    # Get the number of balloons from the filtered DataFrame\n    num_balloons = bunch_df['Number of balloons'].values[0]\n    \n    return num_balloons\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of bunches': [1, 2, 3],\n    'Number of balloons': [5, 10, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_balloons(df, 3))","question":"Each bunch has 5 balloons. How many balloons are in 3 bunches?","prediction_code":"import pandas as pd\n\ndef calculate_total_balloons(df, num_bunches):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of balloons per bunch and the number of bunches, and returns the total number of balloons.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of balloons per bunch.\n    The dataframe should contain \"Number of bunches\" and \"Number of balloons\" columns.\n    num_bunches (int): The number of bunches.\n    Returns:\n    int: The total number of balloons.\n    \"\"\"\n    # Filter the DataFrame for the specific number of bunches\n    bunch_df = df[df['Number of bunches'] == num_bunches]\n    \n    # Get the number of balloons from the filtered DataFrame\n    num_balloons = bunch_df['Number of balloons'].values[0]\n    \n    return num_balloons","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of bunches': [1, 2, 3],\n    'Number of balloons': [5, 10, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_balloons(df, 3))","table":"Name: None\nUnit: balloons\nContent:\nNumber of bunches | Number of balloons\n1 | 5\n2 | 10\n3 | ?"}
{"level":6,"answer":90.0,"prediction":"import pandas as pd\n\ndef find_largest_number_of_broken_tiles(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of broken tiles per shipment and returns the largest number of broken tiles.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken tiles per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of broken tiles.\n    \"\"\"\n    # prepare a list to store all broken tiles\n    broken_tiles = []\n    \n    # iterate through each row of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # iterate through each leaf value in the row\n        for j in range(len(leaf)):\n            broken_tiles.append(stem * 10 + leaf[j])\n    \n    # find the largest number of broken tiles\n    largest_number = max(broken_tiles)\n    \n    return largest_number\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[1], [1, 7, 9], [2, 2, 7], [], [2, 8, 9], [2, 3, 3, 6, 7], [7], [0, 5, 7], [0]]\n})\n# Call the tool to solve the problem\nprint(find_largest_number_of_broken_tiles(df))","question":"Winchester Flooring tracked the number of broken tiles in each shipment it received last year. What is the largest number of broken tiles?","prediction_code":"import pandas as pd\n\ndef find_largest_number_of_broken_tiles(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of broken tiles per shipment and returns the largest number of broken tiles.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken tiles per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of broken tiles.\n    \"\"\"\n    # prepare a list to store all broken tiles\n    broken_tiles = []\n    \n    # iterate through each row of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # iterate through each leaf value in the row\n        for j in range(len(leaf)):\n            broken_tiles.append(stem * 10 + leaf[j])\n    \n    # find the largest number of broken tiles\n    largest_number = max(broken_tiles)\n    \n    return largest_number","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[1], [1, 7, 9], [2, 2, 7], [], [2, 8, 9], [2, 3, 3, 6, 7], [7], [0, 5, 7], [0]]\n})\n# Call the tool to solve the problem\nprint(find_largest_number_of_broken_tiles(df))","table":"Name: Broken tiles per shipment\nUnit: broken tiles\nContent:\nStem | Leaf \n1 | 1\n2 | 1, 7, 9\n3 | 2, 2, 7\n4 | \n5 | 2, 8, 9\n6 | 2, 3, 3, 6, 7\n7 | 7\n8 | 0, 5, 7\n9 | 0"}
{"level":7,"answer":27.0,"prediction":"import pandas as pd\n\ndef count_students_more_than_1_trip(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trips to the beach last summer and returns the number of students who went to the beach more than 1 time.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of trips and their frequencies.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who went to the beach more than 1 time.\n    \"\"\"\n    # Filter the DataFrame for trips with more than 1 frequency\n    filtered_df = df[df['Number of trips'] > 1]\n    \n    # Calculate the total number of students who went to the beach more than 1 time\n    num_students = filtered_df['Frequency'].sum()\n    \n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [0, 1, 2, 3],\n    'Frequency': [4, 0, 8, 19]\n})\n# Call the tool to solve the problem\nprint(count_students_more_than_1_trip(df))","question":"Mr. Livingston, the marine biology teacher, asked his students how many times they went to the beach last summer. How many students went to the beach more than 1 time?","prediction_code":"import pandas as pd\n\ndef count_students_more_than_1_trip(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trips to the beach last summer and returns the number of students who went to the beach more than 1 time.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of trips and their frequencies.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who went to the beach more than 1 time.\n    \"\"\"\n    # Filter the DataFrame for trips with more than 1 frequency\n    filtered_df = df[df['Number of trips'] > 1]\n    \n    # Calculate the total number of students who went to the beach more than 1 time\n    num_students = filtered_df['Frequency'].sum()\n    \n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [0, 1, 2, 3],\n    'Frequency': [4, 0, 8, 19]\n})\n# Call the tool to solve the problem\nprint(count_students_more_than_1_trip(df))","table":"Name: Trips to the beach last summer\nUnit: None\nContent:\nNumber of trips | Frequency\n0 | 4\n1 | 0\n2 | 8\n3 | 19"}
{"level":5,"answer":15.0,"prediction":"import pandas as pd\n\ndef count_bags_with_40_red_gumdrops(df):\n    \"\"\"\n    This function takes in a pandas dataframe of red gumdrops per bag, and returns the number of bags that have at least 40 red gumdrops.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of red gumdrops per bag.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of bags that have at least 40 red gumdrops.\n    \"\"\"\n    # prepare a list to calculate gumdrops in each bag\n    gumdrops = []\n    # calculate the total number of red gumdrops in each bag\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            gumdrops.append(stem * 10 + leaf[j])\n    # filter the bags where the total number of red gumdrops is greater than or equal to 40\n    filtered = [gumdrop for gumdrop in gumdrops if gumdrop >= 40]\n    # count the number of rows\n    num_bags = len(filtered)\n    return num_bags\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7],\n    'Leaf': [[0, 2, 6, 7], [0, 2, 6, 8, 8, 9], [0, 6], [6, 6, 8]]\n})\n# Call the tool to solve the problem\nprint(count_bags_with_40_red_gumdrops(df))","question":"A machine dispensed red gumdrops into bags of various sizes. How many bags had at least 40 red gumdrops?","prediction_code":"import pandas as pd\n\ndef count_bags_with_40_red_gumdrops(df):\n    \"\"\"\n    This function takes in a pandas dataframe of red gumdrops per bag, and returns the number of bags that have at least 40 red gumdrops.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of red gumdrops per bag.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of bags that have at least 40 red gumdrops.\n    \"\"\"\n    # prepare a list to calculate gumdrops in each bag\n    gumdrops = []\n    # calculate the total number of red gumdrops in each bag\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            gumdrops.append(stem * 10 + leaf[j])\n    # filter the bags where the total number of red gumdrops is greater than or equal to 40\n    filtered = [gumdrop for gumdrop in gumdrops if gumdrop >= 40]\n    # count the number of rows\n    num_bags = len(filtered)\n    return num_bags","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7],\n    'Leaf': [[0, 2, 6, 7], [0, 2, 6, 8, 8, 9], [0, 6], [6, 6, 8]]\n})\n# Call the tool to solve the problem\nprint(count_bags_with_40_red_gumdrops(df))","table":"Name: Red gumdrops per bag\nUnit: bags\nContent:\nStem | Leaf \n4 | 0, 2, 6, 7\n5 | 0, 2, 6, 8, 8, 9\n6 | 0, 6\n7 | 6, 6, 8"}
{"level":7,"answer":29.0,"prediction":"import pandas as pd\n\ndef count_children(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of flower pots painted by children and returns the total number of children.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of flower pots painted by each child.\n    The dataframe should contain \"Flower pots painted\" and \"Frequency\" columns.\n    Returns:\n    int: The total number of children.\n    \"\"\"\n    # Sum the frequencies to get the total number of children\n    total_children = df['Frequency'].sum()\n    \n    return total_children\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Flower pots painted': [0, 1, 2, 3],\n    'Frequency': [11, 1, 4, 13]\n})\n# Call the tool to solve the problem\nprint(count_children(df))","question":"The elementary school art teacher wrote down how many flower pots each child painted last week. How many children are there in all?","prediction_code":"import pandas as pd\n\ndef count_children(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of flower pots painted by children and returns the total number of children.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of flower pots painted by each child.\n    The dataframe should contain \"Flower pots painted\" and \"Frequency\" columns.\n    Returns:\n    int: The total number of children.\n    \"\"\"\n    # Sum the frequencies to get the total number of children\n    total_children = df['Frequency'].sum()\n    \n    return total_children","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Flower pots painted': [0, 1, 2, 3],\n    'Frequency': [11, 1, 4, 13]\n})\n# Call the tool to solve the problem\nprint(count_children(df))","table":"Name: Painting flower pots\nUnit: None\nContent:\nFlower pots painted | Frequency\n0 | 11\n1 | 1\n2 | 4\n3 | 13"}
{"level":4,"answer":1.76,"prediction":"import pandas as pd\n\ndef calculate_ride_cost_difference(df, ride1, ride2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ride cost table and two ride names, and returns the difference in cost between the two rides.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ride names and their costs with columns 'Ride' and 'Cost'.\n    ride1 (str): The name of the first ride.\n    ride2 (str): The name of the second ride.\n    Returns:\n    float: The difference in cost between the two rides.\n    \"\"\"\n    # Filter the DataFrame for the specific rides\n    ride1_df = df[df['Ride'] == ride1]\n    ride2_df = df[df['Ride'] == ride2]\n    \n    # Get the cost for each ride\n    ride1_cost = ride1_df['Cost'].values[0]\n    ride2_cost = ride2_df['Cost'].values[0]\n    \n    # Calculate the difference in cost\n    cost_difference = ride1_cost - ride2_cost\n    \n    return cost_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ride': ['ride on the Big Drop', 'ride on the Speedy Coaster', 'ride on the Bumper Cars', 'ride on Wild Raft River'],\n    'Cost': [1.47, 2.90, 4.66, 2.56]\n})\n\n# Call the tool to solve the problem\nride1 = 'ride on the Bumper Cars'\nride2 = 'ride on the Speedy Coaster'\ncost_difference = calculate_ride_cost_difference(df, ride1, ride2)\n\n# Print out the answer\nprint(cost_difference)","question":"How much more does a ride on the Bumper Cars cost than a ride on the Speedy Coaster?","prediction_code":"import pandas as pd\n\ndef calculate_ride_cost_difference(df, ride1, ride2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ride cost table and two ride names, and returns the difference in cost between the two rides.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ride names and their costs with columns 'Ride' and 'Cost'.\n    ride1 (str): The name of the first ride.\n    ride2 (str): The name of the second ride.\n    Returns:\n    float: The difference in cost between the two rides.\n    \"\"\"\n    # Filter the DataFrame for the specific rides\n    ride1_df = df[df['Ride'] == ride1]\n    ride2_df = df[df['Ride'] == ride2]\n    \n    # Get the cost for each ride\n    ride1_cost = ride1_df['Cost'].values[0]\n    ride2_cost = ride2_df['Cost'].values[0]\n    \n    # Calculate the difference in cost\n    cost_difference = ride1_cost - ride2_cost\n    \n    return cost_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ride': ['ride on the Big Drop', 'ride on the Speedy Coaster', 'ride on the Bumper Cars', 'ride on Wild Raft River'],\n    'Cost': [1.47, 2.90, 4.66, 2.56]\n})\n\n# Call the tool to solve the problem\nride1 = 'ride on the Bumper Cars'\nride2 = 'ride on the Speedy Coaster'\ncost_difference = calculate_ride_cost_difference(df, ride1, ride2)\n\n# Print out the answer\nprint(cost_difference)","table":"Name: None\nUnit: $\nContent:\nride on the Big Drop | $1.47\nride on the Speedy Coaster | $2.90\nride on the Bumper Cars | $4.66\nride on Wild Raft River | $2.56"}
{"level":4,"answer":7.0,"prediction":"import pandas as pd\n\ndef calculate_cheese_consumption_difference(df, country):\n    \"\"\"\n    This function takes in a pandas DataFrame of cheese consumption per capita and a country name, and returns the difference in cheese consumption per capita between 2006 and 1996 for the given country.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing cheese consumption per capita data.\n    The DataFrame should have columns 'Country', '1996', and '2006'.\n    country (str): The name of the country to calculate the difference for.\n    Returns:\n    int: The difference in cheese consumption per capita between 2006 and 1996 for the given country.\n    \"\"\"\n    # Filter the DataFrame for the given country\n    country_df = df[df['Country'] == country]\n    \n    # Calculate the difference in cheese consumption per capita between 2006 and 1996\n    consumption_1996 = country_df['1996'].values[0]\n    consumption_2006 = country_df['2006'].values[0]\n    difference = consumption_2006 - consumption_1996\n    \n    return difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Country': ['Austria', 'Argentina', 'Great Britain', 'Canada'],\n    '1996': [10, 11, 9, 10],\n    '2006': [17, 11, 10, 11]\n})\n\n# Call the tool to solve the problem\nprint(calculate_cheese_consumption_difference(df, 'Austria'))","question":"An agricultural agency is researching how much cheese people have been eating in different parts of the world. How much more cheese did Austria consume per capita in 2006 than in 1996?","prediction_code":"import pandas as pd\n\ndef calculate_cheese_consumption_difference(df, country):\n    \"\"\"\n    This function takes in a pandas DataFrame of cheese consumption per capita and a country name, and returns the difference in cheese consumption per capita between 2006 and 1996 for the given country.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing cheese consumption per capita data.\n    The DataFrame should have columns 'Country', '1996', and '2006'.\n    country (str): The name of the country to calculate the difference for.\n    Returns:\n    int: The difference in cheese consumption per capita between 2006 and 1996 for the given country.\n    \"\"\"\n    # Filter the DataFrame for the given country\n    country_df = df[df['Country'] == country]\n    \n    # Calculate the difference in cheese consumption per capita between 2006 and 1996\n    consumption_1996 = country_df['1996'].values[0]\n    consumption_2006 = country_df['2006'].values[0]\n    difference = consumption_2006 - consumption_1996\n    \n    return difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Country': ['Austria', 'Argentina', 'Great Britain', 'Canada'],\n    '1996': [10, 11, 9, 10],\n    '2006': [17, 11, 10, 11]\n})\n\n# Call the tool to solve the problem\nprint(calculate_cheese_consumption_difference(df, 'Austria'))","table":"Name: Cheese consumption per capita (kg)\nUnit: kg\nContent:\nCountry | 1996 | 2006\nAustria | 10 | 17\nArgentina | 11 | 11\nGreat Britain | 9 | 10\nCanada | 10 | 11"}
{"level":8,"answer":15.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, month1, month2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average waiting time at the DMV and two months, and returns the rate of change between the two months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average waiting time at the DMV with columns 'Month' and 'Waiting time (minutes)'.\n    month1 (str): The first month for calculating the rate of change.\n    month2 (str): The second month for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two months.\n    \"\"\"\n    # Filter the DataFrame for the two months\n    month1_df = df[df['Month'] == month1]\n    month2_df = df[df['Month'] == month2]\n    \n    # Get the waiting time for each month\n    waiting_time1 = month1_df['Waiting time (minutes)'].values[0]\n    waiting_time2 = month2_df['Waiting time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (waiting_time2 - waiting_time1) \/ waiting_time1\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['August', 'September', 'October', 'November', 'December'],\n    'Waiting time (minutes)': [12, 27, 18, 23, 22]\n})\n\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'August', 'September'))","question":"An administrator at the Department of Motor Vehicles (DMV) tracked the average wait time from month to month. According to the table, what was the rate of change between August and September?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, month1, month2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average waiting time at the DMV and two months, and returns the rate of change between the two months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average waiting time at the DMV with columns 'Month' and 'Waiting time (minutes)'.\n    month1 (str): The first month for calculating the rate of change.\n    month2 (str): The second month for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two months.\n    \"\"\"\n    # Filter the DataFrame for the two months\n    month1_df = df[df['Month'] == month1]\n    month2_df = df[df['Month'] == month2]\n    \n    # Get the waiting time for each month\n    waiting_time1 = month1_df['Waiting time (minutes)'].values[0]\n    waiting_time2 = month2_df['Waiting time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (waiting_time2 - waiting_time1) \/ waiting_time1\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['August', 'September', 'October', 'November', 'December'],\n    'Waiting time (minutes)': [12, 27, 18, 23, 22]\n})\n\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'August', 'September'))","table":"Name: Average waiting time at the DMV\nUnit: minutes per month\nContent:\nMonth | Waiting time (minutes)\nAugust | 12\nSeptember | 27\nOctober | 18\nNovember | 23\nDecember | 22"}
{"level":7,"answer":-6.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, month1, month2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average waiting time at a doctor's office and two months, and returns the rate of change between the two months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average waiting time at the doctor's office.\n    The DataFrame should have \"Month\" and \"Waiting time (minutes)\" columns.\n    month1 (str): The first month for calculating the rate of change.\n    month2 (str): The second month for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two months.\n    \"\"\"\n    # Filter the DataFrame for the two months\n    month1_df = df[df['Month'] == month1]\n    month2_df = df[df['Month'] == month2]\n    \n    # Get the waiting time for each month\n    waiting_time1 = month1_df['Waiting time (minutes)'].values[0]\n    waiting_time2 = month2_df['Waiting time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (waiting_time2 - waiting_time1) \/ waiting_time1\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['May', 'June', 'July', 'August', 'September'],\n    'Waiting time (minutes)': [23, 17, 12, 8, 24]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'May', 'June'))","question":"Christine, a doctor's office receptionist, tracked the average waiting time at the office each month. According to the table, what was the rate of change between May and June?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, month1, month2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average waiting time at a doctor's office and two months, and returns the rate of change between the two months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average waiting time at the doctor's office.\n    The DataFrame should have \"Month\" and \"Waiting time (minutes)\" columns.\n    month1 (str): The first month for calculating the rate of change.\n    month2 (str): The second month for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two months.\n    \"\"\"\n    # Filter the DataFrame for the two months\n    month1_df = df[df['Month'] == month1]\n    month2_df = df[df['Month'] == month2]\n    \n    # Get the waiting time for each month\n    waiting_time1 = month1_df['Waiting time (minutes)'].values[0]\n    waiting_time2 = month2_df['Waiting time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (waiting_time2 - waiting_time1) \/ waiting_time1\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['May', 'June', 'July', 'August', 'September'],\n    'Waiting time (minutes)': [23, 17, 12, 8, 24]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'May', 'June'))","table":"Name: Average waiting time at a doctor's office\nUnit: minutes per month\nContent:\nMonth | Waiting time (minutes)\nMay | 23\nJune | 17\nJuly | 12\nAugust | 8\nSeptember | 24"}
{"level":5,"answer":3.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of soccer practice data and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of soccer practices per month.\n    The DataFrame should have \"Month\" and \"Number of practices\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of practices\" column\n    min_value = df['Number of practices'].min()\n    max_value = df['Number of practices'].max()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['October', 'November', 'March', 'April', 'May', 'June'],\n    'Number of practices': [5, 4, 5, 7, 5, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"Diego looked over his calendar to see how many times he had soccer practice each month. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of soccer practice data and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of soccer practices per month.\n    The DataFrame should have \"Month\" and \"Number of practices\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of practices\" column\n    min_value = df['Number of practices'].min()\n    max_value = df['Number of practices'].max()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['October', 'November', 'March', 'April', 'May', 'June'],\n    'Number of practices': [5, 4, 5, 7, 5, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Soccer practice\nUnit: None\nContent:\nMonth | Number of practices\nOctober | 5\nNovember | 4\nMarch | 5\nApril | 7\nMay | 5\nJune | 5"}
{"level":8,"answer":8.49,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item2_price - item1_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['pair of brown pants', 'yellow skirt', 'pair of boots', 'pair of shorts', 'pair of jeans'],\n    'Price': [11.13, 19.62, 34.22, 28.13, 17.29]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'yellow skirt', 'pair of brown pants'))","question":"How much more does a yellow skirt cost than a pair of brown pants?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item2_price - item1_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['pair of brown pants', 'yellow skirt', 'pair of boots', 'pair of shorts', 'pair of jeans'],\n    'Price': [11.13, 19.62, 34.22, 28.13, 17.29]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'yellow skirt', 'pair of brown pants'))","table":"Name: None\nUnit: $\nContent:\npair of brown pants | $11.13\nyellow skirt | $19.62\npair of boots | $34.22\npair of shorts | $28.13\npair of jeans | $17.29"}
{"level":6,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pieces of mail received and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of pieces of mail received each day.\n    The dataframe should contain \"Day\" and \"Number of pieces of mail\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the numbers\n    mean = df['Number of pieces of mail'].mean()\n    \n    return mean\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Number of pieces of mail': [7, 6, 3, 3, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","question":"The week of her birthday, Dana paid attention to how many pieces of mail she received each day. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pieces of mail received and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of pieces of mail received each day.\n    The dataframe should contain \"Day\" and \"Number of pieces of mail\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the numbers\n    mean = df['Number of pieces of mail'].mean()\n    \n    return mean","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Number of pieces of mail': [7, 6, 3, 3, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","table":"Name: Pieces of mail received\nUnit: None\nContent:\nDay | Number of pieces of mail\nSaturday | 7\nMonday | 6\nTuesday | 3\nWednesday | 3\nThursday | 6"}
{"level":5,"answer":4.0,"prediction":"import pandas as pd\nimport statistics\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of hours spent volunteering and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the hours spent volunteering.\n    The dataframe should contain \"Day\" and \"Hours\" columns.\n    Returns:\n    float: The mode of the numbers.\n    \"\"\"\n    # Get the values in the \"Hours\" column\n    hours = df['Hours'].tolist()\n    \n    # Calculate the mode using the statistics module\n    mode = statistics.mode(hours)\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Hours': [2, 2, 4, 9, 4, 4]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"To get credit for meeting her school's community service requirement, Kate kept a volunteering log. What is the mode of the numbers?","prediction_code":"import pandas as pd\nimport statistics\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of hours spent volunteering and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the hours spent volunteering.\n    The dataframe should contain \"Day\" and \"Hours\" columns.\n    Returns:\n    float: The mode of the numbers.\n    \"\"\"\n    # Get the values in the \"Hours\" column\n    hours = df['Hours'].tolist()\n    \n    # Calculate the mode using the statistics module\n    mode = statistics.mode(hours)\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Hours': [2, 2, 4, 9, 4, 4]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Hours spent volunteering\nUnit: None\nContent:\nDay | Hours\nSaturday | 2\nSunday | 2\nMonday | 4\nTuesday | 9\nWednesday | 4\nThursday | 4"}
{"level":1,"answer":25.0,"prediction":"import pandas as pd\n\ndef calculate_coats_in_closets(df, num_closets):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of coats in each closet and the number of closets, and returns the total number of coats in the given number of closets.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of coats in each closet.\n    The DataFrame should have columns 'Number of closets' and 'Number of coats'.\n    num_closets (int): The number of closets to calculate the total number of coats for.\n    Returns:\n    int: The total number of coats in the given number of closets.\n    \"\"\"\n    # Filter the DataFrame for the given number of closets\n    filtered_df = df[df['Number of closets'] <= num_closets]\n    \n    # Calculate the total number of coats in the filtered DataFrame\n    total_coats = filtered_df['Number of coats'].sum()\n    \n    return total_coats\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of closets': [1, 2, 3, 4, 5],\n    'Number of coats': [5, 10, 15, 20, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_coats_in_closets(df, 5))","question":"Each closet has 5 coats. How many coats are in 5 closets?","prediction_code":"import pandas as pd\n\ndef calculate_coats_in_closets(df, num_closets):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of coats in each closet and the number of closets, and returns the total number of coats in the given number of closets.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of coats in each closet.\n    The DataFrame should have columns 'Number of closets' and 'Number of coats'.\n    num_closets (int): The number of closets to calculate the total number of coats for.\n    Returns:\n    int: The total number of coats in the given number of closets.\n    \"\"\"\n    # Filter the DataFrame for the given number of closets\n    filtered_df = df[df['Number of closets'] <= num_closets]\n    \n    # Calculate the total number of coats in the filtered DataFrame\n    total_coats = filtered_df['Number of coats'].sum()\n    \n    return total_coats","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of closets': [1, 2, 3, 4, 5],\n    'Number of coats': [5, 10, 15, 20, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_coats_in_closets(df, 5))","table":"Name: None\nUnit: coats\nContent:\nNumber of closets | Number of coats\n1 | 5\n2 | 10\n3 | 15\n4 | 20\n5 | ?"}
{"level":5,"answer":7.0,"prediction":"import pandas as pd\n\ndef get_crop_price(df, crop, year):\n    \"\"\"\n    This function takes in a pandas DataFrame of crop prices per cwt and returns the price of a specific crop in a specific year.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing crop prices per cwt.\n    The dataframe should contain \"Crop\", \"2004\", and \"2005\" columns.\n    crop (str): The name of the crop.\n    year (int): The year.\n    Returns:\n    float: The price of the specific crop in the specific year.\n    \"\"\"\n    # Filter the DataFrame for the specific crop and year\n    crop_df = df[df['Crop'] == crop]\n    price = crop_df[str(year)].values[0]\n    \n    return price\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Crop': ['Lentils', 'Timothy seed', 'Apples', 'Canola', 'Peas'],\n    '2004': [14, 7, 12, 11, 7],\n    '2005': [12, 7, 18, 10, 6]\n})\n# Call the tool to solve the problem\nprint(get_crop_price(df, 'Peas', 2004))","question":"An Idaho farmer has been monitoring crop prices over time. Per cwt, how much did peas cost in 2004?","prediction_code":"import pandas as pd\n\ndef get_crop_price(df, crop, year):\n    \"\"\"\n    This function takes in a pandas DataFrame of crop prices per cwt and returns the price of a specific crop in a specific year.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing crop prices per cwt.\n    The dataframe should contain \"Crop\", \"2004\", and \"2005\" columns.\n    crop (str): The name of the crop.\n    year (int): The year.\n    Returns:\n    float: The price of the specific crop in the specific year.\n    \"\"\"\n    # Filter the DataFrame for the specific crop and year\n    crop_df = df[df['Crop'] == crop]\n    price = crop_df[str(year)].values[0]\n    \n    return price","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Crop': ['Lentils', 'Timothy seed', 'Apples', 'Canola', 'Peas'],\n    '2004': [14, 7, 12, 11, 7],\n    '2005': [12, 7, 18, 10, 6]\n})\n# Call the tool to solve the problem\nprint(get_crop_price(df, 'Peas', 2004))","table":"Name: Idaho crop prices per cwt\nUnit: $\nContent:\nCrop | 2004 | 2005\nLentils | $14 | $12\nTimothy seed | $7 | $7\nApples | $12 | $18\nCanola | $11 | $10\nPeas | $7 | $6"}
{"level":8,"answer":3.0,"prediction":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of miles hiked per day and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of miles hiked per day.\n    The dataframe should contain \"Day\" and \"Number of miles\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the \"Number of miles\" column as a Series\n    miles_series = df['Number of miles']\n    \n    # Calculate the mode using the mode() function from pandas\n    mode = miles_series.mode().values[0]\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Number of miles': [3, 6, 3, 6, 9, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"Mateo went on a camping trip and logged the number of miles he hiked each day. What is the mode of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of miles hiked per day and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of miles hiked per day.\n    The dataframe should contain \"Day\" and \"Number of miles\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the \"Number of miles\" column as a Series\n    miles_series = df['Number of miles']\n    \n    # Calculate the mode using the mode() function from pandas\n    mode = miles_series.mode().values[0]\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Number of miles': [3, 6, 3, 6, 9, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Miles hiked\nUnit: None\nContent:\nDay | Number of miles\nThursday | 3\nFriday | 6\nSaturday | 3\nSunday | 6\nMonday | 9\nTuesday | 3"}
{"level":8,"answer":2.0,"prediction":"import pandas as pd\n\ndef count_buildings_with_height(df, height):\n    \"\"\"\n    This function takes in a pandas dataframe of building heights and a specific height, and returns the number of buildings that are exactly the given height.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the heights of buildings.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    height (int): The specific height to count.\n    Returns:\n    int: The number of buildings that are exactly the given height.\n    \"\"\"\n    # prepare a list to store the heights of buildings\n    heights = []\n    # iterate through the dataframe and extract the heights\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            heights.append(stem * 10 + leaf[j])\n    # count the number of buildings that are exactly the given height\n    num_buildings = heights.count(height)\n    return num_buildings\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[1, 8, 8], [6, 7, 9], [2, 6, 8], [], [4], [0, 0], [0]]\n})\n# Call the tool to solve the problem\nprint(count_buildings_with_height(df, 38))","question":"An architecture student measured the heights of all the buildings downtown. How many buildings are exactly 38 meters tall?","prediction_code":"import pandas as pd\n\ndef count_buildings_with_height(df, height):\n    \"\"\"\n    This function takes in a pandas dataframe of building heights and a specific height, and returns the number of buildings that are exactly the given height.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the heights of buildings.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    height (int): The specific height to count.\n    Returns:\n    int: The number of buildings that are exactly the given height.\n    \"\"\"\n    # prepare a list to store the heights of buildings\n    heights = []\n    # iterate through the dataframe and extract the heights\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            heights.append(stem * 10 + leaf[j])\n    # count the number of buildings that are exactly the given height\n    num_buildings = heights.count(height)\n    return num_buildings","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[1, 8, 8], [6, 7, 9], [2, 6, 8], [], [4], [0, 0], [0]]\n})\n# Call the tool to solve the problem\nprint(count_buildings_with_height(df, 38))","table":"Name: Building heights (meters)\nUnit: buildings\nContent:\nStem | Leaf \n3 | 1, 8, 8\n4 | 6, 7, 9\n5 | 2, 6, 8\n6 | \n7 | 4\n8 | 0, 0\n9 | 0"}
{"level":5,"answer":5.0,"prediction":"import pandas as pd\n\ndef count_people_with_scores(df):\n    \"\"\"\n    This function takes in a pandas dataframe of quiz show scores and returns the number of people who scored at least 50 points but fewer than 100 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the scores of the people competing on the quiz show.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of people who scored at least 50 points but fewer than 100 points.\n    \"\"\"\n    # prepare a list to calculate scores of each person\n    scores = []\n    # calculate the total score of each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # filter the people who scored at least 50 points but fewer than 100 points\n    filtered = [score for score in scores if score >= 50 and score < 100]\n    # count the number of people\n    num_people = len(filtered)\n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[3], [], [0, 0, 3, 5], [1, 2, 7], [], [8], [], [3, 5], [3], [0]]\n})\n# Call the tool to solve the problem\nprint(count_people_with_scores(df))","question":"For a math assignment, Wendy researched the scores of the people competing on her favorite quiz show. How many people scored at least 50 points but fewer than 100 points?","prediction_code":"import pandas as pd\n\ndef count_people_with_scores(df):\n    \"\"\"\n    This function takes in a pandas dataframe of quiz show scores and returns the number of people who scored at least 50 points but fewer than 100 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the scores of the people competing on the quiz show.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of people who scored at least 50 points but fewer than 100 points.\n    \"\"\"\n    # prepare a list to calculate scores of each person\n    scores = []\n    # calculate the total score of each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # filter the people who scored at least 50 points but fewer than 100 points\n    filtered = [score for score in scores if score >= 50 and score < 100]\n    # count the number of people\n    num_people = len(filtered)\n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[3], [], [0, 0, 3, 5], [1, 2, 7], [], [8], [], [3, 5], [3], [0]]\n})\n# Call the tool to solve the problem\nprint(count_people_with_scores(df))","table":"Name: Quiz show scores\nUnit: people\nContent:\nStem | Leaf \n0 | 3\n1 | \n2 | 0, 0, 3, 5\n3 | 1, 2, 7\n4 | \n5 | 8\n6 | \n7 | 3, 5\n8 | 3\n9 | 0"}
{"level":5,"answer":8.0,"prediction":"import pandas as pd\n\ndef count_scarves_less_than_100(df):\n    \"\"\"\n    This function takes in a pandas dataframe of scarf lengths and returns the number of scarves that are less than 100 centimeters.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the lengths of scarves.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of scarves that are less than 100 centimeters.\n    \"\"\"\n    # prepare a list to calculate the length of each scarf\n    lengths = []\n    # calculate the total length of each scarf\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            lengths.append(stem * 10 + leaf[j])\n    # filter the scarves that are less than 100 centimeters\n    filtered = [length for length in lengths if length < 100]\n    # count the number of scarves\n    num_scarves = len(filtered)\n    return num_scarves\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [6, 7, 8, 9],\n    'Leaf': [[9], [6, 7, 8], [4, 7, 8], [0]]\n})\n# Call the tool to solve the problem\nprint(count_scarves_less_than_100(df))","question":"Gina measured the length of each scarf in the clothing store where she works. How many scarves are less than 100 centimeters?","prediction_code":"import pandas as pd\n\ndef count_scarves_less_than_100(df):\n    \"\"\"\n    This function takes in a pandas dataframe of scarf lengths and returns the number of scarves that are less than 100 centimeters.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the lengths of scarves.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of scarves that are less than 100 centimeters.\n    \"\"\"\n    # prepare a list to calculate the length of each scarf\n    lengths = []\n    # calculate the total length of each scarf\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            lengths.append(stem * 10 + leaf[j])\n    # filter the scarves that are less than 100 centimeters\n    filtered = [length for length in lengths if length < 100]\n    # count the number of scarves\n    num_scarves = len(filtered)\n    return num_scarves","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [6, 7, 8, 9],\n    'Leaf': [[9], [6, 7, 8], [4, 7, 8], [0]]\n})\n# Call the tool to solve the problem\nprint(count_scarves_less_than_100(df))","table":"Name: Scarf lengths (centimeters)\nUnit: scarves\nContent:\nStem | Leaf \n6 | 9\n7 | 6, 7, 8\n8 | 4, 7, 8\n9 | 0"}
{"level":4,"answer":10.0,"prediction":"import pandas as pd\n\ndef get_sandwich_sales(df, shop_name):\n    \"\"\"\n    This function takes in a pandas DataFrame of sandwich sales and a shop name, and returns the number of sandwiches sold by the specified shop.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the sandwich sales data.\n    The DataFrame should have columns 'Shop', 'Turkey sandwiches', and 'Roast beef sandwiches'.\n    shop_name (str): The name of the shop to get the sandwich sales for.\n    Returns:\n    int: The number of sandwiches sold by the specified shop.\n    \"\"\"\n    # Filter the DataFrame for the specified shop\n    shop_df = df[df['Shop'] == shop_name]\n    \n    # Get the sandwich sales for the specified shop\n    turkey_sales = shop_df['Turkey sandwiches'].values[0]\n    roast_beef_sales = shop_df['Roast beef sandwiches'].values[0]\n    \n    # Calculate the total number of sandwiches sold by the specified shop\n    total_sales = turkey_sales + roast_beef_sales\n    \n    return total_sales\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Shop': [\"Joe's Diner\", \"Sam's Sandwich Shop\", \"Alexandra's Deli\", \"Kelly's Subs\", \"Sandwich City\"],\n    'Turkey sandwiches': [6, 20, 19, 4, 4],\n    'Roast beef sandwiches': [6, 11, 18, 6, 19]\n})\n\n# Call the tool to solve the problem\nprint(get_sandwich_sales(df, \"Kelly's Subs\"))","question":"As part of a project for health class, Isaac surveyed local delis about the kinds of sandwiches sold. How many sandwiches did Kelly's Subs sell?","prediction_code":"import pandas as pd\n\ndef get_sandwich_sales(df, shop_name):\n    \"\"\"\n    This function takes in a pandas DataFrame of sandwich sales and a shop name, and returns the number of sandwiches sold by the specified shop.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the sandwich sales data.\n    The DataFrame should have columns 'Shop', 'Turkey sandwiches', and 'Roast beef sandwiches'.\n    shop_name (str): The name of the shop to get the sandwich sales for.\n    Returns:\n    int: The number of sandwiches sold by the specified shop.\n    \"\"\"\n    # Filter the DataFrame for the specified shop\n    shop_df = df[df['Shop'] == shop_name]\n    \n    # Get the sandwich sales for the specified shop\n    turkey_sales = shop_df['Turkey sandwiches'].values[0]\n    roast_beef_sales = shop_df['Roast beef sandwiches'].values[0]\n    \n    # Calculate the total number of sandwiches sold by the specified shop\n    total_sales = turkey_sales + roast_beef_sales\n    \n    return total_sales","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Shop': [\"Joe's Diner\", \"Sam's Sandwich Shop\", \"Alexandra's Deli\", \"Kelly's Subs\", \"Sandwich City\"],\n    'Turkey sandwiches': [6, 20, 19, 4, 4],\n    'Roast beef sandwiches': [6, 11, 18, 6, 19]\n})\n\n# Call the tool to solve the problem\nprint(get_sandwich_sales(df, \"Kelly's Subs\"))","table":"Name: Sandwich sales\nUnit: sandwiches\nContent:\nShop | Turkey sandwiches | Roast beef sandwiches\nJoe's Diner | 6 | 6\nSam's Sandwich Shop | 20 | 11\nAlexandra's Deli | 19 | 18\nKelly's Subs | 4 | 6\nSandwich City | 4 | 19"}
{"level":3,"answer":520.0,"prediction":"import pandas as pd\n\ndef count_articles(df, names):\n    \"\"\"\n    This function takes in a pandas DataFrame of science articles read and a list of names, and returns the total number of science articles read by the specified names.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and number of science articles read.\n    The dataframe should contain \"Name\" and \"Number of science articles\" columns.\n    names (list): A list of names for which the total number of science articles read is to be calculated.\n    Returns:\n    int: The total number of science articles read by the specified names.\n    \"\"\"\n    # Filter the DataFrame for the specified names\n    filtered_df = df[df['Name'].isin(names)]\n    \n    # Calculate the total number of science articles read by the specified names\n    total_articles = filtered_df['Number of science articles'].sum()\n    \n    return total_articles\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Roy', 'Latrell', 'Maya'],\n    'Number of science articles': [417, 103, 453]\n})\n\n# Call the tool to solve the problem\nprint(count_articles(df, ['Roy', 'Latrell']))","question":"Roy's classmates revealed how many science articles they read. Together, how many science articles did Roy and Latrell read?","prediction_code":"import pandas as pd\n\ndef count_articles(df, names):\n    \"\"\"\n    This function takes in a pandas DataFrame of science articles read and a list of names, and returns the total number of science articles read by the specified names.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and number of science articles read.\n    The dataframe should contain \"Name\" and \"Number of science articles\" columns.\n    names (list): A list of names for which the total number of science articles read is to be calculated.\n    Returns:\n    int: The total number of science articles read by the specified names.\n    \"\"\"\n    # Filter the DataFrame for the specified names\n    filtered_df = df[df['Name'].isin(names)]\n    \n    # Calculate the total number of science articles read by the specified names\n    total_articles = filtered_df['Number of science articles'].sum()\n    \n    return total_articles","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Roy', 'Latrell', 'Maya'],\n    'Number of science articles': [417, 103, 453]\n})\n\n# Call the tool to solve the problem\nprint(count_articles(df, ['Roy', 'Latrell']))","table":"Name: Science articles read\nUnit: science articles\nContent:\nName | Number of science articles\nRoy | 417\nLatrell | 103\nMaya | 453"}
{"level":6,"answer":6.0,"prediction":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of bird sightings and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of birds seen each day.\n    The DataFrame should have columns 'Day' and 'Number of birds'.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean using pandas\n    mean = df['Number of birds'].mean()\n    \n    return mean\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n    'Number of birds': [8, 4, 10, 9, 2, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","question":"Ruth went on a bird watching trip and jotted down the number of birds she saw each day. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of bird sightings and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of birds seen each day.\n    The DataFrame should have columns 'Day' and 'Number of birds'.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean using pandas\n    mean = df['Number of birds'].mean()\n    \n    return mean","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n    'Number of birds': [8, 4, 10, 9, 2, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","table":"Name: Number of birds\nUnit: None\nContent:\nDay | Number of birds\nTuesday | 8\nWednesday | 4\nThursday | 10\nFriday | 9\nSaturday | 2\nSunday | 3"}
{"level":8,"answer":10.0,"prediction":"import pandas as pd\n\ndef find_score_with_fewest_students(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of scores on the last quiz and returns the score that the fewest students received.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the scores and their frequencies.\n    The dataframe should contain \"Score\" and \"Frequency\" columns.\n    Returns:\n    int: The score that the fewest students received.\n    \"\"\"\n    # Find the index of the row with the minimum frequency\n    min_freq_index = df['Frequency'].idxmin()\n    \n    # Get the score corresponding to the minimum frequency\n    score_with_fewest_students = df.loc[min_freq_index, 'Score']\n    \n    return score_with_fewest_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Score': [5, 6, 7, 8, 9, 10],\n    'Frequency': [18, 17, 19, 11, 20, 3]\n})\n# Call the tool to solve the problem\nprint(find_score_with_fewest_students(df))","question":"Professor Kirby compiled the scores from the last quiz. Which score did the fewest students receive?","prediction_code":"import pandas as pd\n\ndef find_score_with_fewest_students(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of scores on the last quiz and returns the score that the fewest students received.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the scores and their frequencies.\n    The dataframe should contain \"Score\" and \"Frequency\" columns.\n    Returns:\n    int: The score that the fewest students received.\n    \"\"\"\n    # Find the index of the row with the minimum frequency\n    min_freq_index = df['Frequency'].idxmin()\n    \n    # Get the score corresponding to the minimum frequency\n    score_with_fewest_students = df.loc[min_freq_index, 'Score']\n    \n    return score_with_fewest_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Score': [5, 6, 7, 8, 9, 10],\n    'Frequency': [18, 17, 19, 11, 20, 3]\n})\n# Call the tool to solve the problem\nprint(find_score_with_fewest_students(df))","table":"Name: Scores on the last quiz\nUnit: None\nContent:\nScore | Frequency\n5 | 18\n6 | 17\n7 | 19\n8 | 11\n9 | 20\n10 | 3"}
{"level":5,"answer":95.0,"prediction":"import pandas as pd\n\ndef calculate_mean_pizzas(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pizzas made per day and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of pizzas made per day.\n    The dataframe should contain \"Day\" and \"Number of pizzas\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Number of pizzas\" column\n    mean_pizzas = df['Number of pizzas'].mean()\n    \n    return mean_pizzas\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of pizzas': [96, 92, 97, 97, 94, 94, 95]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_pizzas(df))","question":"A pizza chef recalled how many pizzas she had made during the past 7 days. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean_pizzas(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pizzas made per day and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of pizzas made per day.\n    The dataframe should contain \"Day\" and \"Number of pizzas\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Number of pizzas\" column\n    mean_pizzas = df['Number of pizzas'].mean()\n    \n    return mean_pizzas","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of pizzas': [96, 92, 97, 97, 94, 94, 95]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_pizzas(df))","table":"Name: Pizzas made\nUnit: None\nContent:\nDay | Number of pizzas\nSunday | 96\nMonday | 92\nTuesday | 97\nWednesday | 97\nThursday | 94\nFriday | 94\nSaturday | 95"}
{"level":5,"answer":84.0,"prediction":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of coin collections and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and number of coins for each person.\n    The dataframe should contain \"Name\" and \"Number of coins\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Extract the column with the numbers\n    numbers = df['Number of coins']\n    \n    # Calculate the mean using pandas\n    mean = numbers.mean()\n    \n    return mean\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Braden', 'Camilla', 'Rick', 'Mary', 'Hector', 'Devin', 'Emily', 'Avery'],\n    'Number of coins': [76, 94, 86, 84, 80, 83, 82, 87]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","question":"Some friends discussed the sizes of their coin collections. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of coin collections and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and number of coins for each person.\n    The dataframe should contain \"Name\" and \"Number of coins\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Extract the column with the numbers\n    numbers = df['Number of coins']\n    \n    # Calculate the mean using pandas\n    mean = numbers.mean()\n    \n    return mean","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Braden', 'Camilla', 'Rick', 'Mary', 'Hector', 'Devin', 'Emily', 'Avery'],\n    'Number of coins': [76, 94, 86, 84, 80, 83, 82, 87]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","table":"Name: Coin collections\nUnit: None\nContent:\nName | Number of coins\nBraden | 76\nCamilla | 94\nRick | 86\nMary | 84\nHector | 80\nDevin | 83\nEmily | 82\nAvery | 87"}
{"level":8,"answer":255.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(menu_df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the menu items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = menu_df[menu_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n\ndef calculate_total_cost(menu, orders):\n    \"\"\"\n    This function takes in a dictionary representing a menu table and a dictionary of orders, and returns the total cost of the orders.\n    Args:\n    menu (dict): A dictionary containing menu items and their prices.\n    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the menu items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        if item in menu:\n            item_price = menu[item]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the menu into a pandas dataframe\nmenu_df = pd.DataFrame({\n    'Item': ['birthday cake', 'apple tart', 'pecan pie', 'key lime pie'],\n    'Price': [21.00, 11.00, 11.00, 15.00]\n})\n\n# Initialize the orders dictionary\norders = {\n    'pecan pie': 6,\n    'birthday cake': 9\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(menu_df, orders))","question":"How much money does Jacob need to buy 6 pecan pies and 9 birthday cakes?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(menu_df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the menu items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = menu_df[menu_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n\ndef calculate_total_cost(menu, orders):\n    \"\"\"\n    This function takes in a dictionary representing a menu table and a dictionary of orders, and returns the total cost of the orders.\n    Args:\n    menu (dict): A dictionary containing menu items and their prices.\n    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the menu items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        if item in menu:\n            item_price = menu[item]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the menu into a pandas dataframe\nmenu_df = pd.DataFrame({\n    'Item': ['birthday cake', 'apple tart', 'pecan pie', 'key lime pie'],\n    'Price': [21.00, 11.00, 11.00, 15.00]\n})\n\n# Initialize the orders dictionary\norders = {\n    'pecan pie': 6,\n    'birthday cake': 9\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(menu_df, orders))","table":"Name: None\nUnit: $\nContent:\nbirthday cake | $21.00\napple tart | $11.00\npecan pie | $11.00\nkey lime pie | $15.00"}
{"level":7,"answer":210.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of buying a certain quantity of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item to be purchased.\n    quantity (int): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of buying the specified quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price of the item\n    price = item_df['Price'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price * quantity\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['dictionary', 'book of poems', 'math book', 'photo album'],\n    'Price': [12.00, 16.00, 15.00, 42.00]\n})\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, 'photo album', 5)\n\n# Print out the answer\nprint(total_cost)","question":"How much money does Anne need to buy 5 photo albums?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of buying a certain quantity of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item to be purchased.\n    quantity (int): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of buying the specified quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price of the item\n    price = item_df['Price'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price * quantity\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['dictionary', 'book of poems', 'math book', 'photo album'],\n    'Price': [12.00, 16.00, 15.00, 42.00]\n})\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, 'photo album', 5)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\ndictionary | $12.00\nbook of poems | $16.00\nmath book | $15.00\nphoto album | $42.00"}
{"level":4,"answer":8.0,"prediction":"import pandas as pd\n\ndef calculate_cheese_consumption_difference(df, country):\n    \"\"\"\n    This function takes in a pandas DataFrame of cheese consumption per capita and a country name, and returns the difference in cheese consumption per capita between 2006 and 1996 for the specified country.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing cheese consumption per capita data.\n    The DataFrame should have columns 'Country', '1996', and '2006'.\n    country (str): The name of the country to calculate the difference for.\n    Returns:\n    int: The difference in cheese consumption per capita between 2006 and 1996 for the specified country.\n    \"\"\"\n    # Filter the DataFrame for the specified country\n    country_df = df[df['Country'] == country]\n    \n    # Calculate the difference in cheese consumption per capita between 2006 and 1996\n    consumption_1996 = country_df['1996'].values[0]\n    consumption_2006 = country_df['2006'].values[0]\n    difference = consumption_2006 - consumption_1996\n    \n    return difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Country': ['Australia', 'Argentina', 'Germany', 'Great Britain', 'Austria'],\n    '1996': [10, 11, 12, 9, 10],\n    '2006': [10, 11, 20, 10, 17]\n})\n# Call the tool to solve the problem\nprint(calculate_cheese_consumption_difference(df, 'Germany'))","question":"An agricultural agency is researching how much cheese people have been eating in different parts of the world. How much more cheese did Germany consume per capita in 2006 than in 1996?","prediction_code":"import pandas as pd\n\ndef calculate_cheese_consumption_difference(df, country):\n    \"\"\"\n    This function takes in a pandas DataFrame of cheese consumption per capita and a country name, and returns the difference in cheese consumption per capita between 2006 and 1996 for the specified country.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing cheese consumption per capita data.\n    The DataFrame should have columns 'Country', '1996', and '2006'.\n    country (str): The name of the country to calculate the difference for.\n    Returns:\n    int: The difference in cheese consumption per capita between 2006 and 1996 for the specified country.\n    \"\"\"\n    # Filter the DataFrame for the specified country\n    country_df = df[df['Country'] == country]\n    \n    # Calculate the difference in cheese consumption per capita between 2006 and 1996\n    consumption_1996 = country_df['1996'].values[0]\n    consumption_2006 = country_df['2006'].values[0]\n    difference = consumption_2006 - consumption_1996\n    \n    return difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Country': ['Australia', 'Argentina', 'Germany', 'Great Britain', 'Austria'],\n    '1996': [10, 11, 12, 9, 10],\n    '2006': [10, 11, 20, 10, 17]\n})\n# Call the tool to solve the problem\nprint(calculate_cheese_consumption_difference(df, 'Germany'))","table":"Name: Cheese consumption per capita (kg)\nUnit: kg\nContent:\nCountry | 1996 | 2006\nAustralia | 10 | 10\nArgentina | 11 | 11\nGermany | 12 | 20\nGreat Britain | 9 | 10\nAustria | 10 | 17"}
{"level":8,"answer":59.0,"prediction":"import pandas as pd\n\ndef count_students(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of number guesses and their frequencies, and returns the total number of students.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number guesses and their frequencies.\n    The DataFrame should contain \"Number guessed\" and \"Frequency\" columns.\n    Returns:\n    int: The total number of students.\n    \"\"\"\n    # Sum the frequencies to get the total number of students\n    total_students = df['Frequency'].sum()\n    \n    return total_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number guessed': [1, 2, 3, 4, 5],\n    'Frequency': [11, 16, 7, 20, 5]\n})\n# Call the tool to solve the problem\nprint(count_students(df))","question":"During a lesson on graphing data, students in Mrs. Jayce's math class guessed a number between 1 and 5 and recorded the results. How many students are there in all?","prediction_code":"import pandas as pd\n\ndef count_students(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of number guesses and their frequencies, and returns the total number of students.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number guesses and their frequencies.\n    The DataFrame should contain \"Number guessed\" and \"Frequency\" columns.\n    Returns:\n    int: The total number of students.\n    \"\"\"\n    # Sum the frequencies to get the total number of students\n    total_students = df['Frequency'].sum()\n    \n    return total_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number guessed': [1, 2, 3, 4, 5],\n    'Frequency': [11, 16, 7, 20, 5]\n})\n# Call the tool to solve the problem\nprint(count_students(df))","table":"Name: Guessing a number between 1 and 5\nUnit: None\nContent:\nNumber guessed | Frequency\n1 | 11\n2 | 16\n3 | 7\n4 | 20\n5 | 5"}
{"level":4,"answer":13.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(items_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to be purchased,\n    and returns the total cost of the items using pandas.\n    Args:\n    items_df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = items_df[items_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['baking dish', 'ice cream scoop', 'casserole dish', 'rolling pin'],\n    'Price': [4.00, 6.00, 3.00, 4.00]\n})\n\n# Define the items to be purchased\nitems = ['baking dish', 'casserole dish', 'ice cream scoop']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(items_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to be purchased,\n    and returns the total cost of the items using pandas.\n    Args:\n    items_df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = items_df[items_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['baking dish', 'ice cream scoop', 'casserole dish', 'rolling pin'],\n    'Price': [4.00, 6.00, 3.00, 4.00]\n})\n\n# Define the items to be purchased\nitems = ['baking dish', 'casserole dish', 'ice cream scoop']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nbaking dish | $4.00\nice cream scoop | $6.00\ncasserole dish | $3.00\nrolling pin | $4.00"}
{"level":8,"answer":-9.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, year1, year2):\n    \"\"\"\n    This function takes in a pandas DataFrame of vacation days taken by Tori and two years, and returns the rate of change between the two years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the years and the corresponding number of vacation days taken.\n    year1 (int): The first year.\n    year2 (int): The second year.\n    Returns:\n    float: The rate of change between the two years.\n    \"\"\"\n    # Filter the DataFrame for the two years\n    year1_df = df[df['Year'] == year1]\n    year2_df = df[df['Year'] == year2]\n    \n    # Get the number of vacation days for each year\n    vacation_days1 = year1_df['Vacation days'].values[0]\n    vacation_days2 = year2_df['Vacation days'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (vacation_days2 - vacation_days1) \/ (year2 - year1)\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2009, 2010, 2011, 2012, 2013],\n    'Vacation days': [12, 12, 16, 7, 16]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2011, 2012))","question":"To figure out how many vacation days she had left to use, Tori looked over her old calendars to figure out how many days of vacation she had taken each year. According to the table, what was the rate of change between 2011 and 2012?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, year1, year2):\n    \"\"\"\n    This function takes in a pandas DataFrame of vacation days taken by Tori and two years, and returns the rate of change between the two years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the years and the corresponding number of vacation days taken.\n    year1 (int): The first year.\n    year2 (int): The second year.\n    Returns:\n    float: The rate of change between the two years.\n    \"\"\"\n    # Filter the DataFrame for the two years\n    year1_df = df[df['Year'] == year1]\n    year2_df = df[df['Year'] == year2]\n    \n    # Get the number of vacation days for each year\n    vacation_days1 = year1_df['Vacation days'].values[0]\n    vacation_days2 = year2_df['Vacation days'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (vacation_days2 - vacation_days1) \/ (year2 - year1)\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2009, 2010, 2011, 2012, 2013],\n    'Vacation days': [12, 12, 16, 7, 16]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2011, 2012))","table":"Name: Vacation days taken by Tori\nUnit: vacation days per year\nContent:\nYear | Vacation days\n2009 | 12\n2010 | 12\n2011 | 16\n2012 | 7\n2013 | 16"}
{"level":4,"answer":7.0,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item2_price - item1_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['cherry pie', 'apple tart', 'carrot cake', 'chocolate cake'],\n    'Price': [12, 19, 11, 21]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'cherry pie', 'apple tart'))","question":"How much more does an apple tart cost than a cherry pie?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item2_price - item1_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['cherry pie', 'apple tart', 'carrot cake', 'chocolate cake'],\n    'Price': [12, 19, 11, 21]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'cherry pie', 'apple tart'))","table":"Name: None\nUnit: $\nContent:\ncherry pie | $12\napple tart | $19\ncarrot cake | $11\nchocolate cake | $21"}
{"level":8,"answer":5.66,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['comic book', 'history book', 'cookbook', 'map of Africa', 'dog calendar'],\n    'Price': [1.57, 7.02, 8.95, 3.29, 7.51]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'cookbook', 'map of Africa'))","question":"How much more does a cookbook cost than a map of Africa?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['comic book', 'history book', 'cookbook', 'map of Africa', 'dog calendar'],\n    'Price': [1.57, 7.02, 8.95, 3.29, 7.51]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'cookbook', 'map of Africa'))","table":"Name: None\nUnit: $\nContent:\ncomic book | $1.57\nhistory book | $7.02\ncookbook | $8.95\nmap of Africa | $3.29\ndog calendar | $7.51"}
{"level":7,"answer":-6.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of shell counts per day and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the shell counts per day.\n    The dataframe should contain \"Day\" and \"Number of shells\" columns.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Get the shell counts for the two days\n    shells_day1 = df[df['Day'] == day1]['Number of shells'].values[0]\n    shells_day2 = df[df['Day'] == day2]['Number of shells'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (shells_day2 - shells_day1) \/ shells_day1\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Number of shells': [6, 8, 2, 7, 5]\n})\n\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Monday', 'Tuesday'))","question":"Madelyn spent a week at the beach and recorded the number of shells she found each day. According to the table, what was the rate of change between Monday and Tuesday?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of shell counts per day and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the shell counts per day.\n    The dataframe should contain \"Day\" and \"Number of shells\" columns.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Get the shell counts for the two days\n    shells_day1 = df[df['Day'] == day1]['Number of shells'].values[0]\n    shells_day2 = df[df['Day'] == day2]['Number of shells'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (shells_day2 - shells_day1) \/ shells_day1\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Number of shells': [6, 8, 2, 7, 5]\n})\n\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Monday', 'Tuesday'))","table":"Name: Shells Madelyn found\nUnit: shells per day\nContent:\nDay | Number of shells\nSunday | 6\nMonday | 8\nTuesday | 2\nWednesday | 7\nThursday | 5"}
{"level":8,"answer":5.81,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of orders, and returns the total cost of the orders.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per kilogram for each item with columns 'Name' and 'Unit'.\n    orders (dict): A dictionary where the keys are item names and the values are the number of kilograms ordered for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the orders and calculate the cost for each item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Unit'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['cantaloupe', 'canary melon', 'watermelon', 'Algerian melon'],\n    'Unit': [0.80, 0.86, 0.77, 0.77]\n})\n\n# Initialize the orders dictionary\norders = {\n    'cantaloupe': 2,\n    'canary melon': 4,\n    'Algerian melon': 1\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","question":"Shane buys 4 kilograms of canary melon, 1 kilogram of Algerian melon, and 2 kilograms of cantaloupe. What is the total cost?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of orders, and returns the total cost of the orders.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per kilogram for each item with columns 'Name' and 'Unit'.\n    orders (dict): A dictionary where the keys are item names and the values are the number of kilograms ordered for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the orders and calculate the cost for each item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Unit'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['cantaloupe', 'canary melon', 'watermelon', 'Algerian melon'],\n    'Unit': [0.80, 0.86, 0.77, 0.77]\n})\n\n# Initialize the orders dictionary\norders = {\n    'cantaloupe': 2,\n    'canary melon': 4,\n    'Algerian melon': 1\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","table":"Name: None\nUnit: $\nContent:\ncantaloupe | $0.80\/kg\ncanary melon | $0.86\/kg\nwatermelon | $0.77\/kg\nAlgerian melon | $0.77\/kg"}
{"level":8,"answer":9.0,"prediction":"import pandas as pd\n\ndef count_boxes_with_37_broken_crayons(df):\n    \"\"\"\n    This function takes in a pandas dataframe of broken crayons per box, and returns the number of boxes that have at least 37 broken crayons.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken crayons per box.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of boxes that have at least 37 broken crayons.\n    \"\"\"\n    # prepare a list to calculate broken crayons in each box\n    crayons = []\n    # calculate the total number of broken crayons in each box\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            crayons.append(stem * 10 + leaf[j])\n    # filter the boxes where the total number of broken crayons is greater than or equal to 37\n    filtered = [crayon for crayon in crayons if crayon >= 37]\n    # count the number of rows\n    num_boxes = len(filtered)\n    return num_boxes\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5],\n    'Leaf': [[5, 6], [1, 5, 7, 8], [1, 2, 4, 7], [1, 3, 6]]\n})\n# Call the tool to solve the problem\nprint(count_boxes_with_37_broken_crayons(df))","question":"A crayon factory monitored the number of broken crayons per box during the past day. How many boxes had at least 37 broken crayons?","prediction_code":"import pandas as pd\n\ndef count_boxes_with_37_broken_crayons(df):\n    \"\"\"\n    This function takes in a pandas dataframe of broken crayons per box, and returns the number of boxes that have at least 37 broken crayons.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken crayons per box.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of boxes that have at least 37 broken crayons.\n    \"\"\"\n    # prepare a list to calculate broken crayons in each box\n    crayons = []\n    # calculate the total number of broken crayons in each box\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            crayons.append(stem * 10 + leaf[j])\n    # filter the boxes where the total number of broken crayons is greater than or equal to 37\n    filtered = [crayon for crayon in crayons if crayon >= 37]\n    # count the number of rows\n    num_boxes = len(filtered)\n    return num_boxes","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5],\n    'Leaf': [[5, 6], [1, 5, 7, 8], [1, 2, 4, 7], [1, 3, 6]]\n})\n# Call the tool to solve the problem\nprint(count_boxes_with_37_broken_crayons(df))","table":"Name: Broken crayons per box\nUnit: boxes\nContent:\nStem | Leaf \n2 | 5, 6\n3 | 1, 5, 7, 8\n4 | 1, 2, 4, 7\n5 | 1, 3, 6"}
{"level":7,"answer":66.0,"prediction":"import pandas as pd\n\ndef find_largest_number_of_pages(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pages per magazine and returns the largest number of pages.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pages per magazine.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of pages.\n    \"\"\"\n    # Create an empty list to store all the pages\n    pages = []\n    \n    # Iterate through each row of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Iterate through each leaf value and add it to the pages list\n        for j in range(len(leaf)):\n            pages.append(stem * 10 + leaf[j])\n    \n    # Find the largest number of pages\n    largest_pages = max(pages)\n    \n    return largest_pages\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6],\n    'Leaf': [[0, 4, 7], [1, 3, 5, 7], [2, 3, 5, 5], [5, 6, 9], [4, 4, 4, 5, 9], [1, 3, 4, 6]]\n})\n# Call the tool to solve the problem\nprint(find_largest_number_of_pages(df))","question":"Stacy, a journalism student, counted the number of pages in several major magazines. What is the largest number of pages?","prediction_code":"import pandas as pd\n\ndef find_largest_number_of_pages(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pages per magazine and returns the largest number of pages.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pages per magazine.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of pages.\n    \"\"\"\n    # Create an empty list to store all the pages\n    pages = []\n    \n    # Iterate through each row of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Iterate through each leaf value and add it to the pages list\n        for j in range(len(leaf)):\n            pages.append(stem * 10 + leaf[j])\n    \n    # Find the largest number of pages\n    largest_pages = max(pages)\n    \n    return largest_pages","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6],\n    'Leaf': [[0, 4, 7], [1, 3, 5, 7], [2, 3, 5, 5], [5, 6, 9], [4, 4, 4, 5, 9], [1, 3, 4, 6]]\n})\n# Call the tool to solve the problem\nprint(find_largest_number_of_pages(df))","table":"Name: Pages per magazine\nUnit: pages\nContent:\nStem | Leaf \n1 | 0, 4, 7\n2 | 1, 3, 5, 7\n3 | 2, 3, 5, 5\n4 | 5, 6, 9\n5 | 4, 4, 4, 5, 9\n6 | 1, 3, 4, 6"}
{"level":5,"answer":66.0,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['baseball ticket', 'hockey ticket', 'basketball ticket', 'golf ticket'],\n    'Price': [86, 20, 47, 65]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'baseball ticket', 'hockey ticket'))","question":"How much more does a baseball ticket cost than a hockey ticket?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['baseball ticket', 'hockey ticket', 'basketball ticket', 'golf ticket'],\n    'Price': [86, 20, 47, 65]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'baseball ticket', 'hockey ticket'))","table":"Name: None\nUnit: $\nContent:\nbaseball ticket | $86\nhockey ticket | $20\nbasketball ticket | $47\ngolf ticket | $65"}
{"level":7,"answer":183.7,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of items, and returns the total cost of the items using pandas.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (dict): A dictionary where the keys are item names and the values are the quantities of each item.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item, quantity in items.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['fleece blanket', 'quilt', 'yellow bath towel', 'flannel sheet', 'navy blue bath mat'],\n    'Price': [10.42, 12.70, 12.49, 17.13, 18.20]\n})\n\n# Initialize the items dictionary\nitems = {\n    'quilt': 3,\n    'navy blue bath mat': 8\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Eduardo need to buy 3 quilts and 8 navy blue bath mats?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of items, and returns the total cost of the items using pandas.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (dict): A dictionary where the keys are item names and the values are the quantities of each item.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item, quantity in items.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['fleece blanket', 'quilt', 'yellow bath towel', 'flannel sheet', 'navy blue bath mat'],\n    'Price': [10.42, 12.70, 12.49, 17.13, 18.20]\n})\n\n# Initialize the items dictionary\nitems = {\n    'quilt': 3,\n    'navy blue bath mat': 8\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nfleece blanket | $10.42\nquilt | $12.70\nyellow bath towel | $12.49\nflannel sheet | $17.13\nnavy blue bath mat | $18.20"}
{"level":8,"answer":8.0,"prediction":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of numbers and returns the mode of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the numbers.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column containing the numbers\n    numbers = df['Number of stores']\n    \n    # Calculate the mode using the value_counts() function\n    mode = numbers.value_counts().idxmax()\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Town': ['Ashland', 'Chesterton', 'Columbia', 'Greenwood', 'Richmond', 'Salem', 'Riverside', 'Mayfield'],\n    'Number of stores': [10, 6, 10, 8, 8, 8, 9, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"A newspaper researched how many grocery stores there are in each town. What is the mode of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of numbers and returns the mode of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the numbers.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column containing the numbers\n    numbers = df['Number of stores']\n    \n    # Calculate the mode using the value_counts() function\n    mode = numbers.value_counts().idxmax()\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Town': ['Ashland', 'Chesterton', 'Columbia', 'Greenwood', 'Richmond', 'Salem', 'Riverside', 'Mayfield'],\n    'Number of stores': [10, 6, 10, 8, 8, 8, 9, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Grocery stores in each town\nUnit: None\nContent:\nTown | Number of stores\nAshland | 10\nChesterton | 6\nColumbia | 10\nGreenwood | 8\nRichmond | 8\nSalem | 8\nRiverside | 9\nMayfield | 9"}
{"level":7,"answer":5.0,"prediction":"import pandas as pd\n\ndef count_pizzas_with_20_pepperoni(df):\n    \"\"\"\n    This function takes in a pandas dataframe of pieces of pepperoni per pizza, and returns the number of pizzas that have at least 20 pieces of pepperoni.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pieces of pepperoni per pizza.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of pizzas that have at least 20 pieces of pepperoni.\n    \"\"\"\n    # prepare a list to calculate the number of pepperoni on each pizza\n    pepperoni = []\n    # calculate the total number of pepperoni on each pizza\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            pepperoni.append(stem * 10 + leaf[j])\n    # filter the pizzas where the total number of pepperoni is greater than or equal to 20\n    filtered = [p for p in pepperoni if p >= 20]\n    # count the number of pizzas\n    num_pizzas = len(filtered)\n    return num_pizzas\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[1, 1, 1, 8], [8, 9], [], [2, 4, 9]]\n})\n# Call the tool to solve the problem\nprint(count_pizzas_with_20_pepperoni(df))","question":"Henry counted the number of pieces of pepperoni on each pizza he made. How many pizzas had at least 20 pieces of pepperoni?","prediction_code":"import pandas as pd\n\ndef count_pizzas_with_20_pepperoni(df):\n    \"\"\"\n    This function takes in a pandas dataframe of pieces of pepperoni per pizza, and returns the number of pizzas that have at least 20 pieces of pepperoni.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pieces of pepperoni per pizza.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of pizzas that have at least 20 pieces of pepperoni.\n    \"\"\"\n    # prepare a list to calculate the number of pepperoni on each pizza\n    pepperoni = []\n    # calculate the total number of pepperoni on each pizza\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            pepperoni.append(stem * 10 + leaf[j])\n    # filter the pizzas where the total number of pepperoni is greater than or equal to 20\n    filtered = [p for p in pepperoni if p >= 20]\n    # count the number of pizzas\n    num_pizzas = len(filtered)\n    return num_pizzas","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[1, 1, 1, 8], [8, 9], [], [2, 4, 9]]\n})\n# Call the tool to solve the problem\nprint(count_pizzas_with_20_pepperoni(df))","table":"Name: Pieces of pepperoni per pizza\nUnit: pizzas\nContent:\nStem | Leaf \n1 | 1, 1, 1, 8\n2 | 8, 9\n3 | \n4 | 2, 4, 9"}
{"level":3,"answer":32.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(menu_df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the menu items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = menu_df[menu_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['apple tart', 'strawberry cheesecake', 'pineapple upside-down cake', 'wedding cake', 'carrot cake'],\n    'Price': [17, 11, 19, 88, 13]\n})\n\n# Initialize the orders dictionary\norders = {\n    'pineapple upside-down cake': 1,\n    'carrot cake': 1\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","question":"How much money does Jenny need to buy a pineapple upside-down cake and a carrot cake?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(menu_df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the menu items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = menu_df[menu_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['apple tart', 'strawberry cheesecake', 'pineapple upside-down cake', 'wedding cake', 'carrot cake'],\n    'Price': [17, 11, 19, 88, 13]\n})\n\n# Initialize the orders dictionary\norders = {\n    'pineapple upside-down cake': 1,\n    'carrot cake': 1\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","table":"Name: None\nUnit: $\nContent:\napple tart | $17\nstrawberry cheesecake | $11\npineapple upside-down cake | $19\nwedding cake | $88\ncarrot cake | $13"}
{"level":6,"answer":1.8,"prediction":"import pandas as pd\n\ndef calculate_cost(df, item, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table, an item name, and a weight, and returns the cost of buying the specified weight of the item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price table with columns 'Name' and 'Unit'.\n    item (str): The name of the item to calculate the cost for.\n    weight (float): The weight of the item to calculate the cost for.\n    Returns:\n    float: The cost of buying the specified weight of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    if not item_df.empty:\n        unit_price = item_df['Unit'].values[0]\n        # Remove the dollar sign and convert the unit price to a float\n        unit_price = float(unit_price.replace('$', ''))\n        # Calculate the cost by multiplying the unit price by the weight\n        cost = unit_price * weight\n        return cost\n    else:\n        return None\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['bark', 'dirt', 'sawdust', 'cement', 'mulch', 'sand'],\n    'Unit': ['$4\/pound', '$3\/pound', '$2\/pound', '$3\/pound', '$5\/pound', '$3\/pound']\n})\n# Call the tool to solve the problem\nprint(calculate_cost(df, 'cement', 0.6))","question":"How much would it cost to buy 0.6 pounds of cement?","prediction_code":"import pandas as pd\n\ndef calculate_cost(df, item, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table, an item name, and a weight, and returns the cost of buying the specified weight of the item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price table with columns 'Name' and 'Unit'.\n    item (str): The name of the item to calculate the cost for.\n    weight (float): The weight of the item to calculate the cost for.\n    Returns:\n    float: The cost of buying the specified weight of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    if not item_df.empty:\n        unit_price = item_df['Unit'].values[0]\n        # Remove the dollar sign and convert the unit price to a float\n        unit_price = float(unit_price.replace('$', ''))\n        # Calculate the cost by multiplying the unit price by the weight\n        cost = unit_price * weight\n        return cost\n    else:\n        return None","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['bark', 'dirt', 'sawdust', 'cement', 'mulch', 'sand'],\n    'Unit': ['$4\/pound', '$3\/pound', '$2\/pound', '$3\/pound', '$5\/pound', '$3\/pound']\n})\n# Call the tool to solve the problem\nprint(calculate_cost(df, 'cement', 0.6))","table":"Name: None\nUnit: $\nContent:\nbark | $4\/pound\ndirt | $3\/pound\nsawdust | $2\/pound\ncement | $3\/pound\nmulch | $5\/pound\nsand | $3\/pound"}
{"level":2,"answer":6.0,"prediction":"import pandas as pd\n\ndef calculate_cds_in_bags(df, num_bags):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of CDs in shopping bags and the number of bags, and returns the total number of CDs.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of shopping bags and the number of CDs in each bag.\n    The DataFrame should have columns 'Number of shopping bags' and 'Number of CDs'.\n    num_bags (int): The number of shopping bags to calculate the total number of CDs.\n    Returns:\n    int: The total number of CDs in the given number of shopping bags.\n    \"\"\"\n    # Filter the DataFrame for the given number of bags\n    bags_df = df[df['Number of shopping bags'] == num_bags]\n    \n    # Get the number of CDs in the bags\n    num_cds = bags_df['Number of CDs'].values[0]\n    \n    return num_cds\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of shopping bags': [1, 2, 3],\n    'Number of CDs': [2, 4, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_cds_in_bags(df, 3))","question":"Each shopping bag has 2 CDs. How many CDs are in 3 shopping bags?","prediction_code":"import pandas as pd\n\ndef calculate_cds_in_bags(df, num_bags):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of CDs in shopping bags and the number of bags, and returns the total number of CDs.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of shopping bags and the number of CDs in each bag.\n    The DataFrame should have columns 'Number of shopping bags' and 'Number of CDs'.\n    num_bags (int): The number of shopping bags to calculate the total number of CDs.\n    Returns:\n    int: The total number of CDs in the given number of shopping bags.\n    \"\"\"\n    # Filter the DataFrame for the given number of bags\n    bags_df = df[df['Number of shopping bags'] == num_bags]\n    \n    # Get the number of CDs in the bags\n    num_cds = bags_df['Number of CDs'].values[0]\n    \n    return num_cds","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of shopping bags': [1, 2, 3],\n    'Number of CDs': [2, 4, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_cds_in_bags(df, 3))","table":"Name: None\nUnit: None\nContent:\nNumber of shopping bags | Number of CDs\n1 | 2\n2 | 4\n3 | ?"}
{"level":7,"answer":2.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of basketball hoops per park and returns the median number of basketball hoops.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of basketball hoops per park.\n    The dataframe should contain \"Park\" and \"Number of basketball hoops\" columns.\n    Returns:\n    float: The median number of basketball hoops.\n    \"\"\"\n    # Get the column with the number of basketball hoops\n    hoops_column = df['Number of basketball hoops']\n    \n    # Calculate the median\n    median = hoops_column.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Park': ['Canal Park', 'Kelly Park', 'Otter Park', 'Westfield Park', 'Heron Park', 'Mooreland Park', 'Riverfront Park'],\n    'Number of basketball hoops': [9, 2, 2, 10, 10, 2, 2]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"The parks department compared how many basketball hoops there are at each park. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of basketball hoops per park and returns the median number of basketball hoops.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of basketball hoops per park.\n    The dataframe should contain \"Park\" and \"Number of basketball hoops\" columns.\n    Returns:\n    float: The median number of basketball hoops.\n    \"\"\"\n    # Get the column with the number of basketball hoops\n    hoops_column = df['Number of basketball hoops']\n    \n    # Calculate the median\n    median = hoops_column.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Park': ['Canal Park', 'Kelly Park', 'Otter Park', 'Westfield Park', 'Heron Park', 'Mooreland Park', 'Riverfront Park'],\n    'Number of basketball hoops': [9, 2, 2, 10, 10, 2, 2]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Basketball hoops\nUnit: None\nContent:\nPark | Number of basketball hoops\nCanal Park | 9\nKelly Park | 2\nOtter Park | 2\nWestfield Park | 10\nHeron Park | 10\nMooreland Park | 2\nRiverfront Park | 2"}
{"level":4,"answer":13.0,"prediction":"import pandas as pd\n\ndef count_fifth_graders_chose_hotdogs(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of lunch choices and returns the number of fifth graders who chose hot dogs.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the lunch choices and the number of fourth and fifth graders who chose each meal.\n    The DataFrame should contain \"Lunch\", \"Fourth graders\", and \"Fifth graders\" columns.\n    Returns:\n    int: The number of fifth graders who chose hot dogs.\n    \"\"\"\n    # Filter the DataFrame for the row where Lunch is \"Hot dogs\"\n    hotdogs_row = df[df['Lunch'] == 'Hot dogs']\n    \n    # Get the number of fifth graders who chose hot dogs\n    fifth_graders_chose_hotdogs = hotdogs_row['Fifth graders'].values[0]\n    \n    return fifth_graders_chose_hotdogs\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Lunch': ['Hot dogs', 'Meatloaf', 'Hamburgers', 'Egg salad', 'Spaghetti'],\n    'Fourth graders': [15, 5, 17, 19, 10],\n    'Fifth graders': [13, 3, 16, 4, 18]\n})\n# Call the tool to solve the problem\nprint(count_fifth_graders_chose_hotdogs(df))","question":"For the annual class picnic, each student voted for his or her favorite meal. How many fifth graders chose hot dogs?","prediction_code":"import pandas as pd\n\ndef count_fifth_graders_chose_hotdogs(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of lunch choices and returns the number of fifth graders who chose hot dogs.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the lunch choices and the number of fourth and fifth graders who chose each meal.\n    The DataFrame should contain \"Lunch\", \"Fourth graders\", and \"Fifth graders\" columns.\n    Returns:\n    int: The number of fifth graders who chose hot dogs.\n    \"\"\"\n    # Filter the DataFrame for the row where Lunch is \"Hot dogs\"\n    hotdogs_row = df[df['Lunch'] == 'Hot dogs']\n    \n    # Get the number of fifth graders who chose hot dogs\n    fifth_graders_chose_hotdogs = hotdogs_row['Fifth graders'].values[0]\n    \n    return fifth_graders_chose_hotdogs","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Lunch': ['Hot dogs', 'Meatloaf', 'Hamburgers', 'Egg salad', 'Spaghetti'],\n    'Fourth graders': [15, 5, 17, 19, 10],\n    'Fifth graders': [13, 3, 16, 4, 18]\n})\n# Call the tool to solve the problem\nprint(count_fifth_graders_chose_hotdogs(df))","table":"Name: Lunch choices\nUnit: fifth graders\nContent:\nLunch | Fourth graders | Fifth graders\nHot dogs | 15 | 13\nMeatloaf | 5 | 3\nHamburgers | 17 | 16\nEgg salad | 19 | 4\nSpaghetti | 10 | 18"}
{"level":8,"answer":8.0,"prediction":"import pandas as pd\n\ndef count_shipments_with_cracked_panes(df):\n    \"\"\"\n    This function takes in a pandas dataframe of cracked window panes per shipment, and returns the number of shipments that have at least 10 cracked window panes but less than 90 cracked window panes.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of cracked window panes per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of shipments that have at least 10 cracked window panes but less than 90 cracked window panes.\n    \"\"\"\n    # prepare a list to calculate the number of cracked window panes in each shipment\n    panes = []\n    # calculate the total number of cracked window panes in each shipment\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            panes.append(stem * 10 + leaf[j])\n    # filter the shipments where the total number of cracked window panes is greater than or equal to 10 and less than 90\n    filtered = [pane for pane in panes if 10 <= pane < 90]\n    # count the number of shipments\n    num_shipments = len(filtered)\n    return num_shipments\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[0, 8], [5, 6], [], [9], [], [6], [9], [1]]\n})\n# Call the tool to solve the problem\nprint(count_shipments_with_cracked_panes(df))","question":"The employees at Jeremiah's Construction monitored the number of cracked window panes in each shipment they received. How many shipments had at least 10 cracked window panes but less than 90 cracked window panes?","prediction_code":"import pandas as pd\n\ndef count_shipments_with_cracked_panes(df):\n    \"\"\"\n    This function takes in a pandas dataframe of cracked window panes per shipment, and returns the number of shipments that have at least 10 cracked window panes but less than 90 cracked window panes.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of cracked window panes per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of shipments that have at least 10 cracked window panes but less than 90 cracked window panes.\n    \"\"\"\n    # prepare a list to calculate the number of cracked window panes in each shipment\n    panes = []\n    # calculate the total number of cracked window panes in each shipment\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            panes.append(stem * 10 + leaf[j])\n    # filter the shipments where the total number of cracked window panes is greater than or equal to 10 and less than 90\n    filtered = [pane for pane in panes if 10 <= pane < 90]\n    # count the number of shipments\n    num_shipments = len(filtered)\n    return num_shipments","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[0, 8], [5, 6], [], [9], [], [6], [9], [1]]\n})\n# Call the tool to solve the problem\nprint(count_shipments_with_cracked_panes(df))","table":"Name: Cracked window panes per shipment\nUnit: shipments\nContent:\nStem | Leaf \n1 | 0, 8\n2 | 5, 6\n3 | \n4 | 9\n5 | \n6 | 6\n7 | 9\n8 | 1"}
{"level":3,"answer":9.0,"prediction":"import pandas as pd\n\ndef calculate_stroke_difference(df, player1, player2):\n    \"\"\"\n    This function takes in a pandas DataFrame of miniature golf scores and two player names, and returns the difference in strokes between the two players.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the names and scores of the players.\n    player1 (str): The name of the first player.\n    player2 (str): The name of the second player.\n    Returns:\n    int: The difference in strokes between the two players.\n    \"\"\"\n    # Filter the DataFrame for the two players\n    player1_score = df[df['Name'] == player1]['Score'].values[0]\n    player2_score = df[df['Name'] == player2]['Score'].values[0]\n    \n    # Calculate the difference in strokes\n    stroke_difference = player2_score - player1_score\n    \n    return stroke_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Anita', 'Krysta', 'Hugo', 'Devin'],\n    'Score': [128, 135, 137, 115]\n})\n# Call the tool to solve the problem\nprint(calculate_stroke_difference(df, 'Hugo', 'Anita'))","question":"Some friends played miniature golf and wrote down their scores. How many more strokes did Hugo take than Anita?","prediction_code":"import pandas as pd\n\ndef calculate_stroke_difference(df, player1, player2):\n    \"\"\"\n    This function takes in a pandas DataFrame of miniature golf scores and two player names, and returns the difference in strokes between the two players.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the names and scores of the players.\n    player1 (str): The name of the first player.\n    player2 (str): The name of the second player.\n    Returns:\n    int: The difference in strokes between the two players.\n    \"\"\"\n    # Filter the DataFrame for the two players\n    player1_score = df[df['Name'] == player1]['Score'].values[0]\n    player2_score = df[df['Name'] == player2]['Score'].values[0]\n    \n    # Calculate the difference in strokes\n    stroke_difference = player2_score - player1_score\n    \n    return stroke_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Anita', 'Krysta', 'Hugo', 'Devin'],\n    'Score': [128, 135, 137, 115]\n})\n# Call the tool to solve the problem\nprint(calculate_stroke_difference(df, 'Hugo', 'Anita'))","table":"Name: Miniature golf scores\nUnit: strokes\nContent:\nName | Score\nAnita | 128\nKrysta | 135\nHugo | 137\nDevin | 115"}
{"level":7,"answer":26.75,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per kilogram for each item with columns 'Item' and 'Price'.\n    items (dict): A dictionary where the keys are item names and the values are the number of kilograms for each item.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item, quantity in items.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['dried mango', 'dried pear', 'dried pineapple', 'raisins'],\n    'Price': [2.48, 2.35, 2.91, 3.00]\n})\n\n# Initialize the items dictionary\nitems = {\n    'dried pear': 5,\n    'raisins': 5\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"Martin wants to buy 5 kilograms of dried pear and 5 kilograms of raisins. How much will he spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per kilogram for each item with columns 'Item' and 'Price'.\n    items (dict): A dictionary where the keys are item names and the values are the number of kilograms for each item.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item, quantity in items.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['dried mango', 'dried pear', 'dried pineapple', 'raisins'],\n    'Price': [2.48, 2.35, 2.91, 3.00]\n})\n\n# Initialize the items dictionary\nitems = {\n    'dried pear': 5,\n    'raisins': 5\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\ndried mango | $2.48 per kilogram\ndried pear | $2.35 per kilogram\ndried pineapple | $2.91 per kilogram\nraisins | $3.00 per kilogram"}
{"level":7,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of temperature at noon for 7 days and returns the range of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the temperature at noon for 7 days.\n    The dataframe should contain \"Day\" and \"Temperature (\u00c2\u00b0C)\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum temperature values\n    min_temp = df['Temperature (\u00c2\u00b0C)'].min()\n    max_temp = df['Temperature (\u00c2\u00b0C)'].max()\n    \n    # Calculate the range\n    temp_range = max_temp - min_temp\n    \n    return temp_range\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday'],\n    'Temperature (\u00c2\u00b0C)': [6, 8, 7, 4, 5, 5, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"Daniel graphed the temperature at noon for 7 days. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of temperature at noon for 7 days and returns the range of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the temperature at noon for 7 days.\n    The dataframe should contain \"Day\" and \"Temperature (\u00c2\u00b0C)\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum temperature values\n    min_temp = df['Temperature (\u00c2\u00b0C)'].min()\n    max_temp = df['Temperature (\u00c2\u00b0C)'].max()\n    \n    # Calculate the range\n    temp_range = max_temp - min_temp\n    \n    return temp_range","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday'],\n    'Temperature (\u00c2\u00b0C)': [6, 8, 7, 4, 5, 5, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Temperature at noon\nUnit: None\nContent:\nDay | Temperature (\u00c2\u00b0C)\nTuesday | 6\nWednesday | 8\nThursday | 7\nFriday | 4\nSaturday | 5\nSunday | 5\nMonday | 9"}
{"level":5,"answer":0.0,"prediction":"import pandas as pd\n\ndef count_offices_with_4_square_meters(df):\n    \"\"\"\n    This function takes in a pandas dataframe of office sizes and returns the number of offices that are exactly 4 square meters.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the sizes of offices.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of offices that are exactly 4 square meters.\n    \"\"\"\n    # prepare a list to store the sizes of each office\n    sizes = []\n    # iterate through the dataframe and extract the sizes of each office\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            sizes.append(stem * 10 + leaf[j])\n    # count the number of offices that are exactly 4 square meters\n    num_offices = sizes.count(4)\n    return num_offices\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[9], [1, 2], [4, 6, 8], [3, 6, 7], [4, 8, 8], [2, 3, 7, 8], [0, 5], [1, 1, 6], [8, 8], [0]]\n})\n# Call the tool to solve the problem\nprint(count_offices_with_4_square_meters(df))","question":"Herman, who rents properties for a living, measures all the offices in a building he is renting. How many offices are exactly 4 square meters?","prediction_code":"import pandas as pd\n\ndef count_offices_with_4_square_meters(df):\n    \"\"\"\n    This function takes in a pandas dataframe of office sizes and returns the number of offices that are exactly 4 square meters.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the sizes of offices.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of offices that are exactly 4 square meters.\n    \"\"\"\n    # prepare a list to store the sizes of each office\n    sizes = []\n    # iterate through the dataframe and extract the sizes of each office\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            sizes.append(stem * 10 + leaf[j])\n    # count the number of offices that are exactly 4 square meters\n    num_offices = sizes.count(4)\n    return num_offices","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[9], [1, 2], [4, 6, 8], [3, 6, 7], [4, 8, 8], [2, 3, 7, 8], [0, 5], [1, 1, 6], [8, 8], [0]]\n})\n# Call the tool to solve the problem\nprint(count_offices_with_4_square_meters(df))","table":"Name: Office sizes (square meters)\nUnit: offices\nContent:\nStem | Leaf \n0 | 9\n1 | 1, 2\n2 | 4, 6, 8\n3 | 3, 6, 7\n4 | 4, 8, 8\n5 | 2, 3, 7, 8\n6 | 0, 5\n7 | 1, 1, 6\n8 | 8, 8\n9 | 0"}
{"level":6,"answer":52.0,"prediction":"import pandas as pd\n\ndef find_smallest_team_size(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of track team sizes and returns the size of the smallest team.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the sizes of track teams.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The size of the smallest team.\n    \"\"\"\n    # prepare a list to store all team sizes\n    team_sizes = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the size of each team\n        team_size = stem * 10 + sum(leaf)\n        # add the team size to the list\n        team_sizes.append(team_size)\n    # find the smallest team size\n    smallest_team_size = min(team_sizes)\n    return smallest_team_size\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [5, 6, 7, 8],\n    'Leaf': [[2, 2, 6], [6], [], [0, 1]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_team_size(df))","question":"Mr. Palmer, a track coach, recorded the sizes of all the nearby track teams. What is the size of the smallest team?","prediction_code":"import pandas as pd\n\ndef find_smallest_team_size(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of track team sizes and returns the size of the smallest team.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the sizes of track teams.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The size of the smallest team.\n    \"\"\"\n    # prepare a list to store all team sizes\n    team_sizes = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the size of each team\n        team_size = stem * 10 + sum(leaf)\n        # add the team size to the list\n        team_sizes.append(team_size)\n    # find the smallest team size\n    smallest_team_size = min(team_sizes)\n    return smallest_team_size","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [5, 6, 7, 8],\n    'Leaf': [[2, 2, 6], [6], [], [0, 1]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_team_size(df))","table":"Name: Track team sizes (number of members)\nUnit: members\nContent:\nStem | Leaf \n5 | 2, 2, 6\n6 | 6\n7 | \n8 | 0, 1"}
{"level":4,"answer":77.0,"prediction":"import pandas as pd\n\ndef find_largest_number(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of red buttons per bag and returns the largest number of red buttons.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of red buttons per bag.\n    The DataFrame should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of red buttons.\n    \"\"\"\n    # Create an empty list to store all the red buttons\n    red_buttons = []\n    \n    # Iterate through each row of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Iterate through each leaf value in the row\n        for j in range(len(leaf)):\n            # Calculate the total number of red buttons in the bag\n            total_buttons = stem * 10 + leaf[j]\n            # Add the total number of red buttons to the list\n            red_buttons.append(total_buttons)\n    \n    # Find the largest number of red buttons\n    largest_number = max(red_buttons)\n    \n    return largest_number\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7],\n    'Leaf': [[0, 2, 4, 4], [6], [0, 2, 3, 4, 5, 8], [2, 3, 4, 6, 8, 9], [2, 7, 8], [1, 5, 6, 7]]\n})\n# Call the tool to solve the problem\nprint(find_largest_number(df))","question":"An employee at the craft store counted the number of red buttons in each bag of mixed buttons. What is the largest number of red buttons?","prediction_code":"import pandas as pd\n\ndef find_largest_number(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of red buttons per bag and returns the largest number of red buttons.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of red buttons per bag.\n    The DataFrame should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of red buttons.\n    \"\"\"\n    # Create an empty list to store all the red buttons\n    red_buttons = []\n    \n    # Iterate through each row of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Iterate through each leaf value in the row\n        for j in range(len(leaf)):\n            # Calculate the total number of red buttons in the bag\n            total_buttons = stem * 10 + leaf[j]\n            # Add the total number of red buttons to the list\n            red_buttons.append(total_buttons)\n    \n    # Find the largest number of red buttons\n    largest_number = max(red_buttons)\n    \n    return largest_number","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7],\n    'Leaf': [[0, 2, 4, 4], [6], [0, 2, 3, 4, 5, 8], [2, 3, 4, 6, 8, 9], [2, 7, 8], [1, 5, 6, 7]]\n})\n# Call the tool to solve the problem\nprint(find_largest_number(df))","table":"Name: Red buttons per bag\nUnit: red buttons\nContent:\nStem | Leaf \n2 | 0, 2, 4, 4\n3 | 6\n4 | 0, 2, 3, 4, 5, 8\n5 | 2, 3, 4, 6, 8, 9\n6 | 2, 7, 8\n7 | 1, 5, 6, 7"}
{"level":8,"answer":-4.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of students receiving scholarships and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of students receiving scholarships per year.\n    The dataframe should contain \"Year\" and \"Students\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_students = df[df['Year'] == start_year]['Students'].values[0]\n    end_students = df[df['Year'] == end_year]['Students'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_students - start_students) \/ start_students * 100\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2016, 2017, 2018, 2019, 2020],\n    'Students': [27, 23, 19, 18, 34]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2016, 2017))","question":"The financial aid office at Garza University produced an internal report on the number of students receiving scholarships. According to the table, what was the rate of change between 2016 and 2017?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of students receiving scholarships and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of students receiving scholarships per year.\n    The dataframe should contain \"Year\" and \"Students\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_students = df[df['Year'] == start_year]['Students'].values[0]\n    end_students = df[df['Year'] == end_year]['Students'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_students - start_students) \/ start_students * 100\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2016, 2017, 2018, 2019, 2020],\n    'Students': [27, 23, 19, 18, 34]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2016, 2017))","table":"Name: Students receiving scholarships\nUnit: students per year\nContent:\nYear | Students\n2016 | 27\n2017 | 23\n2018 | 19\n2019 | 18\n2020 | 34"}
{"level":5,"answer":210.0,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item2_price - item1_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['refrigerator', 'clothes dryer', 'oven', 'stove', 'washing machine', 'barbecue grill'],\n    'Price': [536.00, 253.00, 736.00, 750.00, 828.00, 946.00]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'oven', 'barbecue grill'))","question":"How much more does a barbecue grill cost than an oven?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item2_price - item1_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['refrigerator', 'clothes dryer', 'oven', 'stove', 'washing machine', 'barbecue grill'],\n    'Price': [536.00, 253.00, 736.00, 750.00, 828.00, 946.00]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'oven', 'barbecue grill'))","table":"Name: None\nUnit: $\nContent:\nrefrigerator | $536.00\nclothes dryer | $253.00\noven | $736.00\nstove | $750.00\nwashing machine | $828.00\nbarbecue grill | $946.00"}
{"level":7,"answer":12.0,"prediction":"import pandas as pd\n\ndef count_parks_with_13_roller_coasters(df):\n    \"\"\"\n    This function takes in a pandas dataframe of roller coasters per amusement park, and returns the number of amusement parks that have at least 13 roller coasters.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of roller coasters per amusement park.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of amusement parks that have at least 13 roller coasters.\n    \"\"\"\n    # prepare a list to calculate the number of roller coasters in each amusement park\n    roller_coasters = []\n    # calculate the total number of roller coasters in each amusement park\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            roller_coasters.append(stem * 10 + leaf[j])\n    # filter the amusement parks where the total number of roller coasters is greater than or equal to 13\n    filtered = [coasters for coasters in roller_coasters if coasters >= 13]\n    # count the number of rows\n    num_parks = len(filtered)\n    return num_parks\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[7, 8, 9], [6], [1, 6, 7], [3, 5, 5, 6, 9]]\n})\n# Call the tool to solve the problem\nprint(count_parks_with_13_roller_coasters(df))","question":"Mia found a list of the number of roller coasters at each amusement park in the state. How many amusement parks have at least 13 roller coasters?","prediction_code":"import pandas as pd\n\ndef count_parks_with_13_roller_coasters(df):\n    \"\"\"\n    This function takes in a pandas dataframe of roller coasters per amusement park, and returns the number of amusement parks that have at least 13 roller coasters.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of roller coasters per amusement park.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of amusement parks that have at least 13 roller coasters.\n    \"\"\"\n    # prepare a list to calculate the number of roller coasters in each amusement park\n    roller_coasters = []\n    # calculate the total number of roller coasters in each amusement park\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            roller_coasters.append(stem * 10 + leaf[j])\n    # filter the amusement parks where the total number of roller coasters is greater than or equal to 13\n    filtered = [coasters for coasters in roller_coasters if coasters >= 13]\n    # count the number of rows\n    num_parks = len(filtered)\n    return num_parks","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[7, 8, 9], [6], [1, 6, 7], [3, 5, 5, 6, 9]]\n})\n# Call the tool to solve the problem\nprint(count_parks_with_13_roller_coasters(df))","table":"Name: Roller coasters per amusement park\nUnit: amusement parks\nContent:\nStem | Leaf \n1 | 7, 8, 9\n2 | 6\n3 | 1, 6, 7\n4 | 3, 5, 5, 6, 9"}
{"level":3,"answer":8824.0,"prediction":"import pandas as pd\n\ndef count_phone_calls(df, companies):\n    \"\"\"\n    This function takes in a pandas DataFrame of phone calls per company and a list of companies, and returns the total number of phone calls made by the specified companies.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of phone calls per company.\n    The dataframe should contain \"Company\" and \"Number of phone calls\" columns.\n    companies (list): A list of company names.\n    Returns:\n    int: The total number of phone calls made by the specified companies.\n    \"\"\"\n    # Filter the DataFrame for the specified companies\n    filtered_df = df[df['Company'].isin(companies)]\n    \n    # Calculate the total number of phone calls made by the specified companies\n    total_calls = filtered_df['Number of phone calls'].sum()\n    \n    return total_calls\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Company': ['Nature Now', 'Brave New Day Corporation', 'Henderson Co.'],\n    'Number of phone calls': [8467, 1817, 7007]\n})\n\n# Specify the companies to count phone calls for\ncompanies = ['Brave New Day Corporation', 'Henderson Co.']\n\n# Call the tool to solve the problem\nprint(count_phone_calls(df, companies))","question":"Some companies compared how many phone calls they made. In all, how many phone calls did Brave New Day Corporation and Henderson Co. make?","prediction_code":"import pandas as pd\n\ndef count_phone_calls(df, companies):\n    \"\"\"\n    This function takes in a pandas DataFrame of phone calls per company and a list of companies, and returns the total number of phone calls made by the specified companies.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of phone calls per company.\n    The dataframe should contain \"Company\" and \"Number of phone calls\" columns.\n    companies (list): A list of company names.\n    Returns:\n    int: The total number of phone calls made by the specified companies.\n    \"\"\"\n    # Filter the DataFrame for the specified companies\n    filtered_df = df[df['Company'].isin(companies)]\n    \n    # Calculate the total number of phone calls made by the specified companies\n    total_calls = filtered_df['Number of phone calls'].sum()\n    \n    return total_calls","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Company': ['Nature Now', 'Brave New Day Corporation', 'Henderson Co.'],\n    'Number of phone calls': [8467, 1817, 7007]\n})\n\n# Specify the companies to count phone calls for\ncompanies = ['Brave New Day Corporation', 'Henderson Co.']\n\n# Call the tool to solve the problem\nprint(count_phone_calls(df, companies))","table":"Name: Phone calls\nUnit: phone calls\nContent:\nCompany | Number of phone calls\nNature Now | 8,467\nBrave New Day Corporation | 1,817\nHenderson Co. | 7,007"}
{"level":1,"answer":15.0,"prediction":"import pandas as pd\n\ndef calculate_total_empty_seats(df, num_vans):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of empty seats per van and the number of vans, and returns the total number of empty seats.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of empty seats per van.\n    The dataframe should contain \"Number of vans\" and \"Number of empty seats\" columns.\n    num_vans (int): The number of vans.\n    Returns:\n    int: The total number of empty seats.\n    \"\"\"\n    # Filter the DataFrame for the specified number of vans\n    filtered_df = df[df['Number of vans'] <= num_vans]\n    \n    # Calculate the total number of empty seats\n    total_empty_seats = filtered_df['Number of empty seats'].sum()\n    \n    return total_empty_seats\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of vans': [1, 2, 3],\n    'Number of empty seats': [5, 10, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_empty_seats(df, 3))","question":"Each van has 5 empty seats. How many empty seats are in 3 vans?","prediction_code":"import pandas as pd\n\ndef calculate_total_empty_seats(df, num_vans):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of empty seats per van and the number of vans, and returns the total number of empty seats.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of empty seats per van.\n    The dataframe should contain \"Number of vans\" and \"Number of empty seats\" columns.\n    num_vans (int): The number of vans.\n    Returns:\n    int: The total number of empty seats.\n    \"\"\"\n    # Filter the DataFrame for the specified number of vans\n    filtered_df = df[df['Number of vans'] <= num_vans]\n    \n    # Calculate the total number of empty seats\n    total_empty_seats = filtered_df['Number of empty seats'].sum()\n    \n    return total_empty_seats","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of vans': [1, 2, 3],\n    'Number of empty seats': [5, 10, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_empty_seats(df, 3))","table":"Name: None\nUnit: empty seats\nContent:\nNumber of vans | Number of empty seats\n1 | 5\n2 | 10\n3 | ?"}
{"level":8,"answer":2.0,"prediction":"import pandas as pd\n\ndef count_students_with_10_points(df):\n    \"\"\"\n    This function takes in a pandas dataframe of test scores per student, and returns the number of students who scored exactly 10 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the test scores per student.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of students who scored exactly 10 points.\n    \"\"\"\n    # prepare a list to calculate scores of each student\n    scores = []\n    # calculate the total score of each student\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # count the number of students who scored exactly 10 points\n    num_students = scores.count(10)\n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[0, 0, 4, 4, 4, 5, 9], [], [], [1, 2, 2, 2, 3], [4, 5, 7, 9, 9], [4, 4], [2, 9], [1]]\n})\n# Call the tool to solve the problem\nprint(count_students_with_10_points(df))","question":"Principal Carson reported the state test scores from some students at his school. How many students scored exactly 10 points?","prediction_code":"import pandas as pd\n\ndef count_students_with_10_points(df):\n    \"\"\"\n    This function takes in a pandas dataframe of test scores per student, and returns the number of students who scored exactly 10 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the test scores per student.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of students who scored exactly 10 points.\n    \"\"\"\n    # prepare a list to calculate scores of each student\n    scores = []\n    # calculate the total score of each student\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # count the number of students who scored exactly 10 points\n    num_students = scores.count(10)\n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[0, 0, 4, 4, 4, 5, 9], [], [], [1, 2, 2, 2, 3], [4, 5, 7, 9, 9], [4, 4], [2, 9], [1]]\n})\n# Call the tool to solve the problem\nprint(count_students_with_10_points(df))","table":"Name: Test scores\nUnit: students\nContent:\nStem | Leaf \n1 | 0, 0, 4, 4, 4, 5, 9\n2 | \n3 | \n4 | 1, 2, 2, 2, 3\n5 | 4, 5, 7, 9, 9\n6 | 4, 4\n7 | 2, 9\n8 | 1"}
{"level":8,"answer":16.0,"prediction":"import pandas as pd\n\ndef count_people_more_than_3_trips(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trips to the movies last month and returns the number of people who went to the movies more than 3 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of trips and their frequencies.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who went to the movies more than 3 times.\n    \"\"\"\n    # Filter the DataFrame for trips more than 3 times\n    filtered_df = df[df['Number of trips'] > 3]\n    \n    # Sum the frequencies of the filtered trips\n    num_people = filtered_df['Frequency'].sum()\n    \n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [0, 1, 2, 3, 4, 5],\n    'Frequency': [19, 3, 16, 20, 12, 4]\n})\n# Call the tool to solve the problem\nprint(count_people_more_than_3_trips(df))","question":"To determine whether people make fewer trips to the movies when the economy is bad, a reporter asked people how many movies they saw last month. How many people went to the movies more than 3 times?","prediction_code":"import pandas as pd\n\ndef count_people_more_than_3_trips(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trips to the movies last month and returns the number of people who went to the movies more than 3 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of trips and their frequencies.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who went to the movies more than 3 times.\n    \"\"\"\n    # Filter the DataFrame for trips more than 3 times\n    filtered_df = df[df['Number of trips'] > 3]\n    \n    # Sum the frequencies of the filtered trips\n    num_people = filtered_df['Frequency'].sum()\n    \n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [0, 1, 2, 3, 4, 5],\n    'Frequency': [19, 3, 16, 20, 12, 4]\n})\n# Call the tool to solve the problem\nprint(count_people_more_than_3_trips(df))","table":"Name: Trips to the movies last month\nUnit: None\nContent:\nNumber of trips | Frequency\n0 | 19\n1 | 3\n2 | 16\n3 | 20\n4 | 12\n5 | 4"}
{"level":3,"answer":10213.0,"prediction":"import pandas as pd\n\ndef calculate_total_books(df, days):\n    \"\"\"\n    This function takes in a pandas DataFrame of books checked out and a list of days, and returns the total number of books checked out on those days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of books checked out per day.\n    The DataFrame should contain \"Day\" and \"Number of books\" columns.\n    days (list): A list of days for which the total number of books checked out is to be calculated.\n    Returns:\n    int: The total number of books checked out on the specified days.\n    \"\"\"\n    # Filter the DataFrame for the specified days\n    filtered_df = df[df['Day'].isin(days)]\n    \n    # Calculate the total number of books checked out on the specified days\n    total_books = filtered_df['Number of books'].sum()\n    \n    return total_books\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday'],\n    'Number of books': [8930, 8879, 1283]\n})\n\n# Specify the days for which the total number of books checked out is to be calculated\ndays = ['Tuesday', 'Thursday']\n\n# Call the tool to solve the problem\nprint(calculate_total_books(df, days))","question":"The city library monitored the number of books checked out each day. How many books in total were checked out on Tuesday and Thursday?","prediction_code":"import pandas as pd\n\ndef calculate_total_books(df, days):\n    \"\"\"\n    This function takes in a pandas DataFrame of books checked out and a list of days, and returns the total number of books checked out on those days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of books checked out per day.\n    The DataFrame should contain \"Day\" and \"Number of books\" columns.\n    days (list): A list of days for which the total number of books checked out is to be calculated.\n    Returns:\n    int: The total number of books checked out on the specified days.\n    \"\"\"\n    # Filter the DataFrame for the specified days\n    filtered_df = df[df['Day'].isin(days)]\n    \n    # Calculate the total number of books checked out on the specified days\n    total_books = filtered_df['Number of books'].sum()\n    \n    return total_books","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday'],\n    'Number of books': [8930, 8879, 1283]\n})\n\n# Specify the days for which the total number of books checked out is to be calculated\ndays = ['Tuesday', 'Thursday']\n\n# Call the tool to solve the problem\nprint(calculate_total_books(df, days))","table":"Name: Books checked out\nUnit: books\nContent:\nDay | Number of books\nTuesday | 8,930\nWednesday | 8,879\nThursday | 1,283"}
{"level":6,"answer":1.0,"prediction":"import pandas as pd\n\ndef count_people_with_weight(df, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame of weight lifting results and a weight threshold, and returns the number of people who lifted at least the given weight.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the weight lifting results.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    weight (int): The weight threshold.\n    Returns:\n    int: The number of people who lifted at least the given weight.\n    \"\"\"\n    # prepare a list to calculate weight lifted by each person\n    weights = []\n    # calculate the total weight lifted by each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            weights.append(stem * 10 + leaf[j])\n    # filter the people who lifted at least the given weight\n    filtered = [w for w in weights if w >= weight]\n    # count the number of people\n    num_people = len(filtered)\n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[0, 1, 4, 6, 6, 9], [3, 5, 6], [0, 1, 2, 5, 8, 9], [0, 3, 3, 4, 7]]\n})\n# Set the weight threshold\nweight_threshold = 46\n# Call the tool to solve the problem\nprint(count_people_with_weight(df, weight_threshold))","question":"Mr. Huffman, a P.E. teacher, wrote down how much weight each of his students could lift. How many people lifted at least 46 pounds?","prediction_code":"import pandas as pd\n\ndef count_people_with_weight(df, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame of weight lifting results and a weight threshold, and returns the number of people who lifted at least the given weight.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the weight lifting results.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    weight (int): The weight threshold.\n    Returns:\n    int: The number of people who lifted at least the given weight.\n    \"\"\"\n    # prepare a list to calculate weight lifted by each person\n    weights = []\n    # calculate the total weight lifted by each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            weights.append(stem * 10 + leaf[j])\n    # filter the people who lifted at least the given weight\n    filtered = [w for w in weights if w >= weight]\n    # count the number of people\n    num_people = len(filtered)\n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[0, 1, 4, 6, 6, 9], [3, 5, 6], [0, 1, 2, 5, 8, 9], [0, 3, 3, 4, 7]]\n})\n# Set the weight threshold\nweight_threshold = 46\n# Call the tool to solve the problem\nprint(count_people_with_weight(df, weight_threshold))","table":"Name: Weight lifting results (lbs)\nUnit: people\nContent:\nStem | Leaf \n1 | 0, 1, 4, 6, 6, 9\n2 | 3, 5, 6\n3 | 0, 1, 2, 5, 8, 9\n4 | 0, 3, 3, 4, 7"}
{"level":7,"answer":1.35,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of buying a certain quantity of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price table with columns 'Item' and 'Price'.\n    item (str): The name of the item to be purchased.\n    quantity (int): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of buying the specified quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price of the item\n    price = item_df['Price'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price * quantity\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['red thumbtack', 'elastic band', 'gold tack', 'piece of plastic pipe', 'flat-head bolt'],\n    'Price': [0.15, 0.64, 0.19, 0.53, 0.44]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'red thumbtack', 9))","question":"How much money does Maggie need to buy 9 red thumbtacks?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of buying a certain quantity of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price table with columns 'Item' and 'Price'.\n    item (str): The name of the item to be purchased.\n    quantity (int): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of buying the specified quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price of the item\n    price = item_df['Price'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price * quantity\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['red thumbtack', 'elastic band', 'gold tack', 'piece of plastic pipe', 'flat-head bolt'],\n    'Price': [0.15, 0.64, 0.19, 0.53, 0.44]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'red thumbtack', 9))","table":"Name: None\nUnit: $\nContent:\nred thumbtack | $0.15\nelastic band | $0.64\ngold tack | $0.19\npiece of plastic pipe | $0.53\nflat-head bolt | $0.44"}
{"level":6,"answer":90.0,"prediction":"import pandas as pd\n\ndef find_largest_number_of_fish(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of fish per tank and returns the largest number of fish per tank.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of fish per tank.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of fish per tank.\n    \"\"\"\n    # Initialize the largest number of fish\n    largest_number_of_fish = 0\n    \n    # Iterate through the rows of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Calculate the total number of fish in the tank\n        total_fish = stem * 10 + sum(leaf)\n        \n        # Update the largest number of fish if necessary\n        if total_fish > largest_number_of_fish:\n            largest_number_of_fish = total_fish\n    \n    return largest_number_of_fish\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[0, 0], [3, 6, 9], [7], [0, 1, 1, 3, 4, 4, 6, 7, 7, 7], [6], [0, 2, 8], [], [3, 7], [0]]\n})\n# Call the tool to solve the problem\nprint(find_largest_number_of_fish(df))","question":"A pet store owner had her staff count the number of fish in each tank. What is the largest number of fish per tank?","prediction_code":"import pandas as pd\n\ndef find_largest_number_of_fish(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of fish per tank and returns the largest number of fish per tank.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of fish per tank.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of fish per tank.\n    \"\"\"\n    # Initialize the largest number of fish\n    largest_number_of_fish = 0\n    \n    # Iterate through the rows of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Calculate the total number of fish in the tank\n        total_fish = stem * 10 + sum(leaf)\n        \n        # Update the largest number of fish if necessary\n        if total_fish > largest_number_of_fish:\n            largest_number_of_fish = total_fish\n    \n    return largest_number_of_fish","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[0, 0], [3, 6, 9], [7], [0, 1, 1, 3, 4, 4, 6, 7, 7, 7], [6], [0, 2, 8], [], [3, 7], [0]]\n})\n# Call the tool to solve the problem\nprint(find_largest_number_of_fish(df))","table":"Name: Fish per tank\nUnit: fish\nContent:\nStem | Leaf \n1 | 0, 0\n2 | 3, 6, 9\n3 | 7\n4 | 0, 1, 1, 3, 4, 4, 6, 7, 7, 7\n5 | 6\n6 | 0, 2, 8\n7 | \n8 | 3, 7\n9 | 0"}
{"level":4,"answer":2.0,"prediction":"import pandas as pd\n\ndef calculate_price_difference(menu_df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table and two menu items, and returns the price difference between the two items.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first menu item.\n    item2 (str): The name of the second menu item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = menu_df[menu_df['Item'] == item1]\n    item2_df = menu_df[menu_df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item2_price - item1_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['mushroom pizza', 'ravioli', 'pasta with meat sauce', 'baked ziti'],\n    'Price': [11, 16, 14, 13]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'baked ziti', 'mushroom pizza'))","question":"How much more does baked ziti cost than a mushroom pizza?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(menu_df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table and two menu items, and returns the price difference between the two items.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first menu item.\n    item2 (str): The name of the second menu item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = menu_df[menu_df['Item'] == item1]\n    item2_df = menu_df[menu_df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item2_price - item1_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['mushroom pizza', 'ravioli', 'pasta with meat sauce', 'baked ziti'],\n    'Price': [11, 16, 14, 13]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'baked ziti', 'mushroom pizza'))","table":"Name: None\nUnit: $\nContent:\nmushroom pizza | $11\nravioli | $16\npasta with meat sauce | $14\nbaked ziti | $13"}
{"level":6,"answer":1.2,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its price per pound and the quantity purchased.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per pound for each item.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item purchased in pounds.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price per pound for the item\n        price_per_pound = item_df['Unit'].values[0]\n        \n        # Calculate the total cost\n        total_cost = price_per_pound * quantity\n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['muesli', 'puffed rice', 'shredded wheat', 'granola', 'puffed wheat', 'bran flakes'],\n    'Unit': [3, 2, 6, 5, 2, 2]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'puffed rice', 0.6))","question":"Anna buys 0.6 pounds of puffed rice. How much does she spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its price per pound and the quantity purchased.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per pound for each item.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item purchased in pounds.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price per pound for the item\n        price_per_pound = item_df['Unit'].values[0]\n        \n        # Calculate the total cost\n        total_cost = price_per_pound * quantity\n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['muesli', 'puffed rice', 'shredded wheat', 'granola', 'puffed wheat', 'bran flakes'],\n    'Unit': [3, 2, 6, 5, 2, 2]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'puffed rice', 0.6))","table":"Name: None\nUnit: $\nContent:\nmuesli | $3 per pound\npuffed rice | $2 per pound\nshredded wheat | $6 per pound\ngranola | $5 per pound\npuffed wheat | $2 per pound\nbran flakes | $2 per pound"}
{"level":7,"answer":3.0,"prediction":"import pandas as pd\n\ndef count_people_with_situps(df, min_situps, max_situps):\n    \"\"\"\n    This function takes in a pandas dataframe of sit-up competition results and returns the number of people who did at least min_situps but fewer than max_situps sit-ups.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of sit-ups per person.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_situps (int): The minimum number of sit-ups.\n    max_situps (int): The maximum number of sit-ups.\n    Returns:\n    int: The number of people who did at least min_situps but fewer than max_situps sit-ups.\n    \"\"\"\n    # prepare a list to calculate sit-ups for each person\n    situps = []\n    # calculate the total number of sit-ups for each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            situps.append(stem * 10 + leaf[j])\n    # filter the people who did at least min_situps but fewer than max_situps sit-ups\n    filtered = [situp for situp in situps if situp >= min_situps and situp < max_situps]\n    # count the number of rows\n    num_people = len(filtered)\n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[0, 0], [0, 2, 4, 7, 7, 9, 9, 9], [3, 5, 7], [5, 8, 9], [0, 1, 8], [0, 5, 6, 8], [5, 6]]\n})\n# Call the tool to solve the problem\nprint(count_people_with_situps(df, 50, 60))","question":"Miss Hamilton ran a sit-up competition among her P.E. students and monitored how many sit-ups each students could do. How many people did at least 50 sit-ups but fewer than 60 sit-ups?","prediction_code":"import pandas as pd\n\ndef count_people_with_situps(df, min_situps, max_situps):\n    \"\"\"\n    This function takes in a pandas dataframe of sit-up competition results and returns the number of people who did at least min_situps but fewer than max_situps sit-ups.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of sit-ups per person.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_situps (int): The minimum number of sit-ups.\n    max_situps (int): The maximum number of sit-ups.\n    Returns:\n    int: The number of people who did at least min_situps but fewer than max_situps sit-ups.\n    \"\"\"\n    # prepare a list to calculate sit-ups for each person\n    situps = []\n    # calculate the total number of sit-ups for each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            situps.append(stem * 10 + leaf[j])\n    # filter the people who did at least min_situps but fewer than max_situps sit-ups\n    filtered = [situp for situp in situps if situp >= min_situps and situp < max_situps]\n    # count the number of rows\n    num_people = len(filtered)\n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[0, 0], [0, 2, 4, 7, 7, 9, 9, 9], [3, 5, 7], [5, 8, 9], [0, 1, 8], [0, 5, 6, 8], [5, 6]]\n})\n# Call the tool to solve the problem\nprint(count_people_with_situps(df, 50, 60))","table":"Name: Sit-up competition (number of sit-ups)\nUnit: people\nContent:\nStem | Leaf \n2 | 0, 0\n3 | 0, 2, 4, 7, 7, 9, 9, 9\n4 | 3, 5, 7\n5 | 5, 8, 9\n6 | 0, 1, 8\n7 | 0, 5, 6, 8\n8 | 5, 6"}
{"level":8,"answer":7.0,"prediction":"import pandas as pd\n\ndef calculate_mean(df, num_days):\n    \"\"\"\n    This function takes in a pandas DataFrame of photographs taken and the number of days to consider, and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of photographs taken per day.\n    The DataFrame should have columns 'Day' and 'Number of photographs'.\n    num_days (int): The number of days to consider for calculating the mean.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Filter the DataFrame for the past num_days days\n    filtered_df = df.tail(num_days)\n    \n    # Calculate the mean of the numbers\n    mean = filtered_df['Number of photographs'].mean()\n    \n    return mean\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Number of photographs': [9, 8, 9, 2, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df, 5))","question":"Megan looked at the dates of the digital photos on her computer to find out how many she had taken in the past 5 days. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean(df, num_days):\n    \"\"\"\n    This function takes in a pandas DataFrame of photographs taken and the number of days to consider, and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of photographs taken per day.\n    The DataFrame should have columns 'Day' and 'Number of photographs'.\n    num_days (int): The number of days to consider for calculating the mean.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Filter the DataFrame for the past num_days days\n    filtered_df = df.tail(num_days)\n    \n    # Calculate the mean of the numbers\n    mean = filtered_df['Number of photographs'].mean()\n    \n    return mean","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Number of photographs': [9, 8, 9, 2, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df, 5))","table":"Name: Photographs taken\nUnit: None\nContent:\nDay | Number of photographs\nSunday | 9\nMonday | 8\nTuesday | 9\nWednesday | 2\nThursday | 7"}
{"level":5,"answer":5.0,"prediction":"import pandas as pd\n\ndef count_committees(df, min_members, max_members):\n    \"\"\"\n    This function takes in a pandas DataFrame of committee sizes and returns the number of committees that have at least min_members members but fewer than max_members members.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the sizes of committees.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_members (int): The minimum number of members a committee should have.\n    max_members (int): The maximum number of members a committee should have.\n    Returns:\n    int: The number of committees that meet the criteria.\n    \"\"\"\n    # prepare a list to store the sizes of committees\n    committee_sizes = []\n    \n    # iterate through the dataframe and extract the sizes of committees\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            committee_sizes.append(stem * 10 + leaf[j])\n    \n    # filter the committees that have at least min_members members but fewer than max_members members\n    filtered_committees = [size for size in committee_sizes if min_members <= size < max_members]\n    \n    # count the number of committees\n    num_committees = len(filtered_committees)\n    \n    return num_committees\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [5, 6, 7, 8, 9],\n    'Leaf': [[1], [7], [4, 4, 6, 6], [5, 5, 9], [0, 0]]\n})\n# Call the tool to solve the problem\nprint(count_committees(df, 77, 99))","question":"While writing a paper on making decisions in groups, Bridget researched the size of a number of committees. How many committees have at least 77 members but fewer than 99 members?","prediction_code":"import pandas as pd\n\ndef count_committees(df, min_members, max_members):\n    \"\"\"\n    This function takes in a pandas DataFrame of committee sizes and returns the number of committees that have at least min_members members but fewer than max_members members.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the sizes of committees.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_members (int): The minimum number of members a committee should have.\n    max_members (int): The maximum number of members a committee should have.\n    Returns:\n    int: The number of committees that meet the criteria.\n    \"\"\"\n    # prepare a list to store the sizes of committees\n    committee_sizes = []\n    \n    # iterate through the dataframe and extract the sizes of committees\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            committee_sizes.append(stem * 10 + leaf[j])\n    \n    # filter the committees that have at least min_members members but fewer than max_members members\n    filtered_committees = [size for size in committee_sizes if min_members <= size < max_members]\n    \n    # count the number of committees\n    num_committees = len(filtered_committees)\n    \n    return num_committees","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [5, 6, 7, 8, 9],\n    'Leaf': [[1], [7], [4, 4, 6, 6], [5, 5, 9], [0, 0]]\n})\n# Call the tool to solve the problem\nprint(count_committees(df, 77, 99))","table":"Name: Committee sizes (number of members)\nUnit: committees\nContent:\nStem | Leaf \n5 | 1\n6 | 7\n7 | 4, 4, 6, 6\n8 | 5, 5, 9\n9 | 0, 0"}
{"level":6,"answer":7.4,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its price per unit and the quantity purchased.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per unit for different items.\n    item (str): The name of the item for which the total cost needs to be calculated.\n    quantity (float): The quantity of the item purchased.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price per unit for the item\n        price_per_unit = item_df['Unit'].values[0]\n        \n        # Calculate the total cost\n        total_cost = price_per_unit * quantity\n        \n        return total_cost\n    else:\n        return None\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['boysenberries', 'raspberries', 'strawberries', 'loganberries', 'blueberries'],\n    'Unit': [2, 6, 2, 5, 1]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'boysenberries', 3.7))","question":"Reagan buys 3.7 pounds of boysenberries. How much does she spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its price per unit and the quantity purchased.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per unit for different items.\n    item (str): The name of the item for which the total cost needs to be calculated.\n    quantity (float): The quantity of the item purchased.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price per unit for the item\n        price_per_unit = item_df['Unit'].values[0]\n        \n        # Calculate the total cost\n        total_cost = price_per_unit * quantity\n        \n        return total_cost\n    else:\n        return None","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['boysenberries', 'raspberries', 'strawberries', 'loganberries', 'blueberries'],\n    'Unit': [2, 6, 2, 5, 1]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'boysenberries', 3.7))","table":"Name: None\nUnit: $\nContent:\nboysenberries | $2\/lb\nraspberries | $6\/lb\nstrawberries | $2\/lb\nloganberries | $5\/lb\nblueberries | $1\/lb"}
{"level":6,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pages written and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of pages written each day.\n    The DataFrame should have columns 'Day' and 'Number of pages'.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the 'Number of pages' column as a Series\n    pages_series = df['Number of pages']\n    \n    # Calculate the median using the median() function from pandas\n    median = pages_series.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Number of pages': [1, 9, 1, 1, 6, 7, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"An author kept a log of how many pages he wrote in the past 7 days. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pages written and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of pages written each day.\n    The DataFrame should have columns 'Day' and 'Number of pages'.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the 'Number of pages' column as a Series\n    pages_series = df['Number of pages']\n    \n    # Calculate the median using the median() function from pandas\n    median = pages_series.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Number of pages': [1, 9, 1, 1, 6, 7, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Pages written\nUnit: None\nContent:\nDay | Number of pages\nSaturday | 1\nSunday | 9\nMonday | 1\nTuesday | 1\nWednesday | 6\nThursday | 7\nFriday | 5"}
{"level":8,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of emails received per day and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of emails received per day.\n    The dataframe should contain \"Day\" and \"Emails\" columns.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Get the number of emails for day1 and day2\n    emails_day1 = df[df['Day'] == day1]['Emails'].values[0]\n    emails_day2 = df[df['Day'] == day2]['Emails'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (emails_day2 - emails_day1) \/ emails_day1\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Emails': [10, 9, 2, 5, 10]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Wednesday', 'Thursday'))","question":"Linda kept a tally of the number of emails she received each day for a week. According to the table, what was the rate of change between Wednesday and Thursday?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of emails received per day and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of emails received per day.\n    The dataframe should contain \"Day\" and \"Emails\" columns.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Get the number of emails for day1 and day2\n    emails_day1 = df[df['Day'] == day1]['Emails'].values[0]\n    emails_day2 = df[df['Day'] == day2]['Emails'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (emails_day2 - emails_day1) \/ emails_day1\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Emails': [10, 9, 2, 5, 10]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Wednesday', 'Thursday'))","table":"Name: Emails Linda received\nUnit: emails per day\nContent:\nDay | Emails\nSunday | 10\nMonday | 9\nTuesday | 2\nWednesday | 5\nThursday | 10"}
{"level":5,"answer":3.0,"prediction":"import pandas as pd\n\ndef count_bins_with_toys(df):\n    \"\"\"\n    This function takes in a pandas dataframe of toys per bin, and returns the number of bins that have at least 60 toys but fewer than 70 toys.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of toys per bin.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of bins that have at least 60 toys but fewer than 70 toys.\n    \"\"\"\n    # prepare a list to calculate the number of toys in each bin\n    toys = []\n    # calculate the total number of toys in each bin\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            toys.append(stem * 10 + leaf[j])\n    # filter the bins where the total number of toys is greater than or equal to 60 but less than 70\n    filtered = [toy for toy in toys if 60 <= toy < 70]\n    # count the number of bins\n    num_bins = len(filtered)\n    return num_bins\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6],\n    'Leaf': [[0, 0, 4, 9], [2, 7], [], [9], [7, 8, 8]]\n})\n# Call the tool to solve the problem\nprint(count_bins_with_toys(df))","question":"A toy store employee counted the number of toys in each bin in the sale section. How many bins had at least 60 toys but fewer than 70 toys?","prediction_code":"import pandas as pd\n\ndef count_bins_with_toys(df):\n    \"\"\"\n    This function takes in a pandas dataframe of toys per bin, and returns the number of bins that have at least 60 toys but fewer than 70 toys.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of toys per bin.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of bins that have at least 60 toys but fewer than 70 toys.\n    \"\"\"\n    # prepare a list to calculate the number of toys in each bin\n    toys = []\n    # calculate the total number of toys in each bin\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            toys.append(stem * 10 + leaf[j])\n    # filter the bins where the total number of toys is greater than or equal to 60 but less than 70\n    filtered = [toy for toy in toys if 60 <= toy < 70]\n    # count the number of bins\n    num_bins = len(filtered)\n    return num_bins","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6],\n    'Leaf': [[0, 0, 4, 9], [2, 7], [], [9], [7, 8, 8]]\n})\n# Call the tool to solve the problem\nprint(count_bins_with_toys(df))","table":"Name: Toys per bin\nUnit: bins\nContent:\nStem | Leaf \n2 | 0, 0, 4, 9\n3 | 2, 7\n4 | \n5 | 9\n6 | 7, 8, 8"}
{"level":8,"answer":63.0,"prediction":"import pandas as pd\n\ndef count_students(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of books read by students and returns the total number of students.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of books read by students.\n    The dataframe should contain \"Books read\" and \"Frequency\" columns.\n    Returns:\n    int: The total number of students.\n    \"\"\"\n    # Sum the frequencies in the \"Frequency\" column\n    total_students = df['Frequency'].sum()\n    \n    return total_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Books read': [0, 1, 2, 3, 4, 5, 6],\n    'Frequency': [18, 14, 4, 7, 13, 5, 2]\n})\n# Call the tool to solve the problem\nprint(count_students(df))","question":"Mr. Livingston, the English teacher, had his students track the number of books they read last month. How many students are there in all?","prediction_code":"import pandas as pd\n\ndef count_students(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of books read by students and returns the total number of students.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of books read by students.\n    The dataframe should contain \"Books read\" and \"Frequency\" columns.\n    Returns:\n    int: The total number of students.\n    \"\"\"\n    # Sum the frequencies in the \"Frequency\" column\n    total_students = df['Frequency'].sum()\n    \n    return total_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Books read': [0, 1, 2, 3, 4, 5, 6],\n    'Frequency': [18, 14, 4, 7, 13, 5, 2]\n})\n# Call the tool to solve the problem\nprint(count_students(df))","table":"Name: Reading books last month\nUnit: None\nContent:\nBooks read | Frequency\n0 | 18\n1 | 14\n2 | 4\n3 | 7\n4 | 13\n5 | 5\n6 | 2"}
{"level":8,"answer":70.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table, an item name, and a quantity, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (int): The quantity of the item.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['beach towel', 'quilt', 'fleece blanket', 'pillow', 'navy blue bath mat', 'flannel sheet'],\n    'Price': [10, 12, 13, 15, 17, 10]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'beach towel', 7))","question":"How much money does Danielle need to buy 7 beach towels?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table, an item name, and a quantity, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (int): The quantity of the item.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['beach towel', 'quilt', 'fleece blanket', 'pillow', 'navy blue bath mat', 'flannel sheet'],\n    'Price': [10, 12, 13, 15, 17, 10]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'beach towel', 7))","table":"Name: None\nUnit: $\nContent:\nbeach towel | $10\nquilt | $12\nfleece blanket | $13\npillow | $15\nnavy blue bath mat | $17\nflannel sheet | $10"}
{"level":8,"answer":58.0,"prediction":"import pandas as pd\n\ndef find_largest_number_of_shoes(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pairs of shoes per store and returns the largest number of pairs of shoes.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pairs of shoes per store.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of pairs of shoes.\n    \"\"\"\n    # prepare a list to store the number of pairs of shoes\n    shoes = []\n    # calculate the total number of pairs of shoes in each store\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            shoes.append(stem * 10 + leaf[j])\n    # find the largest number of pairs of shoes\n    largest_number = max(shoes)\n    return largest_number\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5],\n    'Leaf': [[0, 5, 6, 7, 7, 7, 8, 9], [0, 4], [0, 6, 8], [0, 1, 2, 6, 6, 8]]\n})\n# Call the tool to solve the problem\nprint(find_largest_number_of_shoes(df))","question":"Abigail counted the number of pairs of shoes for sale at each of the shoe stores in the mall. What is the largest number of pairs of shoes?","prediction_code":"import pandas as pd\n\ndef find_largest_number_of_shoes(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pairs of shoes per store and returns the largest number of pairs of shoes.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pairs of shoes per store.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of pairs of shoes.\n    \"\"\"\n    # prepare a list to store the number of pairs of shoes\n    shoes = []\n    # calculate the total number of pairs of shoes in each store\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            shoes.append(stem * 10 + leaf[j])\n    # find the largest number of pairs of shoes\n    largest_number = max(shoes)\n    return largest_number","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5],\n    'Leaf': [[0, 5, 6, 7, 7, 7, 8, 9], [0, 4], [0, 6, 8], [0, 1, 2, 6, 6, 8]]\n})\n# Call the tool to solve the problem\nprint(find_largest_number_of_shoes(df))","table":"Name: Pairs of shoes per store\nUnit: pairs of shoes\nContent:\nStem | Leaf \n2 | 0, 5, 6, 7, 7, 7, 8, 9\n3 | 0, 4\n4 | 0, 6, 8\n5 | 0, 1, 2, 6, 6, 8"}
{"level":6,"answer":4.0,"prediction":"import pandas as pd\n\ndef count_people_with_at_least_62_points(df):\n    \"\"\"\n    This function takes in a pandas dataframe of game show scores and returns the number of people who scored at least 62 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the scores of the contestants.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of people who scored at least 62 points.\n    \"\"\"\n    # prepare a list to calculate scores of each person\n    scores = []\n    # calculate the total score of each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # filter the people who scored at least 62 points\n    filtered = [score for score in scores if score >= 62]\n    # count the number of rows\n    num_people = len(filtered)\n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6],\n    'Leaf': [[1, 6, 7, 7, 7], [1], [1, 6], [3, 5, 6, 9]]\n})\n# Call the tool to solve the problem\nprint(count_people_with_at_least_62_points(df))","question":"The staff of a game show tracked the performance of all the contestants during the past season. How many people scored at least 62 points?","prediction_code":"import pandas as pd\n\ndef count_people_with_at_least_62_points(df):\n    \"\"\"\n    This function takes in a pandas dataframe of game show scores and returns the number of people who scored at least 62 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the scores of the contestants.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of people who scored at least 62 points.\n    \"\"\"\n    # prepare a list to calculate scores of each person\n    scores = []\n    # calculate the total score of each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # filter the people who scored at least 62 points\n    filtered = [score for score in scores if score >= 62]\n    # count the number of rows\n    num_people = len(filtered)\n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6],\n    'Leaf': [[1, 6, 7, 7, 7], [1], [1, 6], [3, 5, 6, 9]]\n})\n# Call the tool to solve the problem\nprint(count_people_with_at_least_62_points(df))","table":"Name: Game show scores\nUnit: people\nContent:\nStem | Leaf \n3 | 1, 6, 7, 7, 7\n4 | 1\n5 | 1, 6\n6 | 3, 5, 6, 9"}
{"level":4,"answer":1.0,"prediction":"import pandas as pd\n\ndef count_clubs_with_27_members(df):\n    \"\"\"\n    This function takes in a pandas dataframe of club sizes and returns the number of clubs that have exactly 27 members.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the sizes of the clubs.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of clubs that have exactly 27 members.\n    \"\"\"\n    # prepare a list to calculate the size of each club\n    club_sizes = []\n    # calculate the size of each club\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            club_sizes.append(stem * 10 + leaf[j])\n    # count the number of clubs with exactly 27 members\n    num_clubs = club_sizes.count(27)\n    return num_clubs\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[0, 4, 4, 4, 4, 8], [7], [3, 7], [9], [7], [3], [], [0, 2, 5]]\n})\n# Call the tool to solve the problem\nprint(count_clubs_with_27_members(df))","question":"Alice found out the sizes of all the clubs at her school. How many clubs have exactly 27 members?","prediction_code":"import pandas as pd\n\ndef count_clubs_with_27_members(df):\n    \"\"\"\n    This function takes in a pandas dataframe of club sizes and returns the number of clubs that have exactly 27 members.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the sizes of the clubs.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of clubs that have exactly 27 members.\n    \"\"\"\n    # prepare a list to calculate the size of each club\n    club_sizes = []\n    # calculate the size of each club\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            club_sizes.append(stem * 10 + leaf[j])\n    # count the number of clubs with exactly 27 members\n    num_clubs = club_sizes.count(27)\n    return num_clubs","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[0, 4, 4, 4, 4, 8], [7], [3, 7], [9], [7], [3], [], [0, 2, 5]]\n})\n# Call the tool to solve the problem\nprint(count_clubs_with_27_members(df))","table":"Name: Club sizes (number of members)\nUnit: None\nContent:\nStem | Leaf \n1 | 0, 4, 4, 4, 4, 8\n2 | 7\n3 | 3, 7\n4 | 9\n5 | 7\n6 | 3\n7 | \n8 | 0, 2, 5"}
{"level":8,"answer":17.0,"prediction":"import pandas as pd\n\ndef count_students_with_5_sweatshirts(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of sweatshirt data and returns the number of students who have exactly 5 sweatshirts.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of sweatshirts and their frequencies.\n    The dataframe should contain \"Number of sweatshirts\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who have exactly 5 sweatshirts.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of sweatshirts is 5\n    filtered_df = df[df['Number of sweatshirts'] == 5]\n    \n    # Get the frequency of students with 5 sweatshirts\n    num_students = filtered_df['Frequency'].values[0]\n    \n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of sweatshirts': [0, 1, 2, 3, 4, 5, 6],\n    'Frequency': [11, 18, 0, 14, 10, 17, 4]\n})\n# Call the tool to solve the problem\nprint(count_students_with_5_sweatshirts(df))","question":"The Salem Middle School fundraising committee found out how many sweatshirts students already had, in order to decide whether to sell sweatshirts for a fundraiser. How many students in the class have exactly 5 sweatshirts?","prediction_code":"import pandas as pd\n\ndef count_students_with_5_sweatshirts(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of sweatshirt data and returns the number of students who have exactly 5 sweatshirts.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of sweatshirts and their frequencies.\n    The dataframe should contain \"Number of sweatshirts\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who have exactly 5 sweatshirts.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of sweatshirts is 5\n    filtered_df = df[df['Number of sweatshirts'] == 5]\n    \n    # Get the frequency of students with 5 sweatshirts\n    num_students = filtered_df['Frequency'].values[0]\n    \n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of sweatshirts': [0, 1, 2, 3, 4, 5, 6],\n    'Frequency': [11, 18, 0, 14, 10, 17, 4]\n})\n# Call the tool to solve the problem\nprint(count_students_with_5_sweatshirts(df))","table":"Name: Sweatshirts\nUnit: None\nContent:\nNumber of sweatshirts | Frequency\n0 | 11\n1 | 18\n2 | 0\n3 | 14\n4 | 10\n5 | 17\n6 | 4"}
{"level":5,"answer":6.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of club membership and returns the range of the numbers of clubs.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the names and numbers of clubs for each student.\n    The DataFrame should have columns 'Name' and 'Number of clubs'.\n    Returns:\n    int: The range of the numbers of clubs.\n    \"\"\"\n    # Get the maximum and minimum values of the 'Number of clubs' column\n    max_clubs = df['Number of clubs'].max()\n    min_clubs = df['Number of clubs'].min()\n    \n    # Calculate the range\n    club_range = max_clubs - min_clubs\n    \n    return club_range\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Joseph', 'Allie', 'Eliana', 'Leroy', 'David', 'Tucker', 'Xavier'],\n    'Number of clubs': [8, 7, 2, 6, 2, 7, 4]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"Some students compared how many clubs they belong to. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of club membership and returns the range of the numbers of clubs.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the names and numbers of clubs for each student.\n    The DataFrame should have columns 'Name' and 'Number of clubs'.\n    Returns:\n    int: The range of the numbers of clubs.\n    \"\"\"\n    # Get the maximum and minimum values of the 'Number of clubs' column\n    max_clubs = df['Number of clubs'].max()\n    min_clubs = df['Number of clubs'].min()\n    \n    # Calculate the range\n    club_range = max_clubs - min_clubs\n    \n    return club_range","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Joseph', 'Allie', 'Eliana', 'Leroy', 'David', 'Tucker', 'Xavier'],\n    'Number of clubs': [8, 7, 2, 6, 2, 7, 4]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Clubs\nUnit: None\nContent:\nName | Number of clubs\nJoseph | 8\nAllie | 7\nEliana | 2\nLeroy | 6\nDavid | 2\nTucker | 7\nXavier | 4"}
{"level":3,"answer":4654.0,"prediction":"import pandas as pd\n\ndef calculate_cans_difference(df, person1, person2):\n    \"\"\"\n    This function takes in a pandas DataFrame of cans of food collected by different people and returns the difference in the number of cans collected by two specified people.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the names of people and the number of cans of food they collected.\n    person1 (str): The name of the first person.\n    person2 (str): The name of the second person.\n    Returns:\n    int: The difference in the number of cans collected by person1 and person2.\n    \"\"\"\n    # Filter the DataFrame for the specified people\n    person1_df = df[df['Name'] == person1]\n    person2_df = df[df['Name'] == person2]\n    \n    # Get the number of cans collected by each person\n    person1_cans = person1_df['Number of cans of food'].values[0]\n    person2_cans = person2_df['Number of cans of food'].values[0]\n    \n    # Calculate the difference in the number of cans collected\n    cans_difference = person1_cans - person2_cans\n    \n    return cans_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Kira', 'Julie', 'Erik'],\n    'Number of cans of food': [8280, 3626, 6612]\n})\n# Call the tool to solve the problem\nprint(calculate_cans_difference(df, 'Kira', 'Julie'))","question":"Kira's class recorded how many cans of food each student collected for their canned food drive. How many more cans of food did Kira collect than Julie?","prediction_code":"import pandas as pd\n\ndef calculate_cans_difference(df, person1, person2):\n    \"\"\"\n    This function takes in a pandas DataFrame of cans of food collected by different people and returns the difference in the number of cans collected by two specified people.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the names of people and the number of cans of food they collected.\n    person1 (str): The name of the first person.\n    person2 (str): The name of the second person.\n    Returns:\n    int: The difference in the number of cans collected by person1 and person2.\n    \"\"\"\n    # Filter the DataFrame for the specified people\n    person1_df = df[df['Name'] == person1]\n    person2_df = df[df['Name'] == person2]\n    \n    # Get the number of cans collected by each person\n    person1_cans = person1_df['Number of cans of food'].values[0]\n    person2_cans = person2_df['Number of cans of food'].values[0]\n    \n    # Calculate the difference in the number of cans collected\n    cans_difference = person1_cans - person2_cans\n    \n    return cans_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Kira', 'Julie', 'Erik'],\n    'Number of cans of food': [8280, 3626, 6612]\n})\n# Call the tool to solve the problem\nprint(calculate_cans_difference(df, 'Kira', 'Julie'))","table":"Name: Cans of food collected\nUnit: cans\nContent:\nName | Number of cans of food\nKira | 8,280\nJulie | 3,626\nErik | 6,612"}
{"level":4,"answer":0.74,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, book1, book2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a book price table and two book names, and returns the price difference between the two books.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing book names and their prices with columns 'Name' and 'Price'.\n    book1 (str): The name of the first book.\n    book2 (str): The name of the second book.\n    Returns:\n    float: The price difference between the two books.\n    \"\"\"\n    # Filter the DataFrame for the two books\n    book1_df = df[df['Name'] == book1]\n    book2_df = df[df['Name'] == book2]\n    \n    # Get the prices of the two books\n    book1_price = book1_df['Price'].values[0]\n    book2_price = book2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = book2_price - book1_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['math book', 'science book', 'mystery novel', 'crossword puzzle book'],\n    'Price': [11.55, 15.21, 16.76, 15.95]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'science book', 'crossword puzzle book'))","question":"How much more does a crossword puzzle book cost than a science book?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, book1, book2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a book price table and two book names, and returns the price difference between the two books.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing book names and their prices with columns 'Name' and 'Price'.\n    book1 (str): The name of the first book.\n    book2 (str): The name of the second book.\n    Returns:\n    float: The price difference between the two books.\n    \"\"\"\n    # Filter the DataFrame for the two books\n    book1_df = df[df['Name'] == book1]\n    book2_df = df[df['Name'] == book2]\n    \n    # Get the prices of the two books\n    book1_price = book1_df['Price'].values[0]\n    book2_price = book2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = book2_price - book1_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['math book', 'science book', 'mystery novel', 'crossword puzzle book'],\n    'Price': [11.55, 15.21, 16.76, 15.95]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'science book', 'crossword puzzle book'))","table":"Name: None\nUnit: $\nContent:\nmath book | $11.55\nscience book | $15.21\nmystery novel | $16.76\ncrossword puzzle book | $15.95"}
{"level":8,"answer":-15.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average food preparation time and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average food preparation time for each day.\n    The DataFrame should have columns 'Day' and 'Food preparation time (minutes)'.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Filter the DataFrame for the two days\n    day1_df = df[df['Day'] == day1]\n    day2_df = df[df['Day'] == day2]\n    \n    # Get the food preparation time for each day\n    day1_time = day1_df['Food preparation time (minutes)'].values[0]\n    day2_time = day2_df['Food preparation time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (day2_time - day1_time) \/ (df.index.get_loc(day2_df.index[0]) - df.index.get_loc(day1_df.index[0]))\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Food preparation time (minutes)': [37, 22, 32, 29, 19]\n})\n\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Monday', 'Tuesday'))","question":"A restaurant's average food preparation time was tracked from day to day as part of an efficiency improvement program. According to the table, what was the rate of change between Monday and Tuesday?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average food preparation time and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average food preparation time for each day.\n    The DataFrame should have columns 'Day' and 'Food preparation time (minutes)'.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Filter the DataFrame for the two days\n    day1_df = df[df['Day'] == day1]\n    day2_df = df[df['Day'] == day2]\n    \n    # Get the food preparation time for each day\n    day1_time = day1_df['Food preparation time (minutes)'].values[0]\n    day2_time = day2_df['Food preparation time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (day2_time - day1_time) \/ (df.index.get_loc(day2_df.index[0]) - df.index.get_loc(day1_df.index[0]))\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Food preparation time (minutes)': [37, 22, 32, 29, 19]\n})\n\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Monday', 'Tuesday'))","table":"Name: Average food preparation time\nUnit: minutes per day\nContent:\nDay | Food preparation time (minutes)\nMonday | 37\nTuesday | 22\nWednesday | 32\nThursday | 29\nFriday | 19"}
{"level":6,"answer":3.0,"prediction":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of years of teaching and returns the mode of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the names of teachers and the number of years they have been teaching.\n    The DataFrame should have columns 'Teacher' and 'Number of years'.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    years = df['Number of years']\n    \n    # Calculate the mode using the value_counts() function\n    mode = years.value_counts().idxmax()\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Teacher': ['Ms. Yamamoto', 'Mr. Perez', 'Miss Torres', 'Mr. Boone', 'Mr. Gutierrez'],\n    'Number of years': [4, 3, 4, 3, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"Some teachers compared how many years they have been teaching. What is the mode of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of years of teaching and returns the mode of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the names of teachers and the number of years they have been teaching.\n    The DataFrame should have columns 'Teacher' and 'Number of years'.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    years = df['Number of years']\n    \n    # Calculate the mode using the value_counts() function\n    mode = years.value_counts().idxmax()\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Teacher': ['Ms. Yamamoto', 'Mr. Perez', 'Miss Torres', 'Mr. Boone', 'Mr. Gutierrez'],\n    'Number of years': [4, 3, 4, 3, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Years of teaching\nUnit: None\nContent:\nTeacher | Number of years\nMs. Yamamoto | 4\nMr. Perez | 3\nMiss Torres | 4\nMr. Boone | 3\nMr. Gutierrez | 3"}
{"level":5,"answer":19.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of tennis balls hit by students and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the names of students and the number of tennis balls hit by each student.\n    The DataFrame should have columns 'Name' and 'Number of tennis balls'.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the maximum and minimum values of the 'Number of tennis balls' column\n    max_value = df['Number of tennis balls'].max()\n    min_value = df['Number of tennis balls'].min()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Fred', 'Roger', 'Adele', 'Miranda', 'Joy', 'Tom'],\n    'Number of tennis balls': [76, 65, 67, 62, 63, 57]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"The gym teacher wrote down how many tennis balls his students hit in half an hour. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of tennis balls hit by students and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the names of students and the number of tennis balls hit by each student.\n    The DataFrame should have columns 'Name' and 'Number of tennis balls'.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the maximum and minimum values of the 'Number of tennis balls' column\n    max_value = df['Number of tennis balls'].max()\n    min_value = df['Number of tennis balls'].min()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Fred', 'Roger', 'Adele', 'Miranda', 'Joy', 'Tom'],\n    'Number of tennis balls': [76, 65, 67, 62, 63, 57]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Hitting tennis balls\nUnit: None\nContent:\nName | Number of tennis balls\nFred | 76\nRoger | 65\nAdele | 67\nMiranda | 62\nJoy | 63\nTom | 57"}
{"level":5,"answer":90.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of cherries sold and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of kilograms of cherries sold.\n    The dataframe should contain \"Day\" and \"Kilograms\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the \"Kilograms\" column as a Series\n    kilograms = df['Kilograms']\n    \n    # Calculate the median using pandas\n    median = kilograms.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Kilograms': [90, 86, 79, 92, 98, 96, 88]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"A farmer wrote down how many kilograms of cherries were sold in the past 7 days. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of cherries sold and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of kilograms of cherries sold.\n    The dataframe should contain \"Day\" and \"Kilograms\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the \"Kilograms\" column as a Series\n    kilograms = df['Kilograms']\n    \n    # Calculate the median using pandas\n    median = kilograms.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Kilograms': [90, 86, 79, 92, 98, 96, 88]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Cherries sold\nUnit: None\nContent:\nDay | Kilograms\nSunday | 90\nMonday | 86\nTuesday | 79\nWednesday | 92\nThursday | 98\nFriday | 96\nSaturday | 88"}
{"level":6,"answer":2.25,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a given item and quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return None\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['rectangular beads', 'square beads', 'oval beads', 'star-shaped beads'],\n    'Price': [2, 2, 3, 3]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'oval beads', 3\/4))","question":"Kenji went to the store and bought 3\/4 of a kilogram of oval beads. How much did he spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a given item and quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return None","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['rectangular beads', 'square beads', 'oval beads', 'star-shaped beads'],\n    'Price': [2, 2, 3, 3]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'oval beads', 3\/4))","table":"Name: None\nUnit: $\nContent:\nrectangular beads | $2\/kilogram\nsquare beads | $2\/kilogram\noval beads | $3\/kilogram\nstar-shaped beads | $3\/kilogram"}
{"level":6,"answer":12.0,"prediction":"import pandas as pd\n\ndef count_students_with_less_than_58(df):\n    \"\"\"\n    This function takes in a pandas dataframe of quiz scores and returns the number of students who scored fewer than 58 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the quiz scores.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of students who scored fewer than 58 points.\n    \"\"\"\n    # prepare a list to calculate scores of each student\n    scores = []\n    # calculate the total score of each student\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # filter the students who scored fewer than 58 points\n    filtered = [score for score in scores if score < 58]\n    # count the number of students\n    num_students = len(filtered)\n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5],\n    'Leaf': [[0, 2, 6, 9], [4, 5, 7, 7, 8], [1, 9], [1, 8, 8]]\n})\n# Call the tool to solve the problem\nprint(count_students_with_less_than_58(df))","question":"Ms. Sherman reported her students' scores on the most recent quiz. How many students scored fewer than 58 points?","prediction_code":"import pandas as pd\n\ndef count_students_with_less_than_58(df):\n    \"\"\"\n    This function takes in a pandas dataframe of quiz scores and returns the number of students who scored fewer than 58 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the quiz scores.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of students who scored fewer than 58 points.\n    \"\"\"\n    # prepare a list to calculate scores of each student\n    scores = []\n    # calculate the total score of each student\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # filter the students who scored fewer than 58 points\n    filtered = [score for score in scores if score < 58]\n    # count the number of students\n    num_students = len(filtered)\n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5],\n    'Leaf': [[0, 2, 6, 9], [4, 5, 7, 7, 8], [1, 9], [1, 8, 8]]\n})\n# Call the tool to solve the problem\nprint(count_students_with_less_than_58(df))","table":"Name: Quiz scores\nUnit: students\nContent:\nStem | Leaf \n2 | 0, 2, 6, 9\n3 | 4, 5, 7, 7, 8\n4 | 1, 9\n5 | 1, 8, 8"}
{"level":6,"answer":7.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trivia game scores and returns the range of the scores.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and scores of the players.\n    The dataframe should contain \"Name\" and \"Score\" columns.\n    Returns:\n    int: The range of the scores.\n    \"\"\"\n    # Get the minimum and maximum scores\n    min_score = df['Score'].min()\n    max_score = df['Score'].max()\n    \n    # Calculate the range\n    score_range = max_score - min_score\n    \n    return score_range\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Tori', 'Anita', 'Jen', 'Wyatt', 'Beth'],\n    'Score': [3, 4, 10, 8, 10]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"Some friends played a trivia game and recorded their scores. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trivia game scores and returns the range of the scores.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and scores of the players.\n    The dataframe should contain \"Name\" and \"Score\" columns.\n    Returns:\n    int: The range of the scores.\n    \"\"\"\n    # Get the minimum and maximum scores\n    min_score = df['Score'].min()\n    max_score = df['Score'].max()\n    \n    # Calculate the range\n    score_range = max_score - min_score\n    \n    return score_range","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Tori', 'Anita', 'Jen', 'Wyatt', 'Beth'],\n    'Score': [3, 4, 10, 8, 10]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Trivia game scores\nUnit: None\nContent:\nName | Score\nTori | 3\nAnita | 4\nJen | 10\nWyatt | 8\nBeth | 10"}
{"level":7,"answer":543.0,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item2_price - item1_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['clarinet', 'keyboard', 'trumpet', 'saxophone', 'piccolo'],\n    'Price': [717.00, 593.00, 969.00, 870.00, 426.00]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'trumpet', 'piccolo'))","question":"How much more does a trumpet cost than a piccolo?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item2_price - item1_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['clarinet', 'keyboard', 'trumpet', 'saxophone', 'piccolo'],\n    'Price': [717.00, 593.00, 969.00, 870.00, 426.00]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'trumpet', 'piccolo'))","table":"Name: None\nUnit: $\nContent:\nclarinet | $717.00\nkeyboard | $593.00\ntrumpet | $969.00\nsaxophone | $870.00\npiccolo | $426.00"}
{"level":6,"answer":5.0,"prediction":"import pandas as pd\n\ndef count_trees_with_80_apples(df):\n    \"\"\"\n    This function takes in a pandas dataframe of apples per tree, and returns the number of trees that have at least 80 apples.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of apples per tree.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of trees that have at least 80 apples.\n    \"\"\"\n    # prepare a list to calculate the number of apples on each tree\n    apples = []\n    # calculate the total number of apples on each tree\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            apples.append(stem * 10 + leaf[j])\n    # filter the trees where the total number of apples is greater than or equal to 80\n    filtered = [apple for apple in apples if apple >= 80]\n    # count the number of trees\n    num_trees = len(filtered)\n    return num_trees\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7, 8, 9],\n    'Leaf': [[2], [1, 2, 3], [0, 1, 1], [3, 6, 9], [1, 1, 5, 9], [0]]\n})\n# Call the tool to solve the problem\nprint(count_trees_with_80_apples(df))","question":"A farmer counted the number of apples on each tree in her orchard. How many trees have at least 80 apples?","prediction_code":"import pandas as pd\n\ndef count_trees_with_80_apples(df):\n    \"\"\"\n    This function takes in a pandas dataframe of apples per tree, and returns the number of trees that have at least 80 apples.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of apples per tree.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of trees that have at least 80 apples.\n    \"\"\"\n    # prepare a list to calculate the number of apples on each tree\n    apples = []\n    # calculate the total number of apples on each tree\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            apples.append(stem * 10 + leaf[j])\n    # filter the trees where the total number of apples is greater than or equal to 80\n    filtered = [apple for apple in apples if apple >= 80]\n    # count the number of trees\n    num_trees = len(filtered)\n    return num_trees","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7, 8, 9],\n    'Leaf': [[2], [1, 2, 3], [0, 1, 1], [3, 6, 9], [1, 1, 5, 9], [0]]\n})\n# Call the tool to solve the problem\nprint(count_trees_with_80_apples(df))","table":"Name: Apples per tree\nUnit: trees\nContent:\nStem | Leaf \n4 | 2\n5 | 1, 2, 3\n6 | 0, 1, 1\n7 | 3, 6, 9\n8 | 1, 1, 5, 9\n9 | 0"}
{"level":7,"answer":53.0,"prediction":"import pandas as pd\n\ndef count_students_with_at_least_2_trips(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trips to the science museum and returns the number of students who went to the museum at least 2 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of trips to the science museum and their frequencies.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who went to the science museum at least 2 times.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of trips is greater than or equal to 2\n    filtered_df = df[df['Number of trips'] >= 2]\n    \n    # Calculate the total number of students who went to the museum at least 2 times\n    num_students = filtered_df['Frequency'].sum()\n    \n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [0, 1, 2, 3, 4, 5, 6],\n    'Frequency': [16, 4, 6, 14, 12, 13, 8]\n})\n# Call the tool to solve the problem\nprint(count_students_with_at_least_2_trips(df))","question":"Mrs. Campbell, the biology teacher, asked her students how many times they went to the science museum last year. How many students went to the science museum at least 2 times?","prediction_code":"import pandas as pd\n\ndef count_students_with_at_least_2_trips(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trips to the science museum and returns the number of students who went to the museum at least 2 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of trips to the science museum and their frequencies.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who went to the science museum at least 2 times.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of trips is greater than or equal to 2\n    filtered_df = df[df['Number of trips'] >= 2]\n    \n    # Calculate the total number of students who went to the museum at least 2 times\n    num_students = filtered_df['Frequency'].sum()\n    \n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [0, 1, 2, 3, 4, 5, 6],\n    'Frequency': [16, 4, 6, 14, 12, 13, 8]\n})\n# Call the tool to solve the problem\nprint(count_students_with_at_least_2_trips(df))","table":"Name: Trips to the science museum last year\nUnit: None\nContent:\nNumber of trips | Frequency\n0 | 16\n1 | 4\n2 | 6\n3 | 14\n4 | 12\n5 | 13\n6 | 8"}
{"level":4,"answer":8696.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['bat signed by a famous baseball player', 'book signed by a famous author', 'shirt signed by a famous soccer player', 'photograph signed by a famous movie star', 'jersey signed by a famous hockey player'],\n    'Price': [9504.00, 9035.00, 1785.00, 4463.00, 2448.00]\n})\n\n# Define the items to calculate the total cost\nitems = ['shirt signed by a famous soccer player', 'photograph signed by a famous movie star', 'jersey signed by a famous hockey player']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Dave need to buy a shirt signed by a famous soccer player, a photograph signed by a famous movie star, and a jersey signed by a famous hockey player?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['bat signed by a famous baseball player', 'book signed by a famous author', 'shirt signed by a famous soccer player', 'photograph signed by a famous movie star', 'jersey signed by a famous hockey player'],\n    'Price': [9504.00, 9035.00, 1785.00, 4463.00, 2448.00]\n})\n\n# Define the items to calculate the total cost\nitems = ['shirt signed by a famous soccer player', 'photograph signed by a famous movie star', 'jersey signed by a famous hockey player']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nbat signed by a famous baseball player | $9,504.00\nbook signed by a famous author | $9,035.00\nshirt signed by a famous soccer player | $1,785.00\nphotograph signed by a famous movie star | $4,463.00\njersey signed by a famous hockey player | $2,448.00"}
{"level":5,"answer":8.0,"prediction":"import pandas as pd\n\ndef calculate_population_difference(df, state1, state2, year):\n    \"\"\"\n    This function takes in a pandas DataFrame of population per square mile, two state names, and a year, and returns the difference in population density between the two states for the given year.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the population per square mile for different states and years.\n    The DataFrame should have columns 'State', '1990', and '2000'.\n    state1 (str): The name of the first state.\n    state2 (str): The name of the second state.\n    year (str): The year for which the population density difference is calculated.\n    Returns:\n    int: The difference in population density between the two states for the given year.\n    \"\"\"\n    # Filter the DataFrame for the two states and the given year\n    state1_df = df[(df['State'] == state1) & (df[year].notnull())]\n    state2_df = df[(df['State'] == state2) & (df[year].notnull())]\n    \n    # Get the population density for the two states and the given year\n    state1_density = state1_df[year].values[0]\n    state2_density = state2_df[year].values[0]\n    \n    # Calculate the difference in population density\n    density_difference = state2_density - state1_density\n    \n    return density_difference\n########################################\n# Initialize the table into a DataFrame\ndf = pd.DataFrame({\n    'State': ['Wyoming', 'New Mexico', 'South Dakota', 'Nevada', 'Idaho'],\n    '1990': [4, 12, 9, 10, 12],\n    '2000': [5, 15, 10, 18, 15]\n})\n\n# Call the tool function to calculate the population density difference\ndifference = calculate_population_difference(df, 'Idaho', 'Wyoming', '1990')\n\n# Print out the answer\nprint(difference)","question":"While looking through an almanac at the library, Roy noticed some data showing the population density of various states. In 1990, how many more people per square mile lived in Idaho than in Wyoming?","prediction_code":"import pandas as pd\n\ndef calculate_population_difference(df, state1, state2, year):\n    \"\"\"\n    This function takes in a pandas DataFrame of population per square mile, two state names, and a year, and returns the difference in population density between the two states for the given year.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the population per square mile for different states and years.\n    The DataFrame should have columns 'State', '1990', and '2000'.\n    state1 (str): The name of the first state.\n    state2 (str): The name of the second state.\n    year (str): The year for which the population density difference is calculated.\n    Returns:\n    int: The difference in population density between the two states for the given year.\n    \"\"\"\n    # Filter the DataFrame for the two states and the given year\n    state1_df = df[(df['State'] == state1) & (df[year].notnull())]\n    state2_df = df[(df['State'] == state2) & (df[year].notnull())]\n    \n    # Get the population density for the two states and the given year\n    state1_density = state1_df[year].values[0]\n    state2_density = state2_df[year].values[0]\n    \n    # Calculate the difference in population density\n    density_difference = state2_density - state1_density\n    \n    return density_difference","prediction_call":"# Initialize the table into a DataFrame\ndf = pd.DataFrame({\n    'State': ['Wyoming', 'New Mexico', 'South Dakota', 'Nevada', 'Idaho'],\n    '1990': [4, 12, 9, 10, 12],\n    '2000': [5, 15, 10, 18, 15]\n})\n\n# Call the tool function to calculate the population density difference\ndifference = calculate_population_difference(df, 'Idaho', 'Wyoming', '1990')\n\n# Print out the answer\nprint(difference)","table":"Name: Population per square mile\nUnit: people per square mile\nContent:\nState | 1990 | 2000\nWyoming | 4 | 5\nNew Mexico | 12 | 15\nSouth Dakota | 9 | 10\nNevada | 10 | 18\nIdaho | 12 | 15"}
{"level":8,"answer":6.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of shell counts per day and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the shell counts per day.\n    The DataFrame should have columns 'Day' and 'Number of shells'.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Filter the DataFrame for the two days\n    day1_df = df[df['Day'] == day1]\n    day2_df = df[df['Day'] == day2]\n    \n    # Get the shell counts for the two days\n    shells1 = day1_df['Number of shells'].values[0]\n    shells2 = day2_df['Number of shells'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (shells2 - shells1) \/ (df.index[day2_df.index[0]] - df.index[day1_df.index[0]])\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Number of shells': [9, 1, 9, 1, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Wednesday', 'Thursday'))","question":"Estelle spent a week at the beach and recorded the number of shells she found each day. According to the table, what was the rate of change between Wednesday and Thursday?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of shell counts per day and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the shell counts per day.\n    The DataFrame should have columns 'Day' and 'Number of shells'.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Filter the DataFrame for the two days\n    day1_df = df[df['Day'] == day1]\n    day2_df = df[df['Day'] == day2]\n    \n    # Get the shell counts for the two days\n    shells1 = day1_df['Number of shells'].values[0]\n    shells2 = day2_df['Number of shells'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (shells2 - shells1) \/ (df.index[day2_df.index[0]] - df.index[day1_df.index[0]])\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Number of shells': [9, 1, 9, 1, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Wednesday', 'Thursday'))","table":"Name: Shells Estelle found\nUnit: shells per day\nContent:\nDay | Number of shells\nSunday | 9\nMonday | 1\nTuesday | 9\nWednesday | 1\nThursday | 7"}
{"level":8,"answer":4.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of grocery stores in each town and returns the median of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of grocery stores in each town.\n    The dataframe should contain \"Town\" and \"Number of stores\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the \"Number of stores\" column as a Series\n    num_stores = df['Number of stores']\n    \n    # Calculate the median using pandas\n    median = num_stores.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Town': ['Watertown', 'Marion', 'Columbia', 'Riverside', 'Salem', 'Ashland', 'Greenwood'],\n    'Number of stores': [2, 6, 3, 8, 7, 3, 4]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"A newspaper researched how many grocery stores there are in each town. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of grocery stores in each town and returns the median of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of grocery stores in each town.\n    The dataframe should contain \"Town\" and \"Number of stores\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the \"Number of stores\" column as a Series\n    num_stores = df['Number of stores']\n    \n    # Calculate the median using pandas\n    median = num_stores.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Town': ['Watertown', 'Marion', 'Columbia', 'Riverside', 'Salem', 'Ashland', 'Greenwood'],\n    'Number of stores': [2, 6, 3, 8, 7, 3, 4]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Grocery stores in each town\nUnit: None\nContent:\nTown | Number of stores\nWatertown | 2\nMarion | 6\nColumbia | 3\nRiverside | 8\nSalem | 7\nAshland | 3\nGreenwood | 4"}
{"level":7,"answer":1.0,"prediction":"import pandas as pd\nfrom statistics import mode\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of states visited by students and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the names of students and the number of states they have visited.\n    The dataframe should contain \"Name\" and \"Number of states\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of states']\n    \n    # Calculate the mode\n    mode_number = mode(numbers)\n    \n    return mode_number\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Polly', 'Ted', 'Erin', 'Amy', 'Sue', 'Belle', 'Jenny', 'Irma'],\n    'Number of states': [1, 2, 5, 4, 1, 1, 4, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"Polly's class recorded how many states each student has visited. What is the mode of the numbers?","prediction_code":"import pandas as pd\nfrom statistics import mode\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of states visited by students and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the names of students and the number of states they have visited.\n    The dataframe should contain \"Name\" and \"Number of states\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of states']\n    \n    # Calculate the mode\n    mode_number = mode(numbers)\n    \n    return mode_number","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Polly', 'Ted', 'Erin', 'Amy', 'Sue', 'Belle', 'Jenny', 'Irma'],\n    'Number of states': [1, 2, 5, 4, 1, 1, 4, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: States visited\nUnit: None\nContent:\nName | Number of states\nPolly | 1\nTed | 2\nErin | 5\nAmy | 4\nSue | 1\nBelle | 1\nJenny | 4\nIrma | 5"}
{"level":5,"answer":1790.0,"prediction":"import pandas as pd\n\ndef calculate_remaining_money(df, budget, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, a budget, and a list of items to buy.\n    It returns the remaining money after buying the specified items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    budget (float): The initial budget.\n    items (list): A list of items to buy.\n    Returns:\n    float: The remaining money after buying the specified items.\n    \"\"\"\n    # Initialize the remaining money\n    remaining_money = budget\n    \n    # Iterate through the items and subtract their prices from the remaining money\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            remaining_money -= item_price\n    \n    return remaining_money\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['green station wagon', 'green jeep', 'yellow sports car', 'blue two-door coupe'],\n    'Price': [5264.00, 8366.00, 7197.00, 9836.00]\n})\n\n# Set the initial budget\nbudget = 18823.00\n\n# Set the items to buy\nitems = ['yellow sports car', 'blue two-door coupe']\n\n# Call the tool to solve the problem\nremaining_money = calculate_remaining_money(df, budget, items)\n\n# Print out the answer\nprint(remaining_money)","question":"Preston has $18,823.00. How much money will Preston have left if he buys a yellow sports car and a blue two-door coupe?","prediction_code":"import pandas as pd\n\ndef calculate_remaining_money(df, budget, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, a budget, and a list of items to buy.\n    It returns the remaining money after buying the specified items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    budget (float): The initial budget.\n    items (list): A list of items to buy.\n    Returns:\n    float: The remaining money after buying the specified items.\n    \"\"\"\n    # Initialize the remaining money\n    remaining_money = budget\n    \n    # Iterate through the items and subtract their prices from the remaining money\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            remaining_money -= item_price\n    \n    return remaining_money","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['green station wagon', 'green jeep', 'yellow sports car', 'blue two-door coupe'],\n    'Price': [5264.00, 8366.00, 7197.00, 9836.00]\n})\n\n# Set the initial budget\nbudget = 18823.00\n\n# Set the items to buy\nitems = ['yellow sports car', 'blue two-door coupe']\n\n# Call the tool to solve the problem\nremaining_money = calculate_remaining_money(df, budget, items)\n\n# Print out the answer\nprint(remaining_money)","table":"Name: None\nUnit: $\nContent:\ngreen station wagon | $5,264.00\ngreen jeep | $8,366.00\nyellow sports car | $7,197.00\nblue two-door coupe | $9,836.00"}
{"level":8,"answer":-5.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average food preparation time and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average food preparation time for each day.\n    The DataFrame should have columns 'Day' and 'Food preparation time (minutes)'.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Filter the DataFrame for the two days\n    day1_df = df[df['Day'] == day1]\n    day2_df = df[df['Day'] == day2]\n    \n    # Get the food preparation time for each day\n    day1_time = day1_df['Food preparation time (minutes)'].values[0]\n    day2_time = day2_df['Food preparation time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (day2_time - day1_time) \/ (df.index.get_loc(day2_df.index[0]) - df.index.get_loc(day1_df.index[0]))\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Food preparation time (minutes)': [46, 41, 28, 30, 44]\n})\n\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Sunday', 'Monday'))","question":"A restaurant's average food preparation time was tracked from day to day as part of an efficiency improvement program. According to the table, what was the rate of change between Sunday and Monday?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average food preparation time and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average food preparation time for each day.\n    The DataFrame should have columns 'Day' and 'Food preparation time (minutes)'.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Filter the DataFrame for the two days\n    day1_df = df[df['Day'] == day1]\n    day2_df = df[df['Day'] == day2]\n    \n    # Get the food preparation time for each day\n    day1_time = day1_df['Food preparation time (minutes)'].values[0]\n    day2_time = day2_df['Food preparation time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (day2_time - day1_time) \/ (df.index.get_loc(day2_df.index[0]) - df.index.get_loc(day1_df.index[0]))\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Food preparation time (minutes)': [46, 41, 28, 30, 44]\n})\n\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Sunday', 'Monday'))","table":"Name: Average food preparation time\nUnit: minutes per day\nContent:\nDay | Food preparation time (minutes)\nSunday | 46\nMonday | 41\nTuesday | 28\nWednesday | 30\nThursday | 44"}
{"level":5,"answer":8535.0,"prediction":"import pandas as pd\n\ndef calculate_remaining_money(df, budget, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, a budget, and a list of items to buy.\n    It returns the amount of money remaining after buying the specified items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    budget (float): The amount of money available for spending.\n    items (list): A list of items to buy.\n    Returns:\n    float: The amount of money remaining after buying the specified items.\n    \"\"\"\n    # Initialize the remaining money\n    remaining_money = budget\n    \n    # Iterate through the items and subtract their prices from the remaining money\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            remaining_money -= item_price\n    \n    return remaining_money\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['green station wagon', 'red sports car', 'red two-door coupe', 'black convertible'],\n    'Price': [9657.00, 8528.00, 6130.00, 5471.00]\n})\n\n# Set the budget\nbudget = 26720.00\n\n# Set the items to buy\nitems = ['green station wagon', 'red sports car']\n\n# Call the tool to solve the problem\nremaining_money = calculate_remaining_money(df, budget, items)\n\n# Print out the answer\nprint(remaining_money)","question":"Lamar has $26,720.00. How much money will Lamar have left if he buys a green station wagon and a red sports car?","prediction_code":"import pandas as pd\n\ndef calculate_remaining_money(df, budget, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, a budget, and a list of items to buy.\n    It returns the amount of money remaining after buying the specified items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    budget (float): The amount of money available for spending.\n    items (list): A list of items to buy.\n    Returns:\n    float: The amount of money remaining after buying the specified items.\n    \"\"\"\n    # Initialize the remaining money\n    remaining_money = budget\n    \n    # Iterate through the items and subtract their prices from the remaining money\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            remaining_money -= item_price\n    \n    return remaining_money","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['green station wagon', 'red sports car', 'red two-door coupe', 'black convertible'],\n    'Price': [9657.00, 8528.00, 6130.00, 5471.00]\n})\n\n# Set the budget\nbudget = 26720.00\n\n# Set the items to buy\nitems = ['green station wagon', 'red sports car']\n\n# Call the tool to solve the problem\nremaining_money = calculate_remaining_money(df, budget, items)\n\n# Print out the answer\nprint(remaining_money)","table":"Name: None\nUnit: $\nContent:\ngreen station wagon | $9,657.00\nred sports car | $8,528.00\nred two-door coupe | $6,130.00\nblack convertible | $5,471.00"}
{"level":5,"answer":69.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of hot dogs sold and returns the median of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of hot dogs sold each day.\n    The dataframe should contain \"Day\" and \"Number of hot dogs\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of hot dogs']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Number of hot dogs': [70, 68, 73, 67, 68, 70, 69]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"A hot dog stand kept track of the number of hot dogs sold each day. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of hot dogs sold and returns the median of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of hot dogs sold each day.\n    The dataframe should contain \"Day\" and \"Number of hot dogs\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of hot dogs']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Number of hot dogs': [70, 68, 73, 67, 68, 70, 69]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Hot dogs sold\nUnit: None\nContent:\nDay | Number of hot dogs\nSaturday | 70\nSunday | 68\nMonday | 73\nTuesday | 67\nWednesday | 68\nThursday | 70\nFriday | 69"}
{"level":8,"answer":4.0,"prediction":"import pandas as pd\n\ndef count_patients_with_3_visits(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of doctor visits per patient and returns the number of patients who went to the doctor exactly 3 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of doctor visits per patient.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of patients who went to the doctor exactly 3 times.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of trips is 3\n    filtered_df = df[df['Number of trips'] == 3]\n    \n    # Get the frequency of patients with 3 visits\n    num_patients = filtered_df['Frequency'].values[0]\n    \n    return num_patients\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [0, 1, 2, 3, 4, 5],\n    'Frequency': [0, 12, 7, 4, 6, 5]\n})\n# Call the tool to solve the problem\nprint(count_patients_with_3_visits(df))","question":"An insurance company compiled the number of doctor visits made by some patients last year. How many patients went to the doctor exactly 3 times last year?","prediction_code":"import pandas as pd\n\ndef count_patients_with_3_visits(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of doctor visits per patient and returns the number of patients who went to the doctor exactly 3 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of doctor visits per patient.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of patients who went to the doctor exactly 3 times.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of trips is 3\n    filtered_df = df[df['Number of trips'] == 3]\n    \n    # Get the frequency of patients with 3 visits\n    num_patients = filtered_df['Frequency'].values[0]\n    \n    return num_patients","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [0, 1, 2, 3, 4, 5],\n    'Frequency': [0, 12, 7, 4, 6, 5]\n})\n# Call the tool to solve the problem\nprint(count_patients_with_3_visits(df))","table":"Name: Doctor visits last year\nUnit: None\nContent:\nNumber of trips | Frequency\n0 | 0\n1 | 12\n2 | 7\n3 | 4\n4 | 6\n5 | 5"}
{"level":2,"answer":50.0,"prediction":"import pandas as pd\n\ndef calculate_total_bagels(df, num_platters):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of bagels per platter and the number of platters, and returns the total number of bagels.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of platters and the number of bagels per platter.\n    The DataFrame should have columns 'Number of platters' and 'Number of bagels'.\n    num_platters (int): The number of platters to calculate the total number of bagels.\n    Returns:\n    int: The total number of bagels on the specified number of platters.\n    \"\"\"\n    # Filter the DataFrame for the specified number of platters\n    platters_df = df[df['Number of platters'] == num_platters]\n    \n    # Get the number of bagels per platter\n    num_bagels_per_platter = platters_df['Number of bagels'].values[0]\n    \n    # Calculate the total number of bagels\n    total_bagels = num_platters * num_bagels_per_platter\n    \n    return total_bagels\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of platters': [1, 2, 3, 4, 5],\n    'Number of bagels': [10, 20, 30, 40, None]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_bagels(df, 5))","question":"Each platter has 10 bagels. How many bagels are on 5 platters?","prediction_code":"import pandas as pd\n\ndef calculate_total_bagels(df, num_platters):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of bagels per platter and the number of platters, and returns the total number of bagels.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of platters and the number of bagels per platter.\n    The DataFrame should have columns 'Number of platters' and 'Number of bagels'.\n    num_platters (int): The number of platters to calculate the total number of bagels.\n    Returns:\n    int: The total number of bagels on the specified number of platters.\n    \"\"\"\n    # Filter the DataFrame for the specified number of platters\n    platters_df = df[df['Number of platters'] == num_platters]\n    \n    # Get the number of bagels per platter\n    num_bagels_per_platter = platters_df['Number of bagels'].values[0]\n    \n    # Calculate the total number of bagels\n    total_bagels = num_platters * num_bagels_per_platter\n    \n    return total_bagels","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of platters': [1, 2, 3, 4, 5],\n    'Number of bagels': [10, 20, 30, 40, None]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_bagels(df, 5))","table":"Name: None\nUnit: None\nContent:\nNumber of platters | Number of bagels\n1 | 10\n2 | 20\n3 | 30\n4 | 40\n5 | ?"}
{"level":4,"answer":0.04,"prediction":"import pandas as pd\n\ndef calculate_remaining_money(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to buy.\n    It returns the remaining money after buying the specified items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to buy.\n    Returns:\n    float: The remaining money after buying the specified items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    # Calculate the remaining money\n    remaining_money = 1.40 - total_cost\n    \n    return remaining_money\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['can of fruit cocktail', 'can of pears', 'can of tuna fish', 'can of peaches', 'jar of olives'],\n    'Price': [0.80, 0.66, 0.70, 0.97, 0.65]\n})\n\n# Specify the items to buy\nitems_to_buy = ['can of tuna fish', 'can of pears']\n\n# Call the tool to solve the problem\nremaining_money = calculate_remaining_money(df, items_to_buy)\n\n# Print out the answer\nprint(remaining_money)","question":"Tim has $1.40. How much money will Tim have left if he buys a can of tuna fish and a can of pears?","prediction_code":"import pandas as pd\n\ndef calculate_remaining_money(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to buy.\n    It returns the remaining money after buying the specified items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to buy.\n    Returns:\n    float: The remaining money after buying the specified items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    # Calculate the remaining money\n    remaining_money = 1.40 - total_cost\n    \n    return remaining_money","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['can of fruit cocktail', 'can of pears', 'can of tuna fish', 'can of peaches', 'jar of olives'],\n    'Price': [0.80, 0.66, 0.70, 0.97, 0.65]\n})\n\n# Specify the items to buy\nitems_to_buy = ['can of tuna fish', 'can of pears']\n\n# Call the tool to solve the problem\nremaining_money = calculate_remaining_money(df, items_to_buy)\n\n# Print out the answer\nprint(remaining_money)","table":"Name: None\nUnit: $\nContent:\ncan of fruit cocktail | $0.80\ncan of pears | $0.66\ncan of tuna fish | $0.70\ncan of peaches | $0.97\njar of olives | $0.65"}
{"level":3,"answer":7803.0,"prediction":"import pandas as pd\n\ndef calculate_total_sales(df, dealerships):\n    \"\"\"\n    This function takes in a pandas DataFrame of vehicle sales and a list of dealership names, and returns the total number of vehicles sold by the specified dealerships.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the vehicle sales data with columns 'Dealership' and 'Number of vehicles'.\n    dealerships (list): A list of dealership names to calculate the total sales for.\n    Returns:\n    int: The total number of vehicles sold by the specified dealerships.\n    \"\"\"\n    # Filter the DataFrame for the specified dealerships\n    filtered_df = df[df['Dealership'].isin(dealerships)]\n    \n    # Calculate the total sales for the specified dealerships\n    total_sales = filtered_df['Number of vehicles'].sum()\n    \n    return total_sales\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Dealership': ['Cars of Pryor Falls', 'Truck City', 'Braverton Autos'],\n    'Number of vehicles': [4557, 3246, 1174]\n})\n\n# Specify the dealerships to calculate the total sales for\ndealerships = ['Cars of Pryor Falls', 'Truck City']\n\n# Call the tool to solve the problem\nprint(calculate_total_sales(df, dealerships))","question":"Some dealerships compared their vehicle sales. In all, how many vehicles did Cars of Pryor Falls and Truck City sell?","prediction_code":"import pandas as pd\n\ndef calculate_total_sales(df, dealerships):\n    \"\"\"\n    This function takes in a pandas DataFrame of vehicle sales and a list of dealership names, and returns the total number of vehicles sold by the specified dealerships.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the vehicle sales data with columns 'Dealership' and 'Number of vehicles'.\n    dealerships (list): A list of dealership names to calculate the total sales for.\n    Returns:\n    int: The total number of vehicles sold by the specified dealerships.\n    \"\"\"\n    # Filter the DataFrame for the specified dealerships\n    filtered_df = df[df['Dealership'].isin(dealerships)]\n    \n    # Calculate the total sales for the specified dealerships\n    total_sales = filtered_df['Number of vehicles'].sum()\n    \n    return total_sales","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Dealership': ['Cars of Pryor Falls', 'Truck City', 'Braverton Autos'],\n    'Number of vehicles': [4557, 3246, 1174]\n})\n\n# Specify the dealerships to calculate the total sales for\ndealerships = ['Cars of Pryor Falls', 'Truck City']\n\n# Call the tool to solve the problem\nprint(calculate_total_sales(df, dealerships))","table":"Name: Vehicle sales\nUnit: vehicles\nContent:\nDealership | Number of vehicles\nCars of Pryor Falls | 4,557\nTruck City | 3,246\nBraverton Autos | 1,174"}
{"level":3,"answer":8897.0,"prediction":"import pandas as pd\n\ndef calculate_total_donations(df, months):\n    \"\"\"\n    This function takes in a pandas DataFrame of charity donations and a list of months, and returns the total number of donations received in the specified months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of donations per month.\n    The dataframe should contain \"Month\" and \"Number of donations\" columns.\n    months (list): A list of months for which the total number of donations is to be calculated.\n    Returns:\n    int: The total number of donations received in the specified months.\n    \"\"\"\n    # Filter the DataFrame for the specified months\n    filtered_df = df[df['Month'].isin(months)]\n    \n    # Calculate the total number of donations\n    total_donations = filtered_df['Number of donations'].sum()\n    \n    return total_donations\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['July', 'August', 'September', 'October', 'November'],\n    'Number of donations': [3898, 4999, 2029, 1308, 3546]\n})\n\n# Specify the months for which the total number of donations is to be calculated\nmonths = ['July', 'August']\n\n# Call the tool to solve the problem\nprint(calculate_total_donations(df, months))","question":"A charity recorded how many donations it received each month. How many total donations did the charity receive in July and August?","prediction_code":"import pandas as pd\n\ndef calculate_total_donations(df, months):\n    \"\"\"\n    This function takes in a pandas DataFrame of charity donations and a list of months, and returns the total number of donations received in the specified months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of donations per month.\n    The dataframe should contain \"Month\" and \"Number of donations\" columns.\n    months (list): A list of months for which the total number of donations is to be calculated.\n    Returns:\n    int: The total number of donations received in the specified months.\n    \"\"\"\n    # Filter the DataFrame for the specified months\n    filtered_df = df[df['Month'].isin(months)]\n    \n    # Calculate the total number of donations\n    total_donations = filtered_df['Number of donations'].sum()\n    \n    return total_donations","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['July', 'August', 'September', 'October', 'November'],\n    'Number of donations': [3898, 4999, 2029, 1308, 3546]\n})\n\n# Specify the months for which the total number of donations is to be calculated\nmonths = ['July', 'August']\n\n# Call the tool to solve the problem\nprint(calculate_total_donations(df, months))","table":"Name: Charity donations\nUnit: donations\nContent:\nMonth | Number of donations\nJuly | 3,898\nAugust | 4,999\nSeptember | 2,029\nOctober | 1,308\nNovember | 3,546"}
{"level":5,"answer":11.0,"prediction":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of computers in classrooms and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of computers in classrooms.\n    The dataframe should contain \"Teacher\" and \"Number of computers\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Number of computers\" column\n    mean = df['Number of computers'].mean()\n    \n    return mean\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Teacher': ['Mrs. Jansen', 'Mr. Morales', 'Ms. Cohen', 'Mrs. Tan', 'Mr. Schmidt', 'Miss Murphy'],\n    'Number of computers': [8, 15, 5, 12, 20, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","question":"The teachers at a middle school counted how many computers they had in their classrooms. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of computers in classrooms and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of computers in classrooms.\n    The dataframe should contain \"Teacher\" and \"Number of computers\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Number of computers\" column\n    mean = df['Number of computers'].mean()\n    \n    return mean","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Teacher': ['Mrs. Jansen', 'Mr. Morales', 'Ms. Cohen', 'Mrs. Tan', 'Mr. Schmidt', 'Miss Murphy'],\n    'Number of computers': [8, 15, 5, 12, 20, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","table":"Name: Computers in classrooms\nUnit: None\nContent:\nTeacher | Number of computers\nMrs. Jansen | 8\nMr. Morales | 15\nMs. Cohen | 5\nMrs. Tan | 12\nMr. Schmidt | 20\nMiss Murphy | 6"}
{"level":6,"answer":6.0,"prediction":"import pandas as pd\nimport statistics\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of grocery stores in each town and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of grocery stores in each town.\n    The dataframe should contain \"Town\" and \"Number of stores\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of stores']\n    \n    # Calculate the mode\n    mode = statistics.mode(numbers)\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Town': ['Ashland', 'Richmond', 'Springfield', 'Greenwood', 'Columbia'],\n    'Number of stores': [6, 8, 8, 6, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"A newspaper researched how many grocery stores there are in each town. What is the mode of the numbers?","prediction_code":"import pandas as pd\nimport statistics\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of grocery stores in each town and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of grocery stores in each town.\n    The dataframe should contain \"Town\" and \"Number of stores\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of stores']\n    \n    # Calculate the mode\n    mode = statistics.mode(numbers)\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Town': ['Ashland', 'Richmond', 'Springfield', 'Greenwood', 'Columbia'],\n    'Number of stores': [6, 8, 8, 6, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Grocery stores in each town\nUnit: None\nContent:\nTown | Number of stores\nAshland | 6\nRichmond | 8\nSpringfield | 8\nGreenwood | 6\nColumbia | 6"}
{"level":8,"answer":224.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(ticket_df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ticket price table and a dictionary of orders, and returns the total cost of the orders using pandas.\n    Args:\n    ticket_df (pd.DataFrame): A pandas DataFrame containing ticket names and their prices with columns 'Ticket' and 'Price'.\n    orders (dict): A dictionary where the keys are ticket names and the values are the number of tickets for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the ticket items and calculate the cost for each ordered item\n    for ticket, quantity in orders.items():\n        # Filter the DataFrame for the specific ticket\n        ticket_df = ticket_df[ticket_df['Ticket'] == ticket]\n        if not ticket_df.empty:\n            ticket_price = ticket_df['Price'].values[0]\n            total_cost += quantity * ticket_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ticket': ['tennis ticket', 'football ticket', 'soccer ticket', 'golf ticket', 'hockey ticket', 'baseball ticket'],\n    'Price': [83.00, 33.00, 79.00, 17.00, 46.00, 21.00]\n})\n\n# Initialize the orders dictionary\norders = {\n    'hockey ticket': 2,\n    'football ticket': 4\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","question":"How much money does Mitch need to buy 2 hockey tickets and 4 football tickets?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(ticket_df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ticket price table and a dictionary of orders, and returns the total cost of the orders using pandas.\n    Args:\n    ticket_df (pd.DataFrame): A pandas DataFrame containing ticket names and their prices with columns 'Ticket' and 'Price'.\n    orders (dict): A dictionary where the keys are ticket names and the values are the number of tickets for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the ticket items and calculate the cost for each ordered item\n    for ticket, quantity in orders.items():\n        # Filter the DataFrame for the specific ticket\n        ticket_df = ticket_df[ticket_df['Ticket'] == ticket]\n        if not ticket_df.empty:\n            ticket_price = ticket_df['Price'].values[0]\n            total_cost += quantity * ticket_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ticket': ['tennis ticket', 'football ticket', 'soccer ticket', 'golf ticket', 'hockey ticket', 'baseball ticket'],\n    'Price': [83.00, 33.00, 79.00, 17.00, 46.00, 21.00]\n})\n\n# Initialize the orders dictionary\norders = {\n    'hockey ticket': 2,\n    'football ticket': 4\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","table":"Name: None\nUnit: $\nContent:\ntennis ticket | $83.00\nfootball ticket | $33.00\nsoccer ticket | $79.00\ngolf ticket | $17.00\nhockey ticket | $46.00\nbaseball ticket | $21.00"}
{"level":8,"answer":4.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of bags of popcorn sold and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of bags of popcorn sold.\n    The DataFrame should have \"Day\" and \"Number of bags of popcorn\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column with the numbers\n    numbers = df['Number of bags of popcorn']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Number of bags of popcorn': [6, 10, 0, 3, 4]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"A concession stand worker at the movie theater looked up how many bags of popcorn were sold in the past 5 days. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of bags of popcorn sold and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of bags of popcorn sold.\n    The DataFrame should have \"Day\" and \"Number of bags of popcorn\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column with the numbers\n    numbers = df['Number of bags of popcorn']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Number of bags of popcorn': [6, 10, 0, 3, 4]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Bags of popcorn sold\nUnit: None\nContent:\nDay | Number of bags of popcorn\nFriday | 6\nSaturday | 10\nSunday | 0\nMonday | 3\nTuesday | 4"}
{"level":3,"answer":85.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['board game', 'model airplane', 'model railroad set', 'toy rocket', 'teddy bear', 'mystery game'],\n    'Price': [17, 23, 86, 65, 15, 20]\n})\n\n# Define the items to calculate the total cost\nitems = ['mystery game', 'toy rocket']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Tim need to buy a mystery game and a toy rocket?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['board game', 'model airplane', 'model railroad set', 'toy rocket', 'teddy bear', 'mystery game'],\n    'Price': [17, 23, 86, 65, 15, 20]\n})\n\n# Define the items to calculate the total cost\nitems = ['mystery game', 'toy rocket']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nboard game | $17\nmodel airplane | $23\nmodel railroad set | $86\ntoy rocket | $65\nteddy bear | $15\nmystery game | $20"}
{"level":8,"answer":7.0,"prediction":"import pandas as pd\n\ndef count_commutes_over_50_minutes(df):\n    \"\"\"\n    This function takes in a pandas dataframe of commute times and returns the number of commutes that are at least 50 minutes.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the commute times.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of commutes that are at least 50 minutes.\n    \"\"\"\n    # prepare a list to calculate commute times\n    commute_times = []\n    # calculate the total commute time for each commute\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            commute_times.append(stem * 10 + leaf[j])\n    # filter the commutes where the total commute time is greater than or equal to 50 minutes\n    filtered = [time for time in commute_times if time >= 50]\n    # count the number of commutes\n    num_commutes = len(filtered)\n    return num_commutes\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[0, 1, 7], [5, 5, 7, 8, 9], [6], [0, 9], [], [0, 2, 9], [0]]\n})\n# Call the tool to solve the problem\nprint(count_commutes_over_50_minutes(df))","question":"A business magazine surveyed its readers about their commute times. How many commutes are at least 50 minutes?","prediction_code":"import pandas as pd\n\ndef count_commutes_over_50_minutes(df):\n    \"\"\"\n    This function takes in a pandas dataframe of commute times and returns the number of commutes that are at least 50 minutes.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the commute times.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of commutes that are at least 50 minutes.\n    \"\"\"\n    # prepare a list to calculate commute times\n    commute_times = []\n    # calculate the total commute time for each commute\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            commute_times.append(stem * 10 + leaf[j])\n    # filter the commutes where the total commute time is greater than or equal to 50 minutes\n    filtered = [time for time in commute_times if time >= 50]\n    # count the number of commutes\n    num_commutes = len(filtered)\n    return num_commutes","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[0, 1, 7], [5, 5, 7, 8, 9], [6], [0, 9], [], [0, 2, 9], [0]]\n})\n# Call the tool to solve the problem\nprint(count_commutes_over_50_minutes(df))","table":"Name: Commute time (minutes)\nUnit: commutes\nContent:\nStem | Leaf \n3 | 0, 1, 7\n4 | 5, 5, 7, 8, 9\n5 | 6\n6 | 0, 9\n7 | \n8 | 0, 2, 9\n9 | 0"}
{"level":8,"answer":2.0,"prediction":"import pandas as pd\n\ndef count_gardens_with_plants(df, min_plants, max_plants):\n    \"\"\"\n    This function takes in a pandas dataframe of plants per garden, and returns the number of gardens that have at least min_plants but fewer than max_plants plants.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of plants per garden.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_plants (int): The minimum number of plants required in a garden.\n    max_plants (int): The maximum number of plants allowed in a garden.\n    Returns:\n    int: The number of gardens that have at least min_plants but fewer than max_plants plants.\n    \"\"\"\n    # prepare a list to calculate the number of plants in each garden\n    plants = []\n    # calculate the total number of plants in each garden\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            plants.append(stem * 10 + leaf[j])\n    # filter the gardens where the total number of plants is greater than or equal to min_plants and less than max_plants\n    filtered = [plant for plant in plants if min_plants <= plant < max_plants]\n    # count the number of gardens\n    num_gardens = len(filtered)\n    return num_gardens\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[2, 2, 3], [], [0, 0], [2, 8, 9], [6], [0], [], [5, 6]]\n})\n# Call the tool to solve the problem\nprint(count_gardens_with_plants(df, 22, 41))","question":"The members of the local garden club tallied the number of plants in each person's garden. How many gardens have at least 22 plants but fewer than 41 plants?","prediction_code":"import pandas as pd\n\ndef count_gardens_with_plants(df, min_plants, max_plants):\n    \"\"\"\n    This function takes in a pandas dataframe of plants per garden, and returns the number of gardens that have at least min_plants but fewer than max_plants plants.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of plants per garden.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_plants (int): The minimum number of plants required in a garden.\n    max_plants (int): The maximum number of plants allowed in a garden.\n    Returns:\n    int: The number of gardens that have at least min_plants but fewer than max_plants plants.\n    \"\"\"\n    # prepare a list to calculate the number of plants in each garden\n    plants = []\n    # calculate the total number of plants in each garden\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            plants.append(stem * 10 + leaf[j])\n    # filter the gardens where the total number of plants is greater than or equal to min_plants and less than max_plants\n    filtered = [plant for plant in plants if min_plants <= plant < max_plants]\n    # count the number of gardens\n    num_gardens = len(filtered)\n    return num_gardens","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[2, 2, 3], [], [0, 0], [2, 8, 9], [6], [0], [], [5, 6]]\n})\n# Call the tool to solve the problem\nprint(count_gardens_with_plants(df, 22, 41))","table":"Name: Plants per garden\nUnit: gardens\nContent:\nStem | Leaf \n1 | 2, 2, 3\n2 | \n3 | 0, 0\n4 | 2, 8, 9\n5 | 6\n6 | 0\n7 | \n8 | 5, 6"}
{"level":7,"answer":7.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of soccer fields per park and returns the range of the numbers of soccer fields.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of soccer fields per park.\n    The dataframe should contain \"Park\" and \"Number of soccer fields\" columns.\n    Returns:\n    int: The range of the numbers of soccer fields.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of soccer fields\" column\n    min_fields = df['Number of soccer fields'].min()\n    max_fields = df['Number of soccer fields'].max()\n    \n    # Calculate the range\n    field_range = max_fields - min_fields\n    \n    return field_range\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Park': ['Elmhurst Park', 'Moon Park', 'Lighthouse Park', 'Madison Park', 'Windy Hill Park', 'Juniper Park', 'Crane Park', 'Middle Park'],\n    'Number of soccer fields': [9, 5, 4, 9, 2, 5, 2, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"The parks department compared how many soccer fields there are at each park. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of soccer fields per park and returns the range of the numbers of soccer fields.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of soccer fields per park.\n    The dataframe should contain \"Park\" and \"Number of soccer fields\" columns.\n    Returns:\n    int: The range of the numbers of soccer fields.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of soccer fields\" column\n    min_fields = df['Number of soccer fields'].min()\n    max_fields = df['Number of soccer fields'].max()\n    \n    # Calculate the range\n    field_range = max_fields - min_fields\n    \n    return field_range","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Park': ['Elmhurst Park', 'Moon Park', 'Lighthouse Park', 'Madison Park', 'Windy Hill Park', 'Juniper Park', 'Crane Park', 'Middle Park'],\n    'Number of soccer fields': [9, 5, 4, 9, 2, 5, 2, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Soccer fields\nUnit: None\nContent:\nPark | Number of soccer fields\nElmhurst Park | 9\nMoon Park | 5\nLighthouse Park | 4\nMadison Park | 9\nWindy Hill Park | 2\nJuniper Park | 5\nCrane Park | 2\nMiddle Park | 3"}
{"level":5,"answer":8.0,"prediction":"import pandas as pd\n\ndef get_ferry_cost(df, ferry, vehicle):\n    \"\"\"\n    This function takes in a pandas DataFrame of ferry fares and returns the cost of taking a specific vehicle on a specific ferry.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the ferry fares with columns 'Ferry', 'Car', and 'Bicycle'.\n    ferry (str): The name of the ferry.\n    vehicle (str): The type of vehicle ('Car' or 'Bicycle').\n    Returns:\n    float: The cost of taking the specified vehicle on the specified ferry.\n    \"\"\"\n    # Filter the DataFrame for the specific ferry and vehicle\n    ferry_df = df[df['Ferry'] == ferry]\n    cost = ferry_df[vehicle].values[0]\n    \n    return cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Seattle-Bremerton', 'Southport-Fort Fisher', 'Ocracoke'],\n    'Car': ['$12', '$5', '$15'],\n    'Bicycle': ['$8', '$2', '$3']\n})\n# Call the tool to solve the problem\nprint(get_ferry_cost(df, 'Seattle-Bremerton', 'Bicycle'))","question":"For an economics project, Brittany determined the cost of ferry rides for bicycles and cars. How much does it cost to take a bicycle on the Seattle-Bremerton ferry?","prediction_code":"import pandas as pd\n\ndef get_ferry_cost(df, ferry, vehicle):\n    \"\"\"\n    This function takes in a pandas DataFrame of ferry fares and returns the cost of taking a specific vehicle on a specific ferry.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the ferry fares with columns 'Ferry', 'Car', and 'Bicycle'.\n    ferry (str): The name of the ferry.\n    vehicle (str): The type of vehicle ('Car' or 'Bicycle').\n    Returns:\n    float: The cost of taking the specified vehicle on the specified ferry.\n    \"\"\"\n    # Filter the DataFrame for the specific ferry and vehicle\n    ferry_df = df[df['Ferry'] == ferry]\n    cost = ferry_df[vehicle].values[0]\n    \n    return cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Seattle-Bremerton', 'Southport-Fort Fisher', 'Ocracoke'],\n    'Car': ['$12', '$5', '$15'],\n    'Bicycle': ['$8', '$2', '$3']\n})\n# Call the tool to solve the problem\nprint(get_ferry_cost(df, 'Seattle-Bremerton', 'Bicycle'))","table":"Name: Ferry fares\nUnit: $\nContent:\nFerry | Car | Bicycle\nSeattle-Bremerton | $12 | $8\nSouthport-Fort Fisher | $5 | $2\nOcracoke | $15 | $3"}
{"level":4,"answer":5.0,"prediction":"import pandas as pd\n\ndef get_population_density(df, state):\n    \"\"\"\n    This function takes in a pandas DataFrame of population per square mile and a state name, and returns the population density of the state in a specific year.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the population per square mile data.\n    The DataFrame should have columns 'State', '1990', and '2000'.\n    state (str): The name of the state.\n    Returns:\n    int: The population density of the state in a specific year.\n    \"\"\"\n    # Filter the DataFrame for the specific state\n    state_df = df[df['State'] == state]\n    \n    # Get the population density for the specific year\n    population_density = state_df['2000'].values[0]\n    \n    return population_density\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'State': ['Wyoming', 'North Dakota', 'Idaho', 'Montana', 'New Mexico'],\n    '1990': [4, 9, 12, 5, 12],\n    '2000': [5, 9, 15, 6, 15]\n})\n\n# Call the tool to solve the problem\nprint(get_population_density(df, 'Wyoming'))","question":"While looking through an almanac at the library, Porter noticed some data showing the population density of various states. How many people per square mile lived in Wyoming in 2000?","prediction_code":"import pandas as pd\n\ndef get_population_density(df, state):\n    \"\"\"\n    This function takes in a pandas DataFrame of population per square mile and a state name, and returns the population density of the state in a specific year.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the population per square mile data.\n    The DataFrame should have columns 'State', '1990', and '2000'.\n    state (str): The name of the state.\n    Returns:\n    int: The population density of the state in a specific year.\n    \"\"\"\n    # Filter the DataFrame for the specific state\n    state_df = df[df['State'] == state]\n    \n    # Get the population density for the specific year\n    population_density = state_df['2000'].values[0]\n    \n    return population_density","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'State': ['Wyoming', 'North Dakota', 'Idaho', 'Montana', 'New Mexico'],\n    '1990': [4, 9, 12, 5, 12],\n    '2000': [5, 9, 15, 6, 15]\n})\n\n# Call the tool to solve the problem\nprint(get_population_density(df, 'Wyoming'))","table":"Name: Population per square mile\nUnit: people per square mile\nContent:\nState | 1990 | 2000\nWyoming | 4 | 5\nNorth Dakota | 9 | 9\nIdaho | 12 | 15\nMontana | 5 | 6\nNew Mexico | 12 | 15"}
{"level":7,"answer":75.0,"prediction":"import pandas as pd\n\ndef count_people(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of scarf ownership and returns the total number of people.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of scarves owned by people.\n    The dataframe should contain \"Number of scarves\" and \"Frequency\" columns.\n    Returns:\n    int: The total number of people.\n    \"\"\"\n    # Calculate the total number of people by summing the frequencies\n    total_people = df['Frequency'].sum()\n    \n    return total_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of scarves': [0, 1, 2, 3, 4, 5],\n    'Frequency': [6, 16, 18, 5, 17, 13]\n})\n# Call the tool to solve the problem\nprint(count_people(df))","question":"Amanda's Crafts is interested in offering a scarf knitting class, so the store considers how many scarves people already own. How many people are there in all?","prediction_code":"import pandas as pd\n\ndef count_people(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of scarf ownership and returns the total number of people.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of scarves owned by people.\n    The dataframe should contain \"Number of scarves\" and \"Frequency\" columns.\n    Returns:\n    int: The total number of people.\n    \"\"\"\n    # Calculate the total number of people by summing the frequencies\n    total_people = df['Frequency'].sum()\n    \n    return total_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of scarves': [0, 1, 2, 3, 4, 5],\n    'Frequency': [6, 16, 18, 5, 17, 13]\n})\n# Call the tool to solve the problem\nprint(count_people(df))","table":"Name: Scarves\nUnit: None\nContent:\nNumber of scarves | Frequency\n0 | 6\n1 | 16\n2 | 18\n3 | 5\n4 | 17\n5 | 13"}
{"level":4,"answer":2.0,"prediction":"import pandas as pd\n\ndef calculate_toll_difference(df, bridge1, bridge2, vehicle):\n    \"\"\"\n    This function takes in a pandas DataFrame of bridge tolls, the names of two bridges, and a vehicle type, and returns the difference in tolls for the specified vehicle between the two bridges.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge toll information with columns 'Bridge', 'Truck', and 'Car'.\n    bridge1 (str): The name of the first bridge.\n    bridge2 (str): The name of the second bridge.\n    vehicle (str): The type of vehicle ('Truck' or 'Car').\n    Returns:\n    float: The difference in tolls for the specified vehicle between the two bridges.\n    \"\"\"\n    # Filter the DataFrame for the specified bridges and vehicle type\n    bridge1_df = df[df['Bridge'] == bridge1]\n    bridge2_df = df[df['Bridge'] == bridge2]\n    \n    # Get the tolls for the specified vehicle type\n    bridge1_toll = bridge1_df[vehicle].values[0]\n    bridge2_toll = bridge2_df[vehicle].values[0]\n    \n    # Calculate the toll difference\n    toll_difference = bridge2_toll - bridge1_toll\n    \n    return toll_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['Tacoma Narrows', 'Oakland Bay', 'Golden Gate', 'George Washington'],\n    'Truck': [4, 6, 7, 16],\n    'Car': [3, 4, 6, 8]\n})\n\n# Call the tool to solve the problem\ntoll_difference = calculate_toll_difference(df, 'Golden Gate', 'George Washington', 'Car')\n\n# Print out the answer\nprint(toll_difference)","question":"A transportation analyst compared various bridges' tolls. How much higher is the toll for a car on the George Washington bridge than on the Golden Gate bridge?","prediction_code":"import pandas as pd\n\ndef calculate_toll_difference(df, bridge1, bridge2, vehicle):\n    \"\"\"\n    This function takes in a pandas DataFrame of bridge tolls, the names of two bridges, and a vehicle type, and returns the difference in tolls for the specified vehicle between the two bridges.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge toll information with columns 'Bridge', 'Truck', and 'Car'.\n    bridge1 (str): The name of the first bridge.\n    bridge2 (str): The name of the second bridge.\n    vehicle (str): The type of vehicle ('Truck' or 'Car').\n    Returns:\n    float: The difference in tolls for the specified vehicle between the two bridges.\n    \"\"\"\n    # Filter the DataFrame for the specified bridges and vehicle type\n    bridge1_df = df[df['Bridge'] == bridge1]\n    bridge2_df = df[df['Bridge'] == bridge2]\n    \n    # Get the tolls for the specified vehicle type\n    bridge1_toll = bridge1_df[vehicle].values[0]\n    bridge2_toll = bridge2_df[vehicle].values[0]\n    \n    # Calculate the toll difference\n    toll_difference = bridge2_toll - bridge1_toll\n    \n    return toll_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['Tacoma Narrows', 'Oakland Bay', 'Golden Gate', 'George Washington'],\n    'Truck': [4, 6, 7, 16],\n    'Car': [3, 4, 6, 8]\n})\n\n# Call the tool to solve the problem\ntoll_difference = calculate_toll_difference(df, 'Golden Gate', 'George Washington', 'Car')\n\n# Print out the answer\nprint(toll_difference)","table":"Name: Bridge tolls\nUnit: $\nContent:\nBridge | Truck | Car\nTacoma Narrows | $4 | $3\nOakland Bay | $6 | $4\nGolden Gate | $7 | $6\nGeorge Washington | $16 | $8"}
{"level":6,"answer":1.0,"prediction":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pies baked and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pies baked.\n    The dataframe should contain \"Day\" and \"Number of pies\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the \"Number of pies\" column\n    pies = df['Number of pies']\n    \n    # Calculate the mode using the value_counts() function\n    mode = pies.value_counts().idxmax()\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday'],\n    'Number of pies': [3, 1, 3, 1, 1]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"A baker wrote down how many pies she made in the past 5 days. What is the mode of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pies baked and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pies baked.\n    The dataframe should contain \"Day\" and \"Number of pies\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the \"Number of pies\" column\n    pies = df['Number of pies']\n    \n    # Calculate the mode using the value_counts() function\n    mode = pies.value_counts().idxmax()\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday'],\n    'Number of pies': [3, 1, 3, 1, 1]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Pies baked\nUnit: None\nContent:\nDay | Number of pies\nThursday | 3\nFriday | 1\nSaturday | 3\nSunday | 1\nMonday | 1"}
{"level":7,"answer":14.0,"prediction":"import pandas as pd\n\ndef count_students_not_going(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trips to the science museum and returns the number of students who did not go to the science museum last year.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of trips to the science museum and their frequencies.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who did not go to the science museum last year.\n    \"\"\"\n    # Filter the DataFrame for the rows where the number of trips is 0\n    not_going_df = df[df['Number of trips'] == 0]\n    \n    # Sum the frequencies of the students who did not go to the science museum\n    num_students_not_going = not_going_df['Frequency'].sum()\n    \n    return num_students_not_going\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [0, 1, 2, 3, 4, 5],\n    'Frequency': [14, 1, 20, 8, 10, 18]\n})\n# Call the tool to solve the problem\nprint(count_students_not_going(df))","question":"Mrs. Sharma, the biology teacher, asked her students how many times they went to the science museum last year. How many students did not go the science museum last year?","prediction_code":"import pandas as pd\n\ndef count_students_not_going(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trips to the science museum and returns the number of students who did not go to the science museum last year.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of trips to the science museum and their frequencies.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who did not go to the science museum last year.\n    \"\"\"\n    # Filter the DataFrame for the rows where the number of trips is 0\n    not_going_df = df[df['Number of trips'] == 0]\n    \n    # Sum the frequencies of the students who did not go to the science museum\n    num_students_not_going = not_going_df['Frequency'].sum()\n    \n    return num_students_not_going","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [0, 1, 2, 3, 4, 5],\n    'Frequency': [14, 1, 20, 8, 10, 18]\n})\n# Call the tool to solve the problem\nprint(count_students_not_going(df))","table":"Name: Trips to the science museum last year\nUnit: None\nContent:\nNumber of trips | Frequency\n0 | 14\n1 | 1\n2 | 20\n3 | 8\n4 | 10\n5 | 18"}
{"level":5,"answer":53.0,"prediction":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of ticket sales and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of tickets sold per day.\n    The dataframe should contain \"Day\" and \"Number of tickets\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Number of tickets\" column\n    mean = df['Number of tickets'].mean()\n    \n    return mean\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Number of tickets': [53, 49, 58, 53, 55, 50]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","question":"Xavier tracked the attendance at the school play. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of ticket sales and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of tickets sold per day.\n    The dataframe should contain \"Day\" and \"Number of tickets\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Number of tickets\" column\n    mean = df['Number of tickets'].mean()\n    \n    return mean","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Number of tickets': [53, 49, 58, 53, 55, 50]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","table":"Name: Tickets sold\nUnit: None\nContent:\nDay | Number of tickets\nSunday | 53\nMonday | 49\nTuesday | 58\nWednesday | 53\nThursday | 55\nFriday | 50"}
{"level":1,"answer":20.0,"prediction":"import pandas as pd\n\ndef calculate_flowers_in_bunches(df, num_bunches):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of flowers in each bunch and the number of bunches, and returns the total number of flowers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of flowers in each bunch.\n    The dataframe should contain \"Number of bunches\" and \"Number of flowers\" columns.\n    num_bunches (int): The number of bunches to calculate the total number of flowers.\n    Returns:\n    int: The total number of flowers in the given number of bunches.\n    \"\"\"\n    # Filter the DataFrame for the specific number of bunches\n    bunch_df = df[df['Number of bunches'] == num_bunches]\n    \n    # Get the number of flowers in the bunch\n    num_flowers = bunch_df['Number of flowers'].values[0]\n    \n    # Calculate the total number of flowers\n    total_flowers = num_bunches * num_flowers\n    \n    return total_flowers\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of bunches': [1, 2, 3, 4],\n    'Number of flowers': [5, 10, 15, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_flowers_in_bunches(df, 4))","question":"Each bunch has 5 flowers. How many flowers are in 4 bunches?","prediction_code":"import pandas as pd\n\ndef calculate_flowers_in_bunches(df, num_bunches):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of flowers in each bunch and the number of bunches, and returns the total number of flowers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of flowers in each bunch.\n    The dataframe should contain \"Number of bunches\" and \"Number of flowers\" columns.\n    num_bunches (int): The number of bunches to calculate the total number of flowers.\n    Returns:\n    int: The total number of flowers in the given number of bunches.\n    \"\"\"\n    # Filter the DataFrame for the specific number of bunches\n    bunch_df = df[df['Number of bunches'] == num_bunches]\n    \n    # Get the number of flowers in the bunch\n    num_flowers = bunch_df['Number of flowers'].values[0]\n    \n    # Calculate the total number of flowers\n    total_flowers = num_bunches * num_flowers\n    \n    return total_flowers","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of bunches': [1, 2, 3, 4],\n    'Number of flowers': [5, 10, 15, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_flowers_in_bunches(df, 4))","table":"Name: None\nUnit: flowers\nContent:\nNumber of bunches | Number of flowers\n1 | 5\n2 | 10\n3 | 15\n4 | ?"}
{"level":1,"answer":20.0,"prediction":"import pandas as pd\n\ndef calculate_total_green_blocks(df, num_bins):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of green blocks in each bin and the number of bins, and returns the total number of green blocks.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of green blocks in each bin with columns 'Number of bins' and 'Number of green blocks'.\n    num_bins (int): The number of bins.\n    Returns:\n    int: The total number of green blocks.\n    \"\"\"\n    # Filter the DataFrame for the specific number of bins\n    bins_df = df[df['Number of bins'] == num_bins]\n    \n    # Get the number of green blocks in the specified number of bins\n    num_green_blocks = bins_df['Number of green blocks'].values[0]\n    \n    # Calculate the total number of green blocks\n    total_green_blocks = num_green_blocks * num_bins\n    \n    return total_green_blocks\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of bins': [1, 2, 3, 4],\n    'Number of green blocks': [5, 10, 15, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_green_blocks(df, 4))","question":"Each bin has 5 green blocks. How many green blocks are in 4 bins?","prediction_code":"import pandas as pd\n\ndef calculate_total_green_blocks(df, num_bins):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of green blocks in each bin and the number of bins, and returns the total number of green blocks.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of green blocks in each bin with columns 'Number of bins' and 'Number of green blocks'.\n    num_bins (int): The number of bins.\n    Returns:\n    int: The total number of green blocks.\n    \"\"\"\n    # Filter the DataFrame for the specific number of bins\n    bins_df = df[df['Number of bins'] == num_bins]\n    \n    # Get the number of green blocks in the specified number of bins\n    num_green_blocks = bins_df['Number of green blocks'].values[0]\n    \n    # Calculate the total number of green blocks\n    total_green_blocks = num_green_blocks * num_bins\n    \n    return total_green_blocks","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of bins': [1, 2, 3, 4],\n    'Number of green blocks': [5, 10, 15, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_green_blocks(df, 4))","table":"Name: None\nUnit: green blocks\nContent:\nNumber of bins | Number of green blocks\n1 | 5\n2 | 10\n3 | 15\n4 | ?"}
{"level":7,"answer":8.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, month1, month2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average waiting time at a doctor's office and two months, and returns the rate of change between the two months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average waiting time at the doctor's office.\n    The DataFrame should have \"Month\" and \"Waiting time (minutes)\" columns.\n    month1 (str): The first month for calculating the rate of change.\n    month2 (str): The second month for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two months.\n    \"\"\"\n    # Filter the DataFrame for the two months\n    month1_df = df[df['Month'] == month1]\n    month2_df = df[df['Month'] == month2]\n    \n    # Get the waiting time for each month\n    waiting_time1 = month1_df['Waiting time (minutes)'].values[0]\n    waiting_time2 = month2_df['Waiting time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (waiting_time2 - waiting_time1) \/ waiting_time1\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['August', 'September', 'October', 'November', 'December'],\n    'Waiting time (minutes)': [39, 32, 40, 32, 31]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'September', 'October'))","question":"Mona, a doctor's office receptionist, tracked the average waiting time at the office each month. According to the table, what was the rate of change between September and October?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, month1, month2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average waiting time at a doctor's office and two months, and returns the rate of change between the two months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average waiting time at the doctor's office.\n    The DataFrame should have \"Month\" and \"Waiting time (minutes)\" columns.\n    month1 (str): The first month for calculating the rate of change.\n    month2 (str): The second month for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two months.\n    \"\"\"\n    # Filter the DataFrame for the two months\n    month1_df = df[df['Month'] == month1]\n    month2_df = df[df['Month'] == month2]\n    \n    # Get the waiting time for each month\n    waiting_time1 = month1_df['Waiting time (minutes)'].values[0]\n    waiting_time2 = month2_df['Waiting time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (waiting_time2 - waiting_time1) \/ waiting_time1\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['August', 'September', 'October', 'November', 'December'],\n    'Waiting time (minutes)': [39, 32, 40, 32, 31]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'September', 'October'))","table":"Name: Average waiting time at a doctor's office\nUnit: minutes per month\nContent:\nMonth | Waiting time (minutes)\nAugust | 39\nSeptember | 32\nOctober | 40\nNovember | 32\nDecember | 31"}
{"level":8,"answer":40.0,"prediction":"import pandas as pd\n\ndef find_smallest_number_of_broken_tiles(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of broken tiles per shipment and returns the smallest number of broken tiles.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of broken tiles per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of broken tiles.\n    \"\"\"\n    # prepare a list to store all broken tiles\n    broken_tiles = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the total number of broken tiles in each shipment\n        for j in range(len(leaf)):\n            broken_tiles.append(stem * 10 + leaf[j])\n    # find the smallest number of broken tiles\n    smallest_number = min(broken_tiles)\n    return smallest_number\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7],\n    'Leaf': [[0, 3, 5, 8], [1, 6, 7, 8, 9], [3, 6, 6, 8, 9, 9], [1, 4]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_broken_tiles(df))","question":"Seaside Flooring tracked the number of broken tiles in each shipment it received last year. What is the smallest number of broken tiles?","prediction_code":"import pandas as pd\n\ndef find_smallest_number_of_broken_tiles(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of broken tiles per shipment and returns the smallest number of broken tiles.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of broken tiles per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of broken tiles.\n    \"\"\"\n    # prepare a list to store all broken tiles\n    broken_tiles = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the total number of broken tiles in each shipment\n        for j in range(len(leaf)):\n            broken_tiles.append(stem * 10 + leaf[j])\n    # find the smallest number of broken tiles\n    smallest_number = min(broken_tiles)\n    return smallest_number","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7],\n    'Leaf': [[0, 3, 5, 8], [1, 6, 7, 8, 9], [3, 6, 6, 8, 9, 9], [1, 4]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_broken_tiles(df))","table":"Name: Broken tiles per shipment\nUnit: broken tiles\nContent:\nStem | Leaf \n4 | 0, 3, 5, 8\n5 | 1, 6, 7, 8, 9\n6 | 3, 6, 6, 8, 9, 9\n7 | 1, 4"}
{"level":6,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_mean_stop_signs(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of stop signs per street and returns the mean number of stop signs.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of stop signs per street.\n    The dataframe should contain \"Street\" and \"Number of stop signs\" columns.\n    Returns:\n    float: The mean number of stop signs.\n    \"\"\"\n    # Calculate the mean of the \"Number of stop signs\" column\n    mean_stop_signs = df['Number of stop signs'].mean()\n    \n    return mean_stop_signs\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Street': ['Marshall Street', 'Mason Street', 'Jackson Street', 'Spring Street', 'Watson Street', 'Irving Street', 'Peabody Street', 'Smith Street'],\n    'Number of stop signs': [5, 2, 4, 10, 7, 6, 1, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_stop_signs(df))","question":"The town council reported on how many stop signs there are on each street. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean_stop_signs(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of stop signs per street and returns the mean number of stop signs.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of stop signs per street.\n    The dataframe should contain \"Street\" and \"Number of stop signs\" columns.\n    Returns:\n    float: The mean number of stop signs.\n    \"\"\"\n    # Calculate the mean of the \"Number of stop signs\" column\n    mean_stop_signs = df['Number of stop signs'].mean()\n    \n    return mean_stop_signs","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Street': ['Marshall Street', 'Mason Street', 'Jackson Street', 'Spring Street', 'Watson Street', 'Irving Street', 'Peabody Street', 'Smith Street'],\n    'Number of stop signs': [5, 2, 4, 10, 7, 6, 1, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_stop_signs(df))","table":"Name: Stop signs\nUnit: None\nContent:\nStreet | Number of stop signs\nMarshall Street | 5\nMason Street | 2\nJackson Street | 4\nSpring Street | 10\nWatson Street | 7\nIrving Street | 6\nPeabody Street | 1\nSmith Street | 5"}
{"level":8,"answer":13.0,"prediction":"import pandas as pd\n\ndef find_smallest_number_of_plants(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of plants per garden and returns the smallest number of plants.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of plants per garden.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of plants.\n    \"\"\"\n    # prepare a list to store the number of plants in each garden\n    plants = []\n    # calculate the total number of plants in each garden\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        plants.append(stem + len(leaf))\n    # find the smallest number of plants\n    smallest_number = min(plants)\n    return smallest_number\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5],\n    'Leaf': [[3, 9], [0, 8], [0, 1, 3, 4, 4, 5, 5, 6, 6, 8], [0, 9], [0, 4, 5, 9]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_plants(df))","question":"The members of the local garden club tallied the number of plants in each person's garden. What is the smallest number of plants?","prediction_code":"import pandas as pd\n\ndef find_smallest_number_of_plants(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of plants per garden and returns the smallest number of plants.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of plants per garden.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of plants.\n    \"\"\"\n    # prepare a list to store the number of plants in each garden\n    plants = []\n    # calculate the total number of plants in each garden\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        plants.append(stem + len(leaf))\n    # find the smallest number of plants\n    smallest_number = min(plants)\n    return smallest_number","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5],\n    'Leaf': [[3, 9], [0, 8], [0, 1, 3, 4, 4, 5, 5, 6, 6, 8], [0, 9], [0, 4, 5, 9]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_plants(df))","table":"Name: Plants per garden\nUnit: plants\nContent:\nStem | Leaf \n1 | 3, 9\n2 | 0, 8\n3 | 0, 1, 3, 4, 4, 5, 5, 6, 6, 8\n4 | 0, 9\n5 | 0, 4, 5, 9"}
{"level":8,"answer":24.52,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of buying a certain quantity of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    item (str): The name of the item to be purchased.\n    quantity (int): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of buying the specified quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['measuring tape', 'padlock', 'broom', 'wrench', 'rake'],\n    'Price': [5.40, 5.93, 7.32, 6.13, 5.86]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'wrench', 4))","question":"How much money does Danny need to buy 4 wrenches?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of buying a certain quantity of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    item (str): The name of the item to be purchased.\n    quantity (int): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of buying the specified quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['measuring tape', 'padlock', 'broom', 'wrench', 'rake'],\n    'Price': [5.40, 5.93, 7.32, 6.13, 5.86]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'wrench', 4))","table":"Name: None\nUnit: $\nContent:\nmeasuring tape | $5.40\npadlock | $5.93\nbroom | $7.32\nwrench | $6.13\nrake | $5.86"}
{"level":5,"answer":34.0,"prediction":"import pandas as pd\n\ndef calculate_fewer_people(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trip frequencies and returns the difference in the number of people who said their next trip will be in winter compared to summer.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing trip frequencies with columns 'Season' and 'Frequency'.\n    Returns:\n    int: The difference in the number of people who said their next trip will be in winter compared to summer.\n    \"\"\"\n    # Filter the DataFrame for winter and summer seasons\n    winter_freq = df[df['Season'] == 'winter']['Frequency'].values[0]\n    summer_freq = df[df['Season'] == 'summer']['Frequency'].values[0]\n    \n    # Calculate the difference in frequencies\n    fewer_people = summer_freq - winter_freq\n    \n    return fewer_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Season': ['fall', 'spring', 'summer', 'winter'],\n    'Frequency': [12, 19, 47, 13]\n})\n# Call the tool to solve the problem\nprint(calculate_fewer_people(df))","question":"Wanderlust Travel Agency asked customers when they plan to take their next trip. This frequency chart shows their answers. How many fewer people said their next trip will be in winter than in summer?","prediction_code":"import pandas as pd\n\ndef calculate_fewer_people(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trip frequencies and returns the difference in the number of people who said their next trip will be in winter compared to summer.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing trip frequencies with columns 'Season' and 'Frequency'.\n    Returns:\n    int: The difference in the number of people who said their next trip will be in winter compared to summer.\n    \"\"\"\n    # Filter the DataFrame for winter and summer seasons\n    winter_freq = df[df['Season'] == 'winter']['Frequency'].values[0]\n    summer_freq = df[df['Season'] == 'summer']['Frequency'].values[0]\n    \n    # Calculate the difference in frequencies\n    fewer_people = summer_freq - winter_freq\n    \n    return fewer_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Season': ['fall', 'spring', 'summer', 'winter'],\n    'Frequency': [12, 19, 47, 13]\n})\n# Call the tool to solve the problem\nprint(calculate_fewer_people(df))","table":"Name: Next trip\nUnit: fewer people\nContent:\nSeason | Frequency\nfall | 12\nspring | 19\nsummer | 47\nwinter | 13"}
{"level":7,"answer":9.0,"prediction":"import pandas as pd\n\ndef count_customers_with_fewer_than_2_cookies(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of cookies eaten by each customer and returns the number of customers who ate fewer than 2 cookies.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of cookies eaten by each customer.\n    The dataframe should contain \"Cookies eaten\" and \"Frequency\" columns.\n    Returns:\n    int: The number of customers who ate fewer than 2 cookies.\n    \"\"\"\n    # Filter the DataFrame for customers who ate fewer than 2 cookies\n    filtered_df = df[df['Cookies eaten'] < 2]\n    \n    # Calculate the total number of customers who ate fewer than 2 cookies\n    num_customers = filtered_df['Frequency'].sum()\n    \n    return num_customers\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Cookies eaten': [1, 2, 3, 4],\n    'Frequency': [9, 18, 0, 20]\n})\n# Call the tool to solve the problem\nprint(count_customers_with_fewer_than_2_cookies(df))","question":"Zane counted the number of cookies eaten by each customer at last week's bake sale. How many customers ate fewer than 2 cookies last week?","prediction_code":"import pandas as pd\n\ndef count_customers_with_fewer_than_2_cookies(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of cookies eaten by each customer and returns the number of customers who ate fewer than 2 cookies.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of cookies eaten by each customer.\n    The dataframe should contain \"Cookies eaten\" and \"Frequency\" columns.\n    Returns:\n    int: The number of customers who ate fewer than 2 cookies.\n    \"\"\"\n    # Filter the DataFrame for customers who ate fewer than 2 cookies\n    filtered_df = df[df['Cookies eaten'] < 2]\n    \n    # Calculate the total number of customers who ate fewer than 2 cookies\n    num_customers = filtered_df['Frequency'].sum()\n    \n    return num_customers","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Cookies eaten': [1, 2, 3, 4],\n    'Frequency': [9, 18, 0, 20]\n})\n# Call the tool to solve the problem\nprint(count_customers_with_fewer_than_2_cookies(df))","table":"Name: Eating cookies last week\nUnit: None\nContent:\nCookies eaten | Frequency\n1 | 9\n2 | 18\n3 | 0\n4 | 20"}
{"level":1,"answer":50.0,"prediction":"import pandas as pd\n\ndef calculate_total_boxes(df, num_crates):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of boxes of blueberries per crate and the number of crates, and returns the total number of boxes of blueberries.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of crates and the number of boxes of blueberries per crate.\n    The DataFrame should have columns 'Number of crates' and 'Number of boxes of blueberries'.\n    num_crates (int): The number of crates.\n    Returns:\n    int: The total number of boxes of blueberries.\n    \"\"\"\n    # Filter the DataFrame for the specific number of crates\n    crates_df = df[df['Number of crates'] == num_crates]\n    \n    # Get the number of boxes of blueberries for the specified number of crates\n    num_boxes = crates_df['Number of boxes of blueberries'].values[0]\n    \n    return num_boxes\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of crates': [1, 2, 3, 4, 5],\n    'Number of boxes of blueberries': [10, 20, 30, 40, '?']\n})\n\n# Specify the number of crates\nnum_crates = 5\n\n# Call the tool to solve the problem\nprint(calculate_total_boxes(df, num_crates))","question":"Each crate has 10 boxes of blueberries. How many boxes of blueberries are in 5 crates?","prediction_code":"import pandas as pd\n\ndef calculate_total_boxes(df, num_crates):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of boxes of blueberries per crate and the number of crates, and returns the total number of boxes of blueberries.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of crates and the number of boxes of blueberries per crate.\n    The DataFrame should have columns 'Number of crates' and 'Number of boxes of blueberries'.\n    num_crates (int): The number of crates.\n    Returns:\n    int: The total number of boxes of blueberries.\n    \"\"\"\n    # Filter the DataFrame for the specific number of crates\n    crates_df = df[df['Number of crates'] == num_crates]\n    \n    # Get the number of boxes of blueberries for the specified number of crates\n    num_boxes = crates_df['Number of boxes of blueberries'].values[0]\n    \n    return num_boxes","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of crates': [1, 2, 3, 4, 5],\n    'Number of boxes of blueberries': [10, 20, 30, 40, '?']\n})\n\n# Specify the number of crates\nnum_crates = 5\n\n# Call the tool to solve the problem\nprint(calculate_total_boxes(df, num_crates))","table":"Name: None\nUnit: boxes of blueberries\nContent:\nNumber of crates | Number of boxes of blueberries\n1 | 10\n2 | 20\n3 | 30\n4 | 40\n5 | ?"}
{"level":4,"answer":35.0,"prediction":"import pandas as pd\n\ndef find_smallest_situps(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of sit-up competition results and returns the smallest number of sit-ups done.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of sit-ups done by each student.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of sit-ups done.\n    \"\"\"\n    # prepare a list to store all sit-up numbers\n    situps = []\n    # iterate through each row of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the actual sit-up number for each row\n        for j in range(len(leaf)):\n            situps.append(stem * 10 + leaf[j])\n    # find the smallest sit-up number\n    smallest_situps = min(situps)\n    return smallest_situps\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7],\n    'Leaf': [[5], [1, 3, 7], [1, 8, 9], [1, 1, 5, 5], [0, 1, 2, 9]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_situps(df))","question":"Miss Farrell ran a sit-up competition among her P.E. students and monitored how many sit-ups each students could do. What is the smallest number of sit-ups done?","prediction_code":"import pandas as pd\n\ndef find_smallest_situps(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of sit-up competition results and returns the smallest number of sit-ups done.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of sit-ups done by each student.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of sit-ups done.\n    \"\"\"\n    # prepare a list to store all sit-up numbers\n    situps = []\n    # iterate through each row of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the actual sit-up number for each row\n        for j in range(len(leaf)):\n            situps.append(stem * 10 + leaf[j])\n    # find the smallest sit-up number\n    smallest_situps = min(situps)\n    return smallest_situps","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7],\n    'Leaf': [[5], [1, 3, 7], [1, 8, 9], [1, 1, 5, 5], [0, 1, 2, 9]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_situps(df))","table":"Name: Sit-up competition (number of sit-ups)\nUnit: sit-ups\nContent:\nStem | Leaf \n3 | 5\n4 | 1, 3, 7\n5 | 1, 8, 9\n6 | 1, 1, 5, 5\n7 | 0, 1, 2, 9"}
{"level":5,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_median_soccer_fields(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of soccer fields per park and returns the median number of soccer fields.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of soccer fields per park.\n    The dataframe should contain \"Park\" and \"Number of soccer fields\" columns.\n    Returns:\n    float: The median number of soccer fields.\n    \"\"\"\n    # Get the \"Number of soccer fields\" column\n    soccer_fields = df['Number of soccer fields']\n    \n    # Calculate the median\n    median_soccer_fields = soccer_fields.median()\n    \n    return median_soccer_fields\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Park': ['Lighthouse Park', 'Moon Park', 'Canyon Park', 'Madison Park', 'Crane Park', 'Juniper Park', 'Middle Park'],\n    'Number of soccer fields': [3, 7, 1, 6, 1, 5, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_median_soccer_fields(df))","question":"The parks department compared how many soccer fields there are at each park. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median_soccer_fields(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of soccer fields per park and returns the median number of soccer fields.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of soccer fields per park.\n    The dataframe should contain \"Park\" and \"Number of soccer fields\" columns.\n    Returns:\n    float: The median number of soccer fields.\n    \"\"\"\n    # Get the \"Number of soccer fields\" column\n    soccer_fields = df['Number of soccer fields']\n    \n    # Calculate the median\n    median_soccer_fields = soccer_fields.median()\n    \n    return median_soccer_fields","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Park': ['Lighthouse Park', 'Moon Park', 'Canyon Park', 'Madison Park', 'Crane Park', 'Juniper Park', 'Middle Park'],\n    'Number of soccer fields': [3, 7, 1, 6, 1, 5, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_median_soccer_fields(df))","table":"Name: Soccer fields\nUnit: None\nContent:\nPark | Number of soccer fields\nLighthouse Park | 3\nMoon Park | 7\nCanyon Park | 1\nMadison Park | 6\nCrane Park | 1\nJuniper Park | 5\nMiddle Park | 7"}
{"level":8,"answer":10.0,"prediction":"import pandas as pd\n\ndef count_children_with_1_thank_you_note(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of thank-you notes written by children and returns the number of children who wrote exactly 1 thank-you note.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of thank-you notes written by each child.\n    The dataframe should contain \"Thank-you notes written\" and \"Frequency\" columns.\n    Returns:\n    int: The number of children who wrote exactly 1 thank-you note.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of thank-you notes written is 1\n    filtered_df = df[df['Thank-you notes written'] == 1]\n    \n    # Get the frequency of children who wrote exactly 1 thank-you note\n    num_children = filtered_df['Frequency'].sum()\n    \n    return num_children\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Thank-you notes written': [0, 1, 2, 3],\n    'Frequency': [3, 10, 20, 16]\n})\n# Call the tool to solve the problem\nprint(count_children_with_1_thank_you_note(df))","question":"Several children compared how many thank-you notes they had written during the previous month. How many children wrote exactly 1 thank-you note?","prediction_code":"import pandas as pd\n\ndef count_children_with_1_thank_you_note(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of thank-you notes written by children and returns the number of children who wrote exactly 1 thank-you note.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of thank-you notes written by each child.\n    The dataframe should contain \"Thank-you notes written\" and \"Frequency\" columns.\n    Returns:\n    int: The number of children who wrote exactly 1 thank-you note.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of thank-you notes written is 1\n    filtered_df = df[df['Thank-you notes written'] == 1]\n    \n    # Get the frequency of children who wrote exactly 1 thank-you note\n    num_children = filtered_df['Frequency'].sum()\n    \n    return num_children","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Thank-you notes written': [0, 1, 2, 3],\n    'Frequency': [3, 10, 20, 16]\n})\n# Call the tool to solve the problem\nprint(count_children_with_1_thank_you_note(df))","table":"Name: Writing thank-you notes\nUnit: None\nContent:\nThank-you notes written | Frequency\n0 | 3\n1 | 10\n2 | 20\n3 | 16"}
{"level":7,"answer":7.0,"prediction":"import pandas as pd\n\ndef count_offices_with_10_square_meters(df):\n    \"\"\"\n    This function takes in a pandas dataframe of office sizes and returns the number of offices that are at least 10 square meters.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the sizes of offices.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of offices that are at least 10 square meters.\n    \"\"\"\n    # prepare a list to calculate sizes of each office\n    sizes = []\n    # calculate the total size of each office\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            sizes.append(stem * 10 + leaf[j])\n    # filter the offices where the size is greater than or equal to 10\n    filtered = [size for size in sizes if size >= 10]\n    # count the number of offices\n    num_offices = len(filtered)\n    return num_offices\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[9], [0, 5], [], [0, 5], [], [9], [], [8]]\n})\n# Call the tool to solve the problem\nprint(count_offices_with_10_square_meters(df))","question":"Terrence, who rents properties for a living, measures all the offices in a building he is renting. How many offices are at least 10 square meters?","prediction_code":"import pandas as pd\n\ndef count_offices_with_10_square_meters(df):\n    \"\"\"\n    This function takes in a pandas dataframe of office sizes and returns the number of offices that are at least 10 square meters.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the sizes of offices.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of offices that are at least 10 square meters.\n    \"\"\"\n    # prepare a list to calculate sizes of each office\n    sizes = []\n    # calculate the total size of each office\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            sizes.append(stem * 10 + leaf[j])\n    # filter the offices where the size is greater than or equal to 10\n    filtered = [size for size in sizes if size >= 10]\n    # count the number of offices\n    num_offices = len(filtered)\n    return num_offices","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[9], [0, 5], [], [0, 5], [], [9], [], [8]]\n})\n# Call the tool to solve the problem\nprint(count_offices_with_10_square_meters(df))","table":"Name: Office sizes (square meters)\nUnit: offices\nContent:\nStem | Leaf \n1 | 9\n2 | 0, 5\n3 | \n4 | 0, 5\n5 | \n6 | 9\n7 | \n8 | 8"}
{"level":6,"answer":4.8,"prediction":"import pandas as pd\n\ndef calculate_cost(df, item, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame of bead prices, an item name, and a weight in pounds, and returns the total cost of the beads.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bead prices with columns 'Name' and 'Unit'.\n    item (str): The name of the item.\n    weight (float): The weight of the beads in pounds.\n    Returns:\n    float: The total cost of the beads.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    if not item_df.empty:\n        item_price = item_df['Unit'].values[0]\n        # Calculate the total cost\n        total_cost = weight * item_price\n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['paper beads', 'plastic beads', 'metal beads', 'glass beads', 'wooden beads'],\n    'Unit': [6, 10, 12, 6, 12]\n})\n# Call the tool to solve the problem\nprint(calculate_cost(df, 'glass beads', 4\/5))","question":"Sandeep went to the store and bought 4\/5 of a pound of glass beads. How much did he spend?","prediction_code":"import pandas as pd\n\ndef calculate_cost(df, item, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame of bead prices, an item name, and a weight in pounds, and returns the total cost of the beads.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bead prices with columns 'Name' and 'Unit'.\n    item (str): The name of the item.\n    weight (float): The weight of the beads in pounds.\n    Returns:\n    float: The total cost of the beads.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    if not item_df.empty:\n        item_price = item_df['Unit'].values[0]\n        # Calculate the total cost\n        total_cost = weight * item_price\n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['paper beads', 'plastic beads', 'metal beads', 'glass beads', 'wooden beads'],\n    'Unit': [6, 10, 12, 6, 12]\n})\n# Call the tool to solve the problem\nprint(calculate_cost(df, 'glass beads', 4\/5))","table":"Name: None\nUnit: $\nContent:\npaper beads | $6\/pound\nplastic beads | $10\/pound\nmetal beads | $12\/pound\nglass beads | $6\/pound\nwooden beads | $12\/pound"}
{"level":8,"answer":-11.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of students receiving scholarships and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of students receiving scholarships per year.\n    The DataFrame should have \"Year\" and \"Students\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_students = df[df['Year'] == start_year]['Students'].values[0]\n    end_students = df[df['Year'] == end_year]['Students'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_students - start_students) \/ start_students * 100\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2013, 2014, 2015, 2016, 2017],\n    'Students': [37, 26, 29, 36, 44]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2013, 2014))","question":"The financial aid office at Scott University produced an internal report on the number of students receiving scholarships. According to the table, what was the rate of change between 2013 and 2014?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of students receiving scholarships and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of students receiving scholarships per year.\n    The DataFrame should have \"Year\" and \"Students\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_students = df[df['Year'] == start_year]['Students'].values[0]\n    end_students = df[df['Year'] == end_year]['Students'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_students - start_students) \/ start_students * 100\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2013, 2014, 2015, 2016, 2017],\n    'Students': [37, 26, 29, 36, 44]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2013, 2014))","table":"Name: Students receiving scholarships\nUnit: students per year\nContent:\nYear | Students\n2013 | 37\n2014 | 26\n2015 | 29\n2016 | 36\n2017 | 44"}
{"level":7,"answer":8.0,"prediction":"import pandas as pd\n\ndef find_most_drawn_card(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of times each card was drawn and returns the number that was drawn the most times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of times each card was drawn.\n    The dataframe should contain \"Number drawn\" and \"Frequency\" columns.\n    Returns:\n    int: The number that was drawn the most times.\n    \"\"\"\n    # Find the maximum frequency value\n    max_frequency = df['Frequency'].max()\n    \n    # Filter the DataFrame for the row(s) with the maximum frequency\n    most_drawn_cards = df[df['Frequency'] == max_frequency]\n    \n    # Get the number(s) that was drawn the most times\n    most_drawn_numbers = most_drawn_cards['Number drawn'].tolist()\n    \n    return most_drawn_numbers\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number drawn': [4, 5, 6, 7, 8, 9],\n    'Frequency': [14, 11, 3, 9, 18, 16]\n})\n# Call the tool to solve the problem\nmost_drawn_numbers = find_most_drawn_card(df)\n# Print out the answer\nprint(most_drawn_numbers)","question":"A math textbook explains probability by showing a set of cards numbered 4 through 9 and showing the number of people who might draw each card. Which number was drawn the most times?","prediction_code":"import pandas as pd\n\ndef find_most_drawn_card(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of times each card was drawn and returns the number that was drawn the most times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of times each card was drawn.\n    The dataframe should contain \"Number drawn\" and \"Frequency\" columns.\n    Returns:\n    int: The number that was drawn the most times.\n    \"\"\"\n    # Find the maximum frequency value\n    max_frequency = df['Frequency'].max()\n    \n    # Filter the DataFrame for the row(s) with the maximum frequency\n    most_drawn_cards = df[df['Frequency'] == max_frequency]\n    \n    # Get the number(s) that was drawn the most times\n    most_drawn_numbers = most_drawn_cards['Number drawn'].tolist()\n    \n    return most_drawn_numbers","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number drawn': [4, 5, 6, 7, 8, 9],\n    'Frequency': [14, 11, 3, 9, 18, 16]\n})\n# Call the tool to solve the problem\nmost_drawn_numbers = find_most_drawn_card(df)\n# Print out the answer\nprint(most_drawn_numbers)","table":"Name: Drawing a card between 4 and 9\nUnit: None\nContent:\nNumber drawn | Frequency\n4 | 14\n5 | 11\n6 | 3\n7 | 9\n8 | 18\n9 | 16"}
{"level":4,"answer":6.0,"prediction":"import pandas as pd\n\ndef count_teams_with_size(df, min_size, max_size):\n    \"\"\"\n    This function takes in a pandas DataFrame of track team sizes and returns the number of teams that have at least min_size members but fewer than max_size members.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the sizes of track teams.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_size (int): The minimum number of members a team should have.\n    max_size (int): The maximum number of members a team should have.\n    Returns:\n    int: The number of teams that have at least min_size members but fewer than max_size members.\n    \"\"\"\n    # prepare a list to calculate the size of each team\n    team_sizes = []\n    # calculate the size of each team\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            team_sizes.append(stem * 10 + leaf[j])\n    # filter the teams where the size is greater than or equal to min_size and less than max_size\n    filtered = [size for size in team_sizes if min_size <= size < max_size]\n    # count the number of teams\n    num_teams = len(filtered)\n    return num_teams\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7],\n    'Leaf': [[0, 3, 4], [7, 9], [6, 6, 7, 9], [4, 5], [4, 8, 8, 8]]\n})\n# Call the tool to solve the problem\nprint(count_teams_with_size(df, 50, 68))","question":"Mr. Gupta, a track coach, recorded the sizes of all the nearby track teams. How many teams have at least 50 members but fewer than 68 members?","prediction_code":"import pandas as pd\n\ndef count_teams_with_size(df, min_size, max_size):\n    \"\"\"\n    This function takes in a pandas DataFrame of track team sizes and returns the number of teams that have at least min_size members but fewer than max_size members.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the sizes of track teams.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_size (int): The minimum number of members a team should have.\n    max_size (int): The maximum number of members a team should have.\n    Returns:\n    int: The number of teams that have at least min_size members but fewer than max_size members.\n    \"\"\"\n    # prepare a list to calculate the size of each team\n    team_sizes = []\n    # calculate the size of each team\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            team_sizes.append(stem * 10 + leaf[j])\n    # filter the teams where the size is greater than or equal to min_size and less than max_size\n    filtered = [size for size in team_sizes if min_size <= size < max_size]\n    # count the number of teams\n    num_teams = len(filtered)\n    return num_teams","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7],\n    'Leaf': [[0, 3, 4], [7, 9], [6, 6, 7, 9], [4, 5], [4, 8, 8, 8]]\n})\n# Call the tool to solve the problem\nprint(count_teams_with_size(df, 50, 68))","table":"Name: Track team sizes (number of members)\nUnit: None\nContent:\nStem | Leaf \n3 | 0, 3, 4\n4 | 7, 9\n5 | 6, 6, 7, 9\n6 | 4, 5\n7 | 4, 8, 8, 8"}
{"level":8,"answer":14.0,"prediction":"import pandas as pd\n\ndef count_pizzas_with_fewer_pepperoni(df, threshold):\n    \"\"\"\n    This function takes in a pandas dataframe of pieces of pepperoni per pizza, and returns the number of pizzas that have fewer than a given number of pepperoni pieces.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pepperoni pieces per pizza.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    threshold (int): The maximum number of pepperoni pieces allowed.\n    Returns:\n    int: The number of pizzas that have fewer than the given number of pepperoni pieces.\n    \"\"\"\n    # prepare a list to calculate the number of pepperoni pieces on each pizza\n    pepperoni_pieces = []\n    # calculate the total number of pepperoni pieces on each pizza\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            pepperoni_pieces.append(stem * 10 + leaf[j])\n    # filter the pizzas where the total number of pepperoni pieces is less than the threshold\n    filtered = [pieces for pieces in pepperoni_pieces if pieces < threshold]\n    # count the number of pizzas\n    num_pizzas = len(filtered)\n    return num_pizzas\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[0, 8], [0, 4], [0, 1, 3, 3, 3, 4, 7, 7, 9], [3, 7]]\n})\n# Set the threshold for the number of pepperoni pieces\nthreshold = 46\n# Call the tool to solve the problem\nprint(count_pizzas_with_fewer_pepperoni(df, threshold))","question":"Gavin counted the number of pieces of pepperoni on each pizza he made. How many pizzas had fewer than 46 pieces of pepperoni?","prediction_code":"import pandas as pd\n\ndef count_pizzas_with_fewer_pepperoni(df, threshold):\n    \"\"\"\n    This function takes in a pandas dataframe of pieces of pepperoni per pizza, and returns the number of pizzas that have fewer than a given number of pepperoni pieces.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pepperoni pieces per pizza.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    threshold (int): The maximum number of pepperoni pieces allowed.\n    Returns:\n    int: The number of pizzas that have fewer than the given number of pepperoni pieces.\n    \"\"\"\n    # prepare a list to calculate the number of pepperoni pieces on each pizza\n    pepperoni_pieces = []\n    # calculate the total number of pepperoni pieces on each pizza\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            pepperoni_pieces.append(stem * 10 + leaf[j])\n    # filter the pizzas where the total number of pepperoni pieces is less than the threshold\n    filtered = [pieces for pieces in pepperoni_pieces if pieces < threshold]\n    # count the number of pizzas\n    num_pizzas = len(filtered)\n    return num_pizzas","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[0, 8], [0, 4], [0, 1, 3, 3, 3, 4, 7, 7, 9], [3, 7]]\n})\n# Set the threshold for the number of pepperoni pieces\nthreshold = 46\n# Call the tool to solve the problem\nprint(count_pizzas_with_fewer_pepperoni(df, threshold))","table":"Name: Pieces of pepperoni per pizza\nUnit: pizzas\nContent:\nStem | Leaf \n1 | 0, 8\n2 | 0, 4\n3 | 0, 1, 3, 3, 3, 4, 7, 7, 9\n4 | 3, 7"}
{"level":8,"answer":7.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of e-mails sent per day and returns the median of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of e-mails sent per day.\n    The dataframe should contain \"Day\" and \"Number of e-mails\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of e-mails']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Number of e-mails': [7, 3, 5, 7, 10, 7, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"Alexandra looked at her e-mail outbox to see how many e-mails she sent each day. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of e-mails sent per day and returns the median of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of e-mails sent per day.\n    The dataframe should contain \"Day\" and \"Number of e-mails\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of e-mails']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Number of e-mails': [7, 3, 5, 7, 10, 7, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: E-mails sent\nUnit: None\nContent:\nDay | Number of e-mails\nSaturday | 7\nSunday | 3\nMonday | 5\nTuesday | 7\nWednesday | 10\nThursday | 7\nFriday | 5"}
{"level":8,"answer":4.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of a table and two years, and returns the rate of change between the two years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the table.\n    start_year (int): The starting year.\n    end_year (int): The ending year.\n    Returns:\n    float: The rate of change between the two years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_budget = df[df['Year'] == start_year]['Per-student budget'].values[0]\n    end_budget = df[df['Year'] == end_year]['Per-student budget'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_budget - start_budget) \/ start_budget * 100\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2006, 2007, 2008, 2009, 2010],\n    'Per-student budget': [35, 39, 38, 35, 30]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2006, 2007))","question":"Each year the Westford School District publishes its annual budget, which includes information on the sports program's per-student spending. According to the table, what was the rate of change between 2006 and 2007?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of a table and two years, and returns the rate of change between the two years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the table.\n    start_year (int): The starting year.\n    end_year (int): The ending year.\n    Returns:\n    float: The rate of change between the two years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_budget = df[df['Year'] == start_year]['Per-student budget'].values[0]\n    end_budget = df[df['Year'] == end_year]['Per-student budget'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_budget - start_budget) \/ start_budget * 100\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2006, 2007, 2008, 2009, 2010],\n    'Per-student budget': [35, 39, 38, 35, 30]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2006, 2007))","table":"Name: Westford School District sports budget\nUnit: $, per year\nContent:\nYear | Per-student budget\n2006 | $35\n2007 | $39\n2008 | $38\n2009 | $35\n2010 | $30"}
{"level":7,"answer":39350.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of purchasing a specific item in a specific quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    item (str): The name of the item to be purchased.\n    quantity (int): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of purchasing the item in the given quantity.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['super laptop', 'high-tech laptop', 'business desktop', 'high-tech desktop', 'wide-screen desktop', 'super desktop'],\n    'Price': [2978.00, 9408.00, 7312.00, 7870.00, 4005.00, 7136.00]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'high-tech desktop', 5))","question":"How much money does Susan need to buy 5 high-tech desktops?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of purchasing a specific item in a specific quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    item (str): The name of the item to be purchased.\n    quantity (int): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of purchasing the item in the given quantity.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['super laptop', 'high-tech laptop', 'business desktop', 'high-tech desktop', 'wide-screen desktop', 'super desktop'],\n    'Price': [2978.00, 9408.00, 7312.00, 7870.00, 4005.00, 7136.00]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'high-tech desktop', 5))","table":"Name: None\nUnit: $\nContent:\nsuper laptop | $2,978.00\nhigh-tech laptop | $9,408.00\nbusiness desktop | $7,312.00\nhigh-tech desktop | $7,870.00\nwide-screen desktop | $4,005.00\nsuper desktop | $7,136.00"}
{"level":2,"answer":15.0,"prediction":"import pandas as pd\n\ndef calculate_opals(df, num_bracelets):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of bracelets and the number of opals per bracelet, and returns the total number of opals for a given number of bracelets.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of bracelets and the number of opals per bracelet.\n    The dataframe should contain \"Number of bracelets\" and \"Number of opals\" columns.\n    num_bracelets (int): The number of bracelets to calculate the total number of opals for.\n    Returns:\n    int: The total number of opals for the given number of bracelets.\n    \"\"\"\n    # Filter the DataFrame for the specific number of bracelets\n    df_filtered = df[df['Number of bracelets'] == num_bracelets]\n    \n    # Check if the DataFrame is empty\n    if df_filtered.empty:\n        return \"Number of opals not found for {} bracelets\".format(num_bracelets)\n    \n    # Get the number of opals for the specific number of bracelets\n    num_opals = df_filtered['Number of opals'].values[0]\n    \n    # Calculate the total number of opals\n    total_opals = num_bracelets * num_opals\n    \n    return total_opals\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of bracelets': [1, 2, 3],\n    'Number of opals': [5, 10, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_opals(df, 3))","question":"Each bracelet has 5 opals. How many opals are on 3 bracelets?","prediction_code":"import pandas as pd\n\ndef calculate_opals(df, num_bracelets):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of bracelets and the number of opals per bracelet, and returns the total number of opals for a given number of bracelets.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of bracelets and the number of opals per bracelet.\n    The dataframe should contain \"Number of bracelets\" and \"Number of opals\" columns.\n    num_bracelets (int): The number of bracelets to calculate the total number of opals for.\n    Returns:\n    int: The total number of opals for the given number of bracelets.\n    \"\"\"\n    # Filter the DataFrame for the specific number of bracelets\n    df_filtered = df[df['Number of bracelets'] == num_bracelets]\n    \n    # Check if the DataFrame is empty\n    if df_filtered.empty:\n        return \"Number of opals not found for {} bracelets\".format(num_bracelets)\n    \n    # Get the number of opals for the specific number of bracelets\n    num_opals = df_filtered['Number of opals'].values[0]\n    \n    # Calculate the total number of opals\n    total_opals = num_bracelets * num_opals\n    \n    return total_opals","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of bracelets': [1, 2, 3],\n    'Number of opals': [5, 10, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_opals(df, 3))","table":"Name: None\nUnit: None\nContent:\nNumber of bracelets | Number of opals\n1 | 5\n2 | 10\n3 | ?"}
{"level":6,"answer":4.0,"prediction":"import pandas as pd\n\ndef count_people_with_age(df, age):\n    \"\"\"\n    This function takes in a pandas dataframe of ages and returns the number of people who are exactly a certain age.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the ages of people.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    age (int): The age to count.\n    Returns:\n    int: The number of people who are exactly the specified age.\n    \"\"\"\n    # prepare a list to store all ages\n    ages = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            ages.append(stem * 10 + leaf[j])\n    # count the number of people with the specified age\n    num_people = ages.count(age)\n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[7, 9], [6, 6, 6, 6, 7], [6, 6], [], [2], [1, 2, 4, 6], [7, 8, 8], [3, 5, 8]]\n})\n# Call the tool to solve the problem\nprint(count_people_with_age(df, 26))","question":"At their family reunion, the Humphrey family recorded everyone's age. How many people are exactly 26 years old?","prediction_code":"import pandas as pd\n\ndef count_people_with_age(df, age):\n    \"\"\"\n    This function takes in a pandas dataframe of ages and returns the number of people who are exactly a certain age.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the ages of people.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    age (int): The age to count.\n    Returns:\n    int: The number of people who are exactly the specified age.\n    \"\"\"\n    # prepare a list to store all ages\n    ages = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            ages.append(stem * 10 + leaf[j])\n    # count the number of people with the specified age\n    num_people = ages.count(age)\n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[7, 9], [6, 6, 6, 6, 7], [6, 6], [], [2], [1, 2, 4, 6], [7, 8, 8], [3, 5, 8]]\n})\n# Call the tool to solve the problem\nprint(count_people_with_age(df, 26))","table":"Name: Ages\nUnit: people\nContent:\nStem | Leaf \n1 | 7, 9\n2 | 6, 6, 6, 6, 7\n3 | 6, 6\n4 | \n5 | 2\n6 | 1, 2, 4, 6\n7 | 7, 8, 8\n8 | 3, 5, 8"}
{"level":6,"answer":2.0,"prediction":"import pandas as pd\n\ndef count_floors_with_17_offices(df):\n    \"\"\"\n    This function takes in a pandas dataframe of offices per floor, and returns the number of floors that have exactly 17 offices.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of offices per floor.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of floors that have exactly 17 offices.\n    \"\"\"\n    # prepare a list to calculate the number of offices on each floor\n    offices = []\n    # calculate the total number of offices on each floor\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            offices.append(stem * 10 + leaf[j])\n    # filter the floors where the number of offices is equal to 17\n    filtered = [office for office in offices if office == 17]\n    # count the number of rows\n    num_floors = len(filtered)\n    return num_floors\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5],\n    'Leaf': [[1, 7, 7, 8], [4, 4, 4, 5, 8, 8], [7, 9], [4, 5], [4, 7, 9]]\n})\n# Call the tool to solve the problem\nprint(count_floors_with_17_offices(df))","question":"A real estate agent counted the number of offices per floor in the building he is selling. How many floors have exactly 17 offices?","prediction_code":"import pandas as pd\n\ndef count_floors_with_17_offices(df):\n    \"\"\"\n    This function takes in a pandas dataframe of offices per floor, and returns the number of floors that have exactly 17 offices.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of offices per floor.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of floors that have exactly 17 offices.\n    \"\"\"\n    # prepare a list to calculate the number of offices on each floor\n    offices = []\n    # calculate the total number of offices on each floor\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            offices.append(stem * 10 + leaf[j])\n    # filter the floors where the number of offices is equal to 17\n    filtered = [office for office in offices if office == 17]\n    # count the number of rows\n    num_floors = len(filtered)\n    return num_floors","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5],\n    'Leaf': [[1, 7, 7, 8], [4, 4, 4, 5, 8, 8], [7, 9], [4, 5], [4, 7, 9]]\n})\n# Call the tool to solve the problem\nprint(count_floors_with_17_offices(df))","table":"Name: Offices per floor\nUnit: floors\nContent:\nStem | Leaf \n1 | 1, 7, 7, 8\n2 | 4, 4, 4, 5, 8, 8\n3 | 7, 9\n4 | 4, 5\n5 | 4, 7, 9"}
{"level":4,"answer":79.0,"prediction":"import pandas as pd\n\ndef find_largest_number_of_cars(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of cars per parking lot and returns the largest number of cars.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of cars per parking lot.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of cars.\n    \"\"\"\n    # prepare a list to store the number of cars in each parking lot\n    cars = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the number of cars in each parking lot\n        for j in range(len(leaf)):\n            cars.append(stem * 10 + leaf[j])\n    # find the largest number of cars\n    max_cars = max(cars)\n    return max_cars\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7],\n    'Leaf': [[0, 3], [7], [1, 6, 9], [4, 4, 5], [2, 4], [2, 5, 5, 9]]\n})\n# Call the tool to solve the problem\nprint(find_largest_number_of_cars(df))","question":"In a study on public parking, the director of transportation counted the number of cars in each of the city's parking lots. What is the largest number of cars?","prediction_code":"import pandas as pd\n\ndef find_largest_number_of_cars(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of cars per parking lot and returns the largest number of cars.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of cars per parking lot.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of cars.\n    \"\"\"\n    # prepare a list to store the number of cars in each parking lot\n    cars = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the number of cars in each parking lot\n        for j in range(len(leaf)):\n            cars.append(stem * 10 + leaf[j])\n    # find the largest number of cars\n    max_cars = max(cars)\n    return max_cars","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7],\n    'Leaf': [[0, 3], [7], [1, 6, 9], [4, 4, 5], [2, 4], [2, 5, 5, 9]]\n})\n# Call the tool to solve the problem\nprint(find_largest_number_of_cars(df))","table":"Name: Cars per parking lot\nUnit: cars\nContent:\nStem | Leaf \n2 | 0, 3\n3 | 7\n4 | 1, 6, 9\n5 | 4, 4, 5\n6 | 2, 4\n7 | 2, 5, 5, 9"}
{"level":6,"answer":16.0,"prediction":"import pandas as pd\n\ndef calculate_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the cost of buying a certain quantity of an item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item to calculate the cost for.\n    quantity (int): The quantity of the item to calculate the cost for.\n    Returns:\n    float: The cost of buying the specified quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return None\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['trout', 'catfish', 'salmon', 'tuna', 'tilapia', 'halibut'],\n    'Price': [4, 8, 7, 8, 4, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_cost(df, 'catfish', 2))","question":"How much would it cost to buy 2 pounds of catfish?","prediction_code":"import pandas as pd\n\ndef calculate_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the cost of buying a certain quantity of an item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item to calculate the cost for.\n    quantity (int): The quantity of the item to calculate the cost for.\n    Returns:\n    float: The cost of buying the specified quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return None","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['trout', 'catfish', 'salmon', 'tuna', 'tilapia', 'halibut'],\n    'Price': [4, 8, 7, 8, 4, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_cost(df, 'catfish', 2))","table":"Name: None\nUnit: $\nContent:\ntrout | $4 per pound\ncatfish | $8 per pound\nsalmon | $7 per pound\ntuna | $8 per pound\ntilapia | $4 per pound\nhalibut | $7 per pound"}
{"level":5,"answer":20.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pizza sales and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the names of pizza restaurants and the number of slices sold.\n    The DataFrame should have columns 'Restaurant' and 'Number of slices sold'.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the 'Number of slices sold' column\n    min_value = df['Number of slices sold'].min()\n    max_value = df['Number of slices sold'].max()\n    \n    # Calculate the range\n    data_range = max_value - min_value\n    \n    return data_range\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Restaurant': ['The Big Cheese', 'Pizzeria Italiano', 'Deep Dish by Dan', 'The Real Chicago', 'Taste of New York', 'New York Slice', 'Antonio\\'s Pizzeria', 'Pizzas Only'],\n    'Number of slices sold': [70, 69, 73, 70, 82, 67, 78, 62]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"Some pizza restaurants compared their pizza sales. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pizza sales and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the names of pizza restaurants and the number of slices sold.\n    The DataFrame should have columns 'Restaurant' and 'Number of slices sold'.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the 'Number of slices sold' column\n    min_value = df['Number of slices sold'].min()\n    max_value = df['Number of slices sold'].max()\n    \n    # Calculate the range\n    data_range = max_value - min_value\n    \n    return data_range","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Restaurant': ['The Big Cheese', 'Pizzeria Italiano', 'Deep Dish by Dan', 'The Real Chicago', 'Taste of New York', 'New York Slice', 'Antonio\\'s Pizzeria', 'Pizzas Only'],\n    'Number of slices sold': [70, 69, 73, 70, 82, 67, 78, 62]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Pizza slices sold\nUnit: None\nContent:\nRestaurant | Number of slices sold\nThe Big Cheese | 70\nPizzeria Italiano | 69\nDeep Dish by Dan | 73\nThe Real Chicago | 70\nTaste of New York | 82\nNew York Slice | 67\nAntonio's Pizzeria | 78\nPizzas Only | 62"}
{"level":5,"answer":1.0,"prediction":"import pandas as pd\n\ndef count_necklaces_with_45_beads(df):\n    \"\"\"\n    This function takes in a pandas dataframe of beads per necklace, and returns the number of necklaces that have exactly 45 beads.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of beads per necklace.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of necklaces that have exactly 45 beads.\n    \"\"\"\n    # prepare a list to calculate beads in each necklace\n    beads = []\n    # calculate the total number of beads in each necklace\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            beads.append(stem * 10 + leaf[j])\n    # filter the necklaces where the total number of beads is equal to 45\n    filtered = [bead for bead in beads if bead == 45]\n    # count the number of rows\n    num_necklaces = len(filtered)\n    return num_necklaces\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6],\n    'Leaf': [[3, 5, 5, 6, 7, 8, 8], [0, 2, 3, 4, 5, 8, 8], [3, 5, 5, 6, 9, 9], [0, 5]]\n})\n# Call the tool to solve the problem\nprint(count_necklaces_with_45_beads(df))","question":"Bryan counted all the beads in each necklace at the jewelry store where he works. How many necklaces had exactly 45 beads?","prediction_code":"import pandas as pd\n\ndef count_necklaces_with_45_beads(df):\n    \"\"\"\n    This function takes in a pandas dataframe of beads per necklace, and returns the number of necklaces that have exactly 45 beads.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of beads per necklace.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of necklaces that have exactly 45 beads.\n    \"\"\"\n    # prepare a list to calculate beads in each necklace\n    beads = []\n    # calculate the total number of beads in each necklace\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            beads.append(stem * 10 + leaf[j])\n    # filter the necklaces where the total number of beads is equal to 45\n    filtered = [bead for bead in beads if bead == 45]\n    # count the number of rows\n    num_necklaces = len(filtered)\n    return num_necklaces","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6],\n    'Leaf': [[3, 5, 5, 6, 7, 8, 8], [0, 2, 3, 4, 5, 8, 8], [3, 5, 5, 6, 9, 9], [0, 5]]\n})\n# Call the tool to solve the problem\nprint(count_necklaces_with_45_beads(df))","table":"Name: Beads per necklace\nUnit: necklaces\nContent:\nStem | Leaf \n3 | 3, 5, 5, 6, 7, 8, 8\n4 | 0, 2, 3, 4, 5, 8, 8\n5 | 3, 5, 5, 6, 9, 9\n6 | 0, 5"}
{"level":6,"answer":4.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of daily snowfall and returns the median of the snowfall amounts.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the daily snowfall amounts with columns 'Day' and 'Snowfall (inches)'.\n    Returns:\n    float: The median of the snowfall amounts.\n    \"\"\"\n    # Get the snowfall amounts as a list\n    snowfall = df['Snowfall (inches)'].tolist()\n    \n    # Sort the snowfall amounts in ascending order\n    snowfall.sort()\n    \n    # Calculate the median\n    if len(snowfall) % 2 == 0:\n        # If the number of snowfall amounts is even, take the average of the middle two values\n        median = (snowfall[len(snowfall)\/\/2 - 1] + snowfall[len(snowfall)\/\/2]) \/ 2\n    else:\n        # If the number of snowfall amounts is odd, take the middle value\n        median = snowfall[len(snowfall)\/\/2]\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Snowfall (inches)': [1, 7, 8, 4, 7, 3, 1]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"Rafi graphed the amount of snow that fell in the last 7 days. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of daily snowfall and returns the median of the snowfall amounts.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the daily snowfall amounts with columns 'Day' and 'Snowfall (inches)'.\n    Returns:\n    float: The median of the snowfall amounts.\n    \"\"\"\n    # Get the snowfall amounts as a list\n    snowfall = df['Snowfall (inches)'].tolist()\n    \n    # Sort the snowfall amounts in ascending order\n    snowfall.sort()\n    \n    # Calculate the median\n    if len(snowfall) % 2 == 0:\n        # If the number of snowfall amounts is even, take the average of the middle two values\n        median = (snowfall[len(snowfall)\/\/2 - 1] + snowfall[len(snowfall)\/\/2]) \/ 2\n    else:\n        # If the number of snowfall amounts is odd, take the middle value\n        median = snowfall[len(snowfall)\/\/2]\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Snowfall (inches)': [1, 7, 8, 4, 7, 3, 1]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Daily snowfall\nUnit: None\nContent:\nDay | Snowfall (inches)\nFriday | 1\nSaturday | 7\nSunday | 8\nMonday | 4\nTuesday | 7\nWednesday | 3\nThursday | 1"}
{"level":4,"answer":3.0,"prediction":"import pandas as pd\n\ndef count_pages_with_words(df):\n    \"\"\"\n    This function takes in a pandas dataframe of words per page and returns the number of pages that have at least 10 words but fewer than 20 words.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of words per page.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of pages that have at least 10 words but fewer than 20 words.\n    \"\"\"\n    # prepare a list to calculate the number of words on each page\n    words = []\n    # calculate the total number of words on each page\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            words.append(stem * 10 + leaf[j])\n    # filter the pages where the total number of words is greater than or equal to 10 and less than 20\n    filtered = [word for word in words if 10 <= word < 20]\n    # count the number of pages\n    num_pages = len(filtered)\n    return num_pages\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6],\n    'Leaf': [[2, 5, 8], [9], [0, 0, 3], [], [1, 3, 4, 6, 9, 9], [7, 8, 9, 9]]\n})\n# Call the tool to solve the problem\nprint(count_pages_with_words(df))","question":"Judith counted the number of words per page in her new book. How many pages have at least 10 words but fewer than 20 words?","prediction_code":"import pandas as pd\n\ndef count_pages_with_words(df):\n    \"\"\"\n    This function takes in a pandas dataframe of words per page and returns the number of pages that have at least 10 words but fewer than 20 words.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of words per page.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of pages that have at least 10 words but fewer than 20 words.\n    \"\"\"\n    # prepare a list to calculate the number of words on each page\n    words = []\n    # calculate the total number of words on each page\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            words.append(stem * 10 + leaf[j])\n    # filter the pages where the total number of words is greater than or equal to 10 and less than 20\n    filtered = [word for word in words if 10 <= word < 20]\n    # count the number of pages\n    num_pages = len(filtered)\n    return num_pages","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6],\n    'Leaf': [[2, 5, 8], [9], [0, 0, 3], [], [1, 3, 4, 6, 9, 9], [7, 8, 9, 9]]\n})\n# Call the tool to solve the problem\nprint(count_pages_with_words(df))","table":"Name: Words per page\nUnit: None\nContent:\nStem | Leaf \n1 | 2, 5, 8\n2 | 9\n3 | 0, 0, 3\n4 | \n5 | 1, 3, 4, 6, 9, 9\n6 | 7, 8, 9, 9"}
{"level":8,"answer":-5.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of vacation days taken by Braden and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the years and corresponding vacation days taken.\n    The DataFrame should have columns 'Year' and 'Vacation days'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_row = df[df['Year'] == start_year]\n    end_row = df[df['Year'] == end_year]\n    \n    # Get the vacation days for the start and end years\n    start_vacation_days = start_row['Vacation days'].values[0]\n    end_vacation_days = end_row['Vacation days'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_vacation_days - start_vacation_days) \/ (end_year - start_year)\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2010, 2011, 2012, 2013, 2014],\n    'Vacation days': [33, 33, 36, 31, 31]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2012, 2013))","question":"To figure out how many vacation days he had left to use, Braden looked over his old calendars to figure out how many days of vacation he had taken each year. According to the table, what was the rate of change between 2012 and 2013?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of vacation days taken by Braden and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the years and corresponding vacation days taken.\n    The DataFrame should have columns 'Year' and 'Vacation days'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_row = df[df['Year'] == start_year]\n    end_row = df[df['Year'] == end_year]\n    \n    # Get the vacation days for the start and end years\n    start_vacation_days = start_row['Vacation days'].values[0]\n    end_vacation_days = end_row['Vacation days'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_vacation_days - start_vacation_days) \/ (end_year - start_year)\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2010, 2011, 2012, 2013, 2014],\n    'Vacation days': [33, 33, 36, 31, 31]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2012, 2013))","table":"Name: Vacation days taken by Braden\nUnit: vacation days per year\nContent:\nYear | Vacation days\n2010 | 33\n2011 | 33\n2012 | 36\n2013 | 31\n2014 | 31"}
{"level":7,"answer":24.0,"prediction":"import pandas as pd\n\ndef find_smallest_number_of_broken_lights(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of broken lights per string and returns the smallest number of broken lights.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken lights per string.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of broken lights.\n    \"\"\"\n    # prepare a list to store the number of broken lights\n    broken_lights = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the total number of broken lights in each string\n        total_broken_lights = stem * 10 + min(leaf)\n        broken_lights.append(total_broken_lights)\n    # find the smallest number of broken lights\n    smallest_number = min(broken_lights)\n    return smallest_number\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[4], [4, 7], [5, 7, 9], [3, 5, 8, 8], [6], [0, 8, 9], [7, 8]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_broken_lights(df))","question":"While hanging Christmas lights for neighbors, Kayla counted the number of broken lights on each string. What is the smallest number of broken lights?","prediction_code":"import pandas as pd\n\ndef find_smallest_number_of_broken_lights(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of broken lights per string and returns the smallest number of broken lights.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken lights per string.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of broken lights.\n    \"\"\"\n    # prepare a list to store the number of broken lights\n    broken_lights = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the total number of broken lights in each string\n        total_broken_lights = stem * 10 + min(leaf)\n        broken_lights.append(total_broken_lights)\n    # find the smallest number of broken lights\n    smallest_number = min(broken_lights)\n    return smallest_number","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[4], [4, 7], [5, 7, 9], [3, 5, 8, 8], [6], [0, 8, 9], [7, 8]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_broken_lights(df))","table":"Name: Broken lights per string\nUnit: broken lights\nContent:\nStem | Leaf \n2 | 4\n3 | 4, 7\n4 | 5, 7, 9\n5 | 3, 5, 8, 8\n6 | 6\n7 | 0, 8, 9\n8 | 7, 8"}
{"level":8,"answer":38.0,"prediction":"import pandas as pd\n\ndef count_students_spinning_greater_than_1(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of times a wheel landed on numbers 0 through 5, and returns the number of students who spun a number greater than 1.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of times the wheel landed on each number.\n    The dataframe should contain \"Number spun\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who spun a number greater than 1.\n    \"\"\"\n    # Filter the DataFrame for numbers greater than 1\n    filtered_df = df[df['Number spun'] > 1]\n    \n    # Sum the frequencies of the filtered numbers\n    num_students = filtered_df['Frequency'].sum()\n    \n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number spun': [0, 1, 2, 3, 4, 5],\n    'Frequency': [7, 6, 9, 0, 13, 16]\n})\n# Call the tool to solve the problem\nprint(count_students_spinning_greater_than_1(df))","question":"For a math assignment, students noted the number of times a wheel landed on the numbers 0 through 5. How many students spun a number greater than 1?","prediction_code":"import pandas as pd\n\ndef count_students_spinning_greater_than_1(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of times a wheel landed on numbers 0 through 5, and returns the number of students who spun a number greater than 1.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of times the wheel landed on each number.\n    The dataframe should contain \"Number spun\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who spun a number greater than 1.\n    \"\"\"\n    # Filter the DataFrame for numbers greater than 1\n    filtered_df = df[df['Number spun'] > 1]\n    \n    # Sum the frequencies of the filtered numbers\n    num_students = filtered_df['Frequency'].sum()\n    \n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number spun': [0, 1, 2, 3, 4, 5],\n    'Frequency': [7, 6, 9, 0, 13, 16]\n})\n# Call the tool to solve the problem\nprint(count_students_spinning_greater_than_1(df))","table":"Name: Spinning a wheel numbered 0 through 5\nUnit: None\nContent:\nNumber spun | Frequency\n0 | 7\n1 | 6\n2 | 9\n3 | 0\n4 | 13\n5 | 16"}
{"level":8,"answer":25.0,"prediction":"import pandas as pd\n\ndef count_people_with_4_or_more_trips(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of trips to a water park and their frequencies, and returns the number of people who went to the water park at least 4 times.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of trips and their frequencies.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who went to the water park at least 4 times.\n    \"\"\"\n    # Filter the DataFrame for trips with at least 4 visits\n    filtered_df = df[df['Number of trips'] >= 4]\n    \n    # Calculate the total number of people who went to the water park at least 4 times\n    total_people = filtered_df['Frequency'].sum()\n    \n    return total_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [1, 2, 3, 4, 5],\n    'Frequency': [15, 5, 8, 13, 12]\n})\n# Call the tool to solve the problem\nprint(count_people_with_4_or_more_trips(df))","question":"A theme park developer recorded the number of people who visited the local water park last summer. How many people went to the water park at least 4 times?","prediction_code":"import pandas as pd\n\ndef count_people_with_4_or_more_trips(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of trips to a water park and their frequencies, and returns the number of people who went to the water park at least 4 times.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of trips and their frequencies.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who went to the water park at least 4 times.\n    \"\"\"\n    # Filter the DataFrame for trips with at least 4 visits\n    filtered_df = df[df['Number of trips'] >= 4]\n    \n    # Calculate the total number of people who went to the water park at least 4 times\n    total_people = filtered_df['Frequency'].sum()\n    \n    return total_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [1, 2, 3, 4, 5],\n    'Frequency': [15, 5, 8, 13, 12]\n})\n# Call the tool to solve the problem\nprint(count_people_with_4_or_more_trips(df))","table":"Name: Going to the water park last summer\nUnit: None\nContent:\nNumber of trips | Frequency\n1 | 15\n2 | 5\n3 | 8\n4 | 13\n5 | 12"}
{"level":4,"answer":0.06,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost for.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['wooden block', 'shapes stencil', 'red kazoo', 'green bouncy ball', 'green marble', 'blue plastic block'],\n    'Price': [0.08, 0.02, 0.06, 0.04, 0.04, 0.09]\n})\n\n# Define the items Brennan wants to buy\nitems = ['shapes stencil', 'green bouncy ball']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, items)\n\n# Print out the answer\nprint(total_cost)","question":"How much money does Brennan need to buy a shapes stencil and a green bouncy ball?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost for.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['wooden block', 'shapes stencil', 'red kazoo', 'green bouncy ball', 'green marble', 'blue plastic block'],\n    'Price': [0.08, 0.02, 0.06, 0.04, 0.04, 0.09]\n})\n\n# Define the items Brennan wants to buy\nitems = ['shapes stencil', 'green bouncy ball']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, items)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\nwooden block | $0.08\nshapes stencil | $0.02\nred kazoo | $0.06\ngreen bouncy ball | $0.04\ngreen marble | $0.04\nblue plastic block | $0.09"}
{"level":7,"answer":-3.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, month1, month2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average waiting time at a doctor's office and two months, and returns the rate of change between the two months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average waiting time at the doctor's office.\n    The DataFrame should have \"Month\" and \"Waiting time (minutes)\" columns.\n    month1 (str): The first month for calculating the rate of change.\n    month2 (str): The second month for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two months.\n    \"\"\"\n    # Filter the DataFrame for the two months\n    month1_df = df[df['Month'] == month1]\n    month2_df = df[df['Month'] == month2]\n    \n    # Get the waiting time for each month\n    waiting_time1 = month1_df['Waiting time (minutes)'].values[0]\n    waiting_time2 = month2_df['Waiting time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (waiting_time2 - waiting_time1) \/ waiting_time1\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['March', 'April', 'May', 'June', 'July'],\n    'Waiting time (minutes)': [23, 33, 30, 27, 30]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'May', 'June'))","question":"Darell, a doctor's office receptionist, tracked the average waiting time at the office each month. According to the table, what was the rate of change between May and June?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, month1, month2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average waiting time at a doctor's office and two months, and returns the rate of change between the two months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average waiting time at the doctor's office.\n    The DataFrame should have \"Month\" and \"Waiting time (minutes)\" columns.\n    month1 (str): The first month for calculating the rate of change.\n    month2 (str): The second month for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two months.\n    \"\"\"\n    # Filter the DataFrame for the two months\n    month1_df = df[df['Month'] == month1]\n    month2_df = df[df['Month'] == month2]\n    \n    # Get the waiting time for each month\n    waiting_time1 = month1_df['Waiting time (minutes)'].values[0]\n    waiting_time2 = month2_df['Waiting time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (waiting_time2 - waiting_time1) \/ waiting_time1\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['March', 'April', 'May', 'June', 'July'],\n    'Waiting time (minutes)': [23, 33, 30, 27, 30]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'May', 'June'))","table":"Name: Average waiting time at a doctor's office\nUnit: minutes per month\nContent:\nMonth | Waiting time (minutes)\nMarch | 23\nApril | 33\nMay | 30\nJune | 27\nJuly | 30"}
{"level":7,"answer":6.0,"prediction":"import pandas as pd\nfrom statistics import mode\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of cherries sold and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of kilograms of cherries sold.\n    The dataframe should contain \"Day\" and \"Kilograms\" columns.\n    Returns:\n    float: The mode of the numbers.\n    \"\"\"\n    # Get the values in the \"Kilograms\" column\n    kilograms = df['Kilograms'].tolist()\n    \n    # Calculate the mode\n    mode_value = mode(kilograms)\n    \n    return mode_value\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n    'Kilograms': [6, 10, 6, 10, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"A farmer wrote down how many kilograms of cherries were sold in the past 5 days. What is the mode of the numbers?","prediction_code":"import pandas as pd\nfrom statistics import mode\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of cherries sold and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of kilograms of cherries sold.\n    The dataframe should contain \"Day\" and \"Kilograms\" columns.\n    Returns:\n    float: The mode of the numbers.\n    \"\"\"\n    # Get the values in the \"Kilograms\" column\n    kilograms = df['Kilograms'].tolist()\n    \n    # Calculate the mode\n    mode_value = mode(kilograms)\n    \n    return mode_value","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n    'Kilograms': [6, 10, 6, 10, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Cherries sold\nUnit: None\nContent:\nDay | Kilograms\nWednesday | 6\nThursday | 10\nFriday | 6\nSaturday | 10\nSunday | 6"}
{"level":5,"answer":9.0,"prediction":"import pandas as pd\n\ndef get_population_density(df, state, year):\n    \"\"\"\n    This function takes in a pandas DataFrame of population per square mile and returns the population density of a specific state in a specific year.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the population per square mile data.\n    state (str): The name of the state.\n    year (int): The year for which the population density is required.\n    Returns:\n    int: The population density of the specified state in the specified year.\n    \"\"\"\n    # Filter the DataFrame for the specific state and year\n    state_df = df[(df['State'] == state) & (df['Year'] == year)]\n    \n    # Check if the state and year combination exists in the DataFrame\n    if state_df.empty:\n        return None\n    \n    # Get the population density value\n    population_density = state_df['Population Density'].values[0]\n    \n    return population_density\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'State': ['Montana', 'North Dakota', 'Idaho', 'South Dakota'],\n    '1990': [5, 9, 12, 9],\n    '2000': [6, 9, 15, 10]\n})\n# Call the tool to solve the problem\nprint(get_population_density(df, 'North Dakota', 2000))","question":"While looking through an almanac at the library, Heather noticed some data showing the population density of various states. How many people per square mile lived in North Dakota in 2000?","prediction_code":"import pandas as pd\n\ndef get_population_density(df, state, year):\n    \"\"\"\n    This function takes in a pandas DataFrame of population per square mile and returns the population density of a specific state in a specific year.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the population per square mile data.\n    state (str): The name of the state.\n    year (int): The year for which the population density is required.\n    Returns:\n    int: The population density of the specified state in the specified year.\n    \"\"\"\n    # Filter the DataFrame for the specific state and year\n    state_df = df[(df['State'] == state) & (df['Year'] == year)]\n    \n    # Check if the state and year combination exists in the DataFrame\n    if state_df.empty:\n        return None\n    \n    # Get the population density value\n    population_density = state_df['Population Density'].values[0]\n    \n    return population_density","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'State': ['Montana', 'North Dakota', 'Idaho', 'South Dakota'],\n    '1990': [5, 9, 12, 9],\n    '2000': [6, 9, 15, 10]\n})\n# Call the tool to solve the problem\nprint(get_population_density(df, 'North Dakota', 2000))","table":"Name: Population per square mile\nUnit: people per square mile\nContent:\nState | 1990 | 2000\nMontana | 5 | 6\nNorth Dakota | 9 | 9\nIdaho | 12 | 15\nSouth Dakota | 9 | 10"}
{"level":7,"answer":1091.0,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item2_price - item1_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['antique walnut buffet', 'antique cherry bookcase', 'antique oak writing desk', 'antique hand-painted trunk'],\n    'Price': [2328.00, 3411.00, 2907.00, 4502.00]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'antique cherry bookcase', 'antique hand-painted trunk'))","question":"How much more does an antique hand-painted trunk cost than an antique cherry bookcase?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item2_price - item1_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['antique walnut buffet', 'antique cherry bookcase', 'antique oak writing desk', 'antique hand-painted trunk'],\n    'Price': [2328.00, 3411.00, 2907.00, 4502.00]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'antique cherry bookcase', 'antique hand-painted trunk'))","table":"Name: None\nUnit: $\nContent:\nantique walnut buffet | $2,328.00\nantique cherry bookcase | $3,411.00\nantique oak writing desk | $2,907.00\nantique hand-painted trunk | $4,502.00"}
{"level":8,"answer":30.0,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item2_price - item1_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['photograph signed by a famous movie star', 'DVD signed by a famous comedian', 'photograph signed by a famous singer', 'program signed by a famous dancer', 'CD signed by a famous band', 'jersey signed by a famous hockey player'],\n    'Price': [38.00, 49.00, 74.00, 40.00, 70.00, 90.00]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'program signed by a famous dancer', 'CD signed by a famous band'))","question":"How much more does a CD signed by a famous band cost than a program signed by a famous dancer?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item2_price - item1_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['photograph signed by a famous movie star', 'DVD signed by a famous comedian', 'photograph signed by a famous singer', 'program signed by a famous dancer', 'CD signed by a famous band', 'jersey signed by a famous hockey player'],\n    'Price': [38.00, 49.00, 74.00, 40.00, 70.00, 90.00]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'program signed by a famous dancer', 'CD signed by a famous band'))","table":"Name: None\nUnit: $\nContent:\nphotograph signed by a famous movie star | $38.00\nDVD signed by a famous comedian | $49.00\nphotograph signed by a famous singer | $74.00\nprogram signed by a famous dancer | $40.00\nCD signed by a famous band | $70.00\njersey signed by a famous hockey player | $90.00"}
{"level":6,"answer":8.0,"prediction":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of science articles read by students and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the names of students and the number of science articles they read.\n    The DataFrame should have columns 'Name' and 'Number of science articles'.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Extract the column containing the numbers\n    numbers = df['Number of science articles']\n    \n    # Calculate the mean using pandas\n    mean = numbers.mean()\n    \n    return mean\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Isaac', 'Hector', 'Edna', 'Braden', 'Ross', 'Joel'],\n    'Number of science articles': [7, 6, 9, 7, 10, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","question":"Isaac's classmates revealed how many science articles they read. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of science articles read by students and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the names of students and the number of science articles they read.\n    The DataFrame should have columns 'Name' and 'Number of science articles'.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Extract the column containing the numbers\n    numbers = df['Number of science articles']\n    \n    # Calculate the mean using pandas\n    mean = numbers.mean()\n    \n    return mean","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Isaac', 'Hector', 'Edna', 'Braden', 'Ross', 'Joel'],\n    'Number of science articles': [7, 6, 9, 7, 10, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","table":"Name: Science articles read\nUnit: None\nContent:\nName | Number of science articles\nIsaac | 7\nHector | 6\nEdna | 9\nBraden | 7\nRoss | 10\nJoel | 9"}
{"level":5,"answer":4.15,"prediction":"import pandas as pd\n\ndef find_expense(df, description):\n    \"\"\"\n    This function takes in a pandas DataFrame of financial records and a description of an expense, and returns the amount spent on that expense.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing financial records with columns 'Date', 'Description', 'Received', 'Expenses', and 'Available Funds'.\n    description (str): The description of the expense to find.\n    Returns:\n    float: The amount spent on the expense.\n    \"\"\"\n    # Filter the DataFrame for the specific expense description\n    expense_df = df[df['Description'] == description]\n    \n    # Check if the expense exists in the DataFrame\n    if not expense_df.empty:\n        expense_amount = expense_df['Expenses'].values[0]\n        return expense_amount\n    \n    return None\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Date': [' ', '4\/7', '4\/14', '4\/23'],\n    'Description': ['Balance: end of March', 'bag of jellybeans', 'helping Mr. Floyd', 'umbrella'],\n    'Received': ['', '', 20.00, ''],\n    'Expenses': ['', 4.15, '', 12.65],\n    'Available Funds': [461.80, 457.65, 477.65, 465.00]\n})\n\n# Call the tool to solve the problem\nprint(find_expense(df, 'bag of jellybeans'))","question":"This is Kira's complete financial record for April. How much money did Kira spend on a bag of jellybeans?","prediction_code":"import pandas as pd\n\ndef find_expense(df, description):\n    \"\"\"\n    This function takes in a pandas DataFrame of financial records and a description of an expense, and returns the amount spent on that expense.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing financial records with columns 'Date', 'Description', 'Received', 'Expenses', and 'Available Funds'.\n    description (str): The description of the expense to find.\n    Returns:\n    float: The amount spent on the expense.\n    \"\"\"\n    # Filter the DataFrame for the specific expense description\n    expense_df = df[df['Description'] == description]\n    \n    # Check if the expense exists in the DataFrame\n    if not expense_df.empty:\n        expense_amount = expense_df['Expenses'].values[0]\n        return expense_amount\n    \n    return None","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Date': [' ', '4\/7', '4\/14', '4\/23'],\n    'Description': ['Balance: end of March', 'bag of jellybeans', 'helping Mr. Floyd', 'umbrella'],\n    'Received': ['', '', 20.00, ''],\n    'Expenses': ['', 4.15, '', 12.65],\n    'Available Funds': [461.80, 457.65, 477.65, 465.00]\n})\n\n# Call the tool to solve the problem\nprint(find_expense(df, 'bag of jellybeans'))","table":"Name: None\nUnit: $\nContent:\nDate | Description | Received | Expenses | Available Funds\n | Balance: end of March | | | $461.80\n4\/7 | bag of jellybeans | | $4.15 | $457.65\n4\/14 | helping Mr. Floyd | $20.00 | | $477.65\n4\/23 | umbrella | | $12.65 | $465.00"}
{"level":8,"answer":-3.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of employees with health care benefits and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of employees with health care benefits for each year.\n    The DataFrame should have \"Year\" and \"Employees\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_row = df[df['Year'] == start_year]\n    end_row = df[df['Year'] == end_year]\n    \n    # Get the number of employees for the start and end years\n    start_employees = start_row['Employees'].values[0]\n    end_employees = end_row['Employees'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_employees - start_employees) \/ start_employees * 100\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2009, 2010, 2011, 2012, 2013],\n    'Employees': [29, 33, 35, 32, 29]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2011, 2012))","question":"At Rockport Consulting, the head of human resources examined how the number of employees with health care benefits varied in response to policy changes. According to the table, what was the rate of change between 2011 and 2012?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of employees with health care benefits and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of employees with health care benefits for each year.\n    The DataFrame should have \"Year\" and \"Employees\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_row = df[df['Year'] == start_year]\n    end_row = df[df['Year'] == end_year]\n    \n    # Get the number of employees for the start and end years\n    start_employees = start_row['Employees'].values[0]\n    end_employees = end_row['Employees'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_employees - start_employees) \/ start_employees * 100\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2009, 2010, 2011, 2012, 2013],\n    'Employees': [29, 33, 35, 32, 29]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2011, 2012))","table":"Name: Employees with health care benefits\nUnit: employees per year\nContent:\nYear | Employees\n2009 | 29\n2010 | 33\n2011 | 35\n2012 | 32\n2013 | 29"}
{"level":7,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['iguana', 'rabbit', 'cockatoo', 'hedgehog', 'tarantula', 'chinchilla'],\n    'Price': [25, 20, 55, 72, 39, 36]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'iguana', 'rabbit'))","question":"How much more does an iguana cost than a rabbit?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['iguana', 'rabbit', 'cockatoo', 'hedgehog', 'tarantula', 'chinchilla'],\n    'Price': [25, 20, 55, 72, 39, 36]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'iguana', 'rabbit'))","table":"Name: None\nUnit: $\nContent:\niguana | $25\nrabbit | $20\ncockatoo | $55\nhedgehog | $72\ntarantula | $39\nchinchilla | $36"}
{"level":8,"answer":7.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of soccer fields per park and returns the range of the numbers of soccer fields.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of soccer fields per park.\n    The dataframe should contain \"Park\" and \"Number of soccer fields\" columns.\n    Returns:\n    int: The range of the numbers of soccer fields.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of soccer fields\" column\n    min_fields = df['Number of soccer fields'].min()\n    max_fields = df['Number of soccer fields'].max()\n    \n    # Calculate the range\n    field_range = max_fields - min_fields\n    \n    return field_range\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Park': ['Madison Park', 'Canyon Park', 'Crane Park', 'Moon Park', 'Middle Park', 'Windy Hill Park', 'Lighthouse Park'],\n    'Number of soccer fields': [5, 2, 2, 6, 2, 8, 1]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"The parks department compared how many soccer fields there are at each park. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of soccer fields per park and returns the range of the numbers of soccer fields.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of soccer fields per park.\n    The dataframe should contain \"Park\" and \"Number of soccer fields\" columns.\n    Returns:\n    int: The range of the numbers of soccer fields.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of soccer fields\" column\n    min_fields = df['Number of soccer fields'].min()\n    max_fields = df['Number of soccer fields'].max()\n    \n    # Calculate the range\n    field_range = max_fields - min_fields\n    \n    return field_range","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Park': ['Madison Park', 'Canyon Park', 'Crane Park', 'Moon Park', 'Middle Park', 'Windy Hill Park', 'Lighthouse Park'],\n    'Number of soccer fields': [5, 2, 2, 6, 2, 8, 1]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Soccer fields\nUnit: None\nContent:\nPark | Number of soccer fields\nMadison Park | 5\nCanyon Park | 2\nCrane Park | 2\nMoon Park | 6\nMiddle Park | 2\nWindy Hill Park | 8\nLighthouse Park | 1"}
{"level":7,"answer":4.0,"prediction":"import pandas as pd\n\ndef calculate_median_hours(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of hours worked per day and returns the median of the hours.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the hours worked per day.\n    The dataframe should contain \"Day\" and \"Hours\" columns.\n    Returns:\n    float: The median of the hours worked.\n    \"\"\"\n    # Get the \"Hours\" column from the DataFrame\n    hours = df['Hours']\n    \n    # Calculate the median of the hours\n    median_hours = hours.median()\n    \n    return median_hours\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n    'Hours': [2, 0, 7, 4, 6, 8, 4]\n})\n# Call the tool to solve the problem\nprint(calculate_median_hours(df))","question":"Kenji looked at his calendar to see how many hours he had worked in the past 7 days. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median_hours(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of hours worked per day and returns the median of the hours.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the hours worked per day.\n    The dataframe should contain \"Day\" and \"Hours\" columns.\n    Returns:\n    float: The median of the hours worked.\n    \"\"\"\n    # Get the \"Hours\" column from the DataFrame\n    hours = df['Hours']\n    \n    # Calculate the median of the hours\n    median_hours = hours.median()\n    \n    return median_hours","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n    'Hours': [2, 0, 7, 4, 6, 8, 4]\n})\n# Call the tool to solve the problem\nprint(calculate_median_hours(df))","table":"Name: Hours worked\nUnit: None\nContent:\nDay | Hours\nMonday | 2\nTuesday | 0\nWednesday | 7\nThursday | 4\nFriday | 6\nSaturday | 8\nSunday | 4"}
{"level":5,"answer":10.0,"prediction":"import pandas as pd\nfrom scipy import stats\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of club membership and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the names and number of clubs for each student.\n    The dataframe should contain \"Name\" and \"Number of clubs\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of clubs']\n    \n    # Calculate the mode\n    mode = stats.mode(numbers)[0][0]\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Brandon', 'Janice', 'Daniel', 'Rose', 'Akira', 'Nina', 'Isabella'],\n    'Number of clubs': [9, 9, 10, 6, 10, 10, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"Some students compared how many clubs they belong to. What is the mode of the numbers?","prediction_code":"import pandas as pd\nfrom scipy import stats\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of club membership and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the names and number of clubs for each student.\n    The dataframe should contain \"Name\" and \"Number of clubs\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of clubs']\n    \n    # Calculate the mode\n    mode = stats.mode(numbers)[0][0]\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Brandon', 'Janice', 'Daniel', 'Rose', 'Akira', 'Nina', 'Isabella'],\n    'Number of clubs': [9, 9, 10, 6, 10, 10, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Clubs\nUnit: None\nContent:\nName | Number of clubs\nBrandon | 9\nJanice | 9\nDaniel | 10\nRose | 6\nAkira | 10\nNina | 10\nIsabella | 6"}
{"level":5,"answer":33.0,"prediction":"import pandas as pd\nfrom statistics import mode\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of swimming laps and returns the mode of the lap numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the names and lap numbers of the swimmers.\n    The dataframe should contain \"Name\" and \"Laps\" columns.\n    Returns:\n    int: The mode of the lap numbers.\n    \"\"\"\n    # Get the lap numbers as a list\n    lap_numbers = df['Laps'].tolist()\n    \n    # Calculate the mode of the lap numbers\n    lap_mode = mode(lap_numbers)\n    \n    return lap_mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Tanvi', 'Paul', 'Norma', 'Addison', 'Sidney', 'Janet', 'Kari'],\n    'Laps': [15, 33, 40, 40, 33, 15, 33]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"The members of the swimming team compared how many laps they swam yesterday. What is the mode of the numbers?","prediction_code":"import pandas as pd\nfrom statistics import mode\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of swimming laps and returns the mode of the lap numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the names and lap numbers of the swimmers.\n    The dataframe should contain \"Name\" and \"Laps\" columns.\n    Returns:\n    int: The mode of the lap numbers.\n    \"\"\"\n    # Get the lap numbers as a list\n    lap_numbers = df['Laps'].tolist()\n    \n    # Calculate the mode of the lap numbers\n    lap_mode = mode(lap_numbers)\n    \n    return lap_mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Tanvi', 'Paul', 'Norma', 'Addison', 'Sidney', 'Janet', 'Kari'],\n    'Laps': [15, 33, 40, 40, 33, 15, 33]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Swimming laps\nUnit: None\nContent:\nName | Laps\nTanvi | 15\nPaul | 33\nNorma | 40\nAddison | 40\nSidney | 33\nJanet | 15\nKari | 33"}
{"level":3,"answer":0.14,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price list and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price list with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost for.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['piece of rose quartz', 'piece of copper', 'quartz crystal', 'piece of black mica', 'piece of black obsidian', 'piece of green slate'],\n    'Price': [0.07, 0.05, 0.03, 0.09, 0.06, 0.09]\n})\n\n# Define the items to calculate the total cost for\nitems = ['piece of green slate', 'piece of copper']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Nolan need to buy a piece of green slate and a piece of copper?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price list and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price list with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost for.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['piece of rose quartz', 'piece of copper', 'quartz crystal', 'piece of black mica', 'piece of black obsidian', 'piece of green slate'],\n    'Price': [0.07, 0.05, 0.03, 0.09, 0.06, 0.09]\n})\n\n# Define the items to calculate the total cost for\nitems = ['piece of green slate', 'piece of copper']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\npiece of rose quartz | $0.07\npiece of copper | $0.05\nquartz crystal | $0.03\npiece of black mica | $0.09\npiece of black obsidian | $0.06\npiece of green slate | $0.09"}
{"level":7,"answer":7.0,"prediction":"import pandas as pd\n\ndef calculate_mean_stop_signs(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of stop signs per street and returns the mean number of stop signs.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of stop signs per street.\n    The dataframe should contain \"Street\" and \"Number of stop signs\" columns.\n    Returns:\n    float: The mean number of stop signs.\n    \"\"\"\n    # Calculate the mean of the \"Number of stop signs\" column\n    mean_stop_signs = df['Number of stop signs'].mean()\n    \n    return mean_stop_signs\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Street': ['Watson Street', 'Walker Street', 'Mason Street', 'Peabody Street', 'Spring Street', 'Smith Street', 'Jackson Street', 'Marshall Street'],\n    'Number of stop signs': [10, 4, 9, 5, 7, 7, 9, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_stop_signs(df))","question":"The town council reported on how many stop signs there are on each street. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean_stop_signs(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of stop signs per street and returns the mean number of stop signs.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of stop signs per street.\n    The dataframe should contain \"Street\" and \"Number of stop signs\" columns.\n    Returns:\n    float: The mean number of stop signs.\n    \"\"\"\n    # Calculate the mean of the \"Number of stop signs\" column\n    mean_stop_signs = df['Number of stop signs'].mean()\n    \n    return mean_stop_signs","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Street': ['Watson Street', 'Walker Street', 'Mason Street', 'Peabody Street', 'Spring Street', 'Smith Street', 'Jackson Street', 'Marshall Street'],\n    'Number of stop signs': [10, 4, 9, 5, 7, 7, 9, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_stop_signs(df))","table":"Name: Stop signs\nUnit: None\nContent:\nStreet | Number of stop signs\nWatson Street | 10\nWalker Street | 4\nMason Street | 9\nPeabody Street | 5\nSpring Street | 7\nSmith Street | 7\nJackson Street | 9\nMarshall Street | 5"}
{"level":7,"answer":3.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, year1, year2):\n    \"\"\"\n    This function takes in a pandas DataFrame of vacation days taken by Wesley and two years, and returns the rate of change between the two years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the years and vacation days taken by Wesley.\n    The DataFrame should have columns 'Year' and 'Vacation days'.\n    year1 (int): The first year for calculating the rate of change.\n    year2 (int): The second year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two years.\n    \"\"\"\n    # Filter the DataFrame for the two years\n    year1_df = df[df['Year'] == year1]\n    year2_df = df[df['Year'] == year2]\n    \n    # Get the vacation days for the two years\n    vacation_days1 = year1_df['Vacation days'].values[0]\n    vacation_days2 = year2_df['Vacation days'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (vacation_days2 - vacation_days1) \/ (year2 - year1)\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2009, 2010, 2011, 2012, 2013],\n    'Vacation days': [23, 19, 22, 20, 25]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2010, 2011))","question":"To figure out how many vacation days he had left to use, Wesley looked over his old calendars to figure out how many days of vacation he had taken each year. According to the table, what was the rate of change between 2010 and 2011?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, year1, year2):\n    \"\"\"\n    This function takes in a pandas DataFrame of vacation days taken by Wesley and two years, and returns the rate of change between the two years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the years and vacation days taken by Wesley.\n    The DataFrame should have columns 'Year' and 'Vacation days'.\n    year1 (int): The first year for calculating the rate of change.\n    year2 (int): The second year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two years.\n    \"\"\"\n    # Filter the DataFrame for the two years\n    year1_df = df[df['Year'] == year1]\n    year2_df = df[df['Year'] == year2]\n    \n    # Get the vacation days for the two years\n    vacation_days1 = year1_df['Vacation days'].values[0]\n    vacation_days2 = year2_df['Vacation days'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (vacation_days2 - vacation_days1) \/ (year2 - year1)\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2009, 2010, 2011, 2012, 2013],\n    'Vacation days': [23, 19, 22, 20, 25]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2010, 2011))","table":"Name: Vacation days taken by Wesley\nUnit: vacation days per year\nContent:\nYear | Vacation days\n2009 | 23\n2010 | 19\n2011 | 22\n2012 | 20\n2013 | 25"}
{"level":7,"answer":18.0,"prediction":"import pandas as pd\n\ndef find_smallest_number_of_pepperoni(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pieces of pepperoni per pizza and returns the smallest number of pieces of pepperoni.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pieces of pepperoni per pizza.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of pieces of pepperoni.\n    \"\"\"\n    # Initialize the smallest number of pieces of pepperoni\n    smallest_number = float('inf')\n    \n    # Iterate through the dataframe and update the smallest number if a smaller value is found\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            number_of_pepperoni = stem * 10 + leaf[j]\n            if number_of_pepperoni < smallest_number:\n                smallest_number = number_of_pepperoni\n    \n    return smallest_number\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[8, 9], [1, 2], [], [6, 7]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_pepperoni(df))","question":"Grayson counted the number of pieces of pepperoni on each pizza he made. What is the smallest number of pieces of pepperoni?","prediction_code":"import pandas as pd\n\ndef find_smallest_number_of_pepperoni(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pieces of pepperoni per pizza and returns the smallest number of pieces of pepperoni.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pieces of pepperoni per pizza.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of pieces of pepperoni.\n    \"\"\"\n    # Initialize the smallest number of pieces of pepperoni\n    smallest_number = float('inf')\n    \n    # Iterate through the dataframe and update the smallest number if a smaller value is found\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            number_of_pepperoni = stem * 10 + leaf[j]\n            if number_of_pepperoni < smallest_number:\n                smallest_number = number_of_pepperoni\n    \n    return smallest_number","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[8, 9], [1, 2], [], [6, 7]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_pepperoni(df))","table":"Name: Pieces of pepperoni per pizza\nUnit: pieces of pepperoni\nContent:\nStem | Leaf \n1 | 8, 9\n2 | 1, 2\n3 | \n4 | 6, 7"}
{"level":5,"answer":36.0,"prediction":"import pandas as pd\nfrom statistics import mode\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of class sizes and returns the mode of the number of students.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the teacher names and the number of students in their classes.\n    The DataFrame should have columns 'Teacher' and 'Number of students'.\n    Returns:\n    int: The mode of the number of students.\n    \"\"\"\n    # Get the column of number of students\n    num_students = df['Number of students']\n    \n    # Calculate the mode\n    mode_students = mode(num_students)\n    \n    return mode_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Teacher': ['Mr. Chen', 'Ms. Hershfeld', 'Miss Jones', 'Mr. Watson', 'Mrs. Truman', 'Mrs. Woodworth', 'Mr. Cohen'],\n    'Number of students': [33, 33, 36, 32, 36, 36, 32]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"Some teachers compared how many students are in their classes. What is the mode of the numbers?","prediction_code":"import pandas as pd\nfrom statistics import mode\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of class sizes and returns the mode of the number of students.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the teacher names and the number of students in their classes.\n    The DataFrame should have columns 'Teacher' and 'Number of students'.\n    Returns:\n    int: The mode of the number of students.\n    \"\"\"\n    # Get the column of number of students\n    num_students = df['Number of students']\n    \n    # Calculate the mode\n    mode_students = mode(num_students)\n    \n    return mode_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Teacher': ['Mr. Chen', 'Ms. Hershfeld', 'Miss Jones', 'Mr. Watson', 'Mrs. Truman', 'Mrs. Woodworth', 'Mr. Cohen'],\n    'Number of students': [33, 33, 36, 32, 36, 36, 32]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Class size\nUnit: None\nContent:\nTeacher | Number of students\nMr. Chen | 33\nMs. Hershfeld | 33\nMiss Jones | 36\nMr. Watson | 32\nMrs. Truman | 36\nMrs. Woodworth | 36\nMr. Cohen | 32"}
{"level":6,"answer":8.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of hours of babysitting per month and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the months and corresponding hours of babysitting.\n    The dataframe should contain \"Month\" and \"Hours\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Hours\" column\n    min_hours = df['Hours'].min()\n    max_hours = df['Hours'].max()\n    \n    # Calculate the range\n    range_hours = max_hours - min_hours\n    \n    return range_hours\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['July', 'August', 'September', 'October', 'November', 'December', 'January', 'February'],\n    'Hours': [3, 10, 3, 8, 2, 8, 4, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"Cindy looked at her calendar to figure out how much time she spent babysitting each month. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of hours of babysitting per month and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the months and corresponding hours of babysitting.\n    The dataframe should contain \"Month\" and \"Hours\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Hours\" column\n    min_hours = df['Hours'].min()\n    max_hours = df['Hours'].max()\n    \n    # Calculate the range\n    range_hours = max_hours - min_hours\n    \n    return range_hours","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['July', 'August', 'September', 'October', 'November', 'December', 'January', 'February'],\n    'Hours': [3, 10, 3, 8, 2, 8, 4, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Hours of babysitting\nUnit: None\nContent:\nMonth | Hours\nJuly | 3\nAugust | 10\nSeptember | 3\nOctober | 8\nNovember | 2\nDecember | 8\nJanuary | 4\nFebruary | 5"}
{"level":8,"answer":13.0,"prediction":"import pandas as pd\n\ndef count_guests_fewer_than_2(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of times guests went sledding last winter, and returns the number of guests who went sledding fewer than 2 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of times guests went sledding last winter.\n    The dataframe should contain \"Number of times\" and \"Frequency\" columns.\n    Returns:\n    int: The number of guests who went sledding fewer than 2 times.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of times is fewer than 2\n    filtered_df = df[df['Number of times'] < 2]\n    \n    # Calculate the total frequency of guests who went sledding fewer than 2 times\n    total_guests = filtered_df['Frequency'].sum()\n    \n    return total_guests\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of times': [0, 1, 2, 3, 4, 5],\n    'Frequency': [12, 1, 13, 9, 11, 14]\n})\n# Call the tool to solve the problem\nprint(count_guests_fewer_than_2(df))","question":"The Ashland Ski Resort asked its guests how many times they went sledding last winter. How many guests went sledding fewer than 2 times?","prediction_code":"import pandas as pd\n\ndef count_guests_fewer_than_2(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of times guests went sledding last winter, and returns the number of guests who went sledding fewer than 2 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of times guests went sledding last winter.\n    The dataframe should contain \"Number of times\" and \"Frequency\" columns.\n    Returns:\n    int: The number of guests who went sledding fewer than 2 times.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of times is fewer than 2\n    filtered_df = df[df['Number of times'] < 2]\n    \n    # Calculate the total frequency of guests who went sledding fewer than 2 times\n    total_guests = filtered_df['Frequency'].sum()\n    \n    return total_guests","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of times': [0, 1, 2, 3, 4, 5],\n    'Frequency': [12, 1, 13, 9, 11, 14]\n})\n# Call the tool to solve the problem\nprint(count_guests_fewer_than_2(df))","table":"Name: Sledding last winter\nUnit: None\nContent:\nNumber of times | Frequency\n0 | 12\n1 | 1\n2 | 13\n3 | 9\n4 | 11\n5 | 14"}
{"level":7,"answer":90.0,"prediction":"import pandas as pd\n\ndef find_largest_company(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of company sizes and returns the size of the largest company.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of employees per company.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The size of the largest company.\n    \"\"\"\n    # prepare a list to store the sizes of all companies\n    sizes = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the size of each company\n        size = stem * 10 + len(leaf)\n        sizes.append(size)\n    # find the maximum size\n    max_size = max(sizes)\n    return max_size\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[0], [8], [], [3, 7], [6, 7], [], [7], [], [0]]\n})\n# Call the tool to solve the problem\nprint(find_largest_company(df))","question":"The Somerville Chamber of Commerce researched the number of employees working at local companies. What is the size of the largest company?","prediction_code":"import pandas as pd\n\ndef find_largest_company(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of company sizes and returns the size of the largest company.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of employees per company.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The size of the largest company.\n    \"\"\"\n    # prepare a list to store the sizes of all companies\n    sizes = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the size of each company\n        size = stem * 10 + len(leaf)\n        sizes.append(size)\n    # find the maximum size\n    max_size = max(sizes)\n    return max_size","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[0], [8], [], [3, 7], [6, 7], [], [7], [], [0]]\n})\n# Call the tool to solve the problem\nprint(find_largest_company(df))","table":"Name: Company sizes (number of employees)\nUnit: employees\nContent:\nStem | Leaf \n1 | 0\n2 | 8\n3 | \n4 | 3, 7\n5 | 6, 7\n6 | \n7 | 7\n8 | \n9 | 0"}
{"level":7,"answer":1.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of tractors made each month and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of tractors made each month.\n    The dataframe should contain \"Month\" and \"Number of tractors\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the maximum and minimum values of the \"Number of tractors\" column\n    max_value = df['Number of tractors'].max()\n    min_value = df['Number of tractors'].min()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['December', 'January', 'February', 'March', 'April'],\n    'Number of tractors': [9, 9, 9, 10, 10]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"A farm equipment company kept a record of the number of tractors made each month. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of tractors made each month and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of tractors made each month.\n    The dataframe should contain \"Month\" and \"Number of tractors\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the maximum and minimum values of the \"Number of tractors\" column\n    max_value = df['Number of tractors'].max()\n    min_value = df['Number of tractors'].min()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['December', 'January', 'February', 'March', 'April'],\n    'Number of tractors': [9, 9, 9, 10, 10]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Tractors made\nUnit: None\nContent:\nMonth | Number of tractors\nDecember | 9\nJanuary | 9\nFebruary | 9\nMarch | 10\nApril | 10"}
{"level":8,"answer":6.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of a budget table and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the budget table with columns 'Year' and 'Per-student budget'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_budget = df[df['Year'] == start_year]['Per-student budget'].values[0]\n    end_budget = df[df['Year'] == end_year]['Per-student budget'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_budget - start_budget) \/ start_budget * 100\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2016, 2017, 2018, 2019, 2020],\n    'Per-student budget': [28, 23, 22, 19, 25]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2019, 2020))","question":"In hopes of raising more funds for arts education, some parents in the Clarksville School District publicized the current per-student arts education budget. According to the table, what was the rate of change between 2019 and 2020?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of a budget table and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the budget table with columns 'Year' and 'Per-student budget'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_budget = df[df['Year'] == start_year]['Per-student budget'].values[0]\n    end_budget = df[df['Year'] == end_year]['Per-student budget'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_budget - start_budget) \/ start_budget * 100\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2016, 2017, 2018, 2019, 2020],\n    'Per-student budget': [28, 23, 22, 19, 25]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2019, 2020))","table":"Name: Clarksville arts education budget\nUnit: $, per year\nContent:\nYear | Per-student budget\n2016 | $28\n2017 | $23\n2018 | $22\n2019 | $19\n2020 | $25"}
{"level":5,"answer":23.0,"prediction":"import pandas as pd\n\ndef find_smallest_number_of_characters(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of characters per book and returns the smallest number of characters.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of characters per book.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of characters.\n    \"\"\"\n    # prepare a list to store all the characters\n    characters = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the total number of characters in each book\n        for j in range(len(leaf)):\n            characters.append(stem * 10 + leaf[j])\n    # find the smallest number of characters\n    smallest = min(characters)\n    return smallest\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5],\n    'Leaf': [[3, 4, 6, 8], [2], [2, 9], [0]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_characters(df))","question":"Toby kept track of the number of characters in each book he read. What is the smallest number of characters?","prediction_code":"import pandas as pd\n\ndef find_smallest_number_of_characters(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of characters per book and returns the smallest number of characters.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of characters per book.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of characters.\n    \"\"\"\n    # prepare a list to store all the characters\n    characters = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the total number of characters in each book\n        for j in range(len(leaf)):\n            characters.append(stem * 10 + leaf[j])\n    # find the smallest number of characters\n    smallest = min(characters)\n    return smallest","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5],\n    'Leaf': [[3, 4, 6, 8], [2], [2, 9], [0]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_characters(df))","table":"Name: Characters per book\nUnit: characters\nContent:\nStem | Leaf \n2 | 3, 4, 6, 8\n3 | 2\n4 | 2, 9\n5 | 0"}
{"level":5,"answer":7.8,"prediction":"import pandas as pd\n\ndef calculate_expenses_on_date(df, date):\n    \"\"\"\n    This function takes in a pandas DataFrame of financial records and a specific date, and returns the amount of money spent on that date.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing financial records with columns 'Date', 'Description', 'Received', 'Expenses', and 'Available Funds'.\n    date (str): The specific date to calculate expenses for in the format 'MM\/DD'.\n    Returns:\n    float: The amount of money spent on the specified date.\n    \"\"\"\n    # Filter the DataFrame for the specific date\n    date_df = df[df['Date'] == date]\n    \n    # Check if there are any expenses for the date\n    if not date_df.empty:\n        expenses = date_df['Expenses'].values[0]\n        return expenses\n    \n    return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Date': [' ', '12\/5', '12\/16', '12\/29'],\n    'Description': ['Balance: end of November', 'wrapping paper', 'watching Ms. Taylor\\'s cat', 'calendar'],\n    'Received': ['', '', 15.00, ''],\n    'Expenses': ['', 4.95, '', 7.80],\n    'Available Funds': [328.20, 323.25, 338.25, 330.45]\n})\n\n# Call the tool to solve the problem\nprint(calculate_expenses_on_date(df, '12\/29'))","question":"This is Sandra's complete financial record for December. How much money did Sandra spend on December 29?","prediction_code":"import pandas as pd\n\ndef calculate_expenses_on_date(df, date):\n    \"\"\"\n    This function takes in a pandas DataFrame of financial records and a specific date, and returns the amount of money spent on that date.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing financial records with columns 'Date', 'Description', 'Received', 'Expenses', and 'Available Funds'.\n    date (str): The specific date to calculate expenses for in the format 'MM\/DD'.\n    Returns:\n    float: The amount of money spent on the specified date.\n    \"\"\"\n    # Filter the DataFrame for the specific date\n    date_df = df[df['Date'] == date]\n    \n    # Check if there are any expenses for the date\n    if not date_df.empty:\n        expenses = date_df['Expenses'].values[0]\n        return expenses\n    \n    return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Date': [' ', '12\/5', '12\/16', '12\/29'],\n    'Description': ['Balance: end of November', 'wrapping paper', 'watching Ms. Taylor\\'s cat', 'calendar'],\n    'Received': ['', '', 15.00, ''],\n    'Expenses': ['', 4.95, '', 7.80],\n    'Available Funds': [328.20, 323.25, 338.25, 330.45]\n})\n\n# Call the tool to solve the problem\nprint(calculate_expenses_on_date(df, '12\/29'))","table":"Name: None\nUnit: $\nContent:\nDate | Description | Received | Expenses | Available Funds\n | Balance: end of November | | | $328.20\n12\/5 | wrapping paper | | $4.95 | $323.25\n12\/16 | watching Ms. Taylor's cat | $15.00 | | $338.25\n12\/29 | calendar | | $7.80 | $330.45"}
{"level":4,"answer":11.0,"prediction":"import pandas as pd\n\ndef cheese_consumption_per_capita(df, country, year):\n    \"\"\"\n    This function takes in a pandas DataFrame of cheese consumption per capita and returns the amount of cheese consumed per capita in a specific country and year.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the cheese consumption per capita data.\n    The dataframe should contain \"Country\", \"1996\", and \"2006\" columns.\n    country (str): The name of the country.\n    year (int): The year.\n    Returns:\n    int: The amount of cheese consumed per capita in the specified country and year.\n    \"\"\"\n    # Filter the DataFrame for the specific country and year\n    country_df = df[df['Country'] == country]\n    cheese_consumption = country_df[str(year)].values[0]\n    \n    return cheese_consumption\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Country': ['Germany', 'Australia', 'Canada', 'Great Britain', 'Argentina'],\n    '1996': [12, 10, 10, 9, 11],\n    '2006': [20, 10, 11, 10, 11]\n})\n# Call the tool to solve the problem\nprint(cheese_consumption_per_capita(df, 'Argentina', 2006))","question":"An agricultural agency is researching how much cheese people have been eating in different parts of the world. How much cheese was consumed per capita in Argentina in 2006?","prediction_code":"import pandas as pd\n\ndef cheese_consumption_per_capita(df, country, year):\n    \"\"\"\n    This function takes in a pandas DataFrame of cheese consumption per capita and returns the amount of cheese consumed per capita in a specific country and year.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the cheese consumption per capita data.\n    The dataframe should contain \"Country\", \"1996\", and \"2006\" columns.\n    country (str): The name of the country.\n    year (int): The year.\n    Returns:\n    int: The amount of cheese consumed per capita in the specified country and year.\n    \"\"\"\n    # Filter the DataFrame for the specific country and year\n    country_df = df[df['Country'] == country]\n    cheese_consumption = country_df[str(year)].values[0]\n    \n    return cheese_consumption","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Country': ['Germany', 'Australia', 'Canada', 'Great Britain', 'Argentina'],\n    '1996': [12, 10, 10, 9, 11],\n    '2006': [20, 10, 11, 10, 11]\n})\n# Call the tool to solve the problem\nprint(cheese_consumption_per_capita(df, 'Argentina', 2006))","table":"Name: Cheese consumption per capita (kg)\nUnit: kg\nContent:\nCountry | 1996 | 2006\nGermany | 12 | 20\nAustralia | 10 | 10\nCanada | 10 | 11\nGreat Britain | 9 | 10\nArgentina | 11 | 11"}
{"level":3,"answer":0.15,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of item names.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['yellow tiger\\'s eye', 'piece of polished granite', 'piece of copper', 'smooth piece of sea glass'],\n    'Price': [0.08, 0.07, 0.07, 0.05]\n})\n\n# Define the items to calculate the total cost\nitems = ['yellow tiger\\'s eye', 'piece of copper']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Grayson need to buy a yellow tiger's eye and a piece of copper?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of item names.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['yellow tiger\\'s eye', 'piece of polished granite', 'piece of copper', 'smooth piece of sea glass'],\n    'Price': [0.08, 0.07, 0.07, 0.05]\n})\n\n# Define the items to calculate the total cost\nitems = ['yellow tiger\\'s eye', 'piece of copper']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nyellow tiger's eye | $0.08\npiece of polished granite | $0.07\npiece of copper | $0.07\nsmooth piece of sea glass | $0.05"}
{"level":8,"answer":20.05,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of a specific item given the quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (int): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = quantity * item_price\n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['chocolate ice cream', 'vanilla ice cream', 'rocky road ice cream', 'butter pecan ice cream', 'pistachio ice cream', 'Neapolitan ice cream'],\n    'Price': [2.22, 5.10, 3.68, 4.01, 2.17, 4.23]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'butter pecan ice cream', 5))","question":"Jonah bought 5 pounds of butter pecan ice cream. How much did he spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of a specific item given the quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (int): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = quantity * item_price\n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['chocolate ice cream', 'vanilla ice cream', 'rocky road ice cream', 'butter pecan ice cream', 'pistachio ice cream', 'Neapolitan ice cream'],\n    'Price': [2.22, 5.10, 3.68, 4.01, 2.17, 4.23]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'butter pecan ice cream', 5))","table":"Name: None\nUnit: $\nContent:\nchocolate ice cream | $2.22 per pound\nvanilla ice cream | $5.10 per pound\nrocky road ice cream | $3.68 per pound\nbutter pecan ice cream | $4.01 per pound\npistachio ice cream | $2.17 per pound\nNeapolitan ice cream | $4.23 per pound"}
{"level":2,"answer":25.0,"prediction":"import pandas as pd\n\ndef calculate_people_in_rooms(df, num_rooms):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of rooms and number of people per room, and returns the total number of people in a given number of rooms.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of rooms and number of people per room.\n    The dataframe should contain \"Number of rooms\" and \"Number of people\" columns.\n    num_rooms (int): The number of rooms to calculate the total number of people for.\n    Returns:\n    int: The total number of people in the given number of rooms.\n    \"\"\"\n    # Filter the DataFrame for the given number of rooms\n    filtered_df = df[df['Number of rooms'] == num_rooms]\n    \n    # Get the number of people for the given number of rooms\n    num_people = filtered_df['Number of people'].values[0]\n    \n    # Calculate the total number of people in the given number of rooms\n    total_people = num_people * num_rooms\n    \n    return total_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of rooms': [1, 2, 3, 4, 5],\n    'Number of people': [5, 10, 15, 20, '?']\n})\n\n# Call the tool to solve the problem\nnum_rooms = 5\nprint(calculate_people_in_rooms(df, num_rooms))","question":"Each room has 5 people. How many people are in 5 rooms?","prediction_code":"import pandas as pd\n\ndef calculate_people_in_rooms(df, num_rooms):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of rooms and number of people per room, and returns the total number of people in a given number of rooms.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of rooms and number of people per room.\n    The dataframe should contain \"Number of rooms\" and \"Number of people\" columns.\n    num_rooms (int): The number of rooms to calculate the total number of people for.\n    Returns:\n    int: The total number of people in the given number of rooms.\n    \"\"\"\n    # Filter the DataFrame for the given number of rooms\n    filtered_df = df[df['Number of rooms'] == num_rooms]\n    \n    # Get the number of people for the given number of rooms\n    num_people = filtered_df['Number of people'].values[0]\n    \n    # Calculate the total number of people in the given number of rooms\n    total_people = num_people * num_rooms\n    \n    return total_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of rooms': [1, 2, 3, 4, 5],\n    'Number of people': [5, 10, 15, 20, '?']\n})\n\n# Call the tool to solve the problem\nnum_rooms = 5\nprint(calculate_people_in_rooms(df, num_rooms))","table":"Name: None\nUnit: None\nContent:\nNumber of rooms | Number of people\n1 | 5\n2 | 10\n3 | 15\n4 | 20\n5 | ?"}
{"level":7,"answer":4.0,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item2_price - item1_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['hammock', 'fountain', 'leaf blower', 'rosebush'],\n    'Price': [99, 76, 80, 32]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'fountain', 'leaf blower'))","question":"How much more does a leaf blower cost than a fountain?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item2_price - item1_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['hammock', 'fountain', 'leaf blower', 'rosebush'],\n    'Price': [99, 76, 80, 32]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'fountain', 'leaf blower'))","table":"Name: None\nUnit: $\nContent:\nhammock | $99\nfountain | $76\nleaf blower | $80\nrosebush | $32"}
{"level":1,"answer":15.0,"prediction":"import pandas as pd\n\ndef calculate_total_lilies(df, num_bouquets):\n    \"\"\"\n    This function takes in a pandas DataFrame of bouquets and the number of bouquets, and returns the total number of lilies.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of bouquets and the number of lilies per bouquet.\n    The DataFrame should have columns 'Number of bouquets' and 'Number of lilies'.\n    num_bouquets (int): The number of bouquets to calculate the total number of lilies.\n    Returns:\n    int: The total number of lilies in the given number of bouquets.\n    \"\"\"\n    # Filter the DataFrame for the given number of bouquets\n    bouquets_df = df[df['Number of bouquets'] == num_bouquets]\n    \n    # Get the number of lilies per bouquet\n    num_lilies = bouquets_df['Number of lilies'].values[0]\n    \n    # Calculate the total number of lilies\n    total_lilies = num_bouquets * num_lilies\n    \n    return total_lilies\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of bouquets': [1, 2, 3],\n    'Number of lilies': [5, 10, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_lilies(df, 3))","question":"Each bouquet has 5 lilies. How many lilies are in 3 bouquets?","prediction_code":"import pandas as pd\n\ndef calculate_total_lilies(df, num_bouquets):\n    \"\"\"\n    This function takes in a pandas DataFrame of bouquets and the number of bouquets, and returns the total number of lilies.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of bouquets and the number of lilies per bouquet.\n    The DataFrame should have columns 'Number of bouquets' and 'Number of lilies'.\n    num_bouquets (int): The number of bouquets to calculate the total number of lilies.\n    Returns:\n    int: The total number of lilies in the given number of bouquets.\n    \"\"\"\n    # Filter the DataFrame for the given number of bouquets\n    bouquets_df = df[df['Number of bouquets'] == num_bouquets]\n    \n    # Get the number of lilies per bouquet\n    num_lilies = bouquets_df['Number of lilies'].values[0]\n    \n    # Calculate the total number of lilies\n    total_lilies = num_bouquets * num_lilies\n    \n    return total_lilies","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of bouquets': [1, 2, 3],\n    'Number of lilies': [5, 10, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_lilies(df, 3))","table":"Name: None\nUnit: lilies\nContent:\nNumber of bouquets | Number of lilies\n1 | 5\n2 | 10\n3 | ?"}
{"level":5,"answer":64.0,"prediction":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of web pages visited by different people and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names of people and the number of web pages they visited.\n    The dataframe should contain \"Person\" and \"Number of Web pages\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the numbers using pandas\n    mean = df['Number of Web pages'].mean()\n    \n    return mean\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Person': ['Bonnie', 'Winston', 'Percy', 'Derek', 'Jake', 'Finn', 'Carter', 'Kurt'],\n    'Number of Web pages': [84, 56, 70, 68, 60, 47, 75, 52]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","question":"Several people compared how many Web pages they had visited. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of web pages visited by different people and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names of people and the number of web pages they visited.\n    The dataframe should contain \"Person\" and \"Number of Web pages\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the numbers using pandas\n    mean = df['Number of Web pages'].mean()\n    \n    return mean","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Person': ['Bonnie', 'Winston', 'Percy', 'Derek', 'Jake', 'Finn', 'Carter', 'Kurt'],\n    'Number of Web pages': [84, 56, 70, 68, 60, 47, 75, 52]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","table":"Name: Web pages visited\nUnit: None\nContent:\nPerson | Number of Web pages\nBonnie | 84\nWinston | 56\nPercy | 70\nDerek | 68\nJake | 60\nFinn | 47\nCarter | 75\nKurt | 52"}
{"level":7,"answer":5.0,"prediction":"import pandas as pd\nimport statistics\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of hours of babysitting per month and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of hours of babysitting per month.\n    The dataframe should contain \"Month\" and \"Hours\" columns.\n    Returns:\n    float: The mode of the numbers.\n    \"\"\"\n    # Get the values in the \"Hours\" column\n    hours = df['Hours'].tolist()\n    \n    # Calculate the mode using the statistics module\n    mode = statistics.mode(hours)\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['September', 'October', 'November', 'December', 'January', 'February'],\n    'Hours': [5, 9, 5, 8, 5, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"Reagan looked at her calendar to figure out how much time she spent babysitting each month. What is the mode of the numbers?","prediction_code":"import pandas as pd\nimport statistics\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of hours of babysitting per month and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of hours of babysitting per month.\n    The dataframe should contain \"Month\" and \"Hours\" columns.\n    Returns:\n    float: The mode of the numbers.\n    \"\"\"\n    # Get the values in the \"Hours\" column\n    hours = df['Hours'].tolist()\n    \n    # Calculate the mode using the statistics module\n    mode = statistics.mode(hours)\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['September', 'October', 'November', 'December', 'January', 'February'],\n    'Hours': [5, 9, 5, 8, 5, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Hours of babysitting\nUnit: None\nContent:\nMonth | Hours\nSeptember | 5\nOctober | 9\nNovember | 5\nDecember | 8\nJanuary | 5\nFebruary | 9"}
{"level":5,"answer":83.0,"prediction":"import pandas as pd\n\ndef calculate_mean_miles(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of miles biked by club members and returns the mean of the miles.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and miles biked by club members.\n    The dataframe should contain \"Name\" and \"Miles\" columns.\n    Returns:\n    float: The mean of the miles biked by club members.\n    \"\"\"\n    # Calculate the mean of the miles column\n    mean_miles = df['Miles'].mean()\n    \n    return mean_miles\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Lucas', 'Jenna', 'Raymond', 'Valentina', 'Samuel'],\n    'Miles': [85, 81, 84, 81, 84]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_miles(df))","question":"The members of the cycling club compared how many miles they biked last week. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean_miles(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of miles biked by club members and returns the mean of the miles.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and miles biked by club members.\n    The dataframe should contain \"Name\" and \"Miles\" columns.\n    Returns:\n    float: The mean of the miles biked by club members.\n    \"\"\"\n    # Calculate the mean of the miles column\n    mean_miles = df['Miles'].mean()\n    \n    return mean_miles","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Lucas', 'Jenna', 'Raymond', 'Valentina', 'Samuel'],\n    'Miles': [85, 81, 84, 81, 84]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_miles(df))","table":"Name: Biking last week\nUnit: None\nContent:\nName | Miles\nLucas | 85\nJenna | 81\nRaymond | 84\nValentina | 81\nSamuel | 84"}
{"level":5,"answer":22.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of house sales and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the city names and the number of houses sold.\n    The DataFrame should have columns 'City' and 'Number of houses sold'.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column with the numbers\n    numbers = df['Number of houses sold']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'City': ['Center City', 'Fremont', 'Pennytown', 'Liberty City', 'New Hamburg'],\n    'Number of houses sold': [41, 21, 23, 14, 22]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"A real estate agent looked into how many houses were sold in different cities. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of house sales and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the city names and the number of houses sold.\n    The DataFrame should have columns 'City' and 'Number of houses sold'.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column with the numbers\n    numbers = df['Number of houses sold']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'City': ['Center City', 'Fremont', 'Pennytown', 'Liberty City', 'New Hamburg'],\n    'Number of houses sold': [41, 21, 23, 14, 22]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: House sales\nUnit: None\nContent:\nCity | Number of houses sold\nCenter City | 41\nFremont | 21\nPennytown | 23\nLiberty City | 14\nNew Hamburg | 22"}
{"level":6,"answer":3.0,"prediction":"import pandas as pd\n\ndef count_boxes_with_31_broken_crayons(df):\n    \"\"\"\n    This function takes in a pandas dataframe of broken crayons per box, and returns the number of boxes that have exactly 31 broken crayons.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken crayons per box.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of boxes that have exactly 31 broken crayons.\n    \"\"\"\n    # prepare a list to calculate broken crayons in each box\n    broken_crayons = []\n    # calculate the total number of broken crayons in each box\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            broken_crayons.append(stem * 10 + leaf[j])\n    # filter the boxes where the total number of broken crayons is equal to 31\n    filtered = [crayon for crayon in broken_crayons if crayon == 31]\n    # count the number of rows\n    num_boxes = len(filtered)\n    return num_boxes\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7],\n    'Leaf': [[1, 1, 1, 5, 7, 8], [2, 4, 5], [1, 2, 2, 2, 3, 4], [0, 0, 5], [1, 3, 8, 9, 9]]\n})\n# Call the tool to solve the problem\nprint(count_boxes_with_31_broken_crayons(df))","question":"A crayon factory monitored the number of broken crayons per box during the past day. How many boxes had exactly 31 broken crayons?","prediction_code":"import pandas as pd\n\ndef count_boxes_with_31_broken_crayons(df):\n    \"\"\"\n    This function takes in a pandas dataframe of broken crayons per box, and returns the number of boxes that have exactly 31 broken crayons.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken crayons per box.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of boxes that have exactly 31 broken crayons.\n    \"\"\"\n    # prepare a list to calculate broken crayons in each box\n    broken_crayons = []\n    # calculate the total number of broken crayons in each box\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            broken_crayons.append(stem * 10 + leaf[j])\n    # filter the boxes where the total number of broken crayons is equal to 31\n    filtered = [crayon for crayon in broken_crayons if crayon == 31]\n    # count the number of rows\n    num_boxes = len(filtered)\n    return num_boxes","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7],\n    'Leaf': [[1, 1, 1, 5, 7, 8], [2, 4, 5], [1, 2, 2, 2, 3, 4], [0, 0, 5], [1, 3, 8, 9, 9]]\n})\n# Call the tool to solve the problem\nprint(count_boxes_with_31_broken_crayons(df))","table":"Name: Broken crayons per box\nUnit: boxes\nContent:\nStem | Leaf \n3 | 1, 1, 1, 5, 7, 8\n4 | 2, 4, 5\n5 | 1, 2, 2, 2, 3, 4\n6 | 0, 0, 5\n7 | 1, 3, 8, 9, 9"}
{"level":5,"answer":3.0,"prediction":"import pandas as pd\n\ndef calculate_medal_difference(df, country):\n    \"\"\"\n    This function takes in a pandas DataFrame of Olympic medals won by countries and a specific country name, and returns the difference in medals won by that country between two years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of medals won by countries at different Olympic games.\n    The DataFrame should have columns 'Country', '1996', and '2000'.\n    country (str): The name of the country to calculate the medal difference for.\n    Returns:\n    int: The difference in medals won by the country between 1996 and 2000.\n    \"\"\"\n    # Filter the DataFrame for the specific country\n    country_df = df[df['Country'] == country]\n    \n    # Get the number of medals won by the country in 1996 and 2000\n    medals_1996 = country_df['1996'].values[0]\n    medals_2000 = country_df['2000'].values[0]\n    \n    # Calculate the difference in medals\n    medal_difference = medals_1996 - medals_2000\n    \n    return medal_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Country': ['Brazil', 'Sweden', 'Finland'],\n    '1996': [15, 8, 4],\n    '2000': [12, 12, 4]\n})\n# Call the tool to solve the problem\nprint(calculate_medal_difference(df, 'Brazil'))","question":"A sports fan decided to examine the pattern of medals won by certain countries at several Olympic games. How many more medals did Brazil win in 1996 than in 2000?","prediction_code":"import pandas as pd\n\ndef calculate_medal_difference(df, country):\n    \"\"\"\n    This function takes in a pandas DataFrame of Olympic medals won by countries and a specific country name, and returns the difference in medals won by that country between two years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of medals won by countries at different Olympic games.\n    The DataFrame should have columns 'Country', '1996', and '2000'.\n    country (str): The name of the country to calculate the medal difference for.\n    Returns:\n    int: The difference in medals won by the country between 1996 and 2000.\n    \"\"\"\n    # Filter the DataFrame for the specific country\n    country_df = df[df['Country'] == country]\n    \n    # Get the number of medals won by the country in 1996 and 2000\n    medals_1996 = country_df['1996'].values[0]\n    medals_2000 = country_df['2000'].values[0]\n    \n    # Calculate the difference in medals\n    medal_difference = medals_1996 - medals_2000\n    \n    return medal_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Country': ['Brazil', 'Sweden', 'Finland'],\n    '1996': [15, 8, 4],\n    '2000': [12, 12, 4]\n})\n# Call the tool to solve the problem\nprint(calculate_medal_difference(df, 'Brazil'))","table":"Name: Olympic medals\nUnit: medals\nContent:\nCountry | 1996 | 2000\nBrazil | 15 | 12\nSweden | 8 | 12\nFinland | 4 | 4"}
{"level":6,"answer":0.8,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = quantity * item_price\n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['vegetable oil', 'sunflower seed oil', 'soybean oil', 'olive oil', 'cottonseed oil', 'peanut oil', 'canola oil'],\n    'Price': [8, 3, 7, 8, 5, 3, 8]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'olive oil', 1\/10))","question":"Sidney bought 1\/10 of a pound of olive oil. How much did she spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = quantity * item_price\n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['vegetable oil', 'sunflower seed oil', 'soybean oil', 'olive oil', 'cottonseed oil', 'peanut oil', 'canola oil'],\n    'Price': [8, 3, 7, 8, 5, 3, 8]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'olive oil', 1\/10))","table":"Name: None\nUnit: $\nContent:\nvegetable oil | $8 per pound\nsunflower seed oil | $3 per pound\nsoybean oil | $7 per pound\nolive oil | $8 per pound\ncottonseed oil | $5 per pound\npeanut oil | $3 per pound\ncanola oil | $8 per pound"}
{"level":7,"answer":32.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(book_df, books):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a book table and a list of books, and returns the total cost of the books using pandas.\n    Args:\n    book_df (pd.DataFrame): A pandas DataFrame containing book titles and their prices with columns 'Book' and 'Price'.\n    books (list): A list of book titles.\n    Returns:\n    float: The total cost of the books.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the books and calculate the cost for each book\n    for book in books:\n        # Filter the DataFrame for the specific book\n        book_row = book_df[book_df['Book'] == book]\n        if not book_row.empty:\n            book_price = book_row['Price'].values[0]\n            total_cost += book_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\nbook_df = pd.DataFrame({\n    'Book': ['book about fish', 'book about art', 'book about Europe', 'book about trains'],\n    'Price': [11, 13, 21, 21]\n})\n\n# Define the list of books\nbooks = ['book about fish', 'book about trains']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(book_df, books))","question":"How much money does Brody need to buy a book about fish and a book about trains?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(book_df, books):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a book table and a list of books, and returns the total cost of the books using pandas.\n    Args:\n    book_df (pd.DataFrame): A pandas DataFrame containing book titles and their prices with columns 'Book' and 'Price'.\n    books (list): A list of book titles.\n    Returns:\n    float: The total cost of the books.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the books and calculate the cost for each book\n    for book in books:\n        # Filter the DataFrame for the specific book\n        book_row = book_df[book_df['Book'] == book]\n        if not book_row.empty:\n            book_price = book_row['Price'].values[0]\n            total_cost += book_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\nbook_df = pd.DataFrame({\n    'Book': ['book about fish', 'book about art', 'book about Europe', 'book about trains'],\n    'Price': [11, 13, 21, 21]\n})\n\n# Define the list of books\nbooks = ['book about fish', 'book about trains']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(book_df, books))","table":"Name: None\nUnit: $\nContent:\nbook about fish | $11\nbook about art | $13\nbook about Europe | $21\nbook about trains | $21"}
{"level":4,"answer":5.0,"prediction":"import pandas as pd\n\ndef get_donation_amount(df, cause, month):\n    \"\"\"\n    This function takes in a pandas DataFrame of donations received and returns the amount of money raised for a specific cause in a specific month.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the donations received.\n    The dataframe should contain \"Cause\", \"May\", and \"June\" columns.\n    cause (str): The name of the cause.\n    month (str): The name of the month.\n    Returns:\n    float: The amount of money raised for the specific cause in the specific month.\n    \"\"\"\n    # Filter the DataFrame for the specific cause and month\n    donation_df = df[(df['Cause'] == cause) & (df[month] != '')]\n    \n    # Check if the filtered DataFrame is empty\n    if donation_df.empty:\n        return 0.0\n    \n    # Get the donation amount\n    donation_amount = donation_df[month].values[0]\n    \n    # Remove the dollar sign and convert the amount to float\n    donation_amount = float(donation_amount.replace('$', ''))\n    \n    return donation_amount\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Cause': ['Parks', 'Medical research', 'Education', 'Animals', 'Hunger'],\n    'May': ['$5', '$3', '$8', '$14', '$1'],\n    'June': ['$12', '$16', '$18', '$16', '$2']\n})\n# Call the tool to solve the problem\nprint(get_donation_amount(df, 'Parks', 'May'))","question":"A county agency recorded the money donated to several charitable causes over time. How much money was raised for parks in May?","prediction_code":"import pandas as pd\n\ndef get_donation_amount(df, cause, month):\n    \"\"\"\n    This function takes in a pandas DataFrame of donations received and returns the amount of money raised for a specific cause in a specific month.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the donations received.\n    The dataframe should contain \"Cause\", \"May\", and \"June\" columns.\n    cause (str): The name of the cause.\n    month (str): The name of the month.\n    Returns:\n    float: The amount of money raised for the specific cause in the specific month.\n    \"\"\"\n    # Filter the DataFrame for the specific cause and month\n    donation_df = df[(df['Cause'] == cause) & (df[month] != '')]\n    \n    # Check if the filtered DataFrame is empty\n    if donation_df.empty:\n        return 0.0\n    \n    # Get the donation amount\n    donation_amount = donation_df[month].values[0]\n    \n    # Remove the dollar sign and convert the amount to float\n    donation_amount = float(donation_amount.replace('$', ''))\n    \n    return donation_amount","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Cause': ['Parks', 'Medical research', 'Education', 'Animals', 'Hunger'],\n    'May': ['$5', '$3', '$8', '$14', '$1'],\n    'June': ['$12', '$16', '$18', '$16', '$2']\n})\n# Call the tool to solve the problem\nprint(get_donation_amount(df, 'Parks', 'May'))","table":"Name: Donations received\nUnit: $\nContent:\nCause | May | June\nParks | $5 | $12\nMedical research | $3 | $16\nEducation | $8 | $18\nAnimals | $14 | $16\nHunger | $1 | $2"}
{"level":5,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_difference(df, cause1, month1, cause2, month2):\n    \"\"\"\n    This function takes in a pandas DataFrame of donations received and returns the difference in money raised for two causes in two different months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the donations received with columns 'Cause', 'March', and 'April'.\n    cause1 (str): The name of the first cause.\n    month1 (str): The name of the first month.\n    cause2 (str): The name of the second cause.\n    month2 (str): The name of the second month.\n    Returns:\n    float: The difference in money raised for the two causes in the two months.\n    \"\"\"\n    # Filter the DataFrame for the two causes and two months\n    cause1_month1 = df[(df['Cause'] == cause1) & (df['Month'] == month1)]\n    cause2_month2 = df[(df['Cause'] == cause2) & (df['Month'] == month2)]\n    \n    # Get the donation amounts for the two causes and two months\n    donation1 = cause1_month1[month1].values[0]\n    donation2 = cause2_month2[month2].values[0]\n    \n    # Calculate the difference in money raised\n    difference = donation1 - donation2\n    \n    return difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Cause': ['Education', 'Parks', 'Animals', 'Medical research'],\n    'March': [19, 4, 2, 19],\n    'April': [14, 6, 8, 17]\n})\n\n# Call the tool to solve the problem\nprint(calculate_difference(df, 'Education', 'March', 'Education', 'April'))","question":"A county agency recorded the money donated to several charitable causes over time. How much more money was raised for education in March than in April?","prediction_code":"import pandas as pd\n\ndef calculate_difference(df, cause1, month1, cause2, month2):\n    \"\"\"\n    This function takes in a pandas DataFrame of donations received and returns the difference in money raised for two causes in two different months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the donations received with columns 'Cause', 'March', and 'April'.\n    cause1 (str): The name of the first cause.\n    month1 (str): The name of the first month.\n    cause2 (str): The name of the second cause.\n    month2 (str): The name of the second month.\n    Returns:\n    float: The difference in money raised for the two causes in the two months.\n    \"\"\"\n    # Filter the DataFrame for the two causes and two months\n    cause1_month1 = df[(df['Cause'] == cause1) & (df['Month'] == month1)]\n    cause2_month2 = df[(df['Cause'] == cause2) & (df['Month'] == month2)]\n    \n    # Get the donation amounts for the two causes and two months\n    donation1 = cause1_month1[month1].values[0]\n    donation2 = cause2_month2[month2].values[0]\n    \n    # Calculate the difference in money raised\n    difference = donation1 - donation2\n    \n    return difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Cause': ['Education', 'Parks', 'Animals', 'Medical research'],\n    'March': [19, 4, 2, 19],\n    'April': [14, 6, 8, 17]\n})\n\n# Call the tool to solve the problem\nprint(calculate_difference(df, 'Education', 'March', 'Education', 'April'))","table":"Name: Donations received\nUnit: $\nContent:\nCause | March | April\nEducation | $19 | $14\nParks | $4 | $6\nAnimals | $2 | $8\nMedical research | $19 | $17"}
{"level":8,"answer":8.23,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the items and their prices with columns 'Item' and 'Price'.\n    items (dict): A dictionary where the keys are item names and the values are the quantities of each item.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item, quantity in items.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['kidney beans', 'lentils', 'garbanzo beans', 'lima beans'],\n    'Price': [1.02, 0.93, 1.27, 0.45]\n})\n\n# Initialize the items dictionary\nitems = {\n    'kidney beans': 5,\n    'lentils': 2,\n    'garbanzo beans': 1\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"Manny wants to buy 5 kilograms of kidney beans, 2 kilograms of lentils, and 1 kilogram of garbanzo beans. How much will he spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the items and their prices with columns 'Item' and 'Price'.\n    items (dict): A dictionary where the keys are item names and the values are the quantities of each item.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item, quantity in items.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['kidney beans', 'lentils', 'garbanzo beans', 'lima beans'],\n    'Price': [1.02, 0.93, 1.27, 0.45]\n})\n\n# Initialize the items dictionary\nitems = {\n    'kidney beans': 5,\n    'lentils': 2,\n    'garbanzo beans': 1\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nkidney beans | $1.02\/kg\nlentils | $0.93\/kg\ngarbanzo beans | $1.27\/kg\nlima beans | $0.45\/kg"}
{"level":5,"answer":22.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(book_df, books):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a book table and a list of books, and returns the total cost of the books using pandas.\n    Args:\n    book_df (pd.DataFrame): A pandas DataFrame containing book names and their prices with columns 'Name' and 'Price'.\n    books (list): A list of book names.\n    Returns:\n    float: The total cost of the books.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the books and calculate the cost for each book\n    for book in books:\n        # Filter the DataFrame for the specific book\n        book_row = book_df[book_df['Name'] == book]\n        if not book_row.empty:\n            book_price = book_row['Price'].values[0]\n            total_cost += book_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\nbook_df = pd.DataFrame({\n    'Name': ['geography book', 'picture book', 'poetry book', 'science-fiction book', 'mystery novel', 'coloring book'],\n    'Price': [1.00, 8.00, 9.00, 6.00, 5.00, 1.00]\n})\n\n# Define the list of books to buy\nbooks_to_buy = ['mystery novel', 'poetry book', 'picture book']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(book_df, books_to_buy)\n\n# Print out the answer\nprint(total_cost)","question":"How much money does Larry need to buy a mystery novel, a poetry book, and a picture book?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(book_df, books):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a book table and a list of books, and returns the total cost of the books using pandas.\n    Args:\n    book_df (pd.DataFrame): A pandas DataFrame containing book names and their prices with columns 'Name' and 'Price'.\n    books (list): A list of book names.\n    Returns:\n    float: The total cost of the books.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the books and calculate the cost for each book\n    for book in books:\n        # Filter the DataFrame for the specific book\n        book_row = book_df[book_df['Name'] == book]\n        if not book_row.empty:\n            book_price = book_row['Price'].values[0]\n            total_cost += book_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\nbook_df = pd.DataFrame({\n    'Name': ['geography book', 'picture book', 'poetry book', 'science-fiction book', 'mystery novel', 'coloring book'],\n    'Price': [1.00, 8.00, 9.00, 6.00, 5.00, 1.00]\n})\n\n# Define the list of books to buy\nbooks_to_buy = ['mystery novel', 'poetry book', 'picture book']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(book_df, books_to_buy)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\ngeography book | $1.00\npicture book | $8.00\npoetry book | $9.00\nscience-fiction book | $6.00\nmystery novel | $5.00\ncoloring book | $1.00"}
{"level":7,"answer":1.0,"prediction":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of soccer fields per park and returns the mode of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the park names and the number of soccer fields.\n    The dataframe should contain \"Park\" and \"Number of soccer fields\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the \"Number of soccer fields\" column\n    soccer_fields = df['Number of soccer fields']\n    \n    # Calculate the mode using the value_counts() function\n    mode = soccer_fields.value_counts().idxmax()\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Park': ['Windy Hill Park', 'Middle Park', 'Crane Park', 'Juniper Park', 'Lighthouse Park', 'Madison Park', 'Moon Park', 'Elmhurst Park'],\n    'Number of soccer fields': [7, 6, 7, 1, 1, 1, 6, 1]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"The parks department compared how many soccer fields there are at each park. What is the mode of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of soccer fields per park and returns the mode of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the park names and the number of soccer fields.\n    The dataframe should contain \"Park\" and \"Number of soccer fields\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the \"Number of soccer fields\" column\n    soccer_fields = df['Number of soccer fields']\n    \n    # Calculate the mode using the value_counts() function\n    mode = soccer_fields.value_counts().idxmax()\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Park': ['Windy Hill Park', 'Middle Park', 'Crane Park', 'Juniper Park', 'Lighthouse Park', 'Madison Park', 'Moon Park', 'Elmhurst Park'],\n    'Number of soccer fields': [7, 6, 7, 1, 1, 1, 6, 1]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Soccer fields\nUnit: None\nContent:\nPark | Number of soccer fields\nWindy Hill Park | 7\nMiddle Park | 6\nCrane Park | 7\nJuniper Park | 1\nLighthouse Park | 1\nMadison Park | 1\nMoon Park | 6\nElmhurst Park | 1"}
{"level":6,"answer":12.0,"prediction":"import pandas as pd\n\ndef count_teams_with_30_swimmers(df):\n    \"\"\"\n    This function takes in a pandas dataframe of swim team sizes and returns the number of teams that have at least 30 swimmers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the size of swim teams.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of teams that have at least 30 swimmers.\n    \"\"\"\n    # prepare a list to calculate the size of each team\n    team_sizes = []\n    # calculate the total number of swimmers in each team\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            team_sizes.append(stem * 10 + leaf[j])\n    # filter the teams where the total number of swimmers is greater than or equal to 30\n    filtered = [size for size in team_sizes if size >= 30]\n    # count the number of teams\n    num_teams = len(filtered)\n    return num_teams\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6],\n    'Leaf': [[2, 3, 7, 7], [2], [0, 3, 4], [1, 4, 8], [2, 2, 4, 5, 9]]\n})\n# Call the tool to solve the problem\nprint(count_teams_with_30_swimmers(df))","question":"At a swim meet, Ernesto noted the size of various swim teams. How many teams have at least 30 swimmers?","prediction_code":"import pandas as pd\n\ndef count_teams_with_30_swimmers(df):\n    \"\"\"\n    This function takes in a pandas dataframe of swim team sizes and returns the number of teams that have at least 30 swimmers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the size of swim teams.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of teams that have at least 30 swimmers.\n    \"\"\"\n    # prepare a list to calculate the size of each team\n    team_sizes = []\n    # calculate the total number of swimmers in each team\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            team_sizes.append(stem * 10 + leaf[j])\n    # filter the teams where the total number of swimmers is greater than or equal to 30\n    filtered = [size for size in team_sizes if size >= 30]\n    # count the number of teams\n    num_teams = len(filtered)\n    return num_teams","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6],\n    'Leaf': [[2, 3, 7, 7], [2], [0, 3, 4], [1, 4, 8], [2, 2, 4, 5, 9]]\n})\n# Call the tool to solve the problem\nprint(count_teams_with_30_swimmers(df))","table":"Name: Swimming team sizes (number of swimmers)\nUnit: teams\nContent:\nStem | Leaf \n2 | 2, 3, 7, 7\n3 | 2\n4 | 0, 3, 4\n5 | 1, 4, 8\n6 | 2, 2, 4, 5, 9"}
{"level":5,"answer":15.0,"prediction":"import pandas as pd\n\ndef get_ferry_cost(df, ferry, vehicle):\n    \"\"\"\n    This function takes in a pandas DataFrame of ferry fares and returns the cost of taking a specific vehicle on a specific ferry.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the ferry fares with columns 'Ferry', 'Bicycle', and 'Car'.\n    ferry (str): The name of the ferry.\n    vehicle (str): The type of vehicle ('Bicycle' or 'Car').\n    Returns:\n    float: The cost of taking the specified vehicle on the specified ferry.\n    \"\"\"\n    # Filter the DataFrame for the specific ferry and vehicle\n    ferry_df = df[df['Ferry'] == ferry]\n    cost = ferry_df[vehicle].values[0]\n    \n    return cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Seattle-Bremerton', 'Southport-Fort Fisher', 'Fauntleroy-Vashon'],\n    'Bicycle': [8, 2, 5],\n    'Car': [12, 5, 15]\n})\n# Call the tool to solve the problem\nprint(get_ferry_cost(df, 'Fauntleroy-Vashon', 'Car'))","question":"For an economics project, Erin determined the cost of ferry rides for bicycles and cars. How much does it cost to take a car on the Fauntleroy-Vashon ferry?","prediction_code":"import pandas as pd\n\ndef get_ferry_cost(df, ferry, vehicle):\n    \"\"\"\n    This function takes in a pandas DataFrame of ferry fares and returns the cost of taking a specific vehicle on a specific ferry.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the ferry fares with columns 'Ferry', 'Bicycle', and 'Car'.\n    ferry (str): The name of the ferry.\n    vehicle (str): The type of vehicle ('Bicycle' or 'Car').\n    Returns:\n    float: The cost of taking the specified vehicle on the specified ferry.\n    \"\"\"\n    # Filter the DataFrame for the specific ferry and vehicle\n    ferry_df = df[df['Ferry'] == ferry]\n    cost = ferry_df[vehicle].values[0]\n    \n    return cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Seattle-Bremerton', 'Southport-Fort Fisher', 'Fauntleroy-Vashon'],\n    'Bicycle': [8, 2, 5],\n    'Car': [12, 5, 15]\n})\n# Call the tool to solve the problem\nprint(get_ferry_cost(df, 'Fauntleroy-Vashon', 'Car'))","table":"Name: Ferry fares\nUnit: $\nContent:\nFerry | Bicycle | Car\nSeattle-Bremerton | $8 | $12\nSouthport-Fort Fisher | $2 | $5\nFauntleroy-Vashon | $5 | $15"}
{"level":5,"answer":83.0,"prediction":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of hot dogs sold and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of hot dogs sold each day.\n    The dataframe should contain \"Day\" and \"Number of hot dogs\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean using pandas\n    mean = df['Number of hot dogs'].mean()\n    \n    return mean\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday'],\n    'Number of hot dogs': [80, 81, 88, 87, 79]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","question":"A hot dog stand kept track of the number of hot dogs sold each day. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of hot dogs sold and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of hot dogs sold each day.\n    The dataframe should contain \"Day\" and \"Number of hot dogs\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean using pandas\n    mean = df['Number of hot dogs'].mean()\n    \n    return mean","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday'],\n    'Number of hot dogs': [80, 81, 88, 87, 79]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","table":"Name: Hot dogs sold\nUnit: None\nContent:\nDay | Number of hot dogs\nThursday | 80\nFriday | 81\nSaturday | 88\nSunday | 87\nMonday | 79"}
{"level":7,"answer":2.0,"prediction":"import pandas as pd\n\ndef count_people_with_at_least_70_pullups(df):\n    \"\"\"\n    This function takes in a pandas dataframe of pull-up competition results and returns the number of people who did at least 70 pull-ups.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pull-ups per person.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of people who did at least 70 pull-ups.\n    \"\"\"\n    # prepare a list to calculate the number of pull-ups for each person\n    pullups = []\n    # calculate the total number of pull-ups for each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            pullups.append(stem * 10 + leaf[j])\n    # filter the people who did at least 70 pull-ups\n    filtered = [pullup for pullup in pullups if pullup >= 70]\n    # count the number of people\n    num_people = len(filtered)\n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[6], [4], [6, 9], [0, 1], [0, 8], [3, 4, 4, 8], [4], [], [0]]\n})\n# Call the tool to solve the problem\nprint(count_people_with_at_least_70_pullups(df))","question":"During Fitness Day at school, Samantha and her classmates took part in a pull-up competition, keeping track of the results. How many people did at least 70 pull-ups?","prediction_code":"import pandas as pd\n\ndef count_people_with_at_least_70_pullups(df):\n    \"\"\"\n    This function takes in a pandas dataframe of pull-up competition results and returns the number of people who did at least 70 pull-ups.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pull-ups per person.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of people who did at least 70 pull-ups.\n    \"\"\"\n    # prepare a list to calculate the number of pull-ups for each person\n    pullups = []\n    # calculate the total number of pull-ups for each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            pullups.append(stem * 10 + leaf[j])\n    # filter the people who did at least 70 pull-ups\n    filtered = [pullup for pullup in pullups if pullup >= 70]\n    # count the number of people\n    num_people = len(filtered)\n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[6], [4], [6, 9], [0, 1], [0, 8], [3, 4, 4, 8], [4], [], [0]]\n})\n# Call the tool to solve the problem\nprint(count_people_with_at_least_70_pullups(df))","table":"Name: Pull-up competition (number of pull-ups)\nUnit: people\nContent:\nStem | Leaf \n1 | 6\n2 | 4\n3 | 6, 9\n4 | 0, 1\n5 | 0, 8\n6 | 3, 4, 4, 8\n7 | 4\n8 | \n9 | 0"}
{"level":5,"answer":4.0,"prediction":"import pandas as pd\n\ndef count_boxes_with_79_broken_crayons(df):\n    \"\"\"\n    This function takes in a pandas dataframe of broken crayons per box, and returns the number of boxes that have exactly 79 broken crayons.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken crayons per box.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of boxes that have exactly 79 broken crayons.\n    \"\"\"\n    # prepare a list to calculate broken crayons in each box\n    crayons = []\n    # calculate the total number of broken crayons in each box\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            crayons.append(stem * 10 + leaf[j])\n    # filter the boxes where the total number of broken crayons is equal to 79\n    filtered = [crayon for crayon in crayons if crayon == 79]\n    # count the number of rows\n    num_boxes = len(filtered)\n    return num_boxes\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7],\n    'Leaf': [[9, 9], [], [], [8], [], [0, 6, 9, 9, 9, 9]]\n})\n# Call the tool to solve the problem\nprint(count_boxes_with_79_broken_crayons(df))","question":"A crayon factory monitored the number of broken crayons per box during the past day. How many boxes had exactly 79 broken crayons?","prediction_code":"import pandas as pd\n\ndef count_boxes_with_79_broken_crayons(df):\n    \"\"\"\n    This function takes in a pandas dataframe of broken crayons per box, and returns the number of boxes that have exactly 79 broken crayons.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken crayons per box.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of boxes that have exactly 79 broken crayons.\n    \"\"\"\n    # prepare a list to calculate broken crayons in each box\n    crayons = []\n    # calculate the total number of broken crayons in each box\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            crayons.append(stem * 10 + leaf[j])\n    # filter the boxes where the total number of broken crayons is equal to 79\n    filtered = [crayon for crayon in crayons if crayon == 79]\n    # count the number of rows\n    num_boxes = len(filtered)\n    return num_boxes","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7],\n    'Leaf': [[9, 9], [], [], [8], [], [0, 6, 9, 9, 9, 9]]\n})\n# Call the tool to solve the problem\nprint(count_boxes_with_79_broken_crayons(df))","table":"Name: Broken crayons per box\nUnit: boxes\nContent:\nStem | Leaf \n2 | 9, 9\n3 | \n4 | \n5 | 8\n6 | \n7 | 0, 6, 9, 9, 9, 9"}
{"level":7,"answer":-1.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of rounds in the spelling bee per year and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the rounds in the spelling bee per year.\n    The dataframe should contain \"Year\" and \"Rounds\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_rounds = df[df['Year'] == start_year]['Rounds'].values[0]\n    end_rounds = df[df['Year'] == end_year]['Rounds'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_rounds - start_rounds) \/ (end_year - start_year)\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2012, 2013, 2014, 2015, 2016],\n    'Rounds': [13, 12, 13, 8, 11]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2012, 2013))","question":"Mrs. Barton told students how many rounds to expect in the spelling bee based on previous years. According to the table, what was the rate of change between 2012 and 2013?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of rounds in the spelling bee per year and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the rounds in the spelling bee per year.\n    The dataframe should contain \"Year\" and \"Rounds\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_rounds = df[df['Year'] == start_year]['Rounds'].values[0]\n    end_rounds = df[df['Year'] == end_year]['Rounds'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_rounds - start_rounds) \/ (end_year - start_year)\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2012, 2013, 2014, 2015, 2016],\n    'Rounds': [13, 12, 13, 8, 11]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2012, 2013))","table":"Name: Rounds in the spelling bee\nUnit: rounds per year\nContent:\nYear | Rounds\n2012 | 13\n2013 | 12\n2014 | 13\n2015 | 8\n2016 | 11"}
{"level":8,"answer":8.38,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, book1, book2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of book prices and two book names, and returns the price difference between the two books.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing book names and their prices with columns 'Name' and 'Price'.\n    book1 (str): The name of the first book.\n    book2 (str): The name of the second book.\n    Returns:\n    float: The price difference between the two books.\n    \"\"\"\n    # Filter the DataFrame for the two books\n    book1_df = df[df['Name'] == book1]\n    book2_df = df[df['Name'] == book2]\n    \n    # Get the prices of the two books\n    book1_price = book1_df['Price'].values[0]\n    book2_price = book2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = book2_price - book1_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['book about reptiles', 'book about trains', 'book about birds', 'book about animals', 'book about Asia'],\n    'Price': [1.32, 5.32, 2.66, 1.37, 9.70]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'book about reptiles', 'book about Asia'))","question":"How much more does a book about Asia cost than a book about reptiles?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, book1, book2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of book prices and two book names, and returns the price difference between the two books.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing book names and their prices with columns 'Name' and 'Price'.\n    book1 (str): The name of the first book.\n    book2 (str): The name of the second book.\n    Returns:\n    float: The price difference between the two books.\n    \"\"\"\n    # Filter the DataFrame for the two books\n    book1_df = df[df['Name'] == book1]\n    book2_df = df[df['Name'] == book2]\n    \n    # Get the prices of the two books\n    book1_price = book1_df['Price'].values[0]\n    book2_price = book2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = book2_price - book1_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['book about reptiles', 'book about trains', 'book about birds', 'book about animals', 'book about Asia'],\n    'Price': [1.32, 5.32, 2.66, 1.37, 9.70]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'book about reptiles', 'book about Asia'))","table":"Name: None\nUnit: $\nContent:\nbook about reptiles | $1.32\nbook about trains | $5.32\nbook about birds | $2.66\nbook about animals | $1.37\nbook about Asia | $9.70"}
{"level":8,"answer":57.97,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost for.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['basketball jersey', 'volleyball net', 'softball bat', 'soccer jersey', 'volleyball', 'swimsuit'],\n    'Price': [21.09, 36.88, 11.60, 16.40, 17.51, 16.48]\n})\n\n# Define the items Lamar wants to buy\nitems = ['volleyball net', 'basketball jersey']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, items)\n\n# Print out the answer\nprint(total_cost)","question":"How much money does Lamar need to buy a volleyball net and a basketball jersey?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost for.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['basketball jersey', 'volleyball net', 'softball bat', 'soccer jersey', 'volleyball', 'swimsuit'],\n    'Price': [21.09, 36.88, 11.60, 16.40, 17.51, 16.48]\n})\n\n# Define the items Lamar wants to buy\nitems = ['volleyball net', 'basketball jersey']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, items)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\nbasketball jersey | $21.09\nvolleyball net | $36.88\nsoftball bat | $11.60\nsoccer jersey | $16.40\nvolleyball | $17.51\nswimsuit | $16.48"}
{"level":2,"answer":60.0,"prediction":"import pandas as pd\n\ndef calculate_total_shovels(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of shovels in each tool shed, and returns the total number of shovels in all tool sheds.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of tool sheds and the number of shovels in each shed.\n    The DataFrame should have columns 'Number of tool sheds' and 'Number of shovels'.\n    Returns:\n    int: The total number of shovels in all tool sheds.\n    \"\"\"\n    # Get the number of shovels in each shed\n    num_shovels = df['Number of shovels'].sum()\n    \n    # Calculate the total number of shovels in all tool sheds\n    total_shovels = num_shovels * df['Number of tool sheds'].max()\n    \n    return total_shovels\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of tool sheds': [1, 2, 3, 4, 5, 6],\n    'Number of shovels': [10, 20, 30, 40, 50, '?']\n})\n# Call the tool to solve the problem\nprint(calculate_total_shovels(df))","question":"Each tool shed has 10 shovels. How many shovels are in 6 tool sheds?","prediction_code":"import pandas as pd\n\ndef calculate_total_shovels(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of shovels in each tool shed, and returns the total number of shovels in all tool sheds.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of tool sheds and the number of shovels in each shed.\n    The DataFrame should have columns 'Number of tool sheds' and 'Number of shovels'.\n    Returns:\n    int: The total number of shovels in all tool sheds.\n    \"\"\"\n    # Get the number of shovels in each shed\n    num_shovels = df['Number of shovels'].sum()\n    \n    # Calculate the total number of shovels in all tool sheds\n    total_shovels = num_shovels * df['Number of tool sheds'].max()\n    \n    return total_shovels","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of tool sheds': [1, 2, 3, 4, 5, 6],\n    'Number of shovels': [10, 20, 30, 40, 50, '?']\n})\n# Call the tool to solve the problem\nprint(calculate_total_shovels(df))","table":"Name: None\nUnit: None\nContent:\nNumber of tool sheds | Number of shovels\n1 | 10\n2 | 20\n3 | 30\n4 | 40\n5 | 50\n6 | ?"}
{"level":6,"answer":4.0,"prediction":"import pandas as pd\n\ndef count_shipments_with_19_cracked_panes(df):\n    \"\"\"\n    This function takes in a pandas dataframe of cracked window panes per shipment, and returns the number of shipments that have exactly 19 cracked window panes.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of cracked window panes per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of shipments that have exactly 19 cracked window panes.\n    \"\"\"\n    # prepare a list to calculate the number of cracked window panes in each shipment\n    panes = []\n    # calculate the total number of cracked window panes in each shipment\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            panes.append(stem * 10 + leaf[j])\n    # filter the shipments where the total number of cracked window panes is equal to 19\n    filtered = [pane for pane in panes if pane == 19]\n    # count the number of shipments\n    num_shipments = len(filtered)\n    return num_shipments\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[0, 7, 9, 9, 9, 9], [8], [4], [], [9], [0, 4], [0, 2, 5], [0], [0]]\n})\n# Call the tool to solve the problem\nprint(count_shipments_with_19_cracked_panes(df))","question":"The employees at Sandeep's Construction monitored the number of cracked window panes in each shipment they received. How many shipments had exactly 19 cracked window panes?","prediction_code":"import pandas as pd\n\ndef count_shipments_with_19_cracked_panes(df):\n    \"\"\"\n    This function takes in a pandas dataframe of cracked window panes per shipment, and returns the number of shipments that have exactly 19 cracked window panes.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of cracked window panes per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of shipments that have exactly 19 cracked window panes.\n    \"\"\"\n    # prepare a list to calculate the number of cracked window panes in each shipment\n    panes = []\n    # calculate the total number of cracked window panes in each shipment\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            panes.append(stem * 10 + leaf[j])\n    # filter the shipments where the total number of cracked window panes is equal to 19\n    filtered = [pane for pane in panes if pane == 19]\n    # count the number of shipments\n    num_shipments = len(filtered)\n    return num_shipments","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[0, 7, 9, 9, 9, 9], [8], [4], [], [9], [0, 4], [0, 2, 5], [0], [0]]\n})\n# Call the tool to solve the problem\nprint(count_shipments_with_19_cracked_panes(df))","table":"Name: Cracked window panes per shipment\nUnit: shipments\nContent:\nStem | Leaf \n1 | 0, 7, 9, 9, 9, 9\n2 | 8\n3 | 4\n4 | \n5 | 9\n6 | 0, 4\n7 | 0, 2, 5\n8 | 0\n9 | 0"}
{"level":5,"answer":85.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of cups of lemonade sold and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of cups of lemonade sold.\n    The dataframe should contain \"Day\" and \"Number of cups\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the \"Number of cups\" column as a Series\n    cups_sold = df['Number of cups']\n    \n    # Calculate the median using pandas\n    median = cups_sold.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of cups': [59, 85, 86, 89, 80, 71, 92]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"Shane wrote down how many cups of lemonade he sold in the past 7 days. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of cups of lemonade sold and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of cups of lemonade sold.\n    The dataframe should contain \"Day\" and \"Number of cups\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the \"Number of cups\" column as a Series\n    cups_sold = df['Number of cups']\n    \n    # Calculate the median using pandas\n    median = cups_sold.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of cups': [59, 85, 86, 89, 80, 71, 92]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Cups of lemonade sold\nUnit: None\nContent:\nDay | Number of cups\nSunday | 59\nMonday | 85\nTuesday | 86\nWednesday | 89\nThursday | 80\nFriday | 71\nSaturday | 92"}
{"level":8,"answer":-32.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of leftover loaves of bread per day and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of leftover loaves of bread per day.\n    The dataframe should contain \"Day\" and \"Leftover loaves\" columns.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Get the leftover loaves for the two days\n    loaves_day1 = df[df['Day'] == day1]['Leftover loaves'].values[0]\n    loaves_day2 = df[df['Day'] == day2]['Leftover loaves'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (loaves_day2 - loaves_day1) \/ loaves_day1\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Leftover loaves': [16, 8, 38, 6, 3]\n})\n\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Thursday', 'Friday'))","question":"A vendor who sold bread at farmers' markets counted the number of leftover loaves at the end of each day. According to the table, what was the rate of change between Thursday and Friday?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of leftover loaves of bread per day and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of leftover loaves of bread per day.\n    The dataframe should contain \"Day\" and \"Leftover loaves\" columns.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Get the leftover loaves for the two days\n    loaves_day1 = df[df['Day'] == day1]['Leftover loaves'].values[0]\n    loaves_day2 = df[df['Day'] == day2]['Leftover loaves'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (loaves_day2 - loaves_day1) \/ loaves_day1\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Leftover loaves': [16, 8, 38, 6, 3]\n})\n\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Thursday', 'Friday'))","table":"Name: Loaves of leftover bread\nUnit: loaves per day\nContent:\nDay | Leftover loaves\nTuesday | 16\nWednesday | 8\nThursday | 38\nFriday | 6\nSaturday | 3"}
{"level":5,"answer":10.0,"prediction":"import pandas as pd\n\ndef get_nobel_prize_winners(df, country, decade):\n    \"\"\"\n    This function takes in a pandas DataFrame of Nobel Prize winners by country and decade, and returns the number of Nobel Prize winners for a specific country and decade.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of Nobel Prize winners by country and decade.\n    The dataframe should contain \"Country\", \"1960s\", \"1970s\", etc. columns.\n    country (str): The name of the country.\n    decade (str): The decade in the format \"YYYYs\", e.g. \"1960s\", \"1970s\".\n    Returns:\n    int: The number of Nobel Prize winners for the specific country and decade.\n    \"\"\"\n    # Filter the DataFrame for the specific country and decade\n    winners = df[df['Country'] == country][decade].values[0]\n    \n    return winners\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Country': ['Germany', 'Canada', 'Japan', 'France'],\n    '1960s': [10, 1, 2, 7],\n    '1970s': [9, 2, 2, 3]\n})\n# Call the tool to solve the problem\nprint(get_nobel_prize_winners(df, 'Germany', '1960s'))","question":"For an assignment, Mark looked at which countries got the most Nobel Prizes in various decades. How many Nobel Prize winners did Germany have in the 1960s?","prediction_code":"import pandas as pd\n\ndef get_nobel_prize_winners(df, country, decade):\n    \"\"\"\n    This function takes in a pandas DataFrame of Nobel Prize winners by country and decade, and returns the number of Nobel Prize winners for a specific country and decade.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of Nobel Prize winners by country and decade.\n    The dataframe should contain \"Country\", \"1960s\", \"1970s\", etc. columns.\n    country (str): The name of the country.\n    decade (str): The decade in the format \"YYYYs\", e.g. \"1960s\", \"1970s\".\n    Returns:\n    int: The number of Nobel Prize winners for the specific country and decade.\n    \"\"\"\n    # Filter the DataFrame for the specific country and decade\n    winners = df[df['Country'] == country][decade].values[0]\n    \n    return winners","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Country': ['Germany', 'Canada', 'Japan', 'France'],\n    '1960s': [10, 1, 2, 7],\n    '1970s': [9, 2, 2, 3]\n})\n# Call the tool to solve the problem\nprint(get_nobel_prize_winners(df, 'Germany', '1960s'))","table":"Name: Nobel Prize winners\nUnit: Nobel Prize winners\nContent:\nCountry | 1960s | 1970s\nGermany | 10 | 9\nCanada | 1 | 2\nJapan | 2 | 2\nFrance | 7 | 3"}
{"level":6,"answer":4.2,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of tea prices and a specific item and weight, and returns the total cost for the given item and weight.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing tea prices with columns 'Name' and 'Unit'.\n    item (str): The name of the tea item.\n    weight (float): The weight of the tea item in pounds.\n    Returns:\n    float: The total cost for the given item and weight.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    if not item_df.empty:\n        unit_price = item_df['Unit'].values[0]\n        # Remove the dollar sign and convert the unit price to float\n        unit_price = float(unit_price.replace('$', ''))\n        total_cost = unit_price * weight\n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['chai tea', 'green tea', 'pomegranate tea', 'black tea', 'chamomile tea', 'peppermint tea'],\n    'Unit': ['$5 per pound', '$5 per pound', '$5 per pound', '$2 per pound', '$2 per pound', '$2 per pound']\n})\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'black tea', 2.1))","question":"What is the total cost for 2.1 pounds of black tea?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of tea prices and a specific item and weight, and returns the total cost for the given item and weight.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing tea prices with columns 'Name' and 'Unit'.\n    item (str): The name of the tea item.\n    weight (float): The weight of the tea item in pounds.\n    Returns:\n    float: The total cost for the given item and weight.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    if not item_df.empty:\n        unit_price = item_df['Unit'].values[0]\n        # Remove the dollar sign and convert the unit price to float\n        unit_price = float(unit_price.replace('$', ''))\n        total_cost = unit_price * weight\n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['chai tea', 'green tea', 'pomegranate tea', 'black tea', 'chamomile tea', 'peppermint tea'],\n    'Unit': ['$5 per pound', '$5 per pound', '$5 per pound', '$2 per pound', '$2 per pound', '$2 per pound']\n})\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'black tea', 2.1))","table":"Name: None\nUnit: $\nContent:\nchai tea | $5 per pound\ngreen tea | $5 per pound\npomegranate tea | $5 per pound\nblack tea | $2 per pound\nchamomile tea | $2 per pound\npeppermint tea | $2 per pound"}
{"level":6,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of temperature at noon for 7 days and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the temperature at noon for 7 days.\n    The dataframe should contain \"Day\" and \"Temperature (\u00b0C)\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum temperature values\n    min_temp = df['Temperature (\u00b0C)'].min()\n    max_temp = df['Temperature (\u00b0C)'].max()\n    \n    # Calculate the range\n    temp_range = max_temp - min_temp\n    \n    return temp_range\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Temperature (\u00b0C)': [9, 10, 9, 10, 5, 9, 10]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"Aubrey graphed the temperature at noon for 7 days. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of temperature at noon for 7 days and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the temperature at noon for 7 days.\n    The dataframe should contain \"Day\" and \"Temperature (\u00b0C)\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum temperature values\n    min_temp = df['Temperature (\u00b0C)'].min()\n    max_temp = df['Temperature (\u00b0C)'].max()\n    \n    # Calculate the range\n    temp_range = max_temp - min_temp\n    \n    return temp_range","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Temperature (\u00b0C)': [9, 10, 9, 10, 5, 9, 10]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Temperature at noon\nUnit: None\nContent:\nDay | Temperature (\u00c2\u00b0C)\nWednesday | 9\nThursday | 10\nFriday | 9\nSaturday | 10\nSunday | 5\nMonday | 9\nTuesday | 10"}
{"level":4,"answer":8481.0,"prediction":"import pandas as pd\n\ndef calculate_remaining_money(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to buy.\n    It returns the remaining money after buying the specified items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    items (list): A list of items to buy.\n    Returns:\n    float: The remaining money after buying the specified items.\n    \"\"\"\n    # Filter the DataFrame for the specified items\n    filtered_df = df[df['Name'].isin(items)]\n    \n    # Calculate the total cost of the specified items\n    total_cost = filtered_df['Price'].sum()\n    \n    # Calculate the remaining money\n    remaining_money = 17725.00 - total_cost\n    \n    return remaining_money\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['guitar', 'tuba', 'flute', 'cornet', 'oboe', 'cello'],\n    'Price': [7726.00, 5241.00, 2712.00, 1804.00, 2391.00, 4003.00]\n})\n\n# Specify the items to buy\nitems = ['tuba', 'cello']\n\n# Call the tool to solve the problem\nprint(calculate_remaining_money(df, items))","question":"Nellie has $17,725.00. How much money will Nellie have left if she buys a tuba and a cello?","prediction_code":"import pandas as pd\n\ndef calculate_remaining_money(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to buy.\n    It returns the remaining money after buying the specified items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    items (list): A list of items to buy.\n    Returns:\n    float: The remaining money after buying the specified items.\n    \"\"\"\n    # Filter the DataFrame for the specified items\n    filtered_df = df[df['Name'].isin(items)]\n    \n    # Calculate the total cost of the specified items\n    total_cost = filtered_df['Price'].sum()\n    \n    # Calculate the remaining money\n    remaining_money = 17725.00 - total_cost\n    \n    return remaining_money","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['guitar', 'tuba', 'flute', 'cornet', 'oboe', 'cello'],\n    'Price': [7726.00, 5241.00, 2712.00, 1804.00, 2391.00, 4003.00]\n})\n\n# Specify the items to buy\nitems = ['tuba', 'cello']\n\n# Call the tool to solve the problem\nprint(calculate_remaining_money(df, items))","table":"Name: None\nUnit: $\nContent:\nguitar | $7,726.00\ntuba | $5,241.00\nflute | $2,712.00\ncornet | $1,804.00\noboe | $2,391.00\ncello | $4,003.00"}
{"level":5,"answer":28.0,"prediction":"import pandas as pd\n\ndef calculate_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of votes for a class gift and returns the difference in the number of students who voted for a new slide and a park bench.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the class gift options and the frequency of votes for each option.\n    The DataFrame should have columns 'Gift' and 'Frequency'.\n    Returns:\n    int: The difference in the number of students who voted for a new slide and a park bench.\n    \"\"\"\n    # Filter the DataFrame for the rows corresponding to the park bench and new slide\n    park_bench_votes = df[df['Gift'] == 'park bench']['Frequency'].values[0]\n    new_slide_votes = df[df['Gift'] == 'new slide']['Frequency'].values[0]\n    \n    # Calculate the difference in the number of votes\n    difference = new_slide_votes - park_bench_votes\n    \n    return difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Gift': ['park bench', 'robotics kit', 'library reading nook', 'new slide'],\n    'Frequency': [13, 15, 27, 41]\n})\n# Call the tool to solve the problem\nprint(calculate_difference(df))","question":"The fifth-grade class at Bennett School voted on what they wanted to give the school as a class gift. The teacher recorded their votes in a frequency chart. How many more students voted for a new slide than a park bench?","prediction_code":"import pandas as pd\n\ndef calculate_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of votes for a class gift and returns the difference in the number of students who voted for a new slide and a park bench.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the class gift options and the frequency of votes for each option.\n    The DataFrame should have columns 'Gift' and 'Frequency'.\n    Returns:\n    int: The difference in the number of students who voted for a new slide and a park bench.\n    \"\"\"\n    # Filter the DataFrame for the rows corresponding to the park bench and new slide\n    park_bench_votes = df[df['Gift'] == 'park bench']['Frequency'].values[0]\n    new_slide_votes = df[df['Gift'] == 'new slide']['Frequency'].values[0]\n    \n    # Calculate the difference in the number of votes\n    difference = new_slide_votes - park_bench_votes\n    \n    return difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Gift': ['park bench', 'robotics kit', 'library reading nook', 'new slide'],\n    'Frequency': [13, 15, 27, 41]\n})\n# Call the tool to solve the problem\nprint(calculate_difference(df))","table":"Name: Votes for class gift\nUnit: more students\nContent:\nGift | Frequency\npark bench | 13\nrobotics kit | 15\nlibrary reading nook | 27\nnew slide | 41"}
{"level":7,"answer":14.0,"prediction":"import pandas as pd\n\ndef count_children_with_more_than_3_puppets(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of finger puppets made by children and returns the number of children who made more than 3 finger puppets.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of finger puppets made by children.\n    The dataframe should contain \"Finger puppets made\" and \"Frequency\" columns.\n    Returns:\n    int: The number of children who made more than 3 finger puppets.\n    \"\"\"\n    # Filter the DataFrame for children who made more than 3 finger puppets\n    filtered_df = df[df['Finger puppets made'] > 3]\n    \n    # Count the number of rows\n    num_children = len(filtered_df)\n    \n    return num_children\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Finger puppets made': [0, 1, 2, 3, 4, 5],\n    'Frequency': [12, 16, 10, 19, 11, 3]\n})\n# Call the tool to solve the problem\nprint(count_children_with_more_than_3_puppets(df))","question":"The Kingwood Art Museum recorded how many finger puppets the children made at last Sunday's art workshop. How many children made more than 3 finger puppets?","prediction_code":"import pandas as pd\n\ndef count_children_with_more_than_3_puppets(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of finger puppets made by children and returns the number of children who made more than 3 finger puppets.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of finger puppets made by children.\n    The dataframe should contain \"Finger puppets made\" and \"Frequency\" columns.\n    Returns:\n    int: The number of children who made more than 3 finger puppets.\n    \"\"\"\n    # Filter the DataFrame for children who made more than 3 finger puppets\n    filtered_df = df[df['Finger puppets made'] > 3]\n    \n    # Count the number of rows\n    num_children = len(filtered_df)\n    \n    return num_children","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Finger puppets made': [0, 1, 2, 3, 4, 5],\n    'Frequency': [12, 16, 10, 19, 11, 3]\n})\n# Call the tool to solve the problem\nprint(count_children_with_more_than_3_puppets(df))","table":"Name: Making finger puppets\nUnit: None\nContent:\nFinger puppets made | Frequency\n0 | 12\n1 | 16\n2 | 10\n3 | 19\n4 | 11\n5 | 3"}
{"level":7,"answer":-3.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of winning relay times and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the winning relay times with columns 'Year' and 'Winning time (minutes)'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_time = df[df['Year'] == start_year]['Winning time (minutes)'].values[0]\n    end_time = df[df['Year'] == end_year]['Winning time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_time - start_time) \/ (end_year - start_year)\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2007, 2008, 2009, 2010, 2011],\n    'Winning time (minutes)': [25, 22, 31, 27, 22]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2007, 2008))","question":"Every year Newport has a citywide relay and reports the winning times. According to the table, what was the rate of change between 2007 and 2008?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of winning relay times and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the winning relay times with columns 'Year' and 'Winning time (minutes)'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_time = df[df['Year'] == start_year]['Winning time (minutes)'].values[0]\n    end_time = df[df['Year'] == end_year]['Winning time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_time - start_time) \/ (end_year - start_year)\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2007, 2008, 2009, 2010, 2011],\n    'Winning time (minutes)': [25, 22, 31, 27, 22]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2007, 2008))","table":"Name: Winning relay times\nUnit: minutes per year\nContent:\nYear | Winning time (minutes)\n2007 | 25\n2008 | 22\n2009 | 31\n2010 | 27\n2011 | 22"}
{"level":8,"answer":20.0,"prediction":"import pandas as pd\n\ndef count_guests_with_3_times_sledding(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of sledding frequency and returns the number of guests who went sledding exactly 3 times last winter.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of times guests went sledding and their corresponding frequencies.\n    The dataframe should contain \"Number of times\" and \"Frequency\" columns.\n    Returns:\n    int: The number of guests who went sledding exactly 3 times last winter.\n    \"\"\"\n    # Filter the DataFrame for the row where the number of times is 3\n    guests_with_3_times = df[df['Number of times'] == 3]\n    \n    # Get the frequency of guests with 3 times sledding\n    num_guests = guests_with_3_times['Frequency'].values[0]\n    \n    return num_guests\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of times': [0, 1, 2, 3, 4, 5, 6],\n    'Frequency': [0, 15, 19, 20, 1, 17, 14]\n})\n# Call the tool to solve the problem\nprint(count_guests_with_3_times_sledding(df))","question":"The Hillsdale Ski Resort asked its guests how many times they went sledding last winter. How many guests went sledding exactly 3 times last winter?","prediction_code":"import pandas as pd\n\ndef count_guests_with_3_times_sledding(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of sledding frequency and returns the number of guests who went sledding exactly 3 times last winter.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of times guests went sledding and their corresponding frequencies.\n    The dataframe should contain \"Number of times\" and \"Frequency\" columns.\n    Returns:\n    int: The number of guests who went sledding exactly 3 times last winter.\n    \"\"\"\n    # Filter the DataFrame for the row where the number of times is 3\n    guests_with_3_times = df[df['Number of times'] == 3]\n    \n    # Get the frequency of guests with 3 times sledding\n    num_guests = guests_with_3_times['Frequency'].values[0]\n    \n    return num_guests","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of times': [0, 1, 2, 3, 4, 5, 6],\n    'Frequency': [0, 15, 19, 20, 1, 17, 14]\n})\n# Call the tool to solve the problem\nprint(count_guests_with_3_times_sledding(df))","table":"Name: Sledding last winter\nUnit: None\nContent:\nNumber of times | Frequency\n0 | 0\n1 | 15\n2 | 19\n3 | 20\n4 | 1\n5 | 17\n6 | 14"}
{"level":4,"answer":87.0,"prediction":"import pandas as pd\n\ndef find_largest_number_of_cows(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of cows per farm and returns the largest number of cows.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of cows per farm.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of cows.\n    \"\"\"\n    # prepare a list to store the number of cows in each farm\n    cows = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the total number of cows in each farm\n        total_cows = stem * 10 + len(leaf)\n        cows.append(total_cows)\n    # find the largest number of cows\n    largest_cows = max(cows)\n    return largest_cows\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[0, 6], [2], [1, 5, 8, 8], [0, 1, 5, 7, 8], [2, 7, 9, 9], [3, 5], [], [7]]\n})\n# Call the tool to solve the problem\nprint(find_largest_number_of_cows(df))","question":"A researcher recorded the number of cows on each farm in the county. What is the largest number of cows?","prediction_code":"import pandas as pd\n\ndef find_largest_number_of_cows(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of cows per farm and returns the largest number of cows.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of cows per farm.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of cows.\n    \"\"\"\n    # prepare a list to store the number of cows in each farm\n    cows = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the total number of cows in each farm\n        total_cows = stem * 10 + len(leaf)\n        cows.append(total_cows)\n    # find the largest number of cows\n    largest_cows = max(cows)\n    return largest_cows","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[0, 6], [2], [1, 5, 8, 8], [0, 1, 5, 7, 8], [2, 7, 9, 9], [3, 5], [], [7]]\n})\n# Call the tool to solve the problem\nprint(find_largest_number_of_cows(df))","table":"Name: Cows per farm\nUnit: cows\nContent:\nStem | Leaf \n1 | 0, 6\n2 | 2\n3 | 1, 5, 8, 8\n4 | 0, 1, 5, 7, 8\n5 | 2, 7, 9, 9\n6 | 3, 5\n7 | \n8 | 7"}
{"level":8,"answer":8.0,"prediction":"import pandas as pd\n\ndef count_members_more_than_3_trips(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trips to the zoo last year and returns the number of members who went to the zoo more than 3 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of trips to the zoo and their frequencies.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of members who went to the zoo more than 3 times.\n    \"\"\"\n    # Filter the DataFrame for trips more than 3 times\n    filtered_df = df[df['Number of trips'] > 3]\n    \n    # Sum the frequencies of the filtered trips\n    num_members = filtered_df['Frequency'].sum()\n    \n    return num_members\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [0, 1, 2, 3, 4, 5],\n    'Frequency': [13, 4, 16, 0, 3, 5]\n})\n# Call the tool to solve the problem\nprint(count_members_more_than_3_trips(df))","question":"The members of the science club shared how many times they had been to the zoo last year. How many members went to the zoo more than 3 times?","prediction_code":"import pandas as pd\n\ndef count_members_more_than_3_trips(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trips to the zoo last year and returns the number of members who went to the zoo more than 3 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of trips to the zoo and their frequencies.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of members who went to the zoo more than 3 times.\n    \"\"\"\n    # Filter the DataFrame for trips more than 3 times\n    filtered_df = df[df['Number of trips'] > 3]\n    \n    # Sum the frequencies of the filtered trips\n    num_members = filtered_df['Frequency'].sum()\n    \n    return num_members","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [0, 1, 2, 3, 4, 5],\n    'Frequency': [13, 4, 16, 0, 3, 5]\n})\n# Call the tool to solve the problem\nprint(count_members_more_than_3_trips(df))","table":"Name: Trips to the zoo last year\nUnit: None\nContent:\nNumber of trips | Frequency\n0 | 13\n1 | 4\n2 | 16\n3 | 0\n4 | 3\n5 | 5"}
{"level":7,"answer":19.12,"prediction":"import pandas as pd\n\ndef calculate_total_cost(menu_df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table, an item name, and a quantity, and returns the total cost of the specified item and quantity using pandas.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (int): The quantity of the item.\n    Returns:\n    float: The total cost of the specified item and quantity.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = menu_df[menu_df['Item'] == item]\n    \n    # Check if the item exists in the menu\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = quantity * item_price\n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['glass of lemonade', 'turkey sandwich', 'slice of chocolate cake', 'cup of milk', 'slice of peach pie'],\n    'Price': [1.19, 5.61, 2.39, 1.48, 3.56]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'slice of chocolate cake', 8))","question":"How much money does Sadie need to buy 8 slices of chocolate cake?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(menu_df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table, an item name, and a quantity, and returns the total cost of the specified item and quantity using pandas.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (int): The quantity of the item.\n    Returns:\n    float: The total cost of the specified item and quantity.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = menu_df[menu_df['Item'] == item]\n    \n    # Check if the item exists in the menu\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = quantity * item_price\n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['glass of lemonade', 'turkey sandwich', 'slice of chocolate cake', 'cup of milk', 'slice of peach pie'],\n    'Price': [1.19, 5.61, 2.39, 1.48, 3.56]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'slice of chocolate cake', 8))","table":"Name: None\nUnit: $\nContent:\nglass of lemonade | $1.19\nturkey sandwich | $5.61\nslice of chocolate cake | $2.39\ncup of milk | $1.48\nslice of peach pie | $3.56"}
{"level":6,"answer":8.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of daily snowfall and returns the median of the snowfall values.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the daily snowfall values.\n    The DataFrame should have columns 'Day' and 'Snowfall (inches)'.\n    Returns:\n    float: The median of the snowfall values.\n    \"\"\"\n    # Get the snowfall values from the DataFrame\n    snowfall_values = df['Snowfall (inches)'].values\n    \n    # Calculate the median using pandas\n    median = pd.Series(snowfall_values).median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Snowfall (inches)': [6, 4, 2, 9, 8, 9, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"Kate graphed the amount of snow that fell in the last 7 days. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of daily snowfall and returns the median of the snowfall values.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the daily snowfall values.\n    The DataFrame should have columns 'Day' and 'Snowfall (inches)'.\n    Returns:\n    float: The median of the snowfall values.\n    \"\"\"\n    # Get the snowfall values from the DataFrame\n    snowfall_values = df['Snowfall (inches)'].values\n    \n    # Calculate the median using pandas\n    median = pd.Series(snowfall_values).median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Snowfall (inches)': [6, 4, 2, 9, 8, 9, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Daily snowfall\nUnit: None\nContent:\nDay | Snowfall (inches)\nFriday | 6\nSaturday | 4\nSunday | 2\nMonday | 9\nTuesday | 8\nWednesday | 9\nThursday | 8"}
{"level":8,"answer":8.0,"prediction":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of cherries sold and returns the mean of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of kilograms of cherries sold.\n    The dataframe should contain \"Day\" and \"Kilograms\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Kilograms\" column\n    mean = df['Kilograms'].mean()\n    \n    return mean\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Kilograms': [8, 10, 7, 5, 10]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","question":"A farmer wrote down how many kilograms of cherries were sold in the past 5 days. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of cherries sold and returns the mean of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of kilograms of cherries sold.\n    The dataframe should contain \"Day\" and \"Kilograms\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Kilograms\" column\n    mean = df['Kilograms'].mean()\n    \n    return mean","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Kilograms': [8, 10, 7, 5, 10]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","table":"Name: Cherries sold\nUnit: None\nContent:\nDay | Kilograms\nTuesday | 8\nWednesday | 10\nThursday | 7\nFriday | 5\nSaturday | 10"}
{"level":6,"answer":11.0,"prediction":"import pandas as pd\n\ndef count_strings_with_broken_lights(df, min_broken_lights, max_broken_lights):\n    \"\"\"\n    This function takes in a pandas DataFrame of broken lights per string and returns the number of strings that have at least min_broken_lights broken lights but less than max_broken_lights broken lights.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken lights per string.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_broken_lights (int): The minimum number of broken lights required for a string to be counted.\n    max_broken_lights (int): The maximum number of broken lights required for a string to be counted.\n    Returns:\n    int: The number of strings that have at least min_broken_lights broken lights but less than max_broken_lights broken lights.\n    \"\"\"\n    # prepare a list to calculate broken lights in each string\n    broken_lights = []\n    # calculate the total number of broken lights in each string\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            broken_lights.append(stem * 10 + leaf[j])\n    # filter the strings where the total number of broken lights is greater than or equal to min_broken_lights and less than max_broken_lights\n    filtered = [lights for lights in broken_lights if min_broken_lights <= lights < max_broken_lights]\n    # count the number of strings\n    num_strings = len(filtered)\n    return num_strings\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7],\n    'Leaf': [[2, 3, 4, 6, 9], [3, 8, 9], [0, 2, 7, 9], [0, 6, 6, 7], [0, 0, 1, 8, 9], [3, 8]]\n})\n# Call the tool to solve the problem\nprint(count_strings_with_broken_lights(df, 50, 80))","question":"While hanging Christmas lights for neighbors, Evan counted the number of broken lights on each string. How many strings had at least 50 broken lights but less than 80 broken lights?","prediction_code":"import pandas as pd\n\ndef count_strings_with_broken_lights(df, min_broken_lights, max_broken_lights):\n    \"\"\"\n    This function takes in a pandas DataFrame of broken lights per string and returns the number of strings that have at least min_broken_lights broken lights but less than max_broken_lights broken lights.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken lights per string.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_broken_lights (int): The minimum number of broken lights required for a string to be counted.\n    max_broken_lights (int): The maximum number of broken lights required for a string to be counted.\n    Returns:\n    int: The number of strings that have at least min_broken_lights broken lights but less than max_broken_lights broken lights.\n    \"\"\"\n    # prepare a list to calculate broken lights in each string\n    broken_lights = []\n    # calculate the total number of broken lights in each string\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            broken_lights.append(stem * 10 + leaf[j])\n    # filter the strings where the total number of broken lights is greater than or equal to min_broken_lights and less than max_broken_lights\n    filtered = [lights for lights in broken_lights if min_broken_lights <= lights < max_broken_lights]\n    # count the number of strings\n    num_strings = len(filtered)\n    return num_strings","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7],\n    'Leaf': [[2, 3, 4, 6, 9], [3, 8, 9], [0, 2, 7, 9], [0, 6, 6, 7], [0, 0, 1, 8, 9], [3, 8]]\n})\n# Call the tool to solve the problem\nprint(count_strings_with_broken_lights(df, 50, 80))","table":"Name: Broken lights per string\nUnit: strings\nContent:\nStem | Leaf \n2 | 2, 3, 4, 6, 9\n3 | 3, 8, 9\n4 | 0, 2, 7, 9\n5 | 0, 6, 6, 7\n6 | 0, 0, 1, 8, 9\n7 | 3, 8"}
{"level":8,"answer":-3.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of emails received per day and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of emails received per day.\n    The dataframe should contain \"Day\" and \"Emails\" columns.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Get the number of emails for day1 and day2\n    emails_day1 = df[df['Day'] == day1]['Emails'].values[0]\n    emails_day2 = df[df['Day'] == day2]['Emails'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (emails_day2 - emails_day1) \/ emails_day1\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Emails': [3, 7, 10, 10, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Friday', 'Saturday'))","question":"Kayla kept a tally of the number of emails she received each day for a week. According to the table, what was the rate of change between Friday and Saturday?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of emails received per day and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of emails received per day.\n    The dataframe should contain \"Day\" and \"Emails\" columns.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Get the number of emails for day1 and day2\n    emails_day1 = df[df['Day'] == day1]['Emails'].values[0]\n    emails_day2 = df[df['Day'] == day2]['Emails'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (emails_day2 - emails_day1) \/ emails_day1\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Emails': [3, 7, 10, 10, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Friday', 'Saturday'))","table":"Name: Emails Kayla received\nUnit: emails per day\nContent:\nDay | Emails\nTuesday | 3\nWednesday | 7\nThursday | 10\nFriday | 10\nSaturday | 7"}
{"level":7,"answer":48.72,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, purchases):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price list and a dictionary of purchases, and returns the total cost of the purchases using pandas.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price list with columns 'Item' and 'Price'.\n    purchases (dict): A dictionary where the keys are item names and the values are the number of pounds purchased for each item.\n    Returns:\n    float: The total cost of the purchases.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the purchases and calculate the cost for each item\n    for item, quantity in purchases.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['flat washers', 'dock washers', 'star washers', 'square washers', 'fender washers', 'lock washers'],\n    'Price': [5.37, 7.29, 9.06, 7.57, 7.62, 8.91]\n})\n\n# Initialize the purchases dictionary\npurchases = {\n    'flat washers': 5,\n    'dock washers': 3\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, purchases))","question":"Anthony went to the store. He bought 5 pounds of flat washers and 3 pounds of dock washers. How much did he spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, purchases):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price list and a dictionary of purchases, and returns the total cost of the purchases using pandas.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price list with columns 'Item' and 'Price'.\n    purchases (dict): A dictionary where the keys are item names and the values are the number of pounds purchased for each item.\n    Returns:\n    float: The total cost of the purchases.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the purchases and calculate the cost for each item\n    for item, quantity in purchases.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['flat washers', 'dock washers', 'star washers', 'square washers', 'fender washers', 'lock washers'],\n    'Price': [5.37, 7.29, 9.06, 7.57, 7.62, 8.91]\n})\n\n# Initialize the purchases dictionary\npurchases = {\n    'flat washers': 5,\n    'dock washers': 3\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, purchases))","table":"Name: None\nUnit: $\nContent:\nflat washers | $5.37\/pound\ndock washers | $7.29\/pound\nstar washers | $9.06\/pound\nsquare washers | $7.57\/pound\nfender washers | $7.62\/pound\nlock washers | $8.91\/pound"}
{"level":7,"answer":29.0,"prediction":"import pandas as pd\n\ndef count_students_with_fewer_than_3_frames(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of picture frames made by students and returns the number of students who made fewer than 3 frames.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of picture frames made by students.\n    The DataFrame should contain \"Picture frames made\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who made fewer than 3 frames.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of frames made is less than 3\n    filtered_df = df[df['Picture frames made'] < 3]\n    \n    # Calculate the total number of students who made fewer than 3 frames\n    num_students = filtered_df['Frequency'].sum()\n    \n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Picture frames made': [0, 1, 2, 3, 4, 5],\n    'Frequency': [12, 10, 7, 9, 8, 19]\n})\n# Call the tool to solve the problem\nprint(count_students_with_fewer_than_3_frames(df))","question":"The shop teacher, Mr. Ortega, wrote down how many picture frames the students made last week. How many students made fewer than 3 picture frames?","prediction_code":"import pandas as pd\n\ndef count_students_with_fewer_than_3_frames(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of picture frames made by students and returns the number of students who made fewer than 3 frames.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of picture frames made by students.\n    The DataFrame should contain \"Picture frames made\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who made fewer than 3 frames.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of frames made is less than 3\n    filtered_df = df[df['Picture frames made'] < 3]\n    \n    # Calculate the total number of students who made fewer than 3 frames\n    num_students = filtered_df['Frequency'].sum()\n    \n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Picture frames made': [0, 1, 2, 3, 4, 5],\n    'Frequency': [12, 10, 7, 9, 8, 19]\n})\n# Call the tool to solve the problem\nprint(count_students_with_fewer_than_3_frames(df))","table":"Name: Making picture frames\nUnit: None\nContent:\nPicture frames made | Frequency\n0 | 12\n1 | 10\n2 | 7\n3 | 9\n4 | 8\n5 | 19"}
{"level":4,"answer":1.28,"prediction":"import pandas as pd\n\ndef calculate_total_cost(item_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    item_df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_row = item_df[item_df['Item'] == item]\n        if not item_row.empty:\n            item_price = item_row['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['silver glitter pen', 'rubber stamp', 'pencil sharpener', 'yellow highlighter'],\n    'Price': [0.83, 0.42, 0.75, 0.53]\n})\n\n# Call the tool to solve the problem\nitems = ['pencil sharpener', 'yellow highlighter']\nprint(calculate_total_cost(df, items))","question":"How much money does Angie need to buy a pencil sharpener and a yellow highlighter?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(item_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    item_df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_row = item_df[item_df['Item'] == item]\n        if not item_row.empty:\n            item_price = item_row['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['silver glitter pen', 'rubber stamp', 'pencil sharpener', 'yellow highlighter'],\n    'Price': [0.83, 0.42, 0.75, 0.53]\n})\n\n# Call the tool to solve the problem\nitems = ['pencil sharpener', 'yellow highlighter']\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nsilver glitter pen | $0.83\nrubber stamp | $0.42\npencil sharpener | $0.75\nyellow highlighter | $0.53"}
{"level":7,"answer":1.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of the weight of winning dogs at a dog show and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the weight of winning dogs at a dog show with columns 'Year' and 'Weight (kg)'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_weight = df[df['Year'] == start_year]['Weight (kg)'].values[0]\n    end_weight = df[df['Year'] == end_year]['Weight (kg)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_weight - start_weight) \/ (end_year - start_year)\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2006, 2007, 2008, 2009, 2010],\n    'Weight (kg)': [5, 10, 11, 15, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2007, 2008))","question":"A dog show enthusiast recorded the weight of the winning dog at recent dog shows. According to the table, what was the rate of change between 2007 and 2008?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of the weight of winning dogs at a dog show and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the weight of winning dogs at a dog show with columns 'Year' and 'Weight (kg)'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_weight = df[df['Year'] == start_year]['Weight (kg)'].values[0]\n    end_weight = df[df['Year'] == end_year]['Weight (kg)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_weight - start_weight) \/ (end_year - start_year)\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2006, 2007, 2008, 2009, 2010],\n    'Weight (kg)': [5, 10, 11, 15, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2007, 2008))","table":"Name: Weight of winning dog at a dog show\nUnit: kilograms per year\nContent:\nYear | Weight (kg)\n2006 | 5\n2007 | 10\n2008 | 11\n2009 | 15\n2010 | 5"}
{"level":6,"answer":6.6,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of an item based on its weight.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the item names and their prices per pound.\n    item (str): The name of the item.\n    weight (float): The weight of the item in pounds.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * weight\n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['cookie dough ice cream', 'mint ice cream', 'coffee ice cream', 'double chocolate ice cream', 'strawberry ice cream', 'cherry ice cream'],\n    'Price': [3, 5, 6, 5, 3, 5]\n})\n\n# Call the tool to solve the problem\nitem = 'coffee ice cream'\nweight = 1 + 1\/10\ntotal_cost = calculate_total_cost(df, item, weight)\n\n# Print out the answer\nprint(total_cost)","question":"Carly went to the store and bought 1+1\/10 pounds of coffee ice cream. How much did she spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of an item based on its weight.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the item names and their prices per pound.\n    item (str): The name of the item.\n    weight (float): The weight of the item in pounds.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * weight\n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['cookie dough ice cream', 'mint ice cream', 'coffee ice cream', 'double chocolate ice cream', 'strawberry ice cream', 'cherry ice cream'],\n    'Price': [3, 5, 6, 5, 3, 5]\n})\n\n# Call the tool to solve the problem\nitem = 'coffee ice cream'\nweight = 1 + 1\/10\ntotal_cost = calculate_total_cost(df, item, weight)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\ncookie dough ice cream | $3 per pound\nmint ice cream | $5 per pound\ncoffee ice cream | $6 per pound\ndouble chocolate ice cream | $5 per pound\nstrawberry ice cream | $3 per pound\ncherry ice cream | $5 per pound"}
{"level":5,"answer":13.0,"prediction":"import pandas as pd\n\ndef count_ponds_with_fewer_ducks(df, threshold):\n    \"\"\"\n    This function takes in a pandas dataframe of ducks per pond and a threshold, and returns the number of ponds that have fewer than the threshold number of ducks.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of ducks per pond.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    threshold (int): The threshold number of ducks.\n    Returns:\n    int: The number of ponds that have fewer than the threshold number of ducks.\n    \"\"\"\n    # prepare a list to calculate the number of ducks in each pond\n    ducks = []\n    # calculate the total number of ducks in each pond\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            ducks.append(stem * 10 + leaf[j])\n    # filter the ponds where the total number of ducks is less than the threshold\n    filtered = [duck for duck in ducks if duck < threshold]\n    # count the number of rows\n    num_ponds = len(filtered)\n    return num_ponds\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[0, 1, 4, 6], [1, 3, 4, 4, 4], [1, 2, 3, 5], [0, 3, 7], [0, 6], [1, 9, 9], [0, 5]]\n})\n# Set the threshold number of ducks\nthreshold = 50\n# Call the tool to solve the problem\nprint(count_ponds_with_fewer_ducks(df, threshold))","question":"Fernando counted the number of ducks at each pond in the city. How many ponds had fewer than 50 ducks?","prediction_code":"import pandas as pd\n\ndef count_ponds_with_fewer_ducks(df, threshold):\n    \"\"\"\n    This function takes in a pandas dataframe of ducks per pond and a threshold, and returns the number of ponds that have fewer than the threshold number of ducks.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of ducks per pond.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    threshold (int): The threshold number of ducks.\n    Returns:\n    int: The number of ponds that have fewer than the threshold number of ducks.\n    \"\"\"\n    # prepare a list to calculate the number of ducks in each pond\n    ducks = []\n    # calculate the total number of ducks in each pond\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            ducks.append(stem * 10 + leaf[j])\n    # filter the ponds where the total number of ducks is less than the threshold\n    filtered = [duck for duck in ducks if duck < threshold]\n    # count the number of rows\n    num_ponds = len(filtered)\n    return num_ponds","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[0, 1, 4, 6], [1, 3, 4, 4, 4], [1, 2, 3, 5], [0, 3, 7], [0, 6], [1, 9, 9], [0, 5]]\n})\n# Set the threshold number of ducks\nthreshold = 50\n# Call the tool to solve the problem\nprint(count_ponds_with_fewer_ducks(df, threshold))","table":"Name: Ducks per pond\nUnit: ponds\nContent:\nStem | Leaf \n2 | 0, 1, 4, 6\n3 | 1, 3, 4, 4, 4\n4 | 1, 2, 3, 5\n5 | 0, 3, 7\n6 | 0, 6\n7 | 1, 9, 9\n8 | 0, 5"}
{"level":8,"answer":4.74,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price of the item\n        price = item_df['Price'].values[0]\n        \n        # Calculate the total cost\n        total_cost = price * quantity\n        \n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['bran flakes', 'shredded wheat', 'granola', 'puffed wheat'],\n    'Price': [5.96, 4.74, 3.32, 4.46]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'shredded wheat', 1))","question":"Turner buys 1 pound of shredded wheat. What is the total cost?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price of the item\n        price = item_df['Price'].values[0]\n        \n        # Calculate the total cost\n        total_cost = price * quantity\n        \n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['bran flakes', 'shredded wheat', 'granola', 'puffed wheat'],\n    'Price': [5.96, 4.74, 3.32, 4.46]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'shredded wheat', 1))","table":"Name: None\nUnit: $\nContent:\nbran flakes | $5.96 per lb\nshredded wheat | $4.74 per lb\ngranola | $3.32 per lb\npuffed wheat | $4.46 per lb"}
{"level":5,"answer":21.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of class sizes and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the class sizes with columns 'Teacher' and 'Number of students'.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the 'Number of students' column\n    min_students = df['Number of students'].min()\n    max_students = df['Number of students'].max()\n    \n    # Calculate the range\n    range_of_numbers = max_students - min_students\n    \n    return range_of_numbers\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Teacher': ['Mr. Watson', 'Mr. Chen', 'Mrs. Truman', 'Miss Urban', 'Ms. Hershfeld', 'Mrs. King'],\n    'Number of students': [14, 35, 17, 27, 31, 19]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"Some teachers compared how many students are in their classes. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of class sizes and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the class sizes with columns 'Teacher' and 'Number of students'.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the 'Number of students' column\n    min_students = df['Number of students'].min()\n    max_students = df['Number of students'].max()\n    \n    # Calculate the range\n    range_of_numbers = max_students - min_students\n    \n    return range_of_numbers","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Teacher': ['Mr. Watson', 'Mr. Chen', 'Mrs. Truman', 'Miss Urban', 'Ms. Hershfeld', 'Mrs. King'],\n    'Number of students': [14, 35, 17, 27, 31, 19]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Class size\nUnit: None\nContent:\nTeacher | Number of students\nMr. Watson | 14\nMr. Chen | 35\nMrs. Truman | 17\nMiss Urban | 27\nMs. Hershfeld | 31\nMrs. King | 19"}
{"level":8,"answer":-2.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of the weight of winning dogs at a dog show and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the weight of winning dogs at a dog show with columns 'Year' and 'Weight (kg)'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_weight = df[df['Year'] == start_year]['Weight (kg)'].values[0]\n    end_weight = df[df['Year'] == end_year]['Weight (kg)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_weight - start_weight) \/ (end_year - start_year)\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2009, 2010, 2011, 2012, 2013],\n    'Weight (kg)': [25, 24, 32, 30, 38]\n})\n\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2011, 2012))","question":"A dog show enthusiast recorded the weight of the winning dog at recent dog shows. According to the table, what was the rate of change between 2011 and 2012?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of the weight of winning dogs at a dog show and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the weight of winning dogs at a dog show with columns 'Year' and 'Weight (kg)'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_weight = df[df['Year'] == start_year]['Weight (kg)'].values[0]\n    end_weight = df[df['Year'] == end_year]['Weight (kg)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_weight - start_weight) \/ (end_year - start_year)\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2009, 2010, 2011, 2012, 2013],\n    'Weight (kg)': [25, 24, 32, 30, 38]\n})\n\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2011, 2012))","table":"Name: Weight of winning dog at a dog show\nUnit: kilograms per year\nContent:\nYear | Weight (kg)\n2009 | 25\n2010 | 24\n2011 | 32\n2012 | 30\n2013 | 38"}
{"level":5,"answer":64.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of laps ran and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of laps ran.\n    The dataframe should contain \"Day\" and \"Number of laps\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the \"Number of laps\" column from the DataFrame\n    laps = df['Number of laps']\n    \n    # Calculate the median using the median() function from pandas\n    median = laps.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Number of laps': [67, 58, 65, 62, 64, 60, 72]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"Kinsley tracked how many laps she ran in the past 7 days. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of laps ran and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of laps ran.\n    The dataframe should contain \"Day\" and \"Number of laps\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the \"Number of laps\" column from the DataFrame\n    laps = df['Number of laps']\n    \n    # Calculate the median using the median() function from pandas\n    median = laps.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Number of laps': [67, 58, 65, 62, 64, 60, 72]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Laps ran\nUnit: None\nContent:\nDay | Number of laps\nFriday | 67\nSaturday | 58\nSunday | 65\nMonday | 62\nTuesday | 64\nWednesday | 60\nThursday | 72"}
{"level":4,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_toll_difference(df, bridge1, bridge2, vehicle):\n    \"\"\"\n    This function takes in a pandas DataFrame of bridge tolls and returns the difference in tolls for a specific vehicle between two bridges.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge toll information with columns 'Bridge', 'Truck', and 'Car'.\n    bridge1 (str): The name of the first bridge.\n    bridge2 (str): The name of the second bridge.\n    vehicle (str): The type of vehicle ('Truck' or 'Car').\n    Returns:\n    float: The difference in tolls for the specified vehicle between the two bridges.\n    \"\"\"\n    # Filter the DataFrame for the two bridges\n    bridge1_df = df[df['Bridge'] == bridge1]\n    bridge2_df = df[df['Bridge'] == bridge2]\n    \n    # Get the tolls for the specified vehicle for each bridge\n    toll1 = bridge1_df[vehicle].values[0]\n    toll2 = bridge2_df[vehicle].values[0]\n    \n    # Calculate the difference in tolls\n    toll_difference = toll2 - toll1\n    \n    return toll_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['Tacoma Narrows', 'Golden Gate', 'San Mateo', 'Fort Madison'],\n    'Truck': ['$4', '$7', '$6', '$4'],\n    'Car': ['$3', '$6', '$4', '$1']\n})\n\n# Call the tool to solve the problem\ntoll_difference = calculate_toll_difference(df, 'Golden Gate', 'Fort Madison', 'Car')\n\n# Print out the answer\nprint(toll_difference)","question":"A transportation analyst compared various bridges' tolls. How much higher is the toll for a car on the Golden Gate bridge than on the Fort Madison bridge?","prediction_code":"import pandas as pd\n\ndef calculate_toll_difference(df, bridge1, bridge2, vehicle):\n    \"\"\"\n    This function takes in a pandas DataFrame of bridge tolls and returns the difference in tolls for a specific vehicle between two bridges.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge toll information with columns 'Bridge', 'Truck', and 'Car'.\n    bridge1 (str): The name of the first bridge.\n    bridge2 (str): The name of the second bridge.\n    vehicle (str): The type of vehicle ('Truck' or 'Car').\n    Returns:\n    float: The difference in tolls for the specified vehicle between the two bridges.\n    \"\"\"\n    # Filter the DataFrame for the two bridges\n    bridge1_df = df[df['Bridge'] == bridge1]\n    bridge2_df = df[df['Bridge'] == bridge2]\n    \n    # Get the tolls for the specified vehicle for each bridge\n    toll1 = bridge1_df[vehicle].values[0]\n    toll2 = bridge2_df[vehicle].values[0]\n    \n    # Calculate the difference in tolls\n    toll_difference = toll2 - toll1\n    \n    return toll_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['Tacoma Narrows', 'Golden Gate', 'San Mateo', 'Fort Madison'],\n    'Truck': ['$4', '$7', '$6', '$4'],\n    'Car': ['$3', '$6', '$4', '$1']\n})\n\n# Call the tool to solve the problem\ntoll_difference = calculate_toll_difference(df, 'Golden Gate', 'Fort Madison', 'Car')\n\n# Print out the answer\nprint(toll_difference)","table":"Name: Bridge tolls\nUnit: $\nContent:\nBridge | Truck | Car\nTacoma Narrows | $4 | $3\nGolden Gate | $7 | $6\nSan Mateo | $6 | $4\nFort Madison | $4 | $1"}
{"level":5,"answer":2.0,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['pair of shoes', 'pair of tennis shoes', 'pair of boots', 'pair of jeans', 'red sweater'],\n    'Price': [30.00, 41.00, 28.00, 34.00, 28.00]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'pair of shoes', 'red sweater'))","question":"How much more does a pair of shoes cost than a red sweater?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['pair of shoes', 'pair of tennis shoes', 'pair of boots', 'pair of jeans', 'red sweater'],\n    'Price': [30.00, 41.00, 28.00, 34.00, 28.00]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'pair of shoes', 'red sweater'))","table":"Name: None\nUnit: $\nContent:\npair of shoes | $30.00\npair of tennis shoes | $41.00\npair of boots | $28.00\npair of jeans | $34.00\nred sweater | $28.00"}
{"level":1,"answer":8.0,"prediction":"import pandas as pd\n\ndef calculate_sunflowers(df, num_bouquets):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of sunflowers per bouquet and the number of bouquets, and returns the total number of sunflowers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of bouquets and the number of sunflowers per bouquet.\n    The dataframe should contain \"Number of bouquets\" and \"Number of sunflowers\" columns.\n    num_bouquets (int): The number of bouquets.\n    Returns:\n    int: The total number of sunflowers.\n    \"\"\"\n    # Filter the DataFrame for the specific number of bouquets\n    bouquets_df = df[df['Number of bouquets'] == num_bouquets]\n    \n    # Get the number of sunflowers for the specified number of bouquets\n    num_sunflowers = bouquets_df['Number of sunflowers'].values[0]\n    \n    # Calculate the total number of sunflowers\n    total_sunflowers = num_sunflowers * num_bouquets\n    \n    return total_sunflowers\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of bouquets': [1, 2, 3, 4],\n    'Number of sunflowers': [2, 4, 6, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_sunflowers(df, 4))","question":"Each bouquet has 2 sunflowers. How many sunflowers are in 4 bouquets?","prediction_code":"import pandas as pd\n\ndef calculate_sunflowers(df, num_bouquets):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of sunflowers per bouquet and the number of bouquets, and returns the total number of sunflowers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of bouquets and the number of sunflowers per bouquet.\n    The dataframe should contain \"Number of bouquets\" and \"Number of sunflowers\" columns.\n    num_bouquets (int): The number of bouquets.\n    Returns:\n    int: The total number of sunflowers.\n    \"\"\"\n    # Filter the DataFrame for the specific number of bouquets\n    bouquets_df = df[df['Number of bouquets'] == num_bouquets]\n    \n    # Get the number of sunflowers for the specified number of bouquets\n    num_sunflowers = bouquets_df['Number of sunflowers'].values[0]\n    \n    # Calculate the total number of sunflowers\n    total_sunflowers = num_sunflowers * num_bouquets\n    \n    return total_sunflowers","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of bouquets': [1, 2, 3, 4],\n    'Number of sunflowers': [2, 4, 6, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_sunflowers(df, 4))","table":"Name: None\nUnit: sunflowers\nContent:\nNumber of bouquets | Number of sunflowers\n1 | 2\n2 | 4\n3 | 6\n4 | ?"}
{"level":8,"answer":34.35,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item given its price per pound and the desired quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per pound for different items with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The desired quantity of the item in pounds.\n    Returns:\n    float: The total cost of the desired quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price per pound for the item\n        price_per_pound = item_df['Price'].values[0]\n        \n        # Calculate the total cost\n        total_cost = price_per_pound * quantity\n        \n        return total_cost\n    else:\n        return None\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['banana chips', 'raisins', 'dried mango', 'dried pineapple', 'dried apple', 'dried pear'],\n    'Price': [6.95, 5.49, 6.32, 2.22, 6.89, 6.87]\n})\n\n# Call the tool to solve the problem\nitem = 'dried pear'\nquantity = 5\ntotal_cost = calculate_total_cost(df, item, quantity)\n\n# Print out the answer\nprint(total_cost)","question":"Ryan wants to buy 5 pounds of dried pear. How much will he spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item given its price per pound and the desired quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per pound for different items with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The desired quantity of the item in pounds.\n    Returns:\n    float: The total cost of the desired quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price per pound for the item\n        price_per_pound = item_df['Price'].values[0]\n        \n        # Calculate the total cost\n        total_cost = price_per_pound * quantity\n        \n        return total_cost\n    else:\n        return None","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['banana chips', 'raisins', 'dried mango', 'dried pineapple', 'dried apple', 'dried pear'],\n    'Price': [6.95, 5.49, 6.32, 2.22, 6.89, 6.87]\n})\n\n# Call the tool to solve the problem\nitem = 'dried pear'\nquantity = 5\ntotal_cost = calculate_total_cost(df, item, quantity)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\nbanana chips | $6.95\/pound\nraisins | $5.49\/pound\ndried mango | $6.32\/pound\ndried pineapple | $2.22\/pound\ndried apple | $6.89\/pound\ndried pear | $6.87\/pound"}
{"level":1,"answer":15.0,"prediction":"import pandas as pd\n\ndef calculate_total_stickers(df, num_sheets):\n    \"\"\"\n    This function takes in a pandas DataFrame of stickers per sheet and the number of sheets, and returns the total number of stickers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of stickers per sheet.\n    The dataframe should contain \"Number of sheets\" and \"Number of stickers\" columns.\n    num_sheets (int): The number of sheets.\n    Returns:\n    int: The total number of stickers.\n    \"\"\"\n    # Filter the DataFrame for the specific number of sheets\n    sheet_df = df[df['Number of sheets'] == num_sheets]\n    \n    # Get the number of stickers for the specific number of sheets\n    num_stickers = sheet_df['Number of stickers'].values[0]\n    \n    return num_stickers\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of sheets': [1, 2, 3],\n    'Number of stickers': [5, 10, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_stickers(df, 3))","question":"Each sheet has 5 stickers. How many stickers are on 3 sheets?","prediction_code":"import pandas as pd\n\ndef calculate_total_stickers(df, num_sheets):\n    \"\"\"\n    This function takes in a pandas DataFrame of stickers per sheet and the number of sheets, and returns the total number of stickers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of stickers per sheet.\n    The dataframe should contain \"Number of sheets\" and \"Number of stickers\" columns.\n    num_sheets (int): The number of sheets.\n    Returns:\n    int: The total number of stickers.\n    \"\"\"\n    # Filter the DataFrame for the specific number of sheets\n    sheet_df = df[df['Number of sheets'] == num_sheets]\n    \n    # Get the number of stickers for the specific number of sheets\n    num_stickers = sheet_df['Number of stickers'].values[0]\n    \n    return num_stickers","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of sheets': [1, 2, 3],\n    'Number of stickers': [5, 10, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_stickers(df, 3))","table":"Name: None\nUnit: stickers\nContent:\nNumber of sheets | Number of stickers\n1 | 5\n2 | 10\n3 | ?"}
{"level":7,"answer":18.0,"prediction":"import pandas as pd\n\ndef count_students_with_more_than_one_frame(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of picture frames made by students and returns the number of students who made more than one picture frame.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of picture frames made by students.\n    The DataFrame should contain \"Picture frames made\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who made more than one picture frame.\n    \"\"\"\n    # Filter the DataFrame for students who made more than one picture frame\n    filtered_df = df[df['Picture frames made'] > 1]\n    \n    # Count the number of rows in the filtered DataFrame\n    num_students = len(filtered_df)\n    \n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Picture frames made': [0, 1, 2, 3],\n    'Frequency': [0, 2, 11, 7]\n})\n# Call the tool to solve the problem\nprint(count_students_with_more_than_one_frame(df))","question":"The shop teacher, Mr. Suzuki, wrote down how many picture frames the students made last week. How many students made more than 1 picture frame?","prediction_code":"import pandas as pd\n\ndef count_students_with_more_than_one_frame(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of picture frames made by students and returns the number of students who made more than one picture frame.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of picture frames made by students.\n    The DataFrame should contain \"Picture frames made\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who made more than one picture frame.\n    \"\"\"\n    # Filter the DataFrame for students who made more than one picture frame\n    filtered_df = df[df['Picture frames made'] > 1]\n    \n    # Count the number of rows in the filtered DataFrame\n    num_students = len(filtered_df)\n    \n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Picture frames made': [0, 1, 2, 3],\n    'Frequency': [0, 2, 11, 7]\n})\n# Call the tool to solve the problem\nprint(count_students_with_more_than_one_frame(df))","table":"Name: Making picture frames\nUnit: None\nContent:\nPicture frames made | Frequency\n0 | 0\n1 | 2\n2 | 11\n3 | 7"}
{"level":7,"answer":2.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of dog show data and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the dog show data with columns 'Year' and 'Weight (kg)'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_weight = df[df['Year'] == start_year]['Weight (kg)'].values[0]\n    end_weight = df[df['Year'] == end_year]['Weight (kg)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_weight - start_weight) \/ (end_year - start_year)\n    \n    return rate_of_change\n########################################\n# Initialize the table into a DataFrame\ndf = pd.DataFrame({\n    'Year': [2010, 2011, 2012, 2013, 2014],\n    'Weight (kg)': [39, 19, 14, 40, 42]\n})\n\n# Call the tool to solve the problem\nrate_of_change = calculate_rate_of_change(df, 2013, 2014)\n\n# Print out the answer\nprint(rate_of_change)","question":"A dog show enthusiast recorded the weight of the winning dog at recent dog shows. According to the table, what was the rate of change between 2013 and 2014?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of dog show data and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the dog show data with columns 'Year' and 'Weight (kg)'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_weight = df[df['Year'] == start_year]['Weight (kg)'].values[0]\n    end_weight = df[df['Year'] == end_year]['Weight (kg)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_weight - start_weight) \/ (end_year - start_year)\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a DataFrame\ndf = pd.DataFrame({\n    'Year': [2010, 2011, 2012, 2013, 2014],\n    'Weight (kg)': [39, 19, 14, 40, 42]\n})\n\n# Call the tool to solve the problem\nrate_of_change = calculate_rate_of_change(df, 2013, 2014)\n\n# Print out the answer\nprint(rate_of_change)","table":"Name: Weight of winning dog at a dog show\nUnit: kilograms per year\nContent:\nYear | Weight (kg)\n2010 | 39\n2011 | 19\n2012 | 14\n2013 | 40\n2014 | 42"}
{"level":4,"answer":2.0,"prediction":"import pandas as pd\n\ndef count_pizzas_with_48_pepperoni(df):\n    \"\"\"\n    This function takes in a pandas dataframe of pieces of pepperoni per pizza, and returns the number of pizzas that have exactly 48 pieces of pepperoni.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pieces of pepperoni per pizza.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of pizzas that have exactly 48 pieces of pepperoni.\n    \"\"\"\n    # Initialize the count of pizzas with 48 pieces of pepperoni\n    count = 0\n    \n    # Iterate through the rows of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Calculate the total number of pieces of pepperoni for each pizza\n        total_pepperoni = stem * 10 + sum(leaf)\n        \n        # Check if the total number of pieces of pepperoni is exactly 48\n        if total_pepperoni == 48:\n            count += 1\n    \n    return count\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[1, 4], [7], [], [5, 8, 8]]\n})\n# Call the tool to solve the problem\nprint(count_pizzas_with_48_pepperoni(df))","question":"Finn counted the number of pieces of pepperoni on each pizza he made. How many pizzas had exactly 48 pieces of pepperoni?","prediction_code":"import pandas as pd\n\ndef count_pizzas_with_48_pepperoni(df):\n    \"\"\"\n    This function takes in a pandas dataframe of pieces of pepperoni per pizza, and returns the number of pizzas that have exactly 48 pieces of pepperoni.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pieces of pepperoni per pizza.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of pizzas that have exactly 48 pieces of pepperoni.\n    \"\"\"\n    # Initialize the count of pizzas with 48 pieces of pepperoni\n    count = 0\n    \n    # Iterate through the rows of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Calculate the total number of pieces of pepperoni for each pizza\n        total_pepperoni = stem * 10 + sum(leaf)\n        \n        # Check if the total number of pieces of pepperoni is exactly 48\n        if total_pepperoni == 48:\n            count += 1\n    \n    return count","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[1, 4], [7], [], [5, 8, 8]]\n})\n# Call the tool to solve the problem\nprint(count_pizzas_with_48_pepperoni(df))","table":"Name: Pieces of pepperoni per pizza\nUnit: None\nContent:\nStem | Leaf \n1 | 1, 4\n2 | 7\n3 | \n4 | 5, 8, 8"}
{"level":8,"answer":9.0,"prediction":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of tractors made each month and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of tractors made each month.\n    The dataframe should contain \"Month\" and \"Number of tractors\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Number of tractors\" column\n    mean = df['Number of tractors'].mean()\n    \n    return mean\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['December', 'January', 'February', 'March', 'April'],\n    'Number of tractors': [10, 9, 9, 8, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","question":"A farm equipment company kept a record of the number of tractors made each month. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of tractors made each month and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of tractors made each month.\n    The dataframe should contain \"Month\" and \"Number of tractors\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Number of tractors\" column\n    mean = df['Number of tractors'].mean()\n    \n    return mean","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['December', 'January', 'February', 'March', 'April'],\n    'Number of tractors': [10, 9, 9, 8, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","table":"Name: Tractors made\nUnit: None\nContent:\nMonth | Number of tractors\nDecember | 10\nJanuary | 9\nFebruary | 9\nMarch | 8\nApril | 9"}
{"level":5,"answer":36.0,"prediction":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of autographs signed and returns the mean of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of autographs signed each day.\n    The dataframe should contain \"Day\" and \"Number of autographs\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Number of autographs\" column\n    mean = df['Number of autographs'].mean()\n    \n    return mean\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Number of autographs': [36, 30, 42, 42, 32, 29, 41]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","question":"An athlete counted how many autographs he signed each day. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of autographs signed and returns the mean of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of autographs signed each day.\n    The dataframe should contain \"Day\" and \"Number of autographs\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Number of autographs\" column\n    mean = df['Number of autographs'].mean()\n    \n    return mean","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Number of autographs': [36, 30, 42, 42, 32, 29, 41]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","table":"Name: Autographs signed\nUnit: None\nContent:\nDay | Number of autographs\nSaturday | 36\nSunday | 30\nMonday | 42\nTuesday | 42\nWednesday | 32\nThursday | 29\nFriday | 41"}
{"level":8,"answer":2.0,"prediction":"import pandas as pd\n\ndef count_flocks_with_23_birds(df):\n    \"\"\"\n    This function takes in a pandas dataframe of birds per flock, and returns the number of flocks that have exactly 23 birds.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of birds per flock.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of flocks that have exactly 23 birds.\n    \"\"\"\n    # prepare a list to calculate the number of birds in each flock\n    birds = []\n    # calculate the total number of birds in each flock\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            birds.append(stem * 10 + leaf[j])\n    # filter the flocks where the total number of birds is equal to 23\n    filtered = [bird for bird in birds if bird == 23]\n    # count the number of flocks\n    num_flocks = len(filtered)\n    return num_flocks\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7],\n    'Leaf': [[3, 3, 7], [], [4], [4], [], [3]]\n})\n# Call the tool to solve the problem\nprint(count_flocks_with_23_birds(df))","question":"The bird watcher counted the number of birds in each flock that passed overhead. How many flocks had exactly 23 birds?","prediction_code":"import pandas as pd\n\ndef count_flocks_with_23_birds(df):\n    \"\"\"\n    This function takes in a pandas dataframe of birds per flock, and returns the number of flocks that have exactly 23 birds.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of birds per flock.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of flocks that have exactly 23 birds.\n    \"\"\"\n    # prepare a list to calculate the number of birds in each flock\n    birds = []\n    # calculate the total number of birds in each flock\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            birds.append(stem * 10 + leaf[j])\n    # filter the flocks where the total number of birds is equal to 23\n    filtered = [bird for bird in birds if bird == 23]\n    # count the number of flocks\n    num_flocks = len(filtered)\n    return num_flocks","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7],\n    'Leaf': [[3, 3, 7], [], [4], [4], [], [3]]\n})\n# Call the tool to solve the problem\nprint(count_flocks_with_23_birds(df))","table":"Name: Birds per flock\nUnit: flocks\nContent:\nStem | Leaf \n2 | 3, 3, 7\n3 | \n4 | 4\n5 | 4\n6 | \n7 | 3"}
{"level":8,"answer":0.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of shell counts per day and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the shell counts per day.\n    The dataframe should contain \"Day\" and \"Number of shells\" columns.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Get the shell counts for the two days\n    shells_day1 = df[df['Day'] == day1]['Number of shells'].values[0]\n    shells_day2 = df[df['Day'] == day2]['Number of shells'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (shells_day2 - shells_day1) \/ shells_day1\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Number of shells': [5, 8, 5, 4, 4]\n})\n\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Wednesday', 'Thursday'))","question":"Lexi spent a week at the beach and recorded the number of shells she found each day. According to the table, what was the rate of change between Wednesday and Thursday?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of shell counts per day and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the shell counts per day.\n    The dataframe should contain \"Day\" and \"Number of shells\" columns.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Get the shell counts for the two days\n    shells_day1 = df[df['Day'] == day1]['Number of shells'].values[0]\n    shells_day2 = df[df['Day'] == day2]['Number of shells'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (shells_day2 - shells_day1) \/ shells_day1\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Number of shells': [5, 8, 5, 4, 4]\n})\n\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Wednesday', 'Thursday'))","table":"Name: Shells Lexi found\nUnit: shells per day\nContent:\nDay | Number of shells\nSunday | 5\nMonday | 8\nTuesday | 5\nWednesday | 4\nThursday | 4"}
{"level":8,"answer":7.0,"prediction":"import pandas as pd\n\ndef find_fewest_score(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of scores on a quiz show and returns the score that the fewest people received.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the scores and their frequencies.\n    The DataFrame should have \"Score\" and \"Frequency\" columns.\n    Returns:\n    int: The score that the fewest people received.\n    \"\"\"\n    # Find the index of the row with the minimum frequency\n    min_freq_index = df['Frequency'].idxmin()\n    \n    # Get the score corresponding to the minimum frequency\n    fewest_score = df.loc[min_freq_index, 'Score']\n    \n    return fewest_score\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Score': [5, 6, 7, 8, 9, 10],\n    'Frequency': [2, 7, 1, 5, 8, 19]\n})\n# Call the tool to solve the problem\nprint(find_fewest_score(df))","question":"A game show program recorded the scores of its contestants. Which score did the fewest people receive?","prediction_code":"import pandas as pd\n\ndef find_fewest_score(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of scores on a quiz show and returns the score that the fewest people received.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the scores and their frequencies.\n    The DataFrame should have \"Score\" and \"Frequency\" columns.\n    Returns:\n    int: The score that the fewest people received.\n    \"\"\"\n    # Find the index of the row with the minimum frequency\n    min_freq_index = df['Frequency'].idxmin()\n    \n    # Get the score corresponding to the minimum frequency\n    fewest_score = df.loc[min_freq_index, 'Score']\n    \n    return fewest_score","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Score': [5, 6, 7, 8, 9, 10],\n    'Frequency': [2, 7, 1, 5, 8, 19]\n})\n# Call the tool to solve the problem\nprint(find_fewest_score(df))","table":"Name: Scores on a quiz show\nUnit: None\nContent:\nScore | Frequency\n5 | 2\n6 | 7\n7 | 1\n8 | 5\n9 | 8\n10 | 19"}
{"level":5,"answer":2.0,"prediction":"import pandas as pd\n\ndef count_people_with_age(df, age):\n    \"\"\"\n    This function takes in a pandas dataframe of ages and returns the number of people who are exactly a certain age.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the ages of people.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    age (int): The age to count.\n    Returns:\n    int: The number of people who are exactly the specified age.\n    \"\"\"\n    # prepare a list to store ages\n    ages = []\n    # iterate through the dataframe and extract ages\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            ages.append(stem * 10 + leaf[j])\n    # count the number of people with the specified age\n    num_people = ages.count(age)\n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[6], [4, 4], [], [0, 3, 7], [], [1, 4], [], [2], [0]]\n})\n# Call the tool to solve the problem\nprint(count_people_with_age(df, 24))","question":"At their family reunion, the Arnold family recorded everyone's age. How many people are exactly 24 years old?","prediction_code":"import pandas as pd\n\ndef count_people_with_age(df, age):\n    \"\"\"\n    This function takes in a pandas dataframe of ages and returns the number of people who are exactly a certain age.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the ages of people.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    age (int): The age to count.\n    Returns:\n    int: The number of people who are exactly the specified age.\n    \"\"\"\n    # prepare a list to store ages\n    ages = []\n    # iterate through the dataframe and extract ages\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            ages.append(stem * 10 + leaf[j])\n    # count the number of people with the specified age\n    num_people = ages.count(age)\n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[6], [4, 4], [], [0, 3, 7], [], [1, 4], [], [2], [0]]\n})\n# Call the tool to solve the problem\nprint(count_people_with_age(df, 24))","table":"Name: Ages\nUnit: people\nContent:\nStem | Leaf \n1 | 6\n2 | 4, 4\n3 | \n4 | 0, 3, 7\n5 | \n6 | 1, 4\n7 | \n8 | 2\n9 | 0"}
{"level":8,"answer":6.31,"prediction":"import pandas as pd\n\ndef calculate_total_cost(menu_df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the menu items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = menu_df[menu_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['can of tuna fish', 'can of corn', 'jar of olives', 'can of soup', 'can of mushrooms'],\n    'Price': [0.55, 0.51, 0.52, 0.89, 0.49]\n})\n\n# Initialize the orders dictionary\norders = {\n    'jar of olives': 7,\n    'can of soup': 3\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","question":"How much money does Ariana need to buy 7 jars of olives and 3 cans of soup?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(menu_df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the menu items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = menu_df[menu_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['can of tuna fish', 'can of corn', 'jar of olives', 'can of soup', 'can of mushrooms'],\n    'Price': [0.55, 0.51, 0.52, 0.89, 0.49]\n})\n\n# Initialize the orders dictionary\norders = {\n    'jar of olives': 7,\n    'can of soup': 3\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","table":"Name: None\nUnit: $\nContent:\ncan of tuna fish | $0.55\ncan of corn | $0.51\njar of olives | $0.52\ncan of soup | $0.89\ncan of mushrooms | $0.49"}
{"level":5,"answer":9.0,"prediction":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of soccer fields per park and returns the mode of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of soccer fields per park.\n    The dataframe should contain \"Park\" and \"Number of soccer fields\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the \"Number of soccer fields\" column\n    soccer_fields = df['Number of soccer fields']\n    \n    # Calculate the mode using the value_counts() function\n    mode = soccer_fields.value_counts().idxmax()\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Park': ['Canyon Park', 'Middle Park', 'Lighthouse Park', 'Crane Park', 'Elmhurst Park', 'Moon Park', 'Madison Park'],\n    'Number of soccer fields': [4, 9, 8, 8, 9, 4, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"The parks department compared how many soccer fields there are at each park. What is the mode of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of soccer fields per park and returns the mode of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of soccer fields per park.\n    The dataframe should contain \"Park\" and \"Number of soccer fields\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the \"Number of soccer fields\" column\n    soccer_fields = df['Number of soccer fields']\n    \n    # Calculate the mode using the value_counts() function\n    mode = soccer_fields.value_counts().idxmax()\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Park': ['Canyon Park', 'Middle Park', 'Lighthouse Park', 'Crane Park', 'Elmhurst Park', 'Moon Park', 'Madison Park'],\n    'Number of soccer fields': [4, 9, 8, 8, 9, 4, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Soccer fields\nUnit: None\nContent:\nPark | Number of soccer fields\nCanyon Park | 4\nMiddle Park | 9\nLighthouse Park | 8\nCrane Park | 8\nElmhurst Park | 9\nMoon Park | 4\nMadison Park | 9"}
{"level":2,"answer":40.0,"prediction":"import pandas as pd\n\ndef calculate_total_ice_cubes(df, num_glasses):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of ice cubes per glass and the number of glasses, and returns the total number of ice cubes.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of ice cubes per glass with columns 'Number of glasses' and 'Number of ice cubes'.\n    num_glasses (int): The number of glasses.\n    Returns:\n    int: The total number of ice cubes.\n    \"\"\"\n    # Filter the DataFrame for the specific number of glasses\n    glasses_df = df[df['Number of glasses'] == num_glasses]\n    \n    # Get the number of ice cubes for the specified number of glasses\n    num_ice_cubes = glasses_df['Number of ice cubes'].values[0]\n    \n    # Calculate the total number of ice cubes\n    total_ice_cubes = num_ice_cubes * num_glasses\n    \n    return total_ice_cubes\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of glasses': [1, 2, 3, 4],\n    'Number of ice cubes': [10, 20, 30, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_ice_cubes(df, 4))","question":"Each glass has 10 ice cubes. How many ice cubes are in 4 glasses?","prediction_code":"import pandas as pd\n\ndef calculate_total_ice_cubes(df, num_glasses):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of ice cubes per glass and the number of glasses, and returns the total number of ice cubes.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of ice cubes per glass with columns 'Number of glasses' and 'Number of ice cubes'.\n    num_glasses (int): The number of glasses.\n    Returns:\n    int: The total number of ice cubes.\n    \"\"\"\n    # Filter the DataFrame for the specific number of glasses\n    glasses_df = df[df['Number of glasses'] == num_glasses]\n    \n    # Get the number of ice cubes for the specified number of glasses\n    num_ice_cubes = glasses_df['Number of ice cubes'].values[0]\n    \n    # Calculate the total number of ice cubes\n    total_ice_cubes = num_ice_cubes * num_glasses\n    \n    return total_ice_cubes","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of glasses': [1, 2, 3, 4],\n    'Number of ice cubes': [10, 20, 30, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_ice_cubes(df, 4))","table":"Name: None\nUnit: None\nContent:\nNumber of glasses | Number of ice cubes\n1 | 10\n2 | 20\n3 | 30\n4 | ?"}
{"level":5,"answer":318.85,"prediction":"import pandas as pd\n\ndef calculate_available_funds(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing Zeke's financial record for January and returns the available funds after each transaction.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the financial record with columns 'Date', 'Description', 'Received', 'Expenses', and 'Available Funds'.\n    Returns:\n    float: The available funds after Zeke went bowling.\n    \"\"\"\n    # Filter the DataFrame for the row where the description is 'bowling'\n    bowling_row = df[df['Description'] == 'bowling']\n    \n    # Get the expenses for bowling\n    bowling_expenses = bowling_row['Expenses'].values[0]\n    \n    # Get the available funds after bowling\n    available_funds = bowling_row['Available Funds'].values[0] + bowling_expenses\n    \n    return available_funds\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Date': [' ', '1\/12', '1\/23', '1\/26'],\n    'Description': ['Balance: end of December', 'bowling', 'chocolate bar', 'shoveling snow'],\n    'Received': ['', '', '', 20.00],\n    'Expenses': ['', 11.25, 2.30, ''],\n    'Available Funds': [330.10, 318.85, 316.55, 336.55]\n})\n# Call the tool to solve the problem\nprint(calculate_available_funds(df))","question":"This is Zeke's complete financial record for January. How much money did Zeke have after he went bowling?","prediction_code":"import pandas as pd\n\ndef calculate_available_funds(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing Zeke's financial record for January and returns the available funds after each transaction.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the financial record with columns 'Date', 'Description', 'Received', 'Expenses', and 'Available Funds'.\n    Returns:\n    float: The available funds after Zeke went bowling.\n    \"\"\"\n    # Filter the DataFrame for the row where the description is 'bowling'\n    bowling_row = df[df['Description'] == 'bowling']\n    \n    # Get the expenses for bowling\n    bowling_expenses = bowling_row['Expenses'].values[0]\n    \n    # Get the available funds after bowling\n    available_funds = bowling_row['Available Funds'].values[0] + bowling_expenses\n    \n    return available_funds","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Date': [' ', '1\/12', '1\/23', '1\/26'],\n    'Description': ['Balance: end of December', 'bowling', 'chocolate bar', 'shoveling snow'],\n    'Received': ['', '', '', 20.00],\n    'Expenses': ['', 11.25, 2.30, ''],\n    'Available Funds': [330.10, 318.85, 316.55, 336.55]\n})\n# Call the tool to solve the problem\nprint(calculate_available_funds(df))","table":"Name: None\nUnit: $\nContent:\nDate | Description | Received | Expenses | Available Funds\n | Balance: end of December | | | $330.10\n1\/12 | bowling | | $11.25 | $318.85\n1\/23 | chocolate bar | | $2.30 | $316.55\n1\/26 | shoveling snow | $20.00 | | $336.55"}
{"level":4,"answer":90.0,"prediction":"import pandas as pd\n\ndef find_largest_number_of_points(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of points per game and returns the largest number of points scored.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of points scored per game.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of points scored.\n    \"\"\"\n    # Create an empty list to store all the points\n    points = []\n    \n    # Iterate through each row of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # If there are leaf values, append them to the points list\n        if leaf:\n            points.extend(leaf)\n        \n        # Append the stem value to the points list\n        points.append(stem)\n    \n    # Find the largest number of points\n    largest_points = max(points)\n    \n    return largest_points\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[8, 9], [1, 9], [5], [], [4], [1], [6], [2, 2], [0]]\n})\n# Call the tool to solve the problem\nprint(find_largest_number_of_points(df))","question":"A high school basketball coach counted the number of points her team scored each game. What is the largest number of points?","prediction_code":"import pandas as pd\n\ndef find_largest_number_of_points(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of points per game and returns the largest number of points scored.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of points scored per game.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of points scored.\n    \"\"\"\n    # Create an empty list to store all the points\n    points = []\n    \n    # Iterate through each row of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # If there are leaf values, append them to the points list\n        if leaf:\n            points.extend(leaf)\n        \n        # Append the stem value to the points list\n        points.append(stem)\n    \n    # Find the largest number of points\n    largest_points = max(points)\n    \n    return largest_points","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[8, 9], [1, 9], [5], [], [4], [1], [6], [2, 2], [0]]\n})\n# Call the tool to solve the problem\nprint(find_largest_number_of_points(df))","table":"Name: Points per game\nUnit: points\nContent:\nStem | Leaf \n1 | 8, 9\n2 | 1, 9\n3 | 5\n4 | \n5 | 4\n6 | 1\n7 | 6\n8 | 2, 2\n9 | 0"}
{"level":3,"answer":8386.0,"prediction":"import pandas as pd\n\ndef calculate_total_candles(df, months):\n    \"\"\"\n    This function takes in a pandas DataFrame of candles made per month and a list of months, and returns the total number of candles made in the specified months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of candles made per month.\n    The dataframe should contain \"Month\" and \"Number of candles\" columns.\n    months (list): A list of months for which the total number of candles is to be calculated.\n    Returns:\n    int: The total number of candles made in the specified months.\n    \"\"\"\n    # Filter the DataFrame for the specified months\n    filtered_df = df[df['Month'].isin(months)]\n    \n    # Calculate the total number of candles made in the specified months\n    total_candles = filtered_df['Number of candles'].sum()\n    \n    return total_candles\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['May', 'June', 'July', 'August'],\n    'Number of candles': [7236, 1150, 1146, 1675]\n})\n\n# Specify the months for which the total number of candles is to be calculated\nmonths = ['May', 'June']\n\n# Call the tool to solve the problem\nprint(calculate_total_candles(df, months))","question":"An employee at the candle factory reported on the number of candles made each month. How many candles did the factory make in total in May and June?","prediction_code":"import pandas as pd\n\ndef calculate_total_candles(df, months):\n    \"\"\"\n    This function takes in a pandas DataFrame of candles made per month and a list of months, and returns the total number of candles made in the specified months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of candles made per month.\n    The dataframe should contain \"Month\" and \"Number of candles\" columns.\n    months (list): A list of months for which the total number of candles is to be calculated.\n    Returns:\n    int: The total number of candles made in the specified months.\n    \"\"\"\n    # Filter the DataFrame for the specified months\n    filtered_df = df[df['Month'].isin(months)]\n    \n    # Calculate the total number of candles made in the specified months\n    total_candles = filtered_df['Number of candles'].sum()\n    \n    return total_candles","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['May', 'June', 'July', 'August'],\n    'Number of candles': [7236, 1150, 1146, 1675]\n})\n\n# Specify the months for which the total number of candles is to be calculated\nmonths = ['May', 'June']\n\n# Call the tool to solve the problem\nprint(calculate_total_candles(df, months))","table":"Name: Candles made\nUnit: candles\nContent:\nMonth | Number of candles\nMay | 7,236\nJune | 1,150\nJuly | 1,146\nAugust | 1,675"}
{"level":4,"answer":4.0,"prediction":"import pandas as pd\n\ndef count_shipments_with_broken_plates(df, min_plates, max_plates):\n    \"\"\"\n    This function takes in a pandas DataFrame of broken plates per shipment and returns the number of shipments that have at least min_plates broken plates but less than max_plates broken plates.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of broken plates per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_plates (int): The minimum number of broken plates required for a shipment to be counted.\n    max_plates (int): The maximum number of broken plates required for a shipment to be counted.\n    Returns:\n    int: The number of shipments that have at least min_plates broken plates but less than max_plates broken plates.\n    \"\"\"\n    # prepare a list to calculate the number of broken plates in each shipment\n    broken_plates = []\n    # calculate the total number of broken plates in each shipment\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            broken_plates.append(stem * 10 + leaf[j])\n    # filter the shipments where the total number of broken plates is greater than or equal to min_plates and less than max_plates\n    filtered = [plates for plates in broken_plates if min_plates <= plates < max_plates]\n    # count the number of shipments\n    num_shipments = len(filtered)\n    return num_shipments\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[0, 0, 3, 4, 5, 8], [5, 8], [2, 2, 3], [4, 8]]\n})\n# Call the tool to solve the problem\nprint(count_shipments_with_broken_plates(df, 31, 45))","question":"A pottery factory kept track of the number of broken plates per shipment last week. How many shipments had at least 31 broken plates but less than 45 broken plates?","prediction_code":"import pandas as pd\n\ndef count_shipments_with_broken_plates(df, min_plates, max_plates):\n    \"\"\"\n    This function takes in a pandas DataFrame of broken plates per shipment and returns the number of shipments that have at least min_plates broken plates but less than max_plates broken plates.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of broken plates per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_plates (int): The minimum number of broken plates required for a shipment to be counted.\n    max_plates (int): The maximum number of broken plates required for a shipment to be counted.\n    Returns:\n    int: The number of shipments that have at least min_plates broken plates but less than max_plates broken plates.\n    \"\"\"\n    # prepare a list to calculate the number of broken plates in each shipment\n    broken_plates = []\n    # calculate the total number of broken plates in each shipment\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            broken_plates.append(stem * 10 + leaf[j])\n    # filter the shipments where the total number of broken plates is greater than or equal to min_plates and less than max_plates\n    filtered = [plates for plates in broken_plates if min_plates <= plates < max_plates]\n    # count the number of shipments\n    num_shipments = len(filtered)\n    return num_shipments","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[0, 0, 3, 4, 5, 8], [5, 8], [2, 2, 3], [4, 8]]\n})\n# Call the tool to solve the problem\nprint(count_shipments_with_broken_plates(df, 31, 45))","table":"Name: Broken plates per shipment\nUnit: None\nContent:\nStem | Leaf \n1 | 0, 0, 3, 4, 5, 8\n2 | 5, 8\n3 | 2, 2, 3\n4 | 4, 8"}
{"level":1,"answer":25.0,"prediction":"import pandas as pd\n\ndef calculate_total_magazines(df, num_stacks):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of magazines per stack and the number of stacks, and returns the total number of magazines.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of magazines per stack.\n    The dataframe should contain \"Number of stacks\" and \"Number of magazines\" columns.\n    num_stacks (int): The number of stacks.\n    Returns:\n    int: The total number of magazines.\n    \"\"\"\n    # Filter the DataFrame for the specific number of stacks\n    stack_df = df[df['Number of stacks'] == num_stacks]\n    \n    # Get the number of magazines from the filtered DataFrame\n    num_magazines = stack_df['Number of magazines'].values[0]\n    \n    return num_magazines\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of stacks': [1, 2, 3, 4, 5],\n    'Number of magazines': [5, 10, 15, 20, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_magazines(df, 5))","question":"Each stack has 5 magazines. How many magazines are in 5 stacks?","prediction_code":"import pandas as pd\n\ndef calculate_total_magazines(df, num_stacks):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of magazines per stack and the number of stacks, and returns the total number of magazines.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of magazines per stack.\n    The dataframe should contain \"Number of stacks\" and \"Number of magazines\" columns.\n    num_stacks (int): The number of stacks.\n    Returns:\n    int: The total number of magazines.\n    \"\"\"\n    # Filter the DataFrame for the specific number of stacks\n    stack_df = df[df['Number of stacks'] == num_stacks]\n    \n    # Get the number of magazines from the filtered DataFrame\n    num_magazines = stack_df['Number of magazines'].values[0]\n    \n    return num_magazines","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of stacks': [1, 2, 3, 4, 5],\n    'Number of magazines': [5, 10, 15, 20, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_magazines(df, 5))","table":"Name: None\nUnit: magazines\nContent:\nNumber of stacks | Number of magazines\n1 | 5\n2 | 10\n3 | 15\n4 | 20\n5 | ?"}
{"level":5,"answer":17.0,"prediction":"import pandas as pd\n\ndef count_offices_in_range(df, min_size, max_size):\n    \"\"\"\n    This function takes in a pandas DataFrame of office sizes and returns the number of offices that are at least min_size square meters but less than max_size square meters.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the sizes of offices.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_size (int): The minimum size of offices to consider.\n    max_size (int): The maximum size of offices to consider.\n    Returns:\n    int: The number of offices that are at least min_size square meters but less than max_size square meters.\n    \"\"\"\n    # prepare a list to store the sizes of offices\n    sizes = []\n    # iterate through the dataframe and extract the sizes of offices\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            sizes.append(stem * 10 + leaf[j])\n    # filter the offices that are at least min_size square meters but less than max_size square meters\n    filtered = [size for size in sizes if min_size <= size < max_size]\n    # count the number of offices\n    num_offices = len(filtered)\n    return num_offices\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[6], [], [2, 3, 3], [9], [0, 0, 7, 8, 9], [1, 4, 8], [1, 2, 7], [4], [], [0]]\n})\n# Call the tool to solve the problem\nprint(count_offices_in_range(df, 0, 80))","question":"Turner, who rents properties for a living, measures all the offices in a building he is renting. How many offices are at least 0 square meters but less than 80 square meters?","prediction_code":"import pandas as pd\n\ndef count_offices_in_range(df, min_size, max_size):\n    \"\"\"\n    This function takes in a pandas DataFrame of office sizes and returns the number of offices that are at least min_size square meters but less than max_size square meters.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the sizes of offices.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_size (int): The minimum size of offices to consider.\n    max_size (int): The maximum size of offices to consider.\n    Returns:\n    int: The number of offices that are at least min_size square meters but less than max_size square meters.\n    \"\"\"\n    # prepare a list to store the sizes of offices\n    sizes = []\n    # iterate through the dataframe and extract the sizes of offices\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            sizes.append(stem * 10 + leaf[j])\n    # filter the offices that are at least min_size square meters but less than max_size square meters\n    filtered = [size for size in sizes if min_size <= size < max_size]\n    # count the number of offices\n    num_offices = len(filtered)\n    return num_offices","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[6], [], [2, 3, 3], [9], [0, 0, 7, 8, 9], [1, 4, 8], [1, 2, 7], [4], [], [0]]\n})\n# Call the tool to solve the problem\nprint(count_offices_in_range(df, 0, 80))","table":"Name: Office sizes (square meters)\nUnit: offices\nContent:\nStem | Leaf \n0 | 6\n1 | \n2 | 2, 3, 3\n3 | 9\n4 | 0, 0, 7, 8, 9\n5 | 1, 4, 8\n6 | 1, 2, 7\n7 | 4\n8 | \n9 | 0"}
{"level":8,"answer":-4.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of students receiving scholarships and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of students receiving scholarships per year.\n    The dataframe should contain \"Year\" and \"Students\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_students = df[df['Year'] == start_year]['Students'].values[0]\n    end_students = df[df['Year'] == end_year]['Students'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_students - start_students) \/ start_students * 100\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2010, 2011, 2012, 2013, 2014],\n    'Students': [24, 20, 31, 23, 28]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2010, 2011))","question":"The financial aid office at Massey University produced an internal report on the number of students receiving scholarships. According to the table, what was the rate of change between 2010 and 2011?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of students receiving scholarships and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of students receiving scholarships per year.\n    The dataframe should contain \"Year\" and \"Students\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_students = df[df['Year'] == start_year]['Students'].values[0]\n    end_students = df[df['Year'] == end_year]['Students'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_students - start_students) \/ start_students * 100\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2010, 2011, 2012, 2013, 2014],\n    'Students': [24, 20, 31, 23, 28]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2010, 2011))","table":"Name: Students receiving scholarships\nUnit: students per year\nContent:\nYear | Students\n2010 | 24\n2011 | 20\n2012 | 31\n2013 | 23\n2014 | 28"}
{"level":6,"answer":5.0,"prediction":"import pandas as pd\n\ndef count_teams_with_51_members(df):\n    \"\"\"\n    This function takes in a pandas dataframe of track team sizes and returns the number of teams that have at least 51 members.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the sizes of track teams.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of teams that have at least 51 members.\n    \"\"\"\n    # prepare a list to calculate the total number of members in each team\n    members = []\n    # calculate the total number of members in each team\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            members.append(stem * 10 + leaf[j])\n    # filter the teams where the total number of members is greater than or equal to 51\n    filtered = [member for member in members if member >= 51]\n    # count the number of teams\n    num_teams = len(filtered)\n    return num_teams\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7, 8],\n    'Leaf': [[3, 8], [], [0, 5], [], [0], [3, 6, 8]]\n})\n# Call the tool to solve the problem\nprint(count_teams_with_51_members(df))","question":"Mr. Carson, a track coach, recorded the sizes of all the nearby track teams. How many teams have at least 51 members?","prediction_code":"import pandas as pd\n\ndef count_teams_with_51_members(df):\n    \"\"\"\n    This function takes in a pandas dataframe of track team sizes and returns the number of teams that have at least 51 members.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the sizes of track teams.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of teams that have at least 51 members.\n    \"\"\"\n    # prepare a list to calculate the total number of members in each team\n    members = []\n    # calculate the total number of members in each team\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            members.append(stem * 10 + leaf[j])\n    # filter the teams where the total number of members is greater than or equal to 51\n    filtered = [member for member in members if member >= 51]\n    # count the number of teams\n    num_teams = len(filtered)\n    return num_teams","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7, 8],\n    'Leaf': [[3, 8], [], [0, 5], [], [0], [3, 6, 8]]\n})\n# Call the tool to solve the problem\nprint(count_teams_with_51_members(df))","table":"Name: Track team sizes (number of members)\nUnit: teams\nContent:\nStem | Leaf \n3 | 3, 8\n4 | \n5 | 0, 5\n6 | \n7 | 0\n8 | 3, 6, 8"}
{"level":7,"answer":-1.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of straight-A students per year and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of straight-A students per year.\n    The dataframe should contain \"Year\" and \"Students\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_students = df[df['Year'] == start_year]['Students'].values[0]\n    end_students = df[df['Year'] == end_year]['Students'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_students - start_students) \/ start_students\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2007, 2008, 2009, 2010, 2011],\n    'Students': [42, 40, 22, 8, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2010, 2011))","question":"A school administrator who was concerned about grade inflation looked over the number of straight-A students from year to year. According to the table, what was the rate of change between 2010 and 2011?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of straight-A students per year and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of straight-A students per year.\n    The dataframe should contain \"Year\" and \"Students\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_students = df[df['Year'] == start_year]['Students'].values[0]\n    end_students = df[df['Year'] == end_year]['Students'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_students - start_students) \/ start_students\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2007, 2008, 2009, 2010, 2011],\n    'Students': [42, 40, 22, 8, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2010, 2011))","table":"Name: Straight-A students\nUnit: students per year\nContent:\nYear | Students\n2007 | 42\n2008 | 40\n2009 | 22\n2010 | 8\n2011 | 7"}
{"level":1,"answer":60.0,"prediction":"import pandas as pd\n\ndef calculate_emeralds(df, num_bracelets):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of emeralds per bracelet and the number of bracelets, and returns the total number of emeralds.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of emeralds per bracelet.\n    The DataFrame should have columns 'Number of bracelets' and 'Number of emeralds'.\n    num_bracelets (int): The number of bracelets.\n    Returns:\n    int: The total number of emeralds.\n    \"\"\"\n    # Filter the DataFrame for the specific number of bracelets\n    bracelets_df = df[df['Number of bracelets'] == num_bracelets]\n    \n    # Get the number of emeralds for the specific number of bracelets\n    num_emeralds = bracelets_df['Number of emeralds'].values[0]\n    \n    return num_emeralds\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of bracelets': [1, 2, 3, 4, 5, 6],\n    'Number of emeralds': [10, 20, 30, 40, 50, '?']\n})\n\n# Call the tool to solve the problem\nnum_bracelets = 6\nprint(calculate_emeralds(df, num_bracelets))","question":"Each bracelet has 10 emeralds. How many emeralds are on 6 bracelets?","prediction_code":"import pandas as pd\n\ndef calculate_emeralds(df, num_bracelets):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of emeralds per bracelet and the number of bracelets, and returns the total number of emeralds.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of emeralds per bracelet.\n    The DataFrame should have columns 'Number of bracelets' and 'Number of emeralds'.\n    num_bracelets (int): The number of bracelets.\n    Returns:\n    int: The total number of emeralds.\n    \"\"\"\n    # Filter the DataFrame for the specific number of bracelets\n    bracelets_df = df[df['Number of bracelets'] == num_bracelets]\n    \n    # Get the number of emeralds for the specific number of bracelets\n    num_emeralds = bracelets_df['Number of emeralds'].values[0]\n    \n    return num_emeralds","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of bracelets': [1, 2, 3, 4, 5, 6],\n    'Number of emeralds': [10, 20, 30, 40, 50, '?']\n})\n\n# Call the tool to solve the problem\nnum_bracelets = 6\nprint(calculate_emeralds(df, num_bracelets))","table":"Name: None\nUnit: emeralds\nContent:\nNumber of bracelets | Number of emeralds\n1 | 10\n2 | 20\n3 | 30\n4 | 40\n5 | 50\n6 | ?"}
{"level":8,"answer":11.0,"prediction":"import pandas as pd\n\ndef count_students_fewer_than_2(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trips to the beach last summer and returns the number of students who went to the beach fewer than 2 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of trips and their frequencies.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who went to the beach fewer than 2 times.\n    \"\"\"\n    # Filter the DataFrame for trips fewer than 2\n    filtered_df = df[df['Number of trips'] < 2]\n    \n    # Calculate the total number of students who went to the beach fewer than 2 times\n    num_students = filtered_df['Frequency'].sum()\n    \n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [0, 1, 2, 3],\n    'Frequency': [5, 6, 17, 3]\n})\n# Call the tool to solve the problem\nprint(count_students_fewer_than_2(df))","question":"Mr. Singleton, the marine biology teacher, asked his students how many times they went to the beach last summer. How many students went to the beach fewer than 2 times?","prediction_code":"import pandas as pd\n\ndef count_students_fewer_than_2(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trips to the beach last summer and returns the number of students who went to the beach fewer than 2 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of trips and their frequencies.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who went to the beach fewer than 2 times.\n    \"\"\"\n    # Filter the DataFrame for trips fewer than 2\n    filtered_df = df[df['Number of trips'] < 2]\n    \n    # Calculate the total number of students who went to the beach fewer than 2 times\n    num_students = filtered_df['Frequency'].sum()\n    \n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [0, 1, 2, 3],\n    'Frequency': [5, 6, 17, 3]\n})\n# Call the tool to solve the problem\nprint(count_students_fewer_than_2(df))","table":"Name: Trips to the beach last summer\nUnit: None\nContent:\nNumber of trips | Frequency\n0 | 5\n1 | 6\n2 | 17\n3 | 3"}
{"level":5,"answer":7.0,"prediction":"import pandas as pd\n\ndef count_restaurants_with_fewer_than_26_points(df):\n    \"\"\"\n    This function takes in a pandas dataframe of restaurant ratings and returns the number of restaurants that were rated fewer than 26 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the restaurant ratings.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of restaurants that were rated fewer than 26 points.\n    \"\"\"\n    # prepare a list to calculate ratings for each restaurant\n    ratings = []\n    # calculate the total rating for each restaurant\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            ratings.append(stem * 10 + leaf[j])\n    # filter the restaurants where the rating is less than 26\n    filtered = [rating for rating in ratings if rating < 26]\n    # count the number of restaurants\n    num_restaurants = len(filtered)\n    return num_restaurants\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3, 4],\n    'Leaf': [[6, 8], [1, 3], [2, 2, 5, 6, 6, 7, 7, 8, 9], [1, 3, 4], [0, 3]]\n})\n# Call the tool to solve the problem\nprint(count_restaurants_with_fewer_than_26_points(df))","question":"A food magazine published a listing of local restaurant ratings. How many restaurants were rated fewer than 26 points?","prediction_code":"import pandas as pd\n\ndef count_restaurants_with_fewer_than_26_points(df):\n    \"\"\"\n    This function takes in a pandas dataframe of restaurant ratings and returns the number of restaurants that were rated fewer than 26 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the restaurant ratings.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of restaurants that were rated fewer than 26 points.\n    \"\"\"\n    # prepare a list to calculate ratings for each restaurant\n    ratings = []\n    # calculate the total rating for each restaurant\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            ratings.append(stem * 10 + leaf[j])\n    # filter the restaurants where the rating is less than 26\n    filtered = [rating for rating in ratings if rating < 26]\n    # count the number of restaurants\n    num_restaurants = len(filtered)\n    return num_restaurants","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3, 4],\n    'Leaf': [[6, 8], [1, 3], [2, 2, 5, 6, 6, 7, 7, 8, 9], [1, 3, 4], [0, 3]]\n})\n# Call the tool to solve the problem\nprint(count_restaurants_with_fewer_than_26_points(df))","table":"Name: Restaurant ratings\nUnit: restaurants\nContent:\nStem | Leaf \n0 | 6, 8\n1 | 1, 3\n2 | 2, 2, 5, 6, 6, 7, 7, 8, 9\n3 | 1, 3, 4\n4 | 0, 3"}
{"level":2,"answer":6.0,"prediction":"import pandas as pd\n\ndef calculate_cookies_on_platters(df, num_platters):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of chocolate-chip cookies on platters and the number of platters, and returns the total number of chocolate-chip cookies.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of platters and the number of chocolate-chip cookies per platter.\n    The DataFrame should have columns 'Number of platters' and 'Number of chocolate-chip cookies'.\n    num_platters (int): The number of platters to calculate the total number of chocolate-chip cookies.\n    Returns:\n    int: The total number of chocolate-chip cookies on the specified number of platters.\n    \"\"\"\n    # Filter the DataFrame for the specified number of platters\n    platters_df = df[df['Number of platters'] == num_platters]\n    \n    # Get the number of chocolate-chip cookies from the filtered DataFrame\n    num_cookies = platters_df['Number of chocolate-chip cookies'].values[0]\n    \n    return num_cookies\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of platters': [1, 2, 3],\n    'Number of chocolate-chip cookies': [2, 4, '?']\n})\n\n# Call the tool to solve the problem\nnum_platters = 3\nprint(calculate_cookies_on_platters(df, num_platters))","question":"Each platter has 2 chocolate-chip cookies. How many chocolate-chip cookies are on 3 platters?","prediction_code":"import pandas as pd\n\ndef calculate_cookies_on_platters(df, num_platters):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of chocolate-chip cookies on platters and the number of platters, and returns the total number of chocolate-chip cookies.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of platters and the number of chocolate-chip cookies per platter.\n    The DataFrame should have columns 'Number of platters' and 'Number of chocolate-chip cookies'.\n    num_platters (int): The number of platters to calculate the total number of chocolate-chip cookies.\n    Returns:\n    int: The total number of chocolate-chip cookies on the specified number of platters.\n    \"\"\"\n    # Filter the DataFrame for the specified number of platters\n    platters_df = df[df['Number of platters'] == num_platters]\n    \n    # Get the number of chocolate-chip cookies from the filtered DataFrame\n    num_cookies = platters_df['Number of chocolate-chip cookies'].values[0]\n    \n    return num_cookies","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of platters': [1, 2, 3],\n    'Number of chocolate-chip cookies': [2, 4, '?']\n})\n\n# Call the tool to solve the problem\nnum_platters = 3\nprint(calculate_cookies_on_platters(df, num_platters))","table":"Name: None\nUnit: None\nContent:\nNumber of platters | Number of chocolate-chip cookies\n1 | 2\n2 | 4\n3 | ?"}
{"level":4,"answer":6.0,"prediction":"import pandas as pd\n\ndef calculate_remaining_money(menu_df, initial_money, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table, the initial amount of money, and a dictionary of orders, and returns the remaining amount of money after making the purchases.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    initial_money (float): The initial amount of money.\n    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.\n    Returns:\n    float: The remaining amount of money after making the purchases.\n    \"\"\"\n    # Calculate the total cost of the orders using the calculate_total_cost function\n    total_cost = calculate_total_cost(menu_df, orders)\n    \n    # Calculate the remaining amount of money\n    remaining_money = initial_money - total_cost\n    \n    return remaining_money\n########################################\n# Initialize the table into a dataframe\nmenu_df = pd.DataFrame({\n    'Item': ['buttermilk pancakes', 'breakfast burrito', 'bowl of melon', 'spinach omelette'],\n    'Price': [4.00, 4.00, 5.00, 8.00]\n})\n\n# Set the initial amount of money\ninitial_money = 15.00\n\n# Set the orders\norders = {\n    'bowl of melon': 1,\n    'breakfast burrito': 1\n}\n\n# Call the tool to solve the problem\nprint(calculate_remaining_money(menu_df, initial_money, orders))","question":"Kenneth has $15.00. How much money will Kenneth have left if he buys a bowl of melon and a breakfast burrito?","prediction_code":"import pandas as pd\n\ndef calculate_remaining_money(menu_df, initial_money, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table, the initial amount of money, and a dictionary of orders, and returns the remaining amount of money after making the purchases.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    initial_money (float): The initial amount of money.\n    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.\n    Returns:\n    float: The remaining amount of money after making the purchases.\n    \"\"\"\n    # Calculate the total cost of the orders using the calculate_total_cost function\n    total_cost = calculate_total_cost(menu_df, orders)\n    \n    # Calculate the remaining amount of money\n    remaining_money = initial_money - total_cost\n    \n    return remaining_money","prediction_call":"# Initialize the table into a dataframe\nmenu_df = pd.DataFrame({\n    'Item': ['buttermilk pancakes', 'breakfast burrito', 'bowl of melon', 'spinach omelette'],\n    'Price': [4.00, 4.00, 5.00, 8.00]\n})\n\n# Set the initial amount of money\ninitial_money = 15.00\n\n# Set the orders\norders = {\n    'bowl of melon': 1,\n    'breakfast burrito': 1\n}\n\n# Call the tool to solve the problem\nprint(calculate_remaining_money(menu_df, initial_money, orders))","table":"Name: None\nUnit: $\nContent:\nbuttermilk pancakes | $4.00\nbreakfast burrito | $4.00\nbowl of melon | $5.00\nspinach omelette | $8.00"}
{"level":7,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of straight-A students per year and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of straight-A students per year.\n    The dataframe should contain \"Year\" and \"Students\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_students = df[df['Year'] == start_year]['Students'].values[0]\n    end_students = df[df['Year'] == end_year]['Students'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_students - start_students) \/ start_students\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2006, 2007, 2008, 2009, 2010],\n    'Students': [5, 9, 14, 12, 10]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2007, 2008))","question":"A school administrator who was concerned about grade inflation looked over the number of straight-A students from year to year. According to the table, what was the rate of change between 2007 and 2008?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of straight-A students per year and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of straight-A students per year.\n    The dataframe should contain \"Year\" and \"Students\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_students = df[df['Year'] == start_year]['Students'].values[0]\n    end_students = df[df['Year'] == end_year]['Students'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_students - start_students) \/ start_students\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2006, 2007, 2008, 2009, 2010],\n    'Students': [5, 9, 14, 12, 10]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2007, 2008))","table":"Name: Straight-A students\nUnit: students per year\nContent:\nYear | Students\n2006 | 5\n2007 | 9\n2008 | 14\n2009 | 12\n2010 | 10"}
{"level":8,"answer":7.0,"prediction":"import pandas as pd\n\ndef count_trees_with_fewer_than_60_apples(df):\n    \"\"\"\n    This function takes in a pandas dataframe of apples per tree, and returns the number of trees that have fewer than 60 apples.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of apples per tree.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of trees that have fewer than 60 apples.\n    \"\"\"\n    # prepare a list to calculate the number of apples on each tree\n    apples = []\n    # calculate the total number of apples on each tree\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            apples.append(stem * 10 + leaf[j])\n    # filter the trees where the total number of apples is less than 60\n    filtered = [apple for apple in apples if apple < 60]\n    # count the number of trees\n    num_trees = len(filtered)\n    return num_trees\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7, 8],\n    'Leaf': [[0, 3, 4, 5, 9], [7, 8], [3, 3, 3, 4, 7, 7], [0, 2, 3, 8], [0, 0, 3]]\n})\n# Call the tool to solve the problem\nprint(count_trees_with_fewer_than_60_apples(df))","question":"A farmer counted the number of apples on each tree in her orchard. How many trees have fewer than 60 apples?","prediction_code":"import pandas as pd\n\ndef count_trees_with_fewer_than_60_apples(df):\n    \"\"\"\n    This function takes in a pandas dataframe of apples per tree, and returns the number of trees that have fewer than 60 apples.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of apples per tree.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of trees that have fewer than 60 apples.\n    \"\"\"\n    # prepare a list to calculate the number of apples on each tree\n    apples = []\n    # calculate the total number of apples on each tree\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            apples.append(stem * 10 + leaf[j])\n    # filter the trees where the total number of apples is less than 60\n    filtered = [apple for apple in apples if apple < 60]\n    # count the number of trees\n    num_trees = len(filtered)\n    return num_trees","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7, 8],\n    'Leaf': [[0, 3, 4, 5, 9], [7, 8], [3, 3, 3, 4, 7, 7], [0, 2, 3, 8], [0, 0, 3]]\n})\n# Call the tool to solve the problem\nprint(count_trees_with_fewer_than_60_apples(df))","table":"Name: Apples per tree\nUnit: trees\nContent:\nStem | Leaf \n4 | 0, 3, 4, 5, 9\n5 | 7, 8\n6 | 3, 3, 3, 4, 7, 7\n7 | 0, 2, 3, 8\n8 | 0, 0, 3"}
{"level":6,"answer":10.0,"prediction":"import pandas as pd\n\ndef find_smallest_number_of_pepperoni(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pieces of pepperoni per pizza and returns the smallest number of pieces of pepperoni.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of pieces of pepperoni per pizza.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of pieces of pepperoni.\n    \"\"\"\n    # prepare a list to store all the pieces of pepperoni\n    pepperoni = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # iterate through each leaf value in the row\n        for j in range(len(leaf)):\n            # calculate the total number of pieces of pepperoni\n            pepperoni.append(stem * 10 + leaf[j])\n    # find the smallest number of pieces of pepperoni\n    smallest = min(pepperoni)\n    return smallest\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[0, 0, 1, 3, 8, 8], [0, 1, 1, 2, 9, 9], [1, 3, 3, 6, 6, 6], [1, 2, 9]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_pepperoni(df))","question":"Grayson counted the number of pieces of pepperoni on each pizza he made. What is the smallest number of pieces of pepperoni?","prediction_code":"import pandas as pd\n\ndef find_smallest_number_of_pepperoni(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pieces of pepperoni per pizza and returns the smallest number of pieces of pepperoni.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of pieces of pepperoni per pizza.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of pieces of pepperoni.\n    \"\"\"\n    # prepare a list to store all the pieces of pepperoni\n    pepperoni = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # iterate through each leaf value in the row\n        for j in range(len(leaf)):\n            # calculate the total number of pieces of pepperoni\n            pepperoni.append(stem * 10 + leaf[j])\n    # find the smallest number of pieces of pepperoni\n    smallest = min(pepperoni)\n    return smallest","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[0, 0, 1, 3, 8, 8], [0, 1, 1, 2, 9, 9], [1, 3, 3, 6, 6, 6], [1, 2, 9]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_pepperoni(df))","table":"Name: Pieces of pepperoni per pizza\nUnit: pieces of pepperoni\nContent:\nStem | Leaf \n1 | 0, 0, 1, 3, 8, 8\n2 | 0, 1, 1, 2, 9, 9\n3 | 1, 3, 3, 6, 6, 6\n4 | 1, 2, 9"}
{"level":5,"answer":12.0,"prediction":"import pandas as pd\n\ndef get_crop_price(df, crop, year):\n    \"\"\"\n    This function takes in a pandas DataFrame of crop prices per cwt and returns the price of a specific crop in a specific year.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing crop prices per cwt with columns 'Crop', '2004', '2005', etc.\n    crop (str): The name of the crop.\n    year (int): The year for which the price is requested.\n    Returns:\n    float: The price of the specified crop in the specified year.\n    \"\"\"\n    # Filter the DataFrame for the specific crop and year\n    crop_df = df[df['Crop'] == crop]\n    if not crop_df.empty:\n        price = crop_df[str(year)].values[0]\n        return price\n    else:\n        return None\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Crop': ['Lentils', 'Apples', 'Peas'],\n    '2004': [14, 12, 7],\n    '2005': [12, 18, 6]\n})\n# Call the tool to solve the problem\nprint(get_crop_price(df, 'Lentils', 2005))","question":"An Idaho farmer has been monitoring crop prices over time. Per cwt, how much did lentils cost in 2005?","prediction_code":"import pandas as pd\n\ndef get_crop_price(df, crop, year):\n    \"\"\"\n    This function takes in a pandas DataFrame of crop prices per cwt and returns the price of a specific crop in a specific year.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing crop prices per cwt with columns 'Crop', '2004', '2005', etc.\n    crop (str): The name of the crop.\n    year (int): The year for which the price is requested.\n    Returns:\n    float: The price of the specified crop in the specified year.\n    \"\"\"\n    # Filter the DataFrame for the specific crop and year\n    crop_df = df[df['Crop'] == crop]\n    if not crop_df.empty:\n        price = crop_df[str(year)].values[0]\n        return price\n    else:\n        return None","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Crop': ['Lentils', 'Apples', 'Peas'],\n    '2004': [14, 12, 7],\n    '2005': [12, 18, 6]\n})\n# Call the tool to solve the problem\nprint(get_crop_price(df, 'Lentils', 2005))","table":"Name: Idaho crop prices per cwt\nUnit: $\nContent:\nCrop | 2004 | 2005\nLentils | $14 | $12\nApples | $12 | $18\nPeas | $7 | $6"}
{"level":4,"answer":16.0,"prediction":"import pandas as pd\n\ndef count_countries_with_athletes(df, min_athletes, max_athletes):\n    \"\"\"\n    This function takes in a pandas dataframe of athletes per country, and returns the number of countries that have at least min_athletes athletes but fewer than max_athletes athletes.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of athletes per country.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_athletes (int): The minimum number of athletes per country.\n    max_athletes (int): The maximum number of athletes per country.\n    Returns:\n    int: The number of countries that have at least min_athletes athletes but fewer than max_athletes athletes.\n    \"\"\"\n    # prepare a list to calculate the number of athletes in each country\n    athletes = []\n    # calculate the total number of athletes in each country\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            athletes.append(stem * 10 + leaf[j])\n    # filter the countries where the total number of athletes is greater than or equal to min_athletes and less than max_athletes\n    filtered = [athlete for athlete in athletes if min_athletes <= athlete < max_athletes]\n    # count the number of unique countries\n    num_countries = len(set(filtered))\n    return num_countries\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6],\n    'Leaf': [[1, 4, 6, 6], [2, 6, 8, 9, 9], [0, 6, 8, 9], [0, 4], [0, 3, 4, 5, 5, 5, 6, 6, 7, 8]]\n})\n# Set the minimum and maximum number of athletes\nmin_athletes = 36\nmax_athletes = 66\n# Call the tool to solve the problem\nprint(count_countries_with_athletes(df, min_athletes, max_athletes))","question":"While doing a project for P. E. class, Carmen researched the number of athletes competing in an international sporting event. How many countries have at least 36 athletes but fewer than 66 athletes?","prediction_code":"import pandas as pd\n\ndef count_countries_with_athletes(df, min_athletes, max_athletes):\n    \"\"\"\n    This function takes in a pandas dataframe of athletes per country, and returns the number of countries that have at least min_athletes athletes but fewer than max_athletes athletes.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of athletes per country.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_athletes (int): The minimum number of athletes per country.\n    max_athletes (int): The maximum number of athletes per country.\n    Returns:\n    int: The number of countries that have at least min_athletes athletes but fewer than max_athletes athletes.\n    \"\"\"\n    # prepare a list to calculate the number of athletes in each country\n    athletes = []\n    # calculate the total number of athletes in each country\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            athletes.append(stem * 10 + leaf[j])\n    # filter the countries where the total number of athletes is greater than or equal to min_athletes and less than max_athletes\n    filtered = [athlete for athlete in athletes if min_athletes <= athlete < max_athletes]\n    # count the number of unique countries\n    num_countries = len(set(filtered))\n    return num_countries","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6],\n    'Leaf': [[1, 4, 6, 6], [2, 6, 8, 9, 9], [0, 6, 8, 9], [0, 4], [0, 3, 4, 5, 5, 5, 6, 6, 7, 8]]\n})\n# Set the minimum and maximum number of athletes\nmin_athletes = 36\nmax_athletes = 66\n# Call the tool to solve the problem\nprint(count_countries_with_athletes(df, min_athletes, max_athletes))","table":"Name: Athletes per country\nUnit: None\nContent:\nStem | Leaf \n2 | 1, 4, 6, 6\n3 | 2, 6, 8, 9, 9\n4 | 0, 6, 8, 9\n5 | 0, 4\n6 | 0, 3, 4, 5, 5, 5, 6, 6, 7, 8"}
{"level":6,"answer":3.0,"prediction":"import pandas as pd\n\ndef count_people_with_14_pullups(df):\n    \"\"\"\n    This function takes in a pandas dataframe of pull-up competition results and returns the number of people who did exactly 14 pull-ups.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pull-ups per person.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of people who did exactly 14 pull-ups.\n    \"\"\"\n    # prepare a list to calculate the number of pull-ups for each person\n    pullups = []\n    # calculate the total number of pull-ups for each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            pullups.append(stem * 10 + leaf[j])\n    # count the number of people who did exactly 14 pull-ups\n    num_people = pullups.count(14)\n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[4, 4, 4], [], [1, 3, 7], [1, 5, 5, 7], [0, 7], [6], [2, 2, 8, 8, 9], [], [0]]\n})\n# Call the tool to solve the problem\nprint(count_people_with_14_pullups(df))","question":"During Fitness Day at school, Jamal and his classmates took part in a pull-up competition, keeping track of the results. How many people did exactly 14 pull-ups?","prediction_code":"import pandas as pd\n\ndef count_people_with_14_pullups(df):\n    \"\"\"\n    This function takes in a pandas dataframe of pull-up competition results and returns the number of people who did exactly 14 pull-ups.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pull-ups per person.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of people who did exactly 14 pull-ups.\n    \"\"\"\n    # prepare a list to calculate the number of pull-ups for each person\n    pullups = []\n    # calculate the total number of pull-ups for each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            pullups.append(stem * 10 + leaf[j])\n    # count the number of people who did exactly 14 pull-ups\n    num_people = pullups.count(14)\n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[4, 4, 4], [], [1, 3, 7], [1, 5, 5, 7], [0, 7], [6], [2, 2, 8, 8, 9], [], [0]]\n})\n# Call the tool to solve the problem\nprint(count_people_with_14_pullups(df))","table":"Name: Pull-up competition (number of pull-ups)\nUnit: people\nContent:\nStem | Leaf \n1 | 4, 4, 4\n2 | \n3 | 1, 3, 7\n4 | 1, 5, 5, 7\n5 | 0, 7\n6 | 6\n7 | 2, 2, 8, 8, 9\n8 | \n9 | 0"}
{"level":5,"answer":14.0,"prediction":"import pandas as pd\n\ndef count_bushes_with_fewer_roses(df, threshold):\n    \"\"\"\n    This function takes in a pandas dataframe of roses per bush and a threshold, and returns the number of bushes that have fewer than the threshold number of roses.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of roses per bush.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    threshold (int): The threshold number of roses.\n    Returns:\n    int: The number of bushes that have fewer than the threshold number of roses.\n    \"\"\"\n    # prepare a list to calculate the number of roses in each bush\n    roses = []\n    # calculate the total number of roses in each bush\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            roses.append(stem * 10 + leaf[j])\n    # filter the bushes where the total number of roses is less than the threshold\n    filtered = [rose for rose in roses if rose < threshold]\n    # count the number of bushes\n    num_bushes = len(filtered)\n    return num_bushes\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[1, 2, 4, 6], [7], [3, 4], [4, 7], [1, 6], [1, 9], [0]]\n})\n# Set the threshold number of roses\nthreshold = 92\n# Call the tool to solve the problem\nprint(count_bushes_with_fewer_roses(df, threshold))","question":"The owner of a plant nursery wrote down the number of roses on each bush. How many bushes have fewer than 92 roses?","prediction_code":"import pandas as pd\n\ndef count_bushes_with_fewer_roses(df, threshold):\n    \"\"\"\n    This function takes in a pandas dataframe of roses per bush and a threshold, and returns the number of bushes that have fewer than the threshold number of roses.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of roses per bush.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    threshold (int): The threshold number of roses.\n    Returns:\n    int: The number of bushes that have fewer than the threshold number of roses.\n    \"\"\"\n    # prepare a list to calculate the number of roses in each bush\n    roses = []\n    # calculate the total number of roses in each bush\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            roses.append(stem * 10 + leaf[j])\n    # filter the bushes where the total number of roses is less than the threshold\n    filtered = [rose for rose in roses if rose < threshold]\n    # count the number of bushes\n    num_bushes = len(filtered)\n    return num_bushes","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[1, 2, 4, 6], [7], [3, 4], [4, 7], [1, 6], [1, 9], [0]]\n})\n# Set the threshold number of roses\nthreshold = 92\n# Call the tool to solve the problem\nprint(count_bushes_with_fewer_roses(df, threshold))","table":"Name: Roses per bush\nUnit: bushes\nContent:\nStem | Leaf \n3 | 1, 2, 4, 6\n4 | 7\n5 | 3, 4\n6 | 4, 7\n7 | 1, 6\n8 | 1, 9\n9 | 0"}
{"level":5,"answer":4.0,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item2_price - item1_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['hamster wheel', 'bag of cat treats', 'box of dog biscuits', 'fish bowl', 'dog leash'],\n    'Price': [5, 3, 7, 4, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'bag of cat treats', 'box of dog biscuits'))","question":"How much more does a box of dog biscuits cost than a bag of cat treats?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item2_price - item1_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['hamster wheel', 'bag of cat treats', 'box of dog biscuits', 'fish bowl', 'dog leash'],\n    'Price': [5, 3, 7, 4, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'bag of cat treats', 'box of dog biscuits'))","table":"Name: None\nUnit: $\nContent:\nhamster wheel | $5\nbag of cat treats | $3\nbox of dog biscuits | $7\nfish bowl | $4\ndog leash | $7"}
{"level":4,"answer":2.0,"prediction":"import pandas as pd\n\ndef count_offices_between_sizes(df, min_size, max_size):\n    \"\"\"\n    This function takes in a pandas DataFrame of office sizes and returns the number of offices that are at least min_size square meters but less than max_size square meters.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the sizes of offices.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_size (int): The minimum size of offices to consider.\n    max_size (int): The maximum size of offices to consider.\n    Returns:\n    int: The number of offices that meet the size criteria.\n    \"\"\"\n    # prepare a list to store the sizes of offices\n    sizes = []\n    # iterate through the dataframe and extract the sizes of offices\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            sizes.append(stem * 10 + leaf[j])\n    # filter the sizes that are at least min_size but less than max_size\n    filtered = [size for size in sizes if min_size <= size < max_size]\n    # count the number of offices\n    num_offices = len(filtered)\n    return num_offices\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7],\n    'Leaf': [[2, 3], [0, 7], [9, 9], [], [6], [0]]\n})\n# Call the tool to solve the problem\nprint(count_offices_between_sizes(df, 40, 50))","question":"Trudy, who rents properties for a living, measures all the offices in a building she is renting. How many offices are at least 40 square meters but less than 50 square meters?","prediction_code":"import pandas as pd\n\ndef count_offices_between_sizes(df, min_size, max_size):\n    \"\"\"\n    This function takes in a pandas DataFrame of office sizes and returns the number of offices that are at least min_size square meters but less than max_size square meters.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the sizes of offices.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_size (int): The minimum size of offices to consider.\n    max_size (int): The maximum size of offices to consider.\n    Returns:\n    int: The number of offices that meet the size criteria.\n    \"\"\"\n    # prepare a list to store the sizes of offices\n    sizes = []\n    # iterate through the dataframe and extract the sizes of offices\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            sizes.append(stem * 10 + leaf[j])\n    # filter the sizes that are at least min_size but less than max_size\n    filtered = [size for size in sizes if min_size <= size < max_size]\n    # count the number of offices\n    num_offices = len(filtered)\n    return num_offices","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7],\n    'Leaf': [[2, 3], [0, 7], [9, 9], [], [6], [0]]\n})\n# Call the tool to solve the problem\nprint(count_offices_between_sizes(df, 40, 50))","table":"Name: Office sizes (square meters)\nUnit: None\nContent:\nStem | Leaf \n2 | 2, 3\n3 | 0, 7\n4 | 9, 9\n5 | \n6 | 6\n7 | 0"}
{"level":7,"answer":3.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its price per pound and the quantity purchased.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per pound for different items with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item purchased in pounds.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['star-shaped beads', 'heart-shaped beads', 'flower-shaped beads', 'rectangular beads', 'spherical beads', 'square beads', 'oval beads'],\n    'Price': [3, 4, 5, 3, 5, 5, 3]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'rectangular beads', 1))","question":"Craig went to the store and bought 1 pound of rectangular beads. How much did he spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its price per pound and the quantity purchased.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per pound for different items with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item purchased in pounds.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['star-shaped beads', 'heart-shaped beads', 'flower-shaped beads', 'rectangular beads', 'spherical beads', 'square beads', 'oval beads'],\n    'Price': [3, 4, 5, 3, 5, 5, 3]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'rectangular beads', 1))","table":"Name: None\nUnit: $\nContent:\nstar-shaped beads | $3\/lb\nheart-shaped beads | $4\/lb\nflower-shaped beads | $5\/lb\nrectangular beads | $3\/lb\nspherical beads | $5\/lb\nsquare beads | $5\/lb\noval beads | $3\/lb"}
{"level":2,"answer":50.0,"prediction":"import pandas as pd\n\ndef calculate_total_olives(df, num_jars):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of olives per jar and the number of jars, and returns the total number of olives.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of olives per jar with columns 'Number of jars' and 'Number of olives'.\n    num_jars (int): The number of jars.\n    Returns:\n    int: The total number of olives.\n    \"\"\"\n    # Filter the DataFrame for the specific number of jars\n    jars_df = df[df['Number of jars'] == num_jars]\n    \n    # Get the number of olives for the specified number of jars\n    num_olives = jars_df['Number of olives'].values[0]\n    \n    return num_olives\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of jars': [1, 2, 3, 4, 5],\n    'Number of olives': [10, 20, 30, 40, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_olives(df, 5))","question":"Each jar has 10 olives. How many olives are in 5 jars?","prediction_code":"import pandas as pd\n\ndef calculate_total_olives(df, num_jars):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of olives per jar and the number of jars, and returns the total number of olives.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of olives per jar with columns 'Number of jars' and 'Number of olives'.\n    num_jars (int): The number of jars.\n    Returns:\n    int: The total number of olives.\n    \"\"\"\n    # Filter the DataFrame for the specific number of jars\n    jars_df = df[df['Number of jars'] == num_jars]\n    \n    # Get the number of olives for the specified number of jars\n    num_olives = jars_df['Number of olives'].values[0]\n    \n    return num_olives","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of jars': [1, 2, 3, 4, 5],\n    'Number of olives': [10, 20, 30, 40, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_olives(df, 5))","table":"Name: None\nUnit: None\nContent:\nNumber of jars | Number of olives\n1 | 10\n2 | 20\n3 | 30\n4 | 40\n5 | ?"}
{"level":5,"answer":10.0,"prediction":"import pandas as pd\n\ndef count_magazines_with_articles(df):\n    \"\"\"\n    This function takes in a pandas dataframe of articles per magazine, and returns the number of magazines that have at least 10 articles but less than 40 articles.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of articles per magazine.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of magazines that have at least 10 articles but less than 40 articles.\n    \"\"\"\n    # prepare a list to calculate the number of articles in each magazine\n    articles = []\n    # calculate the total number of articles in each magazine\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            articles.append(stem * 10 + leaf[j])\n    # filter the magazines where the total number of articles is greater than or equal to 10 and less than 40\n    filtered = [article for article in articles if 10 <= article < 40]\n    # count the number of magazines\n    num_magazines = len(filtered)\n    return num_magazines\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3],\n    'Leaf': [[5], [0, 2, 3, 6, 9, 9], [3, 7], [1, 6]]\n})\n# Call the tool to solve the problem\nprint(count_magazines_with_articles(df))","question":"Jack counted the number of articles in several different magazines. How many magazines had at least 10 articles but less than 40 articles?","prediction_code":"import pandas as pd\n\ndef count_magazines_with_articles(df):\n    \"\"\"\n    This function takes in a pandas dataframe of articles per magazine, and returns the number of magazines that have at least 10 articles but less than 40 articles.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of articles per magazine.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of magazines that have at least 10 articles but less than 40 articles.\n    \"\"\"\n    # prepare a list to calculate the number of articles in each magazine\n    articles = []\n    # calculate the total number of articles in each magazine\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            articles.append(stem * 10 + leaf[j])\n    # filter the magazines where the total number of articles is greater than or equal to 10 and less than 40\n    filtered = [article for article in articles if 10 <= article < 40]\n    # count the number of magazines\n    num_magazines = len(filtered)\n    return num_magazines","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3],\n    'Leaf': [[5], [0, 2, 3, 6, 9, 9], [3, 7], [1, 6]]\n})\n# Call the tool to solve the problem\nprint(count_magazines_with_articles(df))","table":"Name: Articles per magazine\nUnit: magazines\nContent:\nStem | Leaf \n0 | 5\n1 | 0, 2, 3, 6, 9, 9\n2 | 3, 7\n3 | 1, 6"}
{"level":7,"answer":8.22,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost for.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['bottle of olive oil', 'bottle of mustard', 'bottle of vegetable oil', 'bottle of soy sauce', 'jar of peanut butter', 'jar of salsa'],\n    'Price': [5.54, 3.33, 2.68, 2.58, 3.98, 1.09]\n})\n\n# Define the items Monica wants to buy\nitems = ['bottle of vegetable oil', 'bottle of olive oil']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, items)\n\n# Print out the answer\nprint(total_cost)","question":"How much money does Monica need to buy a bottle of vegetable oil and a bottle of olive oil?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost for.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['bottle of olive oil', 'bottle of mustard', 'bottle of vegetable oil', 'bottle of soy sauce', 'jar of peanut butter', 'jar of salsa'],\n    'Price': [5.54, 3.33, 2.68, 2.58, 3.98, 1.09]\n})\n\n# Define the items Monica wants to buy\nitems = ['bottle of vegetable oil', 'bottle of olive oil']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, items)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\nbottle of olive oil | $5.54\nbottle of mustard | $3.33\nbottle of vegetable oil | $2.68\nbottle of soy sauce | $2.58\njar of peanut butter | $3.98\njar of salsa | $1.09"}
{"level":7,"answer":2.0,"prediction":"import pandas as pd\n\ndef count_schools_with_classrooms(df, min_classrooms, max_classrooms):\n    \"\"\"\n    This function takes in a pandas dataframe of classrooms per school and returns the number of schools that have at least min_classrooms but fewer than max_classrooms classrooms.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of classrooms per school.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_classrooms (int): The minimum number of classrooms required.\n    max_classrooms (int): The maximum number of classrooms allowed.\n    Returns:\n    int: The number of schools that have at least min_classrooms but fewer than max_classrooms classrooms.\n    \"\"\"\n    # prepare a list to calculate the number of classrooms in each school\n    classrooms = []\n    # calculate the total number of classrooms in each school\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            classrooms.append(stem * 10 + leaf[j])\n    # filter the schools where the total number of classrooms is greater than or equal to min_classrooms and less than max_classrooms\n    filtered = [classroom for classroom in classrooms if min_classrooms <= classroom < max_classrooms]\n    # count the number of unique schools\n    num_schools = len(set(filtered))\n    return num_schools\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6],\n    'Leaf': [[3, 8], [1, 5, 7, 8], [1, 2], [0, 0, 3, 3, 5, 5, 6, 7, 8], [1, 2, 3, 8], [0, 6, 9]]\n})\n# Set the minimum and maximum number of classrooms\nmin_classrooms = 58\nmax_classrooms = 65\n# Call the tool to solve the problem\nprint(count_schools_with_classrooms(df, min_classrooms, max_classrooms))","question":"For a social studies project, Victoria counted the number of classrooms in each school in the city. How many schools have at least 58 classrooms but fewer than 65 classrooms?","prediction_code":"import pandas as pd\n\ndef count_schools_with_classrooms(df, min_classrooms, max_classrooms):\n    \"\"\"\n    This function takes in a pandas dataframe of classrooms per school and returns the number of schools that have at least min_classrooms but fewer than max_classrooms classrooms.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of classrooms per school.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_classrooms (int): The minimum number of classrooms required.\n    max_classrooms (int): The maximum number of classrooms allowed.\n    Returns:\n    int: The number of schools that have at least min_classrooms but fewer than max_classrooms classrooms.\n    \"\"\"\n    # prepare a list to calculate the number of classrooms in each school\n    classrooms = []\n    # calculate the total number of classrooms in each school\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            classrooms.append(stem * 10 + leaf[j])\n    # filter the schools where the total number of classrooms is greater than or equal to min_classrooms and less than max_classrooms\n    filtered = [classroom for classroom in classrooms if min_classrooms <= classroom < max_classrooms]\n    # count the number of unique schools\n    num_schools = len(set(filtered))\n    return num_schools","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6],\n    'Leaf': [[3, 8], [1, 5, 7, 8], [1, 2], [0, 0, 3, 3, 5, 5, 6, 7, 8], [1, 2, 3, 8], [0, 6, 9]]\n})\n# Set the minimum and maximum number of classrooms\nmin_classrooms = 58\nmax_classrooms = 65\n# Call the tool to solve the problem\nprint(count_schools_with_classrooms(df, min_classrooms, max_classrooms))","table":"Name: Classrooms per school\nUnit: schools\nContent:\nStem | Leaf \n1 | 3, 8\n2 | 1, 5, 7, 8\n3 | 1, 2\n4 | 0, 0, 3, 3, 5, 5, 6, 7, 8\n5 | 1, 2, 3, 8\n6 | 0, 6, 9"}
{"level":7,"answer":26.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of orders, and returns the total cost of the orders.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['lemon bars', 'puffed rice bars', 'cream cheese bars', 'coffee cake', 'popcorn balls'],\n    'Price': [7, 8, 8, 3, 6]\n})\n\n# Initialize the orders dictionary\norders = {\n    'coffee cake': 4,\n    'lemon bars': 2\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","question":"Pedro buys 4 pounds of coffee cake and 2 pounds of lemon bars. How much does he spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of orders, and returns the total cost of the orders.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['lemon bars', 'puffed rice bars', 'cream cheese bars', 'coffee cake', 'popcorn balls'],\n    'Price': [7, 8, 8, 3, 6]\n})\n\n# Initialize the orders dictionary\norders = {\n    'coffee cake': 4,\n    'lemon bars': 2\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","table":"Name: None\nUnit: $\nContent:\nlemon bars | $7 per lb\npuffed rice bars | $8 per lb\ncream cheese bars | $8 per lb\ncoffee cake | $3 per lb\npopcorn balls | $6 per lb"}
{"level":7,"answer":30.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(beads_df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the prices of different types of beads and a dictionary of orders, and returns the total cost of the orders using pandas.\n    Args:\n    beads_df (pd.DataFrame): A pandas DataFrame containing the types of beads and their prices with columns 'Bead' and 'Price'.\n    orders (dict): A dictionary where the keys are bead types and the values are the number of pounds ordered for each type.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the bead types and calculate the cost for each ordered type\n    for bead, pounds in orders.items():\n        # Filter the DataFrame for the specific bead type\n        bead_df = beads_df[beads_df['Bead'] == bead]\n        if not bead_df.empty:\n            bead_price = bead_df['Price'].values[0]\n            total_cost += pounds * bead_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\nbeads_df = pd.DataFrame({\n    'Bead': ['square beads', 'star-shaped beads', 'flower-shaped beads', 'spherical beads', 'rectangular beads', 'oval beads', 'heart-shaped beads'],\n    'Price': [5, 3, 6, 7, 6, 8, 8]\n})\n\n# Initialize the orders dictionary\norders = {\n    'star-shaped beads': 2,\n    'flower-shaped beads': 4\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(beads_df, orders))","question":"Lisa buys 2 pounds of star-shaped beads and 4 pounds of flower-shaped beads. What is the total cost?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(beads_df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the prices of different types of beads and a dictionary of orders, and returns the total cost of the orders using pandas.\n    Args:\n    beads_df (pd.DataFrame): A pandas DataFrame containing the types of beads and their prices with columns 'Bead' and 'Price'.\n    orders (dict): A dictionary where the keys are bead types and the values are the number of pounds ordered for each type.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the bead types and calculate the cost for each ordered type\n    for bead, pounds in orders.items():\n        # Filter the DataFrame for the specific bead type\n        bead_df = beads_df[beads_df['Bead'] == bead]\n        if not bead_df.empty:\n            bead_price = bead_df['Price'].values[0]\n            total_cost += pounds * bead_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\nbeads_df = pd.DataFrame({\n    'Bead': ['square beads', 'star-shaped beads', 'flower-shaped beads', 'spherical beads', 'rectangular beads', 'oval beads', 'heart-shaped beads'],\n    'Price': [5, 3, 6, 7, 6, 8, 8]\n})\n\n# Initialize the orders dictionary\norders = {\n    'star-shaped beads': 2,\n    'flower-shaped beads': 4\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(beads_df, orders))","table":"Name: None\nUnit: $\nContent:\nsquare beads | $5\/lb\nstar-shaped beads | $3\/lb\nflower-shaped beads | $6\/lb\nspherical beads | $7\/lb\nrectangular beads | $6\/lb\noval beads | $8\/lb\nheart-shaped beads | $8\/lb"}
{"level":6,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of bird sightings and returns the median of the number of birds seen.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of birds seen each day.\n    The DataFrame should have columns 'Day' and 'Number of birds'.\n    Returns:\n    float: The median of the number of birds seen.\n    \"\"\"\n    # Get the 'Number of birds' column as a Series\n    bird_counts = df['Number of birds']\n    \n    # Calculate the median using pandas\n    median = bird_counts.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n    'Number of birds': [8, 4, 4, 5, 8, 4, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"Chloe went on a bird watching trip and jotted down the number of birds she saw each day. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of bird sightings and returns the median of the number of birds seen.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of birds seen each day.\n    The DataFrame should have columns 'Day' and 'Number of birds'.\n    Returns:\n    float: The median of the number of birds seen.\n    \"\"\"\n    # Get the 'Number of birds' column as a Series\n    bird_counts = df['Number of birds']\n    \n    # Calculate the median using pandas\n    median = bird_counts.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n    'Number of birds': [8, 4, 4, 5, 8, 4, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Number of birds\nUnit: None\nContent:\nDay | Number of birds\nMonday | 8\nTuesday | 4\nWednesday | 4\nThursday | 5\nFriday | 8\nSaturday | 4\nSunday | 9"}
{"level":6,"answer":16.8,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of item prices per pound and calculates the total cost of a specific item based on its weight.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing item names and their prices per pound with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    weight (float): The weight of the item in pounds.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * weight\n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['silk scraps', 'lace scraps', 'denim scraps', 'felt scraps', 'canvas scraps'],\n    'Price': [8, 12, 9, 10, 10]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'lace scraps', 1.4))","question":"Lola buys 1.4 pounds of lace scraps. What is the total cost?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of item prices per pound and calculates the total cost of a specific item based on its weight.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing item names and their prices per pound with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    weight (float): The weight of the item in pounds.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * weight\n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['silk scraps', 'lace scraps', 'denim scraps', 'felt scraps', 'canvas scraps'],\n    'Price': [8, 12, 9, 10, 10]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'lace scraps', 1.4))","table":"Name: None\nUnit: $\nContent:\nsilk scraps | $8 per lb\nlace scraps | $12 per lb\ndenim scraps | $9 per lb\nfelt scraps | $10 per lb\ncanvas scraps | $10 per lb"}
{"level":5,"answer":4.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of tennis balls hit by students and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and number of tennis balls hit by students.\n    The dataframe should contain \"Name\" and \"Number of tennis balls\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of tennis balls\" column\n    min_value = df['Number of tennis balls'].min()\n    max_value = df['Number of tennis balls'].max()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Denise', 'Jasmine', 'Sophie', 'Lucia', 'Oliver'],\n    'Number of tennis balls': [95, 94, 93, 97, 94]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"The gym teacher wrote down how many tennis balls his students hit in half an hour. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of tennis balls hit by students and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and number of tennis balls hit by students.\n    The dataframe should contain \"Name\" and \"Number of tennis balls\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of tennis balls\" column\n    min_value = df['Number of tennis balls'].min()\n    max_value = df['Number of tennis balls'].max()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Denise', 'Jasmine', 'Sophie', 'Lucia', 'Oliver'],\n    'Number of tennis balls': [95, 94, 93, 97, 94]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Hitting tennis balls\nUnit: None\nContent:\nName | Number of tennis balls\nDenise | 95\nJasmine | 94\nSophie | 93\nLucia | 97\nOliver | 94"}
{"level":7,"answer":0.0,"prediction":"import pandas as pd\n\ndef count_students_with_48_points(df):\n    \"\"\"\n    This function takes in a pandas dataframe of test scores per student, and returns the number of students who scored exactly 48 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the test scores per student.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of students who scored exactly 48 points.\n    \"\"\"\n    # prepare a list to store the test scores of each student\n    scores = []\n    # iterate through the dataframe and extract the test scores\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # count the number of students who scored exactly 48 points\n    num_students = scores.count(48)\n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[4, 8], [], [3], [1, 2], [], [0], [4, 8, 8], [0]]\n})\n# Call the tool to solve the problem\nprint(count_students_with_48_points(df))","question":"Principal Crawford reported the state test scores from some students at her school. How many students scored exactly 48 points?","prediction_code":"import pandas as pd\n\ndef count_students_with_48_points(df):\n    \"\"\"\n    This function takes in a pandas dataframe of test scores per student, and returns the number of students who scored exactly 48 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the test scores per student.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of students who scored exactly 48 points.\n    \"\"\"\n    # prepare a list to store the test scores of each student\n    scores = []\n    # iterate through the dataframe and extract the test scores\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # count the number of students who scored exactly 48 points\n    num_students = scores.count(48)\n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[4, 8], [], [3], [1, 2], [], [0], [4, 8, 8], [0]]\n})\n# Call the tool to solve the problem\nprint(count_students_with_48_points(df))","table":"Name: Test scores\nUnit: students\nContent:\nStem | Leaf \n2 | 4, 8\n3 | \n4 | 3\n5 | 1, 2\n6 | \n7 | 0\n8 | 4, 8, 8\n9 | 0"}
{"level":5,"answer":0.14,"prediction":"import pandas as pd\n\ndef calculate_total_cost(table, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table and a list of items, and returns the total cost of the items using pandas.\n    Args:\n    table (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of item names.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = table[table['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['shapes stencil', 'wooden block', 'red kazoo', 'green bouncy ball'],\n    'Price': [0.07, 0.01, 0.03, 0.06]\n})\n\n# Define the items to calculate the total cost\nitems = ['wooden block', 'shapes stencil', 'green bouncy ball']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, items)\n\n# Print out the answer\nprint(total_cost)","question":"How much money does Jasmine need to buy a wooden block, a shapes stencil, and a green bouncy ball?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(table, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table and a list of items, and returns the total cost of the items using pandas.\n    Args:\n    table (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of item names.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = table[table['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['shapes stencil', 'wooden block', 'red kazoo', 'green bouncy ball'],\n    'Price': [0.07, 0.01, 0.03, 0.06]\n})\n\n# Define the items to calculate the total cost\nitems = ['wooden block', 'shapes stencil', 'green bouncy ball']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, items)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\nshapes stencil | $0.07\nwooden block | $0.01\nred kazoo | $0.03\ngreen bouncy ball | $0.06"}
{"level":8,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_day, end_day):\n    \"\"\"\n    This function takes in a pandas DataFrame of leftover loaves of bread per day and calculates the rate of change between two given days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of leftover loaves of bread per day.\n    The DataFrame should have columns 'Day' and 'Leftover loaves'.\n    start_day (str): The starting day for calculating the rate of change.\n    end_day (str): The ending day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given days.\n    \"\"\"\n    # Filter the DataFrame for the start and end days\n    start_loaves = df[df['Day'] == start_day]['Leftover loaves'].values[0]\n    end_loaves = df[df['Day'] == end_day]['Leftover loaves'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_loaves - start_loaves) \/ (df.index[df['Day'] == end_day][0] - df.index[df['Day'] == start_day][0])\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Leftover loaves': [28, 33, 29, 33, 28]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Tuesday', 'Wednesday'))","question":"A vendor who sold bread at farmers' markets counted the number of leftover loaves at the end of each day. According to the table, what was the rate of change between Tuesday and Wednesday?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_day, end_day):\n    \"\"\"\n    This function takes in a pandas DataFrame of leftover loaves of bread per day and calculates the rate of change between two given days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of leftover loaves of bread per day.\n    The DataFrame should have columns 'Day' and 'Leftover loaves'.\n    start_day (str): The starting day for calculating the rate of change.\n    end_day (str): The ending day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given days.\n    \"\"\"\n    # Filter the DataFrame for the start and end days\n    start_loaves = df[df['Day'] == start_day]['Leftover loaves'].values[0]\n    end_loaves = df[df['Day'] == end_day]['Leftover loaves'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_loaves - start_loaves) \/ (df.index[df['Day'] == end_day][0] - df.index[df['Day'] == start_day][0])\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Leftover loaves': [28, 33, 29, 33, 28]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Tuesday', 'Wednesday'))","table":"Name: Loaves of leftover bread\nUnit: loaves per day\nContent:\nDay | Leftover loaves\nTuesday | 28\nWednesday | 33\nThursday | 29\nFriday | 33\nSaturday | 28"}
{"level":5,"answer":3.0,"prediction":"import pandas as pd\n\ndef count_bins_with_86_toys(df):\n    \"\"\"\n    This function takes in a pandas dataframe of toys per bin, and returns the number of bins that have exactly 86 toys.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of toys per bin.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of bins that have exactly 86 toys.\n    \"\"\"\n    # prepare a list to calculate the number of toys in each bin\n    toys = []\n    # calculate the total number of toys in each bin\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            toys.append(stem * 10 + leaf[j])\n    # filter the bins where the total number of toys is equal to 86\n    filtered = [toy for toy in toys if toy == 86]\n    # count the number of bins\n    num_bins = len(filtered)\n    return num_bins\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[6], [], [2, 5], [], [0, 5], [0, 1], [], [1, 6, 6, 6]]\n})\n# Call the tool to solve the problem\nprint(count_bins_with_86_toys(df))","question":"A toy store employee counted the number of toys in each bin in the sale section. How many bins had exactly 86 toys?","prediction_code":"import pandas as pd\n\ndef count_bins_with_86_toys(df):\n    \"\"\"\n    This function takes in a pandas dataframe of toys per bin, and returns the number of bins that have exactly 86 toys.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of toys per bin.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of bins that have exactly 86 toys.\n    \"\"\"\n    # prepare a list to calculate the number of toys in each bin\n    toys = []\n    # calculate the total number of toys in each bin\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            toys.append(stem * 10 + leaf[j])\n    # filter the bins where the total number of toys is equal to 86\n    filtered = [toy for toy in toys if toy == 86]\n    # count the number of bins\n    num_bins = len(filtered)\n    return num_bins","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[6], [], [2, 5], [], [0, 5], [0, 1], [], [1, 6, 6, 6]]\n})\n# Call the tool to solve the problem\nprint(count_bins_with_86_toys(df))","table":"Name: Toys per bin\nUnit: bins\nContent:\nStem | Leaf \n1 | 6\n2 | \n3 | 2, 5\n4 | \n5 | 0, 5\n6 | 0, 1\n7 | \n8 | 1, 6, 6, 6"}
{"level":7,"answer":1.04,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its price per unit and the quantity purchased.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information for different items.\n    item (str): The name of the item for which the total cost needs to be calculated.\n    quantity (float): The quantity of the item purchased.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Extract the price per unit from the DataFrame\n        price_per_unit = float(item_df['Unit'].values[0].split('\/')[0].strip('$'))\n        \n        # Calculate the total cost\n        total_cost = price_per_unit * quantity\n        \n        return total_cost\n    else:\n        return None\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['beets', 'potatoes', 'yams', 'carrots', 'zucchini'],\n    'Unit': ['$1.11\/kilogram', '$0.44\/kilogram', '$0.32\/kilogram', '$0.93\/kilogram', '$0.52\/kilogram']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'zucchini', 2))","question":"Ken buys 2 kilograms of zucchini. How much does he spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its price per unit and the quantity purchased.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information for different items.\n    item (str): The name of the item for which the total cost needs to be calculated.\n    quantity (float): The quantity of the item purchased.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Extract the price per unit from the DataFrame\n        price_per_unit = float(item_df['Unit'].values[0].split('\/')[0].strip('$'))\n        \n        # Calculate the total cost\n        total_cost = price_per_unit * quantity\n        \n        return total_cost\n    else:\n        return None","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['beets', 'potatoes', 'yams', 'carrots', 'zucchini'],\n    'Unit': ['$1.11\/kilogram', '$0.44\/kilogram', '$0.32\/kilogram', '$0.93\/kilogram', '$0.52\/kilogram']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'zucchini', 2))","table":"Name: None\nUnit: $\nContent:\nbeets | $1.11\/kilogram\npotatoes | $0.44\/kilogram\nyams | $0.32\/kilogram\ncarrots | $0.93\/kilogram\nzucchini | $0.52\/kilogram"}
{"level":5,"answer":24.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of train tickets sold and returns the median of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of train tickets sold.\n    The dataframe should contain \"Day\" and \"Number of tickets\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the \"Number of tickets\" column as a Series\n    tickets_series = df['Number of tickets']\n    \n    # Calculate the median using the median() function from pandas Series\n    median = tickets_series.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of tickets': [24, 28, 26, 24, 20]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"The transportation company tracked the number of train tickets sold in the past 5 days. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of train tickets sold and returns the median of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of train tickets sold.\n    The dataframe should contain \"Day\" and \"Number of tickets\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the \"Number of tickets\" column as a Series\n    tickets_series = df['Number of tickets']\n    \n    # Calculate the median using the median() function from pandas Series\n    median = tickets_series.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of tickets': [24, 28, 26, 24, 20]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Train tickets sold\nUnit: None\nContent:\nDay | Number of tickets\nTuesday | 24\nWednesday | 28\nThursday | 26\nFriday | 24\nSaturday | 20"}
{"level":5,"answer":2.0,"prediction":"import pandas as pd\n\ndef count_ponds_with_48_ducks(df):\n    \"\"\"\n    This function takes in a pandas dataframe of ducks per pond, and returns the number of ponds that have exactly 48 ducks.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of ducks per pond.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of ponds that have exactly 48 ducks.\n    \"\"\"\n    # prepare a list to calculate the number of ducks in each pond\n    ducks = []\n    # calculate the total number of ducks in each pond\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            ducks.append(stem * 10 + leaf[j])\n    # filter the ponds where the total number of ducks is equal to 48\n    filtered = [duck for duck in ducks if duck == 48]\n    # count the number of rows\n    num_ponds = len(filtered)\n    return num_ponds\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3, 4, 5],\n    'Leaf': [[1, 3, 8], [7], [0, 2, 4], [9], [0, 1, 3, 4, 8, 8], [2, 5]]\n})\n# Call the tool to solve the problem\nprint(count_ponds_with_48_ducks(df))","question":"Desmond counted the number of ducks at each pond in the city. How many ponds had exactly 48 ducks?","prediction_code":"import pandas as pd\n\ndef count_ponds_with_48_ducks(df):\n    \"\"\"\n    This function takes in a pandas dataframe of ducks per pond, and returns the number of ponds that have exactly 48 ducks.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of ducks per pond.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of ponds that have exactly 48 ducks.\n    \"\"\"\n    # prepare a list to calculate the number of ducks in each pond\n    ducks = []\n    # calculate the total number of ducks in each pond\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            ducks.append(stem * 10 + leaf[j])\n    # filter the ponds where the total number of ducks is equal to 48\n    filtered = [duck for duck in ducks if duck == 48]\n    # count the number of rows\n    num_ponds = len(filtered)\n    return num_ponds","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3, 4, 5],\n    'Leaf': [[1, 3, 8], [7], [0, 2, 4], [9], [0, 1, 3, 4, 8, 8], [2, 5]]\n})\n# Call the tool to solve the problem\nprint(count_ponds_with_48_ducks(df))","table":"Name: Ducks per pond\nUnit: ponds\nContent:\nStem | Leaf \n0 | 1, 3, 8\n1 | 7\n2 | 0, 2, 4\n3 | 9\n4 | 0, 1, 3, 4, 8, 8\n5 | 2, 5"}
{"level":7,"answer":1.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of time spent on homework per day and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the time spent on homework per day.\n    The dataframe should contain \"Day\" and \"Minutes\" columns.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Get the minutes for the two days\n    minutes1 = df[df['Day'] == day1]['Minutes'].values[0]\n    minutes2 = df[df['Day'] == day2]['Minutes'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (minutes2 - minutes1) \/ (df.index[df['Day'] == day2][0] - df.index[df['Day'] == day1][0])\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Minutes': [34, 36, 45, 40, 41]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Friday', 'Saturday'))","question":"Ronald kept track of how long it took to finish his homework each day. According to the table, what was the rate of change between Friday and Saturday?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of time spent on homework per day and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the time spent on homework per day.\n    The dataframe should contain \"Day\" and \"Minutes\" columns.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Get the minutes for the two days\n    minutes1 = df[df['Day'] == day1]['Minutes'].values[0]\n    minutes2 = df[df['Day'] == day2]['Minutes'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (minutes2 - minutes1) \/ (df.index[df['Day'] == day2][0] - df.index[df['Day'] == day1][0])\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Minutes': [34, 36, 45, 40, 41]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Friday', 'Saturday'))","table":"Name: Time Ronald spent on homework\nUnit: minutes per day\nContent:\nDay | Minutes\nTuesday | 34\nWednesday | 36\nThursday | 45\nFriday | 40\nSaturday | 41"}
{"level":6,"answer":6.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of club membership and returns the median of the number of members.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the club names and the number of members.\n    The dataframe should contain \"Club\" and \"Number of members\" columns.\n    Returns:\n    float: The median of the number of members.\n    \"\"\"\n    # Get the number of members column\n    members = df['Number of members']\n    \n    # Calculate the median\n    median = members.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Club': ['French club', 'drama club', 'Japanese club', 'film club', 'speech club'],\n    'Number of members': [5, 8, 5, 6, 10]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"The local high school found out how many members each club had. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of club membership and returns the median of the number of members.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the club names and the number of members.\n    The dataframe should contain \"Club\" and \"Number of members\" columns.\n    Returns:\n    float: The median of the number of members.\n    \"\"\"\n    # Get the number of members column\n    members = df['Number of members']\n    \n    # Calculate the median\n    median = members.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Club': ['French club', 'drama club', 'Japanese club', 'film club', 'speech club'],\n    'Number of members': [5, 8, 5, 6, 10]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Club membership\nUnit: None\nContent:\nClub | Number of members\nFrench club | 5\ndrama club | 8\nJapanese club | 5\nfilm club | 6\nspeech club | 10"}
{"level":1,"answer":30.0,"prediction":"import pandas as pd\n\ndef calculate_rabbits_in_cages(df, num_cages):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of rabbits per cage and the number of cages, and returns the total number of rabbits.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of rabbits per cage.\n    The dataframe should contain \"Number of cages\" and \"Number of rabbits\" columns.\n    num_cages (int): The number of cages to calculate the total number of rabbits.\n    Returns:\n    int: The total number of rabbits in the given number of cages.\n    \"\"\"\n    # Filter the DataFrame for the given number of cages\n    filtered_df = df[df['Number of cages'] <= num_cages]\n    \n    # Calculate the total number of rabbits\n    total_rabbits = filtered_df['Number of rabbits'].sum()\n    \n    return total_rabbits\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of cages': [1, 2, 3, 4, 5, 6],\n    'Number of rabbits': [5, 10, 15, 20, 25, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_rabbits_in_cages(df, 6))","question":"Each cage has 5 rabbits. How many rabbits are in 6 cages?","prediction_code":"import pandas as pd\n\ndef calculate_rabbits_in_cages(df, num_cages):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of rabbits per cage and the number of cages, and returns the total number of rabbits.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of rabbits per cage.\n    The dataframe should contain \"Number of cages\" and \"Number of rabbits\" columns.\n    num_cages (int): The number of cages to calculate the total number of rabbits.\n    Returns:\n    int: The total number of rabbits in the given number of cages.\n    \"\"\"\n    # Filter the DataFrame for the given number of cages\n    filtered_df = df[df['Number of cages'] <= num_cages]\n    \n    # Calculate the total number of rabbits\n    total_rabbits = filtered_df['Number of rabbits'].sum()\n    \n    return total_rabbits","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of cages': [1, 2, 3, 4, 5, 6],\n    'Number of rabbits': [5, 10, 15, 20, 25, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_rabbits_in_cages(df, 6))","table":"Name: None\nUnit: rabbits\nContent:\nNumber of cages | Number of rabbits\n1 | 5\n2 | 10\n3 | 15\n4 | 20\n5 | 25\n6 | ?"}
{"level":8,"answer":22.0,"prediction":"import pandas as pd\n\ndef count_people_spun_greater_than_3(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the frequency of numbers spun on a wheel and returns the number of people who spun a number greater than 3.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the frequency of numbers spun on a wheel.\n    The dataframe should contain \"Number spun\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who spun a number greater than 3.\n    \"\"\"\n    # Filter the DataFrame for numbers greater than 3\n    filtered_df = df[df['Number spun'] > 3]\n    \n    # Sum the frequencies of the filtered numbers\n    num_people = filtered_df['Frequency'].sum()\n    \n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number spun': [1, 2, 3, 4, 5],\n    'Frequency': [8, 15, 7, 17, 5]\n})\n# Call the tool to solve the problem\nprint(count_people_spun_greater_than_3(df))","question":"A game show viewer monitors how often a wheel numbered 1 through 5 stops at each number. How many people spun a number greater than 3?","prediction_code":"import pandas as pd\n\ndef count_people_spun_greater_than_3(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the frequency of numbers spun on a wheel and returns the number of people who spun a number greater than 3.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the frequency of numbers spun on a wheel.\n    The dataframe should contain \"Number spun\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who spun a number greater than 3.\n    \"\"\"\n    # Filter the DataFrame for numbers greater than 3\n    filtered_df = df[df['Number spun'] > 3]\n    \n    # Sum the frequencies of the filtered numbers\n    num_people = filtered_df['Frequency'].sum()\n    \n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number spun': [1, 2, 3, 4, 5],\n    'Frequency': [8, 15, 7, 17, 5]\n})\n# Call the tool to solve the problem\nprint(count_people_spun_greater_than_3(df))","table":"Name: Spinning a wheel numbered 1 through 5\nUnit: None\nContent:\nNumber spun | Frequency\n1 | 8\n2 | 15\n3 | 7\n4 | 17\n5 | 5"}
{"level":3,"answer":3437.0,"prediction":"import pandas as pd\n\ndef calculate_additional_candles(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of candles made each month and returns the difference in the number of candles made between March and February.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of candles made each month.\n    The dataframe should contain \"Month\" and \"Number of candles\" columns.\n    Returns:\n    int: The difference in the number of candles made between March and February.\n    \"\"\"\n    # Filter the DataFrame for March and February rows\n    march_candles = df[df['Month'] == 'March']['Number of candles'].values[0]\n    february_candles = df[df['Month'] == 'February']['Number of candles'].values[0]\n    \n    # Calculate the difference in the number of candles\n    difference = march_candles - february_candles\n    \n    return difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['December', 'January', 'February', 'March', 'April'],\n    'Number of candles': [2973, 8803, 1884, 5321, 6691]\n})\n# Call the tool to solve the problem\nprint(calculate_additional_candles(df))","question":"An employee at the candle factory reported on the number of candles made each month. How many more candles did the factory make in March than in February?","prediction_code":"import pandas as pd\n\ndef calculate_additional_candles(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of candles made each month and returns the difference in the number of candles made between March and February.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of candles made each month.\n    The dataframe should contain \"Month\" and \"Number of candles\" columns.\n    Returns:\n    int: The difference in the number of candles made between March and February.\n    \"\"\"\n    # Filter the DataFrame for March and February rows\n    march_candles = df[df['Month'] == 'March']['Number of candles'].values[0]\n    february_candles = df[df['Month'] == 'February']['Number of candles'].values[0]\n    \n    # Calculate the difference in the number of candles\n    difference = march_candles - february_candles\n    \n    return difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['December', 'January', 'February', 'March', 'April'],\n    'Number of candles': [2973, 8803, 1884, 5321, 6691]\n})\n# Call the tool to solve the problem\nprint(calculate_additional_candles(df))","table":"Name: Candles made\nUnit: candles\nContent:\nMonth | Number of candles\nDecember | 2,973\nJanuary | 8,803\nFebruary | 1,884\nMarch | 5,321\nApril | 6,691"}
{"level":8,"answer":63.0,"prediction":"import pandas as pd\n\ndef count_total_customers(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of renting movies last month and returns the total number of customers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of times customers rented movies and their corresponding frequencies.\n    The dataframe should contain \"Number of times\" and \"Frequency\" columns.\n    Returns:\n    int: The total number of customers.\n    \"\"\"\n    # Calculate the total number of customers by summing the frequencies\n    total_customers = df['Frequency'].sum()\n    \n    return total_customers\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of times': [0, 1, 2, 3, 4, 5],\n    'Frequency': [11, 18, 12, 0, 5, 17]\n})\n# Call the tool to solve the problem\nprint(count_total_customers(df))","question":"Employees at Dave's Movies tracked the number of movies that customers rented last month. How many customers are there in all?","prediction_code":"import pandas as pd\n\ndef count_total_customers(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of renting movies last month and returns the total number of customers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of times customers rented movies and their corresponding frequencies.\n    The dataframe should contain \"Number of times\" and \"Frequency\" columns.\n    Returns:\n    int: The total number of customers.\n    \"\"\"\n    # Calculate the total number of customers by summing the frequencies\n    total_customers = df['Frequency'].sum()\n    \n    return total_customers","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of times': [0, 1, 2, 3, 4, 5],\n    'Frequency': [11, 18, 12, 0, 5, 17]\n})\n# Call the tool to solve the problem\nprint(count_total_customers(df))","table":"Name: Renting movies last month\nUnit: None\nContent:\nNumber of times | Frequency\n0 | 11\n1 | 18\n2 | 12\n3 | 0\n4 | 5\n5 | 17"}
{"level":7,"answer":4.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of quiz show scores and returns the range of the scores.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the quiz show scores.\n    The dataframe should contain \"Name\" and \"Score\" columns.\n    Returns:\n    int: The range of the scores.\n    \"\"\"\n    # Get the minimum and maximum scores\n    min_score = df['Score'].min()\n    max_score = df['Score'].max()\n    \n    # Calculate the range\n    score_range = max_score - min_score\n    \n    return score_range\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Tessa', 'Kimi', 'Henry', 'Laura', 'Cooper', 'Mary', 'Shawna', 'Adele'],\n    'Score': [5, 2, 3, 6, 4, 5, 2, 2]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"The players on a quiz show received the following scores. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of quiz show scores and returns the range of the scores.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the quiz show scores.\n    The dataframe should contain \"Name\" and \"Score\" columns.\n    Returns:\n    int: The range of the scores.\n    \"\"\"\n    # Get the minimum and maximum scores\n    min_score = df['Score'].min()\n    max_score = df['Score'].max()\n    \n    # Calculate the range\n    score_range = max_score - min_score\n    \n    return score_range","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Tessa', 'Kimi', 'Henry', 'Laura', 'Cooper', 'Mary', 'Shawna', 'Adele'],\n    'Score': [5, 2, 3, 6, 4, 5, 2, 2]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Quiz show scores\nUnit: None\nContent:\nName | Score\nTessa | 5\nKimi | 2\nHenry | 3\nLaura | 6\nCooper | 4\nMary | 5\nShawna | 2\nAdele | 2"}
{"level":5,"answer":27.0,"prediction":"import pandas as pd\n\ndef calculate_vote_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a frequency chart of treats voted by students, and returns the difference between the number of votes for the most popular treat and the least popular treat.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the treats and their frequencies with columns 'Treat' and 'Frequency'.\n    Returns:\n    int: The difference between the number of votes for the most popular treat and the least popular treat.\n    \"\"\"\n    # Find the treat with the maximum frequency\n    max_votes = df['Frequency'].max()\n    \n    # Find the treat with the minimum frequency\n    min_votes = df['Frequency'].min()\n    \n    # Calculate the difference between the maximum and minimum frequencies\n    vote_difference = max_votes - min_votes\n    \n    return vote_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Treat': ['ice pops', 'pizza', 'popcorn', 'cupcakes'],\n    'Frequency': [32, 46, 19, 42]\n})\n# Call the tool to solve the problem\nprint(calculate_vote_difference(df))","question":"The fifth-grade teachers at Pineview Elementary are planning a party for the end of the year. They asked their students to vote for their favorite treat. The teachers recorded the votes in a frequency chart. How many more students voted for the most popular treat than the least popular treat?","prediction_code":"import pandas as pd\n\ndef calculate_vote_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a frequency chart of treats voted by students, and returns the difference between the number of votes for the most popular treat and the least popular treat.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the treats and their frequencies with columns 'Treat' and 'Frequency'.\n    Returns:\n    int: The difference between the number of votes for the most popular treat and the least popular treat.\n    \"\"\"\n    # Find the treat with the maximum frequency\n    max_votes = df['Frequency'].max()\n    \n    # Find the treat with the minimum frequency\n    min_votes = df['Frequency'].min()\n    \n    # Calculate the difference between the maximum and minimum frequencies\n    vote_difference = max_votes - min_votes\n    \n    return vote_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Treat': ['ice pops', 'pizza', 'popcorn', 'cupcakes'],\n    'Frequency': [32, 46, 19, 42]\n})\n# Call the tool to solve the problem\nprint(calculate_vote_difference(df))","table":"Name: Party treats\nUnit: more students\nContent:\nTreat | Frequency\nice pops | 32\npizza | 46\npopcorn | 19\ncupcakes | 42"}
{"level":4,"answer":4.0,"prediction":"import pandas as pd\n\ndef count_books_with_49_characters(df):\n    \"\"\"\n    This function takes in a pandas dataframe of characters per book, and returns the number of books that have exactly 49 characters.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of characters per book.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of books that have exactly 49 characters.\n    \"\"\"\n    # prepare a list to calculate the number of characters in each book\n    characters = []\n    # calculate the total number of characters in each book\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            characters.append(stem * 10 + leaf[j])\n    # filter the books where the total number of characters is equal to 49\n    filtered = [char for char in characters if char == 49]\n    # count the number of books\n    num_books = len(filtered)\n    return num_books\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5],\n    'Leaf': [[3], [4, 7], [6], [9, 9, 9, 9], [0]]\n})\n# Call the tool to solve the problem\nprint(count_books_with_49_characters(df))","question":"Janice kept track of the number of characters in each book she read. How many books had exactly 49 characters?","prediction_code":"import pandas as pd\n\ndef count_books_with_49_characters(df):\n    \"\"\"\n    This function takes in a pandas dataframe of characters per book, and returns the number of books that have exactly 49 characters.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of characters per book.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of books that have exactly 49 characters.\n    \"\"\"\n    # prepare a list to calculate the number of characters in each book\n    characters = []\n    # calculate the total number of characters in each book\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            characters.append(stem * 10 + leaf[j])\n    # filter the books where the total number of characters is equal to 49\n    filtered = [char for char in characters if char == 49]\n    # count the number of books\n    num_books = len(filtered)\n    return num_books","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5],\n    'Leaf': [[3], [4, 7], [6], [9, 9, 9, 9], [0]]\n})\n# Call the tool to solve the problem\nprint(count_books_with_49_characters(df))","table":"Name: Characters per book\nUnit: None\nContent:\nStem | Leaf \n1 | 3\n2 | 4, 7\n3 | 6\n4 | 9, 9, 9, 9\n5 | 0"}
{"level":8,"answer":4.0,"prediction":"import pandas as pd\n\ndef count_scarves_between_lengths(df, min_length, max_length):\n    \"\"\"\n    This function takes in a pandas DataFrame of scarf lengths and returns the number of scarves that are at least min_length centimeters but less than max_length centimeters.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the lengths of scarves.\n    The DataFrame should contain \"Stem\" and \"Leaf\" columns.\n    min_length (int): The minimum length of scarves to consider.\n    max_length (int): The maximum length of scarves to consider.\n    Returns:\n    int: The number of scarves that are at least min_length centimeters but less than max_length centimeters.\n    \"\"\"\n    # prepare a list to store the lengths of scarves\n    lengths = []\n    # calculate the total length of each scarf\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            lengths.append(stem * 10 + leaf[j])\n    # filter the scarves that are at least min_length centimeters but less than max_length centimeters\n    filtered = [length for length in lengths if min_length <= length < max_length]\n    # count the number of scarves\n    num_scarves = len(filtered)\n    return num_scarves\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [6, 7, 8, 9],\n    'Leaf': [[9], [1, 4, 8], [7, 7], [0]]\n})\n# Call the tool to solve the problem\nprint(count_scarves_between_lengths(df, 60, 80))","question":"Lisa measured the length of each scarf in the clothing store where she works. How many scarves are at least 60 centimeters but less than 80 centimeters?","prediction_code":"import pandas as pd\n\ndef count_scarves_between_lengths(df, min_length, max_length):\n    \"\"\"\n    This function takes in a pandas DataFrame of scarf lengths and returns the number of scarves that are at least min_length centimeters but less than max_length centimeters.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the lengths of scarves.\n    The DataFrame should contain \"Stem\" and \"Leaf\" columns.\n    min_length (int): The minimum length of scarves to consider.\n    max_length (int): The maximum length of scarves to consider.\n    Returns:\n    int: The number of scarves that are at least min_length centimeters but less than max_length centimeters.\n    \"\"\"\n    # prepare a list to store the lengths of scarves\n    lengths = []\n    # calculate the total length of each scarf\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            lengths.append(stem * 10 + leaf[j])\n    # filter the scarves that are at least min_length centimeters but less than max_length centimeters\n    filtered = [length for length in lengths if min_length <= length < max_length]\n    # count the number of scarves\n    num_scarves = len(filtered)\n    return num_scarves","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [6, 7, 8, 9],\n    'Leaf': [[9], [1, 4, 8], [7, 7], [0]]\n})\n# Call the tool to solve the problem\nprint(count_scarves_between_lengths(df, 60, 80))","table":"Name: Scarf lengths (centimeters)\nUnit: scarves\nContent:\nStem | Leaf \n6 | 9\n7 | 1, 4, 8\n8 | 7, 7\n9 | 0"}
{"level":6,"answer":10.0,"prediction":"import pandas as pd\n\ndef count_racks_with_ties(df):\n    \"\"\"\n    This function takes in a pandas dataframe of ties per rack, and returns the number of racks that have at least 30 ties but fewer than 60 ties.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of ties per rack.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of racks that have at least 30 ties but fewer than 60 ties.\n    \"\"\"\n    # prepare a list to calculate the number of ties on each rack\n    ties = []\n    # calculate the total number of ties on each rack\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            ties.append(stem * 10 + leaf[j])\n    # filter the racks where the total number of ties is greater than or equal to 30 and less than 60\n    filtered = [tie for tie in ties if 30 <= tie < 60]\n    # count the number of racks\n    num_racks = len(filtered)\n    return num_racks\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6],\n    'Leaf': [[1, 2, 6, 7, 7], [1], [1, 4, 6, 8], [2, 3, 6, 6, 9], [3, 5, 6, 7]]\n})\n# Call the tool to solve the problem\nprint(count_racks_with_ties(df))","question":"The employee at the department store counted the number of ties on each tie rack. How many racks have at least 30 ties but fewer than 60 ties?","prediction_code":"import pandas as pd\n\ndef count_racks_with_ties(df):\n    \"\"\"\n    This function takes in a pandas dataframe of ties per rack, and returns the number of racks that have at least 30 ties but fewer than 60 ties.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of ties per rack.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of racks that have at least 30 ties but fewer than 60 ties.\n    \"\"\"\n    # prepare a list to calculate the number of ties on each rack\n    ties = []\n    # calculate the total number of ties on each rack\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            ties.append(stem * 10 + leaf[j])\n    # filter the racks where the total number of ties is greater than or equal to 30 and less than 60\n    filtered = [tie for tie in ties if 30 <= tie < 60]\n    # count the number of racks\n    num_racks = len(filtered)\n    return num_racks","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6],\n    'Leaf': [[1, 2, 6, 7, 7], [1], [1, 4, 6, 8], [2, 3, 6, 6, 9], [3, 5, 6, 7]]\n})\n# Call the tool to solve the problem\nprint(count_racks_with_ties(df))","table":"Name: Ties per rack\nUnit: racks\nContent:\nStem | Leaf \n2 | 1, 2, 6, 7, 7\n3 | 1\n4 | 1, 4, 6, 8\n5 | 2, 3, 6, 6, 9\n6 | 3, 5, 6, 7"}
{"level":8,"answer":90.0,"prediction":"import pandas as pd\n\ndef find_highest_score(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of science test scores and returns the highest score.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the science test scores.\n    The DataFrame should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The highest score.\n    \"\"\"\n    # Initialize the highest score\n    highest_score = 0\n    \n    # Iterate through the rows of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # Iterate through the leaf values in each row\n        for j in range(len(leaf)):\n            score = stem * 10 + leaf[j]\n            # Update the highest score if the current score is higher\n            if score > highest_score:\n                highest_score = score\n    \n    return highest_score\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[4, 9], [], [], [3, 8], [0, 2, 6], [], [4], [1, 4], [0]]\n})\n# Call the tool to solve the problem\nprint(find_highest_score(df))","question":"Mrs. Ballard, the science teacher, informed her students of their scores on Monday's test. What is the highest score?","prediction_code":"import pandas as pd\n\ndef find_highest_score(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of science test scores and returns the highest score.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the science test scores.\n    The DataFrame should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The highest score.\n    \"\"\"\n    # Initialize the highest score\n    highest_score = 0\n    \n    # Iterate through the rows of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # Iterate through the leaf values in each row\n        for j in range(len(leaf)):\n            score = stem * 10 + leaf[j]\n            # Update the highest score if the current score is higher\n            if score > highest_score:\n                highest_score = score\n    \n    return highest_score","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[4, 9], [], [], [3, 8], [0, 2, 6], [], [4], [1, 4], [0]]\n})\n# Call the tool to solve the problem\nprint(find_highest_score(df))","table":"Name: Science test scores\nUnit: points\nContent:\nStem | Leaf \n1 | 4, 9\n2 | \n3 | \n4 | 3, 8\n5 | 0, 2, 6\n6 | \n7 | 4\n8 | 1, 4\n9 | 0"}
{"level":5,"answer":0.26,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['bright yellow highlighter', 'thin blue marker', 'red ballpoint pen', 'package of pencil lead', 'black pen'],\n    'Price': [0.82, 0.65, 0.60, 0.56, 0.28]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'bright yellow highlighter', 'package of pencil lead'))","question":"How much more does a bright yellow highlighter cost than a package of pencil lead?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['bright yellow highlighter', 'thin blue marker', 'red ballpoint pen', 'package of pencil lead', 'black pen'],\n    'Price': [0.82, 0.65, 0.60, 0.56, 0.28]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'bright yellow highlighter', 'package of pencil lead'))","table":"Name: None\nUnit: $\nContent:\nbright yellow highlighter | $0.82\nthin blue marker | $0.65\nred ballpoint pen | $0.60\npackage of pencil lead | $0.56\nblack pen | $0.28"}
{"level":1,"answer":30.0,"prediction":"import pandas as pd\n\ndef calculate_total_seagulls(df, num_roofs):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of seagulls per roof and the number of roofs, and returns the total number of seagulls.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of seagulls per roof.\n    The dataframe should contain \"Number of roofs\" and \"Number of seagulls\" columns.\n    num_roofs (int): The number of roofs to calculate the total number of seagulls.\n    Returns:\n    int: The total number of seagulls on the given number of roofs.\n    \"\"\"\n    # Filter the DataFrame for the specific number of roofs\n    df_filtered = df[df['Number of roofs'] == num_roofs]\n    \n    # Get the number of seagulls for the given number of roofs\n    num_seagulls = df_filtered['Number of seagulls'].values[0]\n    \n    # Calculate the total number of seagulls\n    total_seagulls = num_seagulls * num_roofs\n    \n    return total_seagulls\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of roofs': [1, 2, 3],\n    'Number of seagulls': [10, 20, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_seagulls(df, 3))","question":"Each roof has 10 seagulls. How many seagulls are on 3 roofs?","prediction_code":"import pandas as pd\n\ndef calculate_total_seagulls(df, num_roofs):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of seagulls per roof and the number of roofs, and returns the total number of seagulls.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of seagulls per roof.\n    The dataframe should contain \"Number of roofs\" and \"Number of seagulls\" columns.\n    num_roofs (int): The number of roofs to calculate the total number of seagulls.\n    Returns:\n    int: The total number of seagulls on the given number of roofs.\n    \"\"\"\n    # Filter the DataFrame for the specific number of roofs\n    df_filtered = df[df['Number of roofs'] == num_roofs]\n    \n    # Get the number of seagulls for the given number of roofs\n    num_seagulls = df_filtered['Number of seagulls'].values[0]\n    \n    # Calculate the total number of seagulls\n    total_seagulls = num_seagulls * num_roofs\n    \n    return total_seagulls","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of roofs': [1, 2, 3],\n    'Number of seagulls': [10, 20, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_seagulls(df, 3))","table":"Name: None\nUnit: seagulls\nContent:\nNumber of roofs | Number of seagulls\n1 | 10\n2 | 20\n3 | ?"}
{"level":5,"answer":12.0,"prediction":"import pandas as pd\n\ndef calculate_mean_miles(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of running miles and returns the mean of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the names and miles of the track team members.\n    The dataframe should contain \"Name\" and \"Miles\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the miles column\n    mean_miles = df['Miles'].mean()\n    \n    return mean_miles\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Nora', 'Jasper', 'Roger', 'Aaron', 'Oscar', 'Martin', 'Lillian'],\n    'Miles': [16, 10, 12, 11, 11, 12, 12]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_miles(df))","question":"The members of the track team compared how many miles they ran last week. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean_miles(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of running miles and returns the mean of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the names and miles of the track team members.\n    The dataframe should contain \"Name\" and \"Miles\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the miles column\n    mean_miles = df['Miles'].mean()\n    \n    return mean_miles","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Nora', 'Jasper', 'Roger', 'Aaron', 'Oscar', 'Martin', 'Lillian'],\n    'Miles': [16, 10, 12, 11, 11, 12, 12]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_miles(df))","table":"Name: Running miles\nUnit: None\nContent:\nName | Miles\nNora | 16\nJasper | 10\nRoger | 12\nAaron | 11\nOscar | 11\nMartin | 12\nLillian | 12"}
{"level":8,"answer":9.0,"prediction":"import pandas as pd\n\ndef count_shipments_with_cracked_panes(df):\n    \"\"\"\n    This function takes in a pandas dataframe of cracked window panes per shipment, and returns the number of shipments that have at least 40 cracked window panes but less than 60 cracked window panes.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of cracked window panes per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of shipments that have at least 40 cracked window panes but less than 60 cracked window panes.\n    \"\"\"\n    # prepare a list to calculate the number of cracked window panes in each shipment\n    panes = []\n    # calculate the total number of cracked window panes in each shipment\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            panes.append(stem * 10 + leaf[j])\n    # filter the shipments where the total number of cracked window panes is greater than or equal to 40 and less than 60\n    filtered = [pane for pane in panes if 40 <= pane < 60]\n    # count the number of shipments\n    num_shipments = len(filtered)\n    return num_shipments\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[1], [0, 0, 1, 5], [0, 2, 5, 9, 9], [], [0], [6], [0]]\n})\n# Call the tool to solve the problem\nprint(count_shipments_with_cracked_panes(df))","question":"The employees at Tessa's Construction monitored the number of cracked window panes in each shipment they received. How many shipments had at least 40 cracked window panes but less than 60 cracked window panes?","prediction_code":"import pandas as pd\n\ndef count_shipments_with_cracked_panes(df):\n    \"\"\"\n    This function takes in a pandas dataframe of cracked window panes per shipment, and returns the number of shipments that have at least 40 cracked window panes but less than 60 cracked window panes.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of cracked window panes per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of shipments that have at least 40 cracked window panes but less than 60 cracked window panes.\n    \"\"\"\n    # prepare a list to calculate the number of cracked window panes in each shipment\n    panes = []\n    # calculate the total number of cracked window panes in each shipment\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            panes.append(stem * 10 + leaf[j])\n    # filter the shipments where the total number of cracked window panes is greater than or equal to 40 and less than 60\n    filtered = [pane for pane in panes if 40 <= pane < 60]\n    # count the number of shipments\n    num_shipments = len(filtered)\n    return num_shipments","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[1], [0, 0, 1, 5], [0, 2, 5, 9, 9], [], [0], [6], [0]]\n})\n# Call the tool to solve the problem\nprint(count_shipments_with_cracked_panes(df))","table":"Name: Cracked window panes per shipment\nUnit: shipments\nContent:\nStem | Leaf \n3 | 1\n4 | 0, 0, 1, 5\n5 | 0, 2, 5, 9, 9\n6 | \n7 | 0\n8 | 6\n9 | 0"}
{"level":1,"answer":12.0,"prediction":"import pandas as pd\n\ndef calculate_pairs_of_jeans(df, num_bags):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of pairs of jeans in each shopping bag, and returns the total number of pairs of jeans in a given number of shopping bags.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of pairs of jeans in each shopping bag.\n    The DataFrame should have columns 'Number of shopping bags' and 'Number of pairs of jeans'.\n    num_bags (int): The number of shopping bags to calculate the total number of pairs of jeans.\n    Returns:\n    int: The total number of pairs of jeans in the given number of shopping bags.\n    \"\"\"\n    # Filter the DataFrame for the given number of shopping bags\n    filtered_df = df[df['Number of shopping bags'] <= num_bags]\n    \n    # Calculate the total number of pairs of jeans\n    total_pairs = filtered_df['Number of pairs of jeans'].sum()\n    \n    return total_pairs\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of shopping bags': [1, 2, 3, 4, 5, 6],\n    'Number of pairs of jeans': [2, 4, 6, 8, 10, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_pairs_of_jeans(df, 6))","question":"Each shopping bag has 2 pairs of jeans. How many pairs of jeans are in 6 shopping bags?","prediction_code":"import pandas as pd\n\ndef calculate_pairs_of_jeans(df, num_bags):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of pairs of jeans in each shopping bag, and returns the total number of pairs of jeans in a given number of shopping bags.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of pairs of jeans in each shopping bag.\n    The DataFrame should have columns 'Number of shopping bags' and 'Number of pairs of jeans'.\n    num_bags (int): The number of shopping bags to calculate the total number of pairs of jeans.\n    Returns:\n    int: The total number of pairs of jeans in the given number of shopping bags.\n    \"\"\"\n    # Filter the DataFrame for the given number of shopping bags\n    filtered_df = df[df['Number of shopping bags'] <= num_bags]\n    \n    # Calculate the total number of pairs of jeans\n    total_pairs = filtered_df['Number of pairs of jeans'].sum()\n    \n    return total_pairs","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of shopping bags': [1, 2, 3, 4, 5, 6],\n    'Number of pairs of jeans': [2, 4, 6, 8, 10, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_pairs_of_jeans(df, 6))","table":"Name: None\nUnit: pairs of jeans\nContent:\nNumber of shopping bags | Number of pairs of jeans\n1 | 2\n2 | 4\n3 | 6\n4 | 8\n5 | 10\n6 | ?"}
{"level":6,"answer":4.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of hours spent volunteering and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the days and hours spent volunteering.\n    The DataFrame should have columns 'Day' and 'Hours'.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the 'Hours' column from the DataFrame\n    hours = df['Hours']\n    \n    # Calculate the median using the pandas median function\n    median = hours.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Hours': [2, 8, 9, 4, 8, 4, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"To get credit for meeting his school's community service requirement, Josiah kept a volunteering log. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of hours spent volunteering and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the days and hours spent volunteering.\n    The DataFrame should have columns 'Day' and 'Hours'.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the 'Hours' column from the DataFrame\n    hours = df['Hours']\n    \n    # Calculate the median using the pandas median function\n    median = hours.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Hours': [2, 8, 9, 4, 8, 4, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Hours spent volunteering\nUnit: None\nContent:\nDay | Hours\nSaturday | 2\nSunday | 8\nMonday | 9\nTuesday | 4\nWednesday | 8\nThursday | 4\nFriday | 3"}
{"level":7,"answer":9.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of art contest entries per year and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of art contest entries per year.\n    The dataframe should contain \"Year\" and \"Number of entries\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_entries = df[df['Year'] == start_year]['Number of entries'].values[0]\n    end_entries = df[df['Year'] == end_year]['Number of entries'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_entries - start_entries) \/ start_entries\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2009, 2010, 2011, 2012, 2013],\n    'Number of entries': [39, 25, 34, 32, 25]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2010, 2011))","question":"Mrs. Gordon hosts an annual art contest for kids, and she keeps a record of the number of entries each year. According to the table, what was the rate of change between 2010 and 2011?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of art contest entries per year and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of art contest entries per year.\n    The dataframe should contain \"Year\" and \"Number of entries\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_entries = df[df['Year'] == start_year]['Number of entries'].values[0]\n    end_entries = df[df['Year'] == end_year]['Number of entries'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_entries - start_entries) \/ start_entries\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2009, 2010, 2011, 2012, 2013],\n    'Number of entries': [39, 25, 34, 32, 25]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2010, 2011))","table":"Name: Art contest entries\nUnit: entries per year\nContent:\nYear | Number of entries\n2009 | 39\n2010 | 25\n2011 | 34\n2012 | 32\n2013 | 25"}
{"level":5,"answer":30.26,"prediction":"import pandas as pd\n\ndef calculate_remaining_money(df, initial_money, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, the initial amount of money, and a list of items to buy.\n    It returns the remaining amount of money after buying the specified items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    initial_money (float): The initial amount of money.\n    items (list): A list of items to buy.\n    Returns:\n    float: The remaining amount of money after buying the specified items.\n    \"\"\"\n    # Initialize the remaining money\n    remaining_money = initial_money\n    \n    # Iterate through the items and subtract their prices from the remaining money\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            remaining_money -= item_price\n    \n    return remaining_money\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['hockey ticket', 'play ticket', 'car show ticket', 'concert ticket', 'ballet ticket'],\n    'Price': [44.19, 36.40, 22.85, 72.24, 61.41]\n})\n\n# Set the initial amount of money\ninitial_money = 97.30\n\n# Set the items to buy\nitems = ['hockey ticket', 'car show ticket']\n\n# Call the tool to solve the problem\nremaining_money = calculate_remaining_money(df, initial_money, items)\n\n# Print out the answer\nprint(remaining_money)","question":"Philip has $97.30. How much money will Philip have left if he buys a hockey ticket and a car show ticket?","prediction_code":"import pandas as pd\n\ndef calculate_remaining_money(df, initial_money, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, the initial amount of money, and a list of items to buy.\n    It returns the remaining amount of money after buying the specified items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    initial_money (float): The initial amount of money.\n    items (list): A list of items to buy.\n    Returns:\n    float: The remaining amount of money after buying the specified items.\n    \"\"\"\n    # Initialize the remaining money\n    remaining_money = initial_money\n    \n    # Iterate through the items and subtract their prices from the remaining money\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            remaining_money -= item_price\n    \n    return remaining_money","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['hockey ticket', 'play ticket', 'car show ticket', 'concert ticket', 'ballet ticket'],\n    'Price': [44.19, 36.40, 22.85, 72.24, 61.41]\n})\n\n# Set the initial amount of money\ninitial_money = 97.30\n\n# Set the items to buy\nitems = ['hockey ticket', 'car show ticket']\n\n# Call the tool to solve the problem\nremaining_money = calculate_remaining_money(df, initial_money, items)\n\n# Print out the answer\nprint(remaining_money)","table":"Name: None\nUnit: $\nContent:\nhockey ticket | $44.19\nplay ticket | $36.40\ncar show ticket | $22.85\nconcert ticket | $72.24\nballet ticket | $61.41"}
{"level":7,"answer":1441.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(instrument_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of instruments and their prices, and a list of items to calculate the total cost.\n    Args:\n    instrument_df (pd.DataFrame): A pandas DataFrame containing instruments and their prices with columns 'Name' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = instrument_df[instrument_df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['clarinet', 'oboe', 'cornet', 'flute'],\n    'Price': [494.00, 958.00, 483.00, 522.00]\n})\n\n# Define the items to calculate the total cost\nitems = ['cornet', 'oboe']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Justine need to buy a cornet and an oboe?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(instrument_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of instruments and their prices, and a list of items to calculate the total cost.\n    Args:\n    instrument_df (pd.DataFrame): A pandas DataFrame containing instruments and their prices with columns 'Name' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = instrument_df[instrument_df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['clarinet', 'oboe', 'cornet', 'flute'],\n    'Price': [494.00, 958.00, 483.00, 522.00]\n})\n\n# Define the items to calculate the total cost\nitems = ['cornet', 'oboe']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nclarinet | $494.00\noboe | $958.00\ncornet | $483.00\nflute | $522.00"}
{"level":4,"answer":22.0,"prediction":"import pandas as pd\n\ndef find_smallest_number(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of broken plates per shipment and returns the smallest number of broken plates.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of broken plates per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of broken plates.\n    \"\"\"\n    # prepare a list to store all broken plates\n    broken_plates = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the total number of broken plates in each shipment\n        for j in range(len(leaf)):\n            broken_plates.append(stem * 10 + leaf[j])\n    # find the smallest number of broken plates\n    smallest_number = min(broken_plates)\n    return smallest_number\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[2, 8], [3, 3, 7], [5, 6, 9], [3, 3, 4, 8], [1, 2, 6, 7], [0, 5, 8], [2, 3]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number(df))","question":"A pottery factory kept track of the number of broken plates per shipment last week. What is the smallest number of broken plates?","prediction_code":"import pandas as pd\n\ndef find_smallest_number(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of broken plates per shipment and returns the smallest number of broken plates.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of broken plates per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of broken plates.\n    \"\"\"\n    # prepare a list to store all broken plates\n    broken_plates = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the total number of broken plates in each shipment\n        for j in range(len(leaf)):\n            broken_plates.append(stem * 10 + leaf[j])\n    # find the smallest number of broken plates\n    smallest_number = min(broken_plates)\n    return smallest_number","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[2, 8], [3, 3, 7], [5, 6, 9], [3, 3, 4, 8], [1, 2, 6, 7], [0, 5, 8], [2, 3]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number(df))","table":"Name: Broken plates per shipment\nUnit: broken plates\nContent:\nStem | Leaf \n2 | 2, 8\n3 | 3, 3, 7\n4 | 5, 6, 9\n5 | 3, 3, 4, 8\n6 | 1, 2, 6, 7\n7 | 0, 5, 8\n8 | 2, 3"}
{"level":6,"answer":3.0,"prediction":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of ages and returns the mode of the ages.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the ages of cousins.\n    The DataFrame should have a column named 'Age (years)'.\n    Returns:\n    int: The mode of the ages.\n    \"\"\"\n    # Get the 'Age (years)' column from the DataFrame\n    ages = df['Age (years)']\n    \n    # Calculate the mode of the ages\n    mode = ages.mode().values[0]\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Darnel', 'Elise', 'Tisha', 'Scarlett', 'Jerry', 'Harper', 'Betty', 'Vicky'],\n    'Age (years)': [6, 3, 3, 7, 6, 7, 3, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"A girl compared the ages of her cousins. What is the mode of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of ages and returns the mode of the ages.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the ages of cousins.\n    The DataFrame should have a column named 'Age (years)'.\n    Returns:\n    int: The mode of the ages.\n    \"\"\"\n    # Get the 'Age (years)' column from the DataFrame\n    ages = df['Age (years)']\n    \n    # Calculate the mode of the ages\n    mode = ages.mode().values[0]\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Darnel', 'Elise', 'Tisha', 'Scarlett', 'Jerry', 'Harper', 'Betty', 'Vicky'],\n    'Age (years)': [6, 3, 3, 7, 6, 7, 3, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Ages of cousins\nUnit: None\nContent:\nName | Age (years)\nDarnel | 6\nElise | 3\nTisha | 3\nScarlett | 7\nJerry | 6\nHarper | 7\nBetty | 3\nVicky | 3"}
{"level":3,"answer":0.06,"prediction":"import pandas as pd\n\ndef calculate_total_cost(table, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to be purchased.\n    It returns the total cost of the items.\n    \n    Args:\n    table (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    items (list): A list of items to be purchased.\n    \n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = table[table['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['thin blue marker', 'pink eraser', 'package of crayons', 'thick black marker', 'mechanical pencil'],\n    'Price': [0.04, 0.03, 0.07, 0.06, 0.03]\n})\n\n# Define the items to be purchased\nitems = ['mechanical pencil', 'pink eraser']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, items)\n\n# Print out the answer\nprint(total_cost)","question":"How much money does Sue need to buy a mechanical pencil and a pink eraser?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(table, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to be purchased.\n    It returns the total cost of the items.\n    \n    Args:\n    table (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    items (list): A list of items to be purchased.\n    \n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = table[table['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['thin blue marker', 'pink eraser', 'package of crayons', 'thick black marker', 'mechanical pencil'],\n    'Price': [0.04, 0.03, 0.07, 0.06, 0.03]\n})\n\n# Define the items to be purchased\nitems = ['mechanical pencil', 'pink eraser']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, items)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\nthin blue marker | $0.04\npink eraser | $0.03\npackage of crayons | $0.07\nthick black marker | $0.06\nmechanical pencil | $0.03"}
{"level":6,"answer":0.5,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a given item and quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price of the item\n    price = item_df['Price'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price * quantity\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['white rice', 'brown rice', 'jasmine rice', 'Arborio rice', 'basmati rice'],\n    'Price': [1, 3, 1, 3, 3]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'white rice', 0.5))","question":"Farid purchased 1\/2 of a pound of white rice. What was the total cost?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a given item and quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price of the item\n    price = item_df['Price'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price * quantity\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['white rice', 'brown rice', 'jasmine rice', 'Arborio rice', 'basmati rice'],\n    'Price': [1, 3, 1, 3, 3]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'white rice', 0.5))","table":"Name: None\nUnit: $\nContent:\nwhite rice | $1\/pound\nbrown rice | $3\/pound\njasmine rice | $1\/pound\nArborio rice | $3\/pound\nbasmati rice | $3\/pound"}
{"level":7,"answer":-7.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of emails received per day and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of emails received per day.\n    The dataframe should contain \"Day\" and \"Emails\" columns.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Get the number of emails for the two days\n    emails_day1 = df[df['Day'] == day1]['Emails'].values[0]\n    emails_day2 = df[df['Day'] == day2]['Emails'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (emails_day2 - emails_day1) \/ emails_day1\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Emails': [1, 10, 7, 0, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Wednesday', 'Thursday'))","question":"Ellie kept a tally of the number of emails she received each day for a week. According to the table, what was the rate of change between Wednesday and Thursday?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of emails received per day and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of emails received per day.\n    The dataframe should contain \"Day\" and \"Emails\" columns.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Get the number of emails for the two days\n    emails_day1 = df[df['Day'] == day1]['Emails'].values[0]\n    emails_day2 = df[df['Day'] == day2]['Emails'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (emails_day2 - emails_day1) \/ emails_day1\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Emails': [1, 10, 7, 0, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Wednesday', 'Thursday'))","table":"Name: Emails Ellie received\nUnit: emails per day\nContent:\nDay | Emails\nMonday | 1\nTuesday | 10\nWednesday | 7\nThursday | 0\nFriday | 5"}
{"level":5,"answer":234.0,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame of prices and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the prices of different items.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_price = df[df['Item'] == item1]['Price'].values[0]\n    item2_price = df[df['Item'] == item2]['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item2_price - item1_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['popcorn cart', 'popsicle stand', 'pretzel stand', 'funnel cake stand', 'ice cream truck', 'peanut cart'],\n    'Price': [8685, 8919, 8939, 5299, 8319, 8340]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'popcorn cart', 'popsicle stand'))","question":"How much more does a popsicle stand cost than a popcorn cart?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame of prices and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the prices of different items.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_price = df[df['Item'] == item1]['Price'].values[0]\n    item2_price = df[df['Item'] == item2]['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item2_price - item1_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['popcorn cart', 'popsicle stand', 'pretzel stand', 'funnel cake stand', 'ice cream truck', 'peanut cart'],\n    'Price': [8685, 8919, 8939, 5299, 8319, 8340]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'popcorn cart', 'popsicle stand'))","table":"Name: None\nUnit: $\nContent:\npopcorn cart | $8,685\npopsicle stand | $8,919\npretzel stand | $8,939\nfunnel cake stand | $5,299\nice cream truck | $8,319\npeanut cart | $8,340"}
{"level":1,"answer":30.0,"prediction":"import pandas as pd\n\ndef calculate_charms(df, num_bracelets):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of charms per bracelet and the number of bracelets, and returns the total number of charms.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of charms per bracelet.\n    The DataFrame should have columns 'Number of bracelets' and 'Number of charms'.\n    num_bracelets (int): The number of bracelets.\n    Returns:\n    int: The total number of charms.\n    \"\"\"\n    # Filter the DataFrame for the specific number of bracelets\n    df_filtered = df[df['Number of bracelets'] == num_bracelets]\n    \n    # Get the number of charms for the specific number of bracelets\n    num_charms = df_filtered['Number of charms'].values[0]\n    \n    # Calculate the total number of charms\n    total_charms = num_charms * num_bracelets\n    \n    return total_charms\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of bracelets': [1, 2, 3, 4, 5, 6],\n    'Number of charms': [5, 10, 15, 20, 25, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_charms(df, 6))","question":"Each bracelet has 5 charms. How many charms are on 6 bracelets?","prediction_code":"import pandas as pd\n\ndef calculate_charms(df, num_bracelets):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of charms per bracelet and the number of bracelets, and returns the total number of charms.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of charms per bracelet.\n    The DataFrame should have columns 'Number of bracelets' and 'Number of charms'.\n    num_bracelets (int): The number of bracelets.\n    Returns:\n    int: The total number of charms.\n    \"\"\"\n    # Filter the DataFrame for the specific number of bracelets\n    df_filtered = df[df['Number of bracelets'] == num_bracelets]\n    \n    # Get the number of charms for the specific number of bracelets\n    num_charms = df_filtered['Number of charms'].values[0]\n    \n    # Calculate the total number of charms\n    total_charms = num_charms * num_bracelets\n    \n    return total_charms","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of bracelets': [1, 2, 3, 4, 5, 6],\n    'Number of charms': [5, 10, 15, 20, 25, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_charms(df, 6))","table":"Name: None\nUnit: charms\nContent:\nNumber of bracelets | Number of charms\n1 | 5\n2 | 10\n3 | 15\n4 | 20\n5 | 25\n6 | ?"}
{"level":7,"answer":75.0,"prediction":"import pandas as pd\n\ndef find_largest_number_of_broken_lights(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of broken lights per string and returns the largest number of broken lights.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken lights per string.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of broken lights.\n    \"\"\"\n    # prepare a list to store the number of broken lights\n    broken_lights = []\n    \n    # iterate through each row of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # calculate the total number of broken lights in each string\n        for j in range(len(leaf)):\n            broken_lights.append(stem * 10 + leaf[j])\n    \n    # find the largest number of broken lights\n    largest_number = max(broken_lights)\n    \n    return largest_number\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7],\n    'Leaf': [[1, 4, 9], [0, 2], [1, 3, 4], [5, 5, 6], [4, 5, 6, 6, 9], [2, 5]]\n})\n# Call the tool to solve the problem\nprint(find_largest_number_of_broken_lights(df))","question":"While hanging Christmas lights for neighbors, Zach counted the number of broken lights on each string. What is the largest number of broken lights?","prediction_code":"import pandas as pd\n\ndef find_largest_number_of_broken_lights(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of broken lights per string and returns the largest number of broken lights.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken lights per string.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of broken lights.\n    \"\"\"\n    # prepare a list to store the number of broken lights\n    broken_lights = []\n    \n    # iterate through each row of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # calculate the total number of broken lights in each string\n        for j in range(len(leaf)):\n            broken_lights.append(stem * 10 + leaf[j])\n    \n    # find the largest number of broken lights\n    largest_number = max(broken_lights)\n    \n    return largest_number","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7],\n    'Leaf': [[1, 4, 9], [0, 2], [1, 3, 4], [5, 5, 6], [4, 5, 6, 6, 9], [2, 5]]\n})\n# Call the tool to solve the problem\nprint(find_largest_number_of_broken_lights(df))","table":"Name: Broken lights per string\nUnit: broken lights\nContent:\nStem | Leaf \n2 | 1, 4, 9\n3 | 0, 2\n4 | 1, 3, 4\n5 | 5, 5, 6\n6 | 4, 5, 6, 6, 9\n7 | 2, 5"}
{"level":8,"answer":75.0,"prediction":"import pandas as pd\n\ndef find_highest_score(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of quiz scores and returns the highest score.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the quiz scores.\n    The DataFrame should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The highest score.\n    \"\"\"\n    # Create an empty list to store all the scores\n    scores = []\n    \n    # Iterate through each row of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Iterate through each leaf value in the row\n        for j in range(len(leaf)):\n            # Calculate the score by combining the stem and leaf values\n            score = stem * 10 + leaf[j]\n            # Append the score to the list\n            scores.append(score)\n    \n    # Find the highest score using the max() function\n    highest_score = max(scores)\n    \n    return highest_score\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7],\n    'Leaf': [[2], [1, 2, 4, 5, 5], [0], [4], [2, 2, 3], [5], [0, 1, 5]]\n})\n# Call the tool to solve the problem\nprint(find_highest_score(df))","question":"Ms. Suzuki reported her students' scores on the most recent quiz. What is the highest score?","prediction_code":"import pandas as pd\n\ndef find_highest_score(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of quiz scores and returns the highest score.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the quiz scores.\n    The DataFrame should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The highest score.\n    \"\"\"\n    # Create an empty list to store all the scores\n    scores = []\n    \n    # Iterate through each row of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Iterate through each leaf value in the row\n        for j in range(len(leaf)):\n            # Calculate the score by combining the stem and leaf values\n            score = stem * 10 + leaf[j]\n            # Append the score to the list\n            scores.append(score)\n    \n    # Find the highest score using the max() function\n    highest_score = max(scores)\n    \n    return highest_score","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7],\n    'Leaf': [[2], [1, 2, 4, 5, 5], [0], [4], [2, 2, 3], [5], [0, 1, 5]]\n})\n# Call the tool to solve the problem\nprint(find_highest_score(df))","table":"Name: Quiz scores\nUnit: points\nContent:\nStem | Leaf \n1 | 2\n2 | 1, 2, 4, 5, 5\n3 | 0\n4 | 4\n5 | 2, 2, 3\n6 | 5\n7 | 0, 1, 5"}
{"level":8,"answer":14.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of employees with health care benefits and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of employees with health care benefits for each year.\n    The DataFrame should have \"Year\" and \"Employees\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_employees = df[df['Year'] == start_year]['Employees'].values[0]\n    end_employees = df[df['Year'] == end_year]['Employees'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_employees - start_employees) \/ start_employees * 100\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2014, 2015, 2016, 2017, 2018],\n    'Employees': [10, 24, 36, 46, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2014, 2015))","question":"At Riverside Consulting, the head of human resources examined how the number of employees with health care benefits varied in response to policy changes. According to the table, what was the rate of change between 2014 and 2015?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of employees with health care benefits and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of employees with health care benefits for each year.\n    The DataFrame should have \"Year\" and \"Employees\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_employees = df[df['Year'] == start_year]['Employees'].values[0]\n    end_employees = df[df['Year'] == end_year]['Employees'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_employees - start_employees) \/ start_employees * 100\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2014, 2015, 2016, 2017, 2018],\n    'Employees': [10, 24, 36, 46, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2014, 2015))","table":"Name: Employees with health care benefits\nUnit: employees per year\nContent:\nYear | Employees\n2014 | 10\n2015 | 24\n2016 | 36\n2017 | 46\n2018 | 5"}
{"level":3,"answer":4862.0,"prediction":"import pandas as pd\n\ndef calculate_ticket_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of tickets sold per month and returns the difference in tickets sold between April and June.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of tickets sold per month.\n    The dataframe should contain \"Month\" and \"Number of tickets\" columns.\n    Returns:\n    int: The difference in tickets sold between April and June.\n    \"\"\"\n    # Filter the DataFrame for April and June rows\n    april_tickets = df[df['Month'] == 'April']['Number of tickets'].values[0]\n    june_tickets = df[df['Month'] == 'June']['Number of tickets'].values[0]\n    \n    # Calculate the difference in tickets sold\n    ticket_difference = april_tickets - june_tickets\n    \n    return ticket_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['April', 'May', 'June', 'July'],\n    'Number of tickets': [8878, 2298, 4016, 5620]\n})\n# Call the tool to solve the problem\nprint(calculate_ticket_difference(df))","question":"A movie theater manager counted the number of tickets sold each month. How many more tickets did the theater sell in April than in June?","prediction_code":"import pandas as pd\n\ndef calculate_ticket_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of tickets sold per month and returns the difference in tickets sold between April and June.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of tickets sold per month.\n    The dataframe should contain \"Month\" and \"Number of tickets\" columns.\n    Returns:\n    int: The difference in tickets sold between April and June.\n    \"\"\"\n    # Filter the DataFrame for April and June rows\n    april_tickets = df[df['Month'] == 'April']['Number of tickets'].values[0]\n    june_tickets = df[df['Month'] == 'June']['Number of tickets'].values[0]\n    \n    # Calculate the difference in tickets sold\n    ticket_difference = april_tickets - june_tickets\n    \n    return ticket_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['April', 'May', 'June', 'July'],\n    'Number of tickets': [8878, 2298, 4016, 5620]\n})\n# Call the tool to solve the problem\nprint(calculate_ticket_difference(df))","table":"Name: Tickets sold\nUnit: tickets\nContent:\nMonth | Number of tickets\nApril | 8,878\nMay | 2,298\nJune | 4,016\nJuly | 5,620"}
{"level":3,"answer":988.0,"prediction":"import pandas as pd\n\ndef calculate_visitor_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of art museum visitors and returns the difference in the number of visitors between October and January.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of visitors for each month.\n    The DataFrame should have columns 'Month' and 'Number of visitors'.\n    Returns:\n    int: The difference in the number of visitors between October and January.\n    \"\"\"\n    # Filter the DataFrame for October and January\n    october_visitors = df[df['Month'] == 'October']['Number of visitors'].values[0]\n    january_visitors = df[df['Month'] == 'January']['Number of visitors'].values[0]\n    \n    # Calculate the difference in visitors\n    visitor_difference = october_visitors - january_visitors\n    \n    return visitor_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['October', 'November', 'December', 'January'],\n    'Number of visitors': [6794, 3214, 3185, 5806]\n})\n# Call the tool to solve the problem\nprint(calculate_visitor_difference(df))","question":"The art museum kept records about how many visitors it had in the past 4 months. How many more visitors did the museum have in October than in January?","prediction_code":"import pandas as pd\n\ndef calculate_visitor_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of art museum visitors and returns the difference in the number of visitors between October and January.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of visitors for each month.\n    The DataFrame should have columns 'Month' and 'Number of visitors'.\n    Returns:\n    int: The difference in the number of visitors between October and January.\n    \"\"\"\n    # Filter the DataFrame for October and January\n    october_visitors = df[df['Month'] == 'October']['Number of visitors'].values[0]\n    january_visitors = df[df['Month'] == 'January']['Number of visitors'].values[0]\n    \n    # Calculate the difference in visitors\n    visitor_difference = october_visitors - january_visitors\n    \n    return visitor_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['October', 'November', 'December', 'January'],\n    'Number of visitors': [6794, 3214, 3185, 5806]\n})\n# Call the tool to solve the problem\nprint(calculate_visitor_difference(df))","table":"Name: Art museum visitors\nUnit: visitors\nContent:\nMonth | Number of visitors\nOctober | 6,794\nNovember | 3,214\nDecember | 3,185\nJanuary | 5,806"}
{"level":3,"answer":8940.0,"prediction":"import pandas as pd\n\ndef calculate_total_pumpkins_sold(df, days):\n    \"\"\"\n    This function takes in a pandas DataFrame of pumpkins sold per day and a list of days, and returns the total number of pumpkins sold on those days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of pumpkins sold per day.\n    The dataframe should contain \"Day\" and \"Number of pumpkins\" columns.\n    days (list): A list of days for which the total number of pumpkins sold needs to be calculated.\n    Returns:\n    int: The total number of pumpkins sold on the specified days.\n    \"\"\"\n    # Filter the DataFrame for the specified days\n    filtered_df = df[df['Day'].isin(days)]\n    \n    # Calculate the total number of pumpkins sold on the specified days\n    total_pumpkins_sold = filtered_df['Number of pumpkins'].sum()\n    \n    return total_pumpkins_sold\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday'],\n    'Number of pumpkins': [7873, 1106, 1067]\n})\n\n# Specify the days for which the total number of pumpkins sold needs to be calculated\ndays = ['Friday', 'Sunday']\n\n# Call the tool to solve the problem\nprint(calculate_total_pumpkins_sold(df, days))","question":"A pumpkin patch monitored the number of pumpkins sold each day. How many pumpkins in total did the pumpkin patch sell on Friday and Sunday?","prediction_code":"import pandas as pd\n\ndef calculate_total_pumpkins_sold(df, days):\n    \"\"\"\n    This function takes in a pandas DataFrame of pumpkins sold per day and a list of days, and returns the total number of pumpkins sold on those days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of pumpkins sold per day.\n    The dataframe should contain \"Day\" and \"Number of pumpkins\" columns.\n    days (list): A list of days for which the total number of pumpkins sold needs to be calculated.\n    Returns:\n    int: The total number of pumpkins sold on the specified days.\n    \"\"\"\n    # Filter the DataFrame for the specified days\n    filtered_df = df[df['Day'].isin(days)]\n    \n    # Calculate the total number of pumpkins sold on the specified days\n    total_pumpkins_sold = filtered_df['Number of pumpkins'].sum()\n    \n    return total_pumpkins_sold","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday'],\n    'Number of pumpkins': [7873, 1106, 1067]\n})\n\n# Specify the days for which the total number of pumpkins sold needs to be calculated\ndays = ['Friday', 'Sunday']\n\n# Call the tool to solve the problem\nprint(calculate_total_pumpkins_sold(df, days))","table":"Name: Pumpkins sold\nUnit: pumpkins\nContent:\nDay | Number of pumpkins\nFriday | 7,873\nSaturday | 1,106\nSunday | 1,067"}
{"level":6,"answer":16.0,"prediction":"import pandas as pd\n\ndef count_bags_with_candies(df, min_candies, max_candies):\n    \"\"\"\n    This function takes in a pandas dataframe of candies per bag, and returns the number of bags that have at least min_candies but fewer than max_candies candies.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of candies per bag.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_candies (int): The minimum number of candies required per bag.\n    max_candies (int): The maximum number of candies allowed per bag.\n    Returns:\n    int: The number of bags that have at least min_candies but fewer than max_candies candies.\n    \"\"\"\n    # prepare a list to calculate candies in each bag\n    candies = []\n    # calculate the total number of candies in each bag\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            candies.append(stem * 10 + leaf[j])\n    # filter the bags where the total number of candies is within the specified range\n    filtered = [candy for candy in candies if min_candies <= candy < max_candies]\n    # count the number of rows\n    num_bags = len(filtered)\n    return num_bags\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7],\n    'Leaf': [[0, 8], [5], [2, 2, 3, 4, 5, 9, 9], [5, 6], [1, 3, 5, 8, 9], [2]]\n})\n# Call the tool to solve the problem\nprint(count_bags_with_candies(df, 29, 77))","question":"At a candy factory, butterscotch candies were packaged into bags of different sizes. How many bags had at least 29 butterscotch candies but fewer than 77 butterscotch candies?","prediction_code":"import pandas as pd\n\ndef count_bags_with_candies(df, min_candies, max_candies):\n    \"\"\"\n    This function takes in a pandas dataframe of candies per bag, and returns the number of bags that have at least min_candies but fewer than max_candies candies.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of candies per bag.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_candies (int): The minimum number of candies required per bag.\n    max_candies (int): The maximum number of candies allowed per bag.\n    Returns:\n    int: The number of bags that have at least min_candies but fewer than max_candies candies.\n    \"\"\"\n    # prepare a list to calculate candies in each bag\n    candies = []\n    # calculate the total number of candies in each bag\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            candies.append(stem * 10 + leaf[j])\n    # filter the bags where the total number of candies is within the specified range\n    filtered = [candy for candy in candies if min_candies <= candy < max_candies]\n    # count the number of rows\n    num_bags = len(filtered)\n    return num_bags","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7],\n    'Leaf': [[0, 8], [5], [2, 2, 3, 4, 5, 9, 9], [5, 6], [1, 3, 5, 8, 9], [2]]\n})\n# Call the tool to solve the problem\nprint(count_bags_with_candies(df, 29, 77))","table":"Name: Butterscotch candies per bag\nUnit: bags\nContent:\nStem | Leaf \n2 | 0, 8\n3 | 5\n4 | 2, 2, 3, 4, 5, 9, 9\n5 | 5, 6\n6 | 1, 3, 5, 8, 9\n7 | 2"}
{"level":3,"answer":9504.0,"prediction":"import pandas as pd\n\ndef total_calls_on_friday_and_saturday(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of phone calls received and returns the total number of calls received on Friday and Saturday.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of calls received each day.\n    The dataframe should contain \"Day\" and \"Number of calls\" columns.\n    Returns:\n    int: The total number of calls received on Friday and Saturday.\n    \"\"\"\n    # Filter the DataFrame for Friday and Saturday\n    filtered_df = df[df['Day'].isin(['Friday', 'Saturday'])]\n    \n    # Calculate the total number of calls received on Friday and Saturday\n    total_calls = filtered_df['Number of calls'].sum()\n    \n    return total_calls\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of calls': [8383, 2270, 1356, 8148]\n})\n# Call the tool to solve the problem\nprint(total_calls_on_friday_and_saturday(df))","question":"A technical support line tracked how many calls it received each day. How many calls total did the support line receive on Friday and Saturday?","prediction_code":"import pandas as pd\n\ndef total_calls_on_friday_and_saturday(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of phone calls received and returns the total number of calls received on Friday and Saturday.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of calls received each day.\n    The dataframe should contain \"Day\" and \"Number of calls\" columns.\n    Returns:\n    int: The total number of calls received on Friday and Saturday.\n    \"\"\"\n    # Filter the DataFrame for Friday and Saturday\n    filtered_df = df[df['Day'].isin(['Friday', 'Saturday'])]\n    \n    # Calculate the total number of calls received on Friday and Saturday\n    total_calls = filtered_df['Number of calls'].sum()\n    \n    return total_calls","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of calls': [8383, 2270, 1356, 8148]\n})\n# Call the tool to solve the problem\nprint(total_calls_on_friday_and_saturday(df))","table":"Name: Phone calls received\nUnit: calls\nContent:\nDay | Number of calls\nWednesday | 8,383\nThursday | 2,270\nFriday | 1,356\nSaturday | 8,148"}
{"level":8,"answer":42.0,"prediction":"import pandas as pd\n\ndef count_people_with_at_least_3_trips(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trips to an amusement park last year and returns the number of people who went to the amusement park at least 3 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of trips and their frequencies.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who went to the amusement park at least 3 times.\n    \"\"\"\n    # Filter the DataFrame for trips with at least 3 visits\n    filtered_df = df[df['Number of trips'] >= 3]\n    \n    # Calculate the total number of people who went to the amusement park at least 3 times\n    num_people = filtered_df['Frequency'].sum()\n    \n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [1, 2, 3, 4, 5],\n    'Frequency': [7, 14, 20, 18, 4]\n})\n# Call the tool to solve the problem\nprint(count_people_with_at_least_3_trips(df))","question":"Haley surveyed people at the amusement park where she works and asked them how many times they visited last year. How many people went to an amusement park at least 3 times?","prediction_code":"import pandas as pd\n\ndef count_people_with_at_least_3_trips(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trips to an amusement park last year and returns the number of people who went to the amusement park at least 3 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of trips and their frequencies.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who went to the amusement park at least 3 times.\n    \"\"\"\n    # Filter the DataFrame for trips with at least 3 visits\n    filtered_df = df[df['Number of trips'] >= 3]\n    \n    # Calculate the total number of people who went to the amusement park at least 3 times\n    num_people = filtered_df['Frequency'].sum()\n    \n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [1, 2, 3, 4, 5],\n    'Frequency': [7, 14, 20, 18, 4]\n})\n# Call the tool to solve the problem\nprint(count_people_with_at_least_3_trips(df))","table":"Name: Trips to an amusement park last year\nUnit: None\nContent:\nNumber of trips | Frequency\n1 | 7\n2 | 14\n3 | 20\n4 | 18\n5 | 4"}
{"level":7,"answer":1.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of time spent on homework per day and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the time spent on homework per day.\n    The dataframe should contain \"Day\" and \"Minutes\" columns.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Get the minutes for the two days\n    minutes_day1 = df[df['Day'] == day1]['Minutes'].values[0]\n    minutes_day2 = df[df['Day'] == day2]['Minutes'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (minutes_day2 - minutes_day1) \/ (df.index[df['Day'] == day2][0] - df.index[df['Day'] == day1][0])\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Minutes': [38, 39, 46, 43, 44]\n})\n\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Monday', 'Tuesday'))","question":"Kenny kept track of how long it took to finish his homework each day. According to the table, what was the rate of change between Monday and Tuesday?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of time spent on homework per day and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the time spent on homework per day.\n    The dataframe should contain \"Day\" and \"Minutes\" columns.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Get the minutes for the two days\n    minutes_day1 = df[df['Day'] == day1]['Minutes'].values[0]\n    minutes_day2 = df[df['Day'] == day2]['Minutes'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (minutes_day2 - minutes_day1) \/ (df.index[df['Day'] == day2][0] - df.index[df['Day'] == day1][0])\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Minutes': [38, 39, 46, 43, 44]\n})\n\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Monday', 'Tuesday'))","table":"Name: Time Kenny spent on homework\nUnit: minutes per day\nContent:\nDay | Minutes\nMonday | 38\nTuesday | 39\nWednesday | 46\nThursday | 43\nFriday | 44"}
{"level":4,"answer":14.0,"prediction":"import pandas as pd\n\ndef count_racks_with_46_ties(df):\n    \"\"\"\n    This function takes in a pandas dataframe of ties per rack, and returns the number of racks that have at least 46 ties.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of ties per rack.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of racks that have at least 46 ties.\n    \"\"\"\n    # prepare a list to calculate the number of ties on each rack\n    ties = []\n    # calculate the total number of ties on each rack\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            ties.append(stem * 10 + leaf[j])\n    # filter the racks where the total number of ties is greater than or equal to 46\n    filtered = [tie for tie in ties if tie >= 46]\n    # count the number of racks\n    num_racks = len(filtered)\n    return num_racks\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7],\n    'Leaf': [[3, 3, 7], [5, 6, 9, 9], [0, 1, 3, 5], [1, 2, 7, 8, 8]]\n})\n# Call the tool to solve the problem\nprint(count_racks_with_46_ties(df))","question":"The employee at the department store counted the number of ties on each tie rack. How many racks have at least 46 ties?","prediction_code":"import pandas as pd\n\ndef count_racks_with_46_ties(df):\n    \"\"\"\n    This function takes in a pandas dataframe of ties per rack, and returns the number of racks that have at least 46 ties.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of ties per rack.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of racks that have at least 46 ties.\n    \"\"\"\n    # prepare a list to calculate the number of ties on each rack\n    ties = []\n    # calculate the total number of ties on each rack\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            ties.append(stem * 10 + leaf[j])\n    # filter the racks where the total number of ties is greater than or equal to 46\n    filtered = [tie for tie in ties if tie >= 46]\n    # count the number of racks\n    num_racks = len(filtered)\n    return num_racks","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7],\n    'Leaf': [[3, 3, 7], [5, 6, 9, 9], [0, 1, 3, 5], [1, 2, 7, 8, 8]]\n})\n# Call the tool to solve the problem\nprint(count_racks_with_46_ties(df))","table":"Name: Ties per rack\nUnit: None\nContent:\nStem | Leaf \n4 | 3, 3, 7\n5 | 5, 6, 9, 9\n6 | 0, 1, 3, 5\n7 | 1, 2, 7, 8, 8"}
{"level":4,"answer":1.69,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price list and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['souvenir spoon', 'palm tree magnet', 'beach postcard', 'small stuffed otter', 'shell necklace', 'souvenir thimble'],\n    'Price': [0.23, 0.99, 0.19, 0.47, 0.72, 0.66]\n})\n\n# Define the items to be purchased\nitems = ['small stuffed otter', 'palm tree magnet', 'souvenir spoon']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Alvin need to buy a small stuffed otter, a palm tree magnet, and a souvenir spoon?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price list and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['souvenir spoon', 'palm tree magnet', 'beach postcard', 'small stuffed otter', 'shell necklace', 'souvenir thimble'],\n    'Price': [0.23, 0.99, 0.19, 0.47, 0.72, 0.66]\n})\n\n# Define the items to be purchased\nitems = ['small stuffed otter', 'palm tree magnet', 'souvenir spoon']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nsouvenir spoon | $0.23\npalm tree magnet | $0.99\nbeach postcard | $0.19\nsmall stuffed otter | $0.47\nshell necklace | $0.72\nsouvenir thimble | $0.66"}
{"level":7,"answer":9.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of basketball hoops per park and returns the range of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of basketball hoops per park.\n    The dataframe should contain \"Park\" and \"Number of basketball hoops\" columns.\n    Returns:\n    int: The range of the numbers of basketball hoops.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of basketball hoops\" column\n    min_hoops = df['Number of basketball hoops'].min()\n    max_hoops = df['Number of basketball hoops'].max()\n    \n    # Calculate the range\n    hoops_range = max_hoops - min_hoops\n    \n    return hoops_range\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Park': ['Mooreland Park', 'Pinehurst Park', 'Otter Park', 'Linden Park', 'Heron Park', 'Riverfront Park'],\n    'Number of basketball hoops': [5, 3, 10, 2, 10, 1]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"The parks department compared how many basketball hoops there are at each park. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of basketball hoops per park and returns the range of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of basketball hoops per park.\n    The dataframe should contain \"Park\" and \"Number of basketball hoops\" columns.\n    Returns:\n    int: The range of the numbers of basketball hoops.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of basketball hoops\" column\n    min_hoops = df['Number of basketball hoops'].min()\n    max_hoops = df['Number of basketball hoops'].max()\n    \n    # Calculate the range\n    hoops_range = max_hoops - min_hoops\n    \n    return hoops_range","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Park': ['Mooreland Park', 'Pinehurst Park', 'Otter Park', 'Linden Park', 'Heron Park', 'Riverfront Park'],\n    'Number of basketball hoops': [5, 3, 10, 2, 10, 1]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Basketball hoops\nUnit: None\nContent:\nPark | Number of basketball hoops\nMooreland Park | 5\nPinehurst Park | 3\nOtter Park | 10\nLinden Park | 2\nHeron Park | 10\nRiverfront Park | 1"}
{"level":8,"answer":1.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_day, end_day):\n    \"\"\"\n    This function takes in a pandas DataFrame of time spent on homework per day and calculates the rate of change between two given days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the time spent on homework per day.\n    The DataFrame should have columns 'Day' and 'Minutes'.\n    start_day (str): The starting day for calculating the rate of change.\n    end_day (str): The ending day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given days.\n    \"\"\"\n    # Filter the DataFrame for the start and end days\n    start_minutes = df[df['Day'] == start_day]['Minutes'].values[0]\n    end_minutes = df[df['Day'] == end_day]['Minutes'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_minutes - start_minutes) \/ (df.index[df['Day'] == end_day][0] - df.index[df['Day'] == start_day][0])\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Minutes': [30, 31, 31, 27, 29]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Tuesday', 'Wednesday'))","question":"Scott kept track of how long it took to finish his homework each day. According to the table, what was the rate of change between Tuesday and Wednesday?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_day, end_day):\n    \"\"\"\n    This function takes in a pandas DataFrame of time spent on homework per day and calculates the rate of change between two given days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the time spent on homework per day.\n    The DataFrame should have columns 'Day' and 'Minutes'.\n    start_day (str): The starting day for calculating the rate of change.\n    end_day (str): The ending day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given days.\n    \"\"\"\n    # Filter the DataFrame for the start and end days\n    start_minutes = df[df['Day'] == start_day]['Minutes'].values[0]\n    end_minutes = df[df['Day'] == end_day]['Minutes'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_minutes - start_minutes) \/ (df.index[df['Day'] == end_day][0] - df.index[df['Day'] == start_day][0])\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Minutes': [30, 31, 31, 27, 29]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Tuesday', 'Wednesday'))","table":"Name: Time Scott spent on homework\nUnit: minutes per day\nContent:\nDay | Minutes\nTuesday | 30\nWednesday | 31\nThursday | 31\nFriday | 27\nSaturday | 29"}
{"level":6,"answer":90.0,"prediction":"import pandas as pd\n\ndef find_largest_number_of_passengers(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of passengers per train and returns the largest number of passengers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of passengers per train.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of passengers.\n    \"\"\"\n    # prepare a list to store the number of passengers in each train\n    passengers = []\n    # calculate the total number of passengers in each train\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            passengers.append(stem * 10 + leaf[j])\n    # find the largest number of passengers\n    largest_number_of_passengers = max(passengers)\n    return largest_number_of_passengers\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7, 8, 9],\n    'Leaf': [[0, 5, 8], [1, 6, 7, 9], [0, 0, 0, 3, 4, 5, 7, 7, 8, 8, 8], [0, 7], [2, 2, 5, 6], [0]]\n})\n# Call the tool to solve the problem\nprint(find_largest_number_of_passengers(df))","question":"The train conductor made sure to count the number of passengers on each train. What is the largest number of passengers?","prediction_code":"import pandas as pd\n\ndef find_largest_number_of_passengers(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of passengers per train and returns the largest number of passengers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of passengers per train.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of passengers.\n    \"\"\"\n    # prepare a list to store the number of passengers in each train\n    passengers = []\n    # calculate the total number of passengers in each train\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            passengers.append(stem * 10 + leaf[j])\n    # find the largest number of passengers\n    largest_number_of_passengers = max(passengers)\n    return largest_number_of_passengers","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7, 8, 9],\n    'Leaf': [[0, 5, 8], [1, 6, 7, 9], [0, 0, 0, 3, 4, 5, 7, 7, 8, 8, 8], [0, 7], [2, 2, 5, 6], [0]]\n})\n# Call the tool to solve the problem\nprint(find_largest_number_of_passengers(df))","table":"Name: Passengers per train\nUnit: passengers\nContent:\nStem | Leaf \n4 | 0, 5, 8\n5 | 1, 6, 7, 9\n6 | 0, 0, 0, 3, 4, 5, 7, 7, 8, 8, 8\n7 | 0, 7\n8 | 2, 2, 5, 6\n9 | 0"}
{"level":3,"answer":4727.0,"prediction":"import pandas as pd\n\ndef calculate_listener_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of radio listeners and returns the difference in the number of listeners between July and June.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of listeners for each month.\n    The dataframe should contain \"Month\" and \"Number of listeners\" columns.\n    Returns:\n    int: The difference in the number of listeners between July and June.\n    \"\"\"\n    # Filter the DataFrame for July and June\n    july_listeners = df[df['Month'] == 'July']['Number of listeners'].values[0]\n    june_listeners = df[df['Month'] == 'June']['Number of listeners'].values[0]\n    \n    # Calculate the difference in listeners\n    listener_difference = july_listeners - june_listeners\n    \n    return listener_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['April', 'May', 'June', 'July'],\n    'Number of listeners': [6394, 1329, 2833, 7560]\n})\n# Call the tool to solve the problem\nprint(calculate_listener_difference(df))","question":"A radio station paid attention to how many listeners it had each month. How many more listeners did the radio station have in July than in June?","prediction_code":"import pandas as pd\n\ndef calculate_listener_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of radio listeners and returns the difference in the number of listeners between July and June.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of listeners for each month.\n    The dataframe should contain \"Month\" and \"Number of listeners\" columns.\n    Returns:\n    int: The difference in the number of listeners between July and June.\n    \"\"\"\n    # Filter the DataFrame for July and June\n    july_listeners = df[df['Month'] == 'July']['Number of listeners'].values[0]\n    june_listeners = df[df['Month'] == 'June']['Number of listeners'].values[0]\n    \n    # Calculate the difference in listeners\n    listener_difference = july_listeners - june_listeners\n    \n    return listener_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['April', 'May', 'June', 'July'],\n    'Number of listeners': [6394, 1329, 2833, 7560]\n})\n# Call the tool to solve the problem\nprint(calculate_listener_difference(df))","table":"Name: Radio listeners\nUnit: listeners\nContent:\nMonth | Number of listeners\nApril | 6,394\nMay | 1,329\nJune | 2,833\nJuly | 7,560"}
{"level":8,"answer":7.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of laps swum and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of laps swum.\n    The dataframe should contain \"Day\" and \"Number of laps\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    laps = df['Number of laps']\n    \n    # Calculate the median\n    median = laps.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of laps': [6, 8, 5, 9, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"Harold kept track of how many laps he swam during the past 5 days. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of laps swum and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of laps swum.\n    The dataframe should contain \"Day\" and \"Number of laps\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    laps = df['Number of laps']\n    \n    # Calculate the median\n    median = laps.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of laps': [6, 8, 5, 9, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Laps swum\nUnit: None\nContent:\nDay | Number of laps\nTuesday | 6\nWednesday | 8\nThursday | 5\nFriday | 9\nSaturday | 7"}
{"level":6,"answer":4.0,"prediction":"import pandas as pd\n\ndef count_strings_with_71_broken_lights(df):\n    \"\"\"\n    This function takes in a pandas dataframe of broken lights per string, and returns the number of strings that have exactly 71 broken lights.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken lights per string.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of strings that have exactly 71 broken lights.\n    \"\"\"\n    # prepare a list to calculate the number of broken lights in each string\n    broken_lights = []\n    # calculate the total number of broken lights in each string\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            broken_lights.append(stem * 10 + leaf[j])\n    # filter the strings where the total number of broken lights is equal to 71\n    filtered = [lights for lights in broken_lights if lights == 71]\n    # count the number of strings\n    num_strings = len(filtered)\n    return num_strings\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [5, 6, 7, 8, 9],\n    'Leaf': [[3, 8, 8, 8], [0, 1, 4, 6], [1, 1, 1, 1, 8, 8, 9], [3, 5, 8], [0]]\n})\n# Call the tool to solve the problem\nprint(count_strings_with_71_broken_lights(df))","question":"While hanging Christmas lights for neighbors, Susan counted the number of broken lights on each string. How many strings had exactly 71 broken lights?","prediction_code":"import pandas as pd\n\ndef count_strings_with_71_broken_lights(df):\n    \"\"\"\n    This function takes in a pandas dataframe of broken lights per string, and returns the number of strings that have exactly 71 broken lights.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken lights per string.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of strings that have exactly 71 broken lights.\n    \"\"\"\n    # prepare a list to calculate the number of broken lights in each string\n    broken_lights = []\n    # calculate the total number of broken lights in each string\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            broken_lights.append(stem * 10 + leaf[j])\n    # filter the strings where the total number of broken lights is equal to 71\n    filtered = [lights for lights in broken_lights if lights == 71]\n    # count the number of strings\n    num_strings = len(filtered)\n    return num_strings","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [5, 6, 7, 8, 9],\n    'Leaf': [[3, 8, 8, 8], [0, 1, 4, 6], [1, 1, 1, 1, 8, 8, 9], [3, 5, 8], [0]]\n})\n# Call the tool to solve the problem\nprint(count_strings_with_71_broken_lights(df))","table":"Name: Broken lights per string\nUnit: strings\nContent:\nStem | Leaf \n5 | 3, 8, 8, 8\n6 | 0, 1, 4, 6\n7 | 1, 1, 1, 1, 8, 8, 9\n8 | 3, 5, 8\n9 | 0"}
{"level":7,"answer":9.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of bird sightings and returns the median of the number of birds seen.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of birds seen each day.\n    The DataFrame should have columns 'Day' and 'Number of birds'.\n    Returns:\n    float: The median of the number of birds seen.\n    \"\"\"\n    # Get the 'Number of birds' column as a Series\n    bird_counts = df['Number of birds']\n    \n    # Calculate the median using pandas\n    median = bird_counts.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n    'Number of birds': [9, 4, 10, 6, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"Gary went on a bird watching trip and jotted down the number of birds he saw each day. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of bird sightings and returns the median of the number of birds seen.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of birds seen each day.\n    The DataFrame should have columns 'Day' and 'Number of birds'.\n    Returns:\n    float: The median of the number of birds seen.\n    \"\"\"\n    # Get the 'Number of birds' column as a Series\n    bird_counts = df['Number of birds']\n    \n    # Calculate the median using pandas\n    median = bird_counts.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n    'Number of birds': [9, 4, 10, 6, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Number of birds\nUnit: None\nContent:\nDay | Number of birds\nWednesday | 9\nThursday | 4\nFriday | 10\nSaturday | 6\nSunday | 9"}
{"level":5,"answer":3.0,"prediction":"import pandas as pd\n\ndef calculate_lemon_cookies_sold(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of boxes of cookies sold and calculates the number of boxes of lemon cookies sold.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the type of cookies and their frequencies.\n    The DataFrame should have columns 'Type' and 'Frequency'.\n    Returns:\n    int: The number of boxes of lemon cookies sold.\n    \"\"\"\n    # Filter the DataFrame for the row with lemon cookies\n    lemon_row = df[df['Type'] == 'lemon']\n    \n    # Get the frequency value for lemon cookies\n    lemon_frequency = lemon_row['Frequency'].values[0]\n    \n    # Calculate the number of boxes of peanut butter cookies sold\n    peanut_butter_row = df[df['Type'] == 'peanut butter']\n    peanut_butter_frequency = peanut_butter_row['Frequency'].values[0]\n    \n    # Calculate the number of boxes of lemon cookies sold\n    lemon_cookies_sold = peanut_butter_frequency \/ 3\n    \n    return lemon_cookies_sold\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Type': ['coconut caramel', 'lemon', 'mint chocolate', 'marshmallow', 'peanut butter'],\n    'Frequency': [5, None, 11, 2, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_lemon_cookies_sold(df))","question":"Lila sold boxes of cookies to raise money for her scout troop. She used a frequency chart to track her sales. Lila sold 1\/3 as many boxes of lemon cookies as peanut butter cookies. How many boxes of lemon cookies did she sell?","prediction_code":"import pandas as pd\n\ndef calculate_lemon_cookies_sold(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of boxes of cookies sold and calculates the number of boxes of lemon cookies sold.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the type of cookies and their frequencies.\n    The DataFrame should have columns 'Type' and 'Frequency'.\n    Returns:\n    int: The number of boxes of lemon cookies sold.\n    \"\"\"\n    # Filter the DataFrame for the row with lemon cookies\n    lemon_row = df[df['Type'] == 'lemon']\n    \n    # Get the frequency value for lemon cookies\n    lemon_frequency = lemon_row['Frequency'].values[0]\n    \n    # Calculate the number of boxes of peanut butter cookies sold\n    peanut_butter_row = df[df['Type'] == 'peanut butter']\n    peanut_butter_frequency = peanut_butter_row['Frequency'].values[0]\n    \n    # Calculate the number of boxes of lemon cookies sold\n    lemon_cookies_sold = peanut_butter_frequency \/ 3\n    \n    return lemon_cookies_sold","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Type': ['coconut caramel', 'lemon', 'mint chocolate', 'marshmallow', 'peanut butter'],\n    'Frequency': [5, None, 11, 2, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_lemon_cookies_sold(df))","table":"Name: Boxes of cookies sold\nUnit: boxes of lemon cookies\nContent:\nType | Frequency\ncoconut caramel | 5\nlemon | ?\nmint chocolate | 11\nmarshmallow | 2\npeanut butter | 9"}
{"level":8,"answer":12.0,"prediction":"import pandas as pd\n\ndef find_smallest_number(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of broken crayons per box and returns the smallest number of broken crayons.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken crayons per box.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of broken crayons.\n    \"\"\"\n    # prepare a list to store all broken crayon numbers\n    broken_crayons = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # iterate through each leaf value in the row\n        for j in range(len(leaf)):\n            broken_crayons.append(stem * 10 + leaf[j])\n    # find the smallest number of broken crayons\n    smallest_number = min(broken_crayons)\n    return smallest_number\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[2, 3, 3], [2, 8], [2, 5, 6, 7, 7, 8], [6, 8]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number(df))","question":"A crayon factory monitored the number of broken crayons per box during the past day. What is the smallest number of broken crayons?","prediction_code":"import pandas as pd\n\ndef find_smallest_number(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of broken crayons per box and returns the smallest number of broken crayons.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken crayons per box.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of broken crayons.\n    \"\"\"\n    # prepare a list to store all broken crayon numbers\n    broken_crayons = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # iterate through each leaf value in the row\n        for j in range(len(leaf)):\n            broken_crayons.append(stem * 10 + leaf[j])\n    # find the smallest number of broken crayons\n    smallest_number = min(broken_crayons)\n    return smallest_number","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[2, 3, 3], [2, 8], [2, 5, 6, 7, 7, 8], [6, 8]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number(df))","table":"Name: Broken crayons per box\nUnit: broken crayons\nContent:\nStem | Leaf \n1 | 2, 3, 3\n2 | 2, 8\n3 | 2, 5, 6, 7, 7, 8\n4 | 6, 8"}
{"level":5,"answer":8.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of club membership and returns the range of the numbers of clubs.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the names and numbers of clubs for each student.\n    The DataFrame should have columns 'Name' and 'Number of clubs'.\n    Returns:\n    int: The range of the numbers of clubs.\n    \"\"\"\n    # Get the maximum and minimum values of the 'Number of clubs' column\n    max_clubs = df['Number of clubs'].max()\n    min_clubs = df['Number of clubs'].min()\n    \n    # Calculate the range\n    club_range = max_clubs - min_clubs\n    \n    return club_range\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Jaylen', 'Erin', 'Wendy', 'Samuel', 'Mia', 'Liz', 'Zack', 'Andy'],\n    'Number of clubs': [8, 2, 8, 4, 9, 9, 10, 4]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"Some students compared how many clubs they belong to. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of club membership and returns the range of the numbers of clubs.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the names and numbers of clubs for each student.\n    The DataFrame should have columns 'Name' and 'Number of clubs'.\n    Returns:\n    int: The range of the numbers of clubs.\n    \"\"\"\n    # Get the maximum and minimum values of the 'Number of clubs' column\n    max_clubs = df['Number of clubs'].max()\n    min_clubs = df['Number of clubs'].min()\n    \n    # Calculate the range\n    club_range = max_clubs - min_clubs\n    \n    return club_range","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Jaylen', 'Erin', 'Wendy', 'Samuel', 'Mia', 'Liz', 'Zack', 'Andy'],\n    'Number of clubs': [8, 2, 8, 4, 9, 9, 10, 4]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Clubs\nUnit: None\nContent:\nName | Number of clubs\nJaylen | 8\nErin | 2\nWendy | 8\nSamuel | 4\nMia | 9\nLiz | 9\nZack | 10\nAndy | 4"}
{"level":2,"answer":25.0,"prediction":"import pandas as pd\n\ndef calculate_total_pears(df, num_branches):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of pears per branch and the number of branches, and returns the total number of pears.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of pears per branch with columns 'Number of branches' and 'Number of pears'.\n    num_branches (int): The number of branches to calculate the total number of pears.\n    Returns:\n    int: The total number of pears on the specified number of branches.\n    \"\"\"\n    # Filter the DataFrame for the specified number of branches\n    branch_df = df[df['Number of branches'] == num_branches]\n    \n    # Check if the specified number of branches exists in the DataFrame\n    if branch_df.empty:\n        return None\n    \n    # Get the number of pears for the specified number of branches\n    num_pears = branch_df['Number of pears'].values[0]\n    \n    # Calculate the total number of pears\n    total_pears = num_pears * num_branches\n    \n    return total_pears\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of branches': [1, 2, 3, 4, 5],\n    'Number of pears': [5, 10, 15, 20, None]\n})\n\n# Specify the number of branches\nnum_branches = 5\n\n# Call the tool to solve the problem\nprint(calculate_total_pears(df, num_branches))","question":"Each branch has 5 pears. How many pears are on 5 branches?","prediction_code":"import pandas as pd\n\ndef calculate_total_pears(df, num_branches):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of pears per branch and the number of branches, and returns the total number of pears.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of pears per branch with columns 'Number of branches' and 'Number of pears'.\n    num_branches (int): The number of branches to calculate the total number of pears.\n    Returns:\n    int: The total number of pears on the specified number of branches.\n    \"\"\"\n    # Filter the DataFrame for the specified number of branches\n    branch_df = df[df['Number of branches'] == num_branches]\n    \n    # Check if the specified number of branches exists in the DataFrame\n    if branch_df.empty:\n        return None\n    \n    # Get the number of pears for the specified number of branches\n    num_pears = branch_df['Number of pears'].values[0]\n    \n    # Calculate the total number of pears\n    total_pears = num_pears * num_branches\n    \n    return total_pears","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of branches': [1, 2, 3, 4, 5],\n    'Number of pears': [5, 10, 15, 20, None]\n})\n\n# Specify the number of branches\nnum_branches = 5\n\n# Call the tool to solve the problem\nprint(calculate_total_pears(df, num_branches))","table":"Name: None\nUnit: None\nContent:\nNumber of branches | Number of pears\n1 | 5\n2 | 10\n3 | 15\n4 | 20\n5 | ?"}
{"level":4,"answer":22858.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['hydrofoil', 'bulldozer', 'dump truck', 'race car'],\n    'Price': [8453.00, 7768.00, 6637.00, 8738.00]\n})\n\n# Define the items to calculate the total cost\nitems = ['bulldozer', 'dump truck', 'hydrofoil']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Lena need to buy a bulldozer, a dump truck, and a hydrofoil?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['hydrofoil', 'bulldozer', 'dump truck', 'race car'],\n    'Price': [8453.00, 7768.00, 6637.00, 8738.00]\n})\n\n# Define the items to calculate the total cost\nitems = ['bulldozer', 'dump truck', 'hydrofoil']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nhydrofoil | $8,453.00\nbulldozer | $7,768.00\ndump truck | $6,637.00\nrace car | $8,738.00"}
{"level":4,"answer":1270.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, destinations):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of train ticket prices and a list of destinations, and returns the total cost of the train tickets.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing train ticket prices with columns 'Name' and 'Price'.\n    destinations (list): A list of destination names for which train tickets are to be purchased.\n    Returns:\n    float: The total cost of the train tickets.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the destinations and calculate the cost for each train ticket\n    for destination in destinations:\n        # Filter the DataFrame for the specific destination\n        destination_df = df[df['Name'] == destination]\n        if not destination_df.empty:\n            ticket_price = destination_df['Price'].values[0]\n            total_cost += ticket_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['train ticket to Baltimore', 'train ticket to Seattle', 'train ticket to Boise', 'train ticket to San Francisco', 'train ticket to Miami'],\n    'Price': [380.00, 478.00, 792.00, 526.00, 138.00]\n})\n\n# Define the list of destinations\ndestinations = ['train ticket to Boise', 'train ticket to Seattle']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, destinations))","question":"How much money does Kelly need to buy a train ticket to Boise and a train ticket to Seattle?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, destinations):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of train ticket prices and a list of destinations, and returns the total cost of the train tickets.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing train ticket prices with columns 'Name' and 'Price'.\n    destinations (list): A list of destination names for which train tickets are to be purchased.\n    Returns:\n    float: The total cost of the train tickets.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the destinations and calculate the cost for each train ticket\n    for destination in destinations:\n        # Filter the DataFrame for the specific destination\n        destination_df = df[df['Name'] == destination]\n        if not destination_df.empty:\n            ticket_price = destination_df['Price'].values[0]\n            total_cost += ticket_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['train ticket to Baltimore', 'train ticket to Seattle', 'train ticket to Boise', 'train ticket to San Francisco', 'train ticket to Miami'],\n    'Price': [380.00, 478.00, 792.00, 526.00, 138.00]\n})\n\n# Define the list of destinations\ndestinations = ['train ticket to Boise', 'train ticket to Seattle']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, destinations))","table":"Name: None\nUnit: $\nContent:\ntrain ticket to Baltimore | $380.00\ntrain ticket to Seattle | $478.00\ntrain ticket to Boise | $792.00\ntrain ticket to San Francisco | $526.00\ntrain ticket to Miami | $138.00"}
{"level":5,"answer":76.0,"prediction":"import pandas as pd\n\ndef calculate_mode(df, column_name):\n    \"\"\"\n    This function takes in a pandas DataFrame and a column name, and returns the mode of the values in that column.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the data.\n    column_name (str): The name of the column to calculate the mode.\n    Returns:\n    int or float: The mode of the values in the specified column.\n    \"\"\"\n    # Get the values in the specified column\n    column_values = df[column_name].values\n    \n    # Calculate the mode using pandas\n    mode = column_values.mode().values[0]\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Alexandra', 'Malik', 'Percy', 'Zach', 'Brendan'],\n    'Number of books': [76, 76, 72, 72, 76]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df, 'Number of books'))","question":"Alexandra's classmates recorded how many books they read last year. What is the mode of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mode(df, column_name):\n    \"\"\"\n    This function takes in a pandas DataFrame and a column name, and returns the mode of the values in that column.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the data.\n    column_name (str): The name of the column to calculate the mode.\n    Returns:\n    int or float: The mode of the values in the specified column.\n    \"\"\"\n    # Get the values in the specified column\n    column_values = df[column_name].values\n    \n    # Calculate the mode using pandas\n    mode = column_values.mode().values[0]\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Alexandra', 'Malik', 'Percy', 'Zach', 'Brendan'],\n    'Number of books': [76, 76, 72, 72, 76]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df, 'Number of books'))","table":"Name: Books read\nUnit: None\nContent:\nName | Number of books\nAlexandra | 76\nMalik | 76\nPercy | 72\nZach | 72\nBrendan | 76"}
{"level":6,"answer":2.7,"prediction":"import pandas as pd\n\ndef calculate_total_cost(muffin_df, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a muffin mix table and the weight of muffin mix needed, and returns the total cost of the muffin mix using pandas.\n    Args:\n    muffin_df (pd.DataFrame): A pandas DataFrame containing muffin mix names and their prices per pound with columns 'Mix' and 'Price'.\n    weight (float): The weight of muffin mix needed in pounds.\n    Returns:\n    float: The total cost of the muffin mix.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the muffin mixes and calculate the cost for each mix\n    for index, row in muffin_df.iterrows():\n        mix = row['Mix']\n        price = row['Price']\n        mix_cost = price * weight\n        total_cost += mix_cost\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\nmuffin_df = pd.DataFrame({\n    'Mix': ['bran muffin mix', 'blueberry muffin mix', 'chocolate chip muffin mix', 'pumpkin muffin mix', 'cranberry muffin mix'],\n    'Price': [1, 3, 1, 1, 3]\n})\n\n# Calculate the total cost\nweight = 2 + 7\/10\ntotal_cost = calculate_total_cost(muffin_df, weight)\n\n# Print out the answer\nprint(total_cost)","question":"How much would it cost to buy 2+7\/10 pounds of pumpkin muffin mix?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(muffin_df, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a muffin mix table and the weight of muffin mix needed, and returns the total cost of the muffin mix using pandas.\n    Args:\n    muffin_df (pd.DataFrame): A pandas DataFrame containing muffin mix names and their prices per pound with columns 'Mix' and 'Price'.\n    weight (float): The weight of muffin mix needed in pounds.\n    Returns:\n    float: The total cost of the muffin mix.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the muffin mixes and calculate the cost for each mix\n    for index, row in muffin_df.iterrows():\n        mix = row['Mix']\n        price = row['Price']\n        mix_cost = price * weight\n        total_cost += mix_cost\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\nmuffin_df = pd.DataFrame({\n    'Mix': ['bran muffin mix', 'blueberry muffin mix', 'chocolate chip muffin mix', 'pumpkin muffin mix', 'cranberry muffin mix'],\n    'Price': [1, 3, 1, 1, 3]\n})\n\n# Calculate the total cost\nweight = 2 + 7\/10\ntotal_cost = calculate_total_cost(muffin_df, weight)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\nbran muffin mix | $1 per lb\nblueberry muffin mix | $3 per lb\nchocolate chip muffin mix | $1 per lb\npumpkin muffin mix | $1 per lb\ncranberry muffin mix | $3 per lb"}
{"level":8,"answer":4.0,"prediction":"import pandas as pd\n\ndef count_customers_not_rented_movies(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of renting movies last month and returns the number of customers who did not rent a movie.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of times customers rented movies and their frequencies.\n    The dataframe should contain \"Number of times\" and \"Frequency\" columns.\n    Returns:\n    int: The number of customers who did not rent a movie.\n    \"\"\"\n    # Calculate the total number of customers who rented movies\n    total_customers = df['Frequency'].sum()\n    \n    # Calculate the number of customers who did not rent a movie\n    customers_not_rented_movies = total_customers - df['Frequency'].sum()\n    \n    return customers_not_rented_movies\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of times': [0, 1, 2, 3],\n    'Frequency': [4, 3, 13, 9]\n})\n# Call the tool to solve the problem\nprint(count_customers_not_rented_movies(df))","question":"Employees at Isabelle's Movies tracked the number of movies that customers rented last month. How many customers did not rent a movie last month?","prediction_code":"import pandas as pd\n\ndef count_customers_not_rented_movies(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of renting movies last month and returns the number of customers who did not rent a movie.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of times customers rented movies and their frequencies.\n    The dataframe should contain \"Number of times\" and \"Frequency\" columns.\n    Returns:\n    int: The number of customers who did not rent a movie.\n    \"\"\"\n    # Calculate the total number of customers who rented movies\n    total_customers = df['Frequency'].sum()\n    \n    # Calculate the number of customers who did not rent a movie\n    customers_not_rented_movies = total_customers - df['Frequency'].sum()\n    \n    return customers_not_rented_movies","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of times': [0, 1, 2, 3],\n    'Frequency': [4, 3, 13, 9]\n})\n# Call the tool to solve the problem\nprint(count_customers_not_rented_movies(df))","table":"Name: Renting movies last month\nUnit: None\nContent:\nNumber of times | Frequency\n0 | 4\n1 | 3\n2 | 13\n3 | 9"}
{"level":5,"answer":4.0,"prediction":"import pandas as pd\n\ndef count_tanks_with_43_fish(df):\n    \"\"\"\n    This function takes in a pandas dataframe of fish per tank, and returns the number of tanks that have exactly 43 fish.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of fish per tank.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of tanks that have exactly 43 fish.\n    \"\"\"\n    # prepare a list to calculate the number of fish in each tank\n    fish_counts = []\n    # calculate the total number of fish in each tank\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            fish_counts.append(stem * 10 + leaf[j])\n    # count the number of tanks that have exactly 43 fish\n    num_tanks = fish_counts.count(43)\n    return num_tanks\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7],\n    'Leaf': [[2], [0, 1, 6], [2, 3, 3, 3, 3, 4, 6, 7, 7], [2, 6, 6, 8, 9], [6, 9], [0, 7, 8]]\n})\n# Call the tool to solve the problem\nprint(count_tanks_with_43_fish(df))","question":"A pet store owner had his staff count the number of fish in each tank. How many tanks have exactly 43 fish?","prediction_code":"import pandas as pd\n\ndef count_tanks_with_43_fish(df):\n    \"\"\"\n    This function takes in a pandas dataframe of fish per tank, and returns the number of tanks that have exactly 43 fish.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of fish per tank.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of tanks that have exactly 43 fish.\n    \"\"\"\n    # prepare a list to calculate the number of fish in each tank\n    fish_counts = []\n    # calculate the total number of fish in each tank\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            fish_counts.append(stem * 10 + leaf[j])\n    # count the number of tanks that have exactly 43 fish\n    num_tanks = fish_counts.count(43)\n    return num_tanks","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7],\n    'Leaf': [[2], [0, 1, 6], [2, 3, 3, 3, 3, 4, 6, 7, 7], [2, 6, 6, 8, 9], [6, 9], [0, 7, 8]]\n})\n# Call the tool to solve the problem\nprint(count_tanks_with_43_fish(df))","table":"Name: Fish per tank\nUnit: tanks\nContent:\nStem | Leaf \n2 | 2\n3 | 0, 1, 6\n4 | 2, 3, 3, 3, 3, 4, 6, 7, 7\n5 | 2, 6, 6, 8, 9\n6 | 6, 9\n7 | 0, 7, 8"}
{"level":4,"answer":7.0,"prediction":"import pandas as pd\n\ndef get_ticket_price(df, zoo, ticket_type):\n    \"\"\"\n    This function takes in a pandas DataFrame of zoo ticket prices, the name of a zoo, and the type of ticket (e.g. 'Child', 'Senior'),\n    and returns the price of the ticket for the specified zoo and ticket type.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing zoo ticket prices with columns 'Zoo', 'Child', and 'Senior'.\n    zoo (str): The name of the zoo.\n    ticket_type (str): The type of ticket.\n    Returns:\n    float: The price of the ticket for the specified zoo and ticket type.\n    \"\"\"\n    # Filter the DataFrame for the specified zoo\n    zoo_df = df[df['Zoo'] == zoo]\n    \n    # Get the ticket price for the specified ticket type\n    ticket_price = zoo_df[ticket_type].values[0]\n    \n    return ticket_price\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Zoo': ['Central Florida', 'Cleveland', 'Atlanta', 'Brookfield'],\n    'Child': [7, 7, 14, 8],\n    'Senior': [9, 10, 15, 8]\n})\n\n# Call the tool to solve the problem\nprint(get_ticket_price(df, 'Cleveland', 'Child'))","question":"Dr. Conway, a zoo director, researched ticket prices at other zoos around the country. How much does a child ticket to the Cleveland Zoo cost?","prediction_code":"import pandas as pd\n\ndef get_ticket_price(df, zoo, ticket_type):\n    \"\"\"\n    This function takes in a pandas DataFrame of zoo ticket prices, the name of a zoo, and the type of ticket (e.g. 'Child', 'Senior'),\n    and returns the price of the ticket for the specified zoo and ticket type.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing zoo ticket prices with columns 'Zoo', 'Child', and 'Senior'.\n    zoo (str): The name of the zoo.\n    ticket_type (str): The type of ticket.\n    Returns:\n    float: The price of the ticket for the specified zoo and ticket type.\n    \"\"\"\n    # Filter the DataFrame for the specified zoo\n    zoo_df = df[df['Zoo'] == zoo]\n    \n    # Get the ticket price for the specified ticket type\n    ticket_price = zoo_df[ticket_type].values[0]\n    \n    return ticket_price","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Zoo': ['Central Florida', 'Cleveland', 'Atlanta', 'Brookfield'],\n    'Child': [7, 7, 14, 8],\n    'Senior': [9, 10, 15, 8]\n})\n\n# Call the tool to solve the problem\nprint(get_ticket_price(df, 'Cleveland', 'Child'))","table":"Name: Zoo ticket prices\nUnit: $\nContent:\nZoo | Child | Senior\nCentral Florida | $7 | $9\nCleveland | $7 | $10\nAtlanta | $14 | $15\nBrookfield | $8 | $8"}
{"level":5,"answer":9.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to be purchased.\n    It returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['book of crossword puzzles', 'map of the United States', 'map of the world', 'book of brainteasers', 'airplane calendar', 'coloring book'],\n    'Price': [5, 2, 7, 5, 6, 4]\n})\n\n# Define the items to be purchased\nitems = ['coloring book', 'book of crossword puzzles']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, items)\n\n# Print out the answer\nprint(total_cost)","question":"How much money does Layla need to buy a coloring book and a book of crossword puzzles?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to be purchased.\n    It returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['book of crossword puzzles', 'map of the United States', 'map of the world', 'book of brainteasers', 'airplane calendar', 'coloring book'],\n    'Price': [5, 2, 7, 5, 6, 4]\n})\n\n# Define the items to be purchased\nitems = ['coloring book', 'book of crossword puzzles']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, items)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\nbook of crossword puzzles | $5\nmap of the United States | $2\nmap of the world | $7\nbook of brainteasers | $5\nairplane calendar | $6\ncoloring book | $4"}
{"level":5,"answer":15.0,"prediction":"import pandas as pd\n\ndef calculate_income(df, date):\n    \"\"\"\n    This function takes in a pandas DataFrame representing Duncan's financial record and a specific date, and returns the amount of money Duncan made on that date.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing Duncan's financial record with columns 'Date', 'Description', 'Received', 'Expenses', and 'Available Funds'.\n    date (str): The specific date in the format 'M\/D'.\n    Returns:\n    float: The amount of money Duncan made on the specified date.\n    \"\"\"\n    # Filter the DataFrame for the specific date\n    date_df = df[df['Date'] == date]\n    \n    # Check if the date exists in the DataFrame\n    if date_df.empty:\n        return \"No record found for the specified date.\"\n    \n    # Get the income for the specific date\n    income = date_df['Received'].values[0]\n    \n    return income\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Date': [' ', '7\/5', '7\/17', '7\/29'],\n    'Description': ['Balance: end of June', 'cleaning the Hoffmans\\' pool', 'bottle of water', 'swim trunks'],\n    'Received': ['', 15.00, '', ''],\n    'Expenses': ['', '', 1.50, 16.80],\n    'Available Funds': [450.70, 465.70, 464.20, 447.40]\n})\n\n# Call the tool to solve the problem\nprint(calculate_income(df, '7\/5'))","question":"This is Duncan's complete financial record for July. On July 5, how much money did Duncan make?","prediction_code":"import pandas as pd\n\ndef calculate_income(df, date):\n    \"\"\"\n    This function takes in a pandas DataFrame representing Duncan's financial record and a specific date, and returns the amount of money Duncan made on that date.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing Duncan's financial record with columns 'Date', 'Description', 'Received', 'Expenses', and 'Available Funds'.\n    date (str): The specific date in the format 'M\/D'.\n    Returns:\n    float: The amount of money Duncan made on the specified date.\n    \"\"\"\n    # Filter the DataFrame for the specific date\n    date_df = df[df['Date'] == date]\n    \n    # Check if the date exists in the DataFrame\n    if date_df.empty:\n        return \"No record found for the specified date.\"\n    \n    # Get the income for the specific date\n    income = date_df['Received'].values[0]\n    \n    return income","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Date': [' ', '7\/5', '7\/17', '7\/29'],\n    'Description': ['Balance: end of June', 'cleaning the Hoffmans\\' pool', 'bottle of water', 'swim trunks'],\n    'Received': ['', 15.00, '', ''],\n    'Expenses': ['', '', 1.50, 16.80],\n    'Available Funds': [450.70, 465.70, 464.20, 447.40]\n})\n\n# Call the tool to solve the problem\nprint(calculate_income(df, '7\/5'))","table":"Name: None\nUnit: $\nContent:\nDate | Description | Received | Expenses | Available Funds\n | Balance: end of June | | | $450.70\n7\/5 | cleaning the Hoffmans' pool | $15.00 | | $465.70\n7\/17 | bottle of water | | $1.50 | $464.20\n7\/29 | swim trunks | | $16.80 | $447.40"}
{"level":7,"answer":9.0,"prediction":"import pandas as pd\n\ndef count_people_with_less_than_82(df):\n    \"\"\"\n    This function takes in a pandas dataframe of quiz show scores and returns the number of people who scored fewer than 82 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the scores of the people competing on the quiz show.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of people who scored fewer than 82 points.\n    \"\"\"\n    # prepare a list to calculate scores of each person\n    scores = []\n    # calculate the total score of each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # filter the people who scored fewer than 82 points\n    filtered = [score for score in scores if score < 82]\n    # count the number of people\n    num_people = len(filtered)\n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[0, 3], [9], [9], [1, 6], [6], [4], [2], [4]]\n})\n# Call the tool to solve the problem\nprint(count_people_with_less_than_82(df))","question":"For a math assignment, Tim researched the scores of the people competing on his favorite quiz show. How many people scored fewer than 82 points?","prediction_code":"import pandas as pd\n\ndef count_people_with_less_than_82(df):\n    \"\"\"\n    This function takes in a pandas dataframe of quiz show scores and returns the number of people who scored fewer than 82 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the scores of the people competing on the quiz show.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of people who scored fewer than 82 points.\n    \"\"\"\n    # prepare a list to calculate scores of each person\n    scores = []\n    # calculate the total score of each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # filter the people who scored fewer than 82 points\n    filtered = [score for score in scores if score < 82]\n    # count the number of people\n    num_people = len(filtered)\n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[0, 3], [9], [9], [1, 6], [6], [4], [2], [4]]\n})\n# Call the tool to solve the problem\nprint(count_people_with_less_than_82(df))","table":"Name: Quiz show scores\nUnit: people\nContent:\nStem | Leaf \n1 | 0, 3\n2 | 9\n3 | 9\n4 | 1, 6\n5 | 6\n6 | 4\n7 | 2\n8 | 4"}
{"level":7,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of emails received per day and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of emails received per day.\n    The DataFrame should have columns 'Day' and 'Emails'.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Filter the DataFrame for the two days\n    day1_emails = df[df['Day'] == day1]['Emails'].values[0]\n    day2_emails = df[df['Day'] == day2]['Emails'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (day2_emails - day1_emails) \/ day1_emails\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Emails': [5, 10, 4, 5, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Sunday', 'Monday'))","question":"Janet kept a tally of the number of emails she received each day for a week. According to the table, what was the rate of change between Sunday and Monday?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of emails received per day and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of emails received per day.\n    The DataFrame should have columns 'Day' and 'Emails'.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Filter the DataFrame for the two days\n    day1_emails = df[df['Day'] == day1]['Emails'].values[0]\n    day2_emails = df[df['Day'] == day2]['Emails'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (day2_emails - day1_emails) \/ day1_emails\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Emails': [5, 10, 4, 5, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Sunday', 'Monday'))","table":"Name: Emails Janet received\nUnit: emails per day\nContent:\nDay | Emails\nSunday | 5\nMonday | 10\nTuesday | 4\nWednesday | 5\nThursday | 5"}
{"level":7,"answer":6.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of baskets made per day and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of baskets made per day.\n    The dataframe should contain \"Day\" and \"Number of baskets\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of baskets\" column\n    min_baskets = df['Number of baskets'].min()\n    max_baskets = df['Number of baskets'].max()\n    \n    # Calculate the range\n    range_baskets = max_baskets - min_baskets\n    \n    return range_baskets\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of baskets': [6, 4, 5, 9, 3, 5, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"Neil jotted down how many baskets he made during basketball practice each day. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of baskets made per day and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of baskets made per day.\n    The dataframe should contain \"Day\" and \"Number of baskets\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of baskets\" column\n    min_baskets = df['Number of baskets'].min()\n    max_baskets = df['Number of baskets'].max()\n    \n    # Calculate the range\n    range_baskets = max_baskets - min_baskets\n    \n    return range_baskets","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of baskets': [6, 4, 5, 9, 3, 5, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Baskets made\nUnit: None\nContent:\nDay | Number of baskets\nSunday | 6\nMonday | 4\nTuesday | 5\nWednesday | 9\nThursday | 3\nFriday | 5\nSaturday | 8"}
{"level":4,"answer":4.0,"prediction":"import pandas as pd\n\ndef calculate_donations(df, cause, month):\n    \"\"\"\n    This function takes in a pandas DataFrame of donations received and returns the amount of money raised for a specific cause in a specific month.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the donations received with columns 'Cause', 'May', and 'June'.\n    cause (str): The name of the cause for which the money raised is to be calculated.\n    month (str): The name of the month for which the money raised is to be calculated.\n    Returns:\n    float: The amount of money raised for the specified cause in the specified month.\n    \"\"\"\n    # Filter the DataFrame for the specific cause and month\n    cause_df = df[df['Cause'] == cause]\n    money_raised = cause_df[month].values[0]\n    \n    return money_raised\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Cause': ['Education', 'Medical research', 'Parks', 'Animals'],\n    'May': [4, 7, 4, 17],\n    'June': [9, 7, 17, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_donations(df, 'Parks', 'May'))","question":"A county agency recorded the money donated to several charitable causes over time. How much money was raised for parks in May?","prediction_code":"import pandas as pd\n\ndef calculate_donations(df, cause, month):\n    \"\"\"\n    This function takes in a pandas DataFrame of donations received and returns the amount of money raised for a specific cause in a specific month.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the donations received with columns 'Cause', 'May', and 'June'.\n    cause (str): The name of the cause for which the money raised is to be calculated.\n    month (str): The name of the month for which the money raised is to be calculated.\n    Returns:\n    float: The amount of money raised for the specified cause in the specified month.\n    \"\"\"\n    # Filter the DataFrame for the specific cause and month\n    cause_df = df[df['Cause'] == cause]\n    money_raised = cause_df[month].values[0]\n    \n    return money_raised","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Cause': ['Education', 'Medical research', 'Parks', 'Animals'],\n    'May': [4, 7, 4, 17],\n    'June': [9, 7, 17, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_donations(df, 'Parks', 'May'))","table":"Name: Donations received\nUnit: $\nContent:\nCause | May | June\nEducation | $4 | $9\nMedical research | $7 | $7\nParks | $4 | $17\nAnimals | $17 | $5"}
{"level":5,"answer":3.0,"prediction":"import pandas as pd\n\ndef calculate_donation_difference(df, person1, person2, cause):\n    \"\"\"\n    This function takes in a pandas DataFrame of donations and calculates the difference in donation amounts between two people for a specific cause.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing donation amounts with columns 'Person', 'Clean water', and 'Animal rights'.\n    person1 (str): The name of the first person.\n    person2 (str): The name of the second person.\n    cause (str): The cause for which the donation amounts are being compared.\n    Returns:\n    float: The difference in donation amounts between person1 and person2 for the specified cause.\n    \"\"\"\n    # Filter the DataFrame for the specified cause\n    cause_df = df[['Person', cause]]\n    \n    # Filter the DataFrame for the specified people\n    person1_df = cause_df[cause_df['Person'] == person1]\n    person2_df = cause_df[cause_df['Person'] == person2]\n    \n    # Get the donation amounts for the specified cause and people\n    person1_donation = person1_df[cause].values[0]\n    person2_donation = person2_df[cause].values[0]\n    \n    # Calculate the difference in donation amounts\n    donation_difference = person1_donation - person2_donation\n    \n    return donation_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Person': ['Isaiah', 'Liam', 'Bridget', 'Anne'],\n    'Clean water': [12, 4, 16, 19],\n    'Animal rights': [5, 10, 9, 18]\n})\n\n# Call the tool to solve the problem\nprint(calculate_donation_difference(df, 'Anne', 'Bridget', 'Clean water'))","question":"A philanthropic organization compared the amounts of money that its members donated to certain causes. How much more money did Anne donate to clean water than Bridget?","prediction_code":"import pandas as pd\n\ndef calculate_donation_difference(df, person1, person2, cause):\n    \"\"\"\n    This function takes in a pandas DataFrame of donations and calculates the difference in donation amounts between two people for a specific cause.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing donation amounts with columns 'Person', 'Clean water', and 'Animal rights'.\n    person1 (str): The name of the first person.\n    person2 (str): The name of the second person.\n    cause (str): The cause for which the donation amounts are being compared.\n    Returns:\n    float: The difference in donation amounts between person1 and person2 for the specified cause.\n    \"\"\"\n    # Filter the DataFrame for the specified cause\n    cause_df = df[['Person', cause]]\n    \n    # Filter the DataFrame for the specified people\n    person1_df = cause_df[cause_df['Person'] == person1]\n    person2_df = cause_df[cause_df['Person'] == person2]\n    \n    # Get the donation amounts for the specified cause and people\n    person1_donation = person1_df[cause].values[0]\n    person2_donation = person2_df[cause].values[0]\n    \n    # Calculate the difference in donation amounts\n    donation_difference = person1_donation - person2_donation\n    \n    return donation_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Person': ['Isaiah', 'Liam', 'Bridget', 'Anne'],\n    'Clean water': [12, 4, 16, 19],\n    'Animal rights': [5, 10, 9, 18]\n})\n\n# Call the tool to solve the problem\nprint(calculate_donation_difference(df, 'Anne', 'Bridget', 'Clean water'))","table":"Name: Donations\nUnit: $\nContent:\nPerson | Clean water | Animal rights\nIsaiah | $12 | $5\nLiam | $4 | $10\nBridget | $16 | $9\nAnne | $19 | $18"}
{"level":8,"answer":22.0,"prediction":"import pandas as pd\n\ndef find_smallest_number_of_broken_tiles(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of broken tiles per shipment and returns the smallest number of broken tiles.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken tiles per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of broken tiles.\n    \"\"\"\n    # prepare a list to store all broken tiles\n    broken_tiles = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the total number of broken tiles in each shipment\n        for j in range(len(leaf)):\n            broken_tiles.append(stem * 10 + leaf[j])\n    # find the smallest number of broken tiles\n    smallest_number = min(broken_tiles)\n    return smallest_number\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[2, 6], [1, 5, 9], [6], [2, 3, 6, 6], [2, 2], [2, 3, 7], [0, 3, 8]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_broken_tiles(df))","question":"Wildgrove Flooring tracked the number of broken tiles in each shipment it received last year. What is the smallest number of broken tiles?","prediction_code":"import pandas as pd\n\ndef find_smallest_number_of_broken_tiles(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of broken tiles per shipment and returns the smallest number of broken tiles.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken tiles per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of broken tiles.\n    \"\"\"\n    # prepare a list to store all broken tiles\n    broken_tiles = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the total number of broken tiles in each shipment\n        for j in range(len(leaf)):\n            broken_tiles.append(stem * 10 + leaf[j])\n    # find the smallest number of broken tiles\n    smallest_number = min(broken_tiles)\n    return smallest_number","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[2, 6], [1, 5, 9], [6], [2, 3, 6, 6], [2, 2], [2, 3, 7], [0, 3, 8]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_broken_tiles(df))","table":"Name: Broken tiles per shipment\nUnit: broken tiles\nContent:\nStem | Leaf \n2 | 2, 6\n3 | 1, 5, 9\n4 | 6\n5 | 2, 3, 6, 6\n6 | 2, 2\n7 | 2, 3, 7\n8 | 0, 3, 8"}
{"level":5,"answer":4.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of swing counts per elementary school and returns the median of the swing counts.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the swing counts per elementary school.\n    The dataframe should contain \"School\" and \"Number of swings\" columns.\n    Returns:\n    float: The median of the swing counts.\n    \"\"\"\n    # Get the swing counts column\n    swing_counts = df['Number of swings']\n    \n    # Calculate the median\n    median = swing_counts.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'School': ['Jefferson Elementary', 'Sierra Elementary', 'Hillside Elementary', 'Roseville Elementary', 'Lincoln Elementary'],\n    'Number of swings': [2, 4, 4, 4, 13]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"The school district compared how many swings each elementary school has. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of swing counts per elementary school and returns the median of the swing counts.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the swing counts per elementary school.\n    The dataframe should contain \"School\" and \"Number of swings\" columns.\n    Returns:\n    float: The median of the swing counts.\n    \"\"\"\n    # Get the swing counts column\n    swing_counts = df['Number of swings']\n    \n    # Calculate the median\n    median = swing_counts.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'School': ['Jefferson Elementary', 'Sierra Elementary', 'Hillside Elementary', 'Roseville Elementary', 'Lincoln Elementary'],\n    'Number of swings': [2, 4, 4, 4, 13]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Swings\nUnit: None\nContent:\nSchool | Number of swings\nJefferson Elementary | 2\nSierra Elementary | 4\nHillside Elementary | 4\nRoseville Elementary | 4\nLincoln Elementary | 13"}
{"level":7,"answer":4.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of web pages visited by different people and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names of people and the number of web pages they visited.\n    The dataframe should contain \"Person\" and \"Number of Web pages\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column containing the numbers\n    numbers = df['Number of Web pages']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Person': ['Franco', 'Brennan', 'Ryan', 'Pete', 'Susan'],\n    'Number of Web pages': [8, 2, 8, 4, 4]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"Several people compared how many Web pages they had visited. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of web pages visited by different people and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names of people and the number of web pages they visited.\n    The dataframe should contain \"Person\" and \"Number of Web pages\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column containing the numbers\n    numbers = df['Number of Web pages']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Person': ['Franco', 'Brennan', 'Ryan', 'Pete', 'Susan'],\n    'Number of Web pages': [8, 2, 8, 4, 4]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Web pages visited\nUnit: None\nContent:\nPerson | Number of Web pages\nFranco | 8\nBrennan | 2\nRyan | 8\nPete | 4\nSusan | 4"}
{"level":7,"answer":17.0,"prediction":"import pandas as pd\n\ndef find_lowest_score(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of spelling test scores and returns the lowest score.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the spelling test scores.\n    The DataFrame should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The lowest score from the spelling test.\n    \"\"\"\n    # Create a list to store all the scores\n    scores = []\n    \n    # Iterate through each row of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # If there is no score for a particular stem, skip it\n        if pd.isnull(leaf):\n            continue\n        \n        # Append each score to the list\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    \n    # Find the lowest score\n    lowest_score = min(scores)\n    \n    return lowest_score\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[7], [0, 5], [], [0, 2, 6, 9]]\n})\n# Call the tool to solve the problem\nprint(find_lowest_score(df))","question":"This morning, Mr. Goodman released the scores from last week's spelling test. What is the lowest score?","prediction_code":"import pandas as pd\n\ndef find_lowest_score(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of spelling test scores and returns the lowest score.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the spelling test scores.\n    The DataFrame should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The lowest score from the spelling test.\n    \"\"\"\n    # Create a list to store all the scores\n    scores = []\n    \n    # Iterate through each row of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # If there is no score for a particular stem, skip it\n        if pd.isnull(leaf):\n            continue\n        \n        # Append each score to the list\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    \n    # Find the lowest score\n    lowest_score = min(scores)\n    \n    return lowest_score","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[7], [0, 5], [], [0, 2, 6, 9]]\n})\n# Call the tool to solve the problem\nprint(find_lowest_score(df))","table":"Name: Spelling test scores\nUnit: points\nContent:\nStem | Leaf \n1 | 7\n2 | 0, 5\n3 | \n4 | 0, 2, 6, 9"}
{"level":7,"answer":6.0,"prediction":"import pandas as pd\n\ndef calculate_mean_years(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of years of teaching experience and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the names of teachers and the number of years they have been teaching.\n    The DataFrame should have columns 'Teacher' and 'Number of years'.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Extract the 'Number of years' column from the DataFrame\n    years = df['Number of years']\n    \n    # Calculate the mean of the numbers\n    mean_years = years.mean()\n    \n    return mean_years\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Teacher': ['Mr. Nakamura', 'Mrs. Ramirez', 'Mr. Gutierrez', 'Mr. Park', 'Miss Lim', 'Ms. Chan', 'Mr. Boone'],\n    'Number of years': [8, 4, 4, 6, 5, 9, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_years(df))","question":"Some teachers compared how many years they have been teaching. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean_years(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of years of teaching experience and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the names of teachers and the number of years they have been teaching.\n    The DataFrame should have columns 'Teacher' and 'Number of years'.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Extract the 'Number of years' column from the DataFrame\n    years = df['Number of years']\n    \n    # Calculate the mean of the numbers\n    mean_years = years.mean()\n    \n    return mean_years","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Teacher': ['Mr. Nakamura', 'Mrs. Ramirez', 'Mr. Gutierrez', 'Mr. Park', 'Miss Lim', 'Ms. Chan', 'Mr. Boone'],\n    'Number of years': [8, 4, 4, 6, 5, 9, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_years(df))","table":"Name: Years of teaching\nUnit: None\nContent:\nTeacher | Number of years\nMr. Nakamura | 8\nMrs. Ramirez | 4\nMr. Gutierrez | 4\nMr. Park | 6\nMiss Lim | 5\nMs. Chan | 9\nMr. Boone | 6"}
{"level":4,"answer":11.0,"prediction":"import pandas as pd\n\ndef find_smallest_number_of_situps(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of sit-up competition results and returns the smallest number of sit-ups done.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of sit-ups done by each student.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of sit-ups done.\n    \"\"\"\n    # prepare a list to store all sit-up numbers\n    situps = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the sit-up number for each row\n        for j in range(len(leaf)):\n            situps.append(stem * 10 + leaf[j])\n    # find the smallest sit-up number\n    smallest_situps = min(situps)\n    return smallest_situps\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[1, 9], [0, 2], [0, 1, 4, 5, 7, 8], [4], [5], [1, 7], [2, 9], [3, 3, 4, 8], [0]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_situps(df))","question":"Miss Blackburn ran a sit-up competition among her P.E. students and monitored how many sit-ups each students could do. What is the smallest number of sit-ups done?","prediction_code":"import pandas as pd\n\ndef find_smallest_number_of_situps(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of sit-up competition results and returns the smallest number of sit-ups done.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of sit-ups done by each student.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of sit-ups done.\n    \"\"\"\n    # prepare a list to store all sit-up numbers\n    situps = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the sit-up number for each row\n        for j in range(len(leaf)):\n            situps.append(stem * 10 + leaf[j])\n    # find the smallest sit-up number\n    smallest_situps = min(situps)\n    return smallest_situps","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[1, 9], [0, 2], [0, 1, 4, 5, 7, 8], [4], [5], [1, 7], [2, 9], [3, 3, 4, 8], [0]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_situps(df))","table":"Name: Sit-up competition (number of sit-ups)\nUnit: sit-ups\nContent:\nStem | Leaf \n1 | 1, 9\n2 | 0, 2\n3 | 0, 1, 4, 5, 7, 8\n4 | 4\n5 | 5\n6 | 1, 7\n7 | 2, 9\n8 | 3, 3, 4, 8\n9 | 0"}
{"level":4,"answer":6.16,"prediction":"import pandas as pd\n\ndef calculate_total_cost(menu_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table and a list of items, and returns the total cost of the items using pandas.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of menu item names.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the menu items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = menu_df[menu_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['carton of yogurt', 'box of gingersnaps', 'bag of flour', 'bag of walnuts', 'bag of frozen vegetables', 'bag of marshmallows'],\n    'Price': [1.96, 3.06, 1.80, 1.36, 1.14, 1.12]\n})\n\n# Define the items to calculate the total cost\nitems = ['bag of frozen vegetables', 'box of gingersnaps', 'carton of yogurt']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Amy need to buy a bag of frozen vegetables, a box of gingersnaps, and a carton of yogurt?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(menu_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table and a list of items, and returns the total cost of the items using pandas.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of menu item names.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the menu items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = menu_df[menu_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['carton of yogurt', 'box of gingersnaps', 'bag of flour', 'bag of walnuts', 'bag of frozen vegetables', 'bag of marshmallows'],\n    'Price': [1.96, 3.06, 1.80, 1.36, 1.14, 1.12]\n})\n\n# Define the items to calculate the total cost\nitems = ['bag of frozen vegetables', 'box of gingersnaps', 'carton of yogurt']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\ncarton of yogurt | $1.96\nbox of gingersnaps | $3.06\nbag of flour | $1.80\nbag of walnuts | $1.36\nbag of frozen vegetables | $1.14\nbag of marshmallows | $1.12"}
{"level":7,"answer":3.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of fan letters received and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of fan letters received each day.\n    The dataframe should contain \"Day\" and \"Number of fan letters\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of fan letters']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of fan letters': [4, 3, 2, 3, 4]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"An actor was informed how many fan letters he received each day. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of fan letters received and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of fan letters received each day.\n    The dataframe should contain \"Day\" and \"Number of fan letters\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of fan letters']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of fan letters': [4, 3, 2, 3, 4]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Fan letters received\nUnit: None\nContent:\nDay | Number of fan letters\nTuesday | 4\nWednesday | 3\nThursday | 2\nFriday | 3\nSaturday | 4"}
{"level":7,"answer":183.17,"prediction":"import pandas as pd\n\ndef calculate_total_cost(table, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table and a dictionary of orders, and returns the total cost of the orders using pandas.\n    Args:\n    table (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = table[table['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['encyclopedia', 'cat calendar', 'mystery novel', 'history book'],\n    'Price': [36.18, 11.80, 12.56, 17.73]\n})\n\n# Initialize the orders dictionary\norders = {\n    'history book': 9,\n    'cat calendar': 2\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","question":"How much money does Destiny need to buy 9 history books and 2 cat calendars?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(table, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table and a dictionary of orders, and returns the total cost of the orders using pandas.\n    Args:\n    table (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = table[table['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['encyclopedia', 'cat calendar', 'mystery novel', 'history book'],\n    'Price': [36.18, 11.80, 12.56, 17.73]\n})\n\n# Initialize the orders dictionary\norders = {\n    'history book': 9,\n    'cat calendar': 2\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","table":"Name: None\nUnit: $\nContent:\nencyclopedia | $36.18\ncat calendar | $11.80\nmystery novel | $12.56\nhistory book | $17.73"}
{"level":8,"answer":81.84,"prediction":"import pandas as pd\n\ndef calculate_total_cost(table_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table and a list of items, and returns the total cost of the items using pandas.\n    Args:\n    table_df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    items (list): A list of item names.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = table_df[table_df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['TV stand', 'kitchen table', 'rocking chair', 'nightstand', 'footstool', 'set of bunk beds'],\n    'Price': [22.61, 76.35, 58.72, 27.91, 24.36, 57.48]\n})\n\n# Define the items to calculate the total cost\nitems = ['footstool', 'set of bunk beds']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Rodrigo need to buy a footstool and a set of bunk beds?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(table_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table and a list of items, and returns the total cost of the items using pandas.\n    Args:\n    table_df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    items (list): A list of item names.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = table_df[table_df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['TV stand', 'kitchen table', 'rocking chair', 'nightstand', 'footstool', 'set of bunk beds'],\n    'Price': [22.61, 76.35, 58.72, 27.91, 24.36, 57.48]\n})\n\n# Define the items to calculate the total cost\nitems = ['footstool', 'set of bunk beds']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nTV stand | $22.61\nkitchen table | $76.35\nrocking chair | $58.72\nnightstand | $27.91\nfootstool | $24.36\nset of bunk beds | $57.48"}
{"level":7,"answer":3.87,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item given the quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Name' and 'Unit'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Extract the price per unit\n        price_per_unit = float(item_df['Unit'].str.extract(r'\\$(\\d+\\.\\d+)')[0])\n        \n        # Calculate the total cost\n        total_cost = price_per_unit * quantity\n        return total_cost\n    else:\n        return None\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['kale', 'romaine lettuce', 'Swiss chard', 'butterhead lettuce', 'Chinese lettuce'],\n    'Unit': ['$2.18 per kg', '$2.05 per kg', '$1.91 per kg', '$0.76 per kg', '$1.29 per kg']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'Chinese lettuce', 3))","question":"If Amanda buys 3 kilograms of Chinese lettuce, how much will she spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item given the quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Name' and 'Unit'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Extract the price per unit\n        price_per_unit = float(item_df['Unit'].str.extract(r'\\$(\\d+\\.\\d+)')[0])\n        \n        # Calculate the total cost\n        total_cost = price_per_unit * quantity\n        return total_cost\n    else:\n        return None","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['kale', 'romaine lettuce', 'Swiss chard', 'butterhead lettuce', 'Chinese lettuce'],\n    'Unit': ['$2.18 per kg', '$2.05 per kg', '$1.91 per kg', '$0.76 per kg', '$1.29 per kg']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'Chinese lettuce', 3))","table":"Name: None\nUnit: $\nContent:\nkale | $2.18 per kg\nromaine lettuce | $2.05 per kg\nSwiss chard | $1.91 per kg\nbutterhead lettuce | $0.76 per kg\nChinese lettuce | $1.29 per kg"}
{"level":4,"answer":263.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(table_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    table_df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = table_df[table_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['desk', 'kitchen table', 'leather chair', 'coffee table'],\n    'Price': [139, 133, 433, 130]\n})\n\n# Define the items to calculate the total cost\nitems = ['coffee table', 'kitchen table']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Quincy need to buy a coffee table and a kitchen table?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(table_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    table_df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = table_df[table_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['desk', 'kitchen table', 'leather chair', 'coffee table'],\n    'Price': [139, 133, 433, 130]\n})\n\n# Define the items to calculate the total cost\nitems = ['coffee table', 'kitchen table']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\ndesk | $139\nkitchen table | $133\nleather chair | $433\ncoffee table | $130"}
{"level":8,"answer":4.0,"prediction":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of numbers and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the numbers.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the numbers using the mean() function from pandas\n    mean = df.mean()\n    \n    return mean\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Teacher': ['Mrs. Rossi', 'Ms. Rojas', 'Mr. Lim', 'Ms. Cohen', 'Miss Murphy', 'Mrs. Jansen', 'Mr. Schmidt', 'Mr. Morales'],\n    'Number of computers': [5, 5, 1, 8, 4, 1, 2, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","question":"The teachers at a middle school counted how many computers they had in their classrooms. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of numbers and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the numbers.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the numbers using the mean() function from pandas\n    mean = df.mean()\n    \n    return mean","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Teacher': ['Mrs. Rossi', 'Ms. Rojas', 'Mr. Lim', 'Ms. Cohen', 'Miss Murphy', 'Mrs. Jansen', 'Mr. Schmidt', 'Mr. Morales'],\n    'Number of computers': [5, 5, 1, 8, 4, 1, 2, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","table":"Name: Computers in classrooms\nUnit: None\nContent:\nTeacher | Number of computers\nMrs. Rossi | 5\nMs. Rojas | 5\nMr. Lim | 1\nMs. Cohen | 8\nMiss Murphy | 4\nMrs. Jansen | 1\nMr. Schmidt | 2\nMr. Morales | 6"}
{"level":5,"answer":8.0,"prediction":"import pandas as pd\n\ndef calculate_vacant_apartments_difference(df, complex_name):\n    \"\"\"\n    This function takes in a pandas DataFrame of vacant apartments per complex and calculates the difference in vacant apartments for a specific complex between two months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of vacant apartments per complex for different months.\n    The DataFrame should have columns 'Apartment complex', 'October', and 'November'.\n    complex_name (str): The name of the complex for which the difference in vacant apartments is to be calculated.\n    Returns:\n    int: The difference in vacant apartments for the specified complex between October and November.\n    \"\"\"\n    # Filter the DataFrame for the specified complex\n    complex_df = df[df['Apartment complex'] == complex_name]\n    \n    # Get the number of vacant apartments for October and November\n    october_vacant = complex_df['October'].values[0]\n    november_vacant = complex_df['November'].values[0]\n    \n    # Calculate the difference in vacant apartments\n    vacant_difference = october_vacant - november_vacant\n    \n    return vacant_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Apartment complex': ['Sycamore Apartments', 'Lindale Apartments', 'City Apartments', 'Creekside Apartments', 'Alameda Apartments'],\n    'October': [13, 11, 6, 2, 16],\n    'November': [1, 18, 9, 3, 8]\n})\n\n# Call the tool to solve the problem\nprint(calculate_vacant_apartments_difference(df, 'Alameda Apartments'))","question":"Allenville Property Management reviewed the number of vacant apartments at each its apartment complexes over time. How many more vacant apartments did Alameda Apartments have in October than in November?","prediction_code":"import pandas as pd\n\ndef calculate_vacant_apartments_difference(df, complex_name):\n    \"\"\"\n    This function takes in a pandas DataFrame of vacant apartments per complex and calculates the difference in vacant apartments for a specific complex between two months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of vacant apartments per complex for different months.\n    The DataFrame should have columns 'Apartment complex', 'October', and 'November'.\n    complex_name (str): The name of the complex for which the difference in vacant apartments is to be calculated.\n    Returns:\n    int: The difference in vacant apartments for the specified complex between October and November.\n    \"\"\"\n    # Filter the DataFrame for the specified complex\n    complex_df = df[df['Apartment complex'] == complex_name]\n    \n    # Get the number of vacant apartments for October and November\n    october_vacant = complex_df['October'].values[0]\n    november_vacant = complex_df['November'].values[0]\n    \n    # Calculate the difference in vacant apartments\n    vacant_difference = october_vacant - november_vacant\n    \n    return vacant_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Apartment complex': ['Sycamore Apartments', 'Lindale Apartments', 'City Apartments', 'Creekside Apartments', 'Alameda Apartments'],\n    'October': [13, 11, 6, 2, 16],\n    'November': [1, 18, 9, 3, 8]\n})\n\n# Call the tool to solve the problem\nprint(calculate_vacant_apartments_difference(df, 'Alameda Apartments'))","table":"Name: Vacant apartments\nUnit: apartments\nContent:\nApartment complex | October | November\nSycamore Apartments | 13 | 1\nLindale Apartments | 11 | 18\nCity Apartments | 6 | 9\nCreekside Apartments | 2 | 3\nAlameda Apartments | 16 | 8"}
{"level":7,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of soccer fields per park and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of soccer fields per park.\n    The dataframe should contain \"Park\" and \"Number of soccer fields\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the \"Number of soccer fields\" column\n    soccer_fields = df['Number of soccer fields']\n    \n    # Calculate the mode using the value_counts() function\n    mode = soccer_fields.value_counts().idxmax()\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Park': ['Elmhurst Park', 'Canyon Park', 'Windy Hill Park', 'Juniper Park', 'Middle Park', 'Lighthouse Park'],\n    'Number of soccer fields': [5, 1, 5, 5, 1, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"The parks department compared how many soccer fields there are at each park. What is the mode of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of soccer fields per park and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of soccer fields per park.\n    The dataframe should contain \"Park\" and \"Number of soccer fields\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the \"Number of soccer fields\" column\n    soccer_fields = df['Number of soccer fields']\n    \n    # Calculate the mode using the value_counts() function\n    mode = soccer_fields.value_counts().idxmax()\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Park': ['Elmhurst Park', 'Canyon Park', 'Windy Hill Park', 'Juniper Park', 'Middle Park', 'Lighthouse Park'],\n    'Number of soccer fields': [5, 1, 5, 5, 1, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Soccer fields\nUnit: None\nContent:\nPark | Number of soccer fields\nElmhurst Park | 5\nCanyon Park | 1\nWindy Hill Park | 5\nJuniper Park | 5\nMiddle Park | 1\nLighthouse Park | 8"}
{"level":5,"answer":75.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of stuffed animal collections and returns the median of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the names and numbers of stuffed animals.\n    The dataframe should contain \"Name\" and \"Number of stuffed animals\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of stuffed animals']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Owen', 'Gabby', 'Colette', 'Desmond', 'Perry', 'Victoria', 'Bill'],\n    'Number of stuffed animals': [79, 74, 57, 76, 75, 76, 66]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"Some friends compared the sizes of their stuffed animal collections. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of stuffed animal collections and returns the median of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the names and numbers of stuffed animals.\n    The dataframe should contain \"Name\" and \"Number of stuffed animals\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of stuffed animals']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Owen', 'Gabby', 'Colette', 'Desmond', 'Perry', 'Victoria', 'Bill'],\n    'Number of stuffed animals': [79, 74, 57, 76, 75, 76, 66]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Stuffed animal collections\nUnit: None\nContent:\nName | Number of stuffed animals\nOwen | 79\nGabby | 74\nColette | 57\nDesmond | 76\nPerry | 75\nVictoria | 76\nBill | 66"}
{"level":6,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of grocery stores in each town and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of grocery stores in each town.\n    The dataframe should contain \"Town\" and \"Number of stores\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of stores\" column\n    min_stores = df['Number of stores'].min()\n    max_stores = df['Number of stores'].max()\n    \n    # Calculate the range\n    range_stores = max_stores - min_stores\n    \n    return range_stores\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Town': ['Greenwood', 'Watertown', 'Springfield', 'Chesterton', 'Mayfield'],\n    'Number of stores': [4, 6, 6, 9, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"A newspaper researched how many grocery stores there are in each town. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of grocery stores in each town and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of grocery stores in each town.\n    The dataframe should contain \"Town\" and \"Number of stores\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of stores\" column\n    min_stores = df['Number of stores'].min()\n    max_stores = df['Number of stores'].max()\n    \n    # Calculate the range\n    range_stores = max_stores - min_stores\n    \n    return range_stores","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Town': ['Greenwood', 'Watertown', 'Springfield', 'Chesterton', 'Mayfield'],\n    'Number of stores': [4, 6, 6, 9, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Grocery stores in each town\nUnit: None\nContent:\nTown | Number of stores\nGreenwood | 4\nWatertown | 6\nSpringfield | 6\nChesterton | 9\nMayfield | 6"}
{"level":2,"answer":15.0,"prediction":"import pandas as pd\n\ndef calculate_total_tomatoes(df, num_plants):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of plants and the number of tomatoes per plant, and returns the total number of tomatoes on a given number of plants.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of plants and the number of tomatoes per plant.\n    The dataframe should contain \"Number of plants\" and \"Number of tomatoes\" columns.\n    num_plants (int): The number of plants to calculate the total number of tomatoes for.\n    Returns:\n    int: The total number of tomatoes on the given number of plants.\n    \"\"\"\n    # Filter the DataFrame for the given number of plants\n    filtered_df = df[df['Number of plants'] == num_plants]\n    \n    # Get the number of tomatoes for the given number of plants\n    num_tomatoes = filtered_df['Number of tomatoes'].values[0]\n    \n    # Calculate the total number of tomatoes on the given number of plants\n    total_tomatoes = num_plants * num_tomatoes\n    \n    return total_tomatoes\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of plants': [1, 2, 3],\n    'Number of tomatoes': [5, 10, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_tomatoes(df, 3))","question":"Each plant has 5 tomatoes. How many tomatoes are on 3 plants?","prediction_code":"import pandas as pd\n\ndef calculate_total_tomatoes(df, num_plants):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of plants and the number of tomatoes per plant, and returns the total number of tomatoes on a given number of plants.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of plants and the number of tomatoes per plant.\n    The dataframe should contain \"Number of plants\" and \"Number of tomatoes\" columns.\n    num_plants (int): The number of plants to calculate the total number of tomatoes for.\n    Returns:\n    int: The total number of tomatoes on the given number of plants.\n    \"\"\"\n    # Filter the DataFrame for the given number of plants\n    filtered_df = df[df['Number of plants'] == num_plants]\n    \n    # Get the number of tomatoes for the given number of plants\n    num_tomatoes = filtered_df['Number of tomatoes'].values[0]\n    \n    # Calculate the total number of tomatoes on the given number of plants\n    total_tomatoes = num_plants * num_tomatoes\n    \n    return total_tomatoes","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of plants': [1, 2, 3],\n    'Number of tomatoes': [5, 10, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_tomatoes(df, 3))","table":"Name: None\nUnit: None\nContent:\nNumber of plants | Number of tomatoes\n1 | 5\n2 | 10\n3 | ?"}
{"level":4,"answer":544.0,"prediction":"import pandas as pd\n\ndef calculate_remaining_money(money_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to buy.\n    It returns the amount of money remaining after buying the specified items.\n    Args:\n    money_df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to buy.\n    Returns:\n    float: The amount of money remaining after buying the specified items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the total cost\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = money_df[money_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    # Calculate the remaining money\n    remaining_money = 1201 - total_cost\n    \n    return remaining_money\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['laboratory freezer', 'case of beakers', 'case of test tubes', 'hot plate'],\n    'Price': [502, 268, 429, 389]\n})\n\n# Specify the items to buy\nitems_to_buy = ['case of beakers', 'hot plate']\n\n# Call the tool to solve the problem\nprint(calculate_remaining_money(df, items_to_buy))","question":"Isaiah has $1,201. How much money will Isaiah have left if he buys a case of beakers and a hot plate?","prediction_code":"import pandas as pd\n\ndef calculate_remaining_money(money_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to buy.\n    It returns the amount of money remaining after buying the specified items.\n    Args:\n    money_df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to buy.\n    Returns:\n    float: The amount of money remaining after buying the specified items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the total cost\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = money_df[money_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    # Calculate the remaining money\n    remaining_money = 1201 - total_cost\n    \n    return remaining_money","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['laboratory freezer', 'case of beakers', 'case of test tubes', 'hot plate'],\n    'Price': [502, 268, 429, 389]\n})\n\n# Specify the items to buy\nitems_to_buy = ['case of beakers', 'hot plate']\n\n# Call the tool to solve the problem\nprint(calculate_remaining_money(df, items_to_buy))","table":"Name: None\nUnit: $\nContent:\nlaboratory freezer | $502\ncase of beakers | $268\ncase of test tubes | $429\nhot plate | $389"}
{"level":7,"answer":17.0,"prediction":"import pandas as pd\n\ndef count_buildings_with_bricks(df, min_bricks, max_bricks):\n    \"\"\"\n    This function takes in a pandas dataframe of bricks per building and returns the number of buildings that have at least min_bricks but fewer than max_bricks bricks.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of bricks per building.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_bricks (int): The minimum number of bricks required for a building to be counted.\n    max_bricks (int): The maximum number of bricks allowed for a building to be counted.\n    Returns:\n    int: The number of buildings that have at least min_bricks but fewer than max_bricks bricks.\n    \"\"\"\n    # prepare a list to calculate the number of bricks in each building\n    bricks = []\n    # calculate the total number of bricks in each building\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            bricks.append(stem * 10 + leaf[j])\n    # filter the buildings where the total number of bricks is greater than or equal to min_bricks and less than max_bricks\n    filtered = [brick for brick in bricks if min_bricks <= brick < max_bricks]\n    # count the number of buildings\n    num_buildings = len(filtered)\n    return num_buildings\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7],\n    'Leaf': [[4, 7, 9], [5, 6], [0, 2, 9], [3, 8], [4, 6, 6, 9], [1, 4, 5]]\n})\n# Call the tool to solve the problem\nprint(count_buildings_with_bricks(df, 22, 77))","question":"The architecture student counted the number of bricks in each building in his neighborhood. How many buildings have at least 22 bricks but fewer than 77 bricks?","prediction_code":"import pandas as pd\n\ndef count_buildings_with_bricks(df, min_bricks, max_bricks):\n    \"\"\"\n    This function takes in a pandas dataframe of bricks per building and returns the number of buildings that have at least min_bricks but fewer than max_bricks bricks.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of bricks per building.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_bricks (int): The minimum number of bricks required for a building to be counted.\n    max_bricks (int): The maximum number of bricks allowed for a building to be counted.\n    Returns:\n    int: The number of buildings that have at least min_bricks but fewer than max_bricks bricks.\n    \"\"\"\n    # prepare a list to calculate the number of bricks in each building\n    bricks = []\n    # calculate the total number of bricks in each building\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            bricks.append(stem * 10 + leaf[j])\n    # filter the buildings where the total number of bricks is greater than or equal to min_bricks and less than max_bricks\n    filtered = [brick for brick in bricks if min_bricks <= brick < max_bricks]\n    # count the number of buildings\n    num_buildings = len(filtered)\n    return num_buildings","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7],\n    'Leaf': [[4, 7, 9], [5, 6], [0, 2, 9], [3, 8], [4, 6, 6, 9], [1, 4, 5]]\n})\n# Call the tool to solve the problem\nprint(count_buildings_with_bricks(df, 22, 77))","table":"Name: Bricks per building\nUnit: buildings\nContent:\nStem | Leaf \n2 | 4, 7, 9\n3 | 5, 6\n4 | 0, 2, 9\n5 | 3, 8\n6 | 4, 6, 6, 9\n7 | 1, 4, 5"}
{"level":5,"answer":76.0,"prediction":"import pandas as pd\n\ndef calculate_median_minutes(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of minutes spent rehearsing and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of minutes spent rehearsing.\n    The dataframe should contain \"Day\" and \"Minutes\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the \"Minutes\" column from the DataFrame\n    minutes = df['Minutes']\n    \n    # Calculate the median using the pandas median function\n    median_minutes = minutes.median()\n    \n    return median_minutes\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n    'Minutes': [78, 79, 67, 70, 76]\n})\n# Call the tool to solve the problem\nprint(calculate_median_minutes(df))","question":"Kinsley recalled how many minutes she had spent at orchestra rehearsal in the past 5 days. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median_minutes(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of minutes spent rehearsing and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of minutes spent rehearsing.\n    The dataframe should contain \"Day\" and \"Minutes\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the \"Minutes\" column from the DataFrame\n    minutes = df['Minutes']\n    \n    # Calculate the median using the pandas median function\n    median_minutes = minutes.median()\n    \n    return median_minutes","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n    'Minutes': [78, 79, 67, 70, 76]\n})\n# Call the tool to solve the problem\nprint(calculate_median_minutes(df))","table":"Name: Minutes spent rehearsing\nUnit: None\nContent:\nDay | Minutes\nWednesday | 78\nThursday | 79\nFriday | 67\nSaturday | 70\nSunday | 76"}
{"level":8,"answer":9.81,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table, an item name, and a quantity, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (int): The quantity of the item.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = quantity * item_price\n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['box of markers', 'eraser', 'rubber stamp', 'box of paper clips'],\n    'Price': [3.26, 1.09, 2.62, 1.00]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'eraser', 9))","question":"How much money does Valentina need to buy 9 erasers?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table, an item name, and a quantity, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (int): The quantity of the item.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = quantity * item_price\n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['box of markers', 'eraser', 'rubber stamp', 'box of paper clips'],\n    'Price': [3.26, 1.09, 2.62, 1.00]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'eraser', 9))","table":"Name: None\nUnit: $\nContent:\nbox of markers | $3.26\neraser | $1.09\nrubber stamp | $2.62\nbox of paper clips | $1.00"}
{"level":4,"answer":18.34,"prediction":"import pandas as pd\n\ndef calculate_total_cost(items_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    items_df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = items_df[items_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['pair of white socks', 'blue shirt', 'striped shirt', 'long-sleeved shirt', 'pair of khaki pants'],\n    'Price': [4.10, 4.34, 2.46, 8.02, 6.22]\n})\n\n# Define the items to calculate the total cost\nitems = ['long-sleeved shirt', 'pair of white socks', 'pair of khaki pants']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does William need to buy a long-sleeved shirt, a pair of white socks, and a pair of khaki pants?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(items_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    items_df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = items_df[items_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['pair of white socks', 'blue shirt', 'striped shirt', 'long-sleeved shirt', 'pair of khaki pants'],\n    'Price': [4.10, 4.34, 2.46, 8.02, 6.22]\n})\n\n# Define the items to calculate the total cost\nitems = ['long-sleeved shirt', 'pair of white socks', 'pair of khaki pants']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\npair of white socks | $4.10\nblue shirt | $4.34\nstriped shirt | $2.46\nlong-sleeved shirt | $8.02\npair of khaki pants | $6.22"}
{"level":8,"answer":3.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost for a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Unit'.\n    item (str): The name of the item to calculate the total cost for.\n    Returns:\n    float: The total cost for the specific item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price of the item\n        price = item_df['Unit'].values[0]\n        \n        # Remove the '$' symbol and convert the price to a float\n        price = float(price.replace('$', ''))\n        \n        # Calculate the total cost for 1 pound of the item\n        total_cost = price * 1\n        \n        return total_cost\n    else:\n        return None\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Italian dressing', 'balsamic vinaigrette', 'Thousand Island dressing', 'raspberry vinaigrette', 'ranch dressing', 'blue cheese dressing'],\n    'Unit': ['$5\/lb', '$6\/lb', '$3\/lb', '$4\/lb', '$4\/lb', '$6\/lb']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'Thousand Island dressing'))","question":"What is the total cost for 1 pound of Thousand Island dressing?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost for a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Unit'.\n    item (str): The name of the item to calculate the total cost for.\n    Returns:\n    float: The total cost for the specific item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price of the item\n        price = item_df['Unit'].values[0]\n        \n        # Remove the '$' symbol and convert the price to a float\n        price = float(price.replace('$', ''))\n        \n        # Calculate the total cost for 1 pound of the item\n        total_cost = price * 1\n        \n        return total_cost\n    else:\n        return None","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Italian dressing', 'balsamic vinaigrette', 'Thousand Island dressing', 'raspberry vinaigrette', 'ranch dressing', 'blue cheese dressing'],\n    'Unit': ['$5\/lb', '$6\/lb', '$3\/lb', '$4\/lb', '$4\/lb', '$6\/lb']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'Thousand Island dressing'))","table":"Name: None\nUnit: $\nContent:\nItalian dressing | $5\/lb\nbalsamic vinaigrette | $6\/lb\nThousand Island dressing | $3\/lb\nraspberry vinaigrette | $4\/lb\nranch dressing | $4\/lb\nblue cheese dressing | $6\/lb"}
{"level":8,"answer":-25.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average food preparation time and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average food preparation time for each day.\n    The DataFrame should have columns 'Day' and 'Food preparation time (minutes)'.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Filter the DataFrame for the two days\n    day1_df = df[df['Day'] == day1]\n    day2_df = df[df['Day'] == day2]\n    \n    # Get the food preparation time for each day\n    day1_time = day1_df['Food preparation time (minutes)'].values[0]\n    day2_time = day2_df['Food preparation time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (day2_time - day1_time) \/ (df.index.get_loc(day2_df.index[0]) - df.index.get_loc(day1_df.index[0]))\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Food preparation time (minutes)': [23, 37, 38, 13, 36]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Wednesday', 'Thursday'))","question":"A restaurant's average food preparation time was tracked from day to day as part of an efficiency improvement program. According to the table, what was the rate of change between Wednesday and Thursday?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average food preparation time and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average food preparation time for each day.\n    The DataFrame should have columns 'Day' and 'Food preparation time (minutes)'.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Filter the DataFrame for the two days\n    day1_df = df[df['Day'] == day1]\n    day2_df = df[df['Day'] == day2]\n    \n    # Get the food preparation time for each day\n    day1_time = day1_df['Food preparation time (minutes)'].values[0]\n    day2_time = day2_df['Food preparation time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (day2_time - day1_time) \/ (df.index.get_loc(day2_df.index[0]) - df.index.get_loc(day1_df.index[0]))\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Food preparation time (minutes)': [23, 37, 38, 13, 36]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Wednesday', 'Thursday'))","table":"Name: Average food preparation time\nUnit: minutes per day\nContent:\nDay | Food preparation time (minutes)\nMonday | 23\nTuesday | 37\nWednesday | 38\nThursday | 13\nFriday | 36"}
{"level":8,"answer":8.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of spelling words practiced and returns the median of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of spelling words practiced each day.\n    The dataframe should contain \"Day\" and \"Number of spelling words\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of spelling words']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of spelling words': [8, 10, 10, 6, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"Leslie wrote down how many spelling words she practiced each day. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of spelling words practiced and returns the median of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of spelling words practiced each day.\n    The dataframe should contain \"Day\" and \"Number of spelling words\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of spelling words']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of spelling words': [8, 10, 10, 6, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Spelling words practiced\nUnit: None\nContent:\nDay | Number of spelling words\nTuesday | 8\nWednesday | 10\nThursday | 10\nFriday | 6\nSaturday | 5"}
{"level":7,"answer":4.0,"prediction":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of numbers and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the numbers.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the numbers using the mean() function from pandas\n    mean = df.mean()\n    \n    return mean\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Teacher': ['Mrs. Jansen', 'Miss Murphy', 'Ms. Rojas', 'Ms. Cohen', 'Mrs. Rossi'],\n    'Number of computers': [3, 6, 3, 3, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","question":"The teachers at a middle school counted how many computers they had in their classrooms. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of numbers and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the numbers.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the numbers using the mean() function from pandas\n    mean = df.mean()\n    \n    return mean","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Teacher': ['Mrs. Jansen', 'Miss Murphy', 'Ms. Rojas', 'Ms. Cohen', 'Mrs. Rossi'],\n    'Number of computers': [3, 6, 3, 3, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","table":"Name: Computers in classrooms\nUnit: None\nContent:\nTeacher | Number of computers\nMrs. Jansen | 3\nMiss Murphy | 6\nMs. Rojas | 3\nMs. Cohen | 3\nMrs. Rossi | 5"}
{"level":4,"answer":10.0,"prediction":"import pandas as pd\n\ndef get_ticket_price(df, zoo_name, ticket_type):\n    \"\"\"\n    This function takes in a pandas DataFrame of zoo ticket prices, a zoo name, and a ticket type, and returns the price of the ticket.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing zoo ticket prices with columns 'Zoo', 'Adult', and 'Child'.\n    zoo_name (str): The name of the zoo.\n    ticket_type (str): The type of ticket ('Adult' or 'Child').\n    Returns:\n    float: The price of the ticket.\n    \"\"\"\n    # Filter the DataFrame for the specific zoo\n    zoo_df = df[df['Zoo'] == zoo_name]\n    \n    # Get the ticket price for the specific ticket type\n    ticket_price = zoo_df[ticket_type].values[0]\n    \n    return ticket_price\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Zoo': ['Los Angeles', 'Houston', 'Cleveland', 'Brookfield'],\n    'Adult': [13, 10, 10, 12],\n    'Child': [8, 6, 7, 8]\n})\n\n# Call the tool to solve the problem\nprint(get_ticket_price(df, 'Cleveland', 'Adult'))","question":"Dr. Hatfield, a zoo director, researched ticket prices at other zoos around the country. How much does an adult ticket to the Cleveland Zoo cost?","prediction_code":"import pandas as pd\n\ndef get_ticket_price(df, zoo_name, ticket_type):\n    \"\"\"\n    This function takes in a pandas DataFrame of zoo ticket prices, a zoo name, and a ticket type, and returns the price of the ticket.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing zoo ticket prices with columns 'Zoo', 'Adult', and 'Child'.\n    zoo_name (str): The name of the zoo.\n    ticket_type (str): The type of ticket ('Adult' or 'Child').\n    Returns:\n    float: The price of the ticket.\n    \"\"\"\n    # Filter the DataFrame for the specific zoo\n    zoo_df = df[df['Zoo'] == zoo_name]\n    \n    # Get the ticket price for the specific ticket type\n    ticket_price = zoo_df[ticket_type].values[0]\n    \n    return ticket_price","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Zoo': ['Los Angeles', 'Houston', 'Cleveland', 'Brookfield'],\n    'Adult': [13, 10, 10, 12],\n    'Child': [8, 6, 7, 8]\n})\n\n# Call the tool to solve the problem\nprint(get_ticket_price(df, 'Cleveland', 'Adult'))","table":"Name: Zoo ticket prices\nUnit: $\nContent:\nZoo | Adult | Child\nLos Angeles | $13 | $8\nHouston | $10 | $6\nCleveland | $10 | $7\nBrookfield | $12 | $8"}
{"level":5,"answer":265.1,"prediction":"import pandas as pd\n\ndef calculate_available_funds(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing Finn's financial record and returns the available funds after expenses.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the financial record with columns 'Date', 'Description', 'Received', 'Expenses', and 'Available Funds'.\n    Returns:\n    float: The available funds after expenses.\n    \"\"\"\n    # Filter the DataFrame for the row with the description 'chips and salsa'\n    chips_salsa_row = df[df['Description'] == 'chips and salsa']\n    \n    # Get the expenses for chips and salsa\n    expenses = chips_salsa_row['Expenses'].values[0]\n    \n    # Get the available funds after expenses\n    available_funds = df['Available Funds'].values[0] - expenses\n    \n    return available_funds\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Date': [' ', '11\/4', '11\/20', '11\/22'],\n    'Description': ['Balance: end of October', 'chips and salsa', 'box of markers', 'garage sale'],\n    'Received': ['', '', '', 48.00],\n    'Expenses': ['', 6.30, 4.95, ''],\n    'Available Funds': [271.40, 265.10, 260.15, 308.15]\n})\n# Call the tool to solve the problem\nprint(calculate_available_funds(df))","question":"This is Finn's complete financial record for November. How much money did Finn have after he bought chips and salsa?","prediction_code":"import pandas as pd\n\ndef calculate_available_funds(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing Finn's financial record and returns the available funds after expenses.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the financial record with columns 'Date', 'Description', 'Received', 'Expenses', and 'Available Funds'.\n    Returns:\n    float: The available funds after expenses.\n    \"\"\"\n    # Filter the DataFrame for the row with the description 'chips and salsa'\n    chips_salsa_row = df[df['Description'] == 'chips and salsa']\n    \n    # Get the expenses for chips and salsa\n    expenses = chips_salsa_row['Expenses'].values[0]\n    \n    # Get the available funds after expenses\n    available_funds = df['Available Funds'].values[0] - expenses\n    \n    return available_funds","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Date': [' ', '11\/4', '11\/20', '11\/22'],\n    'Description': ['Balance: end of October', 'chips and salsa', 'box of markers', 'garage sale'],\n    'Received': ['', '', '', 48.00],\n    'Expenses': ['', 6.30, 4.95, ''],\n    'Available Funds': [271.40, 265.10, 260.15, 308.15]\n})\n# Call the tool to solve the problem\nprint(calculate_available_funds(df))","table":"Name: None\nUnit: $\nContent:\nDate | Description | Received | Expenses | Available Funds\n | Balance: end of October | | | $271.40\n11\/4 | chips and salsa | | $6.30 | $265.10\n11\/20 | box of markers | | $4.95 | $260.15\n11\/22 | garage sale | $48.00 | | $308.15"}
{"level":5,"answer":31.0,"prediction":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of numbers and returns the mode of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the numbers.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column containing the numbers\n    numbers = df.iloc[:, 1]\n    \n    # Calculate the mode using the value_counts() function\n    mode = numbers.value_counts().idxmax()\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['April', 'May', 'June', 'July', 'August', 'September', 'October', 'November'],\n    'Number of tractors': [25, 31, 25, 31, 31, 23, 27, 23]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"A farm equipment company kept a record of the number of tractors made each month. What is the mode of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of numbers and returns the mode of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the numbers.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column containing the numbers\n    numbers = df.iloc[:, 1]\n    \n    # Calculate the mode using the value_counts() function\n    mode = numbers.value_counts().idxmax()\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['April', 'May', 'June', 'July', 'August', 'September', 'October', 'November'],\n    'Number of tractors': [25, 31, 25, 31, 31, 23, 27, 23]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Tractors made\nUnit: None\nContent:\nMonth | Number of tractors\nApril | 25\nMay | 31\nJune | 25\nJuly | 31\nAugust | 31\nSeptember | 23\nOctober | 27\nNovember | 23"}
{"level":5,"answer":2.0,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, zoo1, zoo2, ticket_type):\n    \"\"\"\n    This function takes in a pandas DataFrame of zoo ticket prices and returns the price difference between two zoos for a specific ticket type.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing zoo ticket prices with columns 'Zoo', 'Child', and 'Senior'.\n    zoo1 (str): The name of the first zoo.\n    zoo2 (str): The name of the second zoo.\n    ticket_type (str): The type of ticket to compare ('Child' or 'Senior').\n    Returns:\n    float: The price difference between the two zoos for the specified ticket type.\n    \"\"\"\n    # Filter the DataFrame for the two zoos\n    zoo1_df = df[df['Zoo'] == zoo1]\n    zoo2_df = df[df['Zoo'] == zoo2]\n    \n    # Get the ticket prices for the specified ticket type\n    zoo1_price = zoo1_df[ticket_type].values[0]\n    zoo2_price = zoo2_df[ticket_type].values[0]\n    \n    # Calculate the price difference\n    price_difference = zoo2_price - zoo1_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Zoo': ['Cleveland', 'Southern Nevada', 'Central Park', 'Denver'],\n    'Child': [7, 6, 5, 7],\n    'Senior': [10, 6, 7, 9]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'Central Park', 'Denver', 'Child'))","question":"Dr. West, a zoo director, researched ticket prices at other zoos around the country. How much more does a child ticket cost at the Denver Zoo than at the Central Park Zoo?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, zoo1, zoo2, ticket_type):\n    \"\"\"\n    This function takes in a pandas DataFrame of zoo ticket prices and returns the price difference between two zoos for a specific ticket type.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing zoo ticket prices with columns 'Zoo', 'Child', and 'Senior'.\n    zoo1 (str): The name of the first zoo.\n    zoo2 (str): The name of the second zoo.\n    ticket_type (str): The type of ticket to compare ('Child' or 'Senior').\n    Returns:\n    float: The price difference between the two zoos for the specified ticket type.\n    \"\"\"\n    # Filter the DataFrame for the two zoos\n    zoo1_df = df[df['Zoo'] == zoo1]\n    zoo2_df = df[df['Zoo'] == zoo2]\n    \n    # Get the ticket prices for the specified ticket type\n    zoo1_price = zoo1_df[ticket_type].values[0]\n    zoo2_price = zoo2_df[ticket_type].values[0]\n    \n    # Calculate the price difference\n    price_difference = zoo2_price - zoo1_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Zoo': ['Cleveland', 'Southern Nevada', 'Central Park', 'Denver'],\n    'Child': [7, 6, 5, 7],\n    'Senior': [10, 6, 7, 9]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'Central Park', 'Denver', 'Child'))","table":"Name: Zoo ticket prices\nUnit: $\nContent:\nZoo | Child | Senior\nCleveland | $7 | $10\nSouthern Nevada | $6 | $6\nCentral Park | $5 | $7\nDenver | $7 | $9"}
{"level":6,"answer":5.25,"prediction":"import pandas as pd\n\ndef calculate_total_cost(dough_df, dough_type, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of cookie dough prices and a specific dough type and weight, and returns the total cost of the dough.\n    Args:\n    dough_df (pd.DataFrame): A pandas DataFrame containing cookie dough types and their prices with columns 'Dough' and 'Price'.\n    dough_type (str): The specific dough type.\n    weight (float): The weight of the dough in pounds.\n    Returns:\n    float: The total cost of the dough.\n    \"\"\"\n    # Filter the DataFrame for the specific dough type\n    dough_row = dough_df[dough_df['Dough'] == dough_type]\n    \n    # Check if the dough type exists in the DataFrame\n    if not dough_row.empty:\n        dough_price = dough_row['Price'].values[0]\n        total_cost = dough_price * weight\n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndough_df = pd.DataFrame({\n    'Dough': ['oatmeal raisin cookie dough', 'chocolate chip cookie dough', 'snickerdoodle cookie dough', 'double chocolate cookie dough', 'peanut butter cookie dough', 'gingersnap cookie dough'],\n    'Price': [7, 5, 5, 6, 6, 4]\n})\n\n# Set the specific dough type and weight\ndough_type = 'oatmeal raisin cookie dough'\nweight = 3\/4\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(dough_df, dough_type, weight)\n\n# Print out the answer\nprint(total_cost)","question":"Chad went to the store and bought 3\/4 of a pound of oatmeal raisin cookie dough. How much did he spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(dough_df, dough_type, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of cookie dough prices and a specific dough type and weight, and returns the total cost of the dough.\n    Args:\n    dough_df (pd.DataFrame): A pandas DataFrame containing cookie dough types and their prices with columns 'Dough' and 'Price'.\n    dough_type (str): The specific dough type.\n    weight (float): The weight of the dough in pounds.\n    Returns:\n    float: The total cost of the dough.\n    \"\"\"\n    # Filter the DataFrame for the specific dough type\n    dough_row = dough_df[dough_df['Dough'] == dough_type]\n    \n    # Check if the dough type exists in the DataFrame\n    if not dough_row.empty:\n        dough_price = dough_row['Price'].values[0]\n        total_cost = dough_price * weight\n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndough_df = pd.DataFrame({\n    'Dough': ['oatmeal raisin cookie dough', 'chocolate chip cookie dough', 'snickerdoodle cookie dough', 'double chocolate cookie dough', 'peanut butter cookie dough', 'gingersnap cookie dough'],\n    'Price': [7, 5, 5, 6, 6, 4]\n})\n\n# Set the specific dough type and weight\ndough_type = 'oatmeal raisin cookie dough'\nweight = 3\/4\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(dough_df, dough_type, weight)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\noatmeal raisin cookie dough | $7 per pound\nchocolate chip cookie dough | $5 per pound\nsnickerdoodle cookie dough | $5 per pound\ndouble chocolate cookie dough | $6 per pound\npeanut butter cookie dough | $6 per pound\ngingersnap cookie dough | $4 per pound"}
{"level":5,"answer":7.0,"prediction":"import pandas as pd\n\ndef count_boxes_with_60_broken_crayons(df):\n    \"\"\"\n    This function takes in a pandas dataframe of broken crayons per box, and returns the number of boxes that have at least 60 broken crayons.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken crayons per box.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of boxes that have at least 60 broken crayons.\n    \"\"\"\n    # prepare a list to calculate broken crayons in each box\n    crayons = []\n    # calculate the total number of broken crayons in each box\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            crayons.append(stem * 10 + leaf[j])\n    # filter the boxes where the total number of broken crayons is greater than or equal to 60\n    filtered = [crayon for crayon in crayons if crayon >= 60]\n    # count the number of rows\n    num_boxes = len(filtered)\n    return num_boxes\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[0, 1, 5, 5], [], [0], [1, 2, 6, 8], [2, 8], [1, 2], [2, 4], [1, 5], [8], [0, 0]]\n})\n# Call the tool to solve the problem\nprint(count_boxes_with_60_broken_crayons(df))","question":"A crayon factory monitored the number of broken crayons per box during the past day. How many boxes had at least 60 broken crayons?","prediction_code":"import pandas as pd\n\ndef count_boxes_with_60_broken_crayons(df):\n    \"\"\"\n    This function takes in a pandas dataframe of broken crayons per box, and returns the number of boxes that have at least 60 broken crayons.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken crayons per box.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of boxes that have at least 60 broken crayons.\n    \"\"\"\n    # prepare a list to calculate broken crayons in each box\n    crayons = []\n    # calculate the total number of broken crayons in each box\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            crayons.append(stem * 10 + leaf[j])\n    # filter the boxes where the total number of broken crayons is greater than or equal to 60\n    filtered = [crayon for crayon in crayons if crayon >= 60]\n    # count the number of rows\n    num_boxes = len(filtered)\n    return num_boxes","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[0, 1, 5, 5], [], [0], [1, 2, 6, 8], [2, 8], [1, 2], [2, 4], [1, 5], [8], [0, 0]]\n})\n# Call the tool to solve the problem\nprint(count_boxes_with_60_broken_crayons(df))","table":"Name: Broken crayons per box\nUnit: boxes\nContent:\nStem | Leaf \n0 | 0, 1, 5, 5\n1 | \n2 | 0\n3 | 1, 2, 6, 8\n4 | 2, 8\n5 | 1, 2\n6 | 2, 4\n7 | 1, 5\n8 | 8\n9 | 0, 0"}
{"level":8,"answer":1.79,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['cookbook', 'cutting board', 'set of spoons', 'rolling pin'],\n    'Price': [17.14, 15.35, 17.87, 12.15]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'cookbook', 'cutting board'))","question":"How much more does a cookbook cost than a cutting board?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['cookbook', 'cutting board', 'set of spoons', 'rolling pin'],\n    'Price': [17.14, 15.35, 17.87, 12.15]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'cookbook', 'cutting board'))","table":"Name: None\nUnit: $\nContent:\ncookbook | $17.14\ncutting board | $15.35\nset of spoons | $17.87\nrolling pin | $12.15"}
{"level":5,"answer":4.15,"prediction":"import pandas as pd\n\ndef find_expense(df, description):\n    \"\"\"\n    This function takes in a pandas DataFrame of financial records and a description of an expense, and returns the amount spent on that expense.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing financial records with columns 'Date', 'Description', 'Received', 'Expenses', and 'Available Funds'.\n    description (str): The description of the expense to find.\n    Returns:\n    float: The amount spent on the expense.\n    \"\"\"\n    # Filter the DataFrame for the specific expense description\n    expense_df = df[df['Description'] == description]\n    \n    # Check if the expense exists in the DataFrame\n    if not expense_df.empty:\n        expense_amount = expense_df['Expenses'].values[0]\n        return expense_amount\n    \n    return None\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Date': [' ', '4\/7', '4\/14', '4\/23'],\n    'Description': ['Balance: end of March', 'bag of jellybeans', 'helping Mr. Randall', 'umbrella'],\n    'Received': ['', '', 20.00, ''],\n    'Expenses': ['', 4.15, '', 12.65],\n    'Available Funds': [461.80, 457.65, 477.65, 465.00]\n})\n\n# Call the tool to solve the problem\nprint(find_expense(df, 'bag of jellybeans'))","question":"This is Kira's complete financial record for April. How much money did Kira spend on a bag of jellybeans?","prediction_code":"import pandas as pd\n\ndef find_expense(df, description):\n    \"\"\"\n    This function takes in a pandas DataFrame of financial records and a description of an expense, and returns the amount spent on that expense.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing financial records with columns 'Date', 'Description', 'Received', 'Expenses', and 'Available Funds'.\n    description (str): The description of the expense to find.\n    Returns:\n    float: The amount spent on the expense.\n    \"\"\"\n    # Filter the DataFrame for the specific expense description\n    expense_df = df[df['Description'] == description]\n    \n    # Check if the expense exists in the DataFrame\n    if not expense_df.empty:\n        expense_amount = expense_df['Expenses'].values[0]\n        return expense_amount\n    \n    return None","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Date': [' ', '4\/7', '4\/14', '4\/23'],\n    'Description': ['Balance: end of March', 'bag of jellybeans', 'helping Mr. Randall', 'umbrella'],\n    'Received': ['', '', 20.00, ''],\n    'Expenses': ['', 4.15, '', 12.65],\n    'Available Funds': [461.80, 457.65, 477.65, 465.00]\n})\n\n# Call the tool to solve the problem\nprint(find_expense(df, 'bag of jellybeans'))","table":"Name: None\nUnit: $\nContent:\nDate | Description | Received | Expenses | Available Funds\n | Balance: end of March | | | $461.80\n4\/7 | bag of jellybeans | | $4.15 | $457.65\n4\/14 | helping Mr. Randall | $20.00 | | $477.65\n4\/23 | umbrella | | $12.65 | $465.00"}
{"level":8,"answer":-7.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, month1, month2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average waiting time at the DMV and two months, and returns the rate of change between the two months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average waiting time at the DMV with columns 'Month' and 'Waiting time (minutes)'.\n    month1 (str): The first month for calculating the rate of change.\n    month2 (str): The second month for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two months.\n    \"\"\"\n    # Filter the DataFrame for the two months\n    month1_df = df[df['Month'] == month1]\n    month2_df = df[df['Month'] == month2]\n    \n    # Get the waiting time for each month\n    waiting_time1 = month1_df['Waiting time (minutes)'].values[0]\n    waiting_time2 = month2_df['Waiting time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (waiting_time2 - waiting_time1) \/ waiting_time1\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['March', 'April', 'May', 'June', 'July'],\n    'Waiting time (minutes)': [29, 33, 33, 36, 29]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'June', 'July'))","question":"An administrator at the Department of Motor Vehicles (DMV) tracked the average wait time from month to month. According to the table, what was the rate of change between June and July?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, month1, month2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average waiting time at the DMV and two months, and returns the rate of change between the two months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average waiting time at the DMV with columns 'Month' and 'Waiting time (minutes)'.\n    month1 (str): The first month for calculating the rate of change.\n    month2 (str): The second month for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two months.\n    \"\"\"\n    # Filter the DataFrame for the two months\n    month1_df = df[df['Month'] == month1]\n    month2_df = df[df['Month'] == month2]\n    \n    # Get the waiting time for each month\n    waiting_time1 = month1_df['Waiting time (minutes)'].values[0]\n    waiting_time2 = month2_df['Waiting time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (waiting_time2 - waiting_time1) \/ waiting_time1\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['March', 'April', 'May', 'June', 'July'],\n    'Waiting time (minutes)': [29, 33, 33, 36, 29]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'June', 'July'))","table":"Name: Average waiting time at the DMV\nUnit: minutes per month\nContent:\nMonth | Waiting time (minutes)\nMarch | 29\nApril | 33\nMay | 33\nJune | 36\nJuly | 29"}
{"level":8,"answer":7.0,"prediction":"import pandas as pd\n\ndef count_bags_with_red_buttons(df):\n    \"\"\"\n    This function takes in a pandas dataframe of red buttons per bag, and returns the number of bags that have at least 20 red buttons but fewer than 80 red buttons.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of red buttons per bag.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of bags that have at least 20 red buttons but fewer than 80 red buttons.\n    \"\"\"\n    # prepare a list to calculate red buttons in each bag\n    red_buttons = []\n    # calculate the total number of red buttons in each bag\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            red_buttons.append(stem * 10 + leaf[j])\n    # filter the bags where the total number of red buttons is greater than or equal to 20 and less than 80\n    filtered = [button for button in red_buttons if 20 <= button < 80]\n    # count the number of rows\n    num_bags = len(filtered)\n    return num_bags\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[2], [3, 9], [1, 3, 5, 8], [], [7], [], [], [7], [0]]\n})\n# Call the tool to solve the problem\nprint(count_bags_with_red_buttons(df))","question":"An employee at the craft store counted the number of red buttons in each bag of mixed buttons. How many bags had at least 20 red buttons but fewer than 80 red buttons?","prediction_code":"import pandas as pd\n\ndef count_bags_with_red_buttons(df):\n    \"\"\"\n    This function takes in a pandas dataframe of red buttons per bag, and returns the number of bags that have at least 20 red buttons but fewer than 80 red buttons.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of red buttons per bag.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of bags that have at least 20 red buttons but fewer than 80 red buttons.\n    \"\"\"\n    # prepare a list to calculate red buttons in each bag\n    red_buttons = []\n    # calculate the total number of red buttons in each bag\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            red_buttons.append(stem * 10 + leaf[j])\n    # filter the bags where the total number of red buttons is greater than or equal to 20 and less than 80\n    filtered = [button for button in red_buttons if 20 <= button < 80]\n    # count the number of rows\n    num_bags = len(filtered)\n    return num_bags","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[2], [3, 9], [1, 3, 5, 8], [], [7], [], [], [7], [0]]\n})\n# Call the tool to solve the problem\nprint(count_bags_with_red_buttons(df))","table":"Name: Red buttons per bag\nUnit: bags\nContent:\nStem | Leaf \n1 | 2\n2 | 3, 9\n3 | 1, 3, 5, 8\n4 | \n5 | 7\n6 | \n7 | \n8 | 7\n9 | 0"}
{"level":7,"answer":3.0,"prediction":"import pandas as pd\n\ndef count_countries_with_fewer_athletes(df, threshold):\n    \"\"\"\n    This function takes in a pandas dataframe of athletes per country and a threshold, and returns the number of countries that have fewer than the threshold number of athletes.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of athletes per country.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    threshold (int): The threshold number of athletes.\n    Returns:\n    int: The number of countries that have fewer than the threshold number of athletes.\n    \"\"\"\n    # prepare a list to calculate the number of athletes in each country\n    athletes = []\n    # calculate the total number of athletes in each country\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            athletes.append(stem * 10 + leaf[j])\n    # filter the countries where the total number of athletes is less than the threshold\n    filtered = [athlete for athlete in athletes if athlete < threshold]\n    # count the number of unique countries\n    num_countries = len(set(filtered))\n    return num_countries\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[6], [6, 7], [0, 5, 9], [2, 3], [7], [7], [2, 3, 4, 4], [2, 4, 5, 8]]\n})\n# Set the threshold number of athletes\nthreshold = 30\n# Call the tool to solve the problem\nprint(count_countries_with_fewer_athletes(df, threshold))","question":"While doing a project for P. E. class, Ruth researched the number of athletes competing in an international sporting event. How many countries have fewer than 30 athletes?","prediction_code":"import pandas as pd\n\ndef count_countries_with_fewer_athletes(df, threshold):\n    \"\"\"\n    This function takes in a pandas dataframe of athletes per country and a threshold, and returns the number of countries that have fewer than the threshold number of athletes.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of athletes per country.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    threshold (int): The threshold number of athletes.\n    Returns:\n    int: The number of countries that have fewer than the threshold number of athletes.\n    \"\"\"\n    # prepare a list to calculate the number of athletes in each country\n    athletes = []\n    # calculate the total number of athletes in each country\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            athletes.append(stem * 10 + leaf[j])\n    # filter the countries where the total number of athletes is less than the threshold\n    filtered = [athlete for athlete in athletes if athlete < threshold]\n    # count the number of unique countries\n    num_countries = len(set(filtered))\n    return num_countries","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[6], [6, 7], [0, 5, 9], [2, 3], [7], [7], [2, 3, 4, 4], [2, 4, 5, 8]]\n})\n# Set the threshold number of athletes\nthreshold = 30\n# Call the tool to solve the problem\nprint(count_countries_with_fewer_athletes(df, threshold))","table":"Name: Athletes per country\nUnit: countries\nContent:\nStem | Leaf \n1 | 6\n2 | 6, 7\n3 | 0, 5, 9\n4 | 2, 3\n5 | 7\n6 | 7\n7 | 2, 3, 4, 4\n8 | 2, 4, 5, 8"}
{"level":7,"answer":1.0,"prediction":"import pandas as pd\n\ndef count_people_with_40_points(df):\n    \"\"\"\n    This function takes in a pandas dataframe of quiz show scores and returns the number of people who scored exactly 40 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the scores of the people competing on the quiz show.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of people who scored exactly 40 points.\n    \"\"\"\n    # prepare a list to calculate scores of each person\n    scores = []\n    # calculate the total score of each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # count the number of people who scored exactly 40 points\n    num_people = scores.count(40)\n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7],\n    'Leaf': [[0, 2], [0], [1, 1], [0, 1, 8, 8], [5, 8], [2, 4, 5], [4, 6, 6]]\n})\n# Call the tool to solve the problem\nprint(count_people_with_40_points(df))","question":"For a math assignment, Josiah researched the scores of the people competing on his favorite quiz show. How many people scored exactly 40 points?","prediction_code":"import pandas as pd\n\ndef count_people_with_40_points(df):\n    \"\"\"\n    This function takes in a pandas dataframe of quiz show scores and returns the number of people who scored exactly 40 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the scores of the people competing on the quiz show.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of people who scored exactly 40 points.\n    \"\"\"\n    # prepare a list to calculate scores of each person\n    scores = []\n    # calculate the total score of each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # count the number of people who scored exactly 40 points\n    num_people = scores.count(40)\n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7],\n    'Leaf': [[0, 2], [0], [1, 1], [0, 1, 8, 8], [5, 8], [2, 4, 5], [4, 6, 6]]\n})\n# Call the tool to solve the problem\nprint(count_people_with_40_points(df))","table":"Name: Quiz show scores\nUnit: people\nContent:\nStem | Leaf \n1 | 0, 2\n2 | 0\n3 | 1, 1\n4 | 0, 1, 8, 8\n5 | 5, 8\n6 | 2, 4, 5\n7 | 4, 6, 6"}
{"level":8,"answer":3.0,"prediction":"import pandas as pd\n\ndef calculate_median_age(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of ages of cousins and returns the median age.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and ages of cousins.\n    The DataFrame should have columns 'Name' and 'Age (years)'.\n    Returns:\n    float: The median age of the cousins.\n    \"\"\"\n    # Extract the age column from the DataFrame\n    age_column = df['Age (years)']\n    \n    # Calculate the median age\n    median_age = age_column.median()\n    \n    return median_age\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Walter', 'Trevor', 'Emilio', 'Pam', 'Kimi'],\n    'Age (years)': [6, 3, 3, 8, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_median_age(df))","question":"A girl compared the ages of her cousins. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median_age(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of ages of cousins and returns the median age.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and ages of cousins.\n    The DataFrame should have columns 'Name' and 'Age (years)'.\n    Returns:\n    float: The median age of the cousins.\n    \"\"\"\n    # Extract the age column from the DataFrame\n    age_column = df['Age (years)']\n    \n    # Calculate the median age\n    median_age = age_column.median()\n    \n    return median_age","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Walter', 'Trevor', 'Emilio', 'Pam', 'Kimi'],\n    'Age (years)': [6, 3, 3, 8, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_median_age(df))","table":"Name: Ages of cousins\nUnit: None\nContent:\nName | Age (years)\nWalter | 6\nTrevor | 3\nEmilio | 3\nPam | 8\nKimi | 3"}
{"level":7,"answer":28.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of orders, and returns the total cost of the orders.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are item names and the values are the number of pounds for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the orders and calculate the cost for each item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['lentils', 'sesame seeds', 'pumpkin seeds', 'soybeans', 'sunflower seeds', 'flax seeds'],\n    'Price': [1, 6, 4, 1, 2, 5]\n})\n\n# Initialize the orders\norders = {\n    'soybeans': 4,\n    'sesame seeds': 4\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","question":"Charlie buys 4 pounds of soybeans and 4 pounds of sesame seeds. How much does he spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of orders, and returns the total cost of the orders.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are item names and the values are the number of pounds for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the orders and calculate the cost for each item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['lentils', 'sesame seeds', 'pumpkin seeds', 'soybeans', 'sunflower seeds', 'flax seeds'],\n    'Price': [1, 6, 4, 1, 2, 5]\n})\n\n# Initialize the orders\norders = {\n    'soybeans': 4,\n    'sesame seeds': 4\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","table":"Name: None\nUnit: $\nContent:\nlentils | $1\/pound\nsesame seeds | $6\/pound\npumpkin seeds | $4\/pound\nsoybeans | $1\/pound\nsunflower seeds | $2\/pound\nflax seeds | $5\/pound"}
{"level":7,"answer":0.75,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item2_price - item1_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['ruler', 'bottle of glue', 'silver glitter pen', 'box of crayons', 'notebook'],\n    'Price': [1.16, 1.91, 2.18, 1.59, 3.51]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'ruler', 'bottle of glue'))","question":"How much more does a bottle of glue cost than a ruler?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item2_price - item1_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['ruler', 'bottle of glue', 'silver glitter pen', 'box of crayons', 'notebook'],\n    'Price': [1.16, 1.91, 2.18, 1.59, 3.51]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'ruler', 'bottle of glue'))","table":"Name: None\nUnit: $\nContent:\nruler | $1.16\nbottle of glue | $1.91\nsilver glitter pen | $2.18\nbox of crayons | $1.59\nnotebook | $3.51"}
{"level":8,"answer":58.0,"prediction":"import pandas as pd\n\ndef count_participants_with_at_least_2_pullups(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pull-up data and returns the number of participants who completed at least 2 pull-ups.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of pull-ups completed by each participant.\n    The DataFrame should contain \"Number of pull-ups\" and \"Frequency\" columns.\n    Returns:\n    int: The number of participants who completed at least 2 pull-ups.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of pull-ups is greater than or equal to 2\n    filtered_df = df[df['Number of pull-ups'] >= 2]\n    \n    # Calculate the total number of participants who completed at least 2 pull-ups\n    num_participants = filtered_df['Frequency'].sum()\n    \n    return num_participants\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of pull-ups': [0, 1, 2, 3, 4, 5, 6],\n    'Frequency': [19, 8, 7, 17, 15, 10, 9]\n})\n# Call the tool to solve the problem\nprint(count_participants_with_at_least_2_pullups(df))","question":"Kimberly, a fitness counselor, counted the number of pull-ups completed by each bootcamp participant. How many participants did at least 2 pull-ups?","prediction_code":"import pandas as pd\n\ndef count_participants_with_at_least_2_pullups(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pull-up data and returns the number of participants who completed at least 2 pull-ups.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of pull-ups completed by each participant.\n    The DataFrame should contain \"Number of pull-ups\" and \"Frequency\" columns.\n    Returns:\n    int: The number of participants who completed at least 2 pull-ups.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of pull-ups is greater than or equal to 2\n    filtered_df = df[df['Number of pull-ups'] >= 2]\n    \n    # Calculate the total number of participants who completed at least 2 pull-ups\n    num_participants = filtered_df['Frequency'].sum()\n    \n    return num_participants","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of pull-ups': [0, 1, 2, 3, 4, 5, 6],\n    'Frequency': [19, 8, 7, 17, 15, 10, 9]\n})\n# Call the tool to solve the problem\nprint(count_participants_with_at_least_2_pullups(df))","table":"Name: Doing pull-ups\nUnit: None\nContent:\nNumber of pull-ups | Frequency\n0 | 19\n1 | 8\n2 | 7\n3 | 17\n4 | 15\n5 | 10\n6 | 9"}
{"level":5,"answer":177.0,"prediction":"import pandas as pd\n\ndef calculate_total_pumpkins(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pumpkins sold and returns the total number of pumpkins grown.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the types of pumpkins and their frequencies.\n    The dataframe should contain \"Type\" and \"Frequency\" columns.\n    Returns:\n    int: The total number of pumpkins grown.\n    \"\"\"\n    # Calculate the total number of pumpkins sold\n    total_sold = df['Frequency'].sum()\n    \n    # Calculate the total number of pumpkins grown\n    total_grown = total_sold + 10\n    \n    return total_grown\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Type': ['jack-o\\'-lantern pumpkin', 'white pumpkin', 'mini pumpkin', 'pie pumpkin'],\n    'Frequency': [42, 35, 61, 29]\n})\n# Call the tool to solve the problem\nprint(calculate_total_pumpkins(df))","question":"Neil grows different types of pumpkins at his pumpkin patch. The frequency chart shows the number of pumpkins he sold this fall. There were also 10 pumpkins that weren't sold, and Neil decorated his house with them. How many pumpkins did he grow in all?","prediction_code":"import pandas as pd\n\ndef calculate_total_pumpkins(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pumpkins sold and returns the total number of pumpkins grown.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the types of pumpkins and their frequencies.\n    The dataframe should contain \"Type\" and \"Frequency\" columns.\n    Returns:\n    int: The total number of pumpkins grown.\n    \"\"\"\n    # Calculate the total number of pumpkins sold\n    total_sold = df['Frequency'].sum()\n    \n    # Calculate the total number of pumpkins grown\n    total_grown = total_sold + 10\n    \n    return total_grown","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Type': ['jack-o\\'-lantern pumpkin', 'white pumpkin', 'mini pumpkin', 'pie pumpkin'],\n    'Frequency': [42, 35, 61, 29]\n})\n# Call the tool to solve the problem\nprint(calculate_total_pumpkins(df))","table":"Name: Pumpkins sold\nUnit: pumpkins\nContent:\nType | Frequency\njack-o'-lantern pumpkin | 42\nwhite pumpkin | 35\nmini pumpkin | 61\npie pumpkin | 29"}
{"level":6,"answer":2.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = quantity * item_price\n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['sunflower seed butter', 'peanut butter', 'macadamia nut butter', 'cashew butter', 'almond butter', 'walnut butter'],\n    'Price': [2, 2, 2, 2, 3, 2]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'peanut butter', 1))","question":"Charlie wants to buy 1 kilogram of peanut butter. How much will he spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = quantity * item_price\n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['sunflower seed butter', 'peanut butter', 'macadamia nut butter', 'cashew butter', 'almond butter', 'walnut butter'],\n    'Price': [2, 2, 2, 2, 3, 2]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'peanut butter', 1))","table":"Name: None\nUnit: $\nContent:\nsunflower seed butter | $2 per kg\npeanut butter | $2 per kg\nmacadamia nut butter | $2 per kg\ncashew butter | $2 per kg\nalmond butter | $3 per kg\nwalnut butter | $2 per kg"}
{"level":4,"answer":4.0,"prediction":"import pandas as pd\n\ndef count_farms_with_86_cows(df):\n    \"\"\"\n    This function takes in a pandas dataframe of cows per farm, and returns the number of farms that have exactly 86 cows.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of cows per farm.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of farms that have exactly 86 cows.\n    \"\"\"\n    # prepare a list to calculate the number of cows in each farm\n    cows = []\n    # calculate the total number of cows in each farm\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            cows.append(stem * 10 + leaf[j])\n    # count the number of farms with exactly 86 cows\n    num_farms = cows.count(86)\n    return num_farms\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7, 8, 9],\n    'Leaf': [[4, 6, 9], [1, 2, 5], [2, 8], [1], [0, 1, 2, 2, 3, 5, 5, 6, 6, 6, 6, 8, 9], [0]]\n})\n# Call the tool to solve the problem\nprint(count_farms_with_86_cows(df))","question":"A researcher recorded the number of cows on each farm in the county. How many farms have exactly 86 cows?","prediction_code":"import pandas as pd\n\ndef count_farms_with_86_cows(df):\n    \"\"\"\n    This function takes in a pandas dataframe of cows per farm, and returns the number of farms that have exactly 86 cows.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of cows per farm.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of farms that have exactly 86 cows.\n    \"\"\"\n    # prepare a list to calculate the number of cows in each farm\n    cows = []\n    # calculate the total number of cows in each farm\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            cows.append(stem * 10 + leaf[j])\n    # count the number of farms with exactly 86 cows\n    num_farms = cows.count(86)\n    return num_farms","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7, 8, 9],\n    'Leaf': [[4, 6, 9], [1, 2, 5], [2, 8], [1], [0, 1, 2, 2, 3, 5, 5, 6, 6, 6, 6, 8, 9], [0]]\n})\n# Call the tool to solve the problem\nprint(count_farms_with_86_cows(df))","table":"Name: Cows per farm\nUnit: None\nContent:\nStem | Leaf \n4 | 4, 6, 9\n5 | 1, 2, 5\n6 | 2, 8\n7 | 1\n8 | 0, 1, 2, 2, 3, 5, 5, 6, 6, 6, 6, 8, 9\n9 | 0"}
{"level":5,"answer":50.89,"prediction":"import pandas as pd\n\ndef calculate_total_cost(items_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to be purchased,\n    and returns the total cost of the items.\n    Args:\n    items_df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = items_df[items_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['watering can', 'wrench', 'rake', 'lawn sprinkler', 'shovel', 'garden hose'],\n    'Price': [13.54, 11.05, 15.99, 23.48, 13.32, 23.85]\n})\n\n# Define the items to be purchased\nitems = ['wrench', 'garden hose', 'rake']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Janelle need to buy a wrench, a garden hose, and a rake?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(items_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to be purchased,\n    and returns the total cost of the items.\n    Args:\n    items_df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = items_df[items_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['watering can', 'wrench', 'rake', 'lawn sprinkler', 'shovel', 'garden hose'],\n    'Price': [13.54, 11.05, 15.99, 23.48, 13.32, 23.85]\n})\n\n# Define the items to be purchased\nitems = ['wrench', 'garden hose', 'rake']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nwatering can | $13.54\nwrench | $11.05\nrake | $15.99\nlawn sprinkler | $23.48\nshovel | $13.32\ngarden hose | $23.85"}
{"level":6,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its weight.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per pound for each item.\n    item (str): The name of the item.\n    weight (float): The weight of the item in pounds.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price per pound for the item\n    price_per_lb = item_df['Unit'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price_per_lb * weight\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Anaheim peppers', 'habanero peppers', 'chili peppers', 'red bell peppers', 'purple bell peppers'],\n    'Unit': [1, 2, 2, 3, 2]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'purple bell peppers', 2.5))","question":"Trisha buys 2+1\/2 pounds of purple bell peppers. How much does she spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its weight.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per pound for each item.\n    item (str): The name of the item.\n    weight (float): The weight of the item in pounds.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price per pound for the item\n    price_per_lb = item_df['Unit'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price_per_lb * weight\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Anaheim peppers', 'habanero peppers', 'chili peppers', 'red bell peppers', 'purple bell peppers'],\n    'Unit': [1, 2, 2, 3, 2]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'purple bell peppers', 2.5))","table":"Name: None\nUnit: $\nContent:\nAnaheim peppers | $1 per lb\nhabanero peppers | $2 per lb\nchili peppers | $2 per lb\nred bell peppers | $3 per lb\npurple bell peppers | $2 per lb"}
{"level":8,"answer":4.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_day, end_day):\n    \"\"\"\n    This function takes in a pandas DataFrame of leftover loaves of bread per day and calculates the rate of change between two given days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of leftover loaves of bread per day.\n    The DataFrame should have columns 'Day' and 'Leftover loaves'.\n    start_day (str): The starting day for calculating the rate of change.\n    end_day (str): The ending day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given days.\n    \"\"\"\n    # Filter the DataFrame for the start and end days\n    start_loaves = df[df['Day'] == start_day]['Leftover loaves'].values[0]\n    end_loaves = df[df['Day'] == end_day]['Leftover loaves'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_loaves - start_loaves) \/ (df.index[df['Day'] == end_day][0] - df.index[df['Day'] == start_day][0])\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Leftover loaves': [23, 27, 7, 19, 43]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Sunday', 'Monday'))","question":"A vendor who sold bread at farmers' markets counted the number of leftover loaves at the end of each day. According to the table, what was the rate of change between Sunday and Monday?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_day, end_day):\n    \"\"\"\n    This function takes in a pandas DataFrame of leftover loaves of bread per day and calculates the rate of change between two given days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of leftover loaves of bread per day.\n    The DataFrame should have columns 'Day' and 'Leftover loaves'.\n    start_day (str): The starting day for calculating the rate of change.\n    end_day (str): The ending day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given days.\n    \"\"\"\n    # Filter the DataFrame for the start and end days\n    start_loaves = df[df['Day'] == start_day]['Leftover loaves'].values[0]\n    end_loaves = df[df['Day'] == end_day]['Leftover loaves'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_loaves - start_loaves) \/ (df.index[df['Day'] == end_day][0] - df.index[df['Day'] == start_day][0])\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Leftover loaves': [23, 27, 7, 19, 43]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Sunday', 'Monday'))","table":"Name: Loaves of leftover bread\nUnit: loaves per day\nContent:\nDay | Leftover loaves\nSunday | 23\nMonday | 27\nTuesday | 7\nWednesday | 19\nThursday | 43"}
{"level":4,"answer":0.18,"prediction":"import pandas as pd\n\ndef calculate_total_cost(menu_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table and a list of items, and returns the total cost of the items using pandas.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of menu item names.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = menu_df[menu_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\nmenu_df = pd.DataFrame({\n    'Item': ['gummy worm', 'gum drop', 'gumball', 'butterscotch candy', 'piece of licorice'],\n    'Price': [0.05, 0.08, 0.05, 0.07, 0.05]\n})\n\n# Define the items to calculate the total cost\nitems = ['piece of licorice', 'gumball', 'gum drop']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(menu_df, items)\n\n# Print out the answer\nprint(total_cost)","question":"How much money does Ava need to buy a piece of licorice, a gumball, and a gum drop?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(menu_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table and a list of items, and returns the total cost of the items using pandas.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of menu item names.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = menu_df[menu_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\nmenu_df = pd.DataFrame({\n    'Item': ['gummy worm', 'gum drop', 'gumball', 'butterscotch candy', 'piece of licorice'],\n    'Price': [0.05, 0.08, 0.05, 0.07, 0.05]\n})\n\n# Define the items to calculate the total cost\nitems = ['piece of licorice', 'gumball', 'gum drop']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(menu_df, items)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\ngummy worm | $0.05\ngum drop | $0.08\ngumball | $0.05\nbutterscotch candy | $0.07\npiece of licorice | $0.05"}
{"level":4,"answer":20.0,"prediction":"import pandas as pd\n\ndef count_farms_with_fewer_cows(df, threshold):\n    \"\"\"\n    This function takes in a pandas dataframe of cows per farm and a threshold, and returns the number of farms that have fewer cows than the threshold.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of cows per farm.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    threshold (int): The maximum number of cows allowed per farm.\n    Returns:\n    int: The number of farms that have fewer cows than the threshold.\n    \"\"\"\n    # prepare a list to calculate the number of cows in each farm\n    cows = []\n    # calculate the total number of cows in each farm\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            cows.append(stem * 10 + leaf[j])\n    # filter the farms where the total number of cows is less than the threshold\n    filtered = [cow for cow in cows if cow < threshold]\n    # count the number of farms\n    num_farms = len(filtered)\n    return num_farms\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5],\n    'Leaf': [[1, 4, 7], [1, 4, 9], [3, 3, 4, 4, 5, 6, 8, 8, 9], [1, 2, 5], [0, 0]]\n})\n# Set the threshold\nthreshold = 60\n# Call the tool to solve the problem\nprint(count_farms_with_fewer_cows(df, threshold))","question":"A researcher recorded the number of cows on each farm in the county. How many farms have fewer than 60 cows?","prediction_code":"import pandas as pd\n\ndef count_farms_with_fewer_cows(df, threshold):\n    \"\"\"\n    This function takes in a pandas dataframe of cows per farm and a threshold, and returns the number of farms that have fewer cows than the threshold.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of cows per farm.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    threshold (int): The maximum number of cows allowed per farm.\n    Returns:\n    int: The number of farms that have fewer cows than the threshold.\n    \"\"\"\n    # prepare a list to calculate the number of cows in each farm\n    cows = []\n    # calculate the total number of cows in each farm\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            cows.append(stem * 10 + leaf[j])\n    # filter the farms where the total number of cows is less than the threshold\n    filtered = [cow for cow in cows if cow < threshold]\n    # count the number of farms\n    num_farms = len(filtered)\n    return num_farms","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5],\n    'Leaf': [[1, 4, 7], [1, 4, 9], [3, 3, 4, 4, 5, 6, 8, 8, 9], [1, 2, 5], [0, 0]]\n})\n# Set the threshold\nthreshold = 60\n# Call the tool to solve the problem\nprint(count_farms_with_fewer_cows(df, threshold))","table":"Name: Cows per farm\nUnit: None\nContent:\nStem | Leaf \n1 | 1, 4, 7\n2 | 1, 4, 9\n3 | 3, 3, 4, 4, 5, 6, 8, 8, 9\n4 | 1, 2, 5\n5 | 0, 0"}
{"level":6,"answer":3.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its price per kilogram and the quantity purchased.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per kilogram for different items.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item purchased in kilograms.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price per kilogram for the item\n        price_per_kg = item_df['Unit'].values[0]\n        \n        # Calculate the total cost\n        total_cost = price_per_kg * quantity\n        \n        return total_cost\n    else:\n        return None\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['basmati rice', 'Bhutanese red rice', 'sticky rice', 'African rice', 'brown rice', 'white rice'],\n    'Unit': [2, 3, 2, 2, 2, 2]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'white rice', 1.5))","question":"Melissa went to the store and bought 1.5 kilograms of white rice. How much did she spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its price per kilogram and the quantity purchased.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per kilogram for different items.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item purchased in kilograms.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price per kilogram for the item\n        price_per_kg = item_df['Unit'].values[0]\n        \n        # Calculate the total cost\n        total_cost = price_per_kg * quantity\n        \n        return total_cost\n    else:\n        return None","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['basmati rice', 'Bhutanese red rice', 'sticky rice', 'African rice', 'brown rice', 'white rice'],\n    'Unit': [2, 3, 2, 2, 2, 2]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'white rice', 1.5))","table":"Name: None\nUnit: $\nContent:\nbasmati rice | $2 per kilogram\nBhutanese red rice | $3 per kilogram\nsticky rice | $2 per kilogram\nAfrican rice | $2 per kilogram\nbrown rice | $2 per kilogram\nwhite rice | $2 per kilogram"}
{"level":7,"answer":-11.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average food preparation time and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average food preparation time for each day.\n    The DataFrame should have columns 'Day' and 'Food preparation time (minutes)'.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Filter the DataFrame for the two days\n    day1_df = df[df['Day'] == day1]\n    day2_df = df[df['Day'] == day2]\n    \n    # Get the food preparation time for each day\n    day1_time = day1_df['Food preparation time (minutes)'].values[0]\n    day2_time = day2_df['Food preparation time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (day2_time - day1_time) \/ (df.index.get_loc(day2_df.index[0]) - df.index.get_loc(day1_df.index[0]))\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Food preparation time (minutes)': [5, 17, 21, 50, 39]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Friday', 'Saturday'))","question":"A restaurant's average food preparation time was tracked from day to day as part of an efficiency improvement program. According to the table, what was the rate of change between Friday and Saturday?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average food preparation time and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average food preparation time for each day.\n    The DataFrame should have columns 'Day' and 'Food preparation time (minutes)'.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Filter the DataFrame for the two days\n    day1_df = df[df['Day'] == day1]\n    day2_df = df[df['Day'] == day2]\n    \n    # Get the food preparation time for each day\n    day1_time = day1_df['Food preparation time (minutes)'].values[0]\n    day2_time = day2_df['Food preparation time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (day2_time - day1_time) \/ (df.index.get_loc(day2_df.index[0]) - df.index.get_loc(day1_df.index[0]))\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Food preparation time (minutes)': [5, 17, 21, 50, 39]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Friday', 'Saturday'))","table":"Name: Average food preparation time\nUnit: minutes per day\nContent:\nDay | Food preparation time (minutes)\nTuesday | 5\nWednesday | 17\nThursday | 21\nFriday | 50\nSaturday | 39"}
{"level":8,"answer":45.1,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to be purchased.\n    It returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['waffle maker', 'computer keyboard', 'blender', 'television', 'radio'],\n    'Price': [20.33, 17.62, 25.54, 57.14, 27.48]\n})\n\n# Define the items to be purchased\nitems = ['computer keyboard', 'radio']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Mike need to buy a computer keyboard and a radio?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to be purchased.\n    It returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['waffle maker', 'computer keyboard', 'blender', 'television', 'radio'],\n    'Price': [20.33, 17.62, 25.54, 57.14, 27.48]\n})\n\n# Define the items to be purchased\nitems = ['computer keyboard', 'radio']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nwaffle maker | $20.33\ncomputer keyboard | $17.62\nblender | $25.54\ntelevision | $57.14\nradio | $27.48"}
{"level":3,"answer":2541.0,"prediction":"import pandas as pd\n\ndef calculate_page_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pages read per month and returns the difference in pages read between August and September.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of pages read per month.\n    The dataframe should contain \"Month\" and \"Number of pages\" columns.\n    Returns:\n    int: The difference in pages read between August and September.\n    \"\"\"\n    # Filter the DataFrame for August and September\n    august_pages = df[df['Month'] == 'August']['Number of pages'].values[0]\n    september_pages = df[df['Month'] == 'September']['Number of pages'].values[0]\n    \n    # Calculate the difference in pages read\n    page_difference = august_pages - september_pages\n    \n    return page_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['August', 'September', 'October', 'November', 'December'],\n    'Number of pages': [5531, 2990, 8905, 7522, 1277]\n})\n\n# Call the tool to solve the problem\nprint(calculate_page_difference(df))","question":"Lena kept a log of how many pages she read each month. How many more pages did Lena read in August than in September?","prediction_code":"import pandas as pd\n\ndef calculate_page_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pages read per month and returns the difference in pages read between August and September.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of pages read per month.\n    The dataframe should contain \"Month\" and \"Number of pages\" columns.\n    Returns:\n    int: The difference in pages read between August and September.\n    \"\"\"\n    # Filter the DataFrame for August and September\n    august_pages = df[df['Month'] == 'August']['Number of pages'].values[0]\n    september_pages = df[df['Month'] == 'September']['Number of pages'].values[0]\n    \n    # Calculate the difference in pages read\n    page_difference = august_pages - september_pages\n    \n    return page_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['August', 'September', 'October', 'November', 'December'],\n    'Number of pages': [5531, 2990, 8905, 7522, 1277]\n})\n\n# Call the tool to solve the problem\nprint(calculate_page_difference(df))","table":"Name: Pages read\nUnit: pages\nContent:\nMonth | Number of pages\nAugust | 5,531\nSeptember | 2,990\nOctober | 8,905\nNovember | 7,522\nDecember | 1,277"}
{"level":5,"answer":2.0,"prediction":"import pandas as pd\n\ndef count_restaurants_with_ratings(df):\n    \"\"\"\n    This function takes in a pandas dataframe of restaurant ratings and returns the number of restaurants that were rated at least 9 points but fewer than 16 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the restaurant ratings.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of restaurants that were rated at least 9 points but fewer than 16 points.\n    \"\"\"\n    # prepare a list to calculate ratings for each restaurant\n    ratings = []\n    # calculate the total rating for each restaurant\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            ratings.append(stem * 10 + leaf[j])\n    # filter the restaurants with ratings between 9 and 16 (exclusive)\n    filtered = [rating for rating in ratings if 9 <= rating < 16]\n    # count the number of restaurants\n    num_restaurants = len(filtered)\n    return num_restaurants\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3, 4],\n    'Leaf': [[6], [0, 4, 7], [9], [2, 7], [3]]\n})\n# Call the tool to solve the problem\nprint(count_restaurants_with_ratings(df))","question":"A food magazine published a listing of local restaurant ratings. How many restaurants were rated at least 9 points but fewer than 16 points?","prediction_code":"import pandas as pd\n\ndef count_restaurants_with_ratings(df):\n    \"\"\"\n    This function takes in a pandas dataframe of restaurant ratings and returns the number of restaurants that were rated at least 9 points but fewer than 16 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the restaurant ratings.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of restaurants that were rated at least 9 points but fewer than 16 points.\n    \"\"\"\n    # prepare a list to calculate ratings for each restaurant\n    ratings = []\n    # calculate the total rating for each restaurant\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            ratings.append(stem * 10 + leaf[j])\n    # filter the restaurants with ratings between 9 and 16 (exclusive)\n    filtered = [rating for rating in ratings if 9 <= rating < 16]\n    # count the number of restaurants\n    num_restaurants = len(filtered)\n    return num_restaurants","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3, 4],\n    'Leaf': [[6], [0, 4, 7], [9], [2, 7], [3]]\n})\n# Call the tool to solve the problem\nprint(count_restaurants_with_ratings(df))","table":"Name: Restaurant ratings\nUnit: restaurants\nContent:\nStem | Leaf \n0 | 6\n1 | 0, 4, 7\n2 | 9\n3 | 2, 7\n4 | 3"}
{"level":7,"answer":8.0,"prediction":"import pandas as pd\n\ndef count_scarves_less_than_97(df):\n    \"\"\"\n    This function takes in a pandas dataframe of scarf lengths and returns the number of scarves that are less than 97 centimeters.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the lengths of scarves.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of scarves that are less than 97 centimeters.\n    \"\"\"\n    # prepare a list to store the lengths of scarves\n    lengths = []\n    # iterate through the dataframe and extract the lengths of scarves\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            lengths.append(stem * 10 + leaf[j])\n    # count the number of scarves that are less than 97 centimeters\n    num_scarves = sum(1 for length in lengths if length < 97)\n    return num_scarves\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [6, 7, 8, 9],\n    'Leaf': [[9], [3, 8], [0, 1, 3, 3], [0]]\n})\n# Call the tool to solve the problem\nprint(count_scarves_less_than_97(df))","question":"Alan measured the length of each scarf in the clothing store where he works. How many scarves are less than 97 centimeters?","prediction_code":"import pandas as pd\n\ndef count_scarves_less_than_97(df):\n    \"\"\"\n    This function takes in a pandas dataframe of scarf lengths and returns the number of scarves that are less than 97 centimeters.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the lengths of scarves.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of scarves that are less than 97 centimeters.\n    \"\"\"\n    # prepare a list to store the lengths of scarves\n    lengths = []\n    # iterate through the dataframe and extract the lengths of scarves\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            lengths.append(stem * 10 + leaf[j])\n    # count the number of scarves that are less than 97 centimeters\n    num_scarves = sum(1 for length in lengths if length < 97)\n    return num_scarves","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [6, 7, 8, 9],\n    'Leaf': [[9], [3, 8], [0, 1, 3, 3], [0]]\n})\n# Call the tool to solve the problem\nprint(count_scarves_less_than_97(df))","table":"Name: Scarf lengths (centimeters)\nUnit: scarves\nContent:\nStem | Leaf \n6 | 9\n7 | 3, 8\n8 | 0, 1, 3, 3\n9 | 0"}
{"level":2,"answer":40.0,"prediction":"import pandas as pd\n\ndef calculate_total_glass_beads(df, num_bracelets):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of glass beads per bracelet and the number of bracelets, and returns the total number of glass beads.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of glass beads per bracelet.\n    The dataframe should contain \"Number of bracelets\" and \"Number of glass beads\" columns.\n    num_bracelets (int): The number of bracelets.\n    Returns:\n    int: The total number of glass beads.\n    \"\"\"\n    # Filter the DataFrame for the specific number of bracelets\n    filtered_df = df[df['Number of bracelets'] == num_bracelets]\n    \n    # Get the number of glass beads for the specific number of bracelets\n    num_glass_beads = filtered_df['Number of glass beads'].values[0]\n    \n    # Calculate the total number of glass beads\n    total_glass_beads = num_glass_beads * num_bracelets\n    \n    return total_glass_beads\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of bracelets': [1, 2, 3, 4],\n    'Number of glass beads': [10, 20, 30, '?']\n})\n\n# Convert the '?' to NaN\ndf = df.replace('?', pd.NA)\n\n# Convert the 'Number of glass beads' column to numeric\ndf['Number of glass beads'] = pd.to_numeric(df['Number of glass beads'])\n\n# Get the total number of glass beads for 4 bracelets\ntotal_glass_beads = calculate_total_glass_beads(df, 4)\n\n# Print out the answer\nprint(total_glass_beads)","question":"Each bracelet has 10 glass beads. How many glass beads are on 4 bracelets?","prediction_code":"import pandas as pd\n\ndef calculate_total_glass_beads(df, num_bracelets):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of glass beads per bracelet and the number of bracelets, and returns the total number of glass beads.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of glass beads per bracelet.\n    The dataframe should contain \"Number of bracelets\" and \"Number of glass beads\" columns.\n    num_bracelets (int): The number of bracelets.\n    Returns:\n    int: The total number of glass beads.\n    \"\"\"\n    # Filter the DataFrame for the specific number of bracelets\n    filtered_df = df[df['Number of bracelets'] == num_bracelets]\n    \n    # Get the number of glass beads for the specific number of bracelets\n    num_glass_beads = filtered_df['Number of glass beads'].values[0]\n    \n    # Calculate the total number of glass beads\n    total_glass_beads = num_glass_beads * num_bracelets\n    \n    return total_glass_beads","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of bracelets': [1, 2, 3, 4],\n    'Number of glass beads': [10, 20, 30, '?']\n})\n\n# Convert the '?' to NaN\ndf = df.replace('?', pd.NA)\n\n# Convert the 'Number of glass beads' column to numeric\ndf['Number of glass beads'] = pd.to_numeric(df['Number of glass beads'])\n\n# Get the total number of glass beads for 4 bracelets\ntotal_glass_beads = calculate_total_glass_beads(df, 4)\n\n# Print out the answer\nprint(total_glass_beads)","table":"Name: None\nUnit: None\nContent:\nNumber of bracelets | Number of glass beads\n1 | 10\n2 | 20\n3 | 30\n4 | ?"}
{"level":3,"answer":7330.0,"prediction":"import pandas as pd\n\ndef calculate_total_words(df, days):\n    \"\"\"\n    This function takes in a pandas DataFrame of words written per day and a list of days, and returns the total number of words written on those days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of words written per day.\n    The dataframe should contain \"Day\" and \"Number of words\" columns.\n    days (list): A list of days for which the total number of words should be calculated.\n    Returns:\n    int: The total number of words written on the specified days.\n    \"\"\"\n    # Filter the DataFrame for the specified days\n    filtered_df = df[df['Day'].isin(days)]\n    \n    # Calculate the total number of words written on the specified days\n    total_words = filtered_df['Number of words'].sum()\n    \n    return total_words\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of words': [3326, 1985, 4774, 2608, 2556]\n})\n\n# Specify the days for which the total number of words should be calculated\ndays = ['Thursday', 'Saturday']\n\n# Call the tool to solve the problem\nprint(calculate_total_words(df, days))","question":"An author recorded how many words she wrote in the past 5 days. How many words in total did the author write on Thursday and Saturday?","prediction_code":"import pandas as pd\n\ndef calculate_total_words(df, days):\n    \"\"\"\n    This function takes in a pandas DataFrame of words written per day and a list of days, and returns the total number of words written on those days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of words written per day.\n    The dataframe should contain \"Day\" and \"Number of words\" columns.\n    days (list): A list of days for which the total number of words should be calculated.\n    Returns:\n    int: The total number of words written on the specified days.\n    \"\"\"\n    # Filter the DataFrame for the specified days\n    filtered_df = df[df['Day'].isin(days)]\n    \n    # Calculate the total number of words written on the specified days\n    total_words = filtered_df['Number of words'].sum()\n    \n    return total_words","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of words': [3326, 1985, 4774, 2608, 2556]\n})\n\n# Specify the days for which the total number of words should be calculated\ndays = ['Thursday', 'Saturday']\n\n# Call the tool to solve the problem\nprint(calculate_total_words(df, days))","table":"Name: Words written\nUnit: words\nContent:\nDay | Number of words\nTuesday | 3,326\nWednesday | 1,985\nThursday | 4,774\nFriday | 2,608\nSaturday | 2,556"}
{"level":8,"answer":4.95,"prediction":"import pandas as pd\n\ndef calculate_total_cost(apples_df, apple_type, pounds):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the prices of different types of apples and calculates the total cost of a specific type of apple based on the weight.\n    Args:\n    apples_df (pd.DataFrame): A pandas DataFrame containing the prices of different types of apples with columns 'Name' and 'Price'.\n    apple_type (str): The type of apple for which the cost needs to be calculated.\n    pounds (float): The weight of the apples in pounds.\n    Returns:\n    float: The total cost of the apples.\n    \"\"\"\n    # Filter the DataFrame for the specific apple type\n    apple_df = apples_df[apples_df['Name'] == apple_type]\n    \n    # Check if the apple type exists in the DataFrame\n    if not apple_df.empty:\n        apple_price = apple_df['Price'].values[0]\n        total_cost = apple_price * pounds\n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Washington apples', 'Macintosh apples', 'Gala apples', 'Cameo apples', 'Pink Lady apples', 'Fuji apples'],\n    'Price': [1.64, 1.83, 1.71, 0.96, 1.65, 1.99]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'Pink Lady apples', 3))","question":"Kristen buys 3 pounds of Pink Lady apples. How much does she spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(apples_df, apple_type, pounds):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the prices of different types of apples and calculates the total cost of a specific type of apple based on the weight.\n    Args:\n    apples_df (pd.DataFrame): A pandas DataFrame containing the prices of different types of apples with columns 'Name' and 'Price'.\n    apple_type (str): The type of apple for which the cost needs to be calculated.\n    pounds (float): The weight of the apples in pounds.\n    Returns:\n    float: The total cost of the apples.\n    \"\"\"\n    # Filter the DataFrame for the specific apple type\n    apple_df = apples_df[apples_df['Name'] == apple_type]\n    \n    # Check if the apple type exists in the DataFrame\n    if not apple_df.empty:\n        apple_price = apple_df['Price'].values[0]\n        total_cost = apple_price * pounds\n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Washington apples', 'Macintosh apples', 'Gala apples', 'Cameo apples', 'Pink Lady apples', 'Fuji apples'],\n    'Price': [1.64, 1.83, 1.71, 0.96, 1.65, 1.99]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'Pink Lady apples', 3))","table":"Name: None\nUnit: $\nContent:\nWashington apples | $1.64\/pound\nMacintosh apples | $1.83\/pound\nGala apples | $1.71\/pound\nCameo apples | $0.96\/pound\nPink Lady apples | $1.65\/pound\nFuji apples | $1.99\/pound"}
{"level":3,"answer":348.0,"prediction":"import pandas as pd\n\ndef calculate_additional_tractors(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of tractors made each month and returns the difference in the number of tractors made in March and February.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of tractors made each month.\n    The DataFrame should have columns 'Month' and 'Number of tractors'.\n    Returns:\n    int: The difference in the number of tractors made in March and February.\n    \"\"\"\n    # Filter the DataFrame for March and February\n    march_df = df[df['Month'] == 'March']\n    february_df = df[df['Month'] == 'February']\n    \n    # Get the number of tractors made in March and February\n    march_tractors = march_df['Number of tractors'].values[0]\n    february_tractors = february_df['Number of tractors'].values[0]\n    \n    # Calculate the difference\n    additional_tractors = march_tractors - february_tractors\n    \n    return additional_tractors\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['February', 'March', 'April', 'May', 'June'],\n    'Number of tractors': [205, 553, 738, 398, 852]\n})\n# Call the tool to solve the problem\nprint(calculate_additional_tractors(df))","question":"A farm equipment company kept a record of the number of tractors made each month. How many more tractors did the company make in March than in February?","prediction_code":"import pandas as pd\n\ndef calculate_additional_tractors(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of tractors made each month and returns the difference in the number of tractors made in March and February.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of tractors made each month.\n    The DataFrame should have columns 'Month' and 'Number of tractors'.\n    Returns:\n    int: The difference in the number of tractors made in March and February.\n    \"\"\"\n    # Filter the DataFrame for March and February\n    march_df = df[df['Month'] == 'March']\n    february_df = df[df['Month'] == 'February']\n    \n    # Get the number of tractors made in March and February\n    march_tractors = march_df['Number of tractors'].values[0]\n    february_tractors = february_df['Number of tractors'].values[0]\n    \n    # Calculate the difference\n    additional_tractors = march_tractors - february_tractors\n    \n    return additional_tractors","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['February', 'March', 'April', 'May', 'June'],\n    'Number of tractors': [205, 553, 738, 398, 852]\n})\n# Call the tool to solve the problem\nprint(calculate_additional_tractors(df))","table":"Name: Tractors made\nUnit: tractors\nContent:\nMonth | Number of tractors\nFebruary | 205\nMarch | 553\nApril | 738\nMay | 398\nJune | 852"}
{"level":7,"answer":1.0,"prediction":"import pandas as pd\n\ndef count_bushes_with_45_roses(df):\n    \"\"\"\n    This function takes in a pandas dataframe of roses per bush, and returns the number of bushes that have exactly 45 roses.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of roses per bush.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of bushes that have exactly 45 roses.\n    \"\"\"\n    # prepare a list to calculate the total number of roses in each bush\n    roses = []\n    # calculate the total number of roses in each bush\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            roses.append(stem * 10 + leaf[j])\n    # count the number of bushes that have exactly 45 roses\n    num_bushes = roses.count(45)\n    return num_bushes\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7, 8],\n    'Leaf': [[8], [1, 5], [1, 9], [4, 8, 9], [1, 2, 2, 4, 9], [1, 1, 5]]\n})\n# Call the tool to solve the problem\nprint(count_bushes_with_45_roses(df))","question":"The owner of a plant nursery wrote down the number of roses on each bush. How many bushes have exactly 45 roses?","prediction_code":"import pandas as pd\n\ndef count_bushes_with_45_roses(df):\n    \"\"\"\n    This function takes in a pandas dataframe of roses per bush, and returns the number of bushes that have exactly 45 roses.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of roses per bush.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of bushes that have exactly 45 roses.\n    \"\"\"\n    # prepare a list to calculate the total number of roses in each bush\n    roses = []\n    # calculate the total number of roses in each bush\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            roses.append(stem * 10 + leaf[j])\n    # count the number of bushes that have exactly 45 roses\n    num_bushes = roses.count(45)\n    return num_bushes","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7, 8],\n    'Leaf': [[8], [1, 5], [1, 9], [4, 8, 9], [1, 2, 2, 4, 9], [1, 1, 5]]\n})\n# Call the tool to solve the problem\nprint(count_bushes_with_45_roses(df))","table":"Name: Roses per bush\nUnit: bushes\nContent:\nStem | Leaf \n3 | 8\n4 | 1, 5\n5 | 1, 9\n6 | 4, 8, 9\n7 | 1, 2, 2, 4, 9\n8 | 1, 1, 5"}
{"level":7,"answer":4.0,"prediction":"import pandas as pd\n\ndef count_students_above_score(df, score):\n    \"\"\"\n    This function takes in a pandas DataFrame of scores on a math quiz and a score threshold, and returns the number of students who scored above the threshold.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the scores and their frequencies with columns 'Score' and 'Frequency'.\n    score (int): The score threshold.\n    Returns:\n    int: The number of students who scored above the threshold.\n    \"\"\"\n    # Filter the DataFrame for scores above the threshold\n    filtered_df = df[df['Score'] > score]\n    \n    # Sum the frequencies of the filtered scores\n    num_students = filtered_df['Frequency'].sum()\n    \n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Score': [5, 6, 7, 8, 9, 10],\n    'Frequency': [2, 12, 17, 15, 0, 4]\n})\n\n# Call the tool to solve the problem\nprint(count_students_above_score(df, 9))","question":"Mr. Lin recorded the scores of his students on the most recent math quiz. How many students scored more than 9?","prediction_code":"import pandas as pd\n\ndef count_students_above_score(df, score):\n    \"\"\"\n    This function takes in a pandas DataFrame of scores on a math quiz and a score threshold, and returns the number of students who scored above the threshold.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the scores and their frequencies with columns 'Score' and 'Frequency'.\n    score (int): The score threshold.\n    Returns:\n    int: The number of students who scored above the threshold.\n    \"\"\"\n    # Filter the DataFrame for scores above the threshold\n    filtered_df = df[df['Score'] > score]\n    \n    # Sum the frequencies of the filtered scores\n    num_students = filtered_df['Frequency'].sum()\n    \n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Score': [5, 6, 7, 8, 9, 10],\n    'Frequency': [2, 12, 17, 15, 0, 4]\n})\n\n# Call the tool to solve the problem\nprint(count_students_above_score(df, 9))","table":"Name: Scores on the math quiz\nUnit: None\nContent:\nScore | Frequency\n5 | 2\n6 | 12\n7 | 17\n8 | 15\n9 | 0\n10 | 4"}
{"level":7,"answer":277.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a dictionary of orders,\n    and returns the total cost of the orders.\n    \n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are item names and the values are the number of orders for each item.\n    \n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['cat calendar', 'encyclopedia', 'book of poems', 'atlas'],\n    'Price': [11, 13, 20, 32]\n})\n\n# Initialize the orders dictionary\norders = {\n    'encyclopedia': 9,\n    'atlas': 5\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","question":"How much money does Vincent need to buy 9 encyclopedias and 5 atlases?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a dictionary of orders,\n    and returns the total cost of the orders.\n    \n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are item names and the values are the number of orders for each item.\n    \n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['cat calendar', 'encyclopedia', 'book of poems', 'atlas'],\n    'Price': [11, 13, 20, 32]\n})\n\n# Initialize the orders dictionary\norders = {\n    'encyclopedia': 9,\n    'atlas': 5\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","table":"Name: None\nUnit: $\nContent:\ncat calendar | $11\nencyclopedia | $13\nbook of poems | $20\natlas | $32"}
{"level":8,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of boxes of Girl Scout cookies sold per day and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of boxes of cookies sold per day.\n    The dataframe should contain \"Day\" and \"Boxes of cookies\" columns.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Get the number of boxes of cookies sold on day1 and day2\n    boxes_day1 = df[df['Day'] == day1]['Boxes of cookies'].values[0]\n    boxes_day2 = df[df['Day'] == day2]['Boxes of cookies'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (boxes_day2 - boxes_day1) \/ (df.index[df['Day'] == day2][0] - df.index[df['Day'] == day1][0])\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Boxes of cookies': [13, 22, 19, 24, 27]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Wednesday', 'Thursday'))","question":"A Girl Scout troop recorded how many boxes of cookies they sold each day for a week. According to the table, what was the rate of change between Wednesday and Thursday?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of boxes of Girl Scout cookies sold per day and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of boxes of cookies sold per day.\n    The dataframe should contain \"Day\" and \"Boxes of cookies\" columns.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Get the number of boxes of cookies sold on day1 and day2\n    boxes_day1 = df[df['Day'] == day1]['Boxes of cookies'].values[0]\n    boxes_day2 = df[df['Day'] == day2]['Boxes of cookies'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (boxes_day2 - boxes_day1) \/ (df.index[df['Day'] == day2][0] - df.index[df['Day'] == day1][0])\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Boxes of cookies': [13, 22, 19, 24, 27]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Wednesday', 'Thursday'))","table":"Name: Boxes of Girl Scout cookies sold\nUnit: boxes per day\nContent:\nDay | Boxes of cookies\nMonday | 13\nTuesday | 22\nWednesday | 19\nThursday | 24\nFriday | 27"}
{"level":6,"answer":17.5,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its price per pound and the quantity purchased.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per pound for each item.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item purchased in pounds.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price per pound for the item\n        price_per_pound = item_df['Unit'].values[0]\n        \n        # Calculate the total cost of the item\n        total_cost = price_per_pound * quantity\n        \n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['banana chips', 'dried apple', 'dried pineapple', 'dried pear', 'raisins'],\n    'Unit': [6, 4, 5, 6, 7]\n})\n\n# Call the tool to solve the problem\nitem = 'raisins'\nquantity = 2.5\ntotal_cost = calculate_total_cost(df, item, quantity)\n\n# Print out the answer\nprint(total_cost)","question":"Pamela went to the store. She bought 2+1\/2 pounds of raisins. How much did she spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its price per pound and the quantity purchased.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per pound for each item.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item purchased in pounds.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price per pound for the item\n        price_per_pound = item_df['Unit'].values[0]\n        \n        # Calculate the total cost of the item\n        total_cost = price_per_pound * quantity\n        \n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['banana chips', 'dried apple', 'dried pineapple', 'dried pear', 'raisins'],\n    'Unit': [6, 4, 5, 6, 7]\n})\n\n# Call the tool to solve the problem\nitem = 'raisins'\nquantity = 2.5\ntotal_cost = calculate_total_cost(df, item, quantity)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\nbanana chips | $6 per pound\ndried apple | $4 per pound\ndried pineapple | $5 per pound\ndried pear | $6 per pound\nraisins | $7 per pound"}
{"level":7,"answer":14.0,"prediction":"import pandas as pd\n\ndef count_magazines_with_articles(df):\n    \"\"\"\n    This function takes in a pandas dataframe of articles per magazine, and returns the number of magazines that have at least 10 articles but less than 40 articles.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of articles per magazine.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of magazines that have at least 10 articles but less than 40 articles.\n    \"\"\"\n    # prepare a list to calculate the number of articles in each magazine\n    articles = []\n    # calculate the total number of articles in each magazine\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            articles.append(stem * 10 + leaf[j])\n    # filter the magazines where the total number of articles is greater than or equal to 10 and less than 40\n    filtered = [article for article in articles if 10 <= article < 40]\n    # count the number of magazines\n    num_magazines = len(filtered)\n    return num_magazines\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[5, 6, 7, 8], [2, 3, 6], [3, 3, 4, 5, 7, 9, 9], [0, 1, 2, 4, 6, 8]]\n})\n# Call the tool to solve the problem\nprint(count_magazines_with_articles(df))","question":"Quincy counted the number of articles in several different magazines. How many magazines had at least 10 articles but less than 40 articles?","prediction_code":"import pandas as pd\n\ndef count_magazines_with_articles(df):\n    \"\"\"\n    This function takes in a pandas dataframe of articles per magazine, and returns the number of magazines that have at least 10 articles but less than 40 articles.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of articles per magazine.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of magazines that have at least 10 articles but less than 40 articles.\n    \"\"\"\n    # prepare a list to calculate the number of articles in each magazine\n    articles = []\n    # calculate the total number of articles in each magazine\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            articles.append(stem * 10 + leaf[j])\n    # filter the magazines where the total number of articles is greater than or equal to 10 and less than 40\n    filtered = [article for article in articles if 10 <= article < 40]\n    # count the number of magazines\n    num_magazines = len(filtered)\n    return num_magazines","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[5, 6, 7, 8], [2, 3, 6], [3, 3, 4, 5, 7, 9, 9], [0, 1, 2, 4, 6, 8]]\n})\n# Call the tool to solve the problem\nprint(count_magazines_with_articles(df))","table":"Name: Articles per magazine\nUnit: magazines\nContent:\nStem | Leaf \n1 | 5, 6, 7, 8\n2 | 2, 3, 6\n3 | 3, 3, 4, 5, 7, 9, 9\n4 | 0, 1, 2, 4, 6, 8"}
{"level":8,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of amount spent on lunch per day and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the amount spent on lunch per day.\n    The dataframe should contain \"Day\" and \"Amount spent\" columns.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Filter the DataFrame for the two days\n    day1_df = df[df['Day'] == day1]\n    day2_df = df[df['Day'] == day2]\n    \n    # Get the amount spent for each day\n    amount1 = day1_df['Amount spent'].values[0]\n    amount2 = day2_df['Amount spent'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (amount2 - amount1) \/ amount1\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Amount spent': [3, 8, 9, 1, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Sunday', 'Monday'))","question":"In trying to calculate how much money could be saved by packing lunch, Caleb recorded the amount he spent on lunch each day. According to the table, what was the rate of change between Sunday and Monday?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of amount spent on lunch per day and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the amount spent on lunch per day.\n    The dataframe should contain \"Day\" and \"Amount spent\" columns.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Filter the DataFrame for the two days\n    day1_df = df[df['Day'] == day1]\n    day2_df = df[df['Day'] == day2]\n    \n    # Get the amount spent for each day\n    amount1 = day1_df['Amount spent'].values[0]\n    amount2 = day2_df['Amount spent'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (amount2 - amount1) \/ amount1\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Amount spent': [3, 8, 9, 1, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Sunday', 'Monday'))","table":"Name: Amount Caleb spent on lunch\nUnit: $, per day\nContent:\nDay | Amount spent\nSunday | $3\nMonday | $8\nTuesday | $9\nWednesday | $1\nThursday | $3"}
{"level":8,"answer":1.8,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['jar of strawberry jam', 'jar of honey', 'bottle of vinegar', 'bottle of ketchup'],\n    'Price': [3.77, 2.51, 1.97, 1.28]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'jar of strawberry jam', 'bottle of vinegar'))","question":"How much more does a jar of strawberry jam cost than a bottle of vinegar?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['jar of strawberry jam', 'jar of honey', 'bottle of vinegar', 'bottle of ketchup'],\n    'Price': [3.77, 2.51, 1.97, 1.28]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'jar of strawberry jam', 'bottle of vinegar'))","table":"Name: None\nUnit: $\nContent:\njar of strawberry jam | $3.77\njar of honey | $2.51\nbottle of vinegar | $1.97\nbottle of ketchup | $1.28"}
{"level":4,"answer":10.0,"prediction":"import pandas as pd\n\ndef calculate_fare_difference(df, ferry):\n    \"\"\"\n    This function takes in a pandas DataFrame of ferry fares and a specific ferry name, and returns the difference in fare between a car and a bicycle for that ferry.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the ferry fares with columns 'Ferry', 'Bicycle', and 'Car'.\n    ferry (str): The name of the ferry to calculate the fare difference for.\n    Returns:\n    float: The difference in fare between a car and a bicycle for the specified ferry.\n    \"\"\"\n    # Filter the DataFrame for the specific ferry\n    ferry_df = df[df['Ferry'] == ferry]\n    \n    # Get the fare for a bicycle and a car for the specific ferry\n    bicycle_fare = ferry_df['Bicycle'].values[0]\n    car_fare = ferry_df['Car'].values[0]\n    \n    # Calculate the fare difference\n    fare_difference = car_fare - bicycle_fare\n    \n    return fare_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Ocracoke', 'Southport-Fort Fisher', 'Fauntleroy-Vashon'],\n    'Bicycle': [3, 2, 5],\n    'Car': [15, 5, 15]\n})\n\n# Call the tool to solve the problem\nprint(calculate_fare_difference(df, 'Fauntleroy-Vashon'))","question":"For an economics project, Alana determined the cost of ferry rides for bicycles and cars. On the Fauntleroy-Vashon ferry, how much higher is the fare for a car than for a bicycle?","prediction_code":"import pandas as pd\n\ndef calculate_fare_difference(df, ferry):\n    \"\"\"\n    This function takes in a pandas DataFrame of ferry fares and a specific ferry name, and returns the difference in fare between a car and a bicycle for that ferry.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the ferry fares with columns 'Ferry', 'Bicycle', and 'Car'.\n    ferry (str): The name of the ferry to calculate the fare difference for.\n    Returns:\n    float: The difference in fare between a car and a bicycle for the specified ferry.\n    \"\"\"\n    # Filter the DataFrame for the specific ferry\n    ferry_df = df[df['Ferry'] == ferry]\n    \n    # Get the fare for a bicycle and a car for the specific ferry\n    bicycle_fare = ferry_df['Bicycle'].values[0]\n    car_fare = ferry_df['Car'].values[0]\n    \n    # Calculate the fare difference\n    fare_difference = car_fare - bicycle_fare\n    \n    return fare_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Ocracoke', 'Southport-Fort Fisher', 'Fauntleroy-Vashon'],\n    'Bicycle': [3, 2, 5],\n    'Car': [15, 5, 15]\n})\n\n# Call the tool to solve the problem\nprint(calculate_fare_difference(df, 'Fauntleroy-Vashon'))","table":"Name: Ferry fares\nUnit: $\nContent:\nFerry | Bicycle | Car\nOcracoke | $3 | $15\nSouthport-Fort Fisher | $2 | $5\nFauntleroy-Vashon | $5 | $15"}
{"level":7,"answer":1916.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of buying a certain quantity of an item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item to be purchased.\n    quantity (int): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of buying the specified quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price of the item\n    price = item_df['Price'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price * quantity\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['dishwasher', 'oven', 'refrigerator', 'clothes dryer', 'barbecue grill', 'water heater'],\n    'Price': [302.00, 724.00, 446.00, 271.00, 621.00, 479.00]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'water heater', 4))","question":"How much money does Camille need to buy 4 water heaters?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of buying a certain quantity of an item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item to be purchased.\n    quantity (int): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of buying the specified quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price of the item\n    price = item_df['Price'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price * quantity\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['dishwasher', 'oven', 'refrigerator', 'clothes dryer', 'barbecue grill', 'water heater'],\n    'Price': [302.00, 724.00, 446.00, 271.00, 621.00, 479.00]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'water heater', 4))","table":"Name: None\nUnit: $\nContent:\ndishwasher | $302.00\noven | $724.00\nrefrigerator | $446.00\nclothes dryer | $271.00\nbarbecue grill | $621.00\nwater heater | $479.00"}
{"level":5,"answer":1.0,"prediction":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of fire hydrants per street and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of fire hydrants per street.\n    The dataframe should contain \"Street\" and \"Number of hydrants\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the \"Number of hydrants\" column as a Series\n    hydrants = df['Number of hydrants']\n    \n    # Calculate the mode using the mode() function from pandas\n    mode = hydrants.mode().values[0]\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Street': ['Elm Street', 'Lemon Street', 'Rose Street', 'Maple Street', 'Pine Street', 'Cedar Street', 'Aspen Street', 'Fir Street'],\n    'Number of hydrants': [15, 1, 9, 1, 9, 15, 1, 1]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"The city recorded how many fire hydrants there are on each street. What is the mode of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of fire hydrants per street and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of fire hydrants per street.\n    The dataframe should contain \"Street\" and \"Number of hydrants\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the \"Number of hydrants\" column as a Series\n    hydrants = df['Number of hydrants']\n    \n    # Calculate the mode using the mode() function from pandas\n    mode = hydrants.mode().values[0]\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Street': ['Elm Street', 'Lemon Street', 'Rose Street', 'Maple Street', 'Pine Street', 'Cedar Street', 'Aspen Street', 'Fir Street'],\n    'Number of hydrants': [15, 1, 9, 1, 9, 15, 1, 1]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Fire hydrants\nUnit: None\nContent:\nStreet | Number of hydrants\nElm Street | 15\nLemon Street | 1\nRose Street | 9\nMaple Street | 1\nPine Street | 9\nCedar Street | 15\nAspen Street | 1\nFir Street | 1"}
{"level":8,"answer":3.0,"prediction":"import pandas as pd\n\ndef count_people_fewer_than_2(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of times people went swimming and returns the number of people who went swimming fewer than 2 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of times people went swimming.\n    The dataframe should contain \"Number of times\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who went swimming fewer than 2 times.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of times is fewer than 2\n    filtered_df = df[df['Number of times'] < 2]\n    \n    # Calculate the total number of people who went swimming fewer than 2 times\n    num_people = filtered_df['Frequency'].sum()\n    \n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of times': [1, 2, 3, 4],\n    'Frequency': [3, 10, 17, 6]\n})\n# Call the tool to solve the problem\nprint(count_people_fewer_than_2(df))","question":"Stamford will decide whether to extend its public pool's hours by looking at the number of times its residents visited the pool last month. How many people went swimming fewer than 2 times?","prediction_code":"import pandas as pd\n\ndef count_people_fewer_than_2(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of times people went swimming and returns the number of people who went swimming fewer than 2 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of times people went swimming.\n    The dataframe should contain \"Number of times\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who went swimming fewer than 2 times.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of times is fewer than 2\n    filtered_df = df[df['Number of times'] < 2]\n    \n    # Calculate the total number of people who went swimming fewer than 2 times\n    num_people = filtered_df['Frequency'].sum()\n    \n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of times': [1, 2, 3, 4],\n    'Frequency': [3, 10, 17, 6]\n})\n# Call the tool to solve the problem\nprint(count_people_fewer_than_2(df))","table":"Name: Going swimming last month\nUnit: None\nContent:\nNumber of times | Frequency\n1 | 3\n2 | 10\n3 | 17\n4 | 6"}
{"level":7,"answer":268.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(items_df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a dictionary of orders, and returns the total cost of the orders.\n    Args:\n    items_df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = items_df[items_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['teapot', 'cookbook', 'apron', 'baking dish', 'casserole dish'],\n    'Price': [38, 19, 20, 14, 20]\n})\n\n# Initialize the orders dictionary\norders = {\n    'teapot': 6,\n    'casserole dish': 2\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","question":"How much money does Philip need to buy 6 teapots and 2 casserole dishes?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(items_df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a dictionary of orders, and returns the total cost of the orders.\n    Args:\n    items_df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = items_df[items_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['teapot', 'cookbook', 'apron', 'baking dish', 'casserole dish'],\n    'Price': [38, 19, 20, 14, 20]\n})\n\n# Initialize the orders dictionary\norders = {\n    'teapot': 6,\n    'casserole dish': 2\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","table":"Name: None\nUnit: $\nContent:\nteapot | $38\ncookbook | $19\napron | $20\nbaking dish | $14\ncasserole dish | $20"}
{"level":8,"answer":14.0,"prediction":"import pandas as pd\n\ndef count_artists_with_5_or_more_masks(df):\n    \"\"\"\n    This function takes in a pandas dataframe of masks made by local artists and returns the number of artists who made at least 5 masks.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of masks made by local artists.\n    The dataframe should contain \"Masks made\" and \"Frequency\" columns.\n    Returns:\n    int: The number of artists who made at least 5 masks.\n    \"\"\"\n    # Filter the dataframe for artists who made at least 5 masks\n    filtered_df = df[df['Masks made'] >= 5]\n    \n    # Count the number of rows in the filtered dataframe\n    num_artists = len(filtered_df)\n    \n    return num_artists\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Masks made': [1, 2, 3, 4, 5, 6],\n    'Frequency': [9, 20, 8, 13, 2, 12]\n})\n# Call the tool to solve the problem\nprint(count_artists_with_5_or_more_masks(df))","question":"A reporter counted the number of masks local artists made for this year's masquerade ball. How many artists made at least 5 masks?","prediction_code":"import pandas as pd\n\ndef count_artists_with_5_or_more_masks(df):\n    \"\"\"\n    This function takes in a pandas dataframe of masks made by local artists and returns the number of artists who made at least 5 masks.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of masks made by local artists.\n    The dataframe should contain \"Masks made\" and \"Frequency\" columns.\n    Returns:\n    int: The number of artists who made at least 5 masks.\n    \"\"\"\n    # Filter the dataframe for artists who made at least 5 masks\n    filtered_df = df[df['Masks made'] >= 5]\n    \n    # Count the number of rows in the filtered dataframe\n    num_artists = len(filtered_df)\n    \n    return num_artists","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Masks made': [1, 2, 3, 4, 5, 6],\n    'Frequency': [9, 20, 8, 13, 2, 12]\n})\n# Call the tool to solve the problem\nprint(count_artists_with_5_or_more_masks(df))","table":"Name: Making paper masks\nUnit: None\nContent:\nMasks made | Frequency\n1 | 9\n2 | 20\n3 | 8\n4 | 13\n5 | 2\n6 | 12"}
{"level":6,"answer":1.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a given item and quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = quantity * item_price\n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['green beads', 'white beads', 'blue beads', 'purple beads', 'orange beads', 'red beads', 'black beads'],\n    'Price': [3, 2, 3, 2, 2, 2, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'purple beads', 0.5))","question":"Donald went to the store. He bought 1\/2 of a kilogram of purple beads. How much did he spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a given item and quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = quantity * item_price\n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['green beads', 'white beads', 'blue beads', 'purple beads', 'orange beads', 'red beads', 'black beads'],\n    'Price': [3, 2, 3, 2, 2, 2, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'purple beads', 0.5))","table":"Name: None\nUnit: $\nContent:\ngreen beads | $3\/kilogram\nwhite beads | $2\/kilogram\nblue beads | $3\/kilogram\npurple beads | $2\/kilogram\norange beads | $2\/kilogram\nred beads | $2\/kilogram\nblack beads | $3\/kilogram"}
{"level":8,"answer":7.0,"prediction":"import pandas as pd\n\ndef find_least_drawn_number(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of times each number between 2 and 8 was drawn, and returns the number that was drawn the fewest times.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number drawn and its frequency.\n    Returns:\n    int: The number that was drawn the fewest times.\n    \"\"\"\n    # Find the number with the minimum frequency\n    min_freq = df['Frequency'].min()\n    least_drawn_number = df[df['Frequency'] == min_freq]['Number drawn'].values[0]\n    \n    return least_drawn_number\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number drawn': [2, 3, 4, 5, 6, 7, 8],\n    'Frequency': [16, 20, 19, 5, 7, 0, 11]\n})\n# Call the tool to solve the problem\nprint(find_least_drawn_number(df))","question":"As part of a math lab, Rosanne tracked the number of times her classmates drew a number between 2 and 8. Which number was drawn the fewest times?","prediction_code":"import pandas as pd\n\ndef find_least_drawn_number(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of times each number between 2 and 8 was drawn, and returns the number that was drawn the fewest times.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number drawn and its frequency.\n    Returns:\n    int: The number that was drawn the fewest times.\n    \"\"\"\n    # Find the number with the minimum frequency\n    min_freq = df['Frequency'].min()\n    least_drawn_number = df[df['Frequency'] == min_freq]['Number drawn'].values[0]\n    \n    return least_drawn_number","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number drawn': [2, 3, 4, 5, 6, 7, 8],\n    'Frequency': [16, 20, 19, 5, 7, 0, 11]\n})\n# Call the tool to solve the problem\nprint(find_least_drawn_number(df))","table":"Name: Drawing a card between 2 and 8\nUnit: None\nContent:\nNumber drawn | Frequency\n2 | 16\n3 | 20\n4 | 19\n5 | 5\n6 | 7\n7 | 0\n8 | 11"}
{"level":4,"answer":16518.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['big blue van', 'red sports car', 'yellow sports car', 'yellow convertible'],\n    'Price': [7196.00, 7715.00, 9552.00, 8803.00]\n})\n\n# Define the items to calculate the total cost\nitems = ['yellow convertible', 'red sports car']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Alvin need to buy a yellow convertible and a red sports car?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['big blue van', 'red sports car', 'yellow sports car', 'yellow convertible'],\n    'Price': [7196.00, 7715.00, 9552.00, 8803.00]\n})\n\n# Define the items to calculate the total cost\nitems = ['yellow convertible', 'red sports car']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nbig blue van | $7,196.00\nred sports car | $7,715.00\nyellow sports car | $9,552.00\nyellow convertible | $8,803.00"}
{"level":3,"answer":145.0,"prediction":"import pandas as pd\n\ndef calculate_customer_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of new cable customers and returns the difference in the number of new customers between Friday and Saturday.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of new customers for each day.\n    The DataFrame should have columns 'Day' and 'Number of new customers'.\n    Returns:\n    int: The difference in the number of new customers between Friday and Saturday.\n    \"\"\"\n    # Filter the DataFrame for Friday and Saturday\n    friday_customers = df[df['Day'] == 'Friday']['Number of new customers'].values[0]\n    saturday_customers = df[df['Day'] == 'Saturday']['Number of new customers'].values[0]\n    \n    # Calculate the difference\n    customer_difference = friday_customers - saturday_customers\n    \n    return customer_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of new customers': [714, 880, 299, 566, 421]\n})\n# Call the tool to solve the problem\nprint(calculate_customer_difference(df))","question":"A cable company analyst paid attention to how many new customers it had each day. How many more new customers did the cable company have on Friday than on Saturday?","prediction_code":"import pandas as pd\n\ndef calculate_customer_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of new cable customers and returns the difference in the number of new customers between Friday and Saturday.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of new customers for each day.\n    The DataFrame should have columns 'Day' and 'Number of new customers'.\n    Returns:\n    int: The difference in the number of new customers between Friday and Saturday.\n    \"\"\"\n    # Filter the DataFrame for Friday and Saturday\n    friday_customers = df[df['Day'] == 'Friday']['Number of new customers'].values[0]\n    saturday_customers = df[df['Day'] == 'Saturday']['Number of new customers'].values[0]\n    \n    # Calculate the difference\n    customer_difference = friday_customers - saturday_customers\n    \n    return customer_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of new customers': [714, 880, 299, 566, 421]\n})\n# Call the tool to solve the problem\nprint(calculate_customer_difference(df))","table":"Name: New cable customers\nUnit: new customers\nContent:\nDay | Number of new customers\nTuesday | 714\nWednesday | 880\nThursday | 299\nFriday | 566\nSaturday | 421"}
{"level":6,"answer":7.0,"prediction":"import pandas as pd\n\ndef calculate_mean_stop_signs(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of stop signs per street and returns the mean of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of stop signs per street.\n    The dataframe should contain \"Street\" and \"Number of stop signs\" columns.\n    Returns:\n    float: The mean of the numbers of stop signs per street.\n    \"\"\"\n    # Calculate the mean of the \"Number of stop signs\" column\n    mean = df['Number of stop signs'].mean()\n    \n    return mean\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Street': ['Peabody Street', 'Jackson Street', 'Smith Street', 'Walker Street', 'Irving Street', 'Mason Street'],\n    'Number of stop signs': [10, 6, 6, 10, 9, 1]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_stop_signs(df))","question":"The town council reported on how many stop signs there are on each street. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean_stop_signs(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of stop signs per street and returns the mean of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of stop signs per street.\n    The dataframe should contain \"Street\" and \"Number of stop signs\" columns.\n    Returns:\n    float: The mean of the numbers of stop signs per street.\n    \"\"\"\n    # Calculate the mean of the \"Number of stop signs\" column\n    mean = df['Number of stop signs'].mean()\n    \n    return mean","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Street': ['Peabody Street', 'Jackson Street', 'Smith Street', 'Walker Street', 'Irving Street', 'Mason Street'],\n    'Number of stop signs': [10, 6, 6, 10, 9, 1]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_stop_signs(df))","table":"Name: Stop signs\nUnit: None\nContent:\nStreet | Number of stop signs\nPeabody Street | 10\nJackson Street | 6\nSmith Street | 6\nWalker Street | 10\nIrving Street | 9\nMason Street | 1"}
{"level":7,"answer":11.0,"prediction":"import pandas as pd\n\ndef count_students_within_range(df, min_score, max_score):\n    \"\"\"\n    This function takes in a pandas DataFrame of pop quiz scores and returns the number of students who scored at least min_score but fewer than max_score.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the pop quiz scores.\n    The DataFrame should contain \"Stem\" and \"Leaf\" columns.\n    min_score (int): The minimum score to consider.\n    max_score (int): The maximum score to consider.\n    Returns:\n    int: The number of students who scored at least min_score but fewer than max_score.\n    \"\"\"\n    # prepare a list to calculate the scores of each student\n    scores = []\n    # calculate the total score of each student\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # filter the scores within the specified range\n    filtered = [score for score in scores if min_score <= score < max_score]\n    # count the number of students\n    num_students = len(filtered)\n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6],\n    'Leaf': [[1, 3, 9, 9, 9], [7, 9], [1], [7], [0, 0, 1, 1, 1, 2, 4, 5, 7, 7], [4, 4, 5, 5, 8, 8]]\n})\n# Call the tool to solve the problem\nprint(count_students_within_range(df, 36, 62))","question":"Professor Mercado released the results of yesterday's pop quiz. How many students scored at least 36 points but fewer than 62 points?","prediction_code":"import pandas as pd\n\ndef count_students_within_range(df, min_score, max_score):\n    \"\"\"\n    This function takes in a pandas DataFrame of pop quiz scores and returns the number of students who scored at least min_score but fewer than max_score.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the pop quiz scores.\n    The DataFrame should contain \"Stem\" and \"Leaf\" columns.\n    min_score (int): The minimum score to consider.\n    max_score (int): The maximum score to consider.\n    Returns:\n    int: The number of students who scored at least min_score but fewer than max_score.\n    \"\"\"\n    # prepare a list to calculate the scores of each student\n    scores = []\n    # calculate the total score of each student\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # filter the scores within the specified range\n    filtered = [score for score in scores if min_score <= score < max_score]\n    # count the number of students\n    num_students = len(filtered)\n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6],\n    'Leaf': [[1, 3, 9, 9, 9], [7, 9], [1], [7], [0, 0, 1, 1, 1, 2, 4, 5, 7, 7], [4, 4, 5, 5, 8, 8]]\n})\n# Call the tool to solve the problem\nprint(count_students_within_range(df, 36, 62))","table":"Name: Pop quiz scores\nUnit: students\nContent:\nStem | Leaf \n1 | 1, 3, 9, 9, 9\n2 | 7, 9\n3 | 1\n4 | 7\n5 | 0, 0, 1, 1, 1, 2, 4, 5, 7, 7\n6 | 4, 4, 5, 5, 8, 8"}
{"level":3,"answer":113.0,"prediction":"import pandas as pd\n\ndef calculate_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of vegetables eaten by different families and returns the difference in the number of vegetables eaten by the Wensing family and the Pariseau family.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of vegetables eaten by different families.\n    The DataFrame should have columns 'Family' and 'Number of vegetables eaten'.\n    Returns:\n    int: The difference in the number of vegetables eaten by the Wensing family and the Pariseau family.\n    \"\"\"\n    # Filter the DataFrame for the Wensing family\n    wensing_df = df[df['Family'] == 'Wensing family']\n    wensing_vegetables = wensing_df['Number of vegetables eaten'].values[0]\n    \n    # Filter the DataFrame for the Pariseau family\n    pariseau_df = df[df['Family'] == 'Pariseau family']\n    pariseau_vegetables = pariseau_df['Number of vegetables eaten'].values[0]\n    \n    # Calculate the difference in the number of vegetables eaten\n    difference = wensing_vegetables - pariseau_vegetables\n    \n    return difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Family': ['Wensing family', 'Pariseau family', 'Yumol family'],\n    'Number of vegetables eaten': [750, 637, 743]\n})\n\n# Call the tool to solve the problem\nprint(calculate_difference(df))","question":"Several families compared how many vegetables they ate in a year. How many more vegetables did the Wensing family eat than the Pariseau family?","prediction_code":"import pandas as pd\n\ndef calculate_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of vegetables eaten by different families and returns the difference in the number of vegetables eaten by the Wensing family and the Pariseau family.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of vegetables eaten by different families.\n    The DataFrame should have columns 'Family' and 'Number of vegetables eaten'.\n    Returns:\n    int: The difference in the number of vegetables eaten by the Wensing family and the Pariseau family.\n    \"\"\"\n    # Filter the DataFrame for the Wensing family\n    wensing_df = df[df['Family'] == 'Wensing family']\n    wensing_vegetables = wensing_df['Number of vegetables eaten'].values[0]\n    \n    # Filter the DataFrame for the Pariseau family\n    pariseau_df = df[df['Family'] == 'Pariseau family']\n    pariseau_vegetables = pariseau_df['Number of vegetables eaten'].values[0]\n    \n    # Calculate the difference in the number of vegetables eaten\n    difference = wensing_vegetables - pariseau_vegetables\n    \n    return difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Family': ['Wensing family', 'Pariseau family', 'Yumol family'],\n    'Number of vegetables eaten': [750, 637, 743]\n})\n\n# Call the tool to solve the problem\nprint(calculate_difference(df))","table":"Name: Vegetables eaten in a year\nUnit: vegetables\nContent:\nFamily | Number of vegetables eaten\nWensing family | 750\nPariseau family | 637\nYumol family | 743"}
{"level":7,"answer":4.0,"prediction":"import pandas as pd\n\ndef count_students_with_score(df, score):\n    \"\"\"\n    This function takes in a pandas DataFrame of midterm exam scores and a score, and returns the number of students who scored exactly that score.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the midterm exam scores.\n    The DataFrame should contain \"Stem\" and \"Leaf\" columns.\n    score (int): The score to count.\n    Returns:\n    int: The number of students who scored exactly the given score.\n    \"\"\"\n    # Initialize the count\n    count = 0\n    \n    # Iterate through the rows of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            if stem * 10 + leaf[j] == score:\n                count += 1\n    \n    return count\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[1, 1], [2, 8], [0, 1, 1, 7, 8, 8, 8, 8, 9], [6, 6], [1, 5, 5], [0, 5, 9], [1, 4, 7], [0]]\n})\n# Set the score to count\nscore = 48\n# Call the tool to solve the problem\nprint(count_students_with_score(df, score))","question":"Professor Mason informed her students of their scores on the midterm exam. How many students scored exactly 48 points?","prediction_code":"import pandas as pd\n\ndef count_students_with_score(df, score):\n    \"\"\"\n    This function takes in a pandas DataFrame of midterm exam scores and a score, and returns the number of students who scored exactly that score.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the midterm exam scores.\n    The DataFrame should contain \"Stem\" and \"Leaf\" columns.\n    score (int): The score to count.\n    Returns:\n    int: The number of students who scored exactly the given score.\n    \"\"\"\n    # Initialize the count\n    count = 0\n    \n    # Iterate through the rows of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            if stem * 10 + leaf[j] == score:\n                count += 1\n    \n    return count","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[1, 1], [2, 8], [0, 1, 1, 7, 8, 8, 8, 8, 9], [6, 6], [1, 5, 5], [0, 5, 9], [1, 4, 7], [0]]\n})\n# Set the score to count\nscore = 48\n# Call the tool to solve the problem\nprint(count_students_with_score(df, score))","table":"Name: Midterm exam scores\nUnit: students\nContent:\nStem | Leaf \n2 | 1, 1\n3 | 2, 8\n4 | 0, 1, 1, 7, 8, 8, 8, 8, 9\n5 | 6, 6\n6 | 1, 5, 5\n7 | 0, 5, 9\n8 | 1, 4, 7\n9 | 0"}
{"level":6,"answer":3.0,"prediction":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of numbers and returns the mode of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing a column of numbers.\n    Returns:\n    float: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers from the DataFrame\n    numbers = df['Number of blocks']\n    \n    # Calculate the mode using the value_counts() function\n    mode = numbers.value_counts().idxmax()\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Reid', 'Heather', 'Dale', 'Jayla', 'Eduardo', 'Barbara'],\n    'Number of blocks': [7, 3, 2, 3, 2, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"Some students compared how many blocks they live from school. What is the mode of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of numbers and returns the mode of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing a column of numbers.\n    Returns:\n    float: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers from the DataFrame\n    numbers = df['Number of blocks']\n    \n    # Calculate the mode using the value_counts() function\n    mode = numbers.value_counts().idxmax()\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Reid', 'Heather', 'Dale', 'Jayla', 'Eduardo', 'Barbara'],\n    'Number of blocks': [7, 3, 2, 3, 2, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Blocks from school\nUnit: None\nContent:\nName | Number of blocks\nReid | 7\nHeather | 3\nDale | 2\nJayla | 3\nEduardo | 2\nBarbara | 3"}
{"level":6,"answer":25.0,"prediction":"import pandas as pd\n\ndef count_buildings_less_than_100(df):\n    \"\"\"\n    This function takes in a pandas dataframe of building heights and returns the number of buildings that are less than 100 meters tall.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the heights of buildings.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of buildings that are less than 100 meters tall.\n    \"\"\"\n    # prepare a list to store the heights of all buildings\n    heights = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the height of each building and add it to the list\n        for j in range(len(leaf)):\n            heights.append(stem * 10 + leaf[j])\n    # count the number of buildings that are less than 100 meters tall\n    num_buildings = sum(1 for height in heights if height < 100)\n    return num_buildings\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[3, 7, 9], [0, 5], [0, 0, 4, 7, 8], [1], [1, 4, 7], [0, 1, 6], [1, 2, 3, 6, 6], [5, 9], [0]]\n})\n# Call the tool to solve the problem\nprint(count_buildings_less_than_100(df))","question":"An architecture student measured the heights of all the buildings downtown. How many buildings are less than 100 meters tall?","prediction_code":"import pandas as pd\n\ndef count_buildings_less_than_100(df):\n    \"\"\"\n    This function takes in a pandas dataframe of building heights and returns the number of buildings that are less than 100 meters tall.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the heights of buildings.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of buildings that are less than 100 meters tall.\n    \"\"\"\n    # prepare a list to store the heights of all buildings\n    heights = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the height of each building and add it to the list\n        for j in range(len(leaf)):\n            heights.append(stem * 10 + leaf[j])\n    # count the number of buildings that are less than 100 meters tall\n    num_buildings = sum(1 for height in heights if height < 100)\n    return num_buildings","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[3, 7, 9], [0, 5], [0, 0, 4, 7, 8], [1], [1, 4, 7], [0, 1, 6], [1, 2, 3, 6, 6], [5, 9], [0]]\n})\n# Call the tool to solve the problem\nprint(count_buildings_less_than_100(df))","table":"Name: Building heights (meters)\nUnit: buildings\nContent:\nStem | Leaf \n1 | 3, 7, 9\n2 | 0, 5\n3 | 0, 0, 4, 7, 8\n4 | 1\n5 | 1, 4, 7\n6 | 0, 1, 6\n7 | 1, 2, 3, 6, 6\n8 | 5, 9\n9 | 0"}
{"level":4,"answer":8.0,"prediction":"import pandas as pd\n\ndef count_flocks_between(df, min_birds, max_birds):\n    \"\"\"\n    This function takes in a pandas DataFrame of birds per flock and returns the number of flocks that have at least min_birds but fewer than max_birds.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of birds per flock.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_birds (int): The minimum number of birds per flock.\n    max_birds (int): The maximum number of birds per flock.\n    Returns:\n    int: The number of flocks that have at least min_birds but fewer than max_birds.\n    \"\"\"\n    # prepare a list to calculate the number of birds in each flock\n    birds = []\n    # calculate the total number of birds in each flock\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            birds.append(stem * 10 + leaf[j])\n    # filter the flocks where the total number of birds is greater than or equal to min_birds and less than max_birds\n    filtered = [bird for bird in birds if bird >= min_birds and bird < max_birds]\n    # count the number of flocks\n    num_flocks = len(filtered)\n    return num_flocks\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7],\n    'Leaf': [[2, 8, 9, 9], [0, 2, 5, 7], [2, 7], [1, 2, 2, 6, 7], [3, 8]]\n})\n# Call the tool to solve the problem\nprint(count_flocks_between(df, 50, 78))","question":"The bird watcher counted the number of birds in each flock that passed overhead. How many flocks had at least 50 birds but fewer than 78 birds?","prediction_code":"import pandas as pd\n\ndef count_flocks_between(df, min_birds, max_birds):\n    \"\"\"\n    This function takes in a pandas DataFrame of birds per flock and returns the number of flocks that have at least min_birds but fewer than max_birds.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of birds per flock.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_birds (int): The minimum number of birds per flock.\n    max_birds (int): The maximum number of birds per flock.\n    Returns:\n    int: The number of flocks that have at least min_birds but fewer than max_birds.\n    \"\"\"\n    # prepare a list to calculate the number of birds in each flock\n    birds = []\n    # calculate the total number of birds in each flock\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            birds.append(stem * 10 + leaf[j])\n    # filter the flocks where the total number of birds is greater than or equal to min_birds and less than max_birds\n    filtered = [bird for bird in birds if bird >= min_birds and bird < max_birds]\n    # count the number of flocks\n    num_flocks = len(filtered)\n    return num_flocks","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7],\n    'Leaf': [[2, 8, 9, 9], [0, 2, 5, 7], [2, 7], [1, 2, 2, 6, 7], [3, 8]]\n})\n# Call the tool to solve the problem\nprint(count_flocks_between(df, 50, 78))","table":"Name: Birds per flock\nUnit: None\nContent:\nStem | Leaf \n3 | 2, 8, 9, 9\n4 | 0, 2, 5, 7\n5 | 2, 7\n6 | 1, 2, 2, 6, 7\n7 | 3, 8"}
{"level":2,"answer":40.0,"prediction":"import pandas as pd\n\ndef calculate_total_yellow_fish(df, num_aquariums):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of aquariums and the number of yellow fish per aquarium, and returns the total number of yellow fish in a given number of aquariums.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of aquariums and the number of yellow fish per aquarium.\n    The dataframe should contain \"Number of aquariums\" and \"Number of yellow fish\" columns.\n    num_aquariums (int): The number of aquariums to calculate the total number of yellow fish for.\n    Returns:\n    int: The total number of yellow fish in the given number of aquariums.\n    \"\"\"\n    # Filter the DataFrame for the given number of aquariums\n    filtered_df = df[df['Number of aquariums'] <= num_aquariums]\n    \n    # Calculate the total number of yellow fish\n    total_yellow_fish = filtered_df['Number of yellow fish'].sum()\n    \n    return total_yellow_fish\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of aquariums': [1, 2, 3, 4],\n    'Number of yellow fish': [10, 20, 30, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_yellow_fish(df, 4))","question":"Each aquarium has 10 yellow fish. How many yellow fish are in 4 aquariums?","prediction_code":"import pandas as pd\n\ndef calculate_total_yellow_fish(df, num_aquariums):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of aquariums and the number of yellow fish per aquarium, and returns the total number of yellow fish in a given number of aquariums.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of aquariums and the number of yellow fish per aquarium.\n    The dataframe should contain \"Number of aquariums\" and \"Number of yellow fish\" columns.\n    num_aquariums (int): The number of aquariums to calculate the total number of yellow fish for.\n    Returns:\n    int: The total number of yellow fish in the given number of aquariums.\n    \"\"\"\n    # Filter the DataFrame for the given number of aquariums\n    filtered_df = df[df['Number of aquariums'] <= num_aquariums]\n    \n    # Calculate the total number of yellow fish\n    total_yellow_fish = filtered_df['Number of yellow fish'].sum()\n    \n    return total_yellow_fish","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of aquariums': [1, 2, 3, 4],\n    'Number of yellow fish': [10, 20, 30, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_yellow_fish(df, 4))","table":"Name: None\nUnit: None\nContent:\nNumber of aquariums | Number of yellow fish\n1 | 10\n2 | 20\n3 | 30\n4 | ?"}
{"level":5,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of club members' ages and returns the range of the ages.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and ages of club members.\n    The dataframe should contain \"Name\" and \"Age\" columns.\n    Returns:\n    int: The range of the ages.\n    \"\"\"\n    # Get the minimum and maximum age values\n    min_age = df['Age'].min()\n    max_age = df['Age'].max()\n    \n    # Calculate the range\n    age_range = max_age - min_age\n    \n    return age_range\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Zeke', 'David', 'Haley', 'Andy', 'Jasper', 'Bridgette', 'Cole', 'Molly'],\n    'Age (years)': [8, 7, 7, 10, 8, 12, 8, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"The French club made a table showing the ages of its members. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of club members' ages and returns the range of the ages.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and ages of club members.\n    The dataframe should contain \"Name\" and \"Age\" columns.\n    Returns:\n    int: The range of the ages.\n    \"\"\"\n    # Get the minimum and maximum age values\n    min_age = df['Age'].min()\n    max_age = df['Age'].max()\n    \n    # Calculate the range\n    age_range = max_age - min_age\n    \n    return age_range","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Zeke', 'David', 'Haley', 'Andy', 'Jasper', 'Bridgette', 'Cole', 'Molly'],\n    'Age (years)': [8, 7, 7, 10, 8, 12, 8, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Club members' ages\nUnit: None\nContent:\nName | Age (years)\nZeke | 8\nDavid | 7\nHaley | 7\nAndy | 10\nJasper | 8\nBridgette | 12\nCole | 8\nMolly | 7"}
{"level":5,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_aid_difference(df, country1, country2, year):\n    \"\"\"\n    This function takes in a pandas DataFrame of aid received per capita from the U.S., and returns the difference in aid per capita between two countries for a specific year.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the aid received per capita from the U.S.\n    The dataframe should contain \"Country\", \"1980\", and \"1990\" columns.\n    country1 (str): The name of the first country.\n    country2 (str): The name of the second country.\n    year (str): The year for which the aid difference is calculated.\n    Returns:\n    float: The difference in aid per capita between the two countries for the specified year.\n    \"\"\"\n    # Filter the DataFrame for the specified year and countries\n    filtered_df = df[df['Country'].isin([country1, country2])]\n    \n    # Get the aid values for the specified year and countries\n    aid_country1 = filtered_df.loc[filtered_df['Country'] == country1, year].values[0]\n    aid_country2 = filtered_df.loc[filtered_df['Country'] == country2, year].values[0]\n    \n    # Calculate the difference in aid per capita\n    aid_difference = aid_country1 - aid_country2\n    \n    return aid_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Country': ['Algeria', 'Afghanistan', 'Libya'],\n    '1980': ['$9', '$2', '$5'],\n    '1990': ['$10', '$7', '$5']\n})\n# Call the tool to solve the problem\nprint(calculate_aid_difference(df, 'Algeria', 'Libya', '1990'))","question":"An economics student recorded the amount of per-capita aid that the U.S. gave to various countries during the 1900s. In 1990, how much more aid per capita did Algeria receive than Libya?","prediction_code":"import pandas as pd\n\ndef calculate_aid_difference(df, country1, country2, year):\n    \"\"\"\n    This function takes in a pandas DataFrame of aid received per capita from the U.S., and returns the difference in aid per capita between two countries for a specific year.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the aid received per capita from the U.S.\n    The dataframe should contain \"Country\", \"1980\", and \"1990\" columns.\n    country1 (str): The name of the first country.\n    country2 (str): The name of the second country.\n    year (str): The year for which the aid difference is calculated.\n    Returns:\n    float: The difference in aid per capita between the two countries for the specified year.\n    \"\"\"\n    # Filter the DataFrame for the specified year and countries\n    filtered_df = df[df['Country'].isin([country1, country2])]\n    \n    # Get the aid values for the specified year and countries\n    aid_country1 = filtered_df.loc[filtered_df['Country'] == country1, year].values[0]\n    aid_country2 = filtered_df.loc[filtered_df['Country'] == country2, year].values[0]\n    \n    # Calculate the difference in aid per capita\n    aid_difference = aid_country1 - aid_country2\n    \n    return aid_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Country': ['Algeria', 'Afghanistan', 'Libya'],\n    '1980': ['$9', '$2', '$5'],\n    '1990': ['$10', '$7', '$5']\n})\n# Call the tool to solve the problem\nprint(calculate_aid_difference(df, 'Algeria', 'Libya', '1990'))","table":"Name: Aid received per capita from the U.S.\nUnit: $\nContent:\nCountry | 1980 | 1990\nAlgeria | $9 | $10\nAfghanistan | $2 | $7\nLibya | $5 | $5"}
{"level":3,"answer":1.33,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['scallop shell', 'beautiful yellow shell', 'dark gray shell', 'shiny gold shell'],\n    'Price': [0.54, 0.69, 0.54, 0.79]\n})\n\n# Define the items to calculate the total cost\nitems = ['shiny gold shell', 'dark gray shell']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Sophia need to buy a shiny gold shell and a dark gray shell?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['scallop shell', 'beautiful yellow shell', 'dark gray shell', 'shiny gold shell'],\n    'Price': [0.54, 0.69, 0.54, 0.79]\n})\n\n# Define the items to calculate the total cost\nitems = ['shiny gold shell', 'dark gray shell']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nscallop shell | $0.54\nbeautiful yellow shell | $0.69\ndark gray shell | $0.54\nshiny gold shell | $0.79"}
{"level":5,"answer":6.0,"prediction":"import pandas as pd\n\ndef find_smallest_number_of_boxes(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of boxes per shipment and returns the smallest number of boxes.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of boxes per shipment.\n    The DataFrame should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of boxes.\n    \"\"\"\n    # Create an empty list to store all the box numbers\n    box_numbers = []\n    \n    # Iterate through each row of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Iterate through each leaf value in the row\n        for j in range(len(leaf)):\n            # Calculate the box number by combining the stem and leaf values\n            box_number = stem * 10 + leaf[j]\n            # Append the box number to the list\n            box_numbers.append(box_number)\n    \n    # Find the smallest box number\n    smallest_box_number = min(box_numbers)\n    \n    return smallest_box_number\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3, 4, 5, 6, 7],\n    'Leaf': [[6, 9], [3, 5, 6, 8], [0, 4, 7], [4, 7], [0, 4, 6, 8], [2, 9, 9], [2, 5, 7], [0, 1, 9]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_boxes(df))","question":"A shipping company keeps track of the number of boxes in each shipment they send out. What is the smallest number of boxes?","prediction_code":"import pandas as pd\n\ndef find_smallest_number_of_boxes(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of boxes per shipment and returns the smallest number of boxes.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of boxes per shipment.\n    The DataFrame should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of boxes.\n    \"\"\"\n    # Create an empty list to store all the box numbers\n    box_numbers = []\n    \n    # Iterate through each row of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Iterate through each leaf value in the row\n        for j in range(len(leaf)):\n            # Calculate the box number by combining the stem and leaf values\n            box_number = stem * 10 + leaf[j]\n            # Append the box number to the list\n            box_numbers.append(box_number)\n    \n    # Find the smallest box number\n    smallest_box_number = min(box_numbers)\n    \n    return smallest_box_number","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3, 4, 5, 6, 7],\n    'Leaf': [[6, 9], [3, 5, 6, 8], [0, 4, 7], [4, 7], [0, 4, 6, 8], [2, 9, 9], [2, 5, 7], [0, 1, 9]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_boxes(df))","table":"Name: Boxes per shipment\nUnit: boxes\nContent:\nStem | Leaf \n0 | 6, 9\n1 | 3, 5, 6, 8\n2 | 0, 4, 7\n3 | 4, 7\n4 | 0, 4, 6, 8\n5 | 2, 9, 9\n6 | 2, 5, 7\n7 | 0, 1, 9"}
{"level":5,"answer":11.0,"prediction":"import pandas as pd\n\ndef get_chocolate_consumption(df, country, year):\n    \"\"\"\n    This function takes in a pandas DataFrame of chocolate consumption per capita and returns the amount of chocolate consumed per capita in a specific country and year.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the chocolate consumption per capita data.\n    The dataframe should contain \"Country\", \"2002\", and \"2005\" columns.\n    country (str): The name of the country.\n    year (str): The year.\n    Returns:\n    int: The amount of chocolate consumed per capita in the specified country and year.\n    \"\"\"\n    # Filter the DataFrame for the specific country and year\n    country_df = df[df['Country'] == country]\n    if not country_df.empty:\n        chocolate_consumption = country_df[year].values[0]\n        return chocolate_consumption\n    else:\n        return None\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Country': ['Poland', 'Germany', 'Denmark', 'Australia'],\n    '2002': [3, 10, 9, 4],\n    '2005': [4, 11, 8, 5]\n})\n# Call the tool to solve the problem\nprint(get_chocolate_consumption(df, 'Germany', '2005'))","question":"Diane's Candies has been studying how much chocolate people have been eating in different countries. How much chocolate was consumed per capita in Germany in 2005?","prediction_code":"import pandas as pd\n\ndef get_chocolate_consumption(df, country, year):\n    \"\"\"\n    This function takes in a pandas DataFrame of chocolate consumption per capita and returns the amount of chocolate consumed per capita in a specific country and year.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the chocolate consumption per capita data.\n    The dataframe should contain \"Country\", \"2002\", and \"2005\" columns.\n    country (str): The name of the country.\n    year (str): The year.\n    Returns:\n    int: The amount of chocolate consumed per capita in the specified country and year.\n    \"\"\"\n    # Filter the DataFrame for the specific country and year\n    country_df = df[df['Country'] == country]\n    if not country_df.empty:\n        chocolate_consumption = country_df[year].values[0]\n        return chocolate_consumption\n    else:\n        return None","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Country': ['Poland', 'Germany', 'Denmark', 'Australia'],\n    '2002': [3, 10, 9, 4],\n    '2005': [4, 11, 8, 5]\n})\n# Call the tool to solve the problem\nprint(get_chocolate_consumption(df, 'Germany', '2005'))","table":"Name: Chocolate consumption per capita (kg)\nUnit: kg\nContent:\nCountry | 2002 | 2005\nPoland | 3 | 4\nGermany | 10 | 11\nDenmark | 9 | 8\nAustralia | 4 | 5"}
{"level":7,"answer":6.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pet ownership and returns the range of the numbers of pets.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and numbers of pets.\n    The dataframe should contain \"Name\" and \"Number of pets\" columns.\n    Returns:\n    int: The range of the numbers of pets.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of pets\" column\n    min_pets = df['Number of pets'].min()\n    max_pets = df['Number of pets'].max()\n    \n    # Calculate the range\n    range_pets = max_pets - min_pets\n    \n    return range_pets\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Lacey', 'Tyler', 'Cindy', 'Aisha', 'Owen', 'David'],\n    'Number of pets': [9, 6, 8, 3, 7, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"Some students compared how many pets they have. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pet ownership and returns the range of the numbers of pets.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and numbers of pets.\n    The dataframe should contain \"Name\" and \"Number of pets\" columns.\n    Returns:\n    int: The range of the numbers of pets.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of pets\" column\n    min_pets = df['Number of pets'].min()\n    max_pets = df['Number of pets'].max()\n    \n    # Calculate the range\n    range_pets = max_pets - min_pets\n    \n    return range_pets","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Lacey', 'Tyler', 'Cindy', 'Aisha', 'Owen', 'David'],\n    'Number of pets': [9, 6, 8, 3, 7, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Pets\nUnit: None\nContent:\nName | Number of pets\nLacey | 9\nTyler | 6\nCindy | 8\nAisha | 3\nOwen | 7\nDavid | 7"}
{"level":6,"answer":3.4,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on the quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information for different items.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price per pound for the item\n    price_per_pound = item_df['Unit'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price_per_pound * quantity\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['white sand', 'coarse gravel', 'fine gravel', 'pebbles', 'black sand', 'rocks'],\n    'Unit': [4, 3, 3, 2, 5, 4]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'pebbles', 1.7))","question":"Brian purchased 1.7 pounds of pebbles. What was the total cost?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on the quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information for different items.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price per pound for the item\n    price_per_pound = item_df['Unit'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price_per_pound * quantity\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['white sand', 'coarse gravel', 'fine gravel', 'pebbles', 'black sand', 'rocks'],\n    'Unit': [4, 3, 3, 2, 5, 4]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'pebbles', 1.7))","table":"Name: None\nUnit: $\nContent:\nwhite sand | $4\/pound\ncoarse gravel | $3\/pound\nfine gravel | $3\/pound\npebbles | $2\/pound\nblack sand | $5\/pound\nrocks | $4\/pound"}
{"level":8,"answer":7.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pages written and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of pages written.\n    The dataframe should contain \"Day\" and \"Number of pages\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of pages\" column\n    min_pages = df['Number of pages'].min()\n    max_pages = df['Number of pages'].max()\n    \n    # Calculate the range\n    range_pages = max_pages - min_pages\n    \n    return range_pages\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday'],\n    'Number of pages': [4, 4, 0, 4, 6, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"An author kept a log of how many pages he wrote in the past 6 days. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pages written and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of pages written.\n    The dataframe should contain \"Day\" and \"Number of pages\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of pages\" column\n    min_pages = df['Number of pages'].min()\n    max_pages = df['Number of pages'].max()\n    \n    # Calculate the range\n    range_pages = max_pages - min_pages\n    \n    return range_pages","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday'],\n    'Number of pages': [4, 4, 0, 4, 6, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Pages written\nUnit: None\nContent:\nDay | Number of pages\nFriday | 4\nSaturday | 4\nSunday | 0\nMonday | 4\nTuesday | 6\nWednesday | 7"}
{"level":4,"answer":7.0,"prediction":"import pandas as pd\n\ndef count_students(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of favorite vegetables and returns the difference in the number of students who voted for celery and cauliflower.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of students who voted for each vegetable.\n    The DataFrame should contain \"Vegetable\", \"Upper elementary students\", and \"Lower elementary students\" columns.\n    Returns:\n    int: The difference in the number of students who voted for celery and cauliflower.\n    \"\"\"\n    # Get the number of students who voted for celery and cauliflower\n    celery_votes = df[df['Vegetable'] == 'Celery']['Upper elementary students'].values[0] + df[df['Vegetable'] == 'Celery']['Lower elementary students'].values[0]\n    cauliflower_votes = df[df['Vegetable'] == 'Cauliflower']['Upper elementary students'].values[0] + df[df['Vegetable'] == 'Cauliflower']['Lower elementary students'].values[0]\n    \n    # Calculate the difference in votes\n    difference = celery_votes - cauliflower_votes\n    \n    return difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Vegetable': ['Asparagus', 'Cauliflower', 'Carrots', 'Beets', 'Celery'],\n    'Upper elementary students': [16, 16, 14, 4, 5],\n    'Lower elementary students': [5, 2, 17, 13, 20]\n})\n# Call the tool to solve the problem\nprint(count_students(df))","question":"Clarksville Elementary School polled its students about their favorite vegetables in order to decide which ones to plant in the new school garden. How many more students voted for celery than cauliflower?","prediction_code":"import pandas as pd\n\ndef count_students(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of favorite vegetables and returns the difference in the number of students who voted for celery and cauliflower.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of students who voted for each vegetable.\n    The DataFrame should contain \"Vegetable\", \"Upper elementary students\", and \"Lower elementary students\" columns.\n    Returns:\n    int: The difference in the number of students who voted for celery and cauliflower.\n    \"\"\"\n    # Get the number of students who voted for celery and cauliflower\n    celery_votes = df[df['Vegetable'] == 'Celery']['Upper elementary students'].values[0] + df[df['Vegetable'] == 'Celery']['Lower elementary students'].values[0]\n    cauliflower_votes = df[df['Vegetable'] == 'Cauliflower']['Upper elementary students'].values[0] + df[df['Vegetable'] == 'Cauliflower']['Lower elementary students'].values[0]\n    \n    # Calculate the difference in votes\n    difference = celery_votes - cauliflower_votes\n    \n    return difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Vegetable': ['Asparagus', 'Cauliflower', 'Carrots', 'Beets', 'Celery'],\n    'Upper elementary students': [16, 16, 14, 4, 5],\n    'Lower elementary students': [5, 2, 17, 13, 20]\n})\n# Call the tool to solve the problem\nprint(count_students(df))","table":"Name: Favorite vegetables\nUnit: students\nContent:\nVegetable | Upper elementary students | Lower elementary students\nAsparagus | 16 | 5\nCauliflower | 16 | 2\nCarrots | 14 | 17\nBeets | 4 | 13\nCelery | 5 | 20"}
{"level":6,"answer":72.0,"prediction":"import pandas as pd\n\ndef find_largest_number_of_beads(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of beads per necklace and returns the largest number of beads.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of beads per necklace.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of beads.\n    \"\"\"\n    # prepare a list to store the number of beads in each necklace\n    beads = []\n    # iterate through the dataframe and extract the number of beads\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            beads.append(stem * 10 + leaf[j])\n    # find the largest number of beads\n    largest_number_of_beads = max(beads)\n    return largest_number_of_beads\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7],\n    'Leaf': [[3, 5, 9, 9], [], [2], [5], [3], [5, 5], [2]]\n})\n# Call the tool to solve the problem\nprint(find_largest_number_of_beads(df))","question":"Ted counted all the beads in each necklace at the jewelry store where he works. What is the largest number of beads?","prediction_code":"import pandas as pd\n\ndef find_largest_number_of_beads(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of beads per necklace and returns the largest number of beads.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of beads per necklace.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of beads.\n    \"\"\"\n    # prepare a list to store the number of beads in each necklace\n    beads = []\n    # iterate through the dataframe and extract the number of beads\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            beads.append(stem * 10 + leaf[j])\n    # find the largest number of beads\n    largest_number_of_beads = max(beads)\n    return largest_number_of_beads","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7],\n    'Leaf': [[3, 5, 9, 9], [], [2], [5], [3], [5, 5], [2]]\n})\n# Call the tool to solve the problem\nprint(find_largest_number_of_beads(df))","table":"Name: Beads per necklace\nUnit: beads\nContent:\nStem | Leaf \n1 | 3, 5, 9, 9\n2 | \n3 | 2\n4 | 5\n5 | 3\n6 | 5, 5\n7 | 2"}
{"level":3,"answer":0.14,"prediction":"import pandas as pd\n\ndef calculate_total_cost(menu_df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the menu items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = menu_df[menu_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['sour apple candy', 'gummy bear', 'piece of licorice', 'cinnamon candy', 'gum drop', 'peppermint candy'],\n    'Price': [0.04, 0.08, 0.08, 0.01, 0.01, 0.06]\n})\n\n# Initialize the orders dictionary\norders = {\n    'peppermint candy': 1,\n    'gummy bear': 1\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","question":"How much money does Lena need to buy a peppermint candy and a gummy bear?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(menu_df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the menu items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = menu_df[menu_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['sour apple candy', 'gummy bear', 'piece of licorice', 'cinnamon candy', 'gum drop', 'peppermint candy'],\n    'Price': [0.04, 0.08, 0.08, 0.01, 0.01, 0.06]\n})\n\n# Initialize the orders dictionary\norders = {\n    'peppermint candy': 1,\n    'gummy bear': 1\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","table":"Name: None\nUnit: $\nContent:\nsour apple candy | $0.04\ngummy bear | $0.08\npiece of licorice | $0.08\ncinnamon candy | $0.01\ngum drop | $0.01\npeppermint candy | $0.06"}
{"level":5,"answer":11.0,"prediction":"import pandas as pd\n\ndef calculate_mean_distance(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of blocks each student lives from school, and returns the mean of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of blocks each student lives from school.\n    The dataframe should contain \"Name\" and \"Number of blocks\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Number of blocks\" column\n    mean_distance = df['Number of blocks'].mean()\n    \n    return mean_distance\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Wendy', 'Carson', 'Zach', 'Lila', 'Nicole', 'Shane', 'Henry', 'Devin'],\n    'Number of blocks': [14, 8, 17, 17, 3, 7, 5, 17]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_distance(df))","question":"Some students compared how many blocks they live from school. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean_distance(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of blocks each student lives from school, and returns the mean of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of blocks each student lives from school.\n    The dataframe should contain \"Name\" and \"Number of blocks\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Number of blocks\" column\n    mean_distance = df['Number of blocks'].mean()\n    \n    return mean_distance","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Wendy', 'Carson', 'Zach', 'Lila', 'Nicole', 'Shane', 'Henry', 'Devin'],\n    'Number of blocks': [14, 8, 17, 17, 3, 7, 5, 17]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_distance(df))","table":"Name: Blocks from school\nUnit: None\nContent:\nName | Number of blocks\nWendy | 14\nCarson | 8\nZach | 17\nLila | 17\nNicole | 3\nShane | 7\nHenry | 5\nDevin | 17"}
{"level":8,"answer":2.0,"prediction":"import pandas as pd\n\ndef count_wait_times(df, min_time, max_time):\n    \"\"\"\n    This function takes in a pandas DataFrame of technical assistance wait times and returns the number of people who waited for at least min_time minutes but less than max_time minutes.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the technical assistance wait times.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_time (int): The minimum wait time in minutes.\n    max_time (int): The maximum wait time in minutes.\n    Returns:\n    int: The number of people who waited for at least min_time minutes but less than max_time minutes.\n    \"\"\"\n    # prepare a list to store the wait times\n    wait_times = []\n    # calculate the total wait time for each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            wait_times.append(stem * 10 + leaf[j])\n    # filter the wait times where the total wait time is greater than or equal to min_time and less than max_time\n    filtered = [time for time in wait_times if min_time <= time < max_time]\n    # count the number of wait times\n    num_people = len(filtered)\n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [5, 6, 7, 8],\n    'Leaf': [[1], [3, 3, 6, 9, 9], [1, 2, 6], [2, 5]]\n})\n# Call the tool to solve the problem\nprint(count_wait_times(df, 81, 87))","question":"A Technical Assistance Manager monitored his customers' wait times. How many people waited for at least 81 minutes but less than 87 minutes?","prediction_code":"import pandas as pd\n\ndef count_wait_times(df, min_time, max_time):\n    \"\"\"\n    This function takes in a pandas DataFrame of technical assistance wait times and returns the number of people who waited for at least min_time minutes but less than max_time minutes.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the technical assistance wait times.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_time (int): The minimum wait time in minutes.\n    max_time (int): The maximum wait time in minutes.\n    Returns:\n    int: The number of people who waited for at least min_time minutes but less than max_time minutes.\n    \"\"\"\n    # prepare a list to store the wait times\n    wait_times = []\n    # calculate the total wait time for each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            wait_times.append(stem * 10 + leaf[j])\n    # filter the wait times where the total wait time is greater than or equal to min_time and less than max_time\n    filtered = [time for time in wait_times if min_time <= time < max_time]\n    # count the number of wait times\n    num_people = len(filtered)\n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [5, 6, 7, 8],\n    'Leaf': [[1], [3, 3, 6, 9, 9], [1, 2, 6], [2, 5]]\n})\n# Call the tool to solve the problem\nprint(count_wait_times(df, 81, 87))","table":"Name: Technical assistance wait times (minutes)\nUnit: people\nContent:\nStem | Leaf \n5 | 1\n6 | 3, 3, 6, 9, 9\n7 | 1, 2, 6\n8 | 2, 5"}
{"level":7,"answer":3.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of bird sightings and returns the median of the number of birds seen.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of birds seen each day.\n    The DataFrame should have columns 'Day' and 'Number of birds'.\n    Returns:\n    float: The median of the number of birds seen.\n    \"\"\"\n    # Get the 'Number of birds' column as a Series\n    bird_counts = df['Number of birds']\n    \n    # Calculate the median using pandas\n    median = bird_counts.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday'],\n    'Number of birds': [4, 5, 2, 2, 9, 3, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"Jaylen went on a bird watching trip and jotted down the number of birds he saw each day. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of bird sightings and returns the median of the number of birds seen.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of birds seen each day.\n    The DataFrame should have columns 'Day' and 'Number of birds'.\n    Returns:\n    float: The median of the number of birds seen.\n    \"\"\"\n    # Get the 'Number of birds' column as a Series\n    bird_counts = df['Number of birds']\n    \n    # Calculate the median using pandas\n    median = bird_counts.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday'],\n    'Number of birds': [4, 5, 2, 2, 9, 3, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Number of birds\nUnit: None\nContent:\nDay | Number of birds\nTuesday | 4\nWednesday | 5\nThursday | 2\nFriday | 2\nSaturday | 9\nSunday | 3\nMonday | 3"}
{"level":7,"answer":35.1,"prediction":"import pandas as pd\n\ndef calculate_total_cost(chocolate_df, purchases):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a chocolate price table and a dictionary of purchases, and returns the total cost of the purchases using pandas.\n    Args:\n    chocolate_df (pd.DataFrame): A pandas DataFrame containing chocolate types and their prices with columns 'Chocolate' and 'Price'.\n    purchases (dict): A dictionary where the keys are chocolate types and the values are the number of pounds purchased for each type.\n    Returns:\n    float: The total cost of the purchases.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the purchases and calculate the cost for each type\n    for chocolate, pounds in purchases.items():\n        # Filter the DataFrame for the specific chocolate type\n        chocolate_df = chocolate_df[chocolate_df['Chocolate'] == chocolate]\n        if not chocolate_df.empty:\n            chocolate_price = chocolate_df['Price'].values[0]\n            total_cost += pounds * chocolate_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\nchocolate_df = pd.DataFrame({\n    'Chocolate': ['milk chocolate', 'dark chocolate', 'orange chocolate', 'bittersweet chocolate', 'semisweet chocolate', 'white chocolate'],\n    'Price': [4.42, 3.94, 4.18, 3.95, 5.64, 2.19]\n})\n\n# Initialize the purchases dictionary\npurchases = {\n    'semisweet chocolate': 4,\n    'orange chocolate': 3\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(chocolate_df, purchases))","question":"Tanner purchased 4 pounds of semisweet chocolate and 3 pounds of orange chocolate. What was the total cost?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(chocolate_df, purchases):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a chocolate price table and a dictionary of purchases, and returns the total cost of the purchases using pandas.\n    Args:\n    chocolate_df (pd.DataFrame): A pandas DataFrame containing chocolate types and their prices with columns 'Chocolate' and 'Price'.\n    purchases (dict): A dictionary where the keys are chocolate types and the values are the number of pounds purchased for each type.\n    Returns:\n    float: The total cost of the purchases.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the purchases and calculate the cost for each type\n    for chocolate, pounds in purchases.items():\n        # Filter the DataFrame for the specific chocolate type\n        chocolate_df = chocolate_df[chocolate_df['Chocolate'] == chocolate]\n        if not chocolate_df.empty:\n            chocolate_price = chocolate_df['Price'].values[0]\n            total_cost += pounds * chocolate_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\nchocolate_df = pd.DataFrame({\n    'Chocolate': ['milk chocolate', 'dark chocolate', 'orange chocolate', 'bittersweet chocolate', 'semisweet chocolate', 'white chocolate'],\n    'Price': [4.42, 3.94, 4.18, 3.95, 5.64, 2.19]\n})\n\n# Initialize the purchases dictionary\npurchases = {\n    'semisweet chocolate': 4,\n    'orange chocolate': 3\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(chocolate_df, purchases))","table":"Name: None\nUnit: $\nContent:\nmilk chocolate | $4.42 per pound\ndark chocolate | $3.94 per pound\norange chocolate | $4.18 per pound\nbittersweet chocolate | $3.95 per pound\nsemisweet chocolate | $5.64 per pound\nwhite chocolate | $2.19 per pound"}
{"level":5,"answer":7.0,"prediction":"import pandas as pd\n\ndef calculate_revenue_difference(df, pizzeria1, pizzeria2, pizza_type):\n    \"\"\"\n    This function takes in a pandas DataFrame of pizza sales, the names of two pizzerias, and a pizza type, and returns the difference in revenue between the two pizzerias for the given pizza type.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the pizza sales data.\n    The DataFrame should have columns 'Restaurant', 'Pepperoni pizzas', and 'Vegetarian pizzas'.\n    pizzeria1 (str): The name of the first pizzeria.\n    pizzeria2 (str): The name of the second pizzeria.\n    pizza_type (str): The type of pizza to compare revenues for.\n    Returns:\n    float: The difference in revenue between the two pizzerias for the given pizza type.\n    \"\"\"\n    # Filter the DataFrame for the two pizzerias and the given pizza type\n    pizzeria1_df = df[df['Restaurant'] == pizzeria1]\n    pizzeria2_df = df[df['Restaurant'] == pizzeria2]\n    \n    # Get the revenue for the given pizza type for each pizzeria\n    pizzeria1_revenue = pizzeria1_df[pizza_type].values[0]\n    pizzeria2_revenue = pizzeria2_df[pizza_type].values[0]\n    \n    # Calculate the difference in revenue\n    revenue_difference = pizzeria1_revenue - pizzeria2_revenue\n    \n    return revenue_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Restaurant': ['Pizzeria Italiano', \"Dan's Deep Dish\", 'Pizza, Pasta and More'],\n    'Pepperoni pizzas': [9, 12, 5],\n    'Vegetarian pizzas': [12, 13, 19]\n})\n# Call the tool to solve the problem\nprint(calculate_revenue_difference(df, \"Dan's Deep Dish\", 'Pizza, Pasta and More', 'Pepperoni pizzas'))","question":"A food industry researcher compiled the revenues of several pizzerias. How much more did Dan's Deep Dish make from pepperoni pizzas than Pizza, Pasta and More?","prediction_code":"import pandas as pd\n\ndef calculate_revenue_difference(df, pizzeria1, pizzeria2, pizza_type):\n    \"\"\"\n    This function takes in a pandas DataFrame of pizza sales, the names of two pizzerias, and a pizza type, and returns the difference in revenue between the two pizzerias for the given pizza type.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the pizza sales data.\n    The DataFrame should have columns 'Restaurant', 'Pepperoni pizzas', and 'Vegetarian pizzas'.\n    pizzeria1 (str): The name of the first pizzeria.\n    pizzeria2 (str): The name of the second pizzeria.\n    pizza_type (str): The type of pizza to compare revenues for.\n    Returns:\n    float: The difference in revenue between the two pizzerias for the given pizza type.\n    \"\"\"\n    # Filter the DataFrame for the two pizzerias and the given pizza type\n    pizzeria1_df = df[df['Restaurant'] == pizzeria1]\n    pizzeria2_df = df[df['Restaurant'] == pizzeria2]\n    \n    # Get the revenue for the given pizza type for each pizzeria\n    pizzeria1_revenue = pizzeria1_df[pizza_type].values[0]\n    pizzeria2_revenue = pizzeria2_df[pizza_type].values[0]\n    \n    # Calculate the difference in revenue\n    revenue_difference = pizzeria1_revenue - pizzeria2_revenue\n    \n    return revenue_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Restaurant': ['Pizzeria Italiano', \"Dan's Deep Dish\", 'Pizza, Pasta and More'],\n    'Pepperoni pizzas': [9, 12, 5],\n    'Vegetarian pizzas': [12, 13, 19]\n})\n# Call the tool to solve the problem\nprint(calculate_revenue_difference(df, \"Dan's Deep Dish\", 'Pizza, Pasta and More', 'Pepperoni pizzas'))","table":"Name: Pizza sales\nUnit: $\nContent:\nRestaurant | Pepperoni pizzas | Vegetarian pizzas\nPizzeria Italiano | $9 | $12\nDan's Deep Dish | $12 | $13\nPizza, Pasta and More | $5 | $19"}
{"level":2,"answer":50.0,"prediction":"import pandas as pd\n\ndef calculate_total_charms(df, num_bracelets):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of bracelets and charms, and returns the total number of charms on a given number of bracelets.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of bracelets and charms with columns 'Number of bracelets' and 'Number of charms'.\n    num_bracelets (int): The number of bracelets to calculate the total number of charms for.\n    Returns:\n    int: The total number of charms on the given number of bracelets.\n    \"\"\"\n    # Filter the DataFrame for the given number of bracelets\n    filtered_df = df[df['Number of bracelets'] == num_bracelets]\n    \n    # Get the number of charms for the given number of bracelets\n    num_charms = filtered_df['Number of charms'].values[0]\n    \n    # Calculate the total number of charms on the given number of bracelets\n    total_charms = num_bracelets * num_charms\n    \n    return total_charms\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of bracelets': [1, 2, 3, 4, 5],\n    'Number of charms': [10, 20, 30, 40, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_charms(df, 5))","question":"Each bracelet has 10 charms. How many charms are on 5 bracelets?","prediction_code":"import pandas as pd\n\ndef calculate_total_charms(df, num_bracelets):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of bracelets and charms, and returns the total number of charms on a given number of bracelets.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of bracelets and charms with columns 'Number of bracelets' and 'Number of charms'.\n    num_bracelets (int): The number of bracelets to calculate the total number of charms for.\n    Returns:\n    int: The total number of charms on the given number of bracelets.\n    \"\"\"\n    # Filter the DataFrame for the given number of bracelets\n    filtered_df = df[df['Number of bracelets'] == num_bracelets]\n    \n    # Get the number of charms for the given number of bracelets\n    num_charms = filtered_df['Number of charms'].values[0]\n    \n    # Calculate the total number of charms on the given number of bracelets\n    total_charms = num_bracelets * num_charms\n    \n    return total_charms","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of bracelets': [1, 2, 3, 4, 5],\n    'Number of charms': [10, 20, 30, 40, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_charms(df, 5))","table":"Name: None\nUnit: None\nContent:\nNumber of bracelets | Number of charms\n1 | 10\n2 | 20\n3 | 30\n4 | 40\n5 | ?"}
{"level":6,"answer":16.0,"prediction":"import pandas as pd\n\ndef count_dogs_less_than_89_pounds(df):\n    \"\"\"\n    This function takes in a pandas dataframe of dogs' weights and returns the number of dogs that weighed less than 89 pounds.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the weights of dogs.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of dogs that weighed less than 89 pounds.\n    \"\"\"\n    # prepare a list to calculate weights of each dog\n    weights = []\n    # calculate the weight of each dog\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            weights.append(stem * 10 + leaf[j])\n    # filter the dogs that weigh less than 89 pounds\n    filtered = [weight for weight in weights if weight < 89]\n    # count the number of dogs\n    num_dogs = len(filtered)\n    return num_dogs\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7, 8],\n    'Leaf': [[0, 0, 0, 2, 3, 8, 9], [], [1], [9], [0, 0, 0, 9], [0, 1, 5]]\n})\n# Call the tool to solve the problem\nprint(count_dogs_less_than_89_pounds(df))","question":"A veterinarian weighed all the dogs that visited his office last month. How many dogs weighed less than 89 pounds?","prediction_code":"import pandas as pd\n\ndef count_dogs_less_than_89_pounds(df):\n    \"\"\"\n    This function takes in a pandas dataframe of dogs' weights and returns the number of dogs that weighed less than 89 pounds.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the weights of dogs.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of dogs that weighed less than 89 pounds.\n    \"\"\"\n    # prepare a list to calculate weights of each dog\n    weights = []\n    # calculate the weight of each dog\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            weights.append(stem * 10 + leaf[j])\n    # filter the dogs that weigh less than 89 pounds\n    filtered = [weight for weight in weights if weight < 89]\n    # count the number of dogs\n    num_dogs = len(filtered)\n    return num_dogs","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7, 8],\n    'Leaf': [[0, 0, 0, 2, 3, 8, 9], [], [1], [9], [0, 0, 0, 9], [0, 1, 5]]\n})\n# Call the tool to solve the problem\nprint(count_dogs_less_than_89_pounds(df))","table":"Name: Dogs' weights (lbs)\nUnit: dogs\nContent:\nStem | Leaf \n3 | 0, 0, 0, 2, 3, 8, 9\n4 | \n5 | 1\n6 | 9\n7 | 0, 0, 0, 9\n8 | 0, 1, 5"}
{"level":4,"answer":5.0,"prediction":"import pandas as pd\n\ndef count_bracelets_with_40_to_50_silver_beads(df):\n    \"\"\"\n    This function takes in a pandas dataframe of silver beads per bracelet, and returns the number of bracelets that have at least 40 silver beads but fewer than 50 silver beads.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of silver beads per bracelet.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of bracelets that have at least 40 silver beads but fewer than 50 silver beads.\n    \"\"\"\n    # prepare a list to calculate beads in each bracelet\n    beads = []\n    # calculate the total number of silver beads in each bracelet\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            beads.append(stem * 10 + leaf[j])\n    # filter the bracelets where the total number of silver beads is greater than or equal to 40 and less than 50\n    filtered = [bead for bead in beads if 40 <= bead < 50]\n    # count the number of bracelets\n    num_bracelets = len(filtered)\n    return num_bracelets\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5],\n    'Leaf': [[2, 4, 6, 7, 8], [0, 4, 5, 7, 9], [0, 0, 2, 3, 4], [0, 5, 8]]\n})\n# Call the tool to solve the problem\nprint(count_bracelets_with_40_to_50_silver_beads(df))","question":"Perry counted the number of silver beads on each bracelet at Middletown Jewelry, the store where he works. How many bracelets had at least 40 silver beads but fewer than 50 silver beads?","prediction_code":"import pandas as pd\n\ndef count_bracelets_with_40_to_50_silver_beads(df):\n    \"\"\"\n    This function takes in a pandas dataframe of silver beads per bracelet, and returns the number of bracelets that have at least 40 silver beads but fewer than 50 silver beads.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of silver beads per bracelet.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of bracelets that have at least 40 silver beads but fewer than 50 silver beads.\n    \"\"\"\n    # prepare a list to calculate beads in each bracelet\n    beads = []\n    # calculate the total number of silver beads in each bracelet\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            beads.append(stem * 10 + leaf[j])\n    # filter the bracelets where the total number of silver beads is greater than or equal to 40 and less than 50\n    filtered = [bead for bead in beads if 40 <= bead < 50]\n    # count the number of bracelets\n    num_bracelets = len(filtered)\n    return num_bracelets","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5],\n    'Leaf': [[2, 4, 6, 7, 8], [0, 4, 5, 7, 9], [0, 0, 2, 3, 4], [0, 5, 8]]\n})\n# Call the tool to solve the problem\nprint(count_bracelets_with_40_to_50_silver_beads(df))","table":"Name: Silver beads per bracelet\nUnit: None\nContent:\nStem | Leaf \n2 | 2, 4, 6, 7, 8\n3 | 0, 4, 5, 7, 9\n4 | 0, 0, 2, 3, 4\n5 | 0, 5, 8"}
{"level":3,"answer":4915.0,"prediction":"import pandas as pd\n\ndef calculate_total_riders(df, months):\n    \"\"\"\n    This function takes in a pandas DataFrame of subway ridership and a list of months, and returns the total number of riders for the specified months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of subway riders for each month.\n    The DataFrame should have columns 'Month' and 'Number of riders'.\n    months (list): A list of months for which the total number of riders needs to be calculated.\n    Returns:\n    int: The total number of riders for the specified months.\n    \"\"\"\n    # Filter the DataFrame for the specified months\n    filtered_df = df[df['Month'].isin(months)]\n    \n    # Calculate the total number of riders for the specified months\n    total_riders = filtered_df['Number of riders'].sum()\n    \n    return total_riders\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['November', 'December', 'January', 'February'],\n    'Number of riders': [1183, 1137, 3844, 3778]\n})\n\n# Specify the months for which the total number of riders needs to be calculated\nmonths = ['December', 'February']\n\n# Call the tool to solve the problem\nprint(calculate_total_riders(df, months))","question":"A city recorded how many people rode the subway each month. How many people in total rode the subway in December and February?","prediction_code":"import pandas as pd\n\ndef calculate_total_riders(df, months):\n    \"\"\"\n    This function takes in a pandas DataFrame of subway ridership and a list of months, and returns the total number of riders for the specified months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of subway riders for each month.\n    The DataFrame should have columns 'Month' and 'Number of riders'.\n    months (list): A list of months for which the total number of riders needs to be calculated.\n    Returns:\n    int: The total number of riders for the specified months.\n    \"\"\"\n    # Filter the DataFrame for the specified months\n    filtered_df = df[df['Month'].isin(months)]\n    \n    # Calculate the total number of riders for the specified months\n    total_riders = filtered_df['Number of riders'].sum()\n    \n    return total_riders","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['November', 'December', 'January', 'February'],\n    'Number of riders': [1183, 1137, 3844, 3778]\n})\n\n# Specify the months for which the total number of riders needs to be calculated\nmonths = ['December', 'February']\n\n# Call the tool to solve the problem\nprint(calculate_total_riders(df, months))","table":"Name: Subway riders\nUnit: people\nContent:\nMonth | Number of riders\nNovember | 1,183\nDecember | 1,137\nJanuary | 3,844\nFebruary | 3,778"}
{"level":6,"answer":4.0,"prediction":"import pandas as pd\n\ndef count_cities_with_35_billboards(df):\n    \"\"\"\n    This function takes in a pandas dataframe of billboards per city, and returns the number of cities that have exactly 35 billboards.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of billboards per city.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of cities that have exactly 35 billboards.\n    \"\"\"\n    # prepare a list to calculate the total number of billboards in each city\n    billboards = []\n    # calculate the total number of billboards in each city\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            billboards.append(stem * 10 + leaf[j])\n    # filter the cities where the total number of billboards is equal to 35\n    filtered = [billboard for billboard in billboards if billboard == 35]\n    # count the number of unique cities\n    num_cities = len(set(filtered))\n    return num_cities\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[2, 5, 6, 8], [1, 2, 5], [2, 5, 5, 5, 5, 7], [0, 1, 2], [0, 5], [3, 6], [3, 8], [0, 8, 9]]\n})\n# Call the tool to solve the problem\nprint(count_cities_with_35_billboards(df))","question":"The advertising agency counted the number of billboards in each city in the state. How many cities have exactly 35 billboards?","prediction_code":"import pandas as pd\n\ndef count_cities_with_35_billboards(df):\n    \"\"\"\n    This function takes in a pandas dataframe of billboards per city, and returns the number of cities that have exactly 35 billboards.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of billboards per city.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of cities that have exactly 35 billboards.\n    \"\"\"\n    # prepare a list to calculate the total number of billboards in each city\n    billboards = []\n    # calculate the total number of billboards in each city\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            billboards.append(stem * 10 + leaf[j])\n    # filter the cities where the total number of billboards is equal to 35\n    filtered = [billboard for billboard in billboards if billboard == 35]\n    # count the number of unique cities\n    num_cities = len(set(filtered))\n    return num_cities","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[2, 5, 6, 8], [1, 2, 5], [2, 5, 5, 5, 5, 7], [0, 1, 2], [0, 5], [3, 6], [3, 8], [0, 8, 9]]\n})\n# Call the tool to solve the problem\nprint(count_cities_with_35_billboards(df))","table":"Name: Billboards per city\nUnit: cities\nContent:\nStem | Leaf \n1 | 2, 5, 6, 8\n2 | 1, 2, 5\n3 | 2, 5, 5, 5, 5, 7\n4 | 0, 1, 2\n5 | 0, 5\n6 | 3, 6\n7 | 3, 8\n8 | 0, 8, 9"}
{"level":7,"answer":17.0,"prediction":"import pandas as pd\n\ndef count_students_with_less_than_63(df):\n    \"\"\"\n    This function takes in a pandas dataframe of pop quiz scores and returns the number of students who scored fewer than 63 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the pop quiz scores.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of students who scored fewer than 63 points.\n    \"\"\"\n    # prepare a list to calculate scores of each student\n    scores = []\n    # calculate the total score of each student\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # filter the students who scored fewer than 63 points\n    filtered = [score for score in scores if score < 63]\n    # count the number of students\n    num_students = len(filtered)\n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[2, 2, 5, 7], [1, 3], [1, 2, 2, 3, 8], [6, 6, 7], [0, 8], [1], [5], [5]]\n})\n# Call the tool to solve the problem\nprint(count_students_with_less_than_63(df))","question":"Professor Harrell released the results of yesterday's pop quiz. How many students scored fewer than 63 points?","prediction_code":"import pandas as pd\n\ndef count_students_with_less_than_63(df):\n    \"\"\"\n    This function takes in a pandas dataframe of pop quiz scores and returns the number of students who scored fewer than 63 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the pop quiz scores.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of students who scored fewer than 63 points.\n    \"\"\"\n    # prepare a list to calculate scores of each student\n    scores = []\n    # calculate the total score of each student\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # filter the students who scored fewer than 63 points\n    filtered = [score for score in scores if score < 63]\n    # count the number of students\n    num_students = len(filtered)\n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[2, 2, 5, 7], [1, 3], [1, 2, 2, 3, 8], [6, 6, 7], [0, 8], [1], [5], [5]]\n})\n# Call the tool to solve the problem\nprint(count_students_with_less_than_63(df))","table":"Name: Pop quiz scores\nUnit: students\nContent:\nStem | Leaf \n1 | 2, 2, 5, 7\n2 | 1, 3\n3 | 1, 2, 2, 3, 8\n4 | 6, 6, 7\n5 | 0, 8\n6 | 1\n7 | 5\n8 | 5"}
{"level":6,"answer":9.0,"prediction":"import pandas as pd\n\ndef count_companies_with_70_to_95_employees(df):\n    \"\"\"\n    This function takes in a pandas dataframe of company sizes and returns the number of companies that have at least 70 employees but less than 96 employees.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of employees per company.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of companies that have at least 70 employees but less than 96 employees.\n    \"\"\"\n    # prepare a list to calculate the number of employees in each company\n    employees = []\n    # calculate the total number of employees in each company\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            employees.append(stem * 10 + leaf[j])\n    # filter the companies where the total number of employees is greater than or equal to 70 and less than 96\n    filtered = [employee for employee in employees if 70 <= employee < 96]\n    # count the number of companies\n    num_companies = len(filtered)\n    return num_companies\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[5, 5, 5, 6, 7, 7, 9], [4, 5, 7], [1, 3, 3, 4], [6], [1], [5, 5, 8, 9], [2, 3, 4, 7], [0]]\n})\n# Call the tool to solve the problem\nprint(count_companies_with_70_to_95_employees(df))","question":"The Norwood Chamber of Commerce researched the number of employees working at local companies. How many companies have at least 70 employees but less than 96 employees?","prediction_code":"import pandas as pd\n\ndef count_companies_with_70_to_95_employees(df):\n    \"\"\"\n    This function takes in a pandas dataframe of company sizes and returns the number of companies that have at least 70 employees but less than 96 employees.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of employees per company.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of companies that have at least 70 employees but less than 96 employees.\n    \"\"\"\n    # prepare a list to calculate the number of employees in each company\n    employees = []\n    # calculate the total number of employees in each company\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            employees.append(stem * 10 + leaf[j])\n    # filter the companies where the total number of employees is greater than or equal to 70 and less than 96\n    filtered = [employee for employee in employees if 70 <= employee < 96]\n    # count the number of companies\n    num_companies = len(filtered)\n    return num_companies","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[5, 5, 5, 6, 7, 7, 9], [4, 5, 7], [1, 3, 3, 4], [6], [1], [5, 5, 8, 9], [2, 3, 4, 7], [0]]\n})\n# Call the tool to solve the problem\nprint(count_companies_with_70_to_95_employees(df))","table":"Name: Company sizes (number of employees)\nUnit: companies\nContent:\nStem | Leaf \n2 | 5, 5, 5, 6, 7, 7, 9\n3 | 4, 5, 7\n4 | 1, 3, 3, 4\n5 | 6\n6 | 1\n7 | 5, 5, 8, 9\n8 | 2, 3, 4, 7\n9 | 0"}
{"level":5,"answer":67.0,"prediction":"import pandas as pd\n\ndef calculate_median_sheep(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of sheep owned by farmers and returns the median number of sheep.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of sheep owned by each farmer.\n    The dataframe should contain \"Farmer\" and \"Number of sheep\" columns.\n    Returns:\n    float: The median number of sheep.\n    \"\"\"\n    # Get the \"Number of sheep\" column as a Series\n    sheep_series = df['Number of sheep']\n    \n    # Calculate the median using pandas\n    median_sheep = sheep_series.median()\n    \n    return median_sheep\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Farmer': ['Farmer Jo', 'Farmer Bob', 'Farmer Betty', 'Farmer Sally', 'Farmer Wendy'],\n    'Number of sheep': [60, 86, 67, 57, 76]\n})\n# Call the tool to solve the problem\nprint(calculate_median_sheep(df))","question":"Some farmers compared how many sheep were in their flocks. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median_sheep(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of sheep owned by farmers and returns the median number of sheep.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of sheep owned by each farmer.\n    The dataframe should contain \"Farmer\" and \"Number of sheep\" columns.\n    Returns:\n    float: The median number of sheep.\n    \"\"\"\n    # Get the \"Number of sheep\" column as a Series\n    sheep_series = df['Number of sheep']\n    \n    # Calculate the median using pandas\n    median_sheep = sheep_series.median()\n    \n    return median_sheep","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Farmer': ['Farmer Jo', 'Farmer Bob', 'Farmer Betty', 'Farmer Sally', 'Farmer Wendy'],\n    'Number of sheep': [60, 86, 67, 57, 76]\n})\n# Call the tool to solve the problem\nprint(calculate_median_sheep(df))","table":"Name: Sheep owned\nUnit: None\nContent:\nFarmer | Number of sheep\nFarmer Jo | 60\nFarmer Bob | 86\nFarmer Betty | 67\nFarmer Sally | 57\nFarmer Wendy | 76"}
{"level":8,"answer":4.0,"prediction":"import pandas as pd\n\ndef count_children_in_weight_range(df, min_weight, max_weight):\n    \"\"\"\n    This function takes in a pandas DataFrame of children's weights and returns the number of children who weighed at least min_weight pounds but less than max_weight pounds.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the weights of children.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_weight (int): The minimum weight (inclusive) in pounds.\n    max_weight (int): The maximum weight (exclusive) in pounds.\n    Returns:\n    int: The number of children who weighed at least min_weight pounds but less than max_weight pounds.\n    \"\"\"\n    # prepare a list to calculate weights of each child\n    weights = []\n    # calculate the weight of each child\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            weights.append(stem * 10 + leaf[j])\n    # filter the children who weighed at least min_weight pounds but less than max_weight pounds\n    filtered = [weight for weight in weights if min_weight <= weight < max_weight]\n    # count the number of children\n    num_children = len(filtered)\n    return num_children\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7],\n    'Leaf': [[1, 2, 3, 9], [1, 3, 4, 4, 4, 5, 6, 9], [6, 7], [8], [5, 7], [0, 2, 5, 5, 6, 8]]\n})\n# Call the tool to solve the problem\nprint(count_children_in_weight_range(df, 20, 30))","question":"Dr. Molina, a pediatrician, weighed all the children who recently visited her office. How many children weighed at least 20 pounds but less than 30 pounds?","prediction_code":"import pandas as pd\n\ndef count_children_in_weight_range(df, min_weight, max_weight):\n    \"\"\"\n    This function takes in a pandas DataFrame of children's weights and returns the number of children who weighed at least min_weight pounds but less than max_weight pounds.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the weights of children.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_weight (int): The minimum weight (inclusive) in pounds.\n    max_weight (int): The maximum weight (exclusive) in pounds.\n    Returns:\n    int: The number of children who weighed at least min_weight pounds but less than max_weight pounds.\n    \"\"\"\n    # prepare a list to calculate weights of each child\n    weights = []\n    # calculate the weight of each child\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            weights.append(stem * 10 + leaf[j])\n    # filter the children who weighed at least min_weight pounds but less than max_weight pounds\n    filtered = [weight for weight in weights if min_weight <= weight < max_weight]\n    # count the number of children\n    num_children = len(filtered)\n    return num_children","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7],\n    'Leaf': [[1, 2, 3, 9], [1, 3, 4, 4, 4, 5, 6, 9], [6, 7], [8], [5, 7], [0, 2, 5, 5, 6, 8]]\n})\n# Call the tool to solve the problem\nprint(count_children_in_weight_range(df, 20, 30))","table":"Name: Children's weights (lbs)\nUnit: children\nContent:\nStem | Leaf \n2 | 1, 2, 3, 9\n3 | 1, 3, 4, 4, 4, 5, 6, 9\n4 | 6, 7\n5 | 8\n6 | 5, 7\n7 | 0, 2, 5, 5, 6, 8"}
{"level":7,"answer":7.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of people interviewed and returns the range of the numbers of people interviewed in the past 7 days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of people interviewed per day.\n    The dataframe should contain \"Day\" and \"Number of people\" columns.\n    Returns:\n    int: The range of the numbers of people interviewed in the past 7 days.\n    \"\"\"\n    # Get the maximum and minimum number of people interviewed\n    max_people = df['Number of people'].max()\n    min_people = df['Number of people'].min()\n    \n    # Calculate the range\n    range_of_people = max_people - min_people\n    \n    return range_of_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Number of people': [3, 4, 7, 4, 10, 9, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"A reporter looked through his notebook to remember how many people he had interviewed in the past 7 days. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of people interviewed and returns the range of the numbers of people interviewed in the past 7 days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of people interviewed per day.\n    The dataframe should contain \"Day\" and \"Number of people\" columns.\n    Returns:\n    int: The range of the numbers of people interviewed in the past 7 days.\n    \"\"\"\n    # Get the maximum and minimum number of people interviewed\n    max_people = df['Number of people'].max()\n    min_people = df['Number of people'].min()\n    \n    # Calculate the range\n    range_of_people = max_people - min_people\n    \n    return range_of_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Number of people': [3, 4, 7, 4, 10, 9, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: People interviewed\nUnit: None\nContent:\nDay | Number of people\nSaturday | 3\nSunday | 4\nMonday | 7\nTuesday | 4\nWednesday | 10\nThursday | 9\nFriday | 8"}
{"level":7,"answer":0.0,"prediction":"import pandas as pd\n\ndef count_people_played_3_times(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of people's playing frequency of miniature golf and returns the number of people who played exactly 3 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the playing frequency data.\n    The dataframe should contain \"Times played\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who played exactly 3 times.\n    \"\"\"\n    # Filter the DataFrame for the row where \"Times played\" is 3\n    row = df[df['Times played'] == 3]\n    \n    # Get the frequency value for that row\n    frequency = row['Frequency'].values[0]\n    \n    return frequency\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Times played': [0, 1, 2, 3, 4],\n    'Frequency': [13, 12, 17, 0, 5]\n})\n# Call the tool to solve the problem\nprint(count_people_played_3_times(df))","question":"The Oak Grove Tourism Office researched how often people played miniature golf last summer. How many people played mini-golf exactly 3 times last summer?","prediction_code":"import pandas as pd\n\ndef count_people_played_3_times(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of people's playing frequency of miniature golf and returns the number of people who played exactly 3 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the playing frequency data.\n    The dataframe should contain \"Times played\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who played exactly 3 times.\n    \"\"\"\n    # Filter the DataFrame for the row where \"Times played\" is 3\n    row = df[df['Times played'] == 3]\n    \n    # Get the frequency value for that row\n    frequency = row['Frequency'].values[0]\n    \n    return frequency","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Times played': [0, 1, 2, 3, 4],\n    'Frequency': [13, 12, 17, 0, 5]\n})\n# Call the tool to solve the problem\nprint(count_people_played_3_times(df))","table":"Name: Playing miniature golf last summer\nUnit: None\nContent:\nTimes played | Frequency\n0 | 13\n1 | 12\n2 | 17\n3 | 0\n4 | 5"}
{"level":8,"answer":5.0,"prediction":"import pandas as pd\n\ndef find_most_common_score(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of scores on a math quiz and returns the score that the greatest number of people received.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the scores and their frequencies.\n    The DataFrame should have columns 'Score' and 'Frequency'.\n    Returns:\n    int: The score that the greatest number of people received.\n    \"\"\"\n    # Find the index of the row with the maximum frequency\n    max_freq_index = df['Frequency'].idxmax()\n    \n    # Get the score at that index\n    most_common_score = df.loc[max_freq_index, 'Score']\n    \n    return most_common_score\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Score': [5, 6, 7, 8, 9, 10],\n    'Frequency': [17, 9, 6, 14, 16, 11]\n})\n# Call the tool to solve the problem\nprint(find_most_common_score(df))","question":"Mr. Blanchard recorded the scores of his students on the most recent math quiz. Which score did the greatest number of people receive?","prediction_code":"import pandas as pd\n\ndef find_most_common_score(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of scores on a math quiz and returns the score that the greatest number of people received.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the scores and their frequencies.\n    The DataFrame should have columns 'Score' and 'Frequency'.\n    Returns:\n    int: The score that the greatest number of people received.\n    \"\"\"\n    # Find the index of the row with the maximum frequency\n    max_freq_index = df['Frequency'].idxmax()\n    \n    # Get the score at that index\n    most_common_score = df.loc[max_freq_index, 'Score']\n    \n    return most_common_score","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Score': [5, 6, 7, 8, 9, 10],\n    'Frequency': [17, 9, 6, 14, 16, 11]\n})\n# Call the tool to solve the problem\nprint(find_most_common_score(df))","table":"Name: Scores on the math quiz\nUnit: None\nContent:\nScore | Frequency\n5 | 17\n6 | 9\n7 | 6\n8 | 14\n9 | 16\n10 | 11"}
{"level":4,"answer":3.0,"prediction":"import pandas as pd\n\ndef count_students_with_40_points(df):\n    \"\"\"\n    This function takes in a pandas dataframe of spelling test scores and returns the number of students who scored exactly 40 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the spelling test scores.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of students who scored exactly 40 points.\n    \"\"\"\n    # prepare a list to store the scores of each student\n    scores = []\n    # calculate the total score for each student\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # count the number of students who scored exactly 40 points\n    num_students = scores.count(40)\n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7],\n    'Leaf': [[0, 6], [0, 2, 6, 8, 9], [0, 0, 0, 2, 4, 5], [4, 7, 7], [9], [1, 3, 5, 9]]\n})\n# Call the tool to solve the problem\nprint(count_students_with_40_points(df))","question":"This morning, Mr. King released the scores from last week's spelling test. How many students scored exactly 40 points?","prediction_code":"import pandas as pd\n\ndef count_students_with_40_points(df):\n    \"\"\"\n    This function takes in a pandas dataframe of spelling test scores and returns the number of students who scored exactly 40 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the spelling test scores.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of students who scored exactly 40 points.\n    \"\"\"\n    # prepare a list to store the scores of each student\n    scores = []\n    # calculate the total score for each student\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # count the number of students who scored exactly 40 points\n    num_students = scores.count(40)\n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7],\n    'Leaf': [[0, 6], [0, 2, 6, 8, 9], [0, 0, 0, 2, 4, 5], [4, 7, 7], [9], [1, 3, 5, 9]]\n})\n# Call the tool to solve the problem\nprint(count_students_with_40_points(df))","table":"Name: Spelling test scores\nUnit: None\nContent:\nStem | Leaf \n2 | 0, 6\n3 | 0, 2, 6, 8, 9\n4 | 0, 0, 0, 2, 4, 5\n5 | 4, 7, 7\n6 | 9\n7 | 1, 3, 5, 9"}
{"level":8,"answer":15.0,"prediction":"import pandas as pd\n\ndef count_jars_with_25_peppermint_candies(df):\n    \"\"\"\n    This function takes in a pandas dataframe of peppermint candies per jar, and returns the number of jars that have at least 25 peppermint candies.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of peppermint candies per jar.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of jars that have at least 25 peppermint candies.\n    \"\"\"\n    # prepare a list to calculate candies in each jar\n    candies = []\n    # calculate the total number of peppermint candies in each jar\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            candies.append(stem * 10 + leaf[j])\n    # filter the jars where the total number of peppermint candies is greater than or equal to 25\n    filtered = [candy for candy in candies if candy >= 25]\n    # count the number of rows\n    num_jars = len(filtered)\n    return num_jars\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5],\n    'Leaf': [[0, 0, 5, 7, 8, 8, 9], [7], [3, 6, 8], [0, 1, 3, 5, 5, 6]]\n})\n# Call the tool to solve the problem\nprint(count_jars_with_25_peppermint_candies(df))","question":"Kelsey, a candy store employee, placed peppermint candies into jars of various sizes. How many jars had at least 25 peppermint candies?","prediction_code":"import pandas as pd\n\ndef count_jars_with_25_peppermint_candies(df):\n    \"\"\"\n    This function takes in a pandas dataframe of peppermint candies per jar, and returns the number of jars that have at least 25 peppermint candies.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of peppermint candies per jar.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of jars that have at least 25 peppermint candies.\n    \"\"\"\n    # prepare a list to calculate candies in each jar\n    candies = []\n    # calculate the total number of peppermint candies in each jar\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            candies.append(stem * 10 + leaf[j])\n    # filter the jars where the total number of peppermint candies is greater than or equal to 25\n    filtered = [candy for candy in candies if candy >= 25]\n    # count the number of rows\n    num_jars = len(filtered)\n    return num_jars","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5],\n    'Leaf': [[0, 0, 5, 7, 8, 8, 9], [7], [3, 6, 8], [0, 1, 3, 5, 5, 6]]\n})\n# Call the tool to solve the problem\nprint(count_jars_with_25_peppermint_candies(df))","table":"Name: Peppermint candies per jar\nUnit: jars\nContent:\nStem | Leaf \n2 | 0, 0, 5, 7, 8, 8, 9\n3 | 7\n4 | 3, 6, 8\n5 | 0, 1, 3, 5, 5, 6"}
{"level":5,"answer":10.0,"prediction":"import pandas as pd\nimport numpy as np\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of swing counts per elementary school and returns the mode of the swing counts.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the swing counts per elementary school.\n    The dataframe should contain \"School\" and \"Number of swings\" columns.\n    Returns:\n    int: The mode of the swing counts.\n    \"\"\"\n    # Get the swing counts column\n    swing_counts = df['Number of swings']\n    \n    # Calculate the mode using numpy\n    mode = np.mode(swing_counts)\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'School': ['Hillside Elementary', 'Newberry Elementary', 'Sierra Elementary', 'Roseville Elementary', 'Canyon Elementary', 'Boyd Elementary', 'Valley Elementary', 'Lincoln Elementary'],\n    'Number of swings': [10, 10, 15, 15, 6, 10, 6, 2]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"The school district compared how many swings each elementary school has. What is the mode of the numbers?","prediction_code":"import pandas as pd\nimport numpy as np\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of swing counts per elementary school and returns the mode of the swing counts.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the swing counts per elementary school.\n    The dataframe should contain \"School\" and \"Number of swings\" columns.\n    Returns:\n    int: The mode of the swing counts.\n    \"\"\"\n    # Get the swing counts column\n    swing_counts = df['Number of swings']\n    \n    # Calculate the mode using numpy\n    mode = np.mode(swing_counts)\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'School': ['Hillside Elementary', 'Newberry Elementary', 'Sierra Elementary', 'Roseville Elementary', 'Canyon Elementary', 'Boyd Elementary', 'Valley Elementary', 'Lincoln Elementary'],\n    'Number of swings': [10, 10, 15, 15, 6, 10, 6, 2]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Swings\nUnit: None\nContent:\nSchool | Number of swings\nHillside Elementary | 10\nNewberry Elementary | 10\nSierra Elementary | 15\nRoseville Elementary | 15\nCanyon Elementary | 6\nBoyd Elementary | 10\nValley Elementary | 6\nLincoln Elementary | 2"}
{"level":6,"answer":12.5,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost for a given item and weight.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price table with columns 'Name' and 'Unit'.\n    item (str): The name of the item.\n    weight (float): The weight of the item in pounds.\n    Returns:\n    float: The total cost for the given item and weight.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    if not item_df.empty:\n        # Extract the unit price from the DataFrame\n        unit_price = item_df['Unit'].values[0]\n        # Calculate the total cost\n        total_cost = unit_price * weight\n        return total_cost\n    else:\n        return None\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['French rolls', 'wheat rolls', 'hot dog buns', 'rye rolls', 'hamburger buns', 'tortillas', 'English muffins'],\n    'Unit': [10, 14, 20, 9, 10, 10, 16]\n})\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'tortillas', 1.25))","question":"What is the total cost for 1+1\/4 pounds of tortillas?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost for a given item and weight.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price table with columns 'Name' and 'Unit'.\n    item (str): The name of the item.\n    weight (float): The weight of the item in pounds.\n    Returns:\n    float: The total cost for the given item and weight.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    if not item_df.empty:\n        # Extract the unit price from the DataFrame\n        unit_price = item_df['Unit'].values[0]\n        # Calculate the total cost\n        total_cost = unit_price * weight\n        return total_cost\n    else:\n        return None","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['French rolls', 'wheat rolls', 'hot dog buns', 'rye rolls', 'hamburger buns', 'tortillas', 'English muffins'],\n    'Unit': [10, 14, 20, 9, 10, 10, 16]\n})\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'tortillas', 1.25))","table":"Name: None\nUnit: $\nContent:\nFrench rolls | $10\/pound\nwheat rolls | $14\/pound\nhot dog buns | $20\/pound\nrye rolls | $9\/pound\nhamburger buns | $10\/pound\ntortillas | $10\/pound\nEnglish muffins | $16\/pound"}
{"level":6,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pizzas made and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of pizzas made.\n    The dataframe should contain \"Day\" and \"Number of pizzas\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the \"Number of pizzas\" column as a Series\n    pizzas_series = df['Number of pizzas']\n    \n    # Calculate the median using pandas\n    median = pizzas_series.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Number of pizzas': [1, 6, 5, 4, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"A pizza chef recalled how many pizzas she had made during the past 5 days. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pizzas made and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of pizzas made.\n    The dataframe should contain \"Day\" and \"Number of pizzas\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the \"Number of pizzas\" column as a Series\n    pizzas_series = df['Number of pizzas']\n    \n    # Calculate the median using pandas\n    median = pizzas_series.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Number of pizzas': [1, 6, 5, 4, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Pizzas made\nUnit: None\nContent:\nDay | Number of pizzas\nFriday | 1\nSaturday | 6\nSunday | 5\nMonday | 4\nTuesday | 5"}
{"level":7,"answer":19.0,"prediction":"import pandas as pd\n\ndef count_people_with_3_trips(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trips to the grocery store last week and returns the number of people who went to the grocery store exactly 3 times.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of trips and their frequencies.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who went to the grocery store exactly 3 times.\n    \"\"\"\n    # Filter the DataFrame for the rows where the number of trips is 3\n    filtered_df = df[df['Number of trips'] == 3]\n    \n    # Get the frequency of people who went to the grocery store exactly 3 times\n    num_people = filtered_df['Frequency'].values[0]\n    \n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [1, 2, 3, 4],\n    'Frequency': [15, 16, 19, 13]\n})\n# Call the tool to solve the problem\nprint(count_people_with_3_trips(df))","question":"A grocery store chain tracked the number of trips people made to its stores last week. How many people went to the grocery store exactly 3 times last week?","prediction_code":"import pandas as pd\n\ndef count_people_with_3_trips(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trips to the grocery store last week and returns the number of people who went to the grocery store exactly 3 times.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of trips and their frequencies.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who went to the grocery store exactly 3 times.\n    \"\"\"\n    # Filter the DataFrame for the rows where the number of trips is 3\n    filtered_df = df[df['Number of trips'] == 3]\n    \n    # Get the frequency of people who went to the grocery store exactly 3 times\n    num_people = filtered_df['Frequency'].values[0]\n    \n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [1, 2, 3, 4],\n    'Frequency': [15, 16, 19, 13]\n})\n# Call the tool to solve the problem\nprint(count_people_with_3_trips(df))","table":"Name: Trips to the grocery store last week\nUnit: None\nContent:\nNumber of trips | Frequency\n1 | 15\n2 | 16\n3 | 19\n4 | 13"}
{"level":8,"answer":87.0,"prediction":"import pandas as pd\n\ndef find_largest_number_of_roses(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of roses per bush and returns the largest number of roses.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of roses per bush.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of roses.\n    \"\"\"\n    # prepare a list to store the number of roses in each bush\n    roses = []\n    # calculate the total number of roses in each bush\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            roses.append(stem * 10 + leaf[j])\n    # find the largest number of roses\n    largest_number_of_roses = max(roses)\n    return largest_number_of_roses\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[7, 9], [0, 4], [2, 2, 6], [4, 6, 9], [8, 8], [1, 2, 3], [7]]\n})\n# Call the tool to solve the problem\nprint(find_largest_number_of_roses(df))","question":"The owner of a plant nursery wrote down the number of roses on each bush. What is the largest number of roses?","prediction_code":"import pandas as pd\n\ndef find_largest_number_of_roses(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of roses per bush and returns the largest number of roses.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of roses per bush.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of roses.\n    \"\"\"\n    # prepare a list to store the number of roses in each bush\n    roses = []\n    # calculate the total number of roses in each bush\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            roses.append(stem * 10 + leaf[j])\n    # find the largest number of roses\n    largest_number_of_roses = max(roses)\n    return largest_number_of_roses","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[7, 9], [0, 4], [2, 2, 6], [4, 6, 9], [8, 8], [1, 2, 3], [7]]\n})\n# Call the tool to solve the problem\nprint(find_largest_number_of_roses(df))","table":"Name: Roses per bush\nUnit: roses\nContent:\nStem | Leaf \n2 | 7, 9\n3 | 0, 4\n4 | 2, 2, 6\n5 | 4, 6, 9\n6 | 8, 8\n7 | 1, 2, 3\n8 | 7"}
{"level":8,"answer":58.0,"prediction":"import pandas as pd\n\ndef find_smallest_number_of_classrooms(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of classrooms per school and returns the smallest number of classrooms.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of classrooms per school.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of classrooms.\n    \"\"\"\n    # Get the values in the \"Stem\" column\n    stem_values = df['Stem'].values\n    \n    # Remove any empty values\n    stem_values = [value for value in stem_values if pd.notnull(value)]\n    \n    # Find the smallest value\n    smallest_number_of_classrooms = min(stem_values)\n    \n    return smallest_number_of_classrooms\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [5, 6, 7, 8, 9],\n    'Leaf': [[8], [7], [], [5, 6, 8], [0]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_classrooms(df))","question":"For a social studies project, Danny counted the number of classrooms in each school in the city. What is the smallest number of classrooms?","prediction_code":"import pandas as pd\n\ndef find_smallest_number_of_classrooms(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of classrooms per school and returns the smallest number of classrooms.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of classrooms per school.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of classrooms.\n    \"\"\"\n    # Get the values in the \"Stem\" column\n    stem_values = df['Stem'].values\n    \n    # Remove any empty values\n    stem_values = [value for value in stem_values if pd.notnull(value)]\n    \n    # Find the smallest value\n    smallest_number_of_classrooms = min(stem_values)\n    \n    return smallest_number_of_classrooms","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [5, 6, 7, 8, 9],\n    'Leaf': [[8], [7], [], [5, 6, 8], [0]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_classrooms(df))","table":"Name: Classrooms per school\nUnit: classrooms\nContent:\nStem | Leaf \n5 | 8\n6 | 7\n7 | \n8 | 5, 6, 8\n9 | 0"}
{"level":7,"answer":33.0,"prediction":"import pandas as pd\n\ndef count_students_less_than_8(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of scores on a math quiz and returns the number of students who scored less than 8.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the scores and frequencies of each score.\n    The DataFrame should have columns 'Score' and 'Frequency'.\n    Returns:\n    int: The number of students who scored less than 8.\n    \"\"\"\n    # Filter the DataFrame for scores less than 8\n    filtered_df = df[df['Score'] < 8]\n    \n    # Calculate the total number of students who scored less than 8\n    num_students = filtered_df['Frequency'].sum()\n    \n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Score': [5, 6, 7, 8, 9, 10],\n    'Frequency': [1, 14, 18, 12, 20, 11]\n})\n# Call the tool to solve the problem\nprint(count_students_less_than_8(df))","question":"Mr. Carey recorded the scores of his students on the most recent math quiz. How many students scored less than 8?","prediction_code":"import pandas as pd\n\ndef count_students_less_than_8(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of scores on a math quiz and returns the number of students who scored less than 8.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the scores and frequencies of each score.\n    The DataFrame should have columns 'Score' and 'Frequency'.\n    Returns:\n    int: The number of students who scored less than 8.\n    \"\"\"\n    # Filter the DataFrame for scores less than 8\n    filtered_df = df[df['Score'] < 8]\n    \n    # Calculate the total number of students who scored less than 8\n    num_students = filtered_df['Frequency'].sum()\n    \n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Score': [5, 6, 7, 8, 9, 10],\n    'Frequency': [1, 14, 18, 12, 20, 11]\n})\n# Call the tool to solve the problem\nprint(count_students_less_than_8(df))","table":"Name: Scores on the math quiz\nUnit: None\nContent:\nScore | Frequency\n5 | 1\n6 | 14\n7 | 18\n8 | 12\n9 | 20\n10 | 11"}
{"level":8,"answer":6.0,"prediction":"import pandas as pd\n\ndef count_people_with_exact_frequency(df, frequency):\n    \"\"\"\n    This function takes in a pandas DataFrame of swimming frequency and returns the number of people who went swimming exactly a certain number of times.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of times people went swimming and their corresponding frequencies.\n    The DataFrame should contain \"Number of times\" and \"Frequency\" columns.\n    frequency (int): The number of times people went swimming to count.\n    Returns:\n    int: The number of people who went swimming exactly the specified number of times.\n    \"\"\"\n    # Filter the DataFrame for the specified frequency\n    filtered_df = df[df['Number of times'] == frequency]\n    \n    # Get the frequency count for the specified frequency\n    count = filtered_df['Frequency'].values[0]\n    \n    return count\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of times': [1, 2, 3, 4, 5, 6],\n    'Frequency': [8, 14, 0, 9, 7, 6]\n})\n# Call the tool to solve the problem\nprint(count_people_with_exact_frequency(df, 6))","question":"Stamford will decide whether to extend its public pool's hours by looking at the number of times its residents visited the pool last month. How many people went swimming exactly 6 times last month?","prediction_code":"import pandas as pd\n\ndef count_people_with_exact_frequency(df, frequency):\n    \"\"\"\n    This function takes in a pandas DataFrame of swimming frequency and returns the number of people who went swimming exactly a certain number of times.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of times people went swimming and their corresponding frequencies.\n    The DataFrame should contain \"Number of times\" and \"Frequency\" columns.\n    frequency (int): The number of times people went swimming to count.\n    Returns:\n    int: The number of people who went swimming exactly the specified number of times.\n    \"\"\"\n    # Filter the DataFrame for the specified frequency\n    filtered_df = df[df['Number of times'] == frequency]\n    \n    # Get the frequency count for the specified frequency\n    count = filtered_df['Frequency'].values[0]\n    \n    return count","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of times': [1, 2, 3, 4, 5, 6],\n    'Frequency': [8, 14, 0, 9, 7, 6]\n})\n# Call the tool to solve the problem\nprint(count_people_with_exact_frequency(df, 6))","table":"Name: Going swimming last month\nUnit: None\nContent:\nNumber of times | Frequency\n1 | 8\n2 | 14\n3 | 0\n4 | 9\n5 | 7\n6 | 6"}
{"level":7,"answer":1.0,"prediction":"import pandas as pd\n\ndef calculate_mean_hours(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of hours worked per day and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of hours worked per day.\n    The dataframe should contain \"Day\" and \"Hours\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Hours\" column\n    mean_hours = df['Hours'].mean()\n    \n    return mean_hours\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Hours': [1, 1, 3, 2, 0, 0, 0]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_hours(df))","question":"Raymond looked at his calendar to see how many hours he had worked in the past 7 days. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean_hours(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of hours worked per day and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of hours worked per day.\n    The dataframe should contain \"Day\" and \"Hours\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Hours\" column\n    mean_hours = df['Hours'].mean()\n    \n    return mean_hours","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Hours': [1, 1, 3, 2, 0, 0, 0]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_hours(df))","table":"Name: Hours worked\nUnit: None\nContent:\nDay | Hours\nFriday | 1\nSaturday | 1\nSunday | 3\nMonday | 2\nTuesday | 0\nWednesday | 0\nThursday | 0"}
{"level":3,"answer":120.0,"prediction":"import pandas as pd\n\ndef compare_town_populations(df, town1, town2):\n    \"\"\"\n    This function takes in a pandas DataFrame of town populations and two town names, and returns the difference in population between the two towns.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing town populations with columns 'Town' and 'Population'.\n    town1 (str): The name of the first town.\n    town2 (str): The name of the second town.\n    Returns:\n    int: The difference in population between the two towns.\n    \"\"\"\n    # Filter the DataFrame for the two towns\n    town1_df = df[df['Town'] == town1]\n    town2_df = df[df['Town'] == town2]\n    \n    # Get the population values for the two towns\n    town1_pop = town1_df['Population'].values[0]\n    town2_pop = town2_df['Population'].values[0]\n    \n    # Calculate the difference in population\n    population_diff = town1_pop - town2_pop\n    \n    return population_diff\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Town': ['Hilly Town', 'Lake City', 'Valley Falls', 'Flat Plains', 'River Town'],\n    'Population': [879, 583, 227, 454, 759]\n})\n# Call the tool to solve the problem\nprint(compare_town_populations(df, 'Hilly Town', 'River Town'))","question":"After a census, 5 nearby towns compared their populations. How many more people live in Hilly Town than in River Town?","prediction_code":"import pandas as pd\n\ndef compare_town_populations(df, town1, town2):\n    \"\"\"\n    This function takes in a pandas DataFrame of town populations and two town names, and returns the difference in population between the two towns.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing town populations with columns 'Town' and 'Population'.\n    town1 (str): The name of the first town.\n    town2 (str): The name of the second town.\n    Returns:\n    int: The difference in population between the two towns.\n    \"\"\"\n    # Filter the DataFrame for the two towns\n    town1_df = df[df['Town'] == town1]\n    town2_df = df[df['Town'] == town2]\n    \n    # Get the population values for the two towns\n    town1_pop = town1_df['Population'].values[0]\n    town2_pop = town2_df['Population'].values[0]\n    \n    # Calculate the difference in population\n    population_diff = town1_pop - town2_pop\n    \n    return population_diff","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Town': ['Hilly Town', 'Lake City', 'Valley Falls', 'Flat Plains', 'River Town'],\n    'Population': [879, 583, 227, 454, 759]\n})\n# Call the tool to solve the problem\nprint(compare_town_populations(df, 'Hilly Town', 'River Town'))","table":"Name: Town populations\nUnit: people\nContent:\nTown | Population\nHilly Town | 879\nLake City | 583\nValley Falls | 227\nFlat Plains | 454\nRiver Town | 759"}
{"level":5,"answer":2.0,"prediction":"import pandas as pd\n\ndef count_committees_with_24_members(df):\n    \"\"\"\n    This function takes in a pandas dataframe of committee sizes and returns the number of committees that have exactly 24 members.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the sizes of committees.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of committees that have exactly 24 members.\n    \"\"\"\n    # prepare a list to store the sizes of committees\n    committee_sizes = []\n    \n    # iterate through the dataframe and extract the sizes of committees\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            committee_sizes.append(stem * 10 + leaf[j])\n    \n    # count the number of committees with exactly 24 members\n    num_committees = committee_sizes.count(24)\n    \n    return num_committees\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[4, 6, 9], [8], [0, 3, 4, 4, 5], [0, 9], [3, 3, 8, 9], [], [0, 6], [0, 2, 8], [5]]\n})\n# Call the tool to solve the problem\nprint(count_committees_with_24_members(df))","question":"While writing a paper on making decisions in groups, Deion researched the size of a number of committees. How many committees have exactly 24 members?","prediction_code":"import pandas as pd\n\ndef count_committees_with_24_members(df):\n    \"\"\"\n    This function takes in a pandas dataframe of committee sizes and returns the number of committees that have exactly 24 members.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the sizes of committees.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of committees that have exactly 24 members.\n    \"\"\"\n    # prepare a list to store the sizes of committees\n    committee_sizes = []\n    \n    # iterate through the dataframe and extract the sizes of committees\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            committee_sizes.append(stem * 10 + leaf[j])\n    \n    # count the number of committees with exactly 24 members\n    num_committees = committee_sizes.count(24)\n    \n    return num_committees","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[4, 6, 9], [8], [0, 3, 4, 4, 5], [0, 9], [3, 3, 8, 9], [], [0, 6], [0, 2, 8], [5]]\n})\n# Call the tool to solve the problem\nprint(count_committees_with_24_members(df))","table":"Name: Committee sizes (number of members)\nUnit: committees\nContent:\nStem | Leaf \n0 | 4, 6, 9\n1 | 8\n2 | 0, 3, 4, 4, 5\n3 | 0, 9\n4 | 3, 3, 8, 9\n5 | \n6 | 0, 6\n7 | 0, 2, 8\n8 | 5"}
{"level":7,"answer":23.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(table, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to be purchased.\n    It returns the total cost of the items.\n    Args:\n    table (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = table[table['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['frying pan', 'baking dish', 'casserole dish', 'cookie jar', 'rolling pin'],\n    'Price': [48, 10, 13, 13, 15]\n})\n\n# Define the items to be purchased\nitems = ['baking dish', 'cookie jar']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Hannah need to buy a baking dish and a cookie jar?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(table, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to be purchased.\n    It returns the total cost of the items.\n    Args:\n    table (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = table[table['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['frying pan', 'baking dish', 'casserole dish', 'cookie jar', 'rolling pin'],\n    'Price': [48, 10, 13, 13, 15]\n})\n\n# Define the items to be purchased\nitems = ['baking dish', 'cookie jar']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nfrying pan | $48\nbaking dish | $10\ncasserole dish | $13\ncookie jar | $13\nrolling pin | $15"}
{"level":6,"answer":14.0,"prediction":"import pandas as pd\n\ndef find_smallest_number_of_cars(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of cars per parking lot and returns the smallest number of cars.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of cars per parking lot.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of cars.\n    \"\"\"\n    # prepare a list to store the number of cars in each parking lot\n    cars = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # if the leaf column is empty, add the stem value to the cars list\n        if pd.isnull(leaf):\n            cars.append(stem)\n        else:\n            # if the leaf column is not empty, add each value in the leaf column to the cars list\n            for j in range(len(leaf)):\n                cars.append(stem * 10 + leaf[j])\n    # find the smallest number of cars\n    smallest_number_of_cars = min(cars)\n    return smallest_number_of_cars\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [4, 2, [1, 4, 4, 7], [0, 1], 7, [0, 1, 2], [], 9]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_cars(df))","question":"In a study on public parking, the director of transportation counted the number of cars in each of the city's parking lots. What is the smallest number of cars?","prediction_code":"import pandas as pd\n\ndef find_smallest_number_of_cars(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of cars per parking lot and returns the smallest number of cars.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of cars per parking lot.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of cars.\n    \"\"\"\n    # prepare a list to store the number of cars in each parking lot\n    cars = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # if the leaf column is empty, add the stem value to the cars list\n        if pd.isnull(leaf):\n            cars.append(stem)\n        else:\n            # if the leaf column is not empty, add each value in the leaf column to the cars list\n            for j in range(len(leaf)):\n                cars.append(stem * 10 + leaf[j])\n    # find the smallest number of cars\n    smallest_number_of_cars = min(cars)\n    return smallest_number_of_cars","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [4, 2, [1, 4, 4, 7], [0, 1], 7, [0, 1, 2], [], 9]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_cars(df))","table":"Name: Cars per parking lot\nUnit: cars\nContent:\nStem | Leaf \n1 | 4\n2 | 2\n3 | 1, 4, 4, 7\n4 | 0, 1\n5 | 7\n6 | 0, 1, 2\n7 | \n8 | 9"}
{"level":8,"answer":18.0,"prediction":"import pandas as pd\n\ndef count_buildings_with_fewer_bricks(df, threshold):\n    \"\"\"\n    This function takes in a pandas dataframe of bricks per building and a threshold, and returns the number of buildings that have fewer than the threshold number of bricks.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of bricks per building.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    threshold (int): The threshold number of bricks.\n    Returns:\n    int: The number of buildings that have fewer than the threshold number of bricks.\n    \"\"\"\n    # prepare a list to calculate the number of bricks in each building\n    bricks = []\n    # calculate the total number of bricks in each building\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            bricks.append(stem * 10 + leaf[j])\n    # filter the buildings where the total number of bricks is less than the threshold\n    filtered = [brick for brick in bricks if brick < threshold]\n    # count the number of buildings\n    num_buildings = len(filtered)\n    return num_buildings\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[6], [0, 1, 1, 3, 6], [1, 3, 4, 9], [0, 7, 8], [3, 5], [], [6], [6], [0]]\n})\n# Set the threshold\nthreshold = 94\n# Call the tool to solve the problem\nprint(count_buildings_with_fewer_bricks(df, threshold))","question":"The architecture student counted the number of bricks in each building in her neighborhood. How many buildings have fewer than 94 bricks?","prediction_code":"import pandas as pd\n\ndef count_buildings_with_fewer_bricks(df, threshold):\n    \"\"\"\n    This function takes in a pandas dataframe of bricks per building and a threshold, and returns the number of buildings that have fewer than the threshold number of bricks.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of bricks per building.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    threshold (int): The threshold number of bricks.\n    Returns:\n    int: The number of buildings that have fewer than the threshold number of bricks.\n    \"\"\"\n    # prepare a list to calculate the number of bricks in each building\n    bricks = []\n    # calculate the total number of bricks in each building\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            bricks.append(stem * 10 + leaf[j])\n    # filter the buildings where the total number of bricks is less than the threshold\n    filtered = [brick for brick in bricks if brick < threshold]\n    # count the number of buildings\n    num_buildings = len(filtered)\n    return num_buildings","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[6], [0, 1, 1, 3, 6], [1, 3, 4, 9], [0, 7, 8], [3, 5], [], [6], [6], [0]]\n})\n# Set the threshold\nthreshold = 94\n# Call the tool to solve the problem\nprint(count_buildings_with_fewer_bricks(df, threshold))","table":"Name: Bricks per building\nUnit: buildings\nContent:\nStem | Leaf \n1 | 6\n2 | 0, 1, 1, 3, 6\n3 | 1, 3, 4, 9\n4 | 0, 7, 8\n5 | 3, 5\n6 | \n7 | 6\n8 | 6\n9 | 0"}
{"level":3,"answer":3721.0,"prediction":"import pandas as pd\n\ndef calculate_total_copies_sold(df, months):\n    \"\"\"\n    This function takes in a pandas DataFrame of magazine sales figures and a list of months, and returns the total number of copies sold in the specified months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the sales figures with columns 'Month' and 'Number of magazines'.\n    months (list): A list of months for which the total number of copies sold needs to be calculated.\n    Returns:\n    int: The total number of copies sold in the specified months.\n    \"\"\"\n    # Filter the DataFrame for the specified months\n    filtered_df = df[df['Month'].isin(months)]\n    \n    # Calculate the total number of copies sold in the specified months\n    total_copies_sold = filtered_df['Number of magazines'].sum()\n    \n    return total_copies_sold\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['April', 'May', 'June'],\n    'Number of magazines': [5478, 2512, 1209]\n})\n\n# Specify the months for which the total number of copies sold needs to be calculated\nmonths = ['May', 'June']\n\n# Call the tool to solve the problem\nprint(calculate_total_copies_sold(df, months))","question":"A magazine editor looked at her sales figures for the past 3 months. How many copies in total were sold in May and June?","prediction_code":"import pandas as pd\n\ndef calculate_total_copies_sold(df, months):\n    \"\"\"\n    This function takes in a pandas DataFrame of magazine sales figures and a list of months, and returns the total number of copies sold in the specified months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the sales figures with columns 'Month' and 'Number of magazines'.\n    months (list): A list of months for which the total number of copies sold needs to be calculated.\n    Returns:\n    int: The total number of copies sold in the specified months.\n    \"\"\"\n    # Filter the DataFrame for the specified months\n    filtered_df = df[df['Month'].isin(months)]\n    \n    # Calculate the total number of copies sold in the specified months\n    total_copies_sold = filtered_df['Number of magazines'].sum()\n    \n    return total_copies_sold","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['April', 'May', 'June'],\n    'Number of magazines': [5478, 2512, 1209]\n})\n\n# Specify the months for which the total number of copies sold needs to be calculated\nmonths = ['May', 'June']\n\n# Call the tool to solve the problem\nprint(calculate_total_copies_sold(df, months))","table":"Name: Magazines sold\nUnit: copies\nContent:\nMonth | Number of magazines\nApril | 5,478\nMay | 2,512\nJune | 1,209"}
{"level":8,"answer":4.35,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of a specific item based on its price per pound and the quantity purchased.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices per pound with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item purchased in pounds.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price per pound of the item\n        price_per_pound = item_df['Price'].values[0]\n        \n        # Calculate the total cost of the item\n        total_cost = price_per_pound * quantity\n        \n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['kidney beans', 'soybeans', 'lentils', 'garbanzo beans', 'mung beans'],\n    'Price': [1.38, 2.33, 1.86, 1.14, 1.45]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'mung beans', 3))","question":"Colleen bought 3 pounds of mung beans. How much did she spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of a specific item based on its price per pound and the quantity purchased.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices per pound with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item purchased in pounds.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price per pound of the item\n        price_per_pound = item_df['Price'].values[0]\n        \n        # Calculate the total cost of the item\n        total_cost = price_per_pound * quantity\n        \n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['kidney beans', 'soybeans', 'lentils', 'garbanzo beans', 'mung beans'],\n    'Price': [1.38, 2.33, 1.86, 1.14, 1.45]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'mung beans', 3))","table":"Name: None\nUnit: $\nContent:\nkidney beans | $1.38 per pound\nsoybeans | $2.33 per pound\nlentils | $1.86 per pound\ngarbanzo beans | $1.14 per pound\nmung beans | $1.45 per pound"}
{"level":8,"answer":4.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, month1, month2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average waiting times at the DMV and two months, and returns the rate of change between the two months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average waiting times at the DMV with columns 'Month' and 'Waiting time (minutes)'.\n    month1 (str): The first month for calculating the rate of change.\n    month2 (str): The second month for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two months.\n    \"\"\"\n    # Filter the DataFrame for the two months\n    month1_df = df[df['Month'] == month1]\n    month2_df = df[df['Month'] == month2]\n    \n    # Get the waiting times for the two months\n    waiting_time1 = month1_df['Waiting time (minutes)'].values[0]\n    waiting_time2 = month2_df['Waiting time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (waiting_time2 - waiting_time1) \/ waiting_time1\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['April', 'May', 'June', 'July', 'August'],\n    'Waiting time (minutes)': [26, 21, 29, 17, 21]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'July', 'August'))","question":"An administrator at the Department of Motor Vehicles (DMV) tracked the average wait time from month to month. According to the table, what was the rate of change between July and August?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, month1, month2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average waiting times at the DMV and two months, and returns the rate of change between the two months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average waiting times at the DMV with columns 'Month' and 'Waiting time (minutes)'.\n    month1 (str): The first month for calculating the rate of change.\n    month2 (str): The second month for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two months.\n    \"\"\"\n    # Filter the DataFrame for the two months\n    month1_df = df[df['Month'] == month1]\n    month2_df = df[df['Month'] == month2]\n    \n    # Get the waiting times for the two months\n    waiting_time1 = month1_df['Waiting time (minutes)'].values[0]\n    waiting_time2 = month2_df['Waiting time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (waiting_time2 - waiting_time1) \/ waiting_time1\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['April', 'May', 'June', 'July', 'August'],\n    'Waiting time (minutes)': [26, 21, 29, 17, 21]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'July', 'August'))","table":"Name: Average waiting time at the DMV\nUnit: minutes per month\nContent:\nMonth | Waiting time (minutes)\nApril | 26\nMay | 21\nJune | 29\nJuly | 17\nAugust | 21"}
{"level":1,"answer":25.0,"prediction":"import pandas as pd\n\ndef calculate_scarves_in_closets(df, num_closets):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of scarves in each closet and the number of closets, and returns the total number of scarves in the given number of closets.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of closets and the number of scarves in each closet.\n    The DataFrame should have columns 'Number of closets' and 'Number of scarves'.\n    num_closets (int): The number of closets to calculate the total number of scarves for.\n    Returns:\n    int: The total number of scarves in the given number of closets.\n    \"\"\"\n    # Filter the DataFrame for the given number of closets\n    filtered_df = df[df['Number of closets'] <= num_closets]\n    \n    # Calculate the total number of scarves in the filtered closets\n    total_scarves = filtered_df['Number of scarves'].sum()\n    \n    return total_scarves\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of closets': [1, 2, 3, 4, 5],\n    'Number of scarves': [5, 10, 15, 20, None]\n})\n\n# Call the tool to solve the problem\nprint(calculate_scarves_in_closets(df, 5))","question":"Each closet has 5 scarves. How many scarves are in 5 closets?","prediction_code":"import pandas as pd\n\ndef calculate_scarves_in_closets(df, num_closets):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of scarves in each closet and the number of closets, and returns the total number of scarves in the given number of closets.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of closets and the number of scarves in each closet.\n    The DataFrame should have columns 'Number of closets' and 'Number of scarves'.\n    num_closets (int): The number of closets to calculate the total number of scarves for.\n    Returns:\n    int: The total number of scarves in the given number of closets.\n    \"\"\"\n    # Filter the DataFrame for the given number of closets\n    filtered_df = df[df['Number of closets'] <= num_closets]\n    \n    # Calculate the total number of scarves in the filtered closets\n    total_scarves = filtered_df['Number of scarves'].sum()\n    \n    return total_scarves","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of closets': [1, 2, 3, 4, 5],\n    'Number of scarves': [5, 10, 15, 20, None]\n})\n\n# Call the tool to solve the problem\nprint(calculate_scarves_in_closets(df, 5))","table":"Name: None\nUnit: scarves\nContent:\nNumber of closets | Number of scarves\n1 | 5\n2 | 10\n3 | 15\n4 | 20\n5 | ?"}
{"level":7,"answer":31.0,"prediction":"import pandas as pd\n\ndef count_students_less_than_4(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of number guesses and their frequencies, and returns the number of students who guessed a number less than 4.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number guesses and their frequencies.\n    The DataFrame should contain \"Number guessed\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who guessed a number less than 4.\n    \"\"\"\n    # Filter the DataFrame for number guesses less than 4\n    filtered_df = df[df['Number guessed'] < 4]\n    \n    # Calculate the total number of students who guessed a number less than 4\n    num_students = filtered_df['Frequency'].sum()\n    \n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number guessed': [1, 2, 3, 4, 5],\n    'Frequency': [14, 0, 17, 4, 16]\n})\n# Call the tool to solve the problem\nprint(count_students_less_than_4(df))","question":"During a lesson on graphing data, students in Mrs. Maddie's math class guessed a number between 1 and 5 and recorded the results. How many students guessed a number less than 4?","prediction_code":"import pandas as pd\n\ndef count_students_less_than_4(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of number guesses and their frequencies, and returns the number of students who guessed a number less than 4.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number guesses and their frequencies.\n    The DataFrame should contain \"Number guessed\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who guessed a number less than 4.\n    \"\"\"\n    # Filter the DataFrame for number guesses less than 4\n    filtered_df = df[df['Number guessed'] < 4]\n    \n    # Calculate the total number of students who guessed a number less than 4\n    num_students = filtered_df['Frequency'].sum()\n    \n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number guessed': [1, 2, 3, 4, 5],\n    'Frequency': [14, 0, 17, 4, 16]\n})\n# Call the tool to solve the problem\nprint(count_students_less_than_4(df))","table":"Name: Guessing a number between 1 and 5\nUnit: None\nContent:\nNumber guessed | Frequency\n1 | 14\n2 | 0\n3 | 17\n4 | 4\n5 | 16"}
{"level":6,"answer":6.0,"prediction":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of bags of popcorn sold and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of bags of popcorn sold.\n    The DataFrame should have \"Day\" and \"Number of bags of popcorn\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean using pandas\n    mean = df['Number of bags of popcorn'].mean()\n    \n    return mean\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday'],\n    'Number of bags of popcorn': [3, 4, 6, 8, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","question":"A concession stand worker at the movie theater looked up how many bags of popcorn were sold in the past 5 days. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of bags of popcorn sold and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of bags of popcorn sold.\n    The DataFrame should have \"Day\" and \"Number of bags of popcorn\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean using pandas\n    mean = df['Number of bags of popcorn'].mean()\n    \n    return mean","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday'],\n    'Number of bags of popcorn': [3, 4, 6, 8, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","table":"Name: Bags of popcorn sold\nUnit: None\nContent:\nDay | Number of bags of popcorn\nThursday | 3\nFriday | 4\nSaturday | 6\nSunday | 8\nMonday | 9"}
{"level":7,"answer":3260.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    item (str): The name of the item to calculate the cost for.\n    quantity (int): The number of items to calculate the cost for.\n    Returns:\n    float: The total cost of the specified item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['ruby bracelet', 'garnet pendant', 'gold ring', 'pearl necklace', 'diamond pendant'],\n    'Price': [576, 982, 652, 611, 531]\n})\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'gold ring', 5))","question":"How much money does Brenna need to buy 5 gold rings?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    item (str): The name of the item to calculate the cost for.\n    quantity (int): The number of items to calculate the cost for.\n    Returns:\n    float: The total cost of the specified item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['ruby bracelet', 'garnet pendant', 'gold ring', 'pearl necklace', 'diamond pendant'],\n    'Price': [576, 982, 652, 611, 531]\n})\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'gold ring', 5))","table":"Name: None\nUnit: $\nContent:\nruby bracelet | $576\ngarnet pendant | $982\ngold ring | $652\npearl necklace | $611\ndiamond pendant | $531"}
{"level":5,"answer":19.0,"prediction":"import pandas as pd\n\ndef calculate_range(df, name):\n    \"\"\"\n    This function takes in a pandas DataFrame of books read and a name, and returns the range of the numbers of books read by that person's classmates.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the names and numbers of books read.\n    name (str): The name of the person whose classmates' book numbers are being considered.\n    Returns:\n    int: The range of the numbers of books read by the person's classmates.\n    \"\"\"\n    # Filter the DataFrame for the specific person\n    person_df = df[df['Name'] == name]\n    \n    # Get the number of books read by the person's classmates\n    classmates_books = df[df['Name'] != name]['Number of books']\n    \n    # Calculate the range\n    book_range = classmates_books.max() - classmates_books.min()\n    \n    return book_range\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Jeanette', 'Shivani', 'Martha', 'Paula', 'Cara', 'Larry', 'Natalie', 'Alexandra'],\n    'Number of books': [30, 49, 35, 41, 35, 49, 36, 42]\n})\n\n# Call the tool to solve the problem\nprint(calculate_range(df, 'Jeanette'))","question":"Jeanette's classmates recorded how many books they read last year. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df, name):\n    \"\"\"\n    This function takes in a pandas DataFrame of books read and a name, and returns the range of the numbers of books read by that person's classmates.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the names and numbers of books read.\n    name (str): The name of the person whose classmates' book numbers are being considered.\n    Returns:\n    int: The range of the numbers of books read by the person's classmates.\n    \"\"\"\n    # Filter the DataFrame for the specific person\n    person_df = df[df['Name'] == name]\n    \n    # Get the number of books read by the person's classmates\n    classmates_books = df[df['Name'] != name]['Number of books']\n    \n    # Calculate the range\n    book_range = classmates_books.max() - classmates_books.min()\n    \n    return book_range","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Jeanette', 'Shivani', 'Martha', 'Paula', 'Cara', 'Larry', 'Natalie', 'Alexandra'],\n    'Number of books': [30, 49, 35, 41, 35, 49, 36, 42]\n})\n\n# Call the tool to solve the problem\nprint(calculate_range(df, 'Jeanette'))","table":"Name: Books read\nUnit: None\nContent:\nName | Number of books\nJeanette | 30\nShivani | 49\nMartha | 35\nPaula | 41\nCara | 35\nLarry | 49\nNatalie | 36\nAlexandra | 42"}
{"level":7,"answer":3.0,"prediction":"import pandas as pd\n\ndef count_buildings_with_90_bricks(df):\n    \"\"\"\n    This function takes in a pandas dataframe of bricks per building, and returns the number of buildings that have exactly 90 bricks.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of bricks per building.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of buildings that have exactly 90 bricks.\n    \"\"\"\n    # prepare a list to calculate the number of bricks in each building\n    bricks = []\n    # calculate the total number of bricks in each building\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            bricks.append(stem * 10 + leaf[j])\n    # filter the buildings where the total number of bricks is equal to 90\n    filtered = [brick for brick in bricks if brick == 90]\n    # count the number of buildings\n    num_buildings = len(filtered)\n    return num_buildings\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [5, 6, 7, 8, 9],\n    'Leaf': [[2, 4, 5], [5], [3, 4], [], [0, 0, 0]]\n})\n# Call the tool to solve the problem\nprint(count_buildings_with_90_bricks(df))","question":"The architecture student counted the number of bricks in each building in her neighborhood. How many buildings have exactly 90 bricks?","prediction_code":"import pandas as pd\n\ndef count_buildings_with_90_bricks(df):\n    \"\"\"\n    This function takes in a pandas dataframe of bricks per building, and returns the number of buildings that have exactly 90 bricks.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of bricks per building.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of buildings that have exactly 90 bricks.\n    \"\"\"\n    # prepare a list to calculate the number of bricks in each building\n    bricks = []\n    # calculate the total number of bricks in each building\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            bricks.append(stem * 10 + leaf[j])\n    # filter the buildings where the total number of bricks is equal to 90\n    filtered = [brick for brick in bricks if brick == 90]\n    # count the number of buildings\n    num_buildings = len(filtered)\n    return num_buildings","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [5, 6, 7, 8, 9],\n    'Leaf': [[2, 4, 5], [5], [3, 4], [], [0, 0, 0]]\n})\n# Call the tool to solve the problem\nprint(count_buildings_with_90_bricks(df))","table":"Name: Bricks per building\nUnit: buildings\nContent:\nStem | Leaf \n5 | 2, 4, 5\n6 | 5\n7 | 3, 4\n8 | \n9 | 0, 0, 0"}
{"level":1,"answer":30.0,"prediction":"import pandas as pd\n\ndef calculate_total_frogs(df, num_aquariums):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of frogs per aquarium and the number of aquariums, and returns the total number of frogs.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of frogs per aquarium with columns 'Number of aquariums' and 'Number of frogs'.\n    num_aquariums (int): The number of aquariums.\n    Returns:\n    int: The total number of frogs.\n    \"\"\"\n    # Filter the DataFrame for the given number of aquariums\n    filtered_df = df[df['Number of aquariums'] == num_aquariums]\n    \n    # Get the number of frogs from the filtered DataFrame\n    num_frogs = filtered_df['Number of frogs'].values[0]\n    \n    return num_frogs\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of aquariums': [1, 2, 3, 4, 5, 6],\n    'Number of frogs': [5, 10, 15, 20, 25, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_frogs(df, 6))","question":"Each aquarium has 5 frogs. How many frogs are in 6 aquariums?","prediction_code":"import pandas as pd\n\ndef calculate_total_frogs(df, num_aquariums):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of frogs per aquarium and the number of aquariums, and returns the total number of frogs.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of frogs per aquarium with columns 'Number of aquariums' and 'Number of frogs'.\n    num_aquariums (int): The number of aquariums.\n    Returns:\n    int: The total number of frogs.\n    \"\"\"\n    # Filter the DataFrame for the given number of aquariums\n    filtered_df = df[df['Number of aquariums'] == num_aquariums]\n    \n    # Get the number of frogs from the filtered DataFrame\n    num_frogs = filtered_df['Number of frogs'].values[0]\n    \n    return num_frogs","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of aquariums': [1, 2, 3, 4, 5, 6],\n    'Number of frogs': [5, 10, 15, 20, 25, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_frogs(df, 6))","table":"Name: None\nUnit: frogs\nContent:\nNumber of aquariums | Number of frogs\n1 | 5\n2 | 10\n3 | 15\n4 | 20\n5 | 25\n6 | ?"}
{"level":7,"answer":8.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of students receiving scholarships and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of students receiving scholarships per year.\n    The dataframe should contain \"Year\" and \"Students\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_students = df[df['Year'] == start_year]['Students'].values[0]\n    end_students = df[df['Year'] == end_year]['Students'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_students - start_students) \/ start_students * 100\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2008, 2009, 2010, 2011, 2012],\n    'Students': [42, 43, 41, 49, 48]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2010, 2011))","question":"The financial aid office at Carter University produced an internal report on the number of students receiving scholarships. According to the table, what was the rate of change between 2010 and 2011?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of students receiving scholarships and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of students receiving scholarships per year.\n    The dataframe should contain \"Year\" and \"Students\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_students = df[df['Year'] == start_year]['Students'].values[0]\n    end_students = df[df['Year'] == end_year]['Students'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_students - start_students) \/ start_students * 100\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2008, 2009, 2010, 2011, 2012],\n    'Students': [42, 43, 41, 49, 48]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2010, 2011))","table":"Name: Students receiving scholarships\nUnit: students per year\nContent:\nYear | Students\n2008 | 42\n2009 | 43\n2010 | 41\n2011 | 49\n2012 | 48"}
{"level":6,"answer":7.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pet ownership and returns the median number of pets.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the names and number of pets for each student.\n    The DataFrame should have columns 'Name' and 'Number of pets'.\n    Returns:\n    float: The median number of pets.\n    \"\"\"\n    # Get the column of number of pets\n    pets_column = df['Number of pets']\n    \n    # Calculate the median using pandas\n    median = pets_column.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Melissa', 'Reid', 'Nathan', 'Pete', 'Emma'],\n    'Number of pets': [3, 6, 10, 7, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"Some students compared how many pets they have. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pet ownership and returns the median number of pets.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the names and number of pets for each student.\n    The DataFrame should have columns 'Name' and 'Number of pets'.\n    Returns:\n    float: The median number of pets.\n    \"\"\"\n    # Get the column of number of pets\n    pets_column = df['Number of pets']\n    \n    # Calculate the median using pandas\n    median = pets_column.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Melissa', 'Reid', 'Nathan', 'Pete', 'Emma'],\n    'Number of pets': [3, 6, 10, 7, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Pets\nUnit: None\nContent:\nName | Number of pets\nMelissa | 3\nReid | 6\nNathan | 10\nPete | 7\nEmma | 9"}
{"level":7,"answer":31.0,"prediction":"import pandas as pd\n\ndef count_authors_with_at_least_3_stories(df):\n    \"\"\"\n    This function takes in a pandas dataframe of stories written by authors and returns the number of authors who wrote at least 3 stories.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of stories written by each author.\n    The dataframe should contain \"Stories written\" and \"Frequency\" columns.\n    Returns:\n    int: The number of authors who wrote at least 3 stories.\n    \"\"\"\n    # Filter the dataframe for authors who wrote at least 3 stories\n    filtered_df = df[df['Stories written'] >= 3]\n    \n    # Count the number of authors\n    num_authors = len(filtered_df)\n    \n    return num_authors\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stories written': [1, 2, 3, 4, 5],\n    'Frequency': [4, 15, 2, 11, 18]\n})\n# Call the tool to solve the problem\nprint(count_authors_with_at_least_3_stories(df))","question":"A publisher invited authors to write stories for a special anthology. How many authors wrote at least 3 stories?","prediction_code":"import pandas as pd\n\ndef count_authors_with_at_least_3_stories(df):\n    \"\"\"\n    This function takes in a pandas dataframe of stories written by authors and returns the number of authors who wrote at least 3 stories.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of stories written by each author.\n    The dataframe should contain \"Stories written\" and \"Frequency\" columns.\n    Returns:\n    int: The number of authors who wrote at least 3 stories.\n    \"\"\"\n    # Filter the dataframe for authors who wrote at least 3 stories\n    filtered_df = df[df['Stories written'] >= 3]\n    \n    # Count the number of authors\n    num_authors = len(filtered_df)\n    \n    return num_authors","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stories written': [1, 2, 3, 4, 5],\n    'Frequency': [4, 15, 2, 11, 18]\n})\n# Call the tool to solve the problem\nprint(count_authors_with_at_least_3_stories(df))","table":"Name: Writing stories\nUnit: None\nContent:\nStories written | Frequency\n1 | 4\n2 | 15\n3 | 2\n4 | 11\n5 | 18"}
{"level":6,"answer":17.0,"prediction":"import pandas as pd\n\ndef count_countries_with_20_to_60_athletes(df):\n    \"\"\"\n    This function takes in a pandas dataframe of athletes per country, and returns the number of countries that have at least 20 athletes but fewer than 60 athletes.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of athletes per country.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of countries that have at least 20 athletes but fewer than 60 athletes.\n    \"\"\"\n    # prepare a list to calculate the number of athletes in each country\n    athletes = []\n    # calculate the total number of athletes in each country\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            athletes.append(stem * 10 + leaf[j])\n    # filter the countries where the total number of athletes is greater than or equal to 20 and less than 60\n    filtered = [athlete for athlete in athletes if 20 <= athlete < 60]\n    # count the number of unique countries\n    num_countries = len(set(filtered))\n    return num_countries\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6],\n    'Leaf': [[2, 6], [1, 3, 3, 8], [0, 1, 1, 6, 6, 8, 8], [0, 2, 3, 7], [0, 1, 2, 4, 5, 5, 7, 7]]\n})\n# Call the tool to solve the problem\nprint(count_countries_with_20_to_60_athletes(df))","question":"While doing a project for P. E. class, Aaliyah researched the number of athletes competing in an international sporting event. How many countries have at least 20 athletes but fewer than 60 athletes?","prediction_code":"import pandas as pd\n\ndef count_countries_with_20_to_60_athletes(df):\n    \"\"\"\n    This function takes in a pandas dataframe of athletes per country, and returns the number of countries that have at least 20 athletes but fewer than 60 athletes.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of athletes per country.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of countries that have at least 20 athletes but fewer than 60 athletes.\n    \"\"\"\n    # prepare a list to calculate the number of athletes in each country\n    athletes = []\n    # calculate the total number of athletes in each country\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            athletes.append(stem * 10 + leaf[j])\n    # filter the countries where the total number of athletes is greater than or equal to 20 and less than 60\n    filtered = [athlete for athlete in athletes if 20 <= athlete < 60]\n    # count the number of unique countries\n    num_countries = len(set(filtered))\n    return num_countries","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6],\n    'Leaf': [[2, 6], [1, 3, 3, 8], [0, 1, 1, 6, 6, 8, 8], [0, 2, 3, 7], [0, 1, 2, 4, 5, 5, 7, 7]]\n})\n# Call the tool to solve the problem\nprint(count_countries_with_20_to_60_athletes(df))","table":"Name: Athletes per country\nUnit: countries\nContent:\nStem | Leaf \n2 | 2, 6\n3 | 1, 3, 3, 8\n4 | 0, 1, 1, 6, 6, 8, 8\n5 | 0, 2, 3, 7\n6 | 0, 1, 2, 4, 5, 5, 7, 7"}
{"level":5,"answer":63.0,"prediction":"import pandas as pd\n\ndef calculate_mean_laps(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of swimming laps and returns the mean of the lap numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and lap numbers of the swimmers.\n    The dataframe should contain \"Name\" and \"Laps\" columns.\n    Returns:\n    float: The mean of the lap numbers.\n    \"\"\"\n    # Calculate the mean of the lap numbers\n    mean_laps = df['Laps'].mean()\n    \n    return mean_laps\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Tommy', 'Daniel', 'Nellie', 'Santiago', 'Kelsey', 'Celine', 'Linda', 'Rudy'],\n    'Laps': [64, 70, 58, 66, 60, 65, 61, 60]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_laps(df))","question":"The members of the swimming team compared how many laps they swam yesterday. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean_laps(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of swimming laps and returns the mean of the lap numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and lap numbers of the swimmers.\n    The dataframe should contain \"Name\" and \"Laps\" columns.\n    Returns:\n    float: The mean of the lap numbers.\n    \"\"\"\n    # Calculate the mean of the lap numbers\n    mean_laps = df['Laps'].mean()\n    \n    return mean_laps","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Tommy', 'Daniel', 'Nellie', 'Santiago', 'Kelsey', 'Celine', 'Linda', 'Rudy'],\n    'Laps': [64, 70, 58, 66, 60, 65, 61, 60]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_laps(df))","table":"Name: Swimming laps\nUnit: None\nContent:\nName | Laps\nTommy | 64\nDaniel | 70\nNellie | 58\nSantiago | 66\nKelsey | 60\nCeline | 65\nLinda | 61\nRudy | 60"}
{"level":5,"answer":6.23,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price list and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['package of note cards', 'box of crayons', 'yellow highlighter', 'ink pad', 'box of envelopes'],\n    'Price': [1.06, 2.92, 2.31, 3.92, 1.69]\n})\n\n# Define the items to be purchased\nitems = ['yellow highlighter', 'ink pad']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Brianna need to buy a yellow highlighter and an ink pad?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price list and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['package of note cards', 'box of crayons', 'yellow highlighter', 'ink pad', 'box of envelopes'],\n    'Price': [1.06, 2.92, 2.31, 3.92, 1.69]\n})\n\n# Define the items to be purchased\nitems = ['yellow highlighter', 'ink pad']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\npackage of note cards | $1.06\nbox of crayons | $2.92\nyellow highlighter | $2.31\nink pad | $3.92\nbox of envelopes | $1.69"}
{"level":7,"answer":3.0,"prediction":"import pandas as pd\n\ndef count_students_with_less_than_30_points(df):\n    \"\"\"\n    This function takes in a pandas dataframe of quiz scores and returns the number of students who scored fewer than 30 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the quiz scores.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of students who scored fewer than 30 points.\n    \"\"\"\n    # prepare a list to calculate scores of each student\n    scores = []\n    # calculate the total score of each student\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # filter the students who scored fewer than 30 points\n    filtered = [score for score in scores if score < 30]\n    # count the number of students\n    num_students = len(filtered)\n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[4, 5, 5], [], [2, 7], [6, 7]]\n})\n# Call the tool to solve the problem\nprint(count_students_with_less_than_30_points(df))","question":"Ms. Baldwin reported her students' scores on the most recent quiz. How many students scored fewer than 30 points?","prediction_code":"import pandas as pd\n\ndef count_students_with_less_than_30_points(df):\n    \"\"\"\n    This function takes in a pandas dataframe of quiz scores and returns the number of students who scored fewer than 30 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the quiz scores.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of students who scored fewer than 30 points.\n    \"\"\"\n    # prepare a list to calculate scores of each student\n    scores = []\n    # calculate the total score of each student\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # filter the students who scored fewer than 30 points\n    filtered = [score for score in scores if score < 30]\n    # count the number of students\n    num_students = len(filtered)\n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[4, 5, 5], [], [2, 7], [6, 7]]\n})\n# Call the tool to solve the problem\nprint(count_students_with_less_than_30_points(df))","table":"Name: Quiz scores\nUnit: students\nContent:\nStem | Leaf \n1 | 4, 5, 5\n2 | \n3 | 2, 7\n4 | 6, 7"}
{"level":7,"answer":5.0,"prediction":"import pandas as pd\n\ndef count_books_with_pages(df):\n    \"\"\"\n    This function takes in a pandas dataframe of pages per book, and returns the number of books that have at least 70 pages but less than 90 pages.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pages per book.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of books that have at least 70 pages but less than 90 pages.\n    \"\"\"\n    # prepare a list to calculate pages in each book\n    pages = []\n    # calculate the total number of pages in each book\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            pages.append(stem * 10 + leaf[j])\n    # filter the books where the total number of pages is greater than or equal to 70 and less than 90\n    filtered = [page for page in pages if page >= 70 and page < 90]\n    # count the number of books\n    num_books = len(filtered)\n    return num_books\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [5, 6, 7, 8, 9],\n    'Leaf': [[2, 2, 6, 7, 8], [0, 0, 1, 3, 5], [3, 3, 4, 9], [7], [0]]\n})\n# Call the tool to solve the problem\nprint(count_books_with_pages(df))","question":"Donald counted the pages in each book on his English class's required reading list. How many books had at least 70 pages but less than 90 pages?","prediction_code":"import pandas as pd\n\ndef count_books_with_pages(df):\n    \"\"\"\n    This function takes in a pandas dataframe of pages per book, and returns the number of books that have at least 70 pages but less than 90 pages.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pages per book.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of books that have at least 70 pages but less than 90 pages.\n    \"\"\"\n    # prepare a list to calculate pages in each book\n    pages = []\n    # calculate the total number of pages in each book\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            pages.append(stem * 10 + leaf[j])\n    # filter the books where the total number of pages is greater than or equal to 70 and less than 90\n    filtered = [page for page in pages if page >= 70 and page < 90]\n    # count the number of books\n    num_books = len(filtered)\n    return num_books","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [5, 6, 7, 8, 9],\n    'Leaf': [[2, 2, 6, 7, 8], [0, 0, 1, 3, 5], [3, 3, 4, 9], [7], [0]]\n})\n# Call the tool to solve the problem\nprint(count_books_with_pages(df))","table":"Name: Pages per book\nUnit: books\nContent:\nStem | Leaf \n5 | 2, 2, 6, 7, 8\n6 | 0, 0, 1, 3, 5\n7 | 3, 3, 4, 9\n8 | 7\n9 | 0"}
{"level":6,"answer":16.0,"prediction":"import pandas as pd\n\ndef count_shipments_with_50_broken_tiles(df):\n    \"\"\"\n    This function takes in a pandas dataframe of broken tiles per shipment, and returns the number of shipments that have at least 50 broken tiles.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken tiles per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of shipments that have at least 50 broken tiles.\n    \"\"\"\n    # prepare a list to calculate broken tiles in each shipment\n    tiles = []\n    # calculate the total number of broken tiles in each shipment\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            tiles.append(stem * 10 + leaf[j])\n    # filter the shipments where the total number of broken tiles is greater than or equal to 50\n    filtered = [tile for tile in tiles if tile >= 50]\n    # count the number of shipments\n    num_shipments = len(filtered)\n    return num_shipments\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7, 8, 9],\n    'Leaf': [[1, 2, 3, 4, 4, 5, 6], [2, 3, 5], [0, 7, 9], [1, 3, 9], [3, 4, 4, 7, 8, 9], [0]]\n})\n# Call the tool to solve the problem\nprint(count_shipments_with_50_broken_tiles(df))","question":"Hillsdale Flooring tracked the number of broken tiles in each shipment it received last year. How many shipments had at least 50 broken tiles?","prediction_code":"import pandas as pd\n\ndef count_shipments_with_50_broken_tiles(df):\n    \"\"\"\n    This function takes in a pandas dataframe of broken tiles per shipment, and returns the number of shipments that have at least 50 broken tiles.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken tiles per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of shipments that have at least 50 broken tiles.\n    \"\"\"\n    # prepare a list to calculate broken tiles in each shipment\n    tiles = []\n    # calculate the total number of broken tiles in each shipment\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            tiles.append(stem * 10 + leaf[j])\n    # filter the shipments where the total number of broken tiles is greater than or equal to 50\n    filtered = [tile for tile in tiles if tile >= 50]\n    # count the number of shipments\n    num_shipments = len(filtered)\n    return num_shipments","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7, 8, 9],\n    'Leaf': [[1, 2, 3, 4, 4, 5, 6], [2, 3, 5], [0, 7, 9], [1, 3, 9], [3, 4, 4, 7, 8, 9], [0]]\n})\n# Call the tool to solve the problem\nprint(count_shipments_with_50_broken_tiles(df))","table":"Name: Broken tiles per shipment\nUnit: shipments\nContent:\nStem | Leaf \n4 | 1, 2, 3, 4, 4, 5, 6\n5 | 2, 3, 5\n6 | 0, 7, 9\n7 | 1, 3, 9\n8 | 3, 4, 4, 7, 8, 9\n9 | 0"}
{"level":5,"answer":14.0,"prediction":"import pandas as pd\n\ndef calculate_mean_wind_speed(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of daily wind speeds and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the daily wind speeds.\n    The DataFrame should have a \"Day\" column and a \"Wind speed (miles per hour)\" column.\n    Returns:\n    float: The mean of the daily wind speeds.\n    \"\"\"\n    # Calculate the mean of the \"Wind speed (miles per hour)\" column\n    mean_wind_speed = df[\"Wind speed (miles per hour)\"].mean()\n    \n    return mean_wind_speed\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Wind speed (miles per hour)': [18, 19, 9, 13, 11]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_wind_speed(df))","question":"Eduardo tracked the maximum daily wind speed for 5 days. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean_wind_speed(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of daily wind speeds and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the daily wind speeds.\n    The DataFrame should have a \"Day\" column and a \"Wind speed (miles per hour)\" column.\n    Returns:\n    float: The mean of the daily wind speeds.\n    \"\"\"\n    # Calculate the mean of the \"Wind speed (miles per hour)\" column\n    mean_wind_speed = df[\"Wind speed (miles per hour)\"].mean()\n    \n    return mean_wind_speed","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Wind speed (miles per hour)': [18, 19, 9, 13, 11]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_wind_speed(df))","table":"Name: Daily wind speed\nUnit: None\nContent:\nDay | Wind speed (miles per hour)\nTuesday | 18\nWednesday | 19\nThursday | 9\nFriday | 13\nSaturday | 11"}
{"level":7,"answer":48.0,"prediction":"import pandas as pd\n\ndef count_students(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pairs of boots and returns the total number of students.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pairs of boots and their frequencies.\n    The dataframe should contain \"Number of pairs of boots\" and \"Frequency\" columns.\n    Returns:\n    int: The total number of students.\n    \"\"\"\n    # Calculate the total number of students by summing the frequencies\n    total_students = df['Frequency'].sum()\n    \n    return total_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of pairs of boots': [0, 1, 2, 3, 4],\n    'Frequency': [2, 20, 7, 14, 5]\n})\n# Call the tool to solve the problem\nprint(count_students(df))","question":"Some students compared how many pairs of boots they own. How many students are there in all?","prediction_code":"import pandas as pd\n\ndef count_students(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pairs of boots and returns the total number of students.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pairs of boots and their frequencies.\n    The dataframe should contain \"Number of pairs of boots\" and \"Frequency\" columns.\n    Returns:\n    int: The total number of students.\n    \"\"\"\n    # Calculate the total number of students by summing the frequencies\n    total_students = df['Frequency'].sum()\n    \n    return total_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of pairs of boots': [0, 1, 2, 3, 4],\n    'Frequency': [2, 20, 7, 14, 5]\n})\n# Call the tool to solve the problem\nprint(count_students(df))","table":"Name: Pairs of boots\nUnit: None\nContent:\nNumber of pairs of boots | Frequency\n0 | 2\n1 | 20\n2 | 7\n3 | 14\n4 | 5"}
{"level":7,"answer":19.0,"prediction":"import pandas as pd\n\ndef count_people_played_more_than_2_times(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the frequency of playing miniature golf and returns the number of people who played mini-golf more than 2 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the frequency of playing miniature golf.\n    The dataframe should contain \"Times played\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who played mini-golf more than 2 times.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of times played is greater than 2\n    filtered_df = df[df['Times played'] > 2]\n    \n    # Calculate the total frequency of people who played mini-golf more than 2 times\n    total_frequency = filtered_df['Frequency'].sum()\n    \n    return total_frequency\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Times played': [0, 1, 2, 3],\n    'Frequency': [17, 18, 14, 19]\n})\n# Call the tool to solve the problem\nprint(count_people_played_more_than_2_times(df))","question":"The Somerville Tourism Office researched how often people played miniature golf last summer. How many people played mini-golf more than 2 times?","prediction_code":"import pandas as pd\n\ndef count_people_played_more_than_2_times(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the frequency of playing miniature golf and returns the number of people who played mini-golf more than 2 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the frequency of playing miniature golf.\n    The dataframe should contain \"Times played\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who played mini-golf more than 2 times.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of times played is greater than 2\n    filtered_df = df[df['Times played'] > 2]\n    \n    # Calculate the total frequency of people who played mini-golf more than 2 times\n    total_frequency = filtered_df['Frequency'].sum()\n    \n    return total_frequency","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Times played': [0, 1, 2, 3],\n    'Frequency': [17, 18, 14, 19]\n})\n# Call the tool to solve the problem\nprint(count_people_played_more_than_2_times(df))","table":"Name: Playing miniature golf last summer\nUnit: None\nContent:\nTimes played | Frequency\n0 | 17\n1 | 18\n2 | 14\n3 | 19"}
{"level":1,"answer":50.0,"prediction":"import pandas as pd\n\ndef calculate_total_stores(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of grocery stores in each town and returns the total number of grocery stores in 5 towns.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of grocery stores in each town.\n    The DataFrame should have columns 'Number of towns' and 'Number of grocery stores'.\n    Returns:\n    int: The total number of grocery stores in 5 towns.\n    \"\"\"\n    # Get the number of grocery stores in each town\n    stores_per_town = df['Number of grocery stores'].values\n    \n    # Calculate the total number of grocery stores in 5 towns\n    total_stores = sum(stores_per_town) * 5\n    \n    return total_stores\n########################################\nimport pandas as pd\n\ndef calculate_total_stores(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of grocery stores in each town and returns the total number of grocery stores in 5 towns.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of grocery stores in each town.\n    The DataFrame should have columns 'Number of towns' and 'Number of grocery stores'.\n    Returns:\n    int: The total number of grocery stores in 5 towns.\n    \"\"\"\n    # Get the number of grocery stores in each town\n    stores_per_town = df['Number of grocery stores'].values\n    \n    # Calculate the total number of grocery stores in 5 towns\n    total_stores = sum(stores_per_town) * 5\n    \n    return total_stores\n\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of towns': [1, 2, 3, 4, 5],\n    'Number of grocery stores': [10, 20, 30, 40, None]\n})\n\n# Call the tool to solve the problem\ntotal_stores = calculate_total_stores(df)\n\n# Print out the answer\nprint(total_stores)","question":"Each town has 10 grocery stores. How many grocery stores are in 5 towns?","prediction_code":"import pandas as pd\n\ndef calculate_total_stores(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of grocery stores in each town and returns the total number of grocery stores in 5 towns.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of grocery stores in each town.\n    The DataFrame should have columns 'Number of towns' and 'Number of grocery stores'.\n    Returns:\n    int: The total number of grocery stores in 5 towns.\n    \"\"\"\n    # Get the number of grocery stores in each town\n    stores_per_town = df['Number of grocery stores'].values\n    \n    # Calculate the total number of grocery stores in 5 towns\n    total_stores = sum(stores_per_town) * 5\n    \n    return total_stores","prediction_call":"import pandas as pd\n\ndef calculate_total_stores(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of grocery stores in each town and returns the total number of grocery stores in 5 towns.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of grocery stores in each town.\n    The DataFrame should have columns 'Number of towns' and 'Number of grocery stores'.\n    Returns:\n    int: The total number of grocery stores in 5 towns.\n    \"\"\"\n    # Get the number of grocery stores in each town\n    stores_per_town = df['Number of grocery stores'].values\n    \n    # Calculate the total number of grocery stores in 5 towns\n    total_stores = sum(stores_per_town) * 5\n    \n    return total_stores\n\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of towns': [1, 2, 3, 4, 5],\n    'Number of grocery stores': [10, 20, 30, 40, None]\n})\n\n# Call the tool to solve the problem\ntotal_stores = calculate_total_stores(df)\n\n# Print out the answer\nprint(total_stores)","table":"Name: None\nUnit: grocery stores\nContent:\nNumber of towns | Number of grocery stores\n1 | 10\n2 | 20\n3 | 30\n4 | 40\n5 | ?"}
{"level":6,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of grocery stores in each town and returns the mean of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of grocery stores in each town.\n    The dataframe should contain \"Town\" and \"Number of stores\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Number of stores\" column\n    mean = df['Number of stores'].mean()\n    \n    return mean\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Town': ['Marion', 'Greenwood', 'Mayfield', 'Columbia', 'Chesterton', 'Riverside', 'Springfield', 'Watertown'],\n    'Number of stores': [4, 4, 3, 6, 6, 6, 2, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","question":"A newspaper researched how many grocery stores there are in each town. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of grocery stores in each town and returns the mean of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of grocery stores in each town.\n    The dataframe should contain \"Town\" and \"Number of stores\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Number of stores\" column\n    mean = df['Number of stores'].mean()\n    \n    return mean","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Town': ['Marion', 'Greenwood', 'Mayfield', 'Columbia', 'Chesterton', 'Riverside', 'Springfield', 'Watertown'],\n    'Number of stores': [4, 4, 3, 6, 6, 6, 2, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","table":"Name: Grocery stores in each town\nUnit: None\nContent:\nTown | Number of stores\nMarion | 4\nGreenwood | 4\nMayfield | 3\nColumbia | 6\nChesterton | 6\nRiverside | 6\nSpringfield | 2\nWatertown | 9"}
{"level":6,"answer":14.4,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its price per pound and the quantity purchased.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per pound for each item with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item purchased in pounds.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price per pound for the item\n        price_per_lb = item_df['Price'].values[0]\n        \n        # Calculate the total cost\n        total_cost = price_per_lb * quantity\n        \n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['balsamic vinaigrette', 'Thousand Island dressing', 'blue cheese dressing', 'Italian dressing', 'ranch dressing'],\n    'Price': [6, 7, 6, 3, 4]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'ranch dressing', 3.6))","question":"Erin bought 3.6 pounds of ranch dressing. How much did she spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its price per pound and the quantity purchased.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per pound for each item with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item purchased in pounds.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price per pound for the item\n        price_per_lb = item_df['Price'].values[0]\n        \n        # Calculate the total cost\n        total_cost = price_per_lb * quantity\n        \n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['balsamic vinaigrette', 'Thousand Island dressing', 'blue cheese dressing', 'Italian dressing', 'ranch dressing'],\n    'Price': [6, 7, 6, 3, 4]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'ranch dressing', 3.6))","table":"Name: None\nUnit: $\nContent:\nbalsamic vinaigrette | $6 per lb\nThousand Island dressing | $7 per lb\nblue cheese dressing | $6 per lb\nItalian dressing | $3 per lb\nranch dressing | $4 per lb"}
{"level":7,"answer":9.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of flower plants and returns the range of the numbers of flowers planted.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of flowers planted per day.\n    The dataframe should contain \"Day\" and \"Number of flowers\" columns.\n    Returns:\n    int: The range of the numbers of flowers planted.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of flowers\" column\n    min_flowers = df['Number of flowers'].min()\n    max_flowers = df['Number of flowers'].max()\n    \n    # Calculate the range\n    flower_range = max_flowers - min_flowers\n    \n    return flower_range\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday'],\n    'Number of flowers': [10, 4, 4, 5, 2, 6, 1]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"Tommy paid attention to how many flowers he planted in the garden during the past 7 days. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of flower plants and returns the range of the numbers of flowers planted.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of flowers planted per day.\n    The dataframe should contain \"Day\" and \"Number of flowers\" columns.\n    Returns:\n    int: The range of the numbers of flowers planted.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of flowers\" column\n    min_flowers = df['Number of flowers'].min()\n    max_flowers = df['Number of flowers'].max()\n    \n    # Calculate the range\n    flower_range = max_flowers - min_flowers\n    \n    return flower_range","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday'],\n    'Number of flowers': [10, 4, 4, 5, 2, 6, 1]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Flowers plants\nUnit: None\nContent:\nDay | Number of flowers\nTuesday | 10\nWednesday | 4\nThursday | 4\nFriday | 5\nSaturday | 2\nSunday | 6\nMonday | 1"}
{"level":8,"answer":8.0,"prediction":"import pandas as pd\n\ndef count_people_with_fewer_than_2_pictures(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of pictures painted by each person and returns the number of people who painted fewer than 2 pictures.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of pictures painted by each person.\n    The DataFrame should contain \"Pictures painted\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who painted fewer than 2 pictures.\n    \"\"\"\n    # Filter the DataFrame for people who painted fewer than 2 pictures\n    filtered_df = df[df['Pictures painted'] < 2]\n    \n    # Calculate the total number of people who painted fewer than 2 pictures\n    num_people = filtered_df['Frequency'].sum()\n    \n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Pictures painted': [0, 1, 2, 3],\n    'Frequency': [8, 0, 14, 1]\n})\n# Call the tool to solve the problem\nprint(count_people_with_fewer_than_2_pictures(df))","question":"An art instructor kept track of how many total pictures were painted by each of the people enrolled in his class. How many people painted fewer than 2 pictures?","prediction_code":"import pandas as pd\n\ndef count_people_with_fewer_than_2_pictures(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of pictures painted by each person and returns the number of people who painted fewer than 2 pictures.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of pictures painted by each person.\n    The DataFrame should contain \"Pictures painted\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who painted fewer than 2 pictures.\n    \"\"\"\n    # Filter the DataFrame for people who painted fewer than 2 pictures\n    filtered_df = df[df['Pictures painted'] < 2]\n    \n    # Calculate the total number of people who painted fewer than 2 pictures\n    num_people = filtered_df['Frequency'].sum()\n    \n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Pictures painted': [0, 1, 2, 3],\n    'Frequency': [8, 0, 14, 1]\n})\n# Call the tool to solve the problem\nprint(count_people_with_fewer_than_2_pictures(df))","table":"Name: Painting pictures\nUnit: None\nContent:\nPictures painted | Frequency\n0 | 8\n1 | 0\n2 | 14\n3 | 1"}
{"level":7,"answer":4218.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of items, and returns the total cost of the items using pandas.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (dict): A dictionary where the keys are item names and the values are the number of items to buy.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item, quantity in items.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['laptop computer', 'MP3 player', 'video game system', 'cell phone', 'stereo speaker', 'digital camera'],\n    'Price': [533.00, 433.00, 430.00, 270.00, 108.00, 937.00]\n})\n\n# Initialize the items dictionary\nitems = {\n    'MP3 player': 6,\n    'cell phone': 6\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Ann need to buy 6 MP3 player and 6 cell phones?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of items, and returns the total cost of the items using pandas.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (dict): A dictionary where the keys are item names and the values are the number of items to buy.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item, quantity in items.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['laptop computer', 'MP3 player', 'video game system', 'cell phone', 'stereo speaker', 'digital camera'],\n    'Price': [533.00, 433.00, 430.00, 270.00, 108.00, 937.00]\n})\n\n# Initialize the items dictionary\nitems = {\n    'MP3 player': 6,\n    'cell phone': 6\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nlaptop computer | $533.00\nMP3 player | $433.00\nvideo game system | $430.00\ncell phone | $270.00\nstereo speaker | $108.00\ndigital camera | $937.00"}
{"level":5,"answer":2.0,"prediction":"import pandas as pd\n\ndef calculate_pizza_revenue_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pizza sales and calculates the difference in revenue between Pizza, Pasta and More and Arnold's Pizzeria.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the pizza sales data.\n    The DataFrame should have columns 'Restaurant', 'Pepperoni pizzas', and 'Supreme pizzas'.\n    Returns:\n    float: The difference in revenue between Pizza, Pasta and More and Arnold's Pizzeria.\n    \"\"\"\n    # Filter the DataFrame for Pizza, Pasta and More and Arnold's Pizzeria\n    pizza_pasta_df = df[df['Restaurant'] == 'Pizza, Pasta and More']\n    arnolds_df = df[df['Restaurant'] == \"Arnold's Pizzeria\"]\n    \n    # Get the revenue for pepperoni pizzas and supreme pizzas for each restaurant\n    pizza_pasta_revenue = pizza_pasta_df['Pepperoni pizzas'].values[0] + pizza_pasta_df['Supreme pizzas'].values[0]\n    arnolds_revenue = arnolds_df['Pepperoni pizzas'].values[0] + arnolds_df['Supreme pizzas'].values[0]\n    \n    # Calculate the difference in revenue\n    revenue_difference = pizza_pasta_revenue - arnolds_revenue\n    \n    return revenue_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Restaurant': ['Pizza, Pasta and More', 'Pizza Italia', \"Arnold's Pizzeria\"],\n    'Pepperoni pizzas': [11, 16, 8],\n    'Supreme pizzas': [8, 16, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_pizza_revenue_difference(df))","question":"A food industry researcher compiled the revenues of several pizzerias. How much more did Pizza, Pasta and More make from pizzas than Arnold's Pizzeria?","prediction_code":"import pandas as pd\n\ndef calculate_pizza_revenue_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pizza sales and calculates the difference in revenue between Pizza, Pasta and More and Arnold's Pizzeria.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the pizza sales data.\n    The DataFrame should have columns 'Restaurant', 'Pepperoni pizzas', and 'Supreme pizzas'.\n    Returns:\n    float: The difference in revenue between Pizza, Pasta and More and Arnold's Pizzeria.\n    \"\"\"\n    # Filter the DataFrame for Pizza, Pasta and More and Arnold's Pizzeria\n    pizza_pasta_df = df[df['Restaurant'] == 'Pizza, Pasta and More']\n    arnolds_df = df[df['Restaurant'] == \"Arnold's Pizzeria\"]\n    \n    # Get the revenue for pepperoni pizzas and supreme pizzas for each restaurant\n    pizza_pasta_revenue = pizza_pasta_df['Pepperoni pizzas'].values[0] + pizza_pasta_df['Supreme pizzas'].values[0]\n    arnolds_revenue = arnolds_df['Pepperoni pizzas'].values[0] + arnolds_df['Supreme pizzas'].values[0]\n    \n    # Calculate the difference in revenue\n    revenue_difference = pizza_pasta_revenue - arnolds_revenue\n    \n    return revenue_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Restaurant': ['Pizza, Pasta and More', 'Pizza Italia', \"Arnold's Pizzeria\"],\n    'Pepperoni pizzas': [11, 16, 8],\n    'Supreme pizzas': [8, 16, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_pizza_revenue_difference(df))","table":"Name: Pizza sales\nUnit: $\nContent:\nRestaurant | Pepperoni pizzas | Supreme pizzas\nPizza, Pasta and More | $11 | $8\nPizza Italia | $16 | $16\nArnold's Pizzeria | $8 | $9"}
{"level":7,"answer":6.81,"prediction":"import pandas as pd\n\ndef calculate_total_cost(menu_df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the menu items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = menu_df[menu_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n\ndef calculate_total_cost(menu_df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the menu items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = menu_df[menu_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['cheeseburger', 'hamburger', 'bowl of tomato soup', 'ice cream cone'],\n    'Price': [4.67, 2.59, 4.62, 2.14]\n})\n\n# Initialize the orders dictionary\norders = {\n    'cheeseburger': 1,\n    'ice cream cone': 1\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","question":"How much money does Florence need to buy an ice cream cone and a cheeseburger?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(menu_df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the menu items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = menu_df[menu_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n\ndef calculate_total_cost(menu_df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the menu items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = menu_df[menu_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['cheeseburger', 'hamburger', 'bowl of tomato soup', 'ice cream cone'],\n    'Price': [4.67, 2.59, 4.62, 2.14]\n})\n\n# Initialize the orders dictionary\norders = {\n    'cheeseburger': 1,\n    'ice cream cone': 1\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","table":"Name: None\nUnit: $\nContent:\ncheeseburger | $4.67\nhamburger | $2.59\nbowl of tomato soup | $4.62\nice cream cone | $2.14"}
{"level":5,"answer":23.0,"prediction":"import pandas as pd\n\ndef count_votes(df, sport):\n    \"\"\"\n    This function takes in a pandas DataFrame of favorite sports and a specific sport, and returns the number of children who voted for that sport.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the favorite sports and the number of children who voted for each sport.\n    The dataframe should contain \"Sport\", \"Boys\", and \"Girls\" columns.\n    sport (str): The specific sport to count votes for.\n    Returns:\n    int: The number of children who voted for the specific sport.\n    \"\"\"\n    # Filter the DataFrame for the specific sport\n    sport_df = df[df['Sport'] == sport]\n    \n    # Calculate the total number of votes for the specific sport\n    total_votes = sport_df['Boys'].values[0] + sport_df['Girls'].values[0]\n    \n    return total_votes\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Sport': ['Swimming', 'Golf', 'Gymnastics', 'Running', 'Soccer'],\n    'Boys': [20, 6, 4, 8, 11],\n    'Girls': [18, 10, 19, 14, 6]\n})\n\n# Call the tool to solve the problem\nprint(count_votes(df, 'Gymnastics'))","question":"In determining which sports to offer this season, the Yardley Community Center asked its members' children to vote for their favorite sports. How many children voted for gymnastics?","prediction_code":"import pandas as pd\n\ndef count_votes(df, sport):\n    \"\"\"\n    This function takes in a pandas DataFrame of favorite sports and a specific sport, and returns the number of children who voted for that sport.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the favorite sports and the number of children who voted for each sport.\n    The dataframe should contain \"Sport\", \"Boys\", and \"Girls\" columns.\n    sport (str): The specific sport to count votes for.\n    Returns:\n    int: The number of children who voted for the specific sport.\n    \"\"\"\n    # Filter the DataFrame for the specific sport\n    sport_df = df[df['Sport'] == sport]\n    \n    # Calculate the total number of votes for the specific sport\n    total_votes = sport_df['Boys'].values[0] + sport_df['Girls'].values[0]\n    \n    return total_votes","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Sport': ['Swimming', 'Golf', 'Gymnastics', 'Running', 'Soccer'],\n    'Boys': [20, 6, 4, 8, 11],\n    'Girls': [18, 10, 19, 14, 6]\n})\n\n# Call the tool to solve the problem\nprint(count_votes(df, 'Gymnastics'))","table":"Name: Favorite sports\nUnit: children\nContent:\nSport | Boys | Girls\nSwimming | 20 | 18\nGolf | 6 | 10\nGymnastics | 4 | 19\nRunning | 8 | 14\nSoccer | 11 | 6"}
{"level":5,"answer":83.0,"prediction":"import pandas as pd\n\ndef calculate_mode(df, column_name):\n    \"\"\"\n    This function takes in a pandas DataFrame and a column name, and returns the mode of the values in that column.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the data.\n    column_name (str): The name of the column to calculate the mode for.\n    Returns:\n    int or float: The mode of the values in the specified column.\n    \"\"\"\n    # Get the values in the specified column\n    values = df[column_name].values\n    \n    # Calculate the mode using the mode() function from pandas\n    mode = df[column_name].mode().values[0]\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Cereal': ['Oaty Yums', 'Fruit-E-Ohs', 'Toasted Treats', 'Vanilla Honey Clusters', 'Cinnamon Balls'],\n    'Number of boxes purchased': [87, 87, 83, 83, 83]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df, 'Number of boxes purchased'))","question":"A business analyst compared purchases of different types of cereal. What is the mode of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mode(df, column_name):\n    \"\"\"\n    This function takes in a pandas DataFrame and a column name, and returns the mode of the values in that column.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the data.\n    column_name (str): The name of the column to calculate the mode for.\n    Returns:\n    int or float: The mode of the values in the specified column.\n    \"\"\"\n    # Get the values in the specified column\n    values = df[column_name].values\n    \n    # Calculate the mode using the mode() function from pandas\n    mode = df[column_name].mode().values[0]\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Cereal': ['Oaty Yums', 'Fruit-E-Ohs', 'Toasted Treats', 'Vanilla Honey Clusters', 'Cinnamon Balls'],\n    'Number of boxes purchased': [87, 87, 83, 83, 83]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df, 'Number of boxes purchased'))","table":"Name: Boxes of cereal purchased\nUnit: None\nContent:\nCereal | Number of boxes purchased\nOaty Yums | 87\nFruit-E-Ohs | 87\nToasted Treats | 83\nVanilla Honey Clusters | 83\nCinnamon Balls | 83"}
{"level":5,"answer":14.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of kilometers walked per day and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of kilometers walked per day.\n    The dataframe should contain \"Day\" and \"Kilometers\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Kilometers\" column\n    min_value = df['Kilometers'].min()\n    max_value = df['Kilometers'].max()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday'],\n    'Kilometers': [12, 7, 14, 8, 12, 1, 0]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"Layla kept track of how many kilometers she walked during the past 7 days. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of kilometers walked per day and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of kilometers walked per day.\n    The dataframe should contain \"Day\" and \"Kilometers\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Kilometers\" column\n    min_value = df['Kilometers'].min()\n    max_value = df['Kilometers'].max()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday'],\n    'Kilometers': [12, 7, 14, 8, 12, 1, 0]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Kilometers walked\nUnit: None\nContent:\nDay | Kilometers\nTuesday | 12\nWednesday | 7\nThursday | 14\nFriday | 8\nSaturday | 12\nSunday | 1\nMonday | 0"}
{"level":7,"answer":-5.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of winning relay times and two years, and returns the rate of change between the two years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the winning relay times with columns 'Year' and 'Winning time (minutes)'.\n    start_year (int): The starting year.\n    end_year (int): The ending year.\n    Returns:\n    float: The rate of change between the two years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_time = df[df['Year'] == start_year]['Winning time (minutes)'].values[0]\n    end_time = df[df['Year'] == end_year]['Winning time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_time - start_time) \/ (end_year - start_year)\n    \n    return rate_of_change\n########################################\nimport pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of winning relay times and two years, and returns the rate of change between the two years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the winning relay times with columns 'Year' and 'Winning time (minutes)'.\n    start_year (int): The starting year.\n    end_year (int): The ending year.\n    Returns:\n    float: The rate of change between the two years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_time = df[df['Year'] == start_year]['Winning time (minutes)'].values[0]\n    end_time = df[df['Year'] == end_year]['Winning time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_time - start_time) \/ (end_year - start_year)\n    \n    return rate_of_change\n\n# Initialize the table into a DataFrame\ndf = pd.DataFrame({\n    'Year': [2010, 2011, 2012, 2013, 2014],\n    'Winning time (minutes)': [43, 45, 46, 42, 37]\n})\n\n# Call the tool to solve the problem\nrate_of_change = calculate_rate_of_change(df, 2013, 2014)\n\n# Print out the answer\nprint(rate_of_change)","question":"Every year Millersburg has a citywide relay and reports the winning times. According to the table, what was the rate of change between 2013 and 2014?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of winning relay times and two years, and returns the rate of change between the two years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the winning relay times with columns 'Year' and 'Winning time (minutes)'.\n    start_year (int): The starting year.\n    end_year (int): The ending year.\n    Returns:\n    float: The rate of change between the two years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_time = df[df['Year'] == start_year]['Winning time (minutes)'].values[0]\n    end_time = df[df['Year'] == end_year]['Winning time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_time - start_time) \/ (end_year - start_year)\n    \n    return rate_of_change","prediction_call":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of winning relay times and two years, and returns the rate of change between the two years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the winning relay times with columns 'Year' and 'Winning time (minutes)'.\n    start_year (int): The starting year.\n    end_year (int): The ending year.\n    Returns:\n    float: The rate of change between the two years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_time = df[df['Year'] == start_year]['Winning time (minutes)'].values[0]\n    end_time = df[df['Year'] == end_year]['Winning time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_time - start_time) \/ (end_year - start_year)\n    \n    return rate_of_change\n\n# Initialize the table into a DataFrame\ndf = pd.DataFrame({\n    'Year': [2010, 2011, 2012, 2013, 2014],\n    'Winning time (minutes)': [43, 45, 46, 42, 37]\n})\n\n# Call the tool to solve the problem\nrate_of_change = calculate_rate_of_change(df, 2013, 2014)\n\n# Print out the answer\nprint(rate_of_change)","table":"Name: Winning relay times\nUnit: minutes per year\nContent:\nYear | Winning time (minutes)\n2010 | 43\n2011 | 45\n2012 | 46\n2013 | 42\n2014 | 37"}
{"level":3,"answer":104.0,"prediction":"import pandas as pd\n\ndef calculate_minutes_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of minutes spent practicing soccer and returns the difference in minutes between Sunday and Monday.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the minutes spent practicing soccer.\n    The dataframe should contain \"Day\" and \"Minutes\" columns.\n    Returns:\n    int: The difference in minutes between Sunday and Monday.\n    \"\"\"\n    # Filter the DataFrame for Sunday and Monday rows\n    sunday_minutes = df[df['Day'] == 'Sunday']['Minutes'].values[0]\n    monday_minutes = df[df['Day'] == 'Monday']['Minutes'].values[0]\n    \n    # Calculate the difference in minutes\n    minutes_difference = sunday_minutes - monday_minutes\n    \n    return minutes_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Minutes': [214, 110, 177, 154, 143]\n})\n# Call the tool to solve the problem\nprint(calculate_minutes_difference(df))","question":"Liz jotted down how many minutes she spent practicing soccer in the past 5 days. How many more minutes did Liz practice on Sunday than on Monday?","prediction_code":"import pandas as pd\n\ndef calculate_minutes_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of minutes spent practicing soccer and returns the difference in minutes between Sunday and Monday.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the minutes spent practicing soccer.\n    The dataframe should contain \"Day\" and \"Minutes\" columns.\n    Returns:\n    int: The difference in minutes between Sunday and Monday.\n    \"\"\"\n    # Filter the DataFrame for Sunday and Monday rows\n    sunday_minutes = df[df['Day'] == 'Sunday']['Minutes'].values[0]\n    monday_minutes = df[df['Day'] == 'Monday']['Minutes'].values[0]\n    \n    # Calculate the difference in minutes\n    minutes_difference = sunday_minutes - monday_minutes\n    \n    return minutes_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Minutes': [214, 110, 177, 154, 143]\n})\n# Call the tool to solve the problem\nprint(calculate_minutes_difference(df))","table":"Name: Minutes spent practicing\nUnit: minutes\nContent:\nDay | Minutes\nSunday | 214\nMonday | 110\nTuesday | 177\nWednesday | 154\nThursday | 143"}
{"level":7,"answer":11.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of weights of winning dogs at a dog show and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the weights of winning dogs with columns 'Year' and 'Weight (kg)'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_weight = df[df['Year'] == start_year]['Weight (kg)'].values[0]\n    end_weight = df[df['Year'] == end_year]['Weight (kg)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_weight - start_weight) \/ start_weight\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2013, 2014, 2015, 2016, 2017],\n    'Weight (kg)': [27, 28, 34, 29, 40]\n})\n\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2016, 2017))","question":"A dog show enthusiast recorded the weight of the winning dog at recent dog shows. According to the table, what was the rate of change between 2016 and 2017?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of weights of winning dogs at a dog show and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the weights of winning dogs with columns 'Year' and 'Weight (kg)'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_weight = df[df['Year'] == start_year]['Weight (kg)'].values[0]\n    end_weight = df[df['Year'] == end_year]['Weight (kg)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_weight - start_weight) \/ start_weight\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2013, 2014, 2015, 2016, 2017],\n    'Weight (kg)': [27, 28, 34, 29, 40]\n})\n\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2016, 2017))","table":"Name: Weight of winning dog at a dog show\nUnit: kilograms per year\nContent:\nYear | Weight (kg)\n2013 | 27\n2014 | 28\n2015 | 34\n2016 | 29\n2017 | 40"}
{"level":7,"answer":4.89,"prediction":"import pandas as pd\n\ndef calculate_total_cost(menu_df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the menu items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = menu_df[menu_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n\ndef calculate_total_cost(menu_df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the menu items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = menu_df[menu_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\nmenu_df = pd.DataFrame({\n    'Item': ['caramel corn', 'chocolate popcorn', 'kettle corn', 'ranch popcorn', 'cheddar popcorn', 'Parmesan popcorn'],\n    'Price': [1.13, 1.78, 0.69, 1.72, 0.90, 1.41]\n})\n\n# Initialize the orders dictionary\norders = {\n    'kettle corn': 3,\n    'Parmesan popcorn': 2\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(menu_df, orders))","question":"How much would it cost to buy 3 kilograms of kettle corn and 2 kilograms of Parmesan popcorn?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(menu_df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the menu items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = menu_df[menu_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n\ndef calculate_total_cost(menu_df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the menu items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = menu_df[menu_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\nmenu_df = pd.DataFrame({\n    'Item': ['caramel corn', 'chocolate popcorn', 'kettle corn', 'ranch popcorn', 'cheddar popcorn', 'Parmesan popcorn'],\n    'Price': [1.13, 1.78, 0.69, 1.72, 0.90, 1.41]\n})\n\n# Initialize the orders dictionary\norders = {\n    'kettle corn': 3,\n    'Parmesan popcorn': 2\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(menu_df, orders))","table":"Name: None\nUnit: $\nContent:\ncaramel corn | $1.13 per kg\nchocolate popcorn | $1.78 per kg\nkettle corn | $0.69 per kg\nranch popcorn | $1.72 per kg\ncheddar popcorn | $0.90 per kg\nParmesan popcorn | $1.41 per kg"}
{"level":4,"answer":3.0,"prediction":"import pandas as pd\n\ndef count_shipments_with_broken_plates(df, min_plates, max_plates):\n    \"\"\"\n    This function takes in a pandas dataframe of broken plates per shipment and returns the number of shipments that have at least min_plates broken plates but less than max_plates broken plates.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken plates per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_plates (int): The minimum number of broken plates required for a shipment to be counted.\n    max_plates (int): The maximum number of broken plates required for a shipment to be counted.\n    Returns:\n    int: The number of shipments that have at least min_plates broken plates but less than max_plates broken plates.\n    \"\"\"\n    # prepare a list to calculate broken plates in each shipment\n    plates = []\n    # calculate the total number of broken plates in each shipment\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            plates.append(stem * 10 + leaf[j])\n    # filter the shipments where the total number of broken plates is greater than or equal to min_plates and less than max_plates\n    filtered = [plate for plate in plates if min_plates <= plate < max_plates]\n    # count the number of shipments\n    num_shipments = len(filtered)\n    return num_shipments\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[4], [4, 5], [2, 7, 8], [9, 9], [2], [], [5], [0, 1, 6], [0]]\n})\n# Call the tool to solve the problem\nprint(count_shipments_with_broken_plates(df, 49, 56))","question":"A pottery factory kept track of the number of broken plates per shipment last week. How many shipments had at least 49 broken plates but less than 56 broken plates?","prediction_code":"import pandas as pd\n\ndef count_shipments_with_broken_plates(df, min_plates, max_plates):\n    \"\"\"\n    This function takes in a pandas dataframe of broken plates per shipment and returns the number of shipments that have at least min_plates broken plates but less than max_plates broken plates.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken plates per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_plates (int): The minimum number of broken plates required for a shipment to be counted.\n    max_plates (int): The maximum number of broken plates required for a shipment to be counted.\n    Returns:\n    int: The number of shipments that have at least min_plates broken plates but less than max_plates broken plates.\n    \"\"\"\n    # prepare a list to calculate broken plates in each shipment\n    plates = []\n    # calculate the total number of broken plates in each shipment\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            plates.append(stem * 10 + leaf[j])\n    # filter the shipments where the total number of broken plates is greater than or equal to min_plates and less than max_plates\n    filtered = [plate for plate in plates if min_plates <= plate < max_plates]\n    # count the number of shipments\n    num_shipments = len(filtered)\n    return num_shipments","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[4], [4, 5], [2, 7, 8], [9, 9], [2], [], [5], [0, 1, 6], [0]]\n})\n# Call the tool to solve the problem\nprint(count_shipments_with_broken_plates(df, 49, 56))","table":"Name: Broken plates per shipment\nUnit: None\nContent:\nStem | Leaf \n1 | 4\n2 | 4, 5\n3 | 2, 7, 8\n4 | 9, 9\n5 | 2\n6 | \n7 | 5\n8 | 0, 1, 6\n9 | 0"}
{"level":7,"answer":28.8,"prediction":"import pandas as pd\n\ndef calculate_total_cost(pasta_df, pasta, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a pasta price table, a specific pasta name, and the quantity in pounds, and returns the total cost of the pasta.\n    Args:\n    pasta_df (pd.DataFrame): A pandas DataFrame containing pasta names and their prices per pound with columns 'Name' and 'Price'.\n    pasta (str): The name of the pasta.\n    quantity (float): The quantity of pasta in pounds.\n    Returns:\n    float: The total cost of the pasta.\n    \"\"\"\n    # Filter the DataFrame for the specific pasta\n    pasta_row = pasta_df[pasta_df['Name'] == pasta]\n    \n    # Check if the pasta exists in the DataFrame\n    if not pasta_row.empty:\n        pasta_price = pasta_row['Price'].values[0]\n        total_cost = pasta_price * quantity\n        return total_cost\n    else:\n        return \"Pasta not found in the table.\"\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['fusilli pasta', 'rigatoni pasta', 'rotini pasta', 'farfalle pasta', 'penne pasta'],\n    'Price': [5.39, 3.63, 5.76, 6.48, 5.41]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'rotini pasta', 5))","question":"Josh bought 5 pounds of rotini pasta. How much did he spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(pasta_df, pasta, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a pasta price table, a specific pasta name, and the quantity in pounds, and returns the total cost of the pasta.\n    Args:\n    pasta_df (pd.DataFrame): A pandas DataFrame containing pasta names and their prices per pound with columns 'Name' and 'Price'.\n    pasta (str): The name of the pasta.\n    quantity (float): The quantity of pasta in pounds.\n    Returns:\n    float: The total cost of the pasta.\n    \"\"\"\n    # Filter the DataFrame for the specific pasta\n    pasta_row = pasta_df[pasta_df['Name'] == pasta]\n    \n    # Check if the pasta exists in the DataFrame\n    if not pasta_row.empty:\n        pasta_price = pasta_row['Price'].values[0]\n        total_cost = pasta_price * quantity\n        return total_cost\n    else:\n        return \"Pasta not found in the table.\"","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['fusilli pasta', 'rigatoni pasta', 'rotini pasta', 'farfalle pasta', 'penne pasta'],\n    'Price': [5.39, 3.63, 5.76, 6.48, 5.41]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'rotini pasta', 5))","table":"Name: None\nUnit: $\nContent:\nfusilli pasta | $5.39 per pound\nrigatoni pasta | $3.63 per pound\nrotini pasta | $5.76 per pound\nfarfalle pasta | $6.48 per pound\npenne pasta | $5.41 per pound"}
{"level":7,"answer":8.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of math teachers per high school and returns the range of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of math teachers per high school.\n    The dataframe should contain \"High school\" and \"Number of math teachers\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the maximum and minimum values of the \"Number of math teachers\" column\n    max_value = df['Number of math teachers'].max()\n    min_value = df['Number of math teachers'].min()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'High school': ['Westside High', 'Thompson High', 'Cedar High', 'River High', 'Lincoln High', 'Hillview High', 'Moore High'],\n    'Number of math teachers': [10, 10, 6, 4, 5, 4, 2]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"The school district compared how many math teachers each high school has. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of math teachers per high school and returns the range of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of math teachers per high school.\n    The dataframe should contain \"High school\" and \"Number of math teachers\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the maximum and minimum values of the \"Number of math teachers\" column\n    max_value = df['Number of math teachers'].max()\n    min_value = df['Number of math teachers'].min()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'High school': ['Westside High', 'Thompson High', 'Cedar High', 'River High', 'Lincoln High', 'Hillview High', 'Moore High'],\n    'Number of math teachers': [10, 10, 6, 4, 5, 4, 2]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Math teachers\nUnit: None\nContent:\nHigh school | Number of math teachers\nWestside High | 10\nThompson High | 10\nCedar High | 6\nRiver High | 4\nLincoln High | 5\nHillview High | 4\nMoore High | 2"}
{"level":8,"answer":0.24,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item2_price - item1_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['jar of tomato sauce', 'bottle of ketchup', 'bottle of hot sauce', 'bottle of vinegar', 'bottle of soy sauce', 'bottle of mustard'],\n    'Price': [0.64, 0.76, 0.85, 0.73, 0.82, 0.88]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'jar of tomato sauce', 'bottle of mustard'))","question":"How much more does a bottle of mustard cost than a jar of tomato sauce?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item2_price - item1_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['jar of tomato sauce', 'bottle of ketchup', 'bottle of hot sauce', 'bottle of vinegar', 'bottle of soy sauce', 'bottle of mustard'],\n    'Price': [0.64, 0.76, 0.85, 0.73, 0.82, 0.88]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'jar of tomato sauce', 'bottle of mustard'))","table":"Name: None\nUnit: $\nContent:\njar of tomato sauce | $0.64\nbottle of ketchup | $0.76\nbottle of hot sauce | $0.85\nbottle of vinegar | $0.73\nbottle of soy sauce | $0.82\nbottle of mustard | $0.88"}
{"level":6,"answer":18.0,"prediction":"import pandas as pd\n\ndef find_smallest_number_of_books(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of books per shelf and returns the smallest number of books.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of books per shelf.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of books.\n    \"\"\"\n    # Create a list to store all the book counts\n    book_counts = []\n    \n    # Iterate through each row of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # If the leaf column is empty, add the stem count to the book_counts list\n        if pd.isnull(leaf):\n            book_counts.append(stem)\n        else:\n            # If the leaf column is not empty, split the string by comma and add each leaf count to the book_counts list\n            leaf_counts = leaf.split(',')\n            for count in leaf_counts:\n                book_counts.append(stem * 10 + int(count))\n    \n    # Find the smallest number of books\n    smallest_number = min(book_counts)\n    \n    return smallest_number\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [8, '1, 5, 6, 9', 9, '', '2, 7', '1, 2, 4, 6, 7, 9', 6, '', 0]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_books(df))","question":"The librarian at the public library counted the number of books on each shelf. What is the smallest number of books?","prediction_code":"import pandas as pd\n\ndef find_smallest_number_of_books(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of books per shelf and returns the smallest number of books.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of books per shelf.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of books.\n    \"\"\"\n    # Create a list to store all the book counts\n    book_counts = []\n    \n    # Iterate through each row of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # If the leaf column is empty, add the stem count to the book_counts list\n        if pd.isnull(leaf):\n            book_counts.append(stem)\n        else:\n            # If the leaf column is not empty, split the string by comma and add each leaf count to the book_counts list\n            leaf_counts = leaf.split(',')\n            for count in leaf_counts:\n                book_counts.append(stem * 10 + int(count))\n    \n    # Find the smallest number of books\n    smallest_number = min(book_counts)\n    \n    return smallest_number","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [8, '1, 5, 6, 9', 9, '', '2, 7', '1, 2, 4, 6, 7, 9', 6, '', 0]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_books(df))","table":"Name: Books per shelf\nUnit: books\nContent:\nStem | Leaf \n1 | 8\n2 | 1, 5, 6, 9\n3 | 9\n4 | \n5 | 2, 7\n6 | 1, 2, 4, 6, 7, 9\n7 | 6\n8 | \n9 | 0"}
{"level":8,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_mean_hours(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of hours spent volunteering and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the days and hours spent volunteering.\n    The DataFrame should have columns 'Day' and 'Hours'.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the 'Hours' column\n    mean_hours = df['Hours'].mean()\n    \n    return mean_hours\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday'],\n    'Hours': [6, 7, 3, 5, 4, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_hours(df))","question":"To get credit for meeting his school's community service requirement, Tristan kept a volunteering log. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean_hours(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of hours spent volunteering and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the days and hours spent volunteering.\n    The DataFrame should have columns 'Day' and 'Hours'.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the 'Hours' column\n    mean_hours = df['Hours'].mean()\n    \n    return mean_hours","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday'],\n    'Hours': [6, 7, 3, 5, 4, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_hours(df))","table":"Name: Hours spent volunteering\nUnit: None\nContent:\nDay | Hours\nWednesday | 6\nThursday | 7\nFriday | 3\nSaturday | 5\nSunday | 4\nMonday | 5"}
{"level":2,"answer":30.0,"prediction":"import pandas as pd\n\ndef calculate_total_plates(df, num_shelves):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of shelves and plates, and returns the total number of plates on a given number of shelves.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of shelves and plates with columns 'Number of shelves' and 'Number of plates'.\n    num_shelves (int): The number of shelves to calculate the total number of plates for.\n    Returns:\n    int: The total number of plates on the given number of shelves.\n    \"\"\"\n    # Filter the DataFrame for the specific number of shelves\n    shelves_df = df[df['Number of shelves'] == num_shelves]\n    \n    # Get the number of plates for the specific number of shelves\n    num_plates = shelves_df['Number of plates'].values[0]\n    \n    return num_plates\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of shelves': [1, 2, 3],\n    'Number of plates': [10, 20, '?']\n})\n\n# Call the tool to solve the problem\nnum_plates = calculate_total_plates(df, 3)\n\n# Print out the answer\nprint(num_plates)","question":"Each shelf has 10 plates. How many plates are on 3 shelves?","prediction_code":"import pandas as pd\n\ndef calculate_total_plates(df, num_shelves):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of shelves and plates, and returns the total number of plates on a given number of shelves.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of shelves and plates with columns 'Number of shelves' and 'Number of plates'.\n    num_shelves (int): The number of shelves to calculate the total number of plates for.\n    Returns:\n    int: The total number of plates on the given number of shelves.\n    \"\"\"\n    # Filter the DataFrame for the specific number of shelves\n    shelves_df = df[df['Number of shelves'] == num_shelves]\n    \n    # Get the number of plates for the specific number of shelves\n    num_plates = shelves_df['Number of plates'].values[0]\n    \n    return num_plates","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of shelves': [1, 2, 3],\n    'Number of plates': [10, 20, '?']\n})\n\n# Call the tool to solve the problem\nnum_plates = calculate_total_plates(df, 3)\n\n# Print out the answer\nprint(num_plates)","table":"Name: None\nUnit: None\nContent:\nNumber of shelves | Number of plates\n1 | 10\n2 | 20\n3 | ?"}
{"level":5,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of computers in classrooms and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of computers in classrooms.\n    The dataframe should contain \"Teacher\" and \"Number of computers\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of computers']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Teacher': ['Ms. Cohen', 'Mr. Morales', 'Miss Murphy', 'Mr. Watson', 'Mrs. Rossi'],\n    'Number of computers': [6, 2, 4, 5, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"The teachers at a middle school counted how many computers they had in their classrooms. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of computers in classrooms and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of computers in classrooms.\n    The dataframe should contain \"Teacher\" and \"Number of computers\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of computers']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Teacher': ['Ms. Cohen', 'Mr. Morales', 'Miss Murphy', 'Mr. Watson', 'Mrs. Rossi'],\n    'Number of computers': [6, 2, 4, 5, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Computers in classrooms\nUnit: None\nContent:\nTeacher | Number of computers\nMs. Cohen | 6\nMr. Morales | 2\nMiss Murphy | 4\nMr. Watson | 5\nMrs. Rossi | 5"}
{"level":8,"answer":12.0,"prediction":"import pandas as pd\n\ndef count_people_with_at_least_3_trips(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of trips to a water park and the corresponding frequency, and returns the number of people who went to the water park at least 3 times.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of trips and the corresponding frequency.\n    The DataFrame should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who went to the water park at least 3 times.\n    \"\"\"\n    # Filter the DataFrame for trips with at least 3 visits\n    filtered_df = df[df['Number of trips'] >= 3]\n    \n    # Calculate the total number of people who went to the water park at least 3 times\n    total_people = filtered_df['Frequency'].sum()\n    \n    return total_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [1, 2, 3, 4, 5],\n    'Frequency': [12, 16, 0, 5, 7]\n})\n# Call the tool to solve the problem\nprint(count_people_with_at_least_3_trips(df))","question":"A theme park developer recorded the number of people who visited the local water park last summer. How many people went to the water park at least 3 times?","prediction_code":"import pandas as pd\n\ndef count_people_with_at_least_3_trips(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of trips to a water park and the corresponding frequency, and returns the number of people who went to the water park at least 3 times.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of trips and the corresponding frequency.\n    The DataFrame should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who went to the water park at least 3 times.\n    \"\"\"\n    # Filter the DataFrame for trips with at least 3 visits\n    filtered_df = df[df['Number of trips'] >= 3]\n    \n    # Calculate the total number of people who went to the water park at least 3 times\n    total_people = filtered_df['Frequency'].sum()\n    \n    return total_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [1, 2, 3, 4, 5],\n    'Frequency': [12, 16, 0, 5, 7]\n})\n# Call the tool to solve the problem\nprint(count_people_with_at_least_3_trips(df))","table":"Name: Going to the water park last summer\nUnit: None\nContent:\nNumber of trips | Frequency\n1 | 12\n2 | 16\n3 | 0\n4 | 5\n5 | 7"}
{"level":5,"answer":90.0,"prediction":"import pandas as pd\n\ndef find_largest_number_of_apples(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of apples per tree and returns the largest number of apples.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of apples per tree.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of apples.\n    \"\"\"\n    # Initialize the largest number of apples\n    largest_apples = 0\n    \n    # Iterate through the rows of the DataFrame and update the largest number of apples if necessary\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            apples = stem * 10 + leaf[j]\n            if apples > largest_apples:\n                largest_apples = apples\n    \n    return largest_apples\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[5, 6], [1], [1], [1, 8], [2, 5, 8], [1, 7], [6], [0]]\n})\n# Call the tool to solve the problem\nprint(find_largest_number_of_apples(df))","question":"A farmer counted the number of apples on each tree in his orchard. What is the largest number of apples?","prediction_code":"import pandas as pd\n\ndef find_largest_number_of_apples(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of apples per tree and returns the largest number of apples.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of apples per tree.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of apples.\n    \"\"\"\n    # Initialize the largest number of apples\n    largest_apples = 0\n    \n    # Iterate through the rows of the DataFrame and update the largest number of apples if necessary\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            apples = stem * 10 + leaf[j]\n            if apples > largest_apples:\n                largest_apples = apples\n    \n    return largest_apples","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[5, 6], [1], [1], [1, 8], [2, 5, 8], [1, 7], [6], [0]]\n})\n# Call the tool to solve the problem\nprint(find_largest_number_of_apples(df))","table":"Name: Apples per tree\nUnit: apples\nContent:\nStem | Leaf \n2 | 5, 6\n3 | 1\n4 | 1\n5 | 1, 8\n6 | 2, 5, 8\n7 | 1, 7\n8 | 6\n9 | 0"}
{"level":6,"answer":2.0,"prediction":"import pandas as pd\n\ndef count_magazines_with_46_pages(df):\n    \"\"\"\n    This function takes in a pandas dataframe of pages per magazine, and returns the number of magazines that have exactly 46 pages.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pages per magazine.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of magazines that have exactly 46 pages.\n    \"\"\"\n    # prepare a list to calculate the total number of pages in each magazine\n    pages = []\n    # calculate the total number of pages in each magazine\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            pages.append(stem * 10 + leaf[j])\n    # count the number of magazines that have exactly 46 pages\n    num_magazines = pages.count(46)\n    return num_magazines\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6],\n    'Leaf': [[1, 2, 3], [1], [0, 1, 6, 6, 7, 7], [0, 1, 2, 3, 7], [1, 7, 8, 8]]\n})\n# Call the tool to solve the problem\nprint(count_magazines_with_46_pages(df))","question":"Tom, a journalism student, counted the number of pages in several major magazines. How many magazines had exactly 46 pages?","prediction_code":"import pandas as pd\n\ndef count_magazines_with_46_pages(df):\n    \"\"\"\n    This function takes in a pandas dataframe of pages per magazine, and returns the number of magazines that have exactly 46 pages.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pages per magazine.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of magazines that have exactly 46 pages.\n    \"\"\"\n    # prepare a list to calculate the total number of pages in each magazine\n    pages = []\n    # calculate the total number of pages in each magazine\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            pages.append(stem * 10 + leaf[j])\n    # count the number of magazines that have exactly 46 pages\n    num_magazines = pages.count(46)\n    return num_magazines","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6],\n    'Leaf': [[1, 2, 3], [1], [0, 1, 6, 6, 7, 7], [0, 1, 2, 3, 7], [1, 7, 8, 8]]\n})\n# Call the tool to solve the problem\nprint(count_magazines_with_46_pages(df))","table":"Name: Pages per magazine\nUnit: magazines\nContent:\nStem | Leaf \n2 | 1, 2, 3\n3 | 1\n4 | 0, 1, 6, 6, 7, 7\n5 | 0, 1, 2, 3, 7\n6 | 1, 7, 8, 8"}
{"level":1,"answer":15.0,"prediction":"import pandas as pd\n\ndef calculate_total_booths(df, num_restaurants):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of booths per restaurant and the number of restaurants, and returns the total number of booths.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of restaurants and the number of booths per restaurant.\n    The DataFrame should have columns 'Number of restaurants' and 'Number of booths'.\n    num_restaurants (int): The number of restaurants.\n    Returns:\n    int: The total number of booths.\n    \"\"\"\n    # Filter the DataFrame for the specified number of restaurants\n    filtered_df = df[df['Number of restaurants'] == num_restaurants]\n    \n    # Get the number of booths for the specified number of restaurants\n    num_booths = filtered_df['Number of booths'].values[0]\n    \n    # Calculate the total number of booths\n    total_booths = num_booths * num_restaurants\n    \n    return total_booths\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of restaurants': [1, 2, 3],\n    'Number of booths': [5, 10, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_booths(df, 3))","question":"Each restaurant has 5 booths. How many booths are in 3 restaurants?","prediction_code":"import pandas as pd\n\ndef calculate_total_booths(df, num_restaurants):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of booths per restaurant and the number of restaurants, and returns the total number of booths.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of restaurants and the number of booths per restaurant.\n    The DataFrame should have columns 'Number of restaurants' and 'Number of booths'.\n    num_restaurants (int): The number of restaurants.\n    Returns:\n    int: The total number of booths.\n    \"\"\"\n    # Filter the DataFrame for the specified number of restaurants\n    filtered_df = df[df['Number of restaurants'] == num_restaurants]\n    \n    # Get the number of booths for the specified number of restaurants\n    num_booths = filtered_df['Number of booths'].values[0]\n    \n    # Calculate the total number of booths\n    total_booths = num_booths * num_restaurants\n    \n    return total_booths","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of restaurants': [1, 2, 3],\n    'Number of booths': [5, 10, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_booths(df, 3))","table":"Name: None\nUnit: booths\nContent:\nNumber of restaurants | Number of booths\n1 | 5\n2 | 10\n3 | ?"}
{"level":3,"answer":2698.0,"prediction":"import pandas as pd\n\ndef calculate_total_crayons(df, days):\n    \"\"\"\n    This function takes in a pandas DataFrame of crayons produced each day and a list of days, and returns the total number of crayons produced on those days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of crayons produced each day.\n    The DataFrame should have columns 'Day' and 'Number of crayons'.\n    days (list): A list of days for which the total number of crayons produced is to be calculated.\n    Returns:\n    int: The total number of crayons produced on the specified days.\n    \"\"\"\n    # Filter the DataFrame for the specified days\n    filtered_df = df[df['Day'].isin(days)]\n    \n    # Calculate the total number of crayons produced on the specified days\n    total_crayons = filtered_df['Number of crayons'].sum()\n    \n    return total_crayons\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Number of crayons': [6738, 1244, 1454, 1028]\n})\n\n# Specify the days for which the total number of crayons produced is to be calculated\ndays = ['Tuesday', 'Wednesday']\n\n# Call the tool to solve the problem\nprint(calculate_total_crayons(df, days))","question":"An employee at the crayon factory kept track of the number of crayons produced each day. How many crayons total did the factory produce on Tuesday and Wednesday?","prediction_code":"import pandas as pd\n\ndef calculate_total_crayons(df, days):\n    \"\"\"\n    This function takes in a pandas DataFrame of crayons produced each day and a list of days, and returns the total number of crayons produced on those days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of crayons produced each day.\n    The DataFrame should have columns 'Day' and 'Number of crayons'.\n    days (list): A list of days for which the total number of crayons produced is to be calculated.\n    Returns:\n    int: The total number of crayons produced on the specified days.\n    \"\"\"\n    # Filter the DataFrame for the specified days\n    filtered_df = df[df['Day'].isin(days)]\n    \n    # Calculate the total number of crayons produced on the specified days\n    total_crayons = filtered_df['Number of crayons'].sum()\n    \n    return total_crayons","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Number of crayons': [6738, 1244, 1454, 1028]\n})\n\n# Specify the days for which the total number of crayons produced is to be calculated\ndays = ['Tuesday', 'Wednesday']\n\n# Call the tool to solve the problem\nprint(calculate_total_crayons(df, days))","table":"Name: Crayons produced\nUnit: crayons\nContent:\nDay | Number of crayons\nMonday | 6,738\nTuesday | 1,244\nWednesday | 1,454\nThursday | 1,028"}
{"level":3,"answer":5260.0,"prediction":"import pandas as pd\n\ndef calculate_total_harvest(df, days):\n    \"\"\"\n    This function takes in a pandas DataFrame of watermelons harvested and a list of days, and returns the total number of watermelons harvested on those days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of watermelons harvested per day.\n    The DataFrame should have columns 'Day' and 'Number of watermelons'.\n    days (list): A list of days for which the total number of watermelons harvested is to be calculated.\n    Returns:\n    int: The total number of watermelons harvested on the specified days.\n    \"\"\"\n    # Filter the DataFrame for the specified days\n    filtered_df = df[df['Day'].isin(days)]\n    \n    # Calculate the total number of watermelons harvested on the specified days\n    total_harvest = filtered_df['Number of watermelons'].sum()\n    \n    return total_harvest\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Number of watermelons': [1904, 4557, 3079, 2471, 2789]\n})\n\n# Specify the days for which the total number of watermelons harvested is to be calculated\ndays = ['Monday', 'Tuesday']\n\n# Call the tool to solve the problem\nprint(calculate_total_harvest(df, days))","question":"A farmer recalled how many watermelons were harvested in the past 5 days. How many watermelons in total were harvested on Monday and Tuesday?","prediction_code":"import pandas as pd\n\ndef calculate_total_harvest(df, days):\n    \"\"\"\n    This function takes in a pandas DataFrame of watermelons harvested and a list of days, and returns the total number of watermelons harvested on those days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of watermelons harvested per day.\n    The DataFrame should have columns 'Day' and 'Number of watermelons'.\n    days (list): A list of days for which the total number of watermelons harvested is to be calculated.\n    Returns:\n    int: The total number of watermelons harvested on the specified days.\n    \"\"\"\n    # Filter the DataFrame for the specified days\n    filtered_df = df[df['Day'].isin(days)]\n    \n    # Calculate the total number of watermelons harvested on the specified days\n    total_harvest = filtered_df['Number of watermelons'].sum()\n    \n    return total_harvest","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Number of watermelons': [1904, 4557, 3079, 2471, 2789]\n})\n\n# Specify the days for which the total number of watermelons harvested is to be calculated\ndays = ['Monday', 'Tuesday']\n\n# Call the tool to solve the problem\nprint(calculate_total_harvest(df, days))","table":"Name: Watermelons harvested\nUnit: watermelons\nContent:\nDay | Number of watermelons\nFriday | 1,904\nSaturday | 4,557\nSunday | 3,079\nMonday | 2,471\nTuesday | 2,789"}
{"level":8,"answer":52.0,"prediction":"import pandas as pd\n\ndef count_students_less_than_9(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of scores on the last quiz and returns the number of students who scored less than 9.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the scores and frequencies of each score.\n    The DataFrame should have columns 'Score' and 'Frequency'.\n    Returns:\n    int: The number of students who scored less than 9.\n    \"\"\"\n    # Filter the DataFrame for scores less than 9\n    filtered_df = df[df['Score'] < 9]\n    \n    # Calculate the total number of students who scored less than 9\n    num_students = filtered_df['Frequency'].sum()\n    \n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Score': [5, 6, 7, 8, 9, 10],\n    'Frequency': [17, 5, 18, 12, 4, 13]\n})\n# Call the tool to solve the problem\nprint(count_students_less_than_9(df))","question":"Professor Richmond compiled the scores from the last quiz. How many students scored less than 9?","prediction_code":"import pandas as pd\n\ndef count_students_less_than_9(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of scores on the last quiz and returns the number of students who scored less than 9.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the scores and frequencies of each score.\n    The DataFrame should have columns 'Score' and 'Frequency'.\n    Returns:\n    int: The number of students who scored less than 9.\n    \"\"\"\n    # Filter the DataFrame for scores less than 9\n    filtered_df = df[df['Score'] < 9]\n    \n    # Calculate the total number of students who scored less than 9\n    num_students = filtered_df['Frequency'].sum()\n    \n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Score': [5, 6, 7, 8, 9, 10],\n    'Frequency': [17, 5, 18, 12, 4, 13]\n})\n# Call the tool to solve the problem\nprint(count_students_less_than_9(df))","table":"Name: Scores on the last quiz\nUnit: None\nContent:\nScore | Frequency\n5 | 17\n6 | 5\n7 | 18\n8 | 12\n9 | 4\n10 | 13"}
{"level":7,"answer":1.0,"prediction":"import pandas as pd\n\ndef count_members_with_specific_seed(df, seed):\n    \"\"\"\n    This function takes in a pandas DataFrame of seeds planted in the garden and returns the number of members who planted a specific number of seeds.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of seeds planted and the corresponding frequency.\n    The dataframe should contain \"Seeds planted\" and \"Frequency\" columns.\n    seed (int): The specific number of seeds to count.\n    Returns:\n    int: The number of members who planted the specific number of seeds.\n    \"\"\"\n    # Filter the DataFrame for the specific number of seeds\n    filtered_df = df[df['Seeds planted'] == seed]\n    \n    # Get the frequency of the specific number of seeds\n    frequency = filtered_df['Frequency'].values[0]\n    \n    return frequency\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Seeds planted': [0, 1, 2, 3],\n    'Frequency': [7, 1, 10, 8]\n})\n\n# Call the tool to solve the problem\nprint(count_members_with_specific_seed(df, 1))","question":"For Earth Day, Kensington High's environmental club tracked the number of seeds planted by its members. How many members planted exactly 1 seed?","prediction_code":"import pandas as pd\n\ndef count_members_with_specific_seed(df, seed):\n    \"\"\"\n    This function takes in a pandas DataFrame of seeds planted in the garden and returns the number of members who planted a specific number of seeds.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of seeds planted and the corresponding frequency.\n    The dataframe should contain \"Seeds planted\" and \"Frequency\" columns.\n    seed (int): The specific number of seeds to count.\n    Returns:\n    int: The number of members who planted the specific number of seeds.\n    \"\"\"\n    # Filter the DataFrame for the specific number of seeds\n    filtered_df = df[df['Seeds planted'] == seed]\n    \n    # Get the frequency of the specific number of seeds\n    frequency = filtered_df['Frequency'].values[0]\n    \n    return frequency","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Seeds planted': [0, 1, 2, 3],\n    'Frequency': [7, 1, 10, 8]\n})\n\n# Call the tool to solve the problem\nprint(count_members_with_specific_seed(df, 1))","table":"Name: Planting seeds in the garden\nUnit: None\nContent:\nSeeds planted | Frequency\n0 | 7\n1 | 1\n2 | 10\n3 | 8"}
{"level":7,"answer":1.04,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item given its quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information for different items.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Extract the price per kilogram\n    price_per_kg = item_df['Unit'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price_per_kg * quantity\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['blueberry pancake mix', 'plain pancake mix', 'buttermilk pancake mix', 'raspberry pancake mix'],\n    'Unit': [1.21, 0.93, 0.52, 1.25]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'buttermilk pancake mix', 2))","question":"Alexa purchased 2 kilograms of buttermilk pancake mix. What was the total cost?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item given its quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information for different items.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Extract the price per kilogram\n    price_per_kg = item_df['Unit'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price_per_kg * quantity\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['blueberry pancake mix', 'plain pancake mix', 'buttermilk pancake mix', 'raspberry pancake mix'],\n    'Unit': [1.21, 0.93, 0.52, 1.25]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'buttermilk pancake mix', 2))","table":"Name: None\nUnit: $\nContent:\nblueberry pancake mix | $1.21 per kilogram\nplain pancake mix | $0.93 per kilogram\nbuttermilk pancake mix | $0.52 per kilogram\nraspberry pancake mix | $1.25 per kilogram"}
{"level":8,"answer":32.0,"prediction":"import pandas as pd\n\ndef count_students_eating_fast_food(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of times students ate fast food and returns the number of students who ate fast food at least 2 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of times students ate fast food.\n    The DataFrame should contain \"Times eaten\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who ate fast food at least 2 times.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of times eaten is greater than or equal to 2\n    filtered_df = df[df['Times eaten'] >= 2]\n    \n    # Calculate the total number of students who ate fast food at least 2 times\n    num_students = filtered_df['Frequency'].sum()\n    \n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Times eaten': [0, 1, 2, 3],\n    'Frequency': [4, 8, 20, 12]\n})\n# Call the tool to solve the problem\nprint(count_students_eating_fast_food(df))","question":"During health class, the students reported the number of times they ate fast food last month. How many students ate fast food at least 2 times?","prediction_code":"import pandas as pd\n\ndef count_students_eating_fast_food(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of times students ate fast food and returns the number of students who ate fast food at least 2 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of times students ate fast food.\n    The DataFrame should contain \"Times eaten\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who ate fast food at least 2 times.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of times eaten is greater than or equal to 2\n    filtered_df = df[df['Times eaten'] >= 2]\n    \n    # Calculate the total number of students who ate fast food at least 2 times\n    num_students = filtered_df['Frequency'].sum()\n    \n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Times eaten': [0, 1, 2, 3],\n    'Frequency': [4, 8, 20, 12]\n})\n# Call the tool to solve the problem\nprint(count_students_eating_fast_food(df))","table":"Name: Eating fast food last month\nUnit: None\nContent:\nTimes eaten | Frequency\n0 | 4\n1 | 8\n2 | 20\n3 | 12"}
{"level":5,"answer":6.0,"prediction":"import pandas as pd\n\ndef count_chickens_laying_brown_eggs(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of farm animals and returns the number of chickens that lay brown eggs.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the farm animals and their frequencies.\n    The DataFrame should contain \"Animal\" and \"Frequency\" columns.\n    Returns:\n    int: The number of chickens that lay brown eggs.\n    \"\"\"\n    # Filter the DataFrame for chickens\n    chickens_df = df[df['Animal'] == 'chicken']\n    \n    # Get the frequency of chickens\n    chicken_frequency = chickens_df['Frequency'].values[0]\n    \n    # Calculate the number of chickens that lay brown eggs\n    brown_eggs_chickens = chicken_frequency \/ 3\n    \n    return int(brown_eggs_chickens)\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Animal': ['chicken', 'cow', 'duck', 'goat', 'pig', 'sheep'],\n    'Frequency': [18, 4, 12, 6, 5, 8]\n})\n# Call the tool to solve the problem\nprint(count_chickens_laying_brown_eggs(df))","question":"Ms. Norman takes care of all kinds of animals on her farm. The frequency chart shows the kinds of animals she has. If 1\/3 of the chickens on the farm lay brown eggs, how many chickens lay brown eggs?","prediction_code":"import pandas as pd\n\ndef count_chickens_laying_brown_eggs(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of farm animals and returns the number of chickens that lay brown eggs.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the farm animals and their frequencies.\n    The DataFrame should contain \"Animal\" and \"Frequency\" columns.\n    Returns:\n    int: The number of chickens that lay brown eggs.\n    \"\"\"\n    # Filter the DataFrame for chickens\n    chickens_df = df[df['Animal'] == 'chicken']\n    \n    # Get the frequency of chickens\n    chicken_frequency = chickens_df['Frequency'].values[0]\n    \n    # Calculate the number of chickens that lay brown eggs\n    brown_eggs_chickens = chicken_frequency \/ 3\n    \n    return int(brown_eggs_chickens)","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Animal': ['chicken', 'cow', 'duck', 'goat', 'pig', 'sheep'],\n    'Frequency': [18, 4, 12, 6, 5, 8]\n})\n# Call the tool to solve the problem\nprint(count_chickens_laying_brown_eggs(df))","table":"Name: Farm animals\nUnit: chickens\nContent:\nAnimal | Frequency\nchicken | 18\ncow | 4\nduck | 12\ngoat | 6\npig | 5\nsheep | 8"}
{"level":8,"answer":8.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of daily snowfall and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the daily snowfall data with columns 'Day' and 'Snowfall (inches)'.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the maximum and minimum values of the 'Snowfall (inches)' column\n    max_value = df['Snowfall (inches)'].max()\n    min_value = df['Snowfall (inches)'].min()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n    'Snowfall (inches)': [7, 1, 4, 9, 6, 4]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"Ed graphed the amount of snow that fell in the last 6 days. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of daily snowfall and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the daily snowfall data with columns 'Day' and 'Snowfall (inches)'.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the maximum and minimum values of the 'Snowfall (inches)' column\n    max_value = df['Snowfall (inches)'].max()\n    min_value = df['Snowfall (inches)'].min()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n    'Snowfall (inches)': [7, 1, 4, 9, 6, 4]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Daily snowfall\nUnit: None\nContent:\nDay | Snowfall (inches)\nTuesday | 7\nWednesday | 1\nThursday | 4\nFriday | 9\nSaturday | 6\nSunday | 4"}
{"level":5,"answer":66.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pumpkins sold and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of pumpkins sold each day.\n    The dataframe should contain \"Day\" and \"Number of pumpkins\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of pumpkins']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of pumpkins': [72, 66, 71, 56, 60]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"A pumpkin patch monitored the number of pumpkins sold each day. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pumpkins sold and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of pumpkins sold each day.\n    The dataframe should contain \"Day\" and \"Number of pumpkins\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of pumpkins']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of pumpkins': [72, 66, 71, 56, 60]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Pumpkins sold\nUnit: None\nContent:\nDay | Number of pumpkins\nTuesday | 72\nWednesday | 66\nThursday | 71\nFriday | 56\nSaturday | 60"}
{"level":6,"answer":6.8,"prediction":"import pandas as pd\n\ndef calculate_total_cost(pasta_df, pasta_weight):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the pasta prices and a string representing the weight of pasta, and returns the total cost of the pasta.\n    Args:\n    pasta_df (pd.DataFrame): A pandas DataFrame containing pasta names and their prices per pound with columns 'Name' and 'Price'.\n    pasta_weight (str): A string representing the weight of pasta in the format 'x+y\/z' where x, y, and z are integers.\n    Returns:\n    float: The total cost of the pasta.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Convert the pasta weight string to a float\n    weight_parts = pasta_weight.split('+')\n    whole_part = float(weight_parts[0])\n    fraction_part = weight_parts[1].split('\/')\n    numerator = float(fraction_part[0])\n    denominator = float(fraction_part[1])\n    weight = whole_part + numerator \/ denominator\n    \n    # Iterate through the pasta types and calculate the cost for each type\n    for i in range(len(pasta_df)):\n        pasta_name = pasta_df['Name'][i]\n        pasta_price = pasta_df['Price'][i]\n        pasta_cost = pasta_price * weight\n        total_cost += pasta_cost\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\npasta_df = pd.DataFrame({\n    'Name': ['farfalle pasta', 'rotini pasta', 'spirali pasta', 'penne pasta', 'rigatoni pasta'],\n    'Price': [7, 4, 3, 3, 6]\n})\n\n# Define the weight of pasta\npasta_weight = '1+7\/10'\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(pasta_df, pasta_weight))","question":"Charlotte buys 1+7\/10 pounds of rotini pasta. What is the total cost?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(pasta_df, pasta_weight):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the pasta prices and a string representing the weight of pasta, and returns the total cost of the pasta.\n    Args:\n    pasta_df (pd.DataFrame): A pandas DataFrame containing pasta names and their prices per pound with columns 'Name' and 'Price'.\n    pasta_weight (str): A string representing the weight of pasta in the format 'x+y\/z' where x, y, and z are integers.\n    Returns:\n    float: The total cost of the pasta.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Convert the pasta weight string to a float\n    weight_parts = pasta_weight.split('+')\n    whole_part = float(weight_parts[0])\n    fraction_part = weight_parts[1].split('\/')\n    numerator = float(fraction_part[0])\n    denominator = float(fraction_part[1])\n    weight = whole_part + numerator \/ denominator\n    \n    # Iterate through the pasta types and calculate the cost for each type\n    for i in range(len(pasta_df)):\n        pasta_name = pasta_df['Name'][i]\n        pasta_price = pasta_df['Price'][i]\n        pasta_cost = pasta_price * weight\n        total_cost += pasta_cost\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\npasta_df = pd.DataFrame({\n    'Name': ['farfalle pasta', 'rotini pasta', 'spirali pasta', 'penne pasta', 'rigatoni pasta'],\n    'Price': [7, 4, 3, 3, 6]\n})\n\n# Define the weight of pasta\npasta_weight = '1+7\/10'\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(pasta_df, pasta_weight))","table":"Name: None\nUnit: $\nContent:\nfarfalle pasta | $7\/lb\nrotini pasta | $4\/lb\nspirali pasta | $3\/lb\npenne pasta | $3\/lb\nrigatoni pasta | $6\/lb"}
{"level":5,"answer":0.0,"prediction":"import pandas as pd\n\ndef count_bags_with_2_lemon_candies(df):\n    \"\"\"\n    This function takes in a pandas dataframe of lemon-flavored candies per bag, and returns the number of bags that have exactly 2 lemon-flavored candies.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of lemon-flavored candies per bag.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of bags that have exactly 2 lemon-flavored candies.\n    \"\"\"\n    # Initialize the count of bags with exactly 2 lemon-flavored candies\n    count = 0\n    \n    # Iterate through the rows of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Calculate the total number of lemon-flavored candies in the bag\n        total_candies = stem * 10 + len(leaf)\n        \n        # Check if the bag has exactly 2 lemon-flavored candies\n        if total_candies == 2:\n            count += 1\n    \n    return count\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3, 4],\n    'Leaf': [[4, 5, 7, 8], [0, 4], [2, 6, 6, 8, 9], [1, 6, 7, 8], [3]]\n})\n# Call the tool to solve the problem\nprint(count_bags_with_2_lemon_candies(df))","question":"A machine at the candy factory dispensed different numbers of lemon-flavored candies into various bags. How many bags had exactly 2 lemon-flavored candies?","prediction_code":"import pandas as pd\n\ndef count_bags_with_2_lemon_candies(df):\n    \"\"\"\n    This function takes in a pandas dataframe of lemon-flavored candies per bag, and returns the number of bags that have exactly 2 lemon-flavored candies.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of lemon-flavored candies per bag.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of bags that have exactly 2 lemon-flavored candies.\n    \"\"\"\n    # Initialize the count of bags with exactly 2 lemon-flavored candies\n    count = 0\n    \n    # Iterate through the rows of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Calculate the total number of lemon-flavored candies in the bag\n        total_candies = stem * 10 + len(leaf)\n        \n        # Check if the bag has exactly 2 lemon-flavored candies\n        if total_candies == 2:\n            count += 1\n    \n    return count","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3, 4],\n    'Leaf': [[4, 5, 7, 8], [0, 4], [2, 6, 6, 8, 9], [1, 6, 7, 8], [3]]\n})\n# Call the tool to solve the problem\nprint(count_bags_with_2_lemon_candies(df))","table":"Name: Lemon-flavored candies per bag\nUnit: bags\nContent:\nStem | Leaf \n0 | 4, 5, 7, 8\n1 | 0, 4\n2 | 2, 6, 6, 8, 9\n3 | 1, 6, 7, 8\n4 | 3"}
{"level":4,"answer":49.0,"prediction":"import pandas as pd\n\ndef calculate_remaining_money(df, budget, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price list and a budget, and returns the remaining money after buying the specified items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    budget (float): The initial budget.\n    items (list): A list of items to buy.\n    Returns:\n    float: The remaining money after buying the specified items.\n    \"\"\"\n    # Initialize the remaining money\n    remaining_money = budget\n    \n    # Iterate through the items and subtract their prices from the remaining money\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            remaining_money -= item_price\n    \n    return remaining_money\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['badminton set', 'baseball bat', 'baseball helmet', 'football', 'scooter', 'tennis racquet'],\n    'Price': [19, 25, 13, 12, 38, 30]\n})\n\n# Set the budget\nbudget = 91\n\n# Set the items to buy\nitems = ['tennis racquet', 'football']\n\n# Call the tool to solve the problem\nremaining_money = calculate_remaining_money(df, budget, items)\n\n# Print out the answer\nprint(remaining_money)","question":"Liam has $91. How much money will Liam have left if he buys a tennis racquet and a football?","prediction_code":"import pandas as pd\n\ndef calculate_remaining_money(df, budget, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price list and a budget, and returns the remaining money after buying the specified items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    budget (float): The initial budget.\n    items (list): A list of items to buy.\n    Returns:\n    float: The remaining money after buying the specified items.\n    \"\"\"\n    # Initialize the remaining money\n    remaining_money = budget\n    \n    # Iterate through the items and subtract their prices from the remaining money\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            remaining_money -= item_price\n    \n    return remaining_money","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['badminton set', 'baseball bat', 'baseball helmet', 'football', 'scooter', 'tennis racquet'],\n    'Price': [19, 25, 13, 12, 38, 30]\n})\n\n# Set the budget\nbudget = 91\n\n# Set the items to buy\nitems = ['tennis racquet', 'football']\n\n# Call the tool to solve the problem\nremaining_money = calculate_remaining_money(df, budget, items)\n\n# Print out the answer\nprint(remaining_money)","table":"Name: None\nUnit: $\nContent:\nbadminton set | $19\nbaseball bat | $25\nbaseball helmet | $13\nfootball | $12\nscooter | $38\ntennis racquet | $30"}
{"level":6,"answer":7.5,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its price per pound and the quantity purchased.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per pound for different items with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item purchased in pounds.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price per pound for the item\n        price_per_pound = item_df['Price'].values[0]\n        \n        # Calculate the total cost\n        total_cost = price_per_pound * quantity\n        \n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['size 5 screws', 'size 1 screws', 'size 4 screws', 'size 6 screws', 'size 2 screws'],\n    'Price': [6, 9, 5, 5, 7]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'size 4 screws', 1.5))","question":"Jaylen purchased 1.5 pounds of size 4 screws. What was the total cost?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its price per pound and the quantity purchased.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per pound for different items with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item purchased in pounds.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price per pound for the item\n        price_per_pound = item_df['Price'].values[0]\n        \n        # Calculate the total cost\n        total_cost = price_per_pound * quantity\n        \n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['size 5 screws', 'size 1 screws', 'size 4 screws', 'size 6 screws', 'size 2 screws'],\n    'Price': [6, 9, 5, 5, 7]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'size 4 screws', 1.5))","table":"Name: None\nUnit: $\nContent:\nsize 5 screws | $6\/lb\nsize 1 screws | $9\/lb\nsize 4 screws | $5\/lb\nsize 6 screws | $5\/lb\nsize 2 screws | $7\/lb"}
{"level":7,"answer":3.0,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['microwave', 'television', 'CD', 'computer mouse', 'telephone'],\n    'Price': [93, 88, 17, 20, 25]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'computer mouse', 'CD'))","question":"How much more does a computer mouse cost than a CD?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['microwave', 'television', 'CD', 'computer mouse', 'telephone'],\n    'Price': [93, 88, 17, 20, 25]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'computer mouse', 'CD'))","table":"Name: None\nUnit: $\nContent:\nmicrowave | $93\ntelevision | $88\nCD | $17\ncomputer mouse | $20\ntelephone | $25"}
{"level":2,"answer":60.0,"prediction":"import pandas as pd\n\ndef calculate_total_bowls(df, num_tables):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of bowls per restaurant table and the number of tables, and returns the total number of bowls.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of restaurant tables and the number of bowls per table.\n    The DataFrame should have columns 'Number of restaurant tables' and 'Number of bowls'.\n    num_tables (int): The number of restaurant tables.\n    Returns:\n    int: The total number of bowls.\n    \"\"\"\n    # Filter the DataFrame for the specific number of tables\n    table_df = df[df['Number of restaurant tables'] == num_tables]\n    \n    # Get the number of bowls for the specific number of tables\n    num_bowls = table_df['Number of bowls'].values[0]\n    \n    # Calculate the total number of bowls\n    total_bowls = num_tables * num_bowls\n    \n    return total_bowls\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of restaurant tables': [1, 2, 3, 4, 5, 6],\n    'Number of bowls': [10, 20, 30, 40, 50, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_bowls(df, 6))","question":"Each restaurant table has 10 bowls. How many bowls are on 6 restaurant tables?","prediction_code":"import pandas as pd\n\ndef calculate_total_bowls(df, num_tables):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of bowls per restaurant table and the number of tables, and returns the total number of bowls.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of restaurant tables and the number of bowls per table.\n    The DataFrame should have columns 'Number of restaurant tables' and 'Number of bowls'.\n    num_tables (int): The number of restaurant tables.\n    Returns:\n    int: The total number of bowls.\n    \"\"\"\n    # Filter the DataFrame for the specific number of tables\n    table_df = df[df['Number of restaurant tables'] == num_tables]\n    \n    # Get the number of bowls for the specific number of tables\n    num_bowls = table_df['Number of bowls'].values[0]\n    \n    # Calculate the total number of bowls\n    total_bowls = num_tables * num_bowls\n    \n    return total_bowls","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of restaurant tables': [1, 2, 3, 4, 5, 6],\n    'Number of bowls': [10, 20, 30, 40, 50, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_bowls(df, 6))","table":"Name: None\nUnit: None\nContent:\nNumber of restaurant tables | Number of bowls\n1 | 10\n2 | 20\n3 | 30\n4 | 40\n5 | 50\n6 | ?"}
{"level":5,"answer":1807.8,"prediction":"import pandas as pd\n\ndef calculate_pay_after_taxes(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a pay stub and calculates the pay after taxes.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the pay stub information.\n    The DataFrame should have columns 'Employee', 'Pay period', 'Total earnings', 'Federal income tax', 'State income tax', 'Other taxes', 'Total taxes', 'Pay after taxes'.\n    Returns:\n    float: The pay after taxes.\n    \"\"\"\n    # Get the total earnings\n    total_earnings = df.loc[df['Employee'] == 'Total earnings', 'Total earnings'].values[0]\n    \n    # Get the total taxes\n    total_taxes = df.loc[df['Employee'] == 'Total taxes', 'Total taxes'].values[0]\n    \n    # Calculate the pay after taxes\n    pay_after_taxes = total_earnings - total_taxes\n    \n    return pay_after_taxes\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Employee': ['Raphael Cruz', 'Total earnings', 'Federal income tax', 'State income tax', 'Other taxes', 'Total taxes', 'Pay after taxes'],\n    'Pay period': ['November', '', '', '', '', '', ''],\n    'Total earnings': ['', '', '', '', '', '', 2400.00],\n    'Federal income tax': ['', 266.60, '', '', '', '', ''],\n    'State income tax': ['', '', 142.00, '', '', '', ''],\n    'Other taxes': ['', '', '', 183.60, '', '', ''],\n    'Total taxes': ['', '', '', '', '', '', '?'],\n    'Pay after taxes': ['', '', '', '', '', '', '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_pay_after_taxes(df))","question":"Look at Raphael's pay stub. Raphael lives in a state that has state income tax. How much did Raphael make after taxes?","prediction_code":"import pandas as pd\n\ndef calculate_pay_after_taxes(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a pay stub and calculates the pay after taxes.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the pay stub information.\n    The DataFrame should have columns 'Employee', 'Pay period', 'Total earnings', 'Federal income tax', 'State income tax', 'Other taxes', 'Total taxes', 'Pay after taxes'.\n    Returns:\n    float: The pay after taxes.\n    \"\"\"\n    # Get the total earnings\n    total_earnings = df.loc[df['Employee'] == 'Total earnings', 'Total earnings'].values[0]\n    \n    # Get the total taxes\n    total_taxes = df.loc[df['Employee'] == 'Total taxes', 'Total taxes'].values[0]\n    \n    # Calculate the pay after taxes\n    pay_after_taxes = total_earnings - total_taxes\n    \n    return pay_after_taxes","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Employee': ['Raphael Cruz', 'Total earnings', 'Federal income tax', 'State income tax', 'Other taxes', 'Total taxes', 'Pay after taxes'],\n    'Pay period': ['November', '', '', '', '', '', ''],\n    'Total earnings': ['', '', '', '', '', '', 2400.00],\n    'Federal income tax': ['', 266.60, '', '', '', '', ''],\n    'State income tax': ['', '', 142.00, '', '', '', ''],\n    'Other taxes': ['', '', '', 183.60, '', '', ''],\n    'Total taxes': ['', '', '', '', '', '', '?'],\n    'Pay after taxes': ['', '', '', '', '', '', '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_pay_after_taxes(df))","table":"Name: None\nUnit: $\nContent:\nEmployee | Pay period |\nRaphael Cruz | November |\nTotal earnings | | $2,400.00\nFederal income tax | $266.60 |\nState income tax | $142.00 |\nOther taxes | $183.60 |\nTotal taxes | | ?\nPay after taxes | | ?"}
{"level":8,"answer":8.0,"prediction":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of club membership and returns the mean of the number of members.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the club names and the number of members.\n    The dataframe should contain \"Club\" and \"Number of members\" columns.\n    Returns:\n    float: The mean of the number of members.\n    \"\"\"\n    # Calculate the mean of the number of members\n    mean = df['Number of members'].mean()\n    \n    return mean\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Club': ['physics club', 'math club', 'art club', 'geology club', 'history club', 'Japanese club'],\n    'Number of members': [8, 5, 9, 9, 9, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","question":"The local high school found out how many members each club had. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of club membership and returns the mean of the number of members.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the club names and the number of members.\n    The dataframe should contain \"Club\" and \"Number of members\" columns.\n    Returns:\n    float: The mean of the number of members.\n    \"\"\"\n    # Calculate the mean of the number of members\n    mean = df['Number of members'].mean()\n    \n    return mean","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Club': ['physics club', 'math club', 'art club', 'geology club', 'history club', 'Japanese club'],\n    'Number of members': [8, 5, 9, 9, 9, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","table":"Name: Club membership\nUnit: None\nContent:\nClub | Number of members\nphysics club | 8\nmath club | 5\nart club | 9\ngeology club | 9\nhistory club | 9\nJapanese club | 8"}
{"level":8,"answer":0.19,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['pink flamingo pen', 'beach postcard', 'palm tree magnet', 'plastic crab'],\n    'Price': [0.14, 0.83, 0.65, 0.46]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'palm tree magnet', 'plastic crab'))","question":"How much more does a palm tree magnet cost than a plastic crab?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['pink flamingo pen', 'beach postcard', 'palm tree magnet', 'plastic crab'],\n    'Price': [0.14, 0.83, 0.65, 0.46]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'palm tree magnet', 'plastic crab'))","table":"Name: None\nUnit: $\nContent:\npink flamingo pen | $0.14\nbeach postcard | $0.83\npalm tree magnet | $0.65\nplastic crab | $0.46"}
{"level":4,"answer":88.0,"prediction":"import pandas as pd\n\ndef find_largest_number_of_cows(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of cows per farm and returns the largest number of cows.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of cows per farm.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of cows.\n    \"\"\"\n    # prepare a list to store the number of cows on each farm\n    cows = []\n    # iterate through each row of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the number of cows on each farm\n        for j in range(len(leaf)):\n            cows.append(stem * 10 + leaf[j])\n    # find the largest number of cows\n    largest_number_of_cows = max(cows)\n    return largest_number_of_cows\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[0, 3, 5], [2, 7], [], [7, 9], [0, 1, 2], [3, 4], [0, 4, 7, 8]]\n})\n# Call the tool to solve the problem\nprint(find_largest_number_of_cows(df))","question":"A researcher recorded the number of cows on each farm in the county. What is the largest number of cows?","prediction_code":"import pandas as pd\n\ndef find_largest_number_of_cows(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of cows per farm and returns the largest number of cows.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of cows per farm.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of cows.\n    \"\"\"\n    # prepare a list to store the number of cows on each farm\n    cows = []\n    # iterate through each row of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the number of cows on each farm\n        for j in range(len(leaf)):\n            cows.append(stem * 10 + leaf[j])\n    # find the largest number of cows\n    largest_number_of_cows = max(cows)\n    return largest_number_of_cows","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[0, 3, 5], [2, 7], [], [7, 9], [0, 1, 2], [3, 4], [0, 4, 7, 8]]\n})\n# Call the tool to solve the problem\nprint(find_largest_number_of_cows(df))","table":"Name: Cows per farm\nUnit: cows\nContent:\nStem | Leaf \n2 | 0, 3, 5\n3 | 2, 7\n4 | \n5 | 7, 9\n6 | 0, 1, 2\n7 | 3, 4\n8 | 0, 4, 7, 8"}
{"level":7,"answer":3.0,"prediction":"import pandas as pd\n\ndef count_shipments_with_76_broken_plates(df):\n    \"\"\"\n    This function takes in a pandas dataframe of broken plates per shipment and returns the number of shipments that had exactly 76 broken plates.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken plates per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of shipments that had exactly 76 broken plates.\n    \"\"\"\n    # prepare a list to calculate the number of broken plates in each shipment\n    broken_plates = []\n    # calculate the total number of broken plates in each shipment\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            broken_plates.append(stem * 10 + leaf[j])\n    # filter the shipments where the total number of broken plates is equal to 76\n    filtered = [plates for plates in broken_plates if plates == 76]\n    # count the number of shipments\n    num_shipments = len(filtered)\n    return num_shipments\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[1, 1, 7], [1, 7, 9], [6], [9], [4], [6, 6, 6], [6], [0]]\n})\n# Call the tool to solve the problem\nprint(count_shipments_with_76_broken_plates(df))","question":"A pottery factory kept track of the number of broken plates per shipment last week. How many shipments had exactly 76 broken plates?","prediction_code":"import pandas as pd\n\ndef count_shipments_with_76_broken_plates(df):\n    \"\"\"\n    This function takes in a pandas dataframe of broken plates per shipment and returns the number of shipments that had exactly 76 broken plates.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken plates per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of shipments that had exactly 76 broken plates.\n    \"\"\"\n    # prepare a list to calculate the number of broken plates in each shipment\n    broken_plates = []\n    # calculate the total number of broken plates in each shipment\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            broken_plates.append(stem * 10 + leaf[j])\n    # filter the shipments where the total number of broken plates is equal to 76\n    filtered = [plates for plates in broken_plates if plates == 76]\n    # count the number of shipments\n    num_shipments = len(filtered)\n    return num_shipments","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[1, 1, 7], [1, 7, 9], [6], [9], [4], [6, 6, 6], [6], [0]]\n})\n# Call the tool to solve the problem\nprint(count_shipments_with_76_broken_plates(df))","table":"Name: Broken plates per shipment\nUnit: shipments\nContent:\nStem | Leaf \n2 | 1, 1, 7\n3 | 1, 7, 9\n4 | 6\n5 | 9\n6 | 4\n7 | 6, 6, 6\n8 | 6\n9 | 0"}
{"level":3,"answer":2449.0,"prediction":"import pandas as pd\n\ndef calculate_web_pages_difference(df, person1, person2):\n    \"\"\"\n    This function takes in a pandas DataFrame of web pages visited by different people and returns the difference in the number of web pages visited by two specific people.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of web pages visited by different people.\n    The DataFrame should have \"Person\" and \"Number of Web pages\" columns.\n    person1 (str): The name of the first person.\n    person2 (str): The name of the second person.\n    Returns:\n    int: The difference in the number of web pages visited by person2 and person1.\n    \"\"\"\n    # Filter the DataFrame for the specific people\n    person1_df = df[df['Person'] == person1]\n    person2_df = df[df['Person'] == person2]\n    \n    # Get the number of web pages visited by each person\n    person1_pages = person1_df['Number of Web pages'].values[0]\n    person2_pages = person2_df['Number of Web pages'].values[0]\n    \n    # Calculate the difference in the number of web pages visited\n    difference = person2_pages - person1_pages\n    \n    return difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Person': ['Allie', 'Hanson', 'Finn', 'Joe'],\n    'Number of Web pages': [2084, 3532, 4988, 1083]\n})\n# Call the tool to solve the problem\nprint(calculate_web_pages_difference(df, 'Hanson', 'Joe'))","question":"Several people compared how many Web pages they had visited. How many more Web pages did Hanson visit than Joe?","prediction_code":"import pandas as pd\n\ndef calculate_web_pages_difference(df, person1, person2):\n    \"\"\"\n    This function takes in a pandas DataFrame of web pages visited by different people and returns the difference in the number of web pages visited by two specific people.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of web pages visited by different people.\n    The DataFrame should have \"Person\" and \"Number of Web pages\" columns.\n    person1 (str): The name of the first person.\n    person2 (str): The name of the second person.\n    Returns:\n    int: The difference in the number of web pages visited by person2 and person1.\n    \"\"\"\n    # Filter the DataFrame for the specific people\n    person1_df = df[df['Person'] == person1]\n    person2_df = df[df['Person'] == person2]\n    \n    # Get the number of web pages visited by each person\n    person1_pages = person1_df['Number of Web pages'].values[0]\n    person2_pages = person2_df['Number of Web pages'].values[0]\n    \n    # Calculate the difference in the number of web pages visited\n    difference = person2_pages - person1_pages\n    \n    return difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Person': ['Allie', 'Hanson', 'Finn', 'Joe'],\n    'Number of Web pages': [2084, 3532, 4988, 1083]\n})\n# Call the tool to solve the problem\nprint(calculate_web_pages_difference(df, 'Hanson', 'Joe'))","table":"Name: Web pages visited\nUnit: Web pages\nContent:\nPerson | Number of Web pages\nAllie | 2,084\nHanson | 3,532\nFinn | 4,988\nJoe | 1,083"}
{"level":3,"answer":0.08,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['brass clip', 'elastic band', 'gold tack', 'four-inch nail', 'small metal hook'],\n    'Price': [0.08, 0.03, 0.05, 0.03, 0.01]\n})\n\n# Define the items to be purchased\nitems = ['gold tack', 'elastic band']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Sasha need to buy a gold tack and an elastic band?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['brass clip', 'elastic band', 'gold tack', 'four-inch nail', 'small metal hook'],\n    'Price': [0.08, 0.03, 0.05, 0.03, 0.01]\n})\n\n# Define the items to be purchased\nitems = ['gold tack', 'elastic band']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nbrass clip | $0.08\nelastic band | $0.03\ngold tack | $0.05\nfour-inch nail | $0.03\nsmall metal hook | $0.01"}
{"level":8,"answer":8.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, month1, month2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average waiting time at a doctor's office and two months, and returns the rate of change between the two months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average waiting time at the doctor's office.\n    The DataFrame should have \"Month\" and \"Waiting time (minutes)\" columns.\n    month1 (str): The first month for calculating the rate of change.\n    month2 (str): The second month for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two months.\n    \"\"\"\n    # Filter the DataFrame for the two months\n    month1_df = df[df['Month'] == month1]\n    month2_df = df[df['Month'] == month2]\n    \n    # Get the waiting time for each month\n    waiting_time1 = month1_df['Waiting time (minutes)'].values[0]\n    waiting_time2 = month2_df['Waiting time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (waiting_time2 - waiting_time1) \/ waiting_time1\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['March', 'April', 'May', 'June', 'July'],\n    'Waiting time (minutes)': [25, 24, 28, 22, 30]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'June', 'July'))","question":"Jim, a doctor's office receptionist, tracked the average waiting time at the office each month. According to the table, what was the rate of change between June and July?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, month1, month2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average waiting time at a doctor's office and two months, and returns the rate of change between the two months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average waiting time at the doctor's office.\n    The DataFrame should have \"Month\" and \"Waiting time (minutes)\" columns.\n    month1 (str): The first month for calculating the rate of change.\n    month2 (str): The second month for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two months.\n    \"\"\"\n    # Filter the DataFrame for the two months\n    month1_df = df[df['Month'] == month1]\n    month2_df = df[df['Month'] == month2]\n    \n    # Get the waiting time for each month\n    waiting_time1 = month1_df['Waiting time (minutes)'].values[0]\n    waiting_time2 = month2_df['Waiting time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (waiting_time2 - waiting_time1) \/ waiting_time1\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['March', 'April', 'May', 'June', 'July'],\n    'Waiting time (minutes)': [25, 24, 28, 22, 30]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'June', 'July'))","table":"Name: Average waiting time at a doctor's office\nUnit: minutes per month\nContent:\nMonth | Waiting time (minutes)\nMarch | 25\nApril | 24\nMay | 28\nJune | 22\nJuly | 30"}
{"level":4,"answer":0.06,"prediction":"import pandas as pd\n\ndef calculate_remaining_money(df, budget, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price list and a budget, and a list of items to buy.\n    It returns the remaining money after buying the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    budget (float): The budget for buying the items.\n    items (list): A list of items to buy.\n    Returns:\n    float: The remaining money after buying the items.\n    \"\"\"\n    # Initialize the remaining money\n    remaining_money = budget\n    \n    # Iterate through the items and subtract their prices from the remaining money\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            remaining_money -= item_price\n    \n    return remaining_money\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['pink striped glass bead', 'long red bead', 'pearl bead', 'orange and yellow striped bead', 'shiny red bead'],\n    'Price': [0.05, 0.07, 0.05, 0.06, 0.09]\n})\n\n# Set the budget and items to buy\nbudget = 0.17\nitems = ['pearl bead', 'orange and yellow striped bead']\n\n# Call the tool to solve the problem\nremaining_money = calculate_remaining_money(df, budget, items)\n\n# Print out the answer\nprint(remaining_money)","question":"Addison has $0.17. How much money will Addison have left if she buys a pearl bead and an orange and yellow striped bead?","prediction_code":"import pandas as pd\n\ndef calculate_remaining_money(df, budget, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price list and a budget, and a list of items to buy.\n    It returns the remaining money after buying the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    budget (float): The budget for buying the items.\n    items (list): A list of items to buy.\n    Returns:\n    float: The remaining money after buying the items.\n    \"\"\"\n    # Initialize the remaining money\n    remaining_money = budget\n    \n    # Iterate through the items and subtract their prices from the remaining money\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            remaining_money -= item_price\n    \n    return remaining_money","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['pink striped glass bead', 'long red bead', 'pearl bead', 'orange and yellow striped bead', 'shiny red bead'],\n    'Price': [0.05, 0.07, 0.05, 0.06, 0.09]\n})\n\n# Set the budget and items to buy\nbudget = 0.17\nitems = ['pearl bead', 'orange and yellow striped bead']\n\n# Call the tool to solve the problem\nremaining_money = calculate_remaining_money(df, budget, items)\n\n# Print out the answer\nprint(remaining_money)","table":"Name: None\nUnit: $\nContent:\npink striped glass bead | $0.05\nlong red bead | $0.07\npearl bead | $0.05\norange and yellow striped bead | $0.06\nshiny red bead | $0.09"}
{"level":7,"answer":17.0,"prediction":"import pandas as pd\n\ndef count_students_with_more_than_5_stuffed_animals(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of stuffed animals collected by students and returns the number of students who have more than 5 stuffed animals.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of stuffed animals collected by students.\n    The dataframe should contain \"Number of stuffed animals\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who have more than 5 stuffed animals.\n    \"\"\"\n    # Filter the DataFrame for students who have more than 5 stuffed animals\n    filtered_df = df[df['Number of stuffed animals'] > 5]\n    \n    # Calculate the total number of students\n    num_students = filtered_df['Frequency'].sum()\n    \n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of stuffed animals': [0, 1, 2, 3, 4, 5, 6],\n    'Frequency': [11, 19, 18, 5, 16, 2, 17]\n})\n# Call the tool to solve the problem\nprint(count_students_with_more_than_5_stuffed_animals(df))","question":"As part of a stuffed animal drive for the local children's hospital, the students at Shah Elementary School record how many stuffed animals they have collected. How many students have more than 5 stuffed animals?","prediction_code":"import pandas as pd\n\ndef count_students_with_more_than_5_stuffed_animals(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of stuffed animals collected by students and returns the number of students who have more than 5 stuffed animals.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of stuffed animals collected by students.\n    The dataframe should contain \"Number of stuffed animals\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who have more than 5 stuffed animals.\n    \"\"\"\n    # Filter the DataFrame for students who have more than 5 stuffed animals\n    filtered_df = df[df['Number of stuffed animals'] > 5]\n    \n    # Calculate the total number of students\n    num_students = filtered_df['Frequency'].sum()\n    \n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of stuffed animals': [0, 1, 2, 3, 4, 5, 6],\n    'Frequency': [11, 19, 18, 5, 16, 2, 17]\n})\n# Call the tool to solve the problem\nprint(count_students_with_more_than_5_stuffed_animals(df))","table":"Name: Stuffed animals\nUnit: None\nContent:\nNumber of stuffed animals | Frequency\n0 | 11\n1 | 19\n2 | 18\n3 | 5\n4 | 16\n5 | 2\n6 | 17"}
{"level":1,"answer":30.0,"prediction":"import pandas as pd\n\ndef calculate_butterflies(df, num_branches):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of butterflies per branch and the number of branches, and returns the total number of butterflies.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of butterflies per branch.\n    The dataframe should contain \"Number of branches\" and \"Number of butterflies\" columns.\n    num_branches (int): The number of branches to calculate the total number of butterflies.\n    Returns:\n    int: The total number of butterflies on the specified number of branches.\n    \"\"\"\n    # Filter the DataFrame for the specified number of branches\n    filtered_df = df[df['Number of branches'] == num_branches]\n    \n    # Get the number of butterflies from the filtered DataFrame\n    num_butterflies = filtered_df['Number of butterflies'].values[0]\n    \n    return num_butterflies\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of branches': [1, 2, 3, 4, 5, 6],\n    'Number of butterflies': [5, 10, 15, 20, 25, '?']\n})\n\n# Call the tool to solve the problem\nnum_butterflies = calculate_butterflies(df, 6)\n\n# Print out the answer\nprint(num_butterflies)","question":"Each branch has 5 butterflies. How many butterflies are on 6 branches?","prediction_code":"import pandas as pd\n\ndef calculate_butterflies(df, num_branches):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of butterflies per branch and the number of branches, and returns the total number of butterflies.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of butterflies per branch.\n    The dataframe should contain \"Number of branches\" and \"Number of butterflies\" columns.\n    num_branches (int): The number of branches to calculate the total number of butterflies.\n    Returns:\n    int: The total number of butterflies on the specified number of branches.\n    \"\"\"\n    # Filter the DataFrame for the specified number of branches\n    filtered_df = df[df['Number of branches'] == num_branches]\n    \n    # Get the number of butterflies from the filtered DataFrame\n    num_butterflies = filtered_df['Number of butterflies'].values[0]\n    \n    return num_butterflies","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of branches': [1, 2, 3, 4, 5, 6],\n    'Number of butterflies': [5, 10, 15, 20, 25, '?']\n})\n\n# Call the tool to solve the problem\nnum_butterflies = calculate_butterflies(df, 6)\n\n# Print out the answer\nprint(num_butterflies)","table":"Name: None\nUnit: butterflies\nContent:\nNumber of branches | Number of butterflies\n1 | 5\n2 | 10\n3 | 15\n4 | 20\n5 | 25\n6 | ?"}
{"level":8,"answer":10.0,"prediction":"import pandas as pd\n\ndef find_most_common_score(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of scores in a trivia game and returns the score that was received by the greatest number of people.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the scores and their frequencies.\n    The dataframe should contain \"Score\" and \"Frequency\" columns.\n    Returns:\n    int: The score that was received by the greatest number of people.\n    \"\"\"\n    # Find the index of the row with the maximum frequency\n    max_freq_index = df['Frequency'].idxmax()\n    \n    # Get the score corresponding to the maximum frequency\n    most_common_score = df.loc[max_freq_index, 'Score']\n    \n    return most_common_score\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Score': [5, 6, 7, 8, 9, 10],\n    'Frequency': [7, 11, 1, 12, 6, 20]\n})\n# Call the tool to solve the problem\nprint(find_most_common_score(df))","question":"The coach of the Academic Bowl recorded the scores in a trivia game to determine who would represent the school at the regional competition. Which score did the greatest number of people receive?","prediction_code":"import pandas as pd\n\ndef find_most_common_score(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of scores in a trivia game and returns the score that was received by the greatest number of people.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the scores and their frequencies.\n    The dataframe should contain \"Score\" and \"Frequency\" columns.\n    Returns:\n    int: The score that was received by the greatest number of people.\n    \"\"\"\n    # Find the index of the row with the maximum frequency\n    max_freq_index = df['Frequency'].idxmax()\n    \n    # Get the score corresponding to the maximum frequency\n    most_common_score = df.loc[max_freq_index, 'Score']\n    \n    return most_common_score","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Score': [5, 6, 7, 8, 9, 10],\n    'Frequency': [7, 11, 1, 12, 6, 20]\n})\n# Call the tool to solve the problem\nprint(find_most_common_score(df))","table":"Name: Scores in a trivia game\nUnit: None\nContent:\nScore | Frequency\n5 | 7\n6 | 11\n7 | 1\n8 | 12\n9 | 6\n10 | 20"}
{"level":7,"answer":8.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of laps swum and returns the median of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of laps swum.\n    The dataframe should contain \"Day\" and \"Number of laps\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    laps = df['Number of laps']\n    \n    # Calculate the median\n    median = laps.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday'],\n    'Number of laps': [5, 10, 6, 8, 10]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"Alvin kept track of how many laps he swam during the past 5 days. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of laps swum and returns the median of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of laps swum.\n    The dataframe should contain \"Day\" and \"Number of laps\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    laps = df['Number of laps']\n    \n    # Calculate the median\n    median = laps.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday'],\n    'Number of laps': [5, 10, 6, 8, 10]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Laps swum\nUnit: None\nContent:\nDay | Number of laps\nThursday | 5\nFriday | 10\nSaturday | 6\nSunday | 8\nMonday | 10"}
{"level":3,"answer":4422.0,"prediction":"import pandas as pd\n\ndef calculate_total_apples_picked(df, days):\n    \"\"\"\n    This function takes in a pandas DataFrame of apples picked and a list of days, and returns the total number of apples picked on those days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of apples picked per day.\n    The DataFrame should have columns 'Day' and 'Number of apples'.\n    days (list): A list of days for which the total number of apples picked is to be calculated.\n    Returns:\n    int: The total number of apples picked on the specified days.\n    \"\"\"\n    # Filter the DataFrame for the specified days\n    filtered_df = df[df['Day'].isin(days)]\n    \n    # Calculate the total number of apples picked on the specified days\n    total_apples_picked = filtered_df['Number of apples'].sum()\n    \n    return total_apples_picked\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Number of apples': [3840, 2702, 5059, 1720]\n})\n\n# Specify the days for which the total number of apples picked is to be calculated\ndays = ['Wednesday', 'Friday']\n\n# Call the tool to solve the problem\nprint(calculate_total_apples_picked(df, days))","question":"The owner of an orchard kept records about how many apples were picked in the past 4 days. How many apples in total were picked on Wednesday and Friday?","prediction_code":"import pandas as pd\n\ndef calculate_total_apples_picked(df, days):\n    \"\"\"\n    This function takes in a pandas DataFrame of apples picked and a list of days, and returns the total number of apples picked on those days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of apples picked per day.\n    The DataFrame should have columns 'Day' and 'Number of apples'.\n    days (list): A list of days for which the total number of apples picked is to be calculated.\n    Returns:\n    int: The total number of apples picked on the specified days.\n    \"\"\"\n    # Filter the DataFrame for the specified days\n    filtered_df = df[df['Day'].isin(days)]\n    \n    # Calculate the total number of apples picked on the specified days\n    total_apples_picked = filtered_df['Number of apples'].sum()\n    \n    return total_apples_picked","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Number of apples': [3840, 2702, 5059, 1720]\n})\n\n# Specify the days for which the total number of apples picked is to be calculated\ndays = ['Wednesday', 'Friday']\n\n# Call the tool to solve the problem\nprint(calculate_total_apples_picked(df, days))","table":"Name: Apples picked\nUnit: apples\nContent:\nDay | Number of apples\nTuesday | 3,840\nWednesday | 2,702\nThursday | 5,059\nFriday | 1,720"}
{"level":2,"answer":40.0,"prediction":"import pandas as pd\n\ndef calculate_total_cooks(df, num_places):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of pizza places and the number of cooks per place, and returns the total number of cooks in a given number of pizza places.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of pizza places and the number of cooks per place with columns 'Number of pizza places' and 'Number of cooks'.\n    num_places (int): The number of pizza places to consider.\n    Returns:\n    int: The total number of cooks in the given number of pizza places.\n    \"\"\"\n    # Filter the DataFrame for the given number of pizza places\n    filtered_df = df[df['Number of pizza places'] == num_places]\n    \n    # Get the number of cooks for the given number of pizza places\n    num_cooks = filtered_df['Number of cooks'].values[0]\n    \n    # Calculate the total number of cooks in the given number of pizza places\n    total_cooks = num_cooks * num_places\n    \n    return total_cooks\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of pizza places': [1, 2, 3, 4],\n    'Number of cooks': [10, 20, 30, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cooks(df, 4))","question":"Each pizza place has 10 cooks. How many cooks are in 4 pizza places?","prediction_code":"import pandas as pd\n\ndef calculate_total_cooks(df, num_places):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of pizza places and the number of cooks per place, and returns the total number of cooks in a given number of pizza places.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of pizza places and the number of cooks per place with columns 'Number of pizza places' and 'Number of cooks'.\n    num_places (int): The number of pizza places to consider.\n    Returns:\n    int: The total number of cooks in the given number of pizza places.\n    \"\"\"\n    # Filter the DataFrame for the given number of pizza places\n    filtered_df = df[df['Number of pizza places'] == num_places]\n    \n    # Get the number of cooks for the given number of pizza places\n    num_cooks = filtered_df['Number of cooks'].values[0]\n    \n    # Calculate the total number of cooks in the given number of pizza places\n    total_cooks = num_cooks * num_places\n    \n    return total_cooks","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of pizza places': [1, 2, 3, 4],\n    'Number of cooks': [10, 20, 30, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cooks(df, 4))","table":"Name: None\nUnit: None\nContent:\nNumber of pizza places | Number of cooks\n1 | 10\n2 | 20\n3 | 30\n4 | ?"}
{"level":7,"answer":4.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trivia game scores and returns the range of the scores.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and scores of the players.\n    The dataframe should contain \"Name\" and \"Score\" columns.\n    Returns:\n    int: The range of the scores.\n    \"\"\"\n    # Get the minimum and maximum scores\n    min_score = df['Score'].min()\n    max_score = df['Score'].max()\n    \n    # Calculate the range\n    score_range = max_score - min_score\n    \n    return score_range\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Sofia', 'Dwayne', 'Omar', 'Cassie', 'Walter', 'Irma', 'Maggie', 'Ken'],\n    'Score': [4, 3, 2, 3, 5, 4, 1, 2]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"Some friends played a trivia game and recorded their scores. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trivia game scores and returns the range of the scores.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and scores of the players.\n    The dataframe should contain \"Name\" and \"Score\" columns.\n    Returns:\n    int: The range of the scores.\n    \"\"\"\n    # Get the minimum and maximum scores\n    min_score = df['Score'].min()\n    max_score = df['Score'].max()\n    \n    # Calculate the range\n    score_range = max_score - min_score\n    \n    return score_range","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Sofia', 'Dwayne', 'Omar', 'Cassie', 'Walter', 'Irma', 'Maggie', 'Ken'],\n    'Score': [4, 3, 2, 3, 5, 4, 1, 2]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Trivia game scores\nUnit: None\nContent:\nName | Score\nSofia | 4\nDwayne | 3\nOmar | 2\nCassie | 3\nWalter | 5\nIrma | 4\nMaggie | 1\nKen | 2"}
{"level":6,"answer":0.3,"prediction":"import pandas as pd\n\ndef calculate_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the cost of a given quantity of an item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = quantity * item_price\n        return total_cost\n    else:\n        return None\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['black olives', 'Greek olives', 'Spanish olives', 'green olives', 'Kalamata olives', 'pimento olives'],\n    'Price': [2, 3, 2, 3, 2, 2]\n})\n# Call the tool to solve the problem\nprint(calculate_cost(df, 'green olives', 1\/10))","question":"Colleen buys 1\/10 of a kilogram of green olives. How much does she spend?","prediction_code":"import pandas as pd\n\ndef calculate_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the cost of a given quantity of an item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = quantity * item_price\n        return total_cost\n    else:\n        return None","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['black olives', 'Greek olives', 'Spanish olives', 'green olives', 'Kalamata olives', 'pimento olives'],\n    'Price': [2, 3, 2, 3, 2, 2]\n})\n# Call the tool to solve the problem\nprint(calculate_cost(df, 'green olives', 1\/10))","table":"Name: None\nUnit: $\nContent:\nblack olives | $2\/kilogram\nGreek olives | $3\/kilogram\nSpanish olives | $2\/kilogram\ngreen olives | $3\/kilogram\nKalamata olives | $2\/kilogram\npimento olives | $2\/kilogram"}
{"level":6,"answer":2.4,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its weight.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per kilogram for different items.\n    item (str): The name of the item.\n    weight (float): The weight of the item in kilograms.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price per kilogram for the item\n    price_per_kg = item_df['Unit'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price_per_kg * weight\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['silk scraps', 'denim scraps', 'lace scraps', 'felt scraps'],\n    'Unit': [3, 6, 6, 3]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'lace scraps', 0.4))","question":"Shawn purchased 0.4 kilograms of lace scraps. What was the total cost?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its weight.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per kilogram for different items.\n    item (str): The name of the item.\n    weight (float): The weight of the item in kilograms.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price per kilogram for the item\n    price_per_kg = item_df['Unit'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price_per_kg * weight\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['silk scraps', 'denim scraps', 'lace scraps', 'felt scraps'],\n    'Unit': [3, 6, 6, 3]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'lace scraps', 0.4))","table":"Name: None\nUnit: $\nContent:\nsilk scraps | $3\/kg\ndenim scraps | $6\/kg\nlace scraps | $6\/kg\nfelt scraps | $3\/kg"}
{"level":7,"answer":22.0,"prediction":"import pandas as pd\n\ndef count_people_with_fewer_than_3_photos(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of photographs taken by each person and returns the number of people who took fewer than 3 photographs.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of photographs taken by each person.\n    The DataFrame should contain \"Photographs taken\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who took fewer than 3 photographs.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of photographs taken is less than 3\n    filtered_df = df[df['Photographs taken'] < 3]\n    \n    # Calculate the total number of people who took fewer than 3 photographs\n    num_people = filtered_df['Frequency'].sum()\n    \n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Photographs taken': [0, 1, 2, 3, 4],\n    'Frequency': [13, 6, 3, 17, 20]\n})\n# Call the tool to solve the problem\nprint(count_people_with_fewer_than_3_photos(df))","question":"While compiling photos for an album, Lily noted the number of photographs taken by each of her friends and family. How many people took fewer than 3 photographs?","prediction_code":"import pandas as pd\n\ndef count_people_with_fewer_than_3_photos(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of photographs taken by each person and returns the number of people who took fewer than 3 photographs.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of photographs taken by each person.\n    The DataFrame should contain \"Photographs taken\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who took fewer than 3 photographs.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of photographs taken is less than 3\n    filtered_df = df[df['Photographs taken'] < 3]\n    \n    # Calculate the total number of people who took fewer than 3 photographs\n    num_people = filtered_df['Frequency'].sum()\n    \n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Photographs taken': [0, 1, 2, 3, 4],\n    'Frequency': [13, 6, 3, 17, 20]\n})\n# Call the tool to solve the problem\nprint(count_people_with_fewer_than_3_photos(df))","table":"Name: Taking photographs\nUnit: None\nContent:\nPhotographs taken | Frequency\n0 | 13\n1 | 6\n2 | 3\n3 | 17\n4 | 20"}
{"level":6,"answer":9.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of lawn mowers sold and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of lawn mowers sold.\n    The dataframe should contain \"Day\" and \"Number of lawn mowers\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of lawn mowers']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday'],\n    'Number of lawn mowers': [3, 9, 10, 6, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"A garden supply store kept track of how many lawn mowers it sold in the past 5 days. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of lawn mowers sold and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of lawn mowers sold.\n    The dataframe should contain \"Day\" and \"Number of lawn mowers\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of lawn mowers']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday'],\n    'Number of lawn mowers': [3, 9, 10, 6, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Lawn mowers sold\nUnit: None\nContent:\nDay | Number of lawn mowers\nThursday | 3\nFriday | 9\nSaturday | 10\nSunday | 6\nMonday | 9"}
{"level":8,"answer":315.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(ticket_df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ticket price table and a dictionary of orders, and returns the total cost of the orders using pandas.\n    Args:\n    ticket_df (pd.DataFrame): A pandas DataFrame containing ticket names and their prices with columns 'Ticket' and 'Price'.\n    orders (dict): A dictionary where the keys are ticket names and the values are the number of tickets for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the ticket items and calculate the cost for each ordered item\n    for ticket, quantity in orders.items():\n        # Filter the DataFrame for the specific ticket\n        ticket_price_df = ticket_df[ticket_df['Ticket'] == ticket]\n        if not ticket_price_df.empty:\n            ticket_price = ticket_price_df['Price'].values[0]\n            total_cost += quantity * ticket_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ticket': ['basketball ticket', 'hockey ticket', 'dance performance ticket', 'symphony ticket', 'football ticket'],\n    'Price': [41, 41, 31, 48, 77]\n})\n\n# Initialize the orders dictionary\norders = {\n    'symphony ticket': 4,\n    'basketball ticket': 3\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","question":"How much money does Andrew need to buy 4 symphony tickets and 3 basketball tickets?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(ticket_df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ticket price table and a dictionary of orders, and returns the total cost of the orders using pandas.\n    Args:\n    ticket_df (pd.DataFrame): A pandas DataFrame containing ticket names and their prices with columns 'Ticket' and 'Price'.\n    orders (dict): A dictionary where the keys are ticket names and the values are the number of tickets for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the ticket items and calculate the cost for each ordered item\n    for ticket, quantity in orders.items():\n        # Filter the DataFrame for the specific ticket\n        ticket_price_df = ticket_df[ticket_df['Ticket'] == ticket]\n        if not ticket_price_df.empty:\n            ticket_price = ticket_price_df['Price'].values[0]\n            total_cost += quantity * ticket_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ticket': ['basketball ticket', 'hockey ticket', 'dance performance ticket', 'symphony ticket', 'football ticket'],\n    'Price': [41, 41, 31, 48, 77]\n})\n\n# Initialize the orders dictionary\norders = {\n    'symphony ticket': 4,\n    'basketball ticket': 3\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","table":"Name: None\nUnit: $\nContent:\nbasketball ticket | $41\nhockey ticket | $41\ndance performance ticket | $31\nsymphony ticket | $48\nfootball ticket | $77"}
{"level":7,"answer":4.0,"prediction":"import pandas as pd\n\ndef count_buildings_with_87_bricks(df):\n    \"\"\"\n    This function takes in a pandas dataframe of bricks per building, and returns the number of buildings that have exactly 87 bricks.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of bricks per building.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of buildings that have exactly 87 bricks.\n    \"\"\"\n    # prepare a list to calculate the number of bricks in each building\n    bricks = []\n    # calculate the total number of bricks in each building\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            bricks.append(stem * 10 + leaf[j])\n    # filter the buildings where the total number of bricks is equal to 87\n    filtered = [brick for brick in bricks if brick == 87]\n    # count the number of buildings\n    num_buildings = len(filtered)\n    return num_buildings\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [6, 7, 8, 9],\n    'Leaf': [[0, 6], [0, 6, 8], [2, 5, 7, 7, 7, 7], [0]]\n})\n# Call the tool to solve the problem\nprint(count_buildings_with_87_bricks(df))","question":"The architecture student counted the number of bricks in each building in her neighborhood. How many buildings have exactly 87 bricks?","prediction_code":"import pandas as pd\n\ndef count_buildings_with_87_bricks(df):\n    \"\"\"\n    This function takes in a pandas dataframe of bricks per building, and returns the number of buildings that have exactly 87 bricks.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of bricks per building.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of buildings that have exactly 87 bricks.\n    \"\"\"\n    # prepare a list to calculate the number of bricks in each building\n    bricks = []\n    # calculate the total number of bricks in each building\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            bricks.append(stem * 10 + leaf[j])\n    # filter the buildings where the total number of bricks is equal to 87\n    filtered = [brick for brick in bricks if brick == 87]\n    # count the number of buildings\n    num_buildings = len(filtered)\n    return num_buildings","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [6, 7, 8, 9],\n    'Leaf': [[0, 6], [0, 6, 8], [2, 5, 7, 7, 7, 7], [0]]\n})\n# Call the tool to solve the problem\nprint(count_buildings_with_87_bricks(df))","table":"Name: Bricks per building\nUnit: buildings\nContent:\nStem | Leaf \n6 | 0, 6\n7 | 0, 6, 8\n8 | 2, 5, 7, 7, 7, 7\n9 | 0"}
{"level":6,"answer":7.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item given the quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item in kilograms.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price per kilogram\n        price = item_df['Price'].values[0]\n        \n        # Calculate the total cost\n        total_cost = price * quantity\n        return total_cost\n    else:\n        return None\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['puffed rice bars', 'cream cheese bars', 'coffee cake', 'lemon bars', 'blueberry bars', 'popcorn balls'],\n    'Price': [3, 3, 1, 2, 2, 2]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'lemon bars', 3.5))","question":"William buys 3+1\/2 kilograms of lemon bars. How much does he spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item given the quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item in kilograms.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price per kilogram\n        price = item_df['Price'].values[0]\n        \n        # Calculate the total cost\n        total_cost = price * quantity\n        return total_cost\n    else:\n        return None","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['puffed rice bars', 'cream cheese bars', 'coffee cake', 'lemon bars', 'blueberry bars', 'popcorn balls'],\n    'Price': [3, 3, 1, 2, 2, 2]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'lemon bars', 3.5))","table":"Name: None\nUnit: $\nContent:\npuffed rice bars | $3 per kilogram\ncream cheese bars | $3 per kilogram\ncoffee cake | $1 per kilogram\nlemon bars | $2 per kilogram\nblueberry bars | $2 per kilogram\npopcorn balls | $2 per kilogram"}
{"level":1,"answer":40.0,"prediction":"import pandas as pd\n\ndef calculate_total_beads(df, num_bags):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of plastic beads per bag and the number of bags, and returns the total number of plastic beads.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of plastic beads per bag.\n    The dataframe should contain \"Number of bags\" and \"Number of plastic beads\" columns.\n    num_bags (int): The number of bags.\n    Returns:\n    int: The total number of plastic beads.\n    \"\"\"\n    # Filter the DataFrame for the specific number of bags\n    bags_df = df[df['Number of bags'] == num_bags]\n    \n    # Get the number of plastic beads for the specific number of bags\n    num_beads = bags_df['Number of plastic beads'].values[0]\n    \n    # Calculate the total number of plastic beads\n    total_beads = num_beads * num_bags\n    \n    return total_beads\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of bags': [1, 2, 3, 4],\n    'Number of plastic beads': [10, 20, 30, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_beads(df, 4))","question":"Each bag has 10 plastic beads. How many plastic beads are in 4 bags?","prediction_code":"import pandas as pd\n\ndef calculate_total_beads(df, num_bags):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of plastic beads per bag and the number of bags, and returns the total number of plastic beads.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of plastic beads per bag.\n    The dataframe should contain \"Number of bags\" and \"Number of plastic beads\" columns.\n    num_bags (int): The number of bags.\n    Returns:\n    int: The total number of plastic beads.\n    \"\"\"\n    # Filter the DataFrame for the specific number of bags\n    bags_df = df[df['Number of bags'] == num_bags]\n    \n    # Get the number of plastic beads for the specific number of bags\n    num_beads = bags_df['Number of plastic beads'].values[0]\n    \n    # Calculate the total number of plastic beads\n    total_beads = num_beads * num_bags\n    \n    return total_beads","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of bags': [1, 2, 3, 4],\n    'Number of plastic beads': [10, 20, 30, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_beads(df, 4))","table":"Name: None\nUnit: plastic beads\nContent:\nNumber of bags | Number of plastic beads\n1 | 10\n2 | 20\n3 | 30\n4 | ?"}
{"level":4,"answer":88.0,"prediction":"import pandas as pd\n\ndef find_oldest_age(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of ages and returns the age of the oldest person.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the ages of individuals.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The age of the oldest person.\n    \"\"\"\n    # prepare a list to store all ages\n    ages = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # iterate through each leaf value in the row\n        for j in range(len(leaf)):\n            # calculate the age by combining the stem and leaf values\n            age = stem * 10 + leaf[j]\n            # add the age to the list\n            ages.append(age)\n    # find the maximum age in the list\n    oldest_age = max(ages)\n    return oldest_age\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[0, 2, 6, 7], [], [1, 9], [3, 4, 7], [1, 3], [1, 2, 7], [0, 0, 8]]\n})\n# Call the tool to solve the problem\nprint(find_oldest_age(df))","question":"At their family reunion, the Hutchinson family recorded everyone's age. What is the age of the oldest person?","prediction_code":"import pandas as pd\n\ndef find_oldest_age(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of ages and returns the age of the oldest person.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the ages of individuals.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The age of the oldest person.\n    \"\"\"\n    # prepare a list to store all ages\n    ages = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # iterate through each leaf value in the row\n        for j in range(len(leaf)):\n            # calculate the age by combining the stem and leaf values\n            age = stem * 10 + leaf[j]\n            # add the age to the list\n            ages.append(age)\n    # find the maximum age in the list\n    oldest_age = max(ages)\n    return oldest_age","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[0, 2, 6, 7], [], [1, 9], [3, 4, 7], [1, 3], [1, 2, 7], [0, 0, 8]]\n})\n# Call the tool to solve the problem\nprint(find_oldest_age(df))","table":"Name: Ages\nUnit: years old\nContent:\nStem | Leaf \n2 | 0, 2, 6, 7\n3 | \n4 | 1, 9\n5 | 3, 4, 7\n6 | 1, 3\n7 | 1, 2, 7\n8 | 0, 0, 8"}
{"level":5,"answer":10.0,"prediction":"import pandas as pd\n\ndef calculate_fare_difference(df, ferry1, ferry2, vehicle):\n    \"\"\"\n    This function takes in a pandas DataFrame of ferry fares and returns the difference in fare for a specific vehicle between two ferries.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the ferry fares with columns 'Ferry', 'Car', and 'Bicycle'.\n    ferry1 (str): The name of the first ferry.\n    ferry2 (str): The name of the second ferry.\n    vehicle (str): The type of vehicle ('Car' or 'Bicycle').\n    Returns:\n    float: The difference in fare for the specified vehicle between the two ferries.\n    \"\"\"\n    # Filter the DataFrame for the two specified ferries\n    ferry1_df = df[df['Ferry'] == ferry1]\n    ferry2_df = df[df['Ferry'] == ferry2]\n    \n    # Get the fare for the specified vehicle for each ferry\n    fare1 = ferry1_df[vehicle].values[0]\n    fare2 = ferry2_df[vehicle].values[0]\n    \n    # Calculate the fare difference\n    fare_difference = fare1 - fare2\n    \n    return fare_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Ocracoke', 'Fauntleroy-Vashon', 'Mukilteu-Clinton', 'Southport-Fort Fisher'],\n    'Car': [15, 15, 7, 5],\n    'Bicycle': [3, 5, 5, 2]\n})\n\n# Call the tool to solve the problem\nprint(calculate_fare_difference(df, 'Fauntleroy-Vashon', 'Southport-Fort Fisher', 'Car'))","question":"For an economics project, Nina determined the cost of ferry rides for bicycles and cars. How much higher is the fare for a car on the Fauntleroy-Vashon ferry than on the Southport-Fort Fisher ferry?","prediction_code":"import pandas as pd\n\ndef calculate_fare_difference(df, ferry1, ferry2, vehicle):\n    \"\"\"\n    This function takes in a pandas DataFrame of ferry fares and returns the difference in fare for a specific vehicle between two ferries.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the ferry fares with columns 'Ferry', 'Car', and 'Bicycle'.\n    ferry1 (str): The name of the first ferry.\n    ferry2 (str): The name of the second ferry.\n    vehicle (str): The type of vehicle ('Car' or 'Bicycle').\n    Returns:\n    float: The difference in fare for the specified vehicle between the two ferries.\n    \"\"\"\n    # Filter the DataFrame for the two specified ferries\n    ferry1_df = df[df['Ferry'] == ferry1]\n    ferry2_df = df[df['Ferry'] == ferry2]\n    \n    # Get the fare for the specified vehicle for each ferry\n    fare1 = ferry1_df[vehicle].values[0]\n    fare2 = ferry2_df[vehicle].values[0]\n    \n    # Calculate the fare difference\n    fare_difference = fare1 - fare2\n    \n    return fare_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Ocracoke', 'Fauntleroy-Vashon', 'Mukilteu-Clinton', 'Southport-Fort Fisher'],\n    'Car': [15, 15, 7, 5],\n    'Bicycle': [3, 5, 5, 2]\n})\n\n# Call the tool to solve the problem\nprint(calculate_fare_difference(df, 'Fauntleroy-Vashon', 'Southport-Fort Fisher', 'Car'))","table":"Name: Ferry fares\nUnit: $\nContent:\nFerry | Car | Bicycle\nOcracoke | $15 | $3\nFauntleroy-Vashon | $15 | $5\nMukilteu-Clinton | $7 | $5\nSouthport-Fort Fisher | $5 | $2"}
{"level":4,"answer":2.6,"prediction":"import pandas as pd\n\ndef calculate_total_cost(menu_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table and a list of items, and returns the total cost of the items using pandas.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of menu item names.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the menu items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = menu_df[menu_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['watermelon', 'grapefruit', 'cucumber', 'red pepper', 'pumpkin'],\n    'Price': [2.51, 1.17, 1.28, 1.32, 2.43]\n})\n\n# Call the tool to solve the problem\nitems = ['red pepper', 'cucumber']\nprint(calculate_total_cost(df, items))","question":"How much money does Anne need to buy a red pepper and a cucumber?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(menu_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table and a list of items, and returns the total cost of the items using pandas.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of menu item names.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the menu items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = menu_df[menu_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['watermelon', 'grapefruit', 'cucumber', 'red pepper', 'pumpkin'],\n    'Price': [2.51, 1.17, 1.28, 1.32, 2.43]\n})\n\n# Call the tool to solve the problem\nitems = ['red pepper', 'cucumber']\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nwatermelon | $2.51\ngrapefruit | $1.17\ncucumber | $1.28\nred pepper | $1.32\npumpkin | $2.43"}
{"level":3,"answer":8645.0,"prediction":"import pandas as pd\n\ndef calculate_total_donuts_sold(df, days):\n    \"\"\"\n    This function takes in a pandas DataFrame of donuts sold and a list of days, and returns the total number of donuts sold on those days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of donuts sold per day.\n    The DataFrame should have columns 'Day' and 'Number of donuts'.\n    days (list): A list of days for which the total number of donuts sold needs to be calculated.\n    Returns:\n    int: The total number of donuts sold on the specified days.\n    \"\"\"\n    # Filter the DataFrame for the specified days\n    filtered_df = df[df['Day'].isin(days)]\n    \n    # Calculate the total number of donuts sold on the specified days\n    total_donuts_sold = filtered_df['Number of donuts'].sum()\n    \n    return total_donuts_sold\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of donuts': [7399, 1246, 1371, 1568, 1394]\n})\n\n# Specify the days for which the total number of donuts sold needs to be calculated\ndays = ['Tuesday', 'Wednesday']\n\n# Call the tool to solve the problem\nprint(calculate_total_donuts_sold(df, days))","question":"A donut shop recorded how many donuts it sold in the past 5 days. How many donuts in total did the shop sell on Tuesday and Wednesday?","prediction_code":"import pandas as pd\n\ndef calculate_total_donuts_sold(df, days):\n    \"\"\"\n    This function takes in a pandas DataFrame of donuts sold and a list of days, and returns the total number of donuts sold on those days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of donuts sold per day.\n    The DataFrame should have columns 'Day' and 'Number of donuts'.\n    days (list): A list of days for which the total number of donuts sold needs to be calculated.\n    Returns:\n    int: The total number of donuts sold on the specified days.\n    \"\"\"\n    # Filter the DataFrame for the specified days\n    filtered_df = df[df['Day'].isin(days)]\n    \n    # Calculate the total number of donuts sold on the specified days\n    total_donuts_sold = filtered_df['Number of donuts'].sum()\n    \n    return total_donuts_sold","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of donuts': [7399, 1246, 1371, 1568, 1394]\n})\n\n# Specify the days for which the total number of donuts sold needs to be calculated\ndays = ['Tuesday', 'Wednesday']\n\n# Call the tool to solve the problem\nprint(calculate_total_donuts_sold(df, days))","table":"Name: Donuts sold\nUnit: donuts\nContent:\nDay | Number of donuts\nTuesday | 7,399\nWednesday | 1,246\nThursday | 1,371\nFriday | 1,568\nSaturday | 1,394"}
{"level":4,"answer":2.0,"prediction":"import pandas as pd\n\ndef count_students_within_range(df, lower_bound, upper_bound):\n    \"\"\"\n    This function takes in a pandas DataFrame of pop quiz scores and returns the number of students who scored within a specified range.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the pop quiz scores.\n    The DataFrame should contain \"Stem\" and \"Leaf\" columns.\n    lower_bound (int): The lower bound of the range (inclusive).\n    upper_bound (int): The upper bound of the range (exclusive).\n    Returns:\n    int: The number of students who scored within the specified range.\n    \"\"\"\n    # prepare a list to store the scores\n    scores = []\n    # iterate through the DataFrame and extract the scores\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # filter the scores within the specified range\n    filtered = [score for score in scores if lower_bound <= score < upper_bound]\n    # count the number of students\n    num_students = len(filtered)\n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [6, 7, 8, 9],\n    'Leaf': [[1, 1, 1, 3, 3, 8], [2, 6], [0, 0, 1], [0, 0]]\n})\n# Call the tool to solve the problem\nprint(count_students_within_range(df, 88, 96))","question":"Professor Bowman released the results of yesterday's pop quiz. How many students scored at least 88 points but fewer than 96 points?","prediction_code":"import pandas as pd\n\ndef count_students_within_range(df, lower_bound, upper_bound):\n    \"\"\"\n    This function takes in a pandas DataFrame of pop quiz scores and returns the number of students who scored within a specified range.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the pop quiz scores.\n    The DataFrame should contain \"Stem\" and \"Leaf\" columns.\n    lower_bound (int): The lower bound of the range (inclusive).\n    upper_bound (int): The upper bound of the range (exclusive).\n    Returns:\n    int: The number of students who scored within the specified range.\n    \"\"\"\n    # prepare a list to store the scores\n    scores = []\n    # iterate through the DataFrame and extract the scores\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # filter the scores within the specified range\n    filtered = [score for score in scores if lower_bound <= score < upper_bound]\n    # count the number of students\n    num_students = len(filtered)\n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [6, 7, 8, 9],\n    'Leaf': [[1, 1, 1, 3, 3, 8], [2, 6], [0, 0, 1], [0, 0]]\n})\n# Call the tool to solve the problem\nprint(count_students_within_range(df, 88, 96))","table":"Name: Pop quiz scores\nUnit: None\nContent:\nStem | Leaf \n6 | 1, 1, 1, 3, 3, 8\n7 | 2, 6\n8 | 0, 0, 1\n9 | 0, 0"}
{"level":8,"answer":1.81,"prediction":"import pandas as pd\n\ndef calculate_price_difference(menu_df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table and two menu items, and returns the price difference between the two items.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first menu item.\n    item2 (str): The name of the second menu item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = menu_df[menu_df['Item'] == item1]\n    item2_df = menu_df[menu_df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['baked ziti', 'pasta with white sauce', 'pepperoni pizza', 'ravioli', 'lasagna', 'cheese pizza'],\n    'Price': [13.96, 11.51, 10.58, 10.44, 12.44, 12.15]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'baked ziti', 'cheese pizza'))","question":"How much more does baked ziti cost than a cheese pizza?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(menu_df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table and two menu items, and returns the price difference between the two items.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first menu item.\n    item2 (str): The name of the second menu item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = menu_df[menu_df['Item'] == item1]\n    item2_df = menu_df[menu_df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['baked ziti', 'pasta with white sauce', 'pepperoni pizza', 'ravioli', 'lasagna', 'cheese pizza'],\n    'Price': [13.96, 11.51, 10.58, 10.44, 12.44, 12.15]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'baked ziti', 'cheese pizza'))","table":"Name: None\nUnit: $\nContent:\nbaked ziti | $13.96\npasta with white sauce | $11.51\npepperoni pizza | $10.58\nravioli | $10.44\nlasagna | $12.44\ncheese pizza | $12.15"}
{"level":3,"answer":382.0,"prediction":"import pandas as pd\n\ndef calculate_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of fan letters received and returns the difference in the number of fan letters received on Saturday and Thursday.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of fan letters received each day.\n    The dataframe should contain \"Day\" and \"Number of fan letters\" columns.\n    Returns:\n    int: The difference in the number of fan letters received on Saturday and Thursday.\n    \"\"\"\n    # Filter the DataFrame for Saturday and Thursday\n    saturday_letters = df[df['Day'] == 'Saturday']['Number of fan letters'].values[0]\n    thursday_letters = df[df['Day'] == 'Thursday']['Number of fan letters'].values[0]\n    \n    # Calculate the difference\n    difference = saturday_letters - thursday_letters\n    \n    return difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of fan letters': [557, 293, 831, 675]\n})\n# Call the tool to solve the problem\nprint(calculate_difference(df))","question":"An actor was informed how many fan letters he received each day. How many more fan letters were received on Saturday than on Thursday?","prediction_code":"import pandas as pd\n\ndef calculate_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of fan letters received and returns the difference in the number of fan letters received on Saturday and Thursday.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of fan letters received each day.\n    The dataframe should contain \"Day\" and \"Number of fan letters\" columns.\n    Returns:\n    int: The difference in the number of fan letters received on Saturday and Thursday.\n    \"\"\"\n    # Filter the DataFrame for Saturday and Thursday\n    saturday_letters = df[df['Day'] == 'Saturday']['Number of fan letters'].values[0]\n    thursday_letters = df[df['Day'] == 'Thursday']['Number of fan letters'].values[0]\n    \n    # Calculate the difference\n    difference = saturday_letters - thursday_letters\n    \n    return difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of fan letters': [557, 293, 831, 675]\n})\n# Call the tool to solve the problem\nprint(calculate_difference(df))","table":"Name: Fan letters received\nUnit: fan letters\nContent:\nDay | Number of fan letters\nWednesday | 557\nThursday | 293\nFriday | 831\nSaturday | 675"}
{"level":8,"answer":23690.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table, an item name, and a quantity, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (int): The quantity of the item.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['designer handbag', 'designer watch', 'pair of designer shoes', 'designer ball gown'],\n    'Price': [3238.00, 1024.00, 4738.00, 3907.00]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'pair of designer shoes', 5))","question":"How much money does Erica need to buy 5 pairs of designer shoes?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table, an item name, and a quantity, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (int): The quantity of the item.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['designer handbag', 'designer watch', 'pair of designer shoes', 'designer ball gown'],\n    'Price': [3238.00, 1024.00, 4738.00, 3907.00]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'pair of designer shoes', 5))","table":"Name: None\nUnit: $\nContent:\ndesigner handbag | $3,238.00\ndesigner watch | $1,024.00\npair of designer shoes | $4,738.00\ndesigner ball gown | $3,907.00"}
{"level":7,"answer":7.0,"prediction":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of sticker collections and returns the mode of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the names and numbers of sticker collections.\n    The DataFrame should have columns 'Name' and 'Number of stickers'.\n    Returns:\n    int: The mode of the numbers in the sticker collections.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of stickers']\n    \n    # Calculate the mode using the value_counts() function\n    mode = numbers.value_counts().idxmax()\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Amy', 'Clara', 'Darnel', 'Hunter', 'Becky', 'Rafi'],\n    'Number of stickers': [7, 6, 6, 9, 7, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"Some friends compared the sizes of their sticker collections. What is the mode of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of sticker collections and returns the mode of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the names and numbers of sticker collections.\n    The DataFrame should have columns 'Name' and 'Number of stickers'.\n    Returns:\n    int: The mode of the numbers in the sticker collections.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of stickers']\n    \n    # Calculate the mode using the value_counts() function\n    mode = numbers.value_counts().idxmax()\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Amy', 'Clara', 'Darnel', 'Hunter', 'Becky', 'Rafi'],\n    'Number of stickers': [7, 6, 6, 9, 7, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Sticker collections\nUnit: None\nContent:\nName | Number of stickers\nAmy | 7\nClara | 6\nDarnel | 6\nHunter | 9\nBecky | 7\nRafi | 7"}
{"level":8,"answer":20.0,"prediction":"import pandas as pd\n\ndef find_smallest_number_of_words(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of words per page and returns the smallest number of words.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of words per page.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of words.\n    \"\"\"\n    # Initialize the smallest number of words\n    smallest_words = float('inf')\n    \n    # Iterate through the rows of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # Check if the leaf column is empty\n        if not pd.isnull(leaf):\n            # Split the leaf column by comma and convert the values to integers\n            leaf_values = [int(value) for value in leaf.split(',')]\n            # Calculate the total number of words for each row\n            total_words = stem * 10 + sum(leaf_values)\n            # Update the smallest number of words if necessary\n            if total_words < smallest_words:\n                smallest_words = total_words\n    \n    return smallest_words\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': ['0, 5, 9', '', '', '6', '', '6', '4', '0']\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_words(df))","question":"Barbara counted the number of words per page in her new book. What is the smallest number of words?","prediction_code":"import pandas as pd\n\ndef find_smallest_number_of_words(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of words per page and returns the smallest number of words.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of words per page.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of words.\n    \"\"\"\n    # Initialize the smallest number of words\n    smallest_words = float('inf')\n    \n    # Iterate through the rows of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # Check if the leaf column is empty\n        if not pd.isnull(leaf):\n            # Split the leaf column by comma and convert the values to integers\n            leaf_values = [int(value) for value in leaf.split(',')]\n            # Calculate the total number of words for each row\n            total_words = stem * 10 + sum(leaf_values)\n            # Update the smallest number of words if necessary\n            if total_words < smallest_words:\n                smallest_words = total_words\n    \n    return smallest_words","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': ['0, 5, 9', '', '', '6', '', '6', '4', '0']\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_words(df))","table":"Name: Words per page\nUnit: words\nContent:\nStem | Leaf \n2 | 0, 5, 9\n3 | \n4 | \n5 | 6\n6 | \n7 | 6\n8 | 4\n9 | 0"}
{"level":7,"answer":6.5,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item given the quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information for different items.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Extract the price per kilogram\n    price_per_kg = item_df['Unit'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price_per_kg * quantity\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['unsalted almonds', 'salted almonds', 'yogurt-covered almonds', 'chocolate-covered almonds', 'Jordan almonds'],\n    'Unit': [1.82, 1.17, 2.57, 1.30, 1.65]\n})\n\n# Call the tool to solve the problem\nitem = 'chocolate-covered almonds'\nquantity = 5\ntotal_cost = calculate_total_cost(df, item, quantity)\n\n# Print out the answer\nprint(total_cost)","question":"If Samir buys 5 kilograms of chocolate-covered almonds, how much will he spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item given the quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information for different items.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Extract the price per kilogram\n    price_per_kg = item_df['Unit'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price_per_kg * quantity\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['unsalted almonds', 'salted almonds', 'yogurt-covered almonds', 'chocolate-covered almonds', 'Jordan almonds'],\n    'Unit': [1.82, 1.17, 2.57, 1.30, 1.65]\n})\n\n# Call the tool to solve the problem\nitem = 'chocolate-covered almonds'\nquantity = 5\ntotal_cost = calculate_total_cost(df, item, quantity)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\nunsalted almonds | $1.82 per kilogram\nsalted almonds | $1.17 per kilogram\nyogurt-covered almonds | $2.57 per kilogram\nchocolate-covered almonds | $1.30 per kilogram\nJordan almonds | $1.65 per kilogram"}
{"level":7,"answer":4.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of vacation days taken by Austin and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the vacation days taken by Austin with columns 'Year' and 'Vacation days'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_df = df[df['Year'] == start_year]\n    end_df = df[df['Year'] == end_year]\n    \n    # Get the vacation days for the start and end years\n    start_days = start_df['Vacation days'].values[0]\n    end_days = end_df['Vacation days'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_days - start_days) \/ (end_year - start_year)\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2013, 2014, 2015, 2016, 2017],\n    'Vacation days': [23, 18, 11, 15, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2015, 2016))","question":"To figure out how many vacation days he had left to use, Austin looked over his old calendars to figure out how many days of vacation he had taken each year. According to the table, what was the rate of change between 2015 and 2016?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of vacation days taken by Austin and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the vacation days taken by Austin with columns 'Year' and 'Vacation days'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_df = df[df['Year'] == start_year]\n    end_df = df[df['Year'] == end_year]\n    \n    # Get the vacation days for the start and end years\n    start_days = start_df['Vacation days'].values[0]\n    end_days = end_df['Vacation days'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_days - start_days) \/ (end_year - start_year)\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2013, 2014, 2015, 2016, 2017],\n    'Vacation days': [23, 18, 11, 15, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2015, 2016))","table":"Name: Vacation days taken by Austin\nUnit: vacation days per year\nContent:\nYear | Vacation days\n2013 | 23\n2014 | 18\n2015 | 11\n2016 | 15\n2017 | 8"}
{"level":8,"answer":40.0,"prediction":"import pandas as pd\n\ndef find_smallest_team_size(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of track team sizes and returns the size of the smallest team.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the sizes of track teams.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The size of the smallest team.\n    \"\"\"\n    # prepare a list to store all team sizes\n    team_sizes = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the size of each team and add it to the list\n        for j in range(len(leaf)):\n            team_sizes.append(stem * 10 + leaf[j])\n    # find the smallest team size\n    smallest_team_size = min(team_sizes)\n    return smallest_team_size\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7, 8],\n    'Leaf': [[0, 2, 4, 5], [0, 7], [1, 1, 6], [2, 3, 8], [3, 4, 5, 7, 8]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_team_size(df))","question":"Mr. Freeman, a track coach, recorded the sizes of all the nearby track teams. What is the size of the smallest team?","prediction_code":"import pandas as pd\n\ndef find_smallest_team_size(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of track team sizes and returns the size of the smallest team.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the sizes of track teams.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The size of the smallest team.\n    \"\"\"\n    # prepare a list to store all team sizes\n    team_sizes = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the size of each team and add it to the list\n        for j in range(len(leaf)):\n            team_sizes.append(stem * 10 + leaf[j])\n    # find the smallest team size\n    smallest_team_size = min(team_sizes)\n    return smallest_team_size","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7, 8],\n    'Leaf': [[0, 2, 4, 5], [0, 7], [1, 1, 6], [2, 3, 8], [3, 4, 5, 7, 8]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_team_size(df))","table":"Name: Track team sizes (number of members)\nUnit: members\nContent:\nStem | Leaf \n4 | 0, 2, 4, 5\n5 | 0, 7\n6 | 1, 1, 6\n7 | 2, 3, 8\n8 | 3, 4, 5, 7, 8"}
{"level":7,"answer":2.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of games won by a baseball team each year, and calculates the rate of change between two specified years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of games won by the team each year.\n    The DataFrame should have columns 'Year' and 'Games won'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the specified years.\n    \"\"\"\n    # Filter the DataFrame for the specified years\n    start_games_won = df[df['Year'] == start_year]['Games won'].values[0]\n    end_games_won = df[df['Year'] == end_year]['Games won'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_games_won - start_games_won) \/ (end_year - start_year)\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2011, 2012, 2013, 2014, 2015],\n    'Games won': [38, 46, 38, 40, 39]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2013, 2014))","question":"Fans of the Weston baseball team compared the number of games won by their team each year. According to the table, what was the rate of change between 2013 and 2014?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of games won by a baseball team each year, and calculates the rate of change between two specified years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of games won by the team each year.\n    The DataFrame should have columns 'Year' and 'Games won'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the specified years.\n    \"\"\"\n    # Filter the DataFrame for the specified years\n    start_games_won = df[df['Year'] == start_year]['Games won'].values[0]\n    end_games_won = df[df['Year'] == end_year]['Games won'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_games_won - start_games_won) \/ (end_year - start_year)\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2011, 2012, 2013, 2014, 2015],\n    'Games won': [38, 46, 38, 40, 39]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2013, 2014))","table":"Name: Games won by the Weston baseball team\nUnit: games per year\nContent:\nYear | Games won\n2011 | 38\n2012 | 46\n2013 | 38\n2014 | 40\n2015 | 39"}
{"level":2,"answer":25.0,"prediction":"import pandas as pd\n\ndef calculate_yellow_notepads(df, num_desks):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of desks and the number of yellow notepads per desk, and returns the total number of yellow notepads on a given number of desks.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of desks and the number of yellow notepads per desk.\n    The dataframe should contain \"Number of desks\" and \"Number of yellow notepads\" columns.\n    num_desks (int): The number of desks to calculate the total number of yellow notepads for.\n    Returns:\n    int: The total number of yellow notepads on the given number of desks.\n    \"\"\"\n    # Filter the DataFrame for the given number of desks\n    desks_df = df[df['Number of desks'] == num_desks]\n    \n    # Get the number of yellow notepads for the given number of desks\n    yellow_notepads = desks_df['Number of yellow notepads'].values[0]\n    \n    # Calculate the total number of yellow notepads on the given number of desks\n    total_yellow_notepads = yellow_notepads * num_desks\n    \n    return total_yellow_notepads\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of desks': [1, 2, 3, 4, 5],\n    'Number of yellow notepads': [5, 10, 15, 20, None]\n})\n\n# Call the tool to solve the problem\nprint(calculate_yellow_notepads(df, 5))","question":"Each desk has 5 yellow notepads. How many yellow notepads are on 5 desks?","prediction_code":"import pandas as pd\n\ndef calculate_yellow_notepads(df, num_desks):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of desks and the number of yellow notepads per desk, and returns the total number of yellow notepads on a given number of desks.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of desks and the number of yellow notepads per desk.\n    The dataframe should contain \"Number of desks\" and \"Number of yellow notepads\" columns.\n    num_desks (int): The number of desks to calculate the total number of yellow notepads for.\n    Returns:\n    int: The total number of yellow notepads on the given number of desks.\n    \"\"\"\n    # Filter the DataFrame for the given number of desks\n    desks_df = df[df['Number of desks'] == num_desks]\n    \n    # Get the number of yellow notepads for the given number of desks\n    yellow_notepads = desks_df['Number of yellow notepads'].values[0]\n    \n    # Calculate the total number of yellow notepads on the given number of desks\n    total_yellow_notepads = yellow_notepads * num_desks\n    \n    return total_yellow_notepads","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of desks': [1, 2, 3, 4, 5],\n    'Number of yellow notepads': [5, 10, 15, 20, None]\n})\n\n# Call the tool to solve the problem\nprint(calculate_yellow_notepads(df, 5))","table":"Name: None\nUnit: None\nContent:\nNumber of desks | Number of yellow notepads\n1 | 5\n2 | 10\n3 | 15\n4 | 20\n5 | ?"}
{"level":7,"answer":2.0,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['cookie jar', 'soup pot', 'baking dish', 'rolling pin', 'coffee pot'],\n    'Price': [13, 19, 12, 15, 13]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'rolling pin', 'coffee pot'))","question":"How much more does a rolling pin cost than a coffee pot?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['cookie jar', 'soup pot', 'baking dish', 'rolling pin', 'coffee pot'],\n    'Price': [13, 19, 12, 15, 13]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'rolling pin', 'coffee pot'))","table":"Name: None\nUnit: $\nContent:\ncookie jar | $13\nsoup pot | $19\nbaking dish | $12\nrolling pin | $15\ncoffee pot | $13"}
{"level":3,"answer":139.0,"prediction":"import pandas as pd\n\ndef calculate_books_sold_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of books sold each month and returns the difference in the number of books sold between May and February.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of books sold each month.\n    The dataframe should contain \"Month\" and \"Number of books\" columns.\n    Returns:\n    int: The difference in the number of books sold between May and February.\n    \"\"\"\n    # Filter the DataFrame for May and February\n    may_books_sold = df[df['Month'] == 'May']['Number of books'].values[0]\n    feb_books_sold = df[df['Month'] == 'February']['Number of books'].values[0]\n    \n    # Calculate the difference\n    difference = may_books_sold - feb_books_sold\n    \n    return difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['January', 'February', 'March', 'April', 'May'],\n    'Number of books': [591, 210, 449, 796, 349]\n})\n# Call the tool to solve the problem\nprint(calculate_books_sold_difference(df))","question":"A bookstore employee looked up how many books were sold each month. How many more books did the bookstore sell in May than in February?","prediction_code":"import pandas as pd\n\ndef calculate_books_sold_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of books sold each month and returns the difference in the number of books sold between May and February.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of books sold each month.\n    The dataframe should contain \"Month\" and \"Number of books\" columns.\n    Returns:\n    int: The difference in the number of books sold between May and February.\n    \"\"\"\n    # Filter the DataFrame for May and February\n    may_books_sold = df[df['Month'] == 'May']['Number of books'].values[0]\n    feb_books_sold = df[df['Month'] == 'February']['Number of books'].values[0]\n    \n    # Calculate the difference\n    difference = may_books_sold - feb_books_sold\n    \n    return difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['January', 'February', 'March', 'April', 'May'],\n    'Number of books': [591, 210, 449, 796, 349]\n})\n# Call the tool to solve the problem\nprint(calculate_books_sold_difference(df))","table":"Name: Number of books sold\nUnit: books\nContent:\nMonth | Number of books\nJanuary | 591\nFebruary | 210\nMarch | 449\nApril | 796\nMay | 349"}
{"level":8,"answer":3.0,"prediction":"import pandas as pd\n\ndef count_students_with_68_points(df):\n    \"\"\"\n    This function takes in a pandas dataframe of quiz scores, and returns the number of students who scored exactly 68 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the quiz scores.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of students who scored exactly 68 points.\n    \"\"\"\n    # prepare a list to store the scores of each student\n    scores = []\n    # calculate the total score of each student\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # count the number of students who scored exactly 68 points\n    num_students = scores.count(68)\n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7, 8, 9],\n    'Leaf': [[3, 5], [6], [8, 8, 8, 9], [0, 7], [6], [0]]\n})\n# Call the tool to solve the problem\nprint(count_students_with_68_points(df))","question":"Ms. Walter reported her students' scores on the most recent quiz. How many students scored exactly 68 points?","prediction_code":"import pandas as pd\n\ndef count_students_with_68_points(df):\n    \"\"\"\n    This function takes in a pandas dataframe of quiz scores, and returns the number of students who scored exactly 68 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the quiz scores.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of students who scored exactly 68 points.\n    \"\"\"\n    # prepare a list to store the scores of each student\n    scores = []\n    # calculate the total score of each student\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # count the number of students who scored exactly 68 points\n    num_students = scores.count(68)\n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7, 8, 9],\n    'Leaf': [[3, 5], [6], [8, 8, 8, 9], [0, 7], [6], [0]]\n})\n# Call the tool to solve the problem\nprint(count_students_with_68_points(df))","table":"Name: Quiz scores\nUnit: students\nContent:\nStem | Leaf \n4 | 3, 5\n5 | 6\n6 | 8, 8, 8, 9\n7 | 0, 7\n8 | 6\n9 | 0"}
{"level":7,"answer":37.55,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item given its quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Name' and 'Unit'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    if not item_df.empty:\n        # Extract the unit price\n        unit_price = float(item_df['Unit'].str.extract(r'\\$(\\d+\\.\\d+)')[0])\n        # Calculate the total cost\n        total_cost = unit_price * quantity\n        return total_cost\n    else:\n        return None\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['amethyst', \"tiger's eye\", 'quartz', \"fool's gold\", 'granite', 'calcite', 'topaz'],\n    'Unit': ['$6.26\/kg', '$6.96\/kg', '$7.21\/kg', '$7.51\/kg', '$7.09\/kg', '$6.26\/kg', '$7.02\/kg']\n})\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, \"fool's gold\", 5))","question":"Ayana went to the store and bought 5 kilograms of fool's gold. How much did she spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item given its quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Name' and 'Unit'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    if not item_df.empty:\n        # Extract the unit price\n        unit_price = float(item_df['Unit'].str.extract(r'\\$(\\d+\\.\\d+)')[0])\n        # Calculate the total cost\n        total_cost = unit_price * quantity\n        return total_cost\n    else:\n        return None","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['amethyst', \"tiger's eye\", 'quartz', \"fool's gold\", 'granite', 'calcite', 'topaz'],\n    'Unit': ['$6.26\/kg', '$6.96\/kg', '$7.21\/kg', '$7.51\/kg', '$7.09\/kg', '$6.26\/kg', '$7.02\/kg']\n})\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, \"fool's gold\", 5))","table":"Name: None\nUnit: $\nContent:\namethyst | $6.26\/kg\ntiger's eye | $6.96\/kg\nquartz | $7.21\/kg\nfool's gold | $7.51\/kg\ngranite | $7.09\/kg\ncalcite | $6.26\/kg\ntopaz | $7.02\/kg"}
{"level":8,"answer":53.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a dictionary of orders, and returns the total cost of the orders.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are item names and the values are the quantities ordered for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the orders and calculate the cost for each item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['chestnuts', 'peanuts', 'pine nuts', 'pistachios', 'macadamia nuts'],\n    'Price': [7, 6, 5, 12, 10]\n})\n\n# Initialize the orders dictionary\norders = {\n    'peanuts': 2,\n    'macadamia nuts': 2,\n    'chestnuts': 3\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","question":"Hazel bought 2 pounds of peanuts, 2 pounds of macadamia nuts, and 3 pounds of chestnuts. How much did she spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a dictionary of orders, and returns the total cost of the orders.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are item names and the values are the quantities ordered for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the orders and calculate the cost for each item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['chestnuts', 'peanuts', 'pine nuts', 'pistachios', 'macadamia nuts'],\n    'Price': [7, 6, 5, 12, 10]\n})\n\n# Initialize the orders dictionary\norders = {\n    'peanuts': 2,\n    'macadamia nuts': 2,\n    'chestnuts': 3\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","table":"Name: None\nUnit: $\nContent:\nchestnuts | $7\/pound\npeanuts | $6\/pound\npine nuts | $5\/pound\npistachios | $12\/pound\nmacadamia nuts | $10\/pound"}
{"level":4,"answer":3.0,"prediction":"import pandas as pd\n\ndef count_bushes_with_80_to_100_roses(df):\n    \"\"\"\n    This function takes in a pandas dataframe of roses per bush, and returns the number of bushes that have at least 80 roses but fewer than 100 roses.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of roses per bush.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of bushes that have at least 80 roses but fewer than 100 roses.\n    \"\"\"\n    # prepare a list to calculate the number of roses on each bush\n    roses = []\n    # calculate the total number of roses on each bush\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            roses.append(stem * 10 + leaf[j])\n    # filter the bushes where the total number of roses is between 80 and 100 (inclusive)\n    filtered = [rose for rose in roses if 80 <= rose < 100]\n    # count the number of bushes\n    num_bushes = len(filtered)\n    return num_bushes\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[1, 1], [1, 3, 9], [], [0], [3], [4, 6], [0]]\n})\n# Call the tool to solve the problem\nprint(count_bushes_with_80_to_100_roses(df))","question":"The owner of a plant nursery wrote down the number of roses on each bush. How many bushes have at least 80 roses but fewer than 100 roses?","prediction_code":"import pandas as pd\n\ndef count_bushes_with_80_to_100_roses(df):\n    \"\"\"\n    This function takes in a pandas dataframe of roses per bush, and returns the number of bushes that have at least 80 roses but fewer than 100 roses.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of roses per bush.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of bushes that have at least 80 roses but fewer than 100 roses.\n    \"\"\"\n    # prepare a list to calculate the number of roses on each bush\n    roses = []\n    # calculate the total number of roses on each bush\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            roses.append(stem * 10 + leaf[j])\n    # filter the bushes where the total number of roses is between 80 and 100 (inclusive)\n    filtered = [rose for rose in roses if 80 <= rose < 100]\n    # count the number of bushes\n    num_bushes = len(filtered)\n    return num_bushes","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[1, 1], [1, 3, 9], [], [0], [3], [4, 6], [0]]\n})\n# Call the tool to solve the problem\nprint(count_bushes_with_80_to_100_roses(df))","table":"Name: Roses per bush\nUnit: None\nContent:\nStem | Leaf \n3 | 1, 1\n4 | 1, 3, 9\n5 | \n6 | 0\n7 | 3\n8 | 4, 6\n9 | 0"}
{"level":8,"answer":11.0,"prediction":"import pandas as pd\n\ndef count_students_with_at_least_41_points(df):\n    \"\"\"\n    This function takes in a pandas dataframe of midterm exam scores and returns the number of students who scored at least 41 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the midterm exam scores.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of students who scored at least 41 points.\n    \"\"\"\n    # prepare a list to calculate scores of each student\n    scores = []\n    # calculate the total score of each student\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # filter the students who scored at least 41 points\n    filtered = [score for score in scores if score >= 41]\n    # count the number of students\n    num_students = len(filtered)\n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5],\n    'Leaf': [[0, 3, 6, 8], [3, 4, 4, 7, 9], [0, 3, 8], [3, 3, 4, 9], [0, 1, 1, 1, 7, 8, 9]]\n})\n# Call the tool to solve the problem\nprint(count_students_with_at_least_41_points(df))","question":"Professor Mendoza informed his students of their scores on the midterm exam. How many students scored at least 41 points?","prediction_code":"import pandas as pd\n\ndef count_students_with_at_least_41_points(df):\n    \"\"\"\n    This function takes in a pandas dataframe of midterm exam scores and returns the number of students who scored at least 41 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the midterm exam scores.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of students who scored at least 41 points.\n    \"\"\"\n    # prepare a list to calculate scores of each student\n    scores = []\n    # calculate the total score of each student\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # filter the students who scored at least 41 points\n    filtered = [score for score in scores if score >= 41]\n    # count the number of students\n    num_students = len(filtered)\n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5],\n    'Leaf': [[0, 3, 6, 8], [3, 4, 4, 7, 9], [0, 3, 8], [3, 3, 4, 9], [0, 1, 1, 1, 7, 8, 9]]\n})\n# Call the tool to solve the problem\nprint(count_students_with_at_least_41_points(df))","table":"Name: Midterm exam scores\nUnit: students\nContent:\nStem | Leaf \n1 | 0, 3, 6, 8\n2 | 3, 4, 4, 7, 9\n3 | 0, 3, 8\n4 | 3, 3, 4, 9\n5 | 0, 1, 1, 1, 7, 8, 9"}
{"level":4,"answer":2.0,"prediction":"import pandas as pd\n\ndef count_magazines_with_articles(df):\n    \"\"\"\n    This function takes in a pandas dataframe of articles per magazine, and returns the number of magazines that have at least 40 articles but less than 50 articles.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of articles per magazine.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of magazines that have at least 40 articles but less than 50 articles.\n    \"\"\"\n    # prepare a list to calculate the number of articles in each magazine\n    articles = []\n    # calculate the total number of articles in each magazine\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            articles.append(stem * 10 + leaf[j])\n    # filter the magazines where the total number of articles is greater than or equal to 40 and less than 50\n    filtered = [article for article in articles if 40 <= article < 50]\n    # count the number of magazines\n    num_magazines = len(filtered)\n    return num_magazines\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[0, 2, 4, 4, 4, 6], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [3, 3, 5, 7, 7, 8, 8], [0, 9]]\n})\n# Call the tool to solve the problem\nprint(count_magazines_with_articles(df))","question":"Edmond counted the number of articles in several different magazines. How many magazines had at least 40 articles but less than 50 articles?","prediction_code":"import pandas as pd\n\ndef count_magazines_with_articles(df):\n    \"\"\"\n    This function takes in a pandas dataframe of articles per magazine, and returns the number of magazines that have at least 40 articles but less than 50 articles.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of articles per magazine.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of magazines that have at least 40 articles but less than 50 articles.\n    \"\"\"\n    # prepare a list to calculate the number of articles in each magazine\n    articles = []\n    # calculate the total number of articles in each magazine\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            articles.append(stem * 10 + leaf[j])\n    # filter the magazines where the total number of articles is greater than or equal to 40 and less than 50\n    filtered = [article for article in articles if 40 <= article < 50]\n    # count the number of magazines\n    num_magazines = len(filtered)\n    return num_magazines","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[0, 2, 4, 4, 4, 6], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [3, 3, 5, 7, 7, 8, 8], [0, 9]]\n})\n# Call the tool to solve the problem\nprint(count_magazines_with_articles(df))","table":"Name: Articles per magazine\nUnit: None\nContent:\nStem | Leaf \n1 | 0, 2, 4, 4, 4, 6\n2 | 1, 2, 3, 4, 5, 6, 7, 7, 8, 9\n3 | 3, 3, 5, 7, 7, 8, 8\n4 | 0, 9"}
{"level":7,"answer":38.47,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item2_price - item1_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['red clay pot', 'beach umbrella', 'fountain', 'hammock'],\n    'Price': [26.79, 65.26, 96.65, 40.66]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'beach umbrella', 'red clay pot'))","question":"How much more does a beach umbrella cost than a red clay pot?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item2_price - item1_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['red clay pot', 'beach umbrella', 'fountain', 'hammock'],\n    'Price': [26.79, 65.26, 96.65, 40.66]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'beach umbrella', 'red clay pot'))","table":"Name: None\nUnit: $\nContent:\nred clay pot | $26.79\nbeach umbrella | $65.26\nfountain | $96.65\nhammock | $40.66"}
{"level":4,"answer":8.82,"prediction":"import pandas as pd\n\ndef calculate_remaining_money(df, budget, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price list and a budget, and returns the remaining money after buying the specified items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    budget (float): The initial budget.\n    items (list): A list of items to buy.\n    Returns:\n    float: The remaining money after buying the specified items.\n    \"\"\"\n    # Initialize the remaining money\n    remaining_money = budget\n    \n    # Iterate through the items and subtract their prices from the remaining money\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            remaining_money -= item_price\n    \n    return remaining_money\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['hammer', 'can of paint', 'padlock', 'wrench'],\n    'Price': [6.04, 9.56, 7.65, 6.46]\n})\n\n# Set the budget and items to buy\nbudget = 24.42\nitems = ['hammer', 'can of paint']\n\n# Call the tool to solve the problem\nremaining_money = calculate_remaining_money(df, budget, items)\n\n# Print out the answer\nprint(remaining_money)","question":"Sasha has $24.42. How much money will Sasha have left if she buys a hammer and a can of paint?","prediction_code":"import pandas as pd\n\ndef calculate_remaining_money(df, budget, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price list and a budget, and returns the remaining money after buying the specified items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    budget (float): The initial budget.\n    items (list): A list of items to buy.\n    Returns:\n    float: The remaining money after buying the specified items.\n    \"\"\"\n    # Initialize the remaining money\n    remaining_money = budget\n    \n    # Iterate through the items and subtract their prices from the remaining money\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            remaining_money -= item_price\n    \n    return remaining_money","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['hammer', 'can of paint', 'padlock', 'wrench'],\n    'Price': [6.04, 9.56, 7.65, 6.46]\n})\n\n# Set the budget and items to buy\nbudget = 24.42\nitems = ['hammer', 'can of paint']\n\n# Call the tool to solve the problem\nremaining_money = calculate_remaining_money(df, budget, items)\n\n# Print out the answer\nprint(remaining_money)","table":"Name: None\nUnit: $\nContent:\nhammer | $6.04\ncan of paint | $9.56\npadlock | $7.65\nwrench | $6.46"}
{"level":5,"answer":20.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to be purchased.\n    It returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['mystery novel', 'cookbook', 'map of Africa', 'dog calendar', 'map of the United States', 'airplane calendar'],\n    'Price': [3, 8, 9, 4, 2, 4]\n})\n\n# Define the items to be purchased\nitems = ['cookbook', 'mystery novel', 'map of Africa']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Russell need to buy a cookbook, a mystery novel, and a map of Africa?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to be purchased.\n    It returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['mystery novel', 'cookbook', 'map of Africa', 'dog calendar', 'map of the United States', 'airplane calendar'],\n    'Price': [3, 8, 9, 4, 2, 4]\n})\n\n# Define the items to be purchased\nitems = ['cookbook', 'mystery novel', 'map of Africa']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nmystery novel | $3\ncookbook | $8\nmap of Africa | $9\ndog calendar | $4\nmap of the United States | $2\nairplane calendar | $4"}
{"level":7,"answer":6.64,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its price per pound and the quantity purchased.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the item names and their prices per pound with columns 'Item' and 'Price'.\n    item (str): The name of the item to calculate the cost for.\n    quantity (float): The quantity of the item to purchase in pounds.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price per pound for the item\n        price_per_pound = item_df['Price'].values[0]\n        \n        # Calculate the total cost based on the price per pound and the quantity purchased\n        total_cost = price_per_pound * quantity\n        \n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['brown rice', 'sticky rice', 'Bhutanese red rice', 'African rice'],\n    'Price': [6.58, 3.32, 6.88, 5.93]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'sticky rice', 2))","question":"If Mitchell buys 2 pounds of sticky rice, how much will he spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its price per pound and the quantity purchased.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the item names and their prices per pound with columns 'Item' and 'Price'.\n    item (str): The name of the item to calculate the cost for.\n    quantity (float): The quantity of the item to purchase in pounds.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price per pound for the item\n        price_per_pound = item_df['Price'].values[0]\n        \n        # Calculate the total cost based on the price per pound and the quantity purchased\n        total_cost = price_per_pound * quantity\n        \n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['brown rice', 'sticky rice', 'Bhutanese red rice', 'African rice'],\n    'Price': [6.58, 3.32, 6.88, 5.93]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'sticky rice', 2))","table":"Name: None\nUnit: $\nContent:\nbrown rice | $6.58 per pound\nsticky rice | $3.32 per pound\nBhutanese red rice | $6.88 per pound\nAfrican rice | $5.93 per pound"}
{"level":2,"answer":30.0,"prediction":"import pandas as pd\n\ndef calculate_total_goldfish(df, num_aquariums):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of goldfish per aquarium and the number of aquariums, and returns the total number of goldfish.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of goldfish per aquarium.\n    The dataframe should contain \"Number of aquariums\" and \"Number of goldfish\" columns.\n    num_aquariums (int): The number of aquariums.\n    Returns:\n    int: The total number of goldfish in the given number of aquariums.\n    \"\"\"\n    # Filter the DataFrame for the given number of aquariums\n    filtered_df = df[df['Number of aquariums'] <= num_aquariums]\n    \n    # Calculate the total number of goldfish\n    total_goldfish = filtered_df['Number of goldfish'].sum()\n    \n    return total_goldfish\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of aquariums': [1, 2, 3, 4, 5, 6],\n    'Number of goldfish': [5, 10, 15, 20, 25, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_goldfish(df, 6))","question":"Each aquarium has 5 goldfish. How many goldfish are in 6 aquariums?","prediction_code":"import pandas as pd\n\ndef calculate_total_goldfish(df, num_aquariums):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of goldfish per aquarium and the number of aquariums, and returns the total number of goldfish.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of goldfish per aquarium.\n    The dataframe should contain \"Number of aquariums\" and \"Number of goldfish\" columns.\n    num_aquariums (int): The number of aquariums.\n    Returns:\n    int: The total number of goldfish in the given number of aquariums.\n    \"\"\"\n    # Filter the DataFrame for the given number of aquariums\n    filtered_df = df[df['Number of aquariums'] <= num_aquariums]\n    \n    # Calculate the total number of goldfish\n    total_goldfish = filtered_df['Number of goldfish'].sum()\n    \n    return total_goldfish","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of aquariums': [1, 2, 3, 4, 5, 6],\n    'Number of goldfish': [5, 10, 15, 20, 25, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_goldfish(df, 6))","table":"Name: None\nUnit: None\nContent:\nNumber of aquariums | Number of goldfish\n1 | 5\n2 | 10\n3 | 15\n4 | 20\n5 | 25\n6 | ?"}
{"level":6,"answer":13.8,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item given its quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price of the item\n    price = item_df['Price'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price * quantity\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['pepper', 'cumin', 'turmeric', 'cinnamon', 'paprika'],\n    'Price': [4, 3, 3, 3, 2]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'turmeric', 4.6))","question":"Natalie buys 4.6 kilograms of turmeric. What is the total cost?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item given its quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price of the item\n    price = item_df['Price'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price * quantity\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['pepper', 'cumin', 'turmeric', 'cinnamon', 'paprika'],\n    'Price': [4, 3, 3, 3, 2]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'turmeric', 4.6))","table":"Name: None\nUnit: $\nContent:\npepper | $4 per kg\ncumin | $3 per kg\nturmeric | $3 per kg\ncinnamon | $3 per kg\npaprika | $2 per kg"}
{"level":5,"answer":452.96,"prediction":"import pandas as pd\n\ndef calculate_pay_after_taxes(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a pay stub and calculates the pay after taxes for an employee.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the pay stub information.\n    The DataFrame should have columns 'Employee', 'Pay period', 'Total earnings', 'Federal income tax', 'State income tax', 'Other taxes', 'Total taxes', 'Pay after taxes'.\n    Returns:\n    float: The pay after taxes for the employee.\n    \"\"\"\n    # Filter the DataFrame for the specific employee\n    employee_df = df[df['Employee'] == 'Dhruba Khanal']\n    \n    # Get the total earnings and total taxes for the employee\n    total_earnings = employee_df['Total earnings'].values[0]\n    total_taxes = employee_df['Total taxes'].values[0]\n    \n    # Calculate the pay after taxes\n    pay_after_taxes = total_earnings - total_taxes\n    \n    return pay_after_taxes\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Employee': ['Dhruba Khanal', 'Total earnings', 'Federal income tax', 'State income tax', 'Other taxes', 'Total taxes', 'Pay after taxes'],\n    'Pay period': ['December 9-15', '', '', '', '', '', ''],\n    '': ['', '', '', '', '', '', ''],\n    '': ['', '', '$71.14', '$48.90', '$47.00', '', ''],\n    '': ['', '', '', '', '', '', ''],\n    '': ['', '', '', '', '', '', '?'],\n    '': ['', '', '', '', '', '', '?']\n})\n# Call the tool to solve the problem\nprint(calculate_pay_after_taxes(df))","question":"Look at Dhruba's pay stub. Dhruba lives in a state that has state income tax. How much did Dhruba make after taxes?","prediction_code":"import pandas as pd\n\ndef calculate_pay_after_taxes(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a pay stub and calculates the pay after taxes for an employee.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the pay stub information.\n    The DataFrame should have columns 'Employee', 'Pay period', 'Total earnings', 'Federal income tax', 'State income tax', 'Other taxes', 'Total taxes', 'Pay after taxes'.\n    Returns:\n    float: The pay after taxes for the employee.\n    \"\"\"\n    # Filter the DataFrame for the specific employee\n    employee_df = df[df['Employee'] == 'Dhruba Khanal']\n    \n    # Get the total earnings and total taxes for the employee\n    total_earnings = employee_df['Total earnings'].values[0]\n    total_taxes = employee_df['Total taxes'].values[0]\n    \n    # Calculate the pay after taxes\n    pay_after_taxes = total_earnings - total_taxes\n    \n    return pay_after_taxes","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Employee': ['Dhruba Khanal', 'Total earnings', 'Federal income tax', 'State income tax', 'Other taxes', 'Total taxes', 'Pay after taxes'],\n    'Pay period': ['December 9-15', '', '', '', '', '', ''],\n    '': ['', '', '', '', '', '', ''],\n    '': ['', '', '$71.14', '$48.90', '$47.00', '', ''],\n    '': ['', '', '', '', '', '', ''],\n    '': ['', '', '', '', '', '', '?'],\n    '': ['', '', '', '', '', '', '?']\n})\n# Call the tool to solve the problem\nprint(calculate_pay_after_taxes(df))","table":"Name: None\nUnit: $\nContent:\nEmployee | Pay period |\nDhruba Khanal | December 9-15 |\nTotal earnings | | $620.00\nFederal income tax | $71.14 |\nState income tax | $48.90 |\nOther taxes | $47.00 |\nTotal taxes | | ?\nPay after taxes | | ?"}
{"level":5,"answer":15.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of tractors owned by farmers and returns the median number of tractors.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of tractors owned by each farmer.\n    The DataFrame should have columns 'Farmer' and 'Number of tractors'.\n    Returns:\n    float: The median number of tractors.\n    \"\"\"\n    # Get the column of number of tractors\n    tractors = df['Number of tractors']\n    \n    # Calculate the median\n    median = tractors.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Farmer': ['Farmer Andy', 'Farmer Joe', 'Farmer Susie', 'Farmer Walt', 'Farmer Rick', 'Farmer Tom', 'Farmer Jane'],\n    'Number of tractors': [15, 8, 19, 12, 15, 15, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"Some farmers compared how many tractors they own. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of tractors owned by farmers and returns the median number of tractors.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of tractors owned by each farmer.\n    The DataFrame should have columns 'Farmer' and 'Number of tractors'.\n    Returns:\n    float: The median number of tractors.\n    \"\"\"\n    # Get the column of number of tractors\n    tractors = df['Number of tractors']\n    \n    # Calculate the median\n    median = tractors.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Farmer': ['Farmer Andy', 'Farmer Joe', 'Farmer Susie', 'Farmer Walt', 'Farmer Rick', 'Farmer Tom', 'Farmer Jane'],\n    'Number of tractors': [15, 8, 19, 12, 15, 15, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Tractors\nUnit: None\nContent:\nFarmer | Number of tractors\nFarmer Andy | 15\nFarmer Joe | 8\nFarmer Susie | 19\nFarmer Walt | 12\nFarmer Rick | 15\nFarmer Tom | 15\nFarmer Jane | 8"}
{"level":7,"answer":12.0,"prediction":"import pandas as pd\n\ndef count_patrons_with_4_books(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of books checked out from the library and returns the number of patrons who checked out exactly 4 books.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of books checked out and their frequencies.\n    The dataframe should contain \"Books checked out\" and \"Frequency\" columns.\n    Returns:\n    int: The number of patrons who checked out exactly 4 books.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of books checked out is 4\n    filtered_df = df[df['Books checked out'] == 4]\n    \n    # Get the frequency of patrons who checked out exactly 4 books\n    num_patrons = filtered_df['Frequency'].values[0]\n    \n    return num_patrons\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Books checked out': [1, 2, 3, 4, 5],\n    'Frequency': [3, 0, 19, 12, 16]\n})\n# Call the tool to solve the problem\nprint(count_patrons_with_4_books(df))","question":"To better understand library usage patterns, a librarian figured out how many books were checked out by some patrons last year. How many patrons checked out exactly 4 books from the library?","prediction_code":"import pandas as pd\n\ndef count_patrons_with_4_books(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of books checked out from the library and returns the number of patrons who checked out exactly 4 books.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of books checked out and their frequencies.\n    The dataframe should contain \"Books checked out\" and \"Frequency\" columns.\n    Returns:\n    int: The number of patrons who checked out exactly 4 books.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of books checked out is 4\n    filtered_df = df[df['Books checked out'] == 4]\n    \n    # Get the frequency of patrons who checked out exactly 4 books\n    num_patrons = filtered_df['Frequency'].values[0]\n    \n    return num_patrons","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Books checked out': [1, 2, 3, 4, 5],\n    'Frequency': [3, 0, 19, 12, 16]\n})\n# Call the tool to solve the problem\nprint(count_patrons_with_4_books(df))","table":"Name: Checking out books from the library\nUnit: None\nContent:\nBooks checked out | Frequency\n1 | 3\n2 | 0\n3 | 19\n4 | 12\n5 | 16"}
{"level":8,"answer":70.0,"prediction":"import pandas as pd\n\ndef count_players_with_min_score(df, min_score):\n    \"\"\"\n    This function takes in a pandas DataFrame of scores in a card game and a minimum score, and returns the number of players who scored at least the minimum score.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the scores and their frequencies with columns 'Score' and 'Frequency'.\n    min_score (int): The minimum score to consider.\n    Returns:\n    int: The number of players who scored at least the minimum score.\n    \"\"\"\n    # Filter the DataFrame for scores greater than or equal to the minimum score\n    filtered_df = df[df['Score'] >= min_score]\n    \n    # Calculate the total number of players who scored at least the minimum score\n    num_players = filtered_df['Frequency'].sum()\n    \n    return num_players\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Score': [4, 5, 6, 7, 8, 9, 10],\n    'Frequency': [0, 20, 4, 13, 10, 14, 9]\n})\n# Set the minimum score\nmin_score = 5\n# Call the tool to solve the problem\nprint(count_players_with_min_score(df, min_score))","question":"Emma figured out the scores at the end of a card game. How many people scored at least 5?","prediction_code":"import pandas as pd\n\ndef count_players_with_min_score(df, min_score):\n    \"\"\"\n    This function takes in a pandas DataFrame of scores in a card game and a minimum score, and returns the number of players who scored at least the minimum score.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the scores and their frequencies with columns 'Score' and 'Frequency'.\n    min_score (int): The minimum score to consider.\n    Returns:\n    int: The number of players who scored at least the minimum score.\n    \"\"\"\n    # Filter the DataFrame for scores greater than or equal to the minimum score\n    filtered_df = df[df['Score'] >= min_score]\n    \n    # Calculate the total number of players who scored at least the minimum score\n    num_players = filtered_df['Frequency'].sum()\n    \n    return num_players","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Score': [4, 5, 6, 7, 8, 9, 10],\n    'Frequency': [0, 20, 4, 13, 10, 14, 9]\n})\n# Set the minimum score\nmin_score = 5\n# Call the tool to solve the problem\nprint(count_players_with_min_score(df, min_score))","table":"Name: Scores in a card game\nUnit: None\nContent:\nScore | Frequency\n4 | 0\n5 | 20\n6 | 4\n7 | 13\n8 | 10\n9 | 14\n10 | 9"}
{"level":7,"answer":6.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of basketball hoops per park and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of basketball hoops per park.\n    The dataframe should contain \"Park\" and \"Number of basketball hoops\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of basketball hoops\" column\n    min_value = df['Number of basketball hoops'].min()\n    max_value = df['Number of basketball hoops'].max()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Park': ['Crestview Park', 'Mooreland Park', 'Otter Park', 'Westfield Park', 'Kelly Park'],\n    'Number of basketball hoops': [7, 4, 4, 4, 10]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"The parks department compared how many basketball hoops there are at each park. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of basketball hoops per park and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of basketball hoops per park.\n    The dataframe should contain \"Park\" and \"Number of basketball hoops\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of basketball hoops\" column\n    min_value = df['Number of basketball hoops'].min()\n    max_value = df['Number of basketball hoops'].max()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Park': ['Crestview Park', 'Mooreland Park', 'Otter Park', 'Westfield Park', 'Kelly Park'],\n    'Number of basketball hoops': [7, 4, 4, 4, 10]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Basketball hoops\nUnit: None\nContent:\nPark | Number of basketball hoops\nCrestview Park | 7\nMooreland Park | 4\nOtter Park | 4\nWestfield Park | 4\nKelly Park | 10"}
{"level":5,"answer":71.0,"prediction":"import pandas as pd\n\ndef calculate_remaining_money(df, budget, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, a budget, and a list of items to buy.\n    It returns the remaining money after buying the specified items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    budget (float): The initial budget.\n    items (list): A list of items to buy.\n    Returns:\n    float: The remaining money after buying the specified items.\n    \"\"\"\n    # Initialize the remaining money\n    remaining_money = budget\n    \n    # Iterate through the items and subtract their prices from the remaining money\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            remaining_money -= item_price\n    \n    return remaining_money\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['ticket for a Mexican cruise', 'ticket for a Mediterranean cruise', 'ticket for an Atlantic cruise', 'ticket for a Hawaiian cruise', 'ticket for a Caribbean cruise', 'ticket for a South American cruise'],\n    'Price': [116.00, 811.00, 422.00, 197.00, 509.00, 462.00]\n})\n\n# Set the initial budget\nbudget = 730.00\n\n# Set the items to buy\nitems = ['ticket for a Hawaiian cruise', 'ticket for a South American cruise']\n\n# Call the tool to solve the problem\nremaining_money = calculate_remaining_money(df, budget, items)\n\n# Print out the answer\nprint(remaining_money)","question":"Pablo has $730.00. How much money will Pablo have left if he buys a ticket for a Hawaiian cruise and a ticket for a South American cruise?","prediction_code":"import pandas as pd\n\ndef calculate_remaining_money(df, budget, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, a budget, and a list of items to buy.\n    It returns the remaining money after buying the specified items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    budget (float): The initial budget.\n    items (list): A list of items to buy.\n    Returns:\n    float: The remaining money after buying the specified items.\n    \"\"\"\n    # Initialize the remaining money\n    remaining_money = budget\n    \n    # Iterate through the items and subtract their prices from the remaining money\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            remaining_money -= item_price\n    \n    return remaining_money","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['ticket for a Mexican cruise', 'ticket for a Mediterranean cruise', 'ticket for an Atlantic cruise', 'ticket for a Hawaiian cruise', 'ticket for a Caribbean cruise', 'ticket for a South American cruise'],\n    'Price': [116.00, 811.00, 422.00, 197.00, 509.00, 462.00]\n})\n\n# Set the initial budget\nbudget = 730.00\n\n# Set the items to buy\nitems = ['ticket for a Hawaiian cruise', 'ticket for a South American cruise']\n\n# Call the tool to solve the problem\nremaining_money = calculate_remaining_money(df, budget, items)\n\n# Print out the answer\nprint(remaining_money)","table":"Name: None\nUnit: $\nContent:\nticket for a Mexican cruise | $116.00\nticket for a Mediterranean cruise | $811.00\nticket for an Atlantic cruise | $422.00\nticket for a Hawaiian cruise | $197.00\nticket for a Caribbean cruise | $509.00\nticket for a South American cruise | $462.00"}
{"level":5,"answer":6.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of hours spent volunteering and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the days and hours spent volunteering.\n    The DataFrame should have columns 'Day' and 'Hours'.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the 'Hours' column from the DataFrame\n    hours = df['Hours']\n    \n    # Calculate the median using pandas\n    median = hours.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Hours': [10, 6, 2, 9, 4]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"To get credit for meeting her school's community service requirement, Haley kept a volunteering log. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of hours spent volunteering and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the days and hours spent volunteering.\n    The DataFrame should have columns 'Day' and 'Hours'.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the 'Hours' column from the DataFrame\n    hours = df['Hours']\n    \n    # Calculate the median using pandas\n    median = hours.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Hours': [10, 6, 2, 9, 4]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Hours spent volunteering\nUnit: None\nContent:\nDay | Hours\nMonday | 10\nTuesday | 6\nWednesday | 2\nThursday | 9\nFriday | 4"}
{"level":5,"answer":7.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of hours slept per day and returns the median of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the hours slept per day.\n    The dataframe should contain \"Day\" and \"Hours\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the \"Hours\" column as a Series\n    hours_series = df['Hours']\n    \n    # Calculate the median using pandas\n    median = hours_series.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Hours': [7, 8, 9, 7, 10, 7, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"For a psychology assignment, Garrett kept a sleep log for 7 days. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of hours slept per day and returns the median of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the hours slept per day.\n    The dataframe should contain \"Day\" and \"Hours\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the \"Hours\" column as a Series\n    hours_series = df['Hours']\n    \n    # Calculate the median using pandas\n    median = hours_series.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Hours': [7, 8, 9, 7, 10, 7, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Hours slept\nUnit: None\nContent:\nDay | Hours\nWednesday | 7\nThursday | 8\nFriday | 9\nSaturday | 7\nSunday | 10\nMonday | 7\nTuesday | 6"}
{"level":7,"answer":3.13,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['encyclopedia', 'airplane calendar', 'map of the world', 'dog calendar', 'photo album', 'map of Africa'],\n    'Price': [10.45, 13.23, 13.10, 11.63, 25.28, 10.10]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'airplane calendar', 'map of Africa'))","question":"How much more does an airplane calendar cost than a map of Africa?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['encyclopedia', 'airplane calendar', 'map of the world', 'dog calendar', 'photo album', 'map of Africa'],\n    'Price': [10.45, 13.23, 13.10, 11.63, 25.28, 10.10]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'airplane calendar', 'map of Africa'))","table":"Name: None\nUnit: $\nContent:\nencyclopedia | $10.45\nairplane calendar | $13.23\nmap of the world | $13.10\ndog calendar | $11.63\nphoto album | $25.28\nmap of Africa | $10.10"}
{"level":4,"answer":5.0,"prediction":"import pandas as pd\n\ndef get_bridge_toll(df, bridge_name, vehicle_type):\n    \"\"\"\n    This function takes in a pandas DataFrame of bridge tolls and returns the toll for a specific vehicle on a specific bridge.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge toll information.\n    bridge_name (str): The name of the bridge.\n    vehicle_type (str): The type of vehicle.\n    Returns:\n    float: The toll for the specified vehicle on the specified bridge.\n    \"\"\"\n    # Filter the DataFrame for the specific bridge and vehicle type\n    bridge_df = df[df['Bridge'] == bridge_name]\n    toll = bridge_df[vehicle_type].values[0]\n    \n    return toll\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['Hatem', 'Golden Gate', 'San Mateo', 'Fort Madison'],\n    'Truck': ['$10', '$7', '$6', '$4'],\n    'Car': ['$5', '$6', '$4', '$1']\n})\n# Call the tool to solve the problem\nprint(get_bridge_toll(df, 'Hatem', 'Car'))","question":"A transportation analyst compared various bridges' tolls. How much is the toll for a car on the Hatem bridge?","prediction_code":"import pandas as pd\n\ndef get_bridge_toll(df, bridge_name, vehicle_type):\n    \"\"\"\n    This function takes in a pandas DataFrame of bridge tolls and returns the toll for a specific vehicle on a specific bridge.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge toll information.\n    bridge_name (str): The name of the bridge.\n    vehicle_type (str): The type of vehicle.\n    Returns:\n    float: The toll for the specified vehicle on the specified bridge.\n    \"\"\"\n    # Filter the DataFrame for the specific bridge and vehicle type\n    bridge_df = df[df['Bridge'] == bridge_name]\n    toll = bridge_df[vehicle_type].values[0]\n    \n    return toll","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['Hatem', 'Golden Gate', 'San Mateo', 'Fort Madison'],\n    'Truck': ['$10', '$7', '$6', '$4'],\n    'Car': ['$5', '$6', '$4', '$1']\n})\n# Call the tool to solve the problem\nprint(get_bridge_toll(df, 'Hatem', 'Car'))","table":"Name: Bridge tolls\nUnit: $\nContent:\nBridge | Truck | Car\nHatem | $10 | $5\nGolden Gate | $7 | $6\nSan Mateo | $6 | $4\nFort Madison | $4 | $1"}
{"level":7,"answer":8.0,"prediction":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of math teachers per high school and returns the mean of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of math teachers per high school.\n    The dataframe should contain \"High school\" and \"Number of math teachers\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Extract the column with the numbers\n    numbers = df['Number of math teachers']\n    \n    # Calculate the mean using pandas\n    mean = numbers.mean()\n    \n    return mean\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'High school': ['Hillview High', 'Green High', 'Thompson High', 'Westside High', 'Central High', 'Northside High', 'Lincoln High'],\n    'Number of math teachers': [8, 6, 10, 7, 9, 9, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","question":"The school district compared how many math teachers each high school has. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of math teachers per high school and returns the mean of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of math teachers per high school.\n    The dataframe should contain \"High school\" and \"Number of math teachers\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Extract the column with the numbers\n    numbers = df['Number of math teachers']\n    \n    # Calculate the mean using pandas\n    mean = numbers.mean()\n    \n    return mean","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'High school': ['Hillview High', 'Green High', 'Thompson High', 'Westside High', 'Central High', 'Northside High', 'Lincoln High'],\n    'Number of math teachers': [8, 6, 10, 7, 9, 9, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","table":"Name: Math teachers\nUnit: None\nContent:\nHigh school | Number of math teachers\nHillview High | 8\nGreen High | 6\nThompson High | 10\nWestside High | 7\nCentral High | 9\nNorthside High | 9\nLincoln High | 7"}
{"level":7,"answer":30.0,"prediction":"import pandas as pd\n\ndef count_children_with_at_least_2_puppets(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of finger puppets made by children and returns the number of children who made at least 2 finger puppets.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of finger puppets made by children.\n    The dataframe should contain \"Finger puppets made\" and \"Frequency\" columns.\n    Returns:\n    int: The number of children who made at least 2 finger puppets.\n    \"\"\"\n    # Filter the DataFrame for children who made at least 2 finger puppets\n    filtered_df = df[df['Finger puppets made'] >= 2]\n    \n    # Count the number of rows\n    num_children = len(filtered_df)\n    \n    return num_children\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Finger puppets made': [0, 1, 2, 3],\n    'Frequency': [16, 12, 20, 10]\n})\n# Call the tool to solve the problem\nprint(count_children_with_at_least_2_puppets(df))","question":"The Oakdale Art Museum recorded how many finger puppets the children made at last Sunday's art workshop. How many children made at least 2 finger puppets?","prediction_code":"import pandas as pd\n\ndef count_children_with_at_least_2_puppets(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of finger puppets made by children and returns the number of children who made at least 2 finger puppets.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of finger puppets made by children.\n    The dataframe should contain \"Finger puppets made\" and \"Frequency\" columns.\n    Returns:\n    int: The number of children who made at least 2 finger puppets.\n    \"\"\"\n    # Filter the DataFrame for children who made at least 2 finger puppets\n    filtered_df = df[df['Finger puppets made'] >= 2]\n    \n    # Count the number of rows\n    num_children = len(filtered_df)\n    \n    return num_children","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Finger puppets made': [0, 1, 2, 3],\n    'Frequency': [16, 12, 20, 10]\n})\n# Call the tool to solve the problem\nprint(count_children_with_at_least_2_puppets(df))","table":"Name: Making finger puppets\nUnit: None\nContent:\nFinger puppets made | Frequency\n0 | 16\n1 | 12\n2 | 20\n3 | 10"}
{"level":5,"answer":6.0,"prediction":"import pandas as pd\n\ndef calculate_language_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of language choices and returns the difference in the number of students who chose Spanish and French.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the language choices and their frequencies.\n    The DataFrame should have columns 'Language' and 'Frequency'.\n    Returns:\n    int: The difference in the number of students who chose Spanish and French.\n    \"\"\"\n    # Filter the DataFrame for Spanish and French languages\n    spanish_df = df[df['Language'] == 'Spanish']\n    french_df = df[df['Language'] == 'French']\n    \n    # Get the frequencies for Spanish and French\n    spanish_freq = spanish_df['Frequency'].values[0]\n    french_freq = french_df['Frequency'].values[0]\n    \n    # Calculate the difference in frequencies\n    difference = spanish_freq - french_freq\n    \n    return difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Language': ['French', 'Mandarin', 'American Sign Language', 'Spanish'],\n    'Frequency': [21, 22, 23, 27]\n})\n# Call the tool to solve the problem\nprint(calculate_language_difference(df))","question":"The fifth-grade students at Valley View School chose the language they were most interested in learning next year. The school principal recorded their choices in a frequency chart. How many more students chose Spanish than French?","prediction_code":"import pandas as pd\n\ndef calculate_language_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of language choices and returns the difference in the number of students who chose Spanish and French.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the language choices and their frequencies.\n    The DataFrame should have columns 'Language' and 'Frequency'.\n    Returns:\n    int: The difference in the number of students who chose Spanish and French.\n    \"\"\"\n    # Filter the DataFrame for Spanish and French languages\n    spanish_df = df[df['Language'] == 'Spanish']\n    french_df = df[df['Language'] == 'French']\n    \n    # Get the frequencies for Spanish and French\n    spanish_freq = spanish_df['Frequency'].values[0]\n    french_freq = french_df['Frequency'].values[0]\n    \n    # Calculate the difference in frequencies\n    difference = spanish_freq - french_freq\n    \n    return difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Language': ['French', 'Mandarin', 'American Sign Language', 'Spanish'],\n    'Frequency': [21, 22, 23, 27]\n})\n# Call the tool to solve the problem\nprint(calculate_language_difference(df))","table":"Name: Languages to learn\nUnit: more students\nContent:\nLanguage | Frequency\nFrench | 21\nMandarin | 22\nAmerican Sign Language | 23\nSpanish | 27"}
{"level":6,"answer":9.8,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item given its quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price per kilogram of the item\n    price_per_kg = item_df['Price'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price_per_kg * quantity\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['dried pineapple', 'dried mango', 'dried pear', 'banana chips'],\n    'Price': [3, 1, 3, 2]\n})\n\n# Call the tool to solve the problem\nitem = 'banana chips'\nquantity = 4 + 9\/10\ntotal_cost = calculate_total_cost(df, item, quantity)\n\n# Print out the answer\nprint(total_cost)","question":"Keith went to the store. He bought 4+9\/10 kilograms of banana chips. How much did he spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item given its quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price per kilogram of the item\n    price_per_kg = item_df['Price'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price_per_kg * quantity\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['dried pineapple', 'dried mango', 'dried pear', 'banana chips'],\n    'Price': [3, 1, 3, 2]\n})\n\n# Call the tool to solve the problem\nitem = 'banana chips'\nquantity = 4 + 9\/10\ntotal_cost = calculate_total_cost(df, item, quantity)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\ndried pineapple | $3\/kilogram\ndried mango | $1\/kilogram\ndried pear | $3\/kilogram\nbanana chips | $2\/kilogram"}
{"level":7,"answer":2.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of art contest entries per year and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of art contest entries per year.\n    The DataFrame should have columns 'Year' and 'Number of entries'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_entry = df[df['Year'] == start_year]['Number of entries'].values[0]\n    end_entry = df[df['Year'] == end_year]['Number of entries'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_entry - start_entry) \/ start_entry\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2011, 2012, 2013, 2014, 2015],\n    'Number of entries': [43, 37, 41, 33, 35]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2014, 2015))","question":"Mrs. Cunningham hosts an annual art contest for kids, and she keeps a record of the number of entries each year. According to the table, what was the rate of change between 2014 and 2015?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of art contest entries per year and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of art contest entries per year.\n    The DataFrame should have columns 'Year' and 'Number of entries'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_entry = df[df['Year'] == start_year]['Number of entries'].values[0]\n    end_entry = df[df['Year'] == end_year]['Number of entries'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_entry - start_entry) \/ start_entry\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2011, 2012, 2013, 2014, 2015],\n    'Number of entries': [43, 37, 41, 33, 35]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2014, 2015))","table":"Name: Art contest entries\nUnit: entries per year\nContent:\nYear | Number of entries\n2011 | 43\n2012 | 37\n2013 | 41\n2014 | 33\n2015 | 35"}
{"level":8,"answer":9.0,"prediction":"import pandas as pd\nimport statistics\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of basketball hoops per park and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of basketball hoops per park.\n    The dataframe should contain \"Park\" and \"Number of basketball hoops\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of basketball hoops']\n    \n    # Calculate the mode\n    mode = statistics.mode(numbers)\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Park': ['Palm Park', 'Mooreland Park', 'Crestview Park', 'Riverfront Park', 'Westfield Park', 'Linden Park', 'Heron Park', 'Otter Park'],\n    'Number of basketball hoops': [9, 8, 8, 9, 8, 9, 2, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"The parks department compared how many basketball hoops there are at each park. What is the mode of the numbers?","prediction_code":"import pandas as pd\nimport statistics\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of basketball hoops per park and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of basketball hoops per park.\n    The dataframe should contain \"Park\" and \"Number of basketball hoops\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of basketball hoops']\n    \n    # Calculate the mode\n    mode = statistics.mode(numbers)\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Park': ['Palm Park', 'Mooreland Park', 'Crestview Park', 'Riverfront Park', 'Westfield Park', 'Linden Park', 'Heron Park', 'Otter Park'],\n    'Number of basketball hoops': [9, 8, 8, 9, 8, 9, 2, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Basketball hoops\nUnit: None\nContent:\nPark | Number of basketball hoops\nPalm Park | 9\nMooreland Park | 8\nCrestview Park | 8\nRiverfront Park | 9\nWestfield Park | 8\nLinden Park | 9\nHeron Park | 2\nOtter Park | 9"}
{"level":7,"answer":1.0,"prediction":"import pandas as pd\n\ndef count_barrels_with_less_than_28_rotten_tomatoes(df):\n    \"\"\"\n    This function takes in a pandas dataframe of rotten tomatoes per barrel, and returns the number of barrels that have less than 28 rotten tomatoes.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of rotten tomatoes per barrel.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of barrels that have less than 28 rotten tomatoes.\n    \"\"\"\n    # prepare a list to calculate the number of rotten tomatoes in each barrel\n    rotten_tomatoes = []\n    # calculate the total number of rotten tomatoes in each barrel\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        if leaf:\n            for j in range(len(leaf)):\n                rotten_tomatoes.append(stem * 10 + leaf[j])\n        else:\n            rotten_tomatoes.append(stem)\n    # filter the barrels where the total number of rotten tomatoes is less than 28\n    filtered = [tomatoes for tomatoes in rotten_tomatoes if tomatoes < 28]\n    # count the number of rows\n    num_barrels = len(filtered)\n    return num_barrels\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [8, [], 3, [], [6, 9], [], 0, 9]\n})\n# Call the tool to solve the problem\nprint(count_barrels_with_less_than_28_rotten_tomatoes(df))","question":"The Castroville Soup Company recorded the number of rotten tomatoes in each barrel it received. How many barrels had less than 28 rotten tomatoes?","prediction_code":"import pandas as pd\n\ndef count_barrels_with_less_than_28_rotten_tomatoes(df):\n    \"\"\"\n    This function takes in a pandas dataframe of rotten tomatoes per barrel, and returns the number of barrels that have less than 28 rotten tomatoes.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of rotten tomatoes per barrel.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of barrels that have less than 28 rotten tomatoes.\n    \"\"\"\n    # prepare a list to calculate the number of rotten tomatoes in each barrel\n    rotten_tomatoes = []\n    # calculate the total number of rotten tomatoes in each barrel\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        if leaf:\n            for j in range(len(leaf)):\n                rotten_tomatoes.append(stem * 10 + leaf[j])\n        else:\n            rotten_tomatoes.append(stem)\n    # filter the barrels where the total number of rotten tomatoes is less than 28\n    filtered = [tomatoes for tomatoes in rotten_tomatoes if tomatoes < 28]\n    # count the number of rows\n    num_barrels = len(filtered)\n    return num_barrels","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [8, [], 3, [], [6, 9], [], 0, 9]\n})\n# Call the tool to solve the problem\nprint(count_barrels_with_less_than_28_rotten_tomatoes(df))","table":"Name: Rotten tomatoes per barrel\nUnit: barrels\nContent:\nStem | Leaf \n1 | 8\n2 | \n3 | 3\n4 | \n5 | 6, 9\n6 | \n7 | 0\n8 | 9"}
{"level":8,"answer":4.0,"prediction":"import pandas as pd\n\ndef calculate_mean_score(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trivia game scores and returns the mean of the scores.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and scores of the players.\n    The dataframe should contain \"Name\" and \"Score\" columns.\n    Returns:\n    float: The mean of the scores.\n    \"\"\"\n    # Calculate the mean of the scores column\n    mean_score = df['Score'].mean()\n    \n    return mean_score\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Jamal', 'Terrence', 'Eve', 'Kiara', 'Zeke'],\n    'Score': [10, 4, 1, 4, 1]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_score(df))","question":"Some friends played a trivia game and recorded their scores. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean_score(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trivia game scores and returns the mean of the scores.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and scores of the players.\n    The dataframe should contain \"Name\" and \"Score\" columns.\n    Returns:\n    float: The mean of the scores.\n    \"\"\"\n    # Calculate the mean of the scores column\n    mean_score = df['Score'].mean()\n    \n    return mean_score","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Jamal', 'Terrence', 'Eve', 'Kiara', 'Zeke'],\n    'Score': [10, 4, 1, 4, 1]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_score(df))","table":"Name: Trivia game scores\nUnit: None\nContent:\nName | Score\nJamal | 10\nTerrence | 4\nEve | 1\nKiara | 4\nZeke | 1"}
{"level":8,"answer":-9.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of students receiving scholarships and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of students receiving scholarships per year.\n    The DataFrame should have \"Year\" and \"Students\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_students = df[df['Year'] == start_year]['Students'].values[0]\n    end_students = df[df['Year'] == end_year]['Students'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_students - start_students) \/ start_students * 100\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2017, 2018, 2019, 2020, 2021],\n    'Students': [38, 43, 47, 46, 37]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2020, 2021))","question":"The financial aid office at McGee University produced an internal report on the number of students receiving scholarships. According to the table, what was the rate of change between 2020 and 2021?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of students receiving scholarships and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of students receiving scholarships per year.\n    The DataFrame should have \"Year\" and \"Students\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_students = df[df['Year'] == start_year]['Students'].values[0]\n    end_students = df[df['Year'] == end_year]['Students'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_students - start_students) \/ start_students * 100\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2017, 2018, 2019, 2020, 2021],\n    'Students': [38, 43, 47, 46, 37]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2020, 2021))","table":"Name: Students receiving scholarships\nUnit: students per year\nContent:\nYear | Students\n2017 | 38\n2018 | 43\n2019 | 47\n2020 | 46\n2021 | 37"}
{"level":6,"answer":1.0,"prediction":"import pandas as pd\n\ndef count_pizzas_with_27_pepperoni(df):\n    \"\"\"\n    This function takes in a pandas dataframe of pieces of pepperoni per pizza, and returns the number of pizzas that have exactly 27 pieces of pepperoni.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pieces of pepperoni per pizza.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of pizzas that have exactly 27 pieces of pepperoni.\n    \"\"\"\n    # Initialize the count of pizzas with 27 pieces of pepperoni\n    count = 0\n    \n    # Iterate through the rows of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Calculate the total number of pieces of pepperoni in each pizza\n        total_pepperoni = stem * 10 + sum(leaf)\n        \n        # Check if the total number of pieces of pepperoni is exactly 27\n        if total_pepperoni == 27:\n            count += 1\n    \n    return count\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[4, 5], [5, 7, 9], [], [2, 6, 7, 9, 9]]\n})\n# Call the tool to solve the problem\nprint(count_pizzas_with_27_pepperoni(df))","question":"Jerry counted the number of pieces of pepperoni on each pizza he made. How many pizzas had exactly 27 pieces of pepperoni?","prediction_code":"import pandas as pd\n\ndef count_pizzas_with_27_pepperoni(df):\n    \"\"\"\n    This function takes in a pandas dataframe of pieces of pepperoni per pizza, and returns the number of pizzas that have exactly 27 pieces of pepperoni.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pieces of pepperoni per pizza.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of pizzas that have exactly 27 pieces of pepperoni.\n    \"\"\"\n    # Initialize the count of pizzas with 27 pieces of pepperoni\n    count = 0\n    \n    # Iterate through the rows of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Calculate the total number of pieces of pepperoni in each pizza\n        total_pepperoni = stem * 10 + sum(leaf)\n        \n        # Check if the total number of pieces of pepperoni is exactly 27\n        if total_pepperoni == 27:\n            count += 1\n    \n    return count","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[4, 5], [5, 7, 9], [], [2, 6, 7, 9, 9]]\n})\n# Call the tool to solve the problem\nprint(count_pizzas_with_27_pepperoni(df))","table":"Name: Pieces of pepperoni per pizza\nUnit: pizzas\nContent:\nStem | Leaf \n1 | 4, 5\n2 | 5, 7, 9\n3 | \n4 | 2, 6, 7, 9, 9"}
{"level":8,"answer":6.0,"prediction":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of scores and returns the mode of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the scores.\n    The DataFrame should have a column named 'Score'.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the values in the 'Score' column\n    scores = df['Score'].values\n    \n    # Calculate the mode using the value_counts() function\n    mode = scores.value_counts().idxmax()\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Abigail', 'Bernie', 'Jada', 'Luke', 'Trent', 'Estelle', 'Garrett', 'Isabella'],\n    'Score': [6, 10, 3, 6, 10, 6, 6, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"Some friends played a trivia game and recorded their scores. What is the mode of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of scores and returns the mode of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the scores.\n    The DataFrame should have a column named 'Score'.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the values in the 'Score' column\n    scores = df['Score'].values\n    \n    # Calculate the mode using the value_counts() function\n    mode = scores.value_counts().idxmax()\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Abigail', 'Bernie', 'Jada', 'Luke', 'Trent', 'Estelle', 'Garrett', 'Isabella'],\n    'Score': [6, 10, 3, 6, 10, 6, 6, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Trivia game scores\nUnit: None\nContent:\nName | Score\nAbigail | 6\nBernie | 10\nJada | 3\nLuke | 6\nTrent | 10\nEstelle | 6\nGarrett | 6\nIsabella | 3"}
{"level":8,"answer":1.0,"prediction":"import pandas as pd\n\ndef count_trains_with_41_passengers(df):\n    \"\"\"\n    This function takes in a pandas dataframe of passengers per train, and returns the number of trains that have exactly 41 passengers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of passengers per train.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of trains that have exactly 41 passengers.\n    \"\"\"\n    # prepare a list to calculate the number of passengers in each train\n    passengers = []\n    # calculate the total number of passengers in each train\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            passengers.append(stem * 10 + leaf[j])\n    # filter the trains where the total number of passengers is equal to 41\n    filtered = [passenger for passenger in passengers if passenger == 41]\n    # count the number of rows\n    num_trains = len(filtered)\n    return num_trains\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5],\n    'Leaf': [[1], [4], [1, 5, 6, 6], [0, 1, 7], [4, 7, 8, 8, 9]]\n})\n# Call the tool to solve the problem\nprint(count_trains_with_41_passengers(df))","question":"The train conductor made sure to count the number of passengers on each train. How many trains had exactly 41 passengers?","prediction_code":"import pandas as pd\n\ndef count_trains_with_41_passengers(df):\n    \"\"\"\n    This function takes in a pandas dataframe of passengers per train, and returns the number of trains that have exactly 41 passengers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of passengers per train.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of trains that have exactly 41 passengers.\n    \"\"\"\n    # prepare a list to calculate the number of passengers in each train\n    passengers = []\n    # calculate the total number of passengers in each train\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            passengers.append(stem * 10 + leaf[j])\n    # filter the trains where the total number of passengers is equal to 41\n    filtered = [passenger for passenger in passengers if passenger == 41]\n    # count the number of rows\n    num_trains = len(filtered)\n    return num_trains","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5],\n    'Leaf': [[1], [4], [1, 5, 6, 6], [0, 1, 7], [4, 7, 8, 8, 9]]\n})\n# Call the tool to solve the problem\nprint(count_trains_with_41_passengers(df))","table":"Name: Passengers per train\nUnit: trains\nContent:\nStem | Leaf \n1 | 1\n2 | 4\n3 | 1, 5, 6, 6\n4 | 0, 1, 7\n5 | 4, 7, 8, 8, 9"}
{"level":5,"answer":55.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of numbers and returns the median value.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing a column of numbers.\n    Returns:\n    float: The median value of the numbers.\n    \"\"\"\n    # Get the column of numbers from the DataFrame\n    numbers = df['Number of cans of food']\n    \n    # Calculate the median using the median() function from pandas\n    median = numbers.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Maura', 'Clarence', 'Lena', 'Rosa', 'Deb', 'Bryant', 'Paul'],\n    'Number of cans of food': [52, 56, 55, 56, 54, 55, 55]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"Maura's class recorded how many cans of food each student collected for their canned food drive. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of numbers and returns the median value.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing a column of numbers.\n    Returns:\n    float: The median value of the numbers.\n    \"\"\"\n    # Get the column of numbers from the DataFrame\n    numbers = df['Number of cans of food']\n    \n    # Calculate the median using the median() function from pandas\n    median = numbers.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Maura', 'Clarence', 'Lena', 'Rosa', 'Deb', 'Bryant', 'Paul'],\n    'Number of cans of food': [52, 56, 55, 56, 54, 55, 55]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Cans of food collected\nUnit: None\nContent:\nName | Number of cans of food\nMaura | 52\nClarence | 56\nLena | 55\nRosa | 56\nDeb | 54\nBryant | 55\nPaul | 55"}
{"level":7,"answer":3.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of art contest entries per year and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of art contest entries per year.\n    The DataFrame should have columns 'Year' and 'Number of entries'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_entry = df[df['Year'] == start_year]['Number of entries'].values[0]\n    end_entry = df[df['Year'] == end_year]['Number of entries'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_entry - start_entry) \/ start_entry\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2012, 2013, 2014, 2015, 2016],\n    'Number of entries': [36, 45, 48, 46, 33]\n})\n\n# Call the tool to solve the problem\nrate_of_change = calculate_rate_of_change(df, 2013, 2014)\n\n# Print out the answer\nprint(rate_of_change)","question":"Mrs. Whitehead hosts an annual art contest for kids, and she keeps a record of the number of entries each year. According to the table, what was the rate of change between 2013 and 2014?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of art contest entries per year and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of art contest entries per year.\n    The DataFrame should have columns 'Year' and 'Number of entries'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_entry = df[df['Year'] == start_year]['Number of entries'].values[0]\n    end_entry = df[df['Year'] == end_year]['Number of entries'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_entry - start_entry) \/ start_entry\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2012, 2013, 2014, 2015, 2016],\n    'Number of entries': [36, 45, 48, 46, 33]\n})\n\n# Call the tool to solve the problem\nrate_of_change = calculate_rate_of_change(df, 2013, 2014)\n\n# Print out the answer\nprint(rate_of_change)","table":"Name: Art contest entries\nUnit: entries per year\nContent:\nYear | Number of entries\n2012 | 36\n2013 | 45\n2014 | 48\n2015 | 46\n2016 | 33"}
{"level":1,"answer":60.0,"prediction":"import pandas as pd\n\ndef calculate_total_chairs(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of chairs per table, and returns the total number of chairs at 6 tables.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of tables and the number of chairs per table.\n    The DataFrame should have columns 'Number of tables' and 'Number of chairs'.\n    Returns:\n    int: The total number of chairs at 6 tables.\n    \"\"\"\n    # Get the number of chairs at 6 tables\n    num_chairs = df[df['Number of tables'] == 6]['Number of chairs'].values[0]\n    \n    return num_chairs\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of tables': [1, 2, 3, 4, 5, 6],\n    'Number of chairs': [10, 20, 30, 40, 50, '?']\n})\n# Call the tool to solve the problem\nprint(calculate_total_chairs(df))","question":"Each table has 10 chairs. How many chairs are at 6 tables?","prediction_code":"import pandas as pd\n\ndef calculate_total_chairs(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of chairs per table, and returns the total number of chairs at 6 tables.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of tables and the number of chairs per table.\n    The DataFrame should have columns 'Number of tables' and 'Number of chairs'.\n    Returns:\n    int: The total number of chairs at 6 tables.\n    \"\"\"\n    # Get the number of chairs at 6 tables\n    num_chairs = df[df['Number of tables'] == 6]['Number of chairs'].values[0]\n    \n    return num_chairs","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of tables': [1, 2, 3, 4, 5, 6],\n    'Number of chairs': [10, 20, 30, 40, 50, '?']\n})\n# Call the tool to solve the problem\nprint(calculate_total_chairs(df))","table":"Name: None\nUnit: chairs\nContent:\nNumber of tables | Number of chairs\n1 | 10\n2 | 20\n3 | 30\n4 | 40\n5 | 50\n6 | ?"}
{"level":7,"answer":706.14,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of buying a certain quantity of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item to calculate the cost for.\n    quantity (int): The quantity of the item to calculate the cost for.\n    Returns:\n    float: The total cost of buying the specified quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['cockatoo', 'king snake', 'pot-bellied pig', 'hedgehog', 'chameleon'],\n    'Price': [16.19, 63.95, 68.56, 78.46, 56.91]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'hedgehog', 9))","question":"How much money does Ethan need to buy 9 hedgehogs?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of buying a certain quantity of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item to calculate the cost for.\n    quantity (int): The quantity of the item to calculate the cost for.\n    Returns:\n    float: The total cost of buying the specified quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['cockatoo', 'king snake', 'pot-bellied pig', 'hedgehog', 'chameleon'],\n    'Price': [16.19, 63.95, 68.56, 78.46, 56.91]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'hedgehog', 9))","table":"Name: None\nUnit: $\nContent:\ncockatoo | $16.19\nking snake | $63.95\npot-bellied pig | $68.56\nhedgehog | $78.46\nchameleon | $56.91"}
{"level":5,"answer":154.0,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame of prices and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the prices of different items.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['ice cream truck', 'shaved ice cart', 'hot dog stand', 'funnel cake stand'],\n    'Price': [7785, 7131, 6141, 7631]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'ice cream truck', 'funnel cake stand'))","question":"How much more does an ice cream truck cost than a funnel cake stand?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame of prices and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the prices of different items.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['ice cream truck', 'shaved ice cart', 'hot dog stand', 'funnel cake stand'],\n    'Price': [7785, 7131, 6141, 7631]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'ice cream truck', 'funnel cake stand'))","table":"Name: None\nUnit: $\nContent:\nice cream truck | $7,785\nshaved ice cart | $7,131\nhot dog stand | $6,141\nfunnel cake stand | $7,631"}
{"level":7,"answer":8.0,"prediction":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of numbers and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the numbers.\n    The DataFrame should have two columns: 'Day' and 'Number of cartwheels'.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean using the mean() function from pandas\n    mean = df['Number of cartwheels'].mean()\n    \n    return mean\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n    'Number of cartwheels': [8, 6, 10, 7, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","question":"A gymnast jotted down the number of cartwheels she did each day. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of numbers and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the numbers.\n    The DataFrame should have two columns: 'Day' and 'Number of cartwheels'.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean using the mean() function from pandas\n    mean = df['Number of cartwheels'].mean()\n    \n    return mean","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n    'Number of cartwheels': [8, 6, 10, 7, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","table":"Name: Doing cartwheels\nUnit: None\nContent:\nDay | Number of cartwheels\nWednesday | 8\nThursday | 6\nFriday | 10\nSaturday | 7\nSunday | 9"}
{"level":8,"answer":52.67,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['silver coat rack', 'rug', 'oil painting', 'lamp', 'crystal sculpture'],\n    'Price': [86.16, 28.81, 98.67, 46.00, 83.15]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'oil painting', 'lamp'))","question":"How much more does an oil painting cost than a lamp?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['silver coat rack', 'rug', 'oil painting', 'lamp', 'crystal sculpture'],\n    'Price': [86.16, 28.81, 98.67, 46.00, 83.15]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'oil painting', 'lamp'))","table":"Name: None\nUnit: $\nContent:\nsilver coat rack | $86.16\nrug | $28.81\noil painting | $98.67\nlamp | $46.00\ncrystal sculpture | $83.15"}
{"level":7,"answer":372.75,"prediction":"import pandas as pd\n\ndef calculate_total_cost(table_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a dictionary of items and their quantities, and returns the total cost of the items.\n    Args:\n    table_df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (dict): A dictionary where the keys are item names and the values are the quantities of each item.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item, quantity in items.items():\n        # Filter the DataFrame for the specific item\n        item_df = table_df[table_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['set of dishes', 'frying pan', 'soup pot', 'cookie jar', 'set of spoons'],\n    'Price': [95.48, 39.61, 72.81, 13.91, 14.19]\n})\n\n# Initialize the items and quantities\nitems = {\n    'frying pan': 7,\n    'set of dishes': 1\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Hassan need to buy 7 frying pans and a set of dishes?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(table_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a dictionary of items and their quantities, and returns the total cost of the items.\n    Args:\n    table_df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (dict): A dictionary where the keys are item names and the values are the quantities of each item.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item, quantity in items.items():\n        # Filter the DataFrame for the specific item\n        item_df = table_df[table_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['set of dishes', 'frying pan', 'soup pot', 'cookie jar', 'set of spoons'],\n    'Price': [95.48, 39.61, 72.81, 13.91, 14.19]\n})\n\n# Initialize the items and quantities\nitems = {\n    'frying pan': 7,\n    'set of dishes': 1\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nset of dishes | $95.48\nfrying pan | $39.61\nsoup pot | $72.81\ncookie jar | $13.91\nset of spoons | $14.19"}
{"level":4,"answer":4.0,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, melon1, melon2, year):\n    \"\"\"\n    This function takes in a pandas DataFrame of melon prices per container and returns the price difference between two types of melons in a specific year.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the melon prices per container.\n    The DataFrame should have columns 'Kind of melon', '1996', and '1997'.\n    melon1 (str): The name of the first type of melon.\n    melon2 (str): The name of the second type of melon.\n    year (str): The year for which the price difference is calculated.\n    Returns:\n    float: The price difference between the two types of melons in the specified year.\n    \"\"\"\n    # Filter the DataFrame for the specific melons and year\n    melon1_price = df.loc[df['Kind of melon'] == melon1, year].values[0]\n    melon2_price = df.loc[df['Kind of melon'] == melon2, year].values[0]\n    \n    # Calculate the price difference\n    price_difference = melon2_price - melon1_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Kind of melon': ['Watermelons', 'Cantaloupes', 'Honeydews'],\n    '1996': [3, 8, 7],\n    '1997': [3, 7, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'Watermelons', 'Cantaloupes', '1997'))","question":"To get a rough estimate of his melon farm's profits for the year, Justin decided to look at some data about melon prices in the past. In 1997, how much more did a container of cantaloupes cost than a container of watermelons?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, melon1, melon2, year):\n    \"\"\"\n    This function takes in a pandas DataFrame of melon prices per container and returns the price difference between two types of melons in a specific year.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the melon prices per container.\n    The DataFrame should have columns 'Kind of melon', '1996', and '1997'.\n    melon1 (str): The name of the first type of melon.\n    melon2 (str): The name of the second type of melon.\n    year (str): The year for which the price difference is calculated.\n    Returns:\n    float: The price difference between the two types of melons in the specified year.\n    \"\"\"\n    # Filter the DataFrame for the specific melons and year\n    melon1_price = df.loc[df['Kind of melon'] == melon1, year].values[0]\n    melon2_price = df.loc[df['Kind of melon'] == melon2, year].values[0]\n    \n    # Calculate the price difference\n    price_difference = melon2_price - melon1_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Kind of melon': ['Watermelons', 'Cantaloupes', 'Honeydews'],\n    '1996': [3, 8, 7],\n    '1997': [3, 7, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'Watermelons', 'Cantaloupes', '1997'))","table":"Name: Melon price per container\nUnit: $\nContent:\nKind of melon | 1996 | 1997\nWatermelons | $3 | $3\nCantaloupes | $8 | $7\nHoneydews | $7 | $7"}
{"level":6,"answer":1.6,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on the quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return None\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['potatoes', 'cucumbers', 'yams', 'zucchini', 'beets', 'carrots'],\n    'Price': [1, 3, 1, 3, 1, 2]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'potatoes', 1.6))","question":"Arianna wants to buy 1.6 pounds of potatoes. How much will she spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on the quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return None","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['potatoes', 'cucumbers', 'yams', 'zucchini', 'beets', 'carrots'],\n    'Price': [1, 3, 1, 3, 1, 2]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'potatoes', 1.6))","table":"Name: None\nUnit: $\nContent:\npotatoes | $1\/lb\ncucumbers | $3\/lb\nyams | $1\/lb\nzucchini | $3\/lb\nbeets | $1\/lb\ncarrots | $2\/lb"}
{"level":7,"answer":3.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of shells found per day and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of shells found per day.\n    The dataframe should contain \"Day\" and \"Number of shells\" columns.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Filter the DataFrame for the two days\n    day1_df = df[df['Day'] == day1]\n    day2_df = df[df['Day'] == day2]\n    \n    # Get the number of shells found on each day\n    shells_day1 = day1_df['Number of shells'].values[0]\n    shells_day2 = day2_df['Number of shells'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (shells_day2 - shells_day1) \/ shells_day1\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of shells': [6, 3, 6, 2, 0]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Wednesday', 'Thursday'))","question":"Kendra spent a week at the beach and recorded the number of shells she found each day. According to the table, what was the rate of change between Wednesday and Thursday?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of shells found per day and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of shells found per day.\n    The dataframe should contain \"Day\" and \"Number of shells\" columns.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Filter the DataFrame for the two days\n    day1_df = df[df['Day'] == day1]\n    day2_df = df[df['Day'] == day2]\n    \n    # Get the number of shells found on each day\n    shells_day1 = day1_df['Number of shells'].values[0]\n    shells_day2 = day2_df['Number of shells'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (shells_day2 - shells_day1) \/ shells_day1\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of shells': [6, 3, 6, 2, 0]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Wednesday', 'Thursday'))","table":"Name: Shells Kendra found\nUnit: shells per day\nContent:\nDay | Number of shells\nTuesday | 6\nWednesday | 3\nThursday | 6\nFriday | 2\nSaturday | 0"}
{"level":7,"answer":25.0,"prediction":"import pandas as pd\n\ndef count_children_with_fewer_than_3_notes(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of thank-you notes written by children and returns the number of children who wrote fewer than 3 thank-you notes.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of thank-you notes written by each child.\n    The dataframe should contain \"Thank-you notes written\" and \"Frequency\" columns.\n    Returns:\n    int: The number of children who wrote fewer than 3 thank-you notes.\n    \"\"\"\n    # Filter the DataFrame for children who wrote fewer than 3 thank-you notes\n    filtered_df = df[df['Thank-you notes written'] < 3]\n    \n    # Count the number of rows in the filtered DataFrame\n    num_children = len(filtered_df)\n    \n    return num_children\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Thank-you notes written': [0, 1, 2, 3, 4],\n    'Frequency': [0, 18, 7, 13, 2]\n})\n# Call the tool to solve the problem\nprint(count_children_with_fewer_than_3_notes(df))","question":"Several children compared how many thank-you notes they had written during the previous month. How many children wrote fewer than 3 thank-you notes?","prediction_code":"import pandas as pd\n\ndef count_children_with_fewer_than_3_notes(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of thank-you notes written by children and returns the number of children who wrote fewer than 3 thank-you notes.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of thank-you notes written by each child.\n    The dataframe should contain \"Thank-you notes written\" and \"Frequency\" columns.\n    Returns:\n    int: The number of children who wrote fewer than 3 thank-you notes.\n    \"\"\"\n    # Filter the DataFrame for children who wrote fewer than 3 thank-you notes\n    filtered_df = df[df['Thank-you notes written'] < 3]\n    \n    # Count the number of rows in the filtered DataFrame\n    num_children = len(filtered_df)\n    \n    return num_children","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Thank-you notes written': [0, 1, 2, 3, 4],\n    'Frequency': [0, 18, 7, 13, 2]\n})\n# Call the tool to solve the problem\nprint(count_children_with_fewer_than_3_notes(df))","table":"Name: Writing thank-you notes\nUnit: None\nContent:\nThank-you notes written | Frequency\n0 | 0\n1 | 18\n2 | 7\n3 | 13\n4 | 2"}
{"level":8,"answer":71.42,"prediction":"import pandas as pd\n\ndef calculate_total_cost(ticket_df, num_tickets):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ticket price table and the number of tickets needed, and returns the total cost of the tickets.\n    Args:\n    ticket_df (pd.DataFrame): A pandas DataFrame containing ticket names and their prices with columns 'Name' and 'Price'.\n    num_tickets (int): The number of tickets needed.\n    Returns:\n    float: The total cost of the tickets.\n    \"\"\"\n    # Filter the DataFrame for the specific ticket\n    ticket_name = 'basketball ticket'\n    ticket_price = ticket_df[ticket_df['Name'] == ticket_name]['Price'].values[0]\n    \n    # Calculate the total cost of the tickets\n    total_cost = num_tickets * ticket_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['football ticket', 'basketball ticket', 'figure skating ticket', 'ballet ticket'],\n    'Price': [74.63, 35.71, 36.13, 18.10]\n})\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 2))","question":"How much money does Tommy need to buy 2 basketball tickets?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(ticket_df, num_tickets):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ticket price table and the number of tickets needed, and returns the total cost of the tickets.\n    Args:\n    ticket_df (pd.DataFrame): A pandas DataFrame containing ticket names and their prices with columns 'Name' and 'Price'.\n    num_tickets (int): The number of tickets needed.\n    Returns:\n    float: The total cost of the tickets.\n    \"\"\"\n    # Filter the DataFrame for the specific ticket\n    ticket_name = 'basketball ticket'\n    ticket_price = ticket_df[ticket_df['Name'] == ticket_name]['Price'].values[0]\n    \n    # Calculate the total cost of the tickets\n    total_cost = num_tickets * ticket_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['football ticket', 'basketball ticket', 'figure skating ticket', 'ballet ticket'],\n    'Price': [74.63, 35.71, 36.13, 18.10]\n})\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 2))","table":"Name: None\nUnit: $\nContent:\nfootball ticket | $74.63\nbasketball ticket | $35.71\nfigure skating ticket | $36.13\nballet ticket | $18.10"}
{"level":3,"answer":142.0,"prediction":"import pandas as pd\n\ndef calculate_patient_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of patients seen per month and returns the difference in the number of patients seen between August and September.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of patients seen per month.\n    The dataframe should contain \"Month\" and \"Number of patients\" columns.\n    Returns:\n    int: The difference in the number of patients seen between August and September.\n    \"\"\"\n    # Filter the DataFrame for August and September\n    august_df = df[df['Month'] == 'August']\n    september_df = df[df['Month'] == 'September']\n    \n    # Get the number of patients seen in August and September\n    august_patients = august_df['Number of patients'].values[0]\n    september_patients = september_df['Number of patients'].values[0]\n    \n    # Calculate the difference\n    patient_difference = august_patients - september_patients\n    \n    return patient_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['July', 'August', 'September'],\n    'Number of patients': [402, 744, 602]\n})\n# Call the tool to solve the problem\nprint(calculate_patient_difference(df))","question":"A doctor's records revealed how many patients he saw each month. How many more patients did the doctor see in August than in September?","prediction_code":"import pandas as pd\n\ndef calculate_patient_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of patients seen per month and returns the difference in the number of patients seen between August and September.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of patients seen per month.\n    The dataframe should contain \"Month\" and \"Number of patients\" columns.\n    Returns:\n    int: The difference in the number of patients seen between August and September.\n    \"\"\"\n    # Filter the DataFrame for August and September\n    august_df = df[df['Month'] == 'August']\n    september_df = df[df['Month'] == 'September']\n    \n    # Get the number of patients seen in August and September\n    august_patients = august_df['Number of patients'].values[0]\n    september_patients = september_df['Number of patients'].values[0]\n    \n    # Calculate the difference\n    patient_difference = august_patients - september_patients\n    \n    return patient_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['July', 'August', 'September'],\n    'Number of patients': [402, 744, 602]\n})\n# Call the tool to solve the problem\nprint(calculate_patient_difference(df))","table":"Name: Patients seen\nUnit: patients\nContent:\nMonth | Number of patients\nJuly | 402\nAugust | 744\nSeptember | 602"}
{"level":5,"answer":542.04,"prediction":"import pandas as pd\n\ndef calculate_pay_after_taxes(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a pay stub and calculates the pay after taxes for an employee.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the pay stub information.\n    The DataFrame should have columns 'Employee', 'Pay period', 'Total earnings', 'Federal income tax', 'Other taxes', 'Total taxes', 'Pay after taxes'.\n    Returns:\n    float: The pay after taxes for the employee.\n    \"\"\"\n    # Filter the DataFrame for the specific employee\n    employee_df = df[df['Employee'] == 'Margarita Perez']\n    \n    # Get the total earnings and total taxes for the employee\n    total_earnings = employee_df['Total earnings'].values[0]\n    total_taxes = employee_df['Total taxes'].values[0]\n    \n    # Calculate the pay after taxes\n    pay_after_taxes = total_earnings - total_taxes\n    \n    return pay_after_taxes\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Employee': ['Margarita Perez', 'Total earnings', 'Federal income tax', 'Other taxes', 'Total taxes', 'Pay after taxes'],\n    'Pay period': ['September 9-15', '', '', '', '', ''],\n    '': ['', '', '$76.70', '$51.26', '', ''],\n    '': ['', '', '', '', '', ''],\n    '': ['', '', '', '', '?', '']\n})\n# Call the tool to solve the problem\nprint(calculate_pay_after_taxes(df))","question":"Look at Margarita's pay stub. Margarita lives in a state without state income tax. How much did Margarita make after taxes?","prediction_code":"import pandas as pd\n\ndef calculate_pay_after_taxes(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a pay stub and calculates the pay after taxes for an employee.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the pay stub information.\n    The DataFrame should have columns 'Employee', 'Pay period', 'Total earnings', 'Federal income tax', 'Other taxes', 'Total taxes', 'Pay after taxes'.\n    Returns:\n    float: The pay after taxes for the employee.\n    \"\"\"\n    # Filter the DataFrame for the specific employee\n    employee_df = df[df['Employee'] == 'Margarita Perez']\n    \n    # Get the total earnings and total taxes for the employee\n    total_earnings = employee_df['Total earnings'].values[0]\n    total_taxes = employee_df['Total taxes'].values[0]\n    \n    # Calculate the pay after taxes\n    pay_after_taxes = total_earnings - total_taxes\n    \n    return pay_after_taxes","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Employee': ['Margarita Perez', 'Total earnings', 'Federal income tax', 'Other taxes', 'Total taxes', 'Pay after taxes'],\n    'Pay period': ['September 9-15', '', '', '', '', ''],\n    '': ['', '', '$76.70', '$51.26', '', ''],\n    '': ['', '', '', '', '', ''],\n    '': ['', '', '', '', '?', '']\n})\n# Call the tool to solve the problem\nprint(calculate_pay_after_taxes(df))","table":"Name: None\nUnit: $\nContent:\nEmployee | Pay period |\nMargarita Perez | September 9-15 |\nTotal earnings | | $670.00\nFederal income tax | $76.70 |\nOther taxes | $51.26 |\nTotal taxes | | ?\nPay after taxes | | ?"}
{"level":8,"answer":7.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of couches sold per day and returns the median of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of couches sold per day.\n    The dataframe should contain \"Day\" and \"Number of couches\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the \"Number of couches\" column as a Series\n    couches_sold = df['Number of couches']\n    \n    # Calculate the median using pandas\n    median = couches_sold.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Number of couches': [5, 4, 10, 9, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"A furniture store kept a record of how many couches it sold each day. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of couches sold per day and returns the median of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of couches sold per day.\n    The dataframe should contain \"Day\" and \"Number of couches\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the \"Number of couches\" column as a Series\n    couches_sold = df['Number of couches']\n    \n    # Calculate the median using pandas\n    median = couches_sold.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Number of couches': [5, 4, 10, 9, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Couches sold\nUnit: None\nContent:\nDay | Number of couches\nFriday | 5\nSaturday | 4\nSunday | 10\nMonday | 9\nTuesday | 7"}
{"level":8,"answer":4.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of stop signs per street and returns the range of the numbers of stop signs.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of stop signs per street.\n    The dataframe should contain \"Street\" and \"Number of stop signs\" columns.\n    Returns:\n    int: The range of the numbers of stop signs.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of stop signs\" column\n    min_signs = df['Number of stop signs'].min()\n    max_signs = df['Number of stop signs'].max()\n    \n    # Calculate the range\n    sign_range = max_signs - min_signs\n    \n    return sign_range\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Street': ['Smith Street', 'Watson Street', 'Walker Street', 'Irving Street', 'Mason Street', 'Marshall Street', 'Jackson Street', 'Spring Street'],\n    'Number of stop signs': [4, 5, 7, 6, 8, 4, 4, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"The town council reported on how many stop signs there are on each street. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of stop signs per street and returns the range of the numbers of stop signs.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of stop signs per street.\n    The dataframe should contain \"Street\" and \"Number of stop signs\" columns.\n    Returns:\n    int: The range of the numbers of stop signs.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of stop signs\" column\n    min_signs = df['Number of stop signs'].min()\n    max_signs = df['Number of stop signs'].max()\n    \n    # Calculate the range\n    sign_range = max_signs - min_signs\n    \n    return sign_range","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Street': ['Smith Street', 'Watson Street', 'Walker Street', 'Irving Street', 'Mason Street', 'Marshall Street', 'Jackson Street', 'Spring Street'],\n    'Number of stop signs': [4, 5, 7, 6, 8, 4, 4, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Stop signs\nUnit: None\nContent:\nStreet | Number of stop signs\nSmith Street | 4\nWatson Street | 5\nWalker Street | 7\nIrving Street | 6\nMason Street | 8\nMarshall Street | 4\nJackson Street | 4\nSpring Street | 5"}
{"level":8,"answer":47.0,"prediction":"import pandas as pd\n\ndef count_students_with_more_than_2_pets(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of pets per student and returns the number of students who have more than 2 pets.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pets per student.\n    The DataFrame should contain \"Number of pets\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who have more than 2 pets.\n    \"\"\"\n    # Filter the DataFrame for students who have more than 2 pets\n    filtered_df = df[df['Number of pets'] > 2]\n    \n    # Calculate the total number of students who have more than 2 pets\n    num_students = filtered_df['Frequency'].sum()\n    \n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of pets': [0, 1, 2, 3, 4, 5],\n    'Frequency': [11, 3, 2, 13, 14, 20]\n})\n# Call the tool to solve the problem\nprint(count_students_with_more_than_2_pets(df))","question":"For a math project, students in Mrs. Kramer's class recorded the number of pets that each student has. How many students have more than 2 pets?","prediction_code":"import pandas as pd\n\ndef count_students_with_more_than_2_pets(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of pets per student and returns the number of students who have more than 2 pets.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pets per student.\n    The DataFrame should contain \"Number of pets\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who have more than 2 pets.\n    \"\"\"\n    # Filter the DataFrame for students who have more than 2 pets\n    filtered_df = df[df['Number of pets'] > 2]\n    \n    # Calculate the total number of students who have more than 2 pets\n    num_students = filtered_df['Frequency'].sum()\n    \n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of pets': [0, 1, 2, 3, 4, 5],\n    'Frequency': [11, 3, 2, 13, 14, 20]\n})\n# Call the tool to solve the problem\nprint(count_students_with_more_than_2_pets(df))","table":"Name: Pets\nUnit: None\nContent:\nNumber of pets | Frequency\n0 | 11\n1 | 3\n2 | 2\n3 | 13\n4 | 14\n5 | 20"}
{"level":6,"answer":10.0,"prediction":"import pandas as pd\n\ndef find_lightest_child(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of children's weights and returns the weight of the lightest child.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the children's weights.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The weight of the lightest child.\n    \"\"\"\n    # prepare a list to store all the weights\n    weights = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the weight for each child\n        for j in range(len(leaf)):\n            weight = stem * 10 + leaf[j]\n            weights.append(weight)\n    # find the lightest weight\n    lightest_weight = min(weights)\n    return lightest_weight\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5],\n    'Leaf': [[0, 2, 2, 4, 5, 9], [4, 8], [2, 2, 4, 8], [3], [9, 9]]\n})\n# Call the tool to solve the problem\nprint(find_lightest_child(df))","question":"As part of a statistics project, a math class weighed all the children who were willing to participate. What is the weight of the lightest child?","prediction_code":"import pandas as pd\n\ndef find_lightest_child(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of children's weights and returns the weight of the lightest child.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the children's weights.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The weight of the lightest child.\n    \"\"\"\n    # prepare a list to store all the weights\n    weights = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the weight for each child\n        for j in range(len(leaf)):\n            weight = stem * 10 + leaf[j]\n            weights.append(weight)\n    # find the lightest weight\n    lightest_weight = min(weights)\n    return lightest_weight","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5],\n    'Leaf': [[0, 2, 2, 4, 5, 9], [4, 8], [2, 2, 4, 8], [3], [9, 9]]\n})\n# Call the tool to solve the problem\nprint(find_lightest_child(df))","table":"Name: Children's weights (lbs)\nUnit: pounds\nContent:\nStem | Leaf \n1 | 0, 2, 2, 4, 5, 9\n2 | 4, 8\n3 | 2, 2, 4, 8\n4 | 3\n5 | 9, 9"}
{"level":5,"answer":7.0,"prediction":"import pandas as pd\n\ndef count_races_with_41_participants(df):\n    \"\"\"\n    This function takes in a pandas dataframe of participants per race, and returns the number of races that have at least 41 participants.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of participants per race.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of races that have at least 41 participants.\n    \"\"\"\n    # prepare a list to calculate the number of participants in each race\n    participants = []\n    # calculate the total number of participants in each race\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            participants.append(stem * 10 + leaf[j])\n    # filter the races where the total number of participants is greater than or equal to 41\n    filtered = [participant for participant in participants if participant >= 41]\n    # count the number of races\n    num_races = len(filtered)\n    return num_races\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7],\n    'Leaf': [[2], [4, 8], [], [2, 8], [5, 8, 9], [8], [3]]\n})\n# Call the tool to solve the problem\nprint(count_races_with_41_participants(df))","question":"A volunteer for the local running club counted the number of participants at each race. How many races had at least 41 participants?","prediction_code":"import pandas as pd\n\ndef count_races_with_41_participants(df):\n    \"\"\"\n    This function takes in a pandas dataframe of participants per race, and returns the number of races that have at least 41 participants.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of participants per race.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of races that have at least 41 participants.\n    \"\"\"\n    # prepare a list to calculate the number of participants in each race\n    participants = []\n    # calculate the total number of participants in each race\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            participants.append(stem * 10 + leaf[j])\n    # filter the races where the total number of participants is greater than or equal to 41\n    filtered = [participant for participant in participants if participant >= 41]\n    # count the number of races\n    num_races = len(filtered)\n    return num_races","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7],\n    'Leaf': [[2], [4, 8], [], [2, 8], [5, 8, 9], [8], [3]]\n})\n# Call the tool to solve the problem\nprint(count_races_with_41_participants(df))","table":"Name: Participants per race\nUnit: races\nContent:\nStem | Leaf \n1 | 2\n2 | 4, 8\n3 | \n4 | 2, 8\n5 | 5, 8, 9\n6 | 8\n7 | 3"}
{"level":5,"answer":96.0,"prediction":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of numbers and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the numbers.\n    The DataFrame should have a column named 'Number of cookies'.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of cookies']\n    \n    # Calculate the mean\n    mean = numbers.mean()\n    \n    return mean\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Number of cookies': [99, 88, 91, 99, 99, 96, 100]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","question":"Eddie baked cookies each day for a bake sale. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of numbers and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the numbers.\n    The DataFrame should have a column named 'Number of cookies'.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of cookies']\n    \n    # Calculate the mean\n    mean = numbers.mean()\n    \n    return mean","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Number of cookies': [99, 88, 91, 99, 99, 96, 100]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","table":"Name: Cookies baked\nUnit: None\nContent:\nDay | Number of cookies\nWednesday | 99\nThursday | 88\nFriday | 91\nSaturday | 99\nSunday | 99\nMonday | 96\nTuesday | 100"}
{"level":8,"answer":20.0,"prediction":"import pandas as pd\n\ndef count_people_more_than_2_times(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of ice skating frequency and returns the number of people who went ice skating more than 2 times.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of times people went ice skating and their corresponding frequencies.\n    The DataFrame should contain \"Number of times\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who went ice skating more than 2 times.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of times is greater than 2\n    filtered_df = df[df['Number of times'] > 2]\n    \n    # Calculate the total frequency of people who went ice skating more than 2 times\n    total_frequency = filtered_df['Frequency'].sum()\n    \n    return total_frequency\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of times': [1, 2, 3, 4],\n    'Frequency': [20, 12, 18, 2]\n})\n# Call the tool to solve the problem\nprint(count_people_more_than_2_times(df))","question":"The Dawson Skating Rink counted the number of times people went ice skating last winter to see what types of discount passes it should offer this season. How many people went ice skating more than 2 times?","prediction_code":"import pandas as pd\n\ndef count_people_more_than_2_times(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of ice skating frequency and returns the number of people who went ice skating more than 2 times.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of times people went ice skating and their corresponding frequencies.\n    The DataFrame should contain \"Number of times\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who went ice skating more than 2 times.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of times is greater than 2\n    filtered_df = df[df['Number of times'] > 2]\n    \n    # Calculate the total frequency of people who went ice skating more than 2 times\n    total_frequency = filtered_df['Frequency'].sum()\n    \n    return total_frequency","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of times': [1, 2, 3, 4],\n    'Frequency': [20, 12, 18, 2]\n})\n# Call the tool to solve the problem\nprint(count_people_more_than_2_times(df))","table":"Name: Ice skating last winter\nUnit: None\nContent:\nNumber of times | Frequency\n1 | 20\n2 | 12\n3 | 18\n4 | 2"}
{"level":4,"answer":4.0,"prediction":"import pandas as pd\n\ndef calculate_remaining_money(menu_df, budget, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table, a budget, and a dictionary of orders, and returns the remaining money after buying the orders using pandas.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    budget (float): The initial budget.\n    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.\n    Returns:\n    float: The remaining money after buying the orders.\n    \"\"\"\n    # Calculate the total cost of the orders using the calculate_total_cost function\n    total_cost = calculate_total_cost(menu_df, orders)\n    \n    # Calculate the remaining money\n    remaining_money = budget - total_cost\n    \n    return remaining_money\n########################################\n# Initialize the table into a dataframe\nmenu_df = pd.DataFrame({\n    'Item': ['green salad', 'pasta with white sauce', 'spaghetti and meatballs', 'steamed broccoli', 'pasta with tomato sauce'],\n    'Price': [7, 6, 5, 6, 6]\n})\n\n# Set the budget\nbudget = 16\n\n# Set the orders\norders = {\n    'pasta with white sauce': 1,\n    'pasta with tomato sauce': 1\n}\n\n# Call the tool to solve the problem\nprint(calculate_remaining_money(menu_df, budget, orders))","question":"Chloe has $16. How much money will Chloe have left if she buys pasta with tomato sauce and pasta with white sauce?","prediction_code":"import pandas as pd\n\ndef calculate_remaining_money(menu_df, budget, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table, a budget, and a dictionary of orders, and returns the remaining money after buying the orders using pandas.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    budget (float): The initial budget.\n    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.\n    Returns:\n    float: The remaining money after buying the orders.\n    \"\"\"\n    # Calculate the total cost of the orders using the calculate_total_cost function\n    total_cost = calculate_total_cost(menu_df, orders)\n    \n    # Calculate the remaining money\n    remaining_money = budget - total_cost\n    \n    return remaining_money","prediction_call":"# Initialize the table into a dataframe\nmenu_df = pd.DataFrame({\n    'Item': ['green salad', 'pasta with white sauce', 'spaghetti and meatballs', 'steamed broccoli', 'pasta with tomato sauce'],\n    'Price': [7, 6, 5, 6, 6]\n})\n\n# Set the budget\nbudget = 16\n\n# Set the orders\norders = {\n    'pasta with white sauce': 1,\n    'pasta with tomato sauce': 1\n}\n\n# Call the tool to solve the problem\nprint(calculate_remaining_money(menu_df, budget, orders))","table":"Name: None\nUnit: $\nContent:\ngreen salad | $7\npasta with white sauce | $6\nspaghetti and meatballs | $5\nsteamed broccoli | $6\npasta with tomato sauce | $6"}
{"level":6,"answer":6.0,"prediction":"import pandas as pd\n\ndef calculate_mean_score(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of quiz show scores and returns the mean of the scores.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the quiz show scores.\n    The dataframe should contain \"Name\" and \"Score\" columns.\n    Returns:\n    float: The mean of the quiz show scores.\n    \"\"\"\n    # Calculate the mean of the scores column\n    mean_score = df['Score'].mean()\n    \n    return mean_score\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Arianna', 'Joel', 'Carson', 'Nate', 'Damon', 'Henry', 'Mackenzie', 'Ian'],\n    'Score': [9, 4, 4, 3, 5, 3, 10, 10]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_score(df))","question":"The players on a quiz show received the following scores. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean_score(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of quiz show scores and returns the mean of the scores.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the quiz show scores.\n    The dataframe should contain \"Name\" and \"Score\" columns.\n    Returns:\n    float: The mean of the quiz show scores.\n    \"\"\"\n    # Calculate the mean of the scores column\n    mean_score = df['Score'].mean()\n    \n    return mean_score","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Arianna', 'Joel', 'Carson', 'Nate', 'Damon', 'Henry', 'Mackenzie', 'Ian'],\n    'Score': [9, 4, 4, 3, 5, 3, 10, 10]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_score(df))","table":"Name: Quiz show scores\nUnit: None\nContent:\nName | Score\nArianna | 9\nJoel | 4\nCarson | 4\nNate | 3\nDamon | 5\nHenry | 3\nMackenzie | 10\nIan | 10"}
{"level":7,"answer":23.0,"prediction":"import pandas as pd\n\ndef count_students_below_80(df):\n    \"\"\"\n    This function takes in a pandas dataframe of spelling test scores and returns the number of students who scored fewer than 80 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the spelling test scores.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of students who scored fewer than 80 points.\n    \"\"\"\n    # prepare a list to calculate scores of each student\n    scores = []\n    # calculate the total score of each student\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # filter the scores where the score is less than 80\n    filtered = [score for score in scores if score < 80]\n    # count the number of students\n    num_students = len(filtered)\n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7],\n    'Leaf': [[0, 8], [6, 7, 7], [3, 3, 4, 4, 5, 6], [0, 3, 4], [1, 3, 3, 3, 8], [7, 7, 9], [4]]\n})\n# Call the tool to solve the problem\nprint(count_students_below_80(df))","question":"This morning, Mr. Davidson released the scores from last week's spelling test. How many students scored fewer than 80 points?","prediction_code":"import pandas as pd\n\ndef count_students_below_80(df):\n    \"\"\"\n    This function takes in a pandas dataframe of spelling test scores and returns the number of students who scored fewer than 80 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the spelling test scores.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of students who scored fewer than 80 points.\n    \"\"\"\n    # prepare a list to calculate scores of each student\n    scores = []\n    # calculate the total score of each student\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # filter the scores where the score is less than 80\n    filtered = [score for score in scores if score < 80]\n    # count the number of students\n    num_students = len(filtered)\n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7],\n    'Leaf': [[0, 8], [6, 7, 7], [3, 3, 4, 4, 5, 6], [0, 3, 4], [1, 3, 3, 3, 8], [7, 7, 9], [4]]\n})\n# Call the tool to solve the problem\nprint(count_students_below_80(df))","table":"Name: Spelling test scores\nUnit: students\nContent:\nStem | Leaf \n1 | 0, 8\n2 | 6, 7, 7\n3 | 3, 3, 4, 4, 5, 6\n4 | 0, 3, 4\n5 | 1, 3, 3, 3, 8\n6 | 7, 7, 9\n7 | 4"}
{"level":6,"answer":2.0,"prediction":"import pandas as pd\n\ndef count_bags_with_candies(df, min_candies, max_candies):\n    \"\"\"\n    This function takes in a pandas dataframe of candies per bag, and returns the number of bags that have at least min_candies but fewer than max_candies candies.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of candies per bag.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_candies (int): The minimum number of candies required per bag.\n    max_candies (int): The maximum number of candies allowed per bag.\n    Returns:\n    int: The number of bags that have at least min_candies but fewer than max_candies candies.\n    \"\"\"\n    # prepare a list to calculate candies in each bag\n    candies = []\n    # calculate the total number of candies in each bag\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            candies.append(stem * 10 + leaf[j])\n    # filter the bags where the total number of candies is within the specified range\n    filtered = [candy for candy in candies if min_candies <= candy < max_candies]\n    # count the number of rows\n    num_bags = len(filtered)\n    return num_bags\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[0, 6], [0], [], [3], [3, 9], [2], [], [0, 1, 6, 9], [0]]\n})\n# Call the tool to solve the problem\nprint(count_bags_with_candies(df, 20, 50))","question":"At a candy factory, butterscotch candies were packaged into bags of different sizes. How many bags had at least 20 butterscotch candies but fewer than 50 butterscotch candies?","prediction_code":"import pandas as pd\n\ndef count_bags_with_candies(df, min_candies, max_candies):\n    \"\"\"\n    This function takes in a pandas dataframe of candies per bag, and returns the number of bags that have at least min_candies but fewer than max_candies candies.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of candies per bag.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_candies (int): The minimum number of candies required per bag.\n    max_candies (int): The maximum number of candies allowed per bag.\n    Returns:\n    int: The number of bags that have at least min_candies but fewer than max_candies candies.\n    \"\"\"\n    # prepare a list to calculate candies in each bag\n    candies = []\n    # calculate the total number of candies in each bag\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            candies.append(stem * 10 + leaf[j])\n    # filter the bags where the total number of candies is within the specified range\n    filtered = [candy for candy in candies if min_candies <= candy < max_candies]\n    # count the number of rows\n    num_bags = len(filtered)\n    return num_bags","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[0, 6], [0], [], [3], [3, 9], [2], [], [0, 1, 6, 9], [0]]\n})\n# Call the tool to solve the problem\nprint(count_bags_with_candies(df, 20, 50))","table":"Name: Butterscotch candies per bag\nUnit: bags\nContent:\nStem | Leaf \n1 | 0, 6\n2 | 0\n3 | \n4 | 3\n5 | 3, 9\n6 | 2\n7 | \n8 | 0, 1, 6, 9\n9 | 0"}
{"level":3,"answer":318.0,"prediction":"import pandas as pd\n\ndef calculate_calls_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of phone calls received and returns the difference in the number of calls between Thursday and Friday.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of calls received each day.\n    The dataframe should contain \"Day\" and \"Number of calls\" columns.\n    Returns:\n    int: The difference in the number of calls between Thursday and Friday.\n    \"\"\"\n    # Filter the DataFrame for Thursday and Friday\n    thursday_calls = df[df['Day'] == 'Thursday']['Number of calls'].values[0]\n    friday_calls = df[df['Day'] == 'Friday']['Number of calls'].values[0]\n    \n    # Calculate the difference in the number of calls\n    calls_difference = thursday_calls - friday_calls\n    \n    return calls_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Number of calls': [632, 222, 374, 825, 507]\n})\n# Call the tool to solve the problem\nprint(calculate_calls_difference(df))","question":"A technical support line tracked how many calls it received each day. How many more calls did the support line receive on Thursday than on Friday?","prediction_code":"import pandas as pd\n\ndef calculate_calls_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of phone calls received and returns the difference in the number of calls between Thursday and Friday.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of calls received each day.\n    The dataframe should contain \"Day\" and \"Number of calls\" columns.\n    Returns:\n    int: The difference in the number of calls between Thursday and Friday.\n    \"\"\"\n    # Filter the DataFrame for Thursday and Friday\n    thursday_calls = df[df['Day'] == 'Thursday']['Number of calls'].values[0]\n    friday_calls = df[df['Day'] == 'Friday']['Number of calls'].values[0]\n    \n    # Calculate the difference in the number of calls\n    calls_difference = thursday_calls - friday_calls\n    \n    return calls_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Number of calls': [632, 222, 374, 825, 507]\n})\n# Call the tool to solve the problem\nprint(calculate_calls_difference(df))","table":"Name: Phone calls received\nUnit: calls\nContent:\nDay | Number of calls\nMonday | 632\nTuesday | 222\nWednesday | 374\nThursday | 825\nFriday | 507"}
{"level":6,"answer":11.0,"prediction":"import pandas as pd\n\ndef count_bags_within_range(df, lower_limit, upper_limit):\n    \"\"\"\n    This function takes in a pandas dataframe of orange candies per bag, and returns the number of bags that have at least the lower limit and fewer than the upper limit of orange candies.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of orange candies per bag.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    lower_limit (int): The lower limit of orange candies.\n    upper_limit (int): The upper limit of orange candies.\n    Returns:\n    int: The number of bags that have at least the lower limit and fewer than the upper limit of orange candies.\n    \"\"\"\n    # prepare a list to calculate candies in each bag\n    candies = []\n    # calculate the total number of orange candies in each bag\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            candies.append(stem * 10 + leaf[j])\n    # filter the bags where the total number of orange candies is within the specified range\n    filtered = [candy for candy in candies if lower_limit <= candy < upper_limit]\n    # count the number of rows\n    num_bags = len(filtered)\n    return num_bags\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[6, 8, 9], [1, 6, 9], [9], [1], [2, 2, 5, 6, 8], [1, 2], [], [9]]\n})\n# Call the tool to solve the problem\nprint(count_bags_within_range(df, 22, 86))","question":"A candy dispenser put various numbers of orange candies into bags. How many bags had at least 22 orange candies but fewer than 86 orange candies?","prediction_code":"import pandas as pd\n\ndef count_bags_within_range(df, lower_limit, upper_limit):\n    \"\"\"\n    This function takes in a pandas dataframe of orange candies per bag, and returns the number of bags that have at least the lower limit and fewer than the upper limit of orange candies.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of orange candies per bag.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    lower_limit (int): The lower limit of orange candies.\n    upper_limit (int): The upper limit of orange candies.\n    Returns:\n    int: The number of bags that have at least the lower limit and fewer than the upper limit of orange candies.\n    \"\"\"\n    # prepare a list to calculate candies in each bag\n    candies = []\n    # calculate the total number of orange candies in each bag\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            candies.append(stem * 10 + leaf[j])\n    # filter the bags where the total number of orange candies is within the specified range\n    filtered = [candy for candy in candies if lower_limit <= candy < upper_limit]\n    # count the number of rows\n    num_bags = len(filtered)\n    return num_bags","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[6, 8, 9], [1, 6, 9], [9], [1], [2, 2, 5, 6, 8], [1, 2], [], [9]]\n})\n# Call the tool to solve the problem\nprint(count_bags_within_range(df, 22, 86))","table":"Name: Orange candies per bag\nUnit: bags\nContent:\nStem | Leaf \n1 | 6, 8, 9\n2 | 1, 6, 9\n3 | 9\n4 | 1\n5 | 2, 2, 5, 6, 8\n6 | 1, 2\n7 | \n8 | 9"}
{"level":7,"answer":45.0,"prediction":"import pandas as pd\n\ndef find_highest_score(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of test scores and returns the highest score.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the test scores.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The highest score.\n    \"\"\"\n    # prepare a list to store all the scores\n    scores = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the score for each row\n        for j in range(len(leaf)):\n            score = stem * 10 + leaf[j]\n            scores.append(score)\n    # find the highest score\n    highest_score = max(scores)\n    return highest_score\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[3, 3, 4, 9], [4, 5, 6, 9, 9, 9], [0, 3, 6], [1, 5, 5]]\n})\n# Call the tool to solve the problem\nprint(find_highest_score(df))","question":"Principal Herman reported the state test scores from some students at her school. What is the highest score?","prediction_code":"import pandas as pd\n\ndef find_highest_score(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of test scores and returns the highest score.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the test scores.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The highest score.\n    \"\"\"\n    # prepare a list to store all the scores\n    scores = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the score for each row\n        for j in range(len(leaf)):\n            score = stem * 10 + leaf[j]\n            scores.append(score)\n    # find the highest score\n    highest_score = max(scores)\n    return highest_score","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[3, 3, 4, 9], [4, 5, 6, 9, 9, 9], [0, 3, 6], [1, 5, 5]]\n})\n# Call the tool to solve the problem\nprint(find_highest_score(df))","table":"Name: Test scores\nUnit: points\nContent:\nStem | Leaf \n1 | 3, 3, 4, 9\n2 | 4, 5, 6, 9, 9, 9\n3 | 0, 3, 6\n4 | 1, 5, 5"}
{"level":5,"answer":32.0,"prediction":"import pandas as pd\n\ndef calculate_median_desks(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of desks in classrooms and returns the median number of desks.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of desks in each classroom.\n    The dataframe should contain \"Teacher\" and \"Number of desks\" columns.\n    Returns:\n    float: The median number of desks.\n    \"\"\"\n    # Get the column of number of desks\n    desks = df['Number of desks']\n    \n    # Calculate the median\n    median_desks = desks.median()\n    \n    return median_desks\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Teacher': ['Miss Petit', 'Mr. Gruber', 'Mr. Mehta', 'Miss Gupta', 'Mrs. Wong'],\n    'Number of desks': [31, 30, 35, 32, 34]\n})\n# Call the tool to solve the problem\nprint(calculate_median_desks(df))","question":"The teachers at an elementary school counted how many desks they had in their classrooms. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median_desks(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of desks in classrooms and returns the median number of desks.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of desks in each classroom.\n    The dataframe should contain \"Teacher\" and \"Number of desks\" columns.\n    Returns:\n    float: The median number of desks.\n    \"\"\"\n    # Get the column of number of desks\n    desks = df['Number of desks']\n    \n    # Calculate the median\n    median_desks = desks.median()\n    \n    return median_desks","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Teacher': ['Miss Petit', 'Mr. Gruber', 'Mr. Mehta', 'Miss Gupta', 'Mrs. Wong'],\n    'Number of desks': [31, 30, 35, 32, 34]\n})\n# Call the tool to solve the problem\nprint(calculate_median_desks(df))","table":"Name: Desks in classrooms\nUnit: None\nContent:\nTeacher | Number of desks\nMiss Petit | 31\nMr. Gruber | 30\nMr. Mehta | 35\nMiss Gupta | 32\nMrs. Wong | 34"}
{"level":6,"answer":1.0,"prediction":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of quiz show scores and returns the mode of the scores.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the quiz show scores with columns 'Name' and 'Score'.\n    Returns:\n    int: The mode of the scores.\n    \"\"\"\n    # Get the 'Score' column from the DataFrame\n    scores = df['Score']\n    \n    # Calculate the mode using the value_counts() function\n    mode = scores.mode().values[0]\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Oscar', 'Colin', 'Lindsey', 'Mona', 'Brian', 'Tom', 'Reagan', 'Avery'],\n    'Score': [1, 3, 1, 3, 4, 1, 6, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"The players on a quiz show received the following scores. What is the mode of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of quiz show scores and returns the mode of the scores.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the quiz show scores with columns 'Name' and 'Score'.\n    Returns:\n    int: The mode of the scores.\n    \"\"\"\n    # Get the 'Score' column from the DataFrame\n    scores = df['Score']\n    \n    # Calculate the mode using the value_counts() function\n    mode = scores.mode().values[0]\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Oscar', 'Colin', 'Lindsey', 'Mona', 'Brian', 'Tom', 'Reagan', 'Avery'],\n    'Score': [1, 3, 1, 3, 4, 1, 6, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Quiz show scores\nUnit: None\nContent:\nName | Score\nOscar | 1\nColin | 3\nLindsey | 1\nMona | 3\nBrian | 4\nTom | 1\nReagan | 6\nAvery | 6"}
{"level":6,"answer":5.0,"prediction":"import pandas as pd\n\ndef count_children_with_50_pounds(df):\n    \"\"\"\n    This function takes in a pandas dataframe of children's weights and returns the number of children who weighed at least 50 pounds.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the weights of children.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of children who weighed at least 50 pounds.\n    \"\"\"\n    # prepare a list to calculate weights of each child\n    weights = []\n    # calculate the total weight of each child\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            weights.append(stem * 10 + leaf[j])\n    # filter the children who weighed at least 50 pounds\n    filtered = [weight for weight in weights if weight >= 50]\n    # count the number of children\n    num_children = len(filtered)\n    return num_children\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[8], [1, 7], [], [5], [7], [1, 8], [0]]\n})\n# Call the tool to solve the problem\nprint(count_children_with_50_pounds(df))","question":"Dr. Wilkinson, a pediatrician, weighed all the children who recently visited her office. How many children weighed at least 50 pounds?","prediction_code":"import pandas as pd\n\ndef count_children_with_50_pounds(df):\n    \"\"\"\n    This function takes in a pandas dataframe of children's weights and returns the number of children who weighed at least 50 pounds.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the weights of children.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of children who weighed at least 50 pounds.\n    \"\"\"\n    # prepare a list to calculate weights of each child\n    weights = []\n    # calculate the total weight of each child\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            weights.append(stem * 10 + leaf[j])\n    # filter the children who weighed at least 50 pounds\n    filtered = [weight for weight in weights if weight >= 50]\n    # count the number of children\n    num_children = len(filtered)\n    return num_children","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[8], [1, 7], [], [5], [7], [1, 8], [0]]\n})\n# Call the tool to solve the problem\nprint(count_children_with_50_pounds(df))","table":"Name: Children's weights (lbs)\nUnit: children\nContent:\nStem | Leaf \n2 | 8\n3 | 1, 7\n4 | \n5 | 5\n6 | 7\n7 | 1, 8\n8 | 0"}
{"level":4,"answer":13.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(menu_df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the menu items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = menu_df[menu_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\nmenu_df = pd.DataFrame({\n    'Item': ['spinach omelette', 'ham and cheese omelette', 'fried eggs', 'egg sandwich', 'biscuits and gravy'],\n    'Price': [9, 6, 3, 4, 2]\n})\n\n# Initialize the orders dictionary\norders = {\n    'egg sandwich': 1,\n    'ham and cheese omelette': 1,\n    'fried eggs': 1\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(menu_df, orders))","question":"How much money does Jason need to buy an egg sandwich, a ham and cheese omelette, and fried eggs?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(menu_df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the menu items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = menu_df[menu_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\nmenu_df = pd.DataFrame({\n    'Item': ['spinach omelette', 'ham and cheese omelette', 'fried eggs', 'egg sandwich', 'biscuits and gravy'],\n    'Price': [9, 6, 3, 4, 2]\n})\n\n# Initialize the orders dictionary\norders = {\n    'egg sandwich': 1,\n    'ham and cheese omelette': 1,\n    'fried eggs': 1\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(menu_df, orders))","table":"Name: None\nUnit: $\nContent:\nspinach omelette | $9\nham and cheese omelette | $6\nfried eggs | $3\negg sandwich | $4\nbiscuits and gravy | $2"}
{"level":4,"answer":7.0,"prediction":"import pandas as pd\n\ndef count_bags_with_lemon_candies(df):\n    \"\"\"\n    This function takes in a pandas dataframe of lemon-flavored candies per bag, and returns the number of bags that have at least 30 but fewer than 80 lemon-flavored candies.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of lemon-flavored candies per bag.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of bags that have at least 30 but fewer than 80 lemon-flavored candies.\n    \"\"\"\n    # prepare a list to calculate candies in each bag\n    candies = []\n    # calculate the total number of lemon-flavored candies in each bag\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            candies.append(stem * 10 + leaf[j])\n    # filter the bags where the total number of lemon-flavored candies is greater than or equal to 30 but less than 80\n    filtered = [candy for candy in candies if 30 <= candy < 80]\n    # count the number of rows\n    num_bags = len(filtered)\n    return num_bags\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7],\n    'Leaf': [[2], [1], [1], [0, 4], [2, 9]]\n})\n# Call the tool to solve the problem\nprint(count_bags_with_lemon_candies(df))","question":"A machine at the candy factory dispensed different numbers of lemon-flavored candies into various bags. How many bags had at least 30 lemon-flavored candies but fewer than 80 lemon-flavored candies?","prediction_code":"import pandas as pd\n\ndef count_bags_with_lemon_candies(df):\n    \"\"\"\n    This function takes in a pandas dataframe of lemon-flavored candies per bag, and returns the number of bags that have at least 30 but fewer than 80 lemon-flavored candies.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of lemon-flavored candies per bag.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of bags that have at least 30 but fewer than 80 lemon-flavored candies.\n    \"\"\"\n    # prepare a list to calculate candies in each bag\n    candies = []\n    # calculate the total number of lemon-flavored candies in each bag\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            candies.append(stem * 10 + leaf[j])\n    # filter the bags where the total number of lemon-flavored candies is greater than or equal to 30 but less than 80\n    filtered = [candy for candy in candies if 30 <= candy < 80]\n    # count the number of rows\n    num_bags = len(filtered)\n    return num_bags","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7],\n    'Leaf': [[2], [1], [1], [0, 4], [2, 9]]\n})\n# Call the tool to solve the problem\nprint(count_bags_with_lemon_candies(df))","table":"Name: Lemon-flavored candies per bag\nUnit: None\nContent:\nStem | Leaf \n3 | 2\n4 | 1\n5 | 1\n6 | 0, 4\n7 | 2, 9"}
{"level":5,"answer":90.0,"prediction":"import pandas as pd\n\ndef find_largest_number(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of broken plates per shipment and returns the largest number of broken plates.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken plates per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of broken plates.\n    \"\"\"\n    # prepare a list to store the broken plates\n    broken_plates = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # if there are multiple values in the \"Leaf\" column, split them and add them to the broken plates list\n        if isinstance(leaf, str):\n            leaf = leaf.split(', ')\n            broken_plates.extend([stem * 10 + int(l) for l in leaf])\n        # if there is only one value in the \"Leaf\" column, add it to the broken plates list\n        elif isinstance(leaf, int):\n            broken_plates.append(stem * 10 + leaf)\n    # find the largest number of broken plates\n    largest_number = max(broken_plates)\n    return largest_number\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': ['0, 5', '1', '', '', '', '6', '', '1, 8', '', '0']\n})\n# Call the tool to solve the problem\nprint(find_largest_number(df))","question":"A pottery factory kept track of the number of broken plates per shipment last week. What is the largest number of broken plates?","prediction_code":"import pandas as pd\n\ndef find_largest_number(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of broken plates per shipment and returns the largest number of broken plates.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken plates per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of broken plates.\n    \"\"\"\n    # prepare a list to store the broken plates\n    broken_plates = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # if there are multiple values in the \"Leaf\" column, split them and add them to the broken plates list\n        if isinstance(leaf, str):\n            leaf = leaf.split(', ')\n            broken_plates.extend([stem * 10 + int(l) for l in leaf])\n        # if there is only one value in the \"Leaf\" column, add it to the broken plates list\n        elif isinstance(leaf, int):\n            broken_plates.append(stem * 10 + leaf)\n    # find the largest number of broken plates\n    largest_number = max(broken_plates)\n    return largest_number","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': ['0, 5', '1', '', '', '', '6', '', '1, 8', '', '0']\n})\n# Call the tool to solve the problem\nprint(find_largest_number(df))","table":"Name: Broken plates per shipment\nUnit: broken plates\nContent:\nStem | Leaf \n0 | 0, 5\n1 | 1\n2 | \n3 | \n4 | \n5 | 6\n6 | \n7 | 1, 8\n8 | \n9 | 0"}
{"level":8,"answer":2625.0,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, package1, package2):\n    \"\"\"\n    This function takes in a pandas DataFrame of vacation packages and returns the price difference between two specific packages.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing vacation packages and their prices with columns 'Package' and 'Price'.\n    package1 (str): The name of the first package.\n    package2 (str): The name of the second package.\n    Returns:\n    float: The price difference between the two packages.\n    \"\"\"\n    # Filter the DataFrame for the specific packages\n    package1_df = df[df['Package'] == package1]\n    package2_df = df[df['Package'] == package2]\n    \n    # Get the prices of the packages\n    package1_price = package1_df['Price'].values[0]\n    package2_price = package2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = package2_price - package1_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Package': ['European vacation package', 'African safari vacation package', 'Jamaican vacation package', 'Australian vacation package', 'Hawaiian vacation package'],\n    'Price': [7668, 4813, 7039, 9664, 4383]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'Jamaican vacation package', 'Australian vacation package'))","question":"How much more does an Australian vacation package cost than a Jamaican vacation package?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, package1, package2):\n    \"\"\"\n    This function takes in a pandas DataFrame of vacation packages and returns the price difference between two specific packages.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing vacation packages and their prices with columns 'Package' and 'Price'.\n    package1 (str): The name of the first package.\n    package2 (str): The name of the second package.\n    Returns:\n    float: The price difference between the two packages.\n    \"\"\"\n    # Filter the DataFrame for the specific packages\n    package1_df = df[df['Package'] == package1]\n    package2_df = df[df['Package'] == package2]\n    \n    # Get the prices of the packages\n    package1_price = package1_df['Price'].values[0]\n    package2_price = package2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = package2_price - package1_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Package': ['European vacation package', 'African safari vacation package', 'Jamaican vacation package', 'Australian vacation package', 'Hawaiian vacation package'],\n    'Price': [7668, 4813, 7039, 9664, 4383]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'Jamaican vacation package', 'Australian vacation package'))","table":"Name: None\nUnit: $\nContent:\nEuropean vacation package | $7,668\nAfrican safari vacation package | $4,813\nJamaican vacation package | $7,039\nAustralian vacation package | $9,664\nHawaiian vacation package | $4,383"}
{"level":5,"answer":3.0,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['mop', 'rake', 'garden hose', 'lawn sprinkler', 'ladder'],\n    'Price': [18.00, 23.00, 16.00, 15.00, 31.00]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'mop', 'lawn sprinkler'))","question":"How much more does a mop cost than a lawn sprinkler?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['mop', 'rake', 'garden hose', 'lawn sprinkler', 'ladder'],\n    'Price': [18.00, 23.00, 16.00, 15.00, 31.00]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'mop', 'lawn sprinkler'))","table":"Name: None\nUnit: $\nContent:\nmop | $18.00\nrake | $23.00\ngarden hose | $16.00\nlawn sprinkler | $15.00\nladder | $31.00"}
{"level":7,"answer":-15.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of employees with health care benefits and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of employees with health care benefits for each year.\n    The DataFrame should have \"Year\" and \"Employees\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_employees = df[df['Year'] == start_year]['Employees'].values[0]\n    end_employees = df[df['Year'] == end_year]['Employees'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_employees - start_employees) \/ start_employees * 100\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2014, 2015, 2016, 2017, 2018],\n    'Employees': [34, 37, 35, 20, 4]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2016, 2017))","question":"At Castroville Consulting, the head of human resources examined how the number of employees with health care benefits varied in response to policy changes. According to the table, what was the rate of change between 2016 and 2017?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of employees with health care benefits and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of employees with health care benefits for each year.\n    The DataFrame should have \"Year\" and \"Employees\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_employees = df[df['Year'] == start_year]['Employees'].values[0]\n    end_employees = df[df['Year'] == end_year]['Employees'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_employees - start_employees) \/ start_employees * 100\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2014, 2015, 2016, 2017, 2018],\n    'Employees': [34, 37, 35, 20, 4]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2016, 2017))","table":"Name: Employees with health care benefits\nUnit: employees per year\nContent:\nYear | Employees\n2014 | 34\n2015 | 37\n2016 | 35\n2017 | 20\n2018 | 4"}
{"level":6,"answer":2.1,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its price per pound and the quantity purchased.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per pound for each item.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item purchased in pounds.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price per pound for the item\n        price_per_lb = item_df['Unit'].values[0]\n        \n        # Calculate the total cost\n        total_cost = price_per_lb * quantity\n        return total_cost\n    else:\n        return \"Item not found in the price table.\"\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['kidney beans', 'lima beans', 'garbanzo beans', 'mung beans', 'lentils', 'soybeans'],\n    'Unit': [2, 3, 2, 1, 1, 3]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'lima beans', 0.7))","question":"Derek went to the store. He bought 0.7 pounds of lima beans. How much did he spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its price per pound and the quantity purchased.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per pound for each item.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item purchased in pounds.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price per pound for the item\n        price_per_lb = item_df['Unit'].values[0]\n        \n        # Calculate the total cost\n        total_cost = price_per_lb * quantity\n        return total_cost\n    else:\n        return \"Item not found in the price table.\"","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['kidney beans', 'lima beans', 'garbanzo beans', 'mung beans', 'lentils', 'soybeans'],\n    'Unit': [2, 3, 2, 1, 1, 3]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'lima beans', 0.7))","table":"Name: None\nUnit: $\nContent:\nkidney beans | $2 per lb\nlima beans | $3 per lb\ngarbanzo beans | $2 per lb\nmung beans | $1 per lb\nlentils | $1 per lb\nsoybeans | $3 per lb"}
{"level":7,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of a budget table and two years, and returns the rate of change between the two years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the budget table with columns 'Year' and 'Per-student budget'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_budget = df[df['Year'] == start_year]['Per-student budget'].values[0]\n    end_budget = df[df['Year'] == end_year]['Per-student budget'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_budget - start_budget) \/ start_budget * 100\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2006, 2007, 2008, 2009, 2010],\n    'Per-student budget': [21, 29, 23, 28, 23]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2008, 2009))","question":"In hopes of raising more funds for arts education, some parents in the Clarksville School District publicized the current per-student arts education budget. According to the table, what was the rate of change between 2008 and 2009?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of a budget table and two years, and returns the rate of change between the two years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the budget table with columns 'Year' and 'Per-student budget'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_budget = df[df['Year'] == start_year]['Per-student budget'].values[0]\n    end_budget = df[df['Year'] == end_year]['Per-student budget'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_budget - start_budget) \/ start_budget * 100\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2006, 2007, 2008, 2009, 2010],\n    'Per-student budget': [21, 29, 23, 28, 23]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2008, 2009))","table":"Name: Clarksville arts education budget\nUnit: $, per year\nContent:\nYear | Per-student budget\n2006 | $21\n2007 | $29\n2008 | $23\n2009 | $28\n2010 | $23"}
{"level":8,"answer":10.0,"prediction":"import pandas as pd\n\ndef count_students_with_more_than_5_frames(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of picture frames made by students and returns the number of students who made more than 5 frames.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of picture frames made by students.\n    The dataframe should contain \"Picture frames made\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who made more than 5 frames.\n    \"\"\"\n    # Filter the DataFrame for students who made more than 5 frames\n    filtered_df = df[df['Picture frames made'] > 5]\n    \n    # Count the number of rows in the filtered DataFrame\n    num_students = len(filtered_df)\n    \n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Picture frames made': [0, 1, 2, 3, 4, 5, 6],\n    'Frequency': [3, 7, 12, 11, 1, 14, 10]\n})\n# Call the tool to solve the problem\nprint(count_students_with_more_than_5_frames(df))","question":"The shop teacher, Mr. Monroe, wrote down how many picture frames the students made last week. How many students made more than 5 picture frames?","prediction_code":"import pandas as pd\n\ndef count_students_with_more_than_5_frames(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of picture frames made by students and returns the number of students who made more than 5 frames.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of picture frames made by students.\n    The dataframe should contain \"Picture frames made\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who made more than 5 frames.\n    \"\"\"\n    # Filter the DataFrame for students who made more than 5 frames\n    filtered_df = df[df['Picture frames made'] > 5]\n    \n    # Count the number of rows in the filtered DataFrame\n    num_students = len(filtered_df)\n    \n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Picture frames made': [0, 1, 2, 3, 4, 5, 6],\n    'Frequency': [3, 7, 12, 11, 1, 14, 10]\n})\n# Call the tool to solve the problem\nprint(count_students_with_more_than_5_frames(df))","table":"Name: Making picture frames\nUnit: None\nContent:\nPicture frames made | Frequency\n0 | 3\n1 | 7\n2 | 12\n3 | 11\n4 | 1\n5 | 14\n6 | 10"}
{"level":3,"answer":158.0,"prediction":"import pandas as pd\n\ndef calculate_house_sales_difference(df, city1, city2):\n    \"\"\"\n    This function takes in a pandas DataFrame of house sales and two city names, and returns the difference in the number of houses sold between the two cities.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the city names and the number of houses sold in each city.\n    city1 (str): The name of the first city.\n    city2 (str): The name of the second city.\n    Returns:\n    int: The difference in the number of houses sold between the two cities.\n    \"\"\"\n    # Filter the DataFrame for the two cities\n    city1_sales = df[df['City'] == city1]['Number of houses sold'].values[0]\n    city2_sales = df[df['City'] == city2]['Number of houses sold'].values[0]\n    \n    # Calculate the difference in house sales\n    difference = city1_sales - city2_sales\n    \n    return difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'City': ['Liberty City', 'New Hamburg', 'Parville', 'Melville', 'Briggs Corner'],\n    'Number of houses sold': [414, 139, 256, 876, 616]\n})\n# Call the tool to solve the problem\nprint(calculate_house_sales_difference(df, 'Liberty City', 'Parville'))","question":"A real estate agent looked into how many houses were sold in different cities. How many more houses were sold in Liberty City than in Parville?","prediction_code":"import pandas as pd\n\ndef calculate_house_sales_difference(df, city1, city2):\n    \"\"\"\n    This function takes in a pandas DataFrame of house sales and two city names, and returns the difference in the number of houses sold between the two cities.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the city names and the number of houses sold in each city.\n    city1 (str): The name of the first city.\n    city2 (str): The name of the second city.\n    Returns:\n    int: The difference in the number of houses sold between the two cities.\n    \"\"\"\n    # Filter the DataFrame for the two cities\n    city1_sales = df[df['City'] == city1]['Number of houses sold'].values[0]\n    city2_sales = df[df['City'] == city2]['Number of houses sold'].values[0]\n    \n    # Calculate the difference in house sales\n    difference = city1_sales - city2_sales\n    \n    return difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'City': ['Liberty City', 'New Hamburg', 'Parville', 'Melville', 'Briggs Corner'],\n    'Number of houses sold': [414, 139, 256, 876, 616]\n})\n# Call the tool to solve the problem\nprint(calculate_house_sales_difference(df, 'Liberty City', 'Parville'))","table":"Name: House sales\nUnit: houses\nContent:\nCity | Number of houses sold\nLiberty City | 414\nNew Hamburg | 139\nParville | 256\nMelville | 876\nBriggs Corner | 616"}
{"level":5,"answer":51.0,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, cruise1, cruise2):\n    \"\"\"\n    This function takes in a pandas DataFrame of cruise ticket prices and two cruise names, and returns the price difference between the two cruises.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing cruise ticket prices with columns 'Cruise' and 'Price'.\n    cruise1 (str): The name of the first cruise.\n    cruise2 (str): The name of the second cruise.\n    Returns:\n    float: The price difference between the two cruises.\n    \"\"\"\n    # Filter the DataFrame for the two cruises\n    cruise1_df = df[df['Cruise'] == cruise1]\n    cruise2_df = df[df['Cruise'] == cruise2]\n    \n    # Get the prices for the two cruises\n    cruise1_price = cruise1_df['Price'].values[0]\n    cruise2_price = cruise2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = cruise1_price - cruise2_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Cruise': ['ticket for an Australian cruise', 'ticket for a Caribbean cruise', 'ticket for a Mexican cruise', 'ticket for a Mediterranean cruise'],\n    'Price': [4178.00, 1542.00, 9348.00, 1593.00]\n})\n\n# Call the tool to solve the problem\ncruise1 = 'ticket for a Caribbean cruise'\ncruise2 = 'ticket for a Mediterranean cruise'\nprice_difference = calculate_price_difference(df, cruise1, cruise2)\n\n# Print out the answer\nprint(price_difference)","question":"How much more does a ticket for a Mediterranean cruise cost than a ticket for a Caribbean cruise?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, cruise1, cruise2):\n    \"\"\"\n    This function takes in a pandas DataFrame of cruise ticket prices and two cruise names, and returns the price difference between the two cruises.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing cruise ticket prices with columns 'Cruise' and 'Price'.\n    cruise1 (str): The name of the first cruise.\n    cruise2 (str): The name of the second cruise.\n    Returns:\n    float: The price difference between the two cruises.\n    \"\"\"\n    # Filter the DataFrame for the two cruises\n    cruise1_df = df[df['Cruise'] == cruise1]\n    cruise2_df = df[df['Cruise'] == cruise2]\n    \n    # Get the prices for the two cruises\n    cruise1_price = cruise1_df['Price'].values[0]\n    cruise2_price = cruise2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = cruise1_price - cruise2_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Cruise': ['ticket for an Australian cruise', 'ticket for a Caribbean cruise', 'ticket for a Mexican cruise', 'ticket for a Mediterranean cruise'],\n    'Price': [4178.00, 1542.00, 9348.00, 1593.00]\n})\n\n# Call the tool to solve the problem\ncruise1 = 'ticket for a Caribbean cruise'\ncruise2 = 'ticket for a Mediterranean cruise'\nprice_difference = calculate_price_difference(df, cruise1, cruise2)\n\n# Print out the answer\nprint(price_difference)","table":"Name: None\nUnit: $\nContent:\nticket for an Australian cruise | $4,178.00\nticket for a Caribbean cruise | $1,542.00\nticket for a Mexican cruise | $9,348.00\nticket for a Mediterranean cruise | $1,593.00"}
{"level":8,"answer":86130.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(ad_df, ads):\n    \"\"\"\n    This function takes in a pandas DataFrame representing an ad table and a dictionary of ads, and returns the total cost of the ads using pandas.\n    Args:\n    ad_df (pd.DataFrame): A pandas DataFrame containing ad types and their costs with columns 'Ad' and 'Cost'.\n    ads (dict): A dictionary where the keys are ad types and the values are the number of ads for each type.\n    Returns:\n    float: The total cost of the ads.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the ad types and calculate the cost for each ad type\n    for ad, quantity in ads.items():\n        # Filter the DataFrame for the specific ad type\n        ad_type_df = ad_df[ad_df['Ad'] == ad]\n        if not ad_type_df.empty:\n            ad_cost = ad_type_df['Cost'].values[0]\n            total_cost += quantity * ad_cost\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ad': ['radio ad', 'online ad', 'billboard ad', 'magazine ad', 'TV ad'],\n    'Cost': [1827.00, 2770.00, 8084.00, 3247.00, 6323.00]\n})\n\n# Initialize the dictionary of ads\nads = {\n    'TV ad': 9,\n    'magazine ad': 9\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, ads))","question":"How much money does Quinn need to buy 9 TV ads and 9 magazine ads?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(ad_df, ads):\n    \"\"\"\n    This function takes in a pandas DataFrame representing an ad table and a dictionary of ads, and returns the total cost of the ads using pandas.\n    Args:\n    ad_df (pd.DataFrame): A pandas DataFrame containing ad types and their costs with columns 'Ad' and 'Cost'.\n    ads (dict): A dictionary where the keys are ad types and the values are the number of ads for each type.\n    Returns:\n    float: The total cost of the ads.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the ad types and calculate the cost for each ad type\n    for ad, quantity in ads.items():\n        # Filter the DataFrame for the specific ad type\n        ad_type_df = ad_df[ad_df['Ad'] == ad]\n        if not ad_type_df.empty:\n            ad_cost = ad_type_df['Cost'].values[0]\n            total_cost += quantity * ad_cost\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ad': ['radio ad', 'online ad', 'billboard ad', 'magazine ad', 'TV ad'],\n    'Cost': [1827.00, 2770.00, 8084.00, 3247.00, 6323.00]\n})\n\n# Initialize the dictionary of ads\nads = {\n    'TV ad': 9,\n    'magazine ad': 9\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, ads))","table":"Name: None\nUnit: $\nContent:\nradio ad | $1,827.00\nonline ad | $2,770.00\nbillboard ad | $8,084.00\nmagazine ad | $3,247.00\nTV ad | $6,323.00"}
{"level":1,"answer":40.0,"prediction":"import pandas as pd\n\ndef calculate_total_raincoats(df, num_racks):\n    \"\"\"\n    This function takes in a pandas DataFrame of coat racks and the number of raincoats per rack, and returns the total number of raincoats on a given number of racks.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of coat racks and the number of raincoats per rack.\n    The DataFrame should have columns 'Number of coat racks' and 'Number of raincoats'.\n    num_racks (int): The number of coat racks to calculate the total number of raincoats for.\n    Returns:\n    int: The total number of raincoats on the given number of racks.\n    \"\"\"\n    # Filter the DataFrame for the given number of racks\n    filtered_df = df[df['Number of coat racks'] == num_racks]\n    \n    # Get the number of raincoats for the given number of racks\n    num_raincoats = filtered_df['Number of raincoats'].values[0]\n    \n    return num_raincoats\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of coat racks': [1, 2, 3, 4],\n    'Number of raincoats': [10, 20, 30, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_raincoats(df, 4))","question":"Each coat rack has 10 raincoats. How many raincoats are on 4 coat racks?","prediction_code":"import pandas as pd\n\ndef calculate_total_raincoats(df, num_racks):\n    \"\"\"\n    This function takes in a pandas DataFrame of coat racks and the number of raincoats per rack, and returns the total number of raincoats on a given number of racks.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of coat racks and the number of raincoats per rack.\n    The DataFrame should have columns 'Number of coat racks' and 'Number of raincoats'.\n    num_racks (int): The number of coat racks to calculate the total number of raincoats for.\n    Returns:\n    int: The total number of raincoats on the given number of racks.\n    \"\"\"\n    # Filter the DataFrame for the given number of racks\n    filtered_df = df[df['Number of coat racks'] == num_racks]\n    \n    # Get the number of raincoats for the given number of racks\n    num_raincoats = filtered_df['Number of raincoats'].values[0]\n    \n    return num_raincoats","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of coat racks': [1, 2, 3, 4],\n    'Number of raincoats': [10, 20, 30, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_raincoats(df, 4))","table":"Name: None\nUnit: raincoats\nContent:\nNumber of coat racks | Number of raincoats\n1 | 10\n2 | 20\n3 | 30\n4 | ?"}
{"level":8,"answer":164.0,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['silver coat rack', 'grandfather clock', 'crystal sculpture', 'rug', 'crystal vase', 'oil painting'],\n    'Price': [796.00, 628.00, 734.00, 274.00, 464.00, 328.00]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'grandfather clock', 'crystal vase'))","question":"How much more does a grandfather clock cost than a crystal vase?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['silver coat rack', 'grandfather clock', 'crystal sculpture', 'rug', 'crystal vase', 'oil painting'],\n    'Price': [796.00, 628.00, 734.00, 274.00, 464.00, 328.00]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'grandfather clock', 'crystal vase'))","table":"Name: None\nUnit: $\nContent:\nsilver coat rack | $796.00\ngrandfather clock | $628.00\ncrystal sculpture | $734.00\nrug | $274.00\ncrystal vase | $464.00\noil painting | $328.00"}
{"level":7,"answer":2.0,"prediction":"import pandas as pd\n\ndef count_offices_with_38_square_meters(df):\n    \"\"\"\n    This function takes in a pandas dataframe of office sizes and returns the number of offices that are exactly 38 square meters.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the sizes of offices.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of offices that are exactly 38 square meters.\n    \"\"\"\n    # prepare a list to store the sizes of each office\n    sizes = []\n    # calculate the size of each office\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            sizes.append(stem * 10 + leaf[j])\n    # count the number of offices that are exactly 38 square meters\n    num_offices = sizes.count(38)\n    return num_offices\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[1, 1, 3, 7, 8, 8], [8], [3, 4], [9], [2, 3], [0, 9], [0]]\n})\n# Call the tool to solve the problem\nprint(count_offices_with_38_square_meters(df))","question":"Michelle, who rents properties for a living, measures all the offices in a building she is renting. How many offices are exactly 38 square meters?","prediction_code":"import pandas as pd\n\ndef count_offices_with_38_square_meters(df):\n    \"\"\"\n    This function takes in a pandas dataframe of office sizes and returns the number of offices that are exactly 38 square meters.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the sizes of offices.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of offices that are exactly 38 square meters.\n    \"\"\"\n    # prepare a list to store the sizes of each office\n    sizes = []\n    # calculate the size of each office\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            sizes.append(stem * 10 + leaf[j])\n    # count the number of offices that are exactly 38 square meters\n    num_offices = sizes.count(38)\n    return num_offices","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[1, 1, 3, 7, 8, 8], [8], [3, 4], [9], [2, 3], [0, 9], [0]]\n})\n# Call the tool to solve the problem\nprint(count_offices_with_38_square_meters(df))","table":"Name: Office sizes (square meters)\nUnit: offices\nContent:\nStem | Leaf \n3 | 1, 1, 3, 7, 8, 8\n4 | 8\n5 | 3, 4\n6 | 9\n7 | 2, 3\n8 | 0, 9\n9 | 0"}
{"level":8,"answer":-7.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, year1, year2):\n    \"\"\"\n    This function takes in a pandas DataFrame of games won by the Newberg baseball team and two years, and returns the rate of change between the two years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of games won by the Newberg baseball team each year.\n    The DataFrame should have \"Year\" and \"Games won\" columns.\n    year1 (int): The first year.\n    year2 (int): The second year.\n    Returns:\n    float: The rate of change between the two years.\n    \"\"\"\n    # Filter the DataFrame for the two years\n    year1_df = df[df['Year'] == year1]\n    year2_df = df[df['Year'] == year2]\n    \n    # Get the number of games won for each year\n    games_won_year1 = year1_df['Games won'].values[0]\n    games_won_year2 = year2_df['Games won'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (games_won_year2 - games_won_year1) \/ (year2 - year1)\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2009, 2010, 2011, 2012, 2013],\n    'Games won': [17, 26, 19, 25, 22]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2010, 2011))","question":"Fans of the Newberg baseball team compared the number of games won by their team each year. According to the table, what was the rate of change between 2010 and 2011?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, year1, year2):\n    \"\"\"\n    This function takes in a pandas DataFrame of games won by the Newberg baseball team and two years, and returns the rate of change between the two years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of games won by the Newberg baseball team each year.\n    The DataFrame should have \"Year\" and \"Games won\" columns.\n    year1 (int): The first year.\n    year2 (int): The second year.\n    Returns:\n    float: The rate of change between the two years.\n    \"\"\"\n    # Filter the DataFrame for the two years\n    year1_df = df[df['Year'] == year1]\n    year2_df = df[df['Year'] == year2]\n    \n    # Get the number of games won for each year\n    games_won_year1 = year1_df['Games won'].values[0]\n    games_won_year2 = year2_df['Games won'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (games_won_year2 - games_won_year1) \/ (year2 - year1)\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2009, 2010, 2011, 2012, 2013],\n    'Games won': [17, 26, 19, 25, 22]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2010, 2011))","table":"Name: Games won by the Newberg baseball team\nUnit: games per year\nContent:\nYear | Games won\n2009 | 17\n2010 | 26\n2011 | 19\n2012 | 25\n2013 | 22"}
{"level":8,"answer":1.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of hockey games won by Taylor High School and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of games won by Taylor High School each year.\n    The DataFrame should have \"Year\" and \"Games won\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_games_won = df[df['Year'] == start_year]['Games won'].values[0]\n    end_games_won = df[df['Year'] == end_year]['Games won'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_games_won - start_games_won) \/ (end_year - start_year)\n    \n    return rate_of_change\n########################################\n# Initialize the table into a DataFrame\ndf = pd.DataFrame({\n    'Year': [2017, 2018, 2019, 2020, 2021],\n    'Games won': [14, 1, 11, 16, 17]\n})\n\n# Call the tool to solve the problem\nrate_of_change = calculate_rate_of_change(df, 2020, 2021)\n\n# Print out the answer\nprint(rate_of_change)","question":"A pair of Taylor High School hockey fans counted the number of games won by the school each year. According to the table, what was the rate of change between 2020 and 2021?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of hockey games won by Taylor High School and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of games won by Taylor High School each year.\n    The DataFrame should have \"Year\" and \"Games won\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_games_won = df[df['Year'] == start_year]['Games won'].values[0]\n    end_games_won = df[df['Year'] == end_year]['Games won'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_games_won - start_games_won) \/ (end_year - start_year)\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a DataFrame\ndf = pd.DataFrame({\n    'Year': [2017, 2018, 2019, 2020, 2021],\n    'Games won': [14, 1, 11, 16, 17]\n})\n\n# Call the tool to solve the problem\nrate_of_change = calculate_rate_of_change(df, 2020, 2021)\n\n# Print out the answer\nprint(rate_of_change)","table":"Name: Hockey games won by Taylor High\nUnit: games per year\nContent:\nYear | Games won\n2017 | 14\n2018 | 1\n2019 | 11\n2020 | 16\n2021 | 17"}
{"level":4,"answer":3.0,"prediction":"import pandas as pd\n\ndef calculate_chocolate_consumption_difference(df, country):\n    \"\"\"\n    This function takes in a pandas DataFrame of chocolate consumption per capita and a country name, and returns the difference in chocolate consumption per capita for the given country between two years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing chocolate consumption per capita data.\n    The DataFrame should have columns 'Country', '2002', and '2005'.\n    country (str): The name of the country to calculate the difference for.\n    Returns:\n    int: The difference in chocolate consumption per capita for the given country between 2005 and 2002.\n    \"\"\"\n    # Filter the DataFrame for the given country\n    country_df = df[df['Country'] == country]\n    \n    # Get the chocolate consumption values for 2002 and 2005\n    consumption_2002 = country_df['2002'].values[0]\n    consumption_2005 = country_df['2005'].values[0]\n    \n    # Calculate the difference in chocolate consumption per capita\n    difference = consumption_2005 - consumption_2002\n    \n    return difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Country': ['Belgium', 'Norway', 'Sweden', 'Denmark'],\n    '2002': [8, 8, 8, 9],\n    '2005': [11, 9, 7, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_chocolate_consumption_difference(df, 'Belgium'))","question":"Franco's Candies has been studying how much chocolate people have been eating in different countries. How much more chocolate did Belgium consume per capita in 2005 than in 2002?","prediction_code":"import pandas as pd\n\ndef calculate_chocolate_consumption_difference(df, country):\n    \"\"\"\n    This function takes in a pandas DataFrame of chocolate consumption per capita and a country name, and returns the difference in chocolate consumption per capita for the given country between two years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing chocolate consumption per capita data.\n    The DataFrame should have columns 'Country', '2002', and '2005'.\n    country (str): The name of the country to calculate the difference for.\n    Returns:\n    int: The difference in chocolate consumption per capita for the given country between 2005 and 2002.\n    \"\"\"\n    # Filter the DataFrame for the given country\n    country_df = df[df['Country'] == country]\n    \n    # Get the chocolate consumption values for 2002 and 2005\n    consumption_2002 = country_df['2002'].values[0]\n    consumption_2005 = country_df['2005'].values[0]\n    \n    # Calculate the difference in chocolate consumption per capita\n    difference = consumption_2005 - consumption_2002\n    \n    return difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Country': ['Belgium', 'Norway', 'Sweden', 'Denmark'],\n    '2002': [8, 8, 8, 9],\n    '2005': [11, 9, 7, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_chocolate_consumption_difference(df, 'Belgium'))","table":"Name: Chocolate consumption per capita (kg)\nUnit: kg\nContent:\nCountry | 2002 | 2005\nBelgium | 8 | 11\nNorway | 8 | 9\nSweden | 8 | 7\nDenmark | 9 | 8"}
{"level":4,"answer":82.0,"prediction":"import pandas as pd\n\ndef calculate_remaining_money(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to be purchased.\n    It returns the remaining money after purchasing the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The remaining money after purchasing the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the total cost\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    # Calculate the remaining money\n    remaining_money = df['Price'].sum() - total_cost\n    \n    return remaining_money\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['ball signed by a famous football player', 'book signed by a famous author', 'photograph signed by a famous race car driver', 'DVD signed by a famous comedian', 'photograph signed by a famous television star'],\n    'Price': [81, 17, 30, 74, 77]\n})\n\n# Define the items to be purchased\nitems = ['photograph signed by a famous race car driver', 'DVD signed by a famous comedian']\n\n# Call the tool to solve the problem\nprint(calculate_remaining_money(df, items))","question":"Deb has $186. How much money will Deb have left if she buys a photograph signed by a famous race car driver and a DVD signed by a famous comedian?","prediction_code":"import pandas as pd\n\ndef calculate_remaining_money(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to be purchased.\n    It returns the remaining money after purchasing the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The remaining money after purchasing the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the total cost\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    # Calculate the remaining money\n    remaining_money = df['Price'].sum() - total_cost\n    \n    return remaining_money","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['ball signed by a famous football player', 'book signed by a famous author', 'photograph signed by a famous race car driver', 'DVD signed by a famous comedian', 'photograph signed by a famous television star'],\n    'Price': [81, 17, 30, 74, 77]\n})\n\n# Define the items to be purchased\nitems = ['photograph signed by a famous race car driver', 'DVD signed by a famous comedian']\n\n# Call the tool to solve the problem\nprint(calculate_remaining_money(df, items))","table":"Name: None\nUnit: $\nContent:\nball signed by a famous football player | $81\nbook signed by a famous author | $17\nphotograph signed by a famous race car driver | $30\nDVD signed by a famous comedian | $74\nphotograph signed by a famous television star | $77"}
{"level":5,"answer":13.0,"prediction":"import pandas as pd\n\ndef count_people_with_at_least_45_points(df):\n    \"\"\"\n    This function takes in a pandas dataframe of game show scores and returns the number of people who scored at least 45 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the game show scores.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of people who scored at least 45 points.\n    \"\"\"\n    # prepare a list to calculate scores of each person\n    scores = []\n    # calculate the total score of each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # filter the people who scored at least 45 points\n    filtered = [score for score in scores if score >= 45]\n    # count the number of rows\n    num_people = len(filtered)\n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6],\n    'Leaf': [[4], [0, 1, 1, 6, 9], [1, 2, 9, 9], [4, 9, 9], [1, 2, 3, 4, 5, 8], [0, 0, 3, 7, 8]]\n})\n# Call the tool to solve the problem\nprint(count_people_with_at_least_45_points(df))","question":"The staff of a game show tracked the performance of all the contestants during the past season. How many people scored at least 45 points?","prediction_code":"import pandas as pd\n\ndef count_people_with_at_least_45_points(df):\n    \"\"\"\n    This function takes in a pandas dataframe of game show scores and returns the number of people who scored at least 45 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the game show scores.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of people who scored at least 45 points.\n    \"\"\"\n    # prepare a list to calculate scores of each person\n    scores = []\n    # calculate the total score of each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # filter the people who scored at least 45 points\n    filtered = [score for score in scores if score >= 45]\n    # count the number of rows\n    num_people = len(filtered)\n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6],\n    'Leaf': [[4], [0, 1, 1, 6, 9], [1, 2, 9, 9], [4, 9, 9], [1, 2, 3, 4, 5, 8], [0, 0, 3, 7, 8]]\n})\n# Call the tool to solve the problem\nprint(count_people_with_at_least_45_points(df))","table":"Name: Game show scores\nUnit: people\nContent:\nStem | Leaf \n1 | 4\n2 | 0, 1, 1, 6, 9\n3 | 1, 2, 9, 9\n4 | 4, 9, 9\n5 | 1, 2, 3, 4, 5, 8\n6 | 0, 0, 3, 7, 8"}
{"level":8,"answer":2.0,"prediction":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of swing counts per elementary school and returns the mode of the swing counts.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the swing counts per elementary school.\n    The dataframe should contain \"School\" and \"Number of swings\" columns.\n    Returns:\n    int: The mode of the swing counts.\n    \"\"\"\n    # Get the swing counts column\n    swing_counts = df['Number of swings']\n    \n    # Calculate the mode using the value_counts() function\n    mode = swing_counts.mode().values[0]\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'School': ['Hillside Elementary', 'Canyon Elementary', 'Sierra Elementary', 'Valley Elementary', 'Roseville Elementary'],\n    'Number of swings': [2, 2, 4, 2, 4]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"The school district compared how many swings each elementary school has. What is the mode of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of swing counts per elementary school and returns the mode of the swing counts.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the swing counts per elementary school.\n    The dataframe should contain \"School\" and \"Number of swings\" columns.\n    Returns:\n    int: The mode of the swing counts.\n    \"\"\"\n    # Get the swing counts column\n    swing_counts = df['Number of swings']\n    \n    # Calculate the mode using the value_counts() function\n    mode = swing_counts.mode().values[0]\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'School': ['Hillside Elementary', 'Canyon Elementary', 'Sierra Elementary', 'Valley Elementary', 'Roseville Elementary'],\n    'Number of swings': [2, 2, 4, 2, 4]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Swings\nUnit: None\nContent:\nSchool | Number of swings\nHillside Elementary | 2\nCanyon Elementary | 2\nSierra Elementary | 4\nValley Elementary | 2\nRoseville Elementary | 4"}
{"level":8,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of flower plants and returns the range of the numbers of flowers planted.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of flowers planted per day.\n    The dataframe should contain \"Day\" and \"Number of flowers\" columns.\n    Returns:\n    int: The range of the numbers of flowers planted.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of flowers\" column\n    min_flowers = df['Number of flowers'].min()\n    max_flowers = df['Number of flowers'].max()\n    \n    # Calculate the range\n    flower_range = max_flowers - min_flowers\n    \n    return flower_range\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Number of flowers': [6, 10, 5, 7, 8, 8, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"Lillian paid attention to how many flowers she planted in the garden during the past 7 days. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of flower plants and returns the range of the numbers of flowers planted.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of flowers planted per day.\n    The dataframe should contain \"Day\" and \"Number of flowers\" columns.\n    Returns:\n    int: The range of the numbers of flowers planted.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of flowers\" column\n    min_flowers = df['Number of flowers'].min()\n    max_flowers = df['Number of flowers'].max()\n    \n    # Calculate the range\n    flower_range = max_flowers - min_flowers\n    \n    return flower_range","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Number of flowers': [6, 10, 5, 7, 8, 8, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Flowers plants\nUnit: None\nContent:\nDay | Number of flowers\nFriday | 6\nSaturday | 10\nSunday | 5\nMonday | 7\nTuesday | 8\nWednesday | 8\nThursday | 7"}
{"level":5,"answer":1.0,"prediction":"import pandas as pd\n\ndef count_games_with_90_points(df):\n    \"\"\"\n    This function takes in a pandas dataframe of points per game and returns the number of games that had exactly 90 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of points scored per game.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of games that had exactly 90 points.\n    \"\"\"\n    # Initialize the count of games with 90 points\n    count = 0\n    \n    # Iterate through the dataframe rows\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Check if the total points in the game is 90\n        if stem * 10 + sum(leaf) == 90:\n            count += 1\n    \n    return count\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[9], [], [], [], [4], [8], [], [7], [5], [0]]\n})\n# Call the tool to solve the problem\nprint(count_games_with_90_points(df))","question":"A high school basketball coach counted the number of points his team scored each game. How many games had exactly 90 points?","prediction_code":"import pandas as pd\n\ndef count_games_with_90_points(df):\n    \"\"\"\n    This function takes in a pandas dataframe of points per game and returns the number of games that had exactly 90 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of points scored per game.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of games that had exactly 90 points.\n    \"\"\"\n    # Initialize the count of games with 90 points\n    count = 0\n    \n    # Iterate through the dataframe rows\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Check if the total points in the game is 90\n        if stem * 10 + sum(leaf) == 90:\n            count += 1\n    \n    return count","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[9], [], [], [], [4], [8], [], [7], [5], [0]]\n})\n# Call the tool to solve the problem\nprint(count_games_with_90_points(df))","table":"Name: Points per game\nUnit: games\nContent:\nStem | Leaf \n0 | 9\n1 | \n2 | \n3 | \n4 | 4\n5 | 8\n6 | \n7 | 7\n8 | 5\n9 | 0"}
{"level":8,"answer":6.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, year1, year2):\n    \"\"\"\n    This function takes in a pandas DataFrame of rounds in the spelling bee per year and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the rounds in the spelling bee per year.\n    The DataFrame should have \"Year\" and \"Rounds\" columns.\n    year1 (int): The first year for calculating the rate of change.\n    year2 (int): The second year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the two given years\n    year1_df = df[df['Year'] == year1]\n    year2_df = df[df['Year'] == year2]\n    \n    # Get the rounds for the two years\n    rounds1 = year1_df['Rounds'].values[0]\n    rounds2 = year2_df['Rounds'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (rounds2 - rounds1) \/ (year2 - year1)\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2017, 2018, 2019, 2020, 2021],\n    'Rounds': [15, 7, 13, 11, 12]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2018, 2019))","question":"Mrs. Shah told students how many rounds to expect in the spelling bee based on previous years. According to the table, what was the rate of change between 2018 and 2019?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, year1, year2):\n    \"\"\"\n    This function takes in a pandas DataFrame of rounds in the spelling bee per year and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the rounds in the spelling bee per year.\n    The DataFrame should have \"Year\" and \"Rounds\" columns.\n    year1 (int): The first year for calculating the rate of change.\n    year2 (int): The second year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the two given years\n    year1_df = df[df['Year'] == year1]\n    year2_df = df[df['Year'] == year2]\n    \n    # Get the rounds for the two years\n    rounds1 = year1_df['Rounds'].values[0]\n    rounds2 = year2_df['Rounds'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (rounds2 - rounds1) \/ (year2 - year1)\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2017, 2018, 2019, 2020, 2021],\n    'Rounds': [15, 7, 13, 11, 12]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2018, 2019))","table":"Name: Rounds in the spelling bee\nUnit: rounds per year\nContent:\nYear | Rounds\n2017 | 15\n2018 | 7\n2019 | 13\n2020 | 11\n2021 | 12"}
{"level":7,"answer":20.0,"prediction":"import pandas as pd\n\ndef count_contestants_above_score(df, score):\n    \"\"\"\n    This function takes in a pandas DataFrame of scores on a quiz show and a score threshold, and returns the number of contestants who scored above the threshold.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the scores and frequencies of the contestants.\n    The dataframe should contain \"Score\" and \"Frequency\" columns.\n    score (int): The score threshold.\n    Returns:\n    int: The number of contestants who scored above the threshold.\n    \"\"\"\n    # Filter the DataFrame for scores above the threshold\n    filtered_df = df[df['Score'] > score]\n    \n    # Calculate the total number of contestants above the threshold\n    num_contestants = filtered_df['Frequency'].sum()\n    \n    return num_contestants\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Score': [5, 6, 7, 8, 9, 10],\n    'Frequency': [17, 14, 1, 4, 12, 8]\n})\n# Call the tool to solve the problem\nprint(count_contestants_above_score(df, 8))","question":"A game show program recorded the scores of its contestants. How many contestants scored more than 8?","prediction_code":"import pandas as pd\n\ndef count_contestants_above_score(df, score):\n    \"\"\"\n    This function takes in a pandas DataFrame of scores on a quiz show and a score threshold, and returns the number of contestants who scored above the threshold.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the scores and frequencies of the contestants.\n    The dataframe should contain \"Score\" and \"Frequency\" columns.\n    score (int): The score threshold.\n    Returns:\n    int: The number of contestants who scored above the threshold.\n    \"\"\"\n    # Filter the DataFrame for scores above the threshold\n    filtered_df = df[df['Score'] > score]\n    \n    # Calculate the total number of contestants above the threshold\n    num_contestants = filtered_df['Frequency'].sum()\n    \n    return num_contestants","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Score': [5, 6, 7, 8, 9, 10],\n    'Frequency': [17, 14, 1, 4, 12, 8]\n})\n# Call the tool to solve the problem\nprint(count_contestants_above_score(df, 8))","table":"Name: Scores on a quiz show\nUnit: None\nContent:\nScore | Frequency\n5 | 17\n6 | 14\n7 | 1\n8 | 4\n9 | 12\n10 | 8"}
{"level":6,"answer":89.0,"prediction":"import pandas as pd\n\ndef find_oldest_age(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of ages and returns the age of the oldest person.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the ages of individuals.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The age of the oldest person.\n    \"\"\"\n    # prepare a list to store all ages\n    ages = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the age for each individual\n        for j in range(len(leaf)):\n            age = stem * 10 + leaf[j]\n            ages.append(age)\n    # find the maximum age\n    max_age = max(ages)\n    return max_age\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [5, 6, 7, 8],\n    'Leaf': [[0, 4, 5, 6, 7], [0, 2, 5, 6, 8], [2, 5, 8], [0, 0, 3, 3, 4, 6, 6, 9]]\n})\n# Call the tool to solve the problem\nprint(find_oldest_age(df))","question":"At their family reunion, the Jefferson family recorded everyone's age. What is the age of the oldest person?","prediction_code":"import pandas as pd\n\ndef find_oldest_age(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of ages and returns the age of the oldest person.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the ages of individuals.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The age of the oldest person.\n    \"\"\"\n    # prepare a list to store all ages\n    ages = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the age for each individual\n        for j in range(len(leaf)):\n            age = stem * 10 + leaf[j]\n            ages.append(age)\n    # find the maximum age\n    max_age = max(ages)\n    return max_age","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [5, 6, 7, 8],\n    'Leaf': [[0, 4, 5, 6, 7], [0, 2, 5, 6, 8], [2, 5, 8], [0, 0, 3, 3, 4, 6, 6, 9]]\n})\n# Call the tool to solve the problem\nprint(find_oldest_age(df))","table":"Name: Ages\nUnit: years old\nContent:\nStem | Leaf \n5 | 0, 4, 5, 6, 7\n6 | 0, 2, 5, 6, 8\n7 | 2, 5, 8\n8 | 0, 0, 3, 3, 4, 6, 6, 9"}
{"level":8,"answer":9.48,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of orders, and returns the total cost of the orders.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are item names and the values are the quantities of each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['cream of wheat', 'quick oatmeal', 'steel-cut oats', 'old-fashioned oatmeal'],\n    'Price': [1.80, 1.26, 1.50, 1.48]\n})\n\n# Initialize the orders dictionary\norders = {\n    'quick oatmeal': 4,\n    'old-fashioned oatmeal': 3\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","question":"Susan buys 4 pounds of quick oatmeal and 3 pounds of old-fashioned oatmeal . How much does she spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of orders, and returns the total cost of the orders.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are item names and the values are the quantities of each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['cream of wheat', 'quick oatmeal', 'steel-cut oats', 'old-fashioned oatmeal'],\n    'Price': [1.80, 1.26, 1.50, 1.48]\n})\n\n# Initialize the orders dictionary\norders = {\n    'quick oatmeal': 4,\n    'old-fashioned oatmeal': 3\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","table":"Name: None\nUnit: $\nContent:\ncream of wheat | $1.80\/lb\nquick oatmeal | $1.26\/lb\nsteel-cut oats | $1.50\/lb\nold-fashioned oatmeal | $1.48\/lb"}
{"level":4,"answer":0.0,"prediction":"import pandas as pd\n\ndef count_tanks_with_27_fish(df):\n    \"\"\"\n    This function takes in a pandas dataframe of fish per tank, and returns the number of tanks that have exactly 27 fish.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of fish per tank.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of tanks that have exactly 27 fish.\n    \"\"\"\n    # Initialize the count of tanks with 27 fish\n    count = 0\n    \n    # Iterate through the rows of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Calculate the total number of fish in the tank\n        total_fish = stem * 10 + sum(leaf)\n        \n        # Check if the total number of fish is exactly 27\n        if total_fish == 27:\n            count += 1\n    \n    return count\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5],\n    'Leaf': [[0, 1, 5, 8, 9], [7], [0, 6], [3, 5]]\n})\n# Call the tool to solve the problem\nprint(count_tanks_with_27_fish(df))","question":"A pet store owner had her staff count the number of fish in each tank. How many tanks have exactly 27 fish?","prediction_code":"import pandas as pd\n\ndef count_tanks_with_27_fish(df):\n    \"\"\"\n    This function takes in a pandas dataframe of fish per tank, and returns the number of tanks that have exactly 27 fish.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of fish per tank.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of tanks that have exactly 27 fish.\n    \"\"\"\n    # Initialize the count of tanks with 27 fish\n    count = 0\n    \n    # Iterate through the rows of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Calculate the total number of fish in the tank\n        total_fish = stem * 10 + sum(leaf)\n        \n        # Check if the total number of fish is exactly 27\n        if total_fish == 27:\n            count += 1\n    \n    return count","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5],\n    'Leaf': [[0, 1, 5, 8, 9], [7], [0, 6], [3, 5]]\n})\n# Call the tool to solve the problem\nprint(count_tanks_with_27_fish(df))","table":"Name: Fish per tank\nUnit: None\nContent:\nStem | Leaf \n2 | 0, 1, 5, 8, 9\n3 | 7\n4 | 0, 6\n5 | 3, 5"}
{"level":5,"answer":4.0,"prediction":"import pandas as pd\n\ndef count_gardens_with_22_plants(df):\n    \"\"\"\n    This function takes in a pandas dataframe of plants per garden, and returns the number of gardens that have at least 22 plants.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of plants per garden.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of gardens that have at least 22 plants.\n    \"\"\"\n    # prepare a list to calculate the number of plants in each garden\n    plants = []\n    # calculate the total number of plants in each garden\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        plants.append(stem + len(leaf.split(',')))\n    # filter the gardens where the total number of plants is greater than or equal to 22\n    filtered = [plant for plant in plants if plant >= 22]\n    # count the number of rows\n    num_gardens = len(filtered)\n    return num_gardens\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5],\n    'Leaf': ['4, 6, 7, 9', '1', '0', '3', '3, 8']\n})\n# Call the tool to solve the problem\nprint(count_gardens_with_22_plants(df))","question":"The members of the local garden club tallied the number of plants in each person's garden. How many gardens have at least 22 plants?","prediction_code":"import pandas as pd\n\ndef count_gardens_with_22_plants(df):\n    \"\"\"\n    This function takes in a pandas dataframe of plants per garden, and returns the number of gardens that have at least 22 plants.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of plants per garden.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of gardens that have at least 22 plants.\n    \"\"\"\n    # prepare a list to calculate the number of plants in each garden\n    plants = []\n    # calculate the total number of plants in each garden\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        plants.append(stem + len(leaf.split(',')))\n    # filter the gardens where the total number of plants is greater than or equal to 22\n    filtered = [plant for plant in plants if plant >= 22]\n    # count the number of rows\n    num_gardens = len(filtered)\n    return num_gardens","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5],\n    'Leaf': ['4, 6, 7, 9', '1', '0', '3', '3, 8']\n})\n# Call the tool to solve the problem\nprint(count_gardens_with_22_plants(df))","table":"Name: Plants per garden\nUnit: gardens\nContent:\nStem | Leaf \n1 | 4, 6, 7, 9\n2 | 1\n3 | 0\n4 | 3\n5 | 3, 8"}
{"level":5,"answer":65.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of people on the bus each day and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of people on the bus each day.\n    The dataframe should contain \"Day\" and \"Number of people\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of people']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of people': [68, 63, 83, 65, 77, 63, 64]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"A bus driver paid attention to how many passengers his bus had each day. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of people on the bus each day and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of people on the bus each day.\n    The dataframe should contain \"Day\" and \"Number of people\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of people']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of people': [68, 63, 83, 65, 77, 63, 64]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: People on the bus\nUnit: None\nContent:\nDay | Number of people\nSunday | 68\nMonday | 63\nTuesday | 83\nWednesday | 65\nThursday | 77\nFriday | 63\nSaturday | 64"}
{"level":3,"answer":249.0,"prediction":"import pandas as pd\n\ndef calculate_total_minutes(df, days):\n    \"\"\"\n    This function takes in a pandas DataFrame of minutes spent practicing and a list of days, and returns the total minutes spent on the specified days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the minutes spent practicing with columns 'Day' and 'Minutes'.\n    days (list): A list of days for which the total minutes should be calculated.\n    Returns:\n    int: The total minutes spent on the specified days.\n    \"\"\"\n    # Filter the DataFrame for the specified days\n    filtered_df = df[df['Day'].isin(days)]\n    \n    # Calculate the total minutes spent on the specified days\n    total_minutes = filtered_df['Minutes'].sum()\n    \n    return total_minutes\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday'],\n    'Minutes': [146, 103, 100]\n})\n\n# Specify the days for which the total minutes should be calculated\ndays = ['Monday', 'Tuesday']\n\n# Call the tool to solve the problem\nprint(calculate_total_minutes(df, days))","question":"Kathleen jotted down how many minutes she spent practicing piano in the past 3 days. How many minutes did Kathleen practice in total on Monday and Tuesday?","prediction_code":"import pandas as pd\n\ndef calculate_total_minutes(df, days):\n    \"\"\"\n    This function takes in a pandas DataFrame of minutes spent practicing and a list of days, and returns the total minutes spent on the specified days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the minutes spent practicing with columns 'Day' and 'Minutes'.\n    days (list): A list of days for which the total minutes should be calculated.\n    Returns:\n    int: The total minutes spent on the specified days.\n    \"\"\"\n    # Filter the DataFrame for the specified days\n    filtered_df = df[df['Day'].isin(days)]\n    \n    # Calculate the total minutes spent on the specified days\n    total_minutes = filtered_df['Minutes'].sum()\n    \n    return total_minutes","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday'],\n    'Minutes': [146, 103, 100]\n})\n\n# Specify the days for which the total minutes should be calculated\ndays = ['Monday', 'Tuesday']\n\n# Call the tool to solve the problem\nprint(calculate_total_minutes(df, days))","table":"Name: Minutes spent practicing\nUnit: minutes\nContent:\nDay | Minutes\nMonday | 146\nTuesday | 103\nWednesday | 100"}
{"level":7,"answer":36.0,"prediction":"import pandas as pd\n\ndef count_people_fewer_than_3(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trips to the mall last month and returns the number of people who went to the mall fewer than 3 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of trips and their frequencies.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who went to the mall fewer than 3 times.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of trips is fewer than 3\n    filtered_df = df[df['Number of trips'] < 3]\n    \n    # Calculate the total number of people who went to the mall fewer than 3 times\n    num_people = filtered_df['Frequency'].sum()\n    \n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [0, 1, 2, 3, 4, 5],\n    'Frequency': [7, 11, 18, 2, 16, 14]\n})\n# Call the tool to solve the problem\nprint(count_people_fewer_than_3(df))","question":"A marketing research firm asked people how many times they visited the mall last month. How many people went to the mall fewer than 3 times?","prediction_code":"import pandas as pd\n\ndef count_people_fewer_than_3(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trips to the mall last month and returns the number of people who went to the mall fewer than 3 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of trips and their frequencies.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who went to the mall fewer than 3 times.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of trips is fewer than 3\n    filtered_df = df[df['Number of trips'] < 3]\n    \n    # Calculate the total number of people who went to the mall fewer than 3 times\n    num_people = filtered_df['Frequency'].sum()\n    \n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [0, 1, 2, 3, 4, 5],\n    'Frequency': [7, 11, 18, 2, 16, 14]\n})\n# Call the tool to solve the problem\nprint(count_people_fewer_than_3(df))","table":"Name: Trips to the mall last month\nUnit: None\nContent:\nNumber of trips | Frequency\n0 | 7\n1 | 11\n2 | 18\n3 | 2\n4 | 16\n5 | 14"}
{"level":7,"answer":0.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of a budget table and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the budget table with columns 'Year' and 'Per-student budget'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_budget = df[df['Year'] == start_year]['Per-student budget'].values[0]\n    end_budget = df[df['Year'] == end_year]['Per-student budget'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_budget - start_budget) \/ start_budget * 100\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2009, 2010, 2011, 2012, 2013],\n    'Per-student budget': [46, 46, 46, 45, 42]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2009, 2010))","question":"In hopes of raising more funds for arts education, some parents in the Stamford School District publicized the current per-student arts education budget. According to the table, what was the rate of change between 2009 and 2010?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of a budget table and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the budget table with columns 'Year' and 'Per-student budget'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_budget = df[df['Year'] == start_year]['Per-student budget'].values[0]\n    end_budget = df[df['Year'] == end_year]['Per-student budget'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_budget - start_budget) \/ start_budget * 100\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2009, 2010, 2011, 2012, 2013],\n    'Per-student budget': [46, 46, 46, 45, 42]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2009, 2010))","table":"Name: Stamford arts education budget\nUnit: $, per year\nContent:\nYear | Per-student budget\n2009 | $46\n2010 | $46\n2011 | $46\n2012 | $45\n2013 | $42"}
{"level":8,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of new cable customers and returns the median of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of new customers each day.\n    The dataframe should contain \"Day\" and \"Number of new customers\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of new customers']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Number of new customers': [6, 2, 4, 5, 6, 3, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"A cable company analyst paid attention to how many new customers it had each day. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of new cable customers and returns the median of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of new customers each day.\n    The dataframe should contain \"Day\" and \"Number of new customers\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of new customers']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Number of new customers': [6, 2, 4, 5, 6, 3, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: New cable customers\nUnit: None\nContent:\nDay | Number of new customers\nWednesday | 6\nThursday | 2\nFriday | 4\nSaturday | 5\nSunday | 6\nMonday | 3\nTuesday | 8"}
{"level":7,"answer":10.0,"prediction":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of fire hydrants per street and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of fire hydrants per street.\n    The dataframe should contain \"Street\" and \"Number of hydrants\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the \"Number of hydrants\" column\n    hydrants = df['Number of hydrants']\n    \n    # Calculate the mode using the value_counts() function\n    mode = hydrants.value_counts().idxmax()\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Street': ['Rose Street', 'Pine Street', 'Maple Street', 'Fir Street', 'Lemon Street', 'Cherry Street', 'Elm Street', 'Aspen Street'],\n    'Number of hydrants': [10, 8, 9, 10, 10, 9, 10, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"The city recorded how many fire hydrants there are on each street. What is the mode of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of fire hydrants per street and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of fire hydrants per street.\n    The dataframe should contain \"Street\" and \"Number of hydrants\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the \"Number of hydrants\" column\n    hydrants = df['Number of hydrants']\n    \n    # Calculate the mode using the value_counts() function\n    mode = hydrants.value_counts().idxmax()\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Street': ['Rose Street', 'Pine Street', 'Maple Street', 'Fir Street', 'Lemon Street', 'Cherry Street', 'Elm Street', 'Aspen Street'],\n    'Number of hydrants': [10, 8, 9, 10, 10, 9, 10, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Fire hydrants\nUnit: None\nContent:\nStreet | Number of hydrants\nRose Street | 10\nPine Street | 8\nMaple Street | 9\nFir Street | 10\nLemon Street | 10\nCherry Street | 9\nElm Street | 10\nAspen Street | 9"}
{"level":1,"answer":60.0,"prediction":"import pandas as pd\n\ndef calculate_total_popsicles(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of popsicles per package and returns the total number of popsicles in a given number of packages.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of packages and the number of popsicles per package.\n    The dataframe should contain \"Number of packages\" and \"Number of popsicles\" columns.\n    Returns:\n    int: The total number of popsicles in the given number of packages.\n    \"\"\"\n    # Get the number of packages\n    num_packages = df['Number of packages'].max()\n    \n    # Get the number of popsicles per package\n    popsicles_per_package = df['Number of popsicles'].max()\n    \n    # Calculate the total number of popsicles\n    total_popsicles = num_packages * popsicles_per_package\n    \n    return total_popsicles\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of packages': [1, 2, 3, 4, 5, 6],\n    'Number of popsicles': [10, 20, 30, 40, 50, '?']\n})\n# Call the tool to solve the problem\nprint(calculate_total_popsicles(df))","question":"Each package has 10 popsicles. How many popsicles are in 6 packages?","prediction_code":"import pandas as pd\n\ndef calculate_total_popsicles(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of popsicles per package and returns the total number of popsicles in a given number of packages.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of packages and the number of popsicles per package.\n    The dataframe should contain \"Number of packages\" and \"Number of popsicles\" columns.\n    Returns:\n    int: The total number of popsicles in the given number of packages.\n    \"\"\"\n    # Get the number of packages\n    num_packages = df['Number of packages'].max()\n    \n    # Get the number of popsicles per package\n    popsicles_per_package = df['Number of popsicles'].max()\n    \n    # Calculate the total number of popsicles\n    total_popsicles = num_packages * popsicles_per_package\n    \n    return total_popsicles","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of packages': [1, 2, 3, 4, 5, 6],\n    'Number of popsicles': [10, 20, 30, 40, 50, '?']\n})\n# Call the tool to solve the problem\nprint(calculate_total_popsicles(df))","table":"Name: None\nUnit: popsicles\nContent:\nNumber of packages | Number of popsicles\n1 | 10\n2 | 20\n3 | 30\n4 | 40\n5 | 50\n6 | ?"}
{"level":7,"answer":2.0,"prediction":"import pandas as pd\n\ndef count_players_with_1_goal(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of soccer goals scored last season and returns the number of team members who scored exactly 1 goal.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of goals scored and their frequencies.\n    The dataframe should contain \"Goals scored\" and \"Frequency\" columns.\n    Returns:\n    int: The number of team members who scored exactly 1 goal last season.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of goals scored is 1\n    filtered_df = df[df['Goals scored'] == 1]\n    \n    # Get the frequency of players who scored exactly 1 goal\n    num_players = filtered_df['Frequency'].sum()\n    \n    return num_players\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Goals scored': [0, 1, 2, 3, 4],\n    'Frequency': [11, 2, 10, 6, 4]\n})\n# Call the tool to solve the problem\nprint(count_players_with_1_goal(df))","question":"The soccer coach is preparing for the upcoming season by seeing how many goals his team members scored last season. How many team members scored exactly 1 goal last season?","prediction_code":"import pandas as pd\n\ndef count_players_with_1_goal(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of soccer goals scored last season and returns the number of team members who scored exactly 1 goal.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of goals scored and their frequencies.\n    The dataframe should contain \"Goals scored\" and \"Frequency\" columns.\n    Returns:\n    int: The number of team members who scored exactly 1 goal last season.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of goals scored is 1\n    filtered_df = df[df['Goals scored'] == 1]\n    \n    # Get the frequency of players who scored exactly 1 goal\n    num_players = filtered_df['Frequency'].sum()\n    \n    return num_players","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Goals scored': [0, 1, 2, 3, 4],\n    'Frequency': [11, 2, 10, 6, 4]\n})\n# Call the tool to solve the problem\nprint(count_players_with_1_goal(df))","table":"Name: Soccer goals last season\nUnit: None\nContent:\nGoals scored | Frequency\n0 | 11\n1 | 2\n2 | 10\n3 | 6\n4 | 4"}
{"level":8,"answer":388.64,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of orders, and returns the total cost of the orders using pandas.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['pair of jeans', 'winter jacket', 'green sweatshirt', 'black jacket'],\n    'Price': [35.14, 47.36, 15.62, 23.66]\n})\n\n# Initialize the orders dictionary\norders = {\n    'black jacket': 9,\n    'pair of jeans': 5\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","question":"How much money does Philip need to buy 9 black jackets and 5 pairs of jeans?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of orders, and returns the total cost of the orders using pandas.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['pair of jeans', 'winter jacket', 'green sweatshirt', 'black jacket'],\n    'Price': [35.14, 47.36, 15.62, 23.66]\n})\n\n# Initialize the orders dictionary\norders = {\n    'black jacket': 9,\n    'pair of jeans': 5\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","table":"Name: None\nUnit: $\nContent:\npair of jeans | $35.14\nwinter jacket | $47.36\ngreen sweatshirt | $15.62\nblack jacket | $23.66"}
{"level":8,"answer":2.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of temperature at noon for 7 days and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the temperature at noon for 7 days.\n    The dataframe should contain \"Day\" and \"Temperature (\u00b0C)\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum temperature values\n    min_temp = df['Temperature (\u00b0C)'].min()\n    max_temp = df['Temperature (\u00b0C)'].max()\n    \n    # Calculate the range\n    temp_range = max_temp - min_temp\n    \n    return temp_range\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Temperature (\u00b0C)': [6, 5, 4, 5, 4, 5, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"Natalie graphed the temperature at noon for 7 days. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of temperature at noon for 7 days and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the temperature at noon for 7 days.\n    The dataframe should contain \"Day\" and \"Temperature (\u00b0C)\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum temperature values\n    min_temp = df['Temperature (\u00b0C)'].min()\n    max_temp = df['Temperature (\u00b0C)'].max()\n    \n    # Calculate the range\n    temp_range = max_temp - min_temp\n    \n    return temp_range","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Temperature (\u00b0C)': [6, 5, 4, 5, 4, 5, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Temperature at noon\nUnit: None\nContent:\nDay | Temperature (\u00c2\u00b0C)\nWednesday | 6\nThursday | 5\nFriday | 4\nSaturday | 5\nSunday | 4\nMonday | 5\nTuesday | 6"}
{"level":8,"answer":54.0,"prediction":"import pandas as pd\n\ndef count_customers(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of cookies eaten by each customer and returns the total number of customers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of cookies eaten by each customer.\n    The DataFrame should contain \"Cookies eaten\" and \"Frequency\" columns.\n    Returns:\n    int: The total number of customers.\n    \"\"\"\n    # Sum the frequencies to get the total number of customers\n    total_customers = df['Frequency'].sum()\n    \n    return total_customers\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Cookies eaten': [1, 2, 3, 4, 5],\n    'Frequency': [17, 12, 8, 7, 10]\n})\n# Call the tool to solve the problem\nprint(count_customers(df))","question":"Carrie counted the number of cookies eaten by each customer at last week's bake sale. How many customers are there in all?","prediction_code":"import pandas as pd\n\ndef count_customers(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of cookies eaten by each customer and returns the total number of customers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of cookies eaten by each customer.\n    The DataFrame should contain \"Cookies eaten\" and \"Frequency\" columns.\n    Returns:\n    int: The total number of customers.\n    \"\"\"\n    # Sum the frequencies to get the total number of customers\n    total_customers = df['Frequency'].sum()\n    \n    return total_customers","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Cookies eaten': [1, 2, 3, 4, 5],\n    'Frequency': [17, 12, 8, 7, 10]\n})\n# Call the tool to solve the problem\nprint(count_customers(df))","table":"Name: Eating cookies last week\nUnit: None\nContent:\nCookies eaten | Frequency\n1 | 17\n2 | 12\n3 | 8\n4 | 7\n5 | 10"}
{"level":5,"answer":45.0,"prediction":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of cherries sold and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of kilograms of cherries sold.\n    The dataframe should contain \"Day\" and \"Kilograms\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Kilograms\" column\n    mean = df['Kilograms'].mean()\n    \n    return mean\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Kilograms': [51, 44, 43, 42, 43, 47]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","question":"A farmer wrote down how many kilograms of cherries were sold in the past 6 days. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of cherries sold and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of kilograms of cherries sold.\n    The dataframe should contain \"Day\" and \"Kilograms\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Kilograms\" column\n    mean = df['Kilograms'].mean()\n    \n    return mean","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Kilograms': [51, 44, 43, 42, 43, 47]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","table":"Name: Cherries sold\nUnit: None\nContent:\nDay | Kilograms\nSunday | 51\nMonday | 44\nTuesday | 43\nWednesday | 42\nThursday | 43\nFriday | 47"}
{"level":8,"answer":21.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of items, and returns the total cost of the items using pandas.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the items and their prices with columns 'Item' and 'Price'.\n    items (dict): A dictionary where the keys are item names and the values are the quantities of each item.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item, quantity in items.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['crystal beads', 'metal beads', 'ceramic beads', 'paper beads'],\n    'Price': [7, 7, 11, 6]\n})\n\n# Initialize the items dictionary\nitems = {\n    'metal beads': 1,\n    'crystal beads': 2\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"If Mia buys 1 pound of metal beads and 2 pounds of crystal beads, how much will she spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of items, and returns the total cost of the items using pandas.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the items and their prices with columns 'Item' and 'Price'.\n    items (dict): A dictionary where the keys are item names and the values are the quantities of each item.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item, quantity in items.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['crystal beads', 'metal beads', 'ceramic beads', 'paper beads'],\n    'Price': [7, 7, 11, 6]\n})\n\n# Initialize the items dictionary\nitems = {\n    'metal beads': 1,\n    'crystal beads': 2\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\ncrystal beads | $7 per pound\nmetal beads | $7 per pound\nceramic beads | $11 per pound\npaper beads | $6 per pound"}
{"level":5,"answer":71.0,"prediction":"import pandas as pd\nfrom statistics import mode\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of ice cream cones sold and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of ice cream cones sold.\n    The dataframe should contain \"Day\" and \"Number of ice cream cones\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of ice cream cones']\n    \n    # Calculate the mode\n    mode_value = mode(numbers)\n    \n    return mode_value\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Number of ice cream cones': [76, 76, 71, 71, 71]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"An ice cream shop kept track of how many ice cream cones it sold in the past 5 days. What is the mode of the numbers?","prediction_code":"import pandas as pd\nfrom statistics import mode\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of ice cream cones sold and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of ice cream cones sold.\n    The dataframe should contain \"Day\" and \"Number of ice cream cones\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of ice cream cones']\n    \n    # Calculate the mode\n    mode_value = mode(numbers)\n    \n    return mode_value","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Number of ice cream cones': [76, 76, 71, 71, 71]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Ice cream cones sold\nUnit: None\nContent:\nDay | Number of ice cream cones\nSunday | 76\nMonday | 76\nTuesday | 71\nWednesday | 71\nThursday | 71"}
{"level":6,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on the quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price of the item\n    price = item_df['Price'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price * quantity\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['Bhutanese red rice', 'sticky rice', 'African rice', 'white rice'],\n    'Price': [3, 2, 2, 3]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'sticky rice', 2.5))","question":"Abigail wants to buy 2+1\/2 kilograms of sticky rice. How much will she spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on the quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price of the item\n    price = item_df['Price'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price * quantity\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['Bhutanese red rice', 'sticky rice', 'African rice', 'white rice'],\n    'Price': [3, 2, 2, 3]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'sticky rice', 2.5))","table":"Name: None\nUnit: $\nContent:\nBhutanese red rice | $3 per kilogram\nsticky rice | $2 per kilogram\nAfrican rice | $2 per kilogram\nwhite rice | $3 per kilogram"}
{"level":7,"answer":253.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of items, and returns the total cost of the items using pandas.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (dict): A dictionary where the keys are item names and the values are the number of items to buy.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item, quantity in items.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['red sweater', 'pair of shoes', 'denim skirt', 'winter jacket'],\n    'Price': [19.00, 10.00, 20.00, 50.00]\n})\n\n# Initialize the items dictionary\nitems = {\n    'red sweater': 7,\n    'denim skirt': 6\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Leslie need to buy 6 denim skirts and 7 red sweaters?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of items, and returns the total cost of the items using pandas.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (dict): A dictionary where the keys are item names and the values are the number of items to buy.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item, quantity in items.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['red sweater', 'pair of shoes', 'denim skirt', 'winter jacket'],\n    'Price': [19.00, 10.00, 20.00, 50.00]\n})\n\n# Initialize the items dictionary\nitems = {\n    'red sweater': 7,\n    'denim skirt': 6\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nred sweater | $19.00\npair of shoes | $10.00\ndenim skirt | $20.00\nwinter jacket | $50.00"}
{"level":4,"answer":68.0,"prediction":"import pandas as pd\n\ndef find_highest_score(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of spelling test scores and returns the highest score.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the spelling test scores.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The highest score from the spelling test.\n    \"\"\"\n    # Initialize the highest score\n    highest_score = 0\n    \n    # Iterate through the rows of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            score = stem * 10 + leaf[j]\n            if score > highest_score:\n                highest_score = score\n    \n    return highest_score\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6],\n    'Leaf': [[0, 6], [0, 0, 3, 5], [], [0], [7, 8, 8]]\n})\n# Call the tool to solve the problem\nprint(find_highest_score(df))","question":"This morning, Mr. Nelson released the scores from last week's spelling test. What is the highest score?","prediction_code":"import pandas as pd\n\ndef find_highest_score(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of spelling test scores and returns the highest score.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the spelling test scores.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The highest score from the spelling test.\n    \"\"\"\n    # Initialize the highest score\n    highest_score = 0\n    \n    # Iterate through the rows of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            score = stem * 10 + leaf[j]\n            if score > highest_score:\n                highest_score = score\n    \n    return highest_score","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6],\n    'Leaf': [[0, 6], [0, 0, 3, 5], [], [0], [7, 8, 8]]\n})\n# Call the tool to solve the problem\nprint(find_highest_score(df))","table":"Name: Spelling test scores\nUnit: points\nContent:\nStem | Leaf \n2 | 0, 6\n3 | 0, 0, 3, 5\n4 | \n5 | 0\n6 | 7, 8, 8"}
{"level":5,"answer":12.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of quiz show scores and returns the range of the scores.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the quiz show scores.\n    The dataframe should contain \"Name\" and \"Score\" columns.\n    Returns:\n    int: The range of the scores.\n    \"\"\"\n    # Get the minimum and maximum scores\n    min_score = df['Score'].min()\n    max_score = df['Score'].max()\n    \n    # Calculate the range\n    score_range = max_score - min_score\n    \n    return score_range\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Joey', 'Sean', 'Helen', 'Eli', 'Allie'],\n    'Score': [30, 21, 29, 25, 18]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"The players on a quiz show received the following scores. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of quiz show scores and returns the range of the scores.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the quiz show scores.\n    The dataframe should contain \"Name\" and \"Score\" columns.\n    Returns:\n    int: The range of the scores.\n    \"\"\"\n    # Get the minimum and maximum scores\n    min_score = df['Score'].min()\n    max_score = df['Score'].max()\n    \n    # Calculate the range\n    score_range = max_score - min_score\n    \n    return score_range","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Joey', 'Sean', 'Helen', 'Eli', 'Allie'],\n    'Score': [30, 21, 29, 25, 18]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Quiz show scores\nUnit: None\nContent:\nName | Score\nJoey | 30\nSean | 21\nHelen | 29\nEli | 25\nAllie | 18"}
{"level":7,"answer":13.89,"prediction":"import pandas as pd\n\ndef calculate_total_cost(menu_df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the menu items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = menu_df[menu_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['green salad', 'eggplant parmesan', 'pepperoni pizza', 'pasta with mushrooms', 'lasagna', 'spaghetti and meatballs'],\n    'Price': [5.28, 9.81, 5.26, 8.23, 5.24, 5.66]\n})\n\n# Initialize the orders dictionary\norders = {\n    'spaghetti and meatballs': 1,\n    'pasta with mushrooms': 1\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","question":"How much money does Wesley need to buy spaghetti and meatballs and pasta with mushrooms?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(menu_df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the menu items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = menu_df[menu_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['green salad', 'eggplant parmesan', 'pepperoni pizza', 'pasta with mushrooms', 'lasagna', 'spaghetti and meatballs'],\n    'Price': [5.28, 9.81, 5.26, 8.23, 5.24, 5.66]\n})\n\n# Initialize the orders dictionary\norders = {\n    'spaghetti and meatballs': 1,\n    'pasta with mushrooms': 1\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","table":"Name: None\nUnit: $\nContent:\ngreen salad | $5.28\neggplant parmesan | $9.81\npepperoni pizza | $5.26\npasta with mushrooms | $8.23\nlasagna | $5.24\nspaghetti and meatballs | $5.66"}
{"level":8,"answer":13.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, month1, month2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average waiting time at the DMV and two months, and returns the rate of change between the two months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average waiting time at the DMV with columns 'Month' and 'Waiting time (minutes)'.\n    month1 (str): The first month for calculating the rate of change.\n    month2 (str): The second month for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two months.\n    \"\"\"\n    # Filter the DataFrame for the two months\n    month1_df = df[df['Month'] == month1]\n    month2_df = df[df['Month'] == month2]\n    \n    # Get the waiting time for each month\n    waiting_time1 = month1_df['Waiting time (minutes)'].values[0]\n    waiting_time2 = month2_df['Waiting time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (waiting_time2 - waiting_time1) \/ waiting_time1\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['June', 'July', 'August', 'September', 'October'],\n    'Waiting time (minutes)': [32, 39, 42, 33, 46]\n})\n\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'September', 'October'))","question":"An administrator at the Department of Motor Vehicles (DMV) tracked the average wait time from month to month. According to the table, what was the rate of change between September and October?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, month1, month2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average waiting time at the DMV and two months, and returns the rate of change between the two months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average waiting time at the DMV with columns 'Month' and 'Waiting time (minutes)'.\n    month1 (str): The first month for calculating the rate of change.\n    month2 (str): The second month for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two months.\n    \"\"\"\n    # Filter the DataFrame for the two months\n    month1_df = df[df['Month'] == month1]\n    month2_df = df[df['Month'] == month2]\n    \n    # Get the waiting time for each month\n    waiting_time1 = month1_df['Waiting time (minutes)'].values[0]\n    waiting_time2 = month2_df['Waiting time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (waiting_time2 - waiting_time1) \/ waiting_time1\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['June', 'July', 'August', 'September', 'October'],\n    'Waiting time (minutes)': [32, 39, 42, 33, 46]\n})\n\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'September', 'October'))","table":"Name: Average waiting time at the DMV\nUnit: minutes per month\nContent:\nMonth | Waiting time (minutes)\nJune | 32\nJuly | 39\nAugust | 42\nSeptember | 33\nOctober | 46"}
{"level":5,"answer":2.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of people interviewed and returns the range of the numbers of people interviewed in the past 5 days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of people interviewed per day.\n    The dataframe should contain \"Day\" and \"Number of people\" columns.\n    Returns:\n    int: The range of the numbers of people interviewed in the past 5 days.\n    \"\"\"\n    # Filter the DataFrame for the past 5 days\n    past_5_days_df = df.tail(5)\n    \n    # Get the maximum and minimum number of people interviewed in the past 5 days\n    max_people = past_5_days_df['Number of people'].max()\n    min_people = past_5_days_df['Number of people'].min()\n    \n    # Calculate the range\n    range_of_people = max_people - min_people\n    \n    return range_of_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday'],\n    'Number of people': [13, 13, 14, 13, 15]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"A reporter looked through his notebook to remember how many people he had interviewed in the past 5 days. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of people interviewed and returns the range of the numbers of people interviewed in the past 5 days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of people interviewed per day.\n    The dataframe should contain \"Day\" and \"Number of people\" columns.\n    Returns:\n    int: The range of the numbers of people interviewed in the past 5 days.\n    \"\"\"\n    # Filter the DataFrame for the past 5 days\n    past_5_days_df = df.tail(5)\n    \n    # Get the maximum and minimum number of people interviewed in the past 5 days\n    max_people = past_5_days_df['Number of people'].max()\n    min_people = past_5_days_df['Number of people'].min()\n    \n    # Calculate the range\n    range_of_people = max_people - min_people\n    \n    return range_of_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday'],\n    'Number of people': [13, 13, 14, 13, 15]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: People interviewed\nUnit: None\nContent:\nDay | Number of people\nSaturday | 13\nSunday | 13\nMonday | 14\nTuesday | 13\nWednesday | 15"}
{"level":5,"answer":6.56,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['navy blue bath mat', 'quilt', 'fleece blanket', 'yellow bath towel', 'pillow'],\n    'Price': [17.00, 32.14, 12.28, 19.01, 10.44]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'navy blue bath mat', 'pillow'))","question":"How much more does a navy blue bath mat cost than a pillow?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['navy blue bath mat', 'quilt', 'fleece blanket', 'yellow bath towel', 'pillow'],\n    'Price': [17.00, 32.14, 12.28, 19.01, 10.44]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'navy blue bath mat', 'pillow'))","table":"Name: None\nUnit: $\nContent:\nnavy blue bath mat | $17.00\nquilt | $32.14\nfleece blanket | $12.28\nyellow bath towel | $19.01\npillow | $10.44"}
{"level":4,"answer":7212.0,"prediction":"import pandas as pd\n\ndef calculate_remaining_money(df, budget, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, a budget, and a list of items to buy.\n    It returns the remaining money after buying the specified items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    budget (float): The initial budget.\n    items (list): A list of items to buy.\n    Returns:\n    float: The remaining money after buying the specified items.\n    \"\"\"\n    # Initialize the remaining money\n    remaining_money = budget\n    \n    # Iterate through the items and subtract their prices from the remaining money\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            remaining_money -= item_price\n    \n    return remaining_money\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['python', 'macaw', 'kinkajou', 'boa constrictor', 'cockatiel'],\n    'Price': [1904.00, 8236.00, 3940.00, 1431.00, 1089.00]\n})\n\n# Set the initial budget\nbudget = 12583.00\n\n# Set the items to buy\nitems = ['boa constrictor', 'kinkajou']\n\n# Call the tool to solve the problem\nremaining_money = calculate_remaining_money(df, budget, items)\n\n# Print out the answer\nprint(remaining_money)","question":"Janice has $12,583.00. How much money will Janice have left if she buys a boa constrictor and a kinkajou?","prediction_code":"import pandas as pd\n\ndef calculate_remaining_money(df, budget, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, a budget, and a list of items to buy.\n    It returns the remaining money after buying the specified items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    budget (float): The initial budget.\n    items (list): A list of items to buy.\n    Returns:\n    float: The remaining money after buying the specified items.\n    \"\"\"\n    # Initialize the remaining money\n    remaining_money = budget\n    \n    # Iterate through the items and subtract their prices from the remaining money\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            remaining_money -= item_price\n    \n    return remaining_money","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['python', 'macaw', 'kinkajou', 'boa constrictor', 'cockatiel'],\n    'Price': [1904.00, 8236.00, 3940.00, 1431.00, 1089.00]\n})\n\n# Set the initial budget\nbudget = 12583.00\n\n# Set the items to buy\nitems = ['boa constrictor', 'kinkajou']\n\n# Call the tool to solve the problem\nremaining_money = calculate_remaining_money(df, budget, items)\n\n# Print out the answer\nprint(remaining_money)","table":"Name: None\nUnit: $\nContent:\npython | $1,904.00\nmacaw | $8,236.00\nkinkajou | $3,940.00\nboa constrictor | $1,431.00\ncockatiel | $1,089.00"}
{"level":5,"answer":3.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of hot dogs sold each day and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of hot dogs sold each day.\n    The DataFrame should have columns 'Day' and 'Number of hot dogs'.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the maximum and minimum values of the 'Number of hot dogs' column\n    max_value = df['Number of hot dogs'].max()\n    min_value = df['Number of hot dogs'].min()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Number of hot dogs': [12, 12, 11, 13, 10, 10, 10]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"A hot dog stand kept track of the number of hot dogs sold each day. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of hot dogs sold each day and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of hot dogs sold each day.\n    The DataFrame should have columns 'Day' and 'Number of hot dogs'.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the maximum and minimum values of the 'Number of hot dogs' column\n    max_value = df['Number of hot dogs'].max()\n    min_value = df['Number of hot dogs'].min()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Number of hot dogs': [12, 12, 11, 13, 10, 10, 10]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Hot dogs sold\nUnit: None\nContent:\nDay | Number of hot dogs\nSaturday | 12\nSunday | 12\nMonday | 11\nTuesday | 13\nWednesday | 10\nThursday | 10\nFriday | 10"}
{"level":3,"answer":835.0,"prediction":"import pandas as pd\n\ndef calculate_total_attendance(df, days):\n    \"\"\"\n    This function takes in a pandas DataFrame of tickets sold and a list of days, and returns the total attendance on those days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of tickets sold per day with columns 'Day' and 'Number of tickets'.\n    days (list): A list of days for which the attendance needs to be calculated.\n    Returns:\n    int: The total attendance on the specified days.\n    \"\"\"\n    # Filter the DataFrame for the specified days\n    filtered_df = df[df['Day'].isin(days)]\n    \n    # Calculate the total attendance\n    total_attendance = filtered_df['Number of tickets'].sum()\n    \n    return total_attendance\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Thursday', 'Friday', 'Saturday'],\n    'Number of tickets': [219, 350, 485]\n})\n\n# Specify the days for which the attendance needs to be calculated\ndays = ['Friday', 'Saturday']\n\n# Call the tool to solve the problem\nprint(calculate_total_attendance(df, days))","question":"Eric tracked the attendance at the school play. How many people in total attended the play on Friday and Saturday?","prediction_code":"import pandas as pd\n\ndef calculate_total_attendance(df, days):\n    \"\"\"\n    This function takes in a pandas DataFrame of tickets sold and a list of days, and returns the total attendance on those days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of tickets sold per day with columns 'Day' and 'Number of tickets'.\n    days (list): A list of days for which the attendance needs to be calculated.\n    Returns:\n    int: The total attendance on the specified days.\n    \"\"\"\n    # Filter the DataFrame for the specified days\n    filtered_df = df[df['Day'].isin(days)]\n    \n    # Calculate the total attendance\n    total_attendance = filtered_df['Number of tickets'].sum()\n    \n    return total_attendance","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Thursday', 'Friday', 'Saturday'],\n    'Number of tickets': [219, 350, 485]\n})\n\n# Specify the days for which the attendance needs to be calculated\ndays = ['Friday', 'Saturday']\n\n# Call the tool to solve the problem\nprint(calculate_total_attendance(df, days))","table":"Name: Tickets sold\nUnit: people\nContent:\nDay | Number of tickets\nThursday | 219\nFriday | 350\nSaturday | 485"}
{"level":8,"answer":2.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of autographs signed per day and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of autographs signed per day.\n    The dataframe should contain \"Day\" and \"Number of autographs\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the maximum and minimum values of the \"Number of autographs\" column\n    max_value = df['Number of autographs'].max()\n    min_value = df['Number of autographs'].min()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday'],\n    'Number of autographs': [9, 8, 7, 9, 7, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"An athlete counted how many autographs he signed each day. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of autographs signed per day and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of autographs signed per day.\n    The dataframe should contain \"Day\" and \"Number of autographs\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the maximum and minimum values of the \"Number of autographs\" column\n    max_value = df['Number of autographs'].max()\n    min_value = df['Number of autographs'].min()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday'],\n    'Number of autographs': [9, 8, 7, 9, 7, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Autographs signed\nUnit: None\nContent:\nDay | Number of autographs\nFriday | 9\nSaturday | 8\nSunday | 7\nMonday | 9\nTuesday | 7\nWednesday | 9"}
{"level":4,"answer":2.0,"prediction":"import pandas as pd\n\ndef count_restaurants_with_50_rating(df):\n    \"\"\"\n    This function takes in a pandas dataframe of restaurant ratings and returns the number of restaurants that were rated exactly 50 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the restaurant ratings.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of restaurants that were rated exactly 50 points.\n    \"\"\"\n    # prepare a list to store the ratings\n    ratings = []\n    # iterate through the dataframe and extract the ratings\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            ratings.append(stem * 10 + leaf[j])\n    # count the number of restaurants with a rating of 50\n    num_restaurants = ratings.count(50)\n    return num_restaurants\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5],\n    'Leaf': [[1, 6, 7], [1], [3], [8], [0, 0]]\n})\n# Call the tool to solve the problem\nprint(count_restaurants_with_50_rating(df))","question":"A food magazine published a listing of local restaurant ratings. How many restaurants were rated exactly 50 points?","prediction_code":"import pandas as pd\n\ndef count_restaurants_with_50_rating(df):\n    \"\"\"\n    This function takes in a pandas dataframe of restaurant ratings and returns the number of restaurants that were rated exactly 50 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the restaurant ratings.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of restaurants that were rated exactly 50 points.\n    \"\"\"\n    # prepare a list to store the ratings\n    ratings = []\n    # iterate through the dataframe and extract the ratings\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            ratings.append(stem * 10 + leaf[j])\n    # count the number of restaurants with a rating of 50\n    num_restaurants = ratings.count(50)\n    return num_restaurants","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5],\n    'Leaf': [[1, 6, 7], [1], [3], [8], [0, 0]]\n})\n# Call the tool to solve the problem\nprint(count_restaurants_with_50_rating(df))","table":"Name: Restaurant ratings\nUnit: None\nContent:\nStem | Leaf \n1 | 1, 6, 7\n2 | 1\n3 | 3\n4 | 8\n5 | 0, 0"}
{"level":4,"answer":0.0,"prediction":"import pandas as pd\n\ndef count_schools_with_44_classrooms(df):\n    \"\"\"\n    This function takes in a pandas dataframe of classrooms per school, and returns the number of schools that have exactly 44 classrooms.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of classrooms per school.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of schools that have exactly 44 classrooms.\n    \"\"\"\n    # prepare a list to calculate the number of classrooms in each school\n    classrooms = []\n    # calculate the total number of classrooms in each school\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            classrooms.append(stem * 10 + leaf[j])\n    # filter the schools where the total number of classrooms is equal to 44\n    filtered = [classroom for classroom in classrooms if classroom == 44]\n    # count the number of schools\n    num_schools = len(filtered)\n    return num_schools\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7],\n    'Leaf': [[0, 3, 5, 5, 7, 9], [6, 7], [3, 8], [0, 2, 4, 8, 9]]\n})\n# Call the tool to solve the problem\nprint(count_schools_with_44_classrooms(df))","question":"For a social studies project, Irma counted the number of classrooms in each school in the city. How many schools have exactly 44 classrooms?","prediction_code":"import pandas as pd\n\ndef count_schools_with_44_classrooms(df):\n    \"\"\"\n    This function takes in a pandas dataframe of classrooms per school, and returns the number of schools that have exactly 44 classrooms.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of classrooms per school.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of schools that have exactly 44 classrooms.\n    \"\"\"\n    # prepare a list to calculate the number of classrooms in each school\n    classrooms = []\n    # calculate the total number of classrooms in each school\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            classrooms.append(stem * 10 + leaf[j])\n    # filter the schools where the total number of classrooms is equal to 44\n    filtered = [classroom for classroom in classrooms if classroom == 44]\n    # count the number of schools\n    num_schools = len(filtered)\n    return num_schools","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7],\n    'Leaf': [[0, 3, 5, 5, 7, 9], [6, 7], [3, 8], [0, 2, 4, 8, 9]]\n})\n# Call the tool to solve the problem\nprint(count_schools_with_44_classrooms(df))","table":"Name: Classrooms per school\nUnit: None\nContent:\nStem | Leaf \n4 | 0, 3, 5, 5, 7, 9\n5 | 6, 7\n6 | 3, 8\n7 | 0, 2, 4, 8, 9"}
{"level":5,"answer":65.0,"prediction":"import pandas as pd\n\ndef find_smallest_number_of_words(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of words per page and returns the smallest number of words.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of words per page.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of words.\n    \"\"\"\n    # Create a list to store all the words\n    words = []\n    \n    # Iterate through each row of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Convert the leaf values to integers and add them to the words list\n        for j in range(len(leaf)):\n            words.append(stem * 10 + leaf[j])\n    \n    # Find the smallest number of words\n    smallest_words = min(words)\n    \n    return smallest_words\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [6, 7, 8, 9],\n    'Leaf': [[5, 6, 9], [1, 2, 4, 9], [3, 3, 4, 8, 8], [0]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_words(df))","question":"Riley counted the number of words per page in her new book. What is the smallest number of words?","prediction_code":"import pandas as pd\n\ndef find_smallest_number_of_words(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of words per page and returns the smallest number of words.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of words per page.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of words.\n    \"\"\"\n    # Create a list to store all the words\n    words = []\n    \n    # Iterate through each row of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Convert the leaf values to integers and add them to the words list\n        for j in range(len(leaf)):\n            words.append(stem * 10 + leaf[j])\n    \n    # Find the smallest number of words\n    smallest_words = min(words)\n    \n    return smallest_words","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [6, 7, 8, 9],\n    'Leaf': [[5, 6, 9], [1, 2, 4, 9], [3, 3, 4, 8, 8], [0]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_words(df))","table":"Name: Words per page\nUnit: words\nContent:\nStem | Leaf \n6 | 5, 6, 9\n7 | 1, 2, 4, 9\n8 | 3, 3, 4, 8, 8\n9 | 0"}
{"level":5,"answer":0.0,"prediction":"import pandas as pd\n\ndef count_shipments_with_56_boxes(df):\n    \"\"\"\n    This function takes in a pandas dataframe of boxes per shipment, and returns the number of shipments that have exactly 56 boxes.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of boxes per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of shipments that have exactly 56 boxes.\n    \"\"\"\n    # prepare a list to calculate the number of boxes in each shipment\n    boxes = []\n    # calculate the total number of boxes in each shipment\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            boxes.append(stem * 10 + leaf[j])\n    # filter the shipments where the total number of boxes is equal to 56\n    filtered = [box for box in boxes if box == 56]\n    # count the number of shipments\n    num_shipments = len(filtered)\n    return num_shipments\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6],\n    'Leaf': [[9], [6], [4, 9], [1, 9], [0, 3, 9], [4, 8]]\n})\n# Call the tool to solve the problem\nprint(count_shipments_with_56_boxes(df))","question":"A shipping company keeps track of the number of boxes in each shipment they send out. How many shipments had exactly 56 boxes?","prediction_code":"import pandas as pd\n\ndef count_shipments_with_56_boxes(df):\n    \"\"\"\n    This function takes in a pandas dataframe of boxes per shipment, and returns the number of shipments that have exactly 56 boxes.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of boxes per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of shipments that have exactly 56 boxes.\n    \"\"\"\n    # prepare a list to calculate the number of boxes in each shipment\n    boxes = []\n    # calculate the total number of boxes in each shipment\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            boxes.append(stem * 10 + leaf[j])\n    # filter the shipments where the total number of boxes is equal to 56\n    filtered = [box for box in boxes if box == 56]\n    # count the number of shipments\n    num_shipments = len(filtered)\n    return num_shipments","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6],\n    'Leaf': [[9], [6], [4, 9], [1, 9], [0, 3, 9], [4, 8]]\n})\n# Call the tool to solve the problem\nprint(count_shipments_with_56_boxes(df))","table":"Name: Boxes per shipment\nUnit: shipments\nContent:\nStem | Leaf \n1 | 9\n2 | 6\n3 | 4, 9\n4 | 1, 9\n5 | 0, 3, 9\n6 | 4, 8"}
{"level":5,"answer":84.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(table, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table and a list of items, and returns the total cost of the items.\n    Args:\n    table (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost for.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = table[table['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['football ticket', 'hockey ticket', 'basketball ticket', 'baseball ticket'],\n    'Price': [21.00, 63.00, 21.00, 82.00]\n})\n\n# Define the items to calculate the total cost for\nitems = ['football ticket', 'hockey ticket']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Darnel need to buy a football ticket and a hockey ticket?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(table, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table and a list of items, and returns the total cost of the items.\n    Args:\n    table (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost for.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = table[table['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['football ticket', 'hockey ticket', 'basketball ticket', 'baseball ticket'],\n    'Price': [21.00, 63.00, 21.00, 82.00]\n})\n\n# Define the items to calculate the total cost for\nitems = ['football ticket', 'hockey ticket']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nfootball ticket | $21.00\nhockey ticket | $63.00\nbasketball ticket | $21.00\nbaseball ticket | $82.00"}
{"level":3,"answer":7423.0,"prediction":"import pandas as pd\n\ndef calculate_total_sheets(df, days):\n    \"\"\"\n    This function takes in a pandas DataFrame of sheets of paper used and a list of days, and returns the total number of sheets of paper used on those days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of sheets of paper used with columns 'Day' and 'Number of sheets of paper'.\n    days (list): A list of days for which the total number of sheets of paper used is to be calculated.\n    Returns:\n    int: The total number of sheets of paper used on the specified days.\n    \"\"\"\n    # Filter the DataFrame for the specified days\n    filtered_df = df[df['Day'].isin(days)]\n    \n    # Calculate the total number of sheets of paper used on the specified days\n    total_sheets = filtered_df['Number of sheets of paper'].sum()\n    \n    return total_sheets\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of sheets of paper': [6091, 2066, 2038, 1332, 2103]\n})\n\n# Specify the days for which the total number of sheets of paper used is to be calculated\ndays = ['Tuesday', 'Friday']\n\n# Call the tool to solve the problem\nprint(calculate_total_sheets(df, days))","question":"A printing shop kept a log of how many sheets of paper were used in the past 5 days. How many sheets of paper in total did the printing shop use on Tuesday and Friday?","prediction_code":"import pandas as pd\n\ndef calculate_total_sheets(df, days):\n    \"\"\"\n    This function takes in a pandas DataFrame of sheets of paper used and a list of days, and returns the total number of sheets of paper used on those days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of sheets of paper used with columns 'Day' and 'Number of sheets of paper'.\n    days (list): A list of days for which the total number of sheets of paper used is to be calculated.\n    Returns:\n    int: The total number of sheets of paper used on the specified days.\n    \"\"\"\n    # Filter the DataFrame for the specified days\n    filtered_df = df[df['Day'].isin(days)]\n    \n    # Calculate the total number of sheets of paper used on the specified days\n    total_sheets = filtered_df['Number of sheets of paper'].sum()\n    \n    return total_sheets","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of sheets of paper': [6091, 2066, 2038, 1332, 2103]\n})\n\n# Specify the days for which the total number of sheets of paper used is to be calculated\ndays = ['Tuesday', 'Friday']\n\n# Call the tool to solve the problem\nprint(calculate_total_sheets(df, days))","table":"Name: Sheets of paper used\nUnit: sheets of paper\nContent:\nDay | Number of sheets of paper\nTuesday | 6,091\nWednesday | 2,066\nThursday | 2,038\nFriday | 1,332\nSaturday | 2,103"}
{"level":4,"answer":16.0,"prediction":"import pandas as pd\n\ndef count_gardens_with_20_plants(df):\n    \"\"\"\n    This function takes in a pandas dataframe of plants per garden, and returns the number of gardens that have at least 20 plants.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of plants per garden.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of gardens that have at least 20 plants.\n    \"\"\"\n    # prepare a list to calculate the number of plants in each garden\n    plants = []\n    # calculate the total number of plants in each garden\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        plants.append(stem + len(leaf))\n    # filter the gardens where the total number of plants is greater than or equal to 20\n    filtered = [plant for plant in plants if plant >= 20]\n    # count the number of rows\n    num_gardens = len(filtered)\n    return num_gardens\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[1, 3, 4, 7, 8, 9], [], [5], [2, 8, 8], [4, 5], [2, 3, 7, 8], [7], [1, 2, 3, 6, 7]]\n})\n# Call the tool to solve the problem\nprint(count_gardens_with_20_plants(df))","question":"The members of the local garden club tallied the number of plants in each person's garden. How many gardens have at least 20 plants?","prediction_code":"import pandas as pd\n\ndef count_gardens_with_20_plants(df):\n    \"\"\"\n    This function takes in a pandas dataframe of plants per garden, and returns the number of gardens that have at least 20 plants.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of plants per garden.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of gardens that have at least 20 plants.\n    \"\"\"\n    # prepare a list to calculate the number of plants in each garden\n    plants = []\n    # calculate the total number of plants in each garden\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        plants.append(stem + len(leaf))\n    # filter the gardens where the total number of plants is greater than or equal to 20\n    filtered = [plant for plant in plants if plant >= 20]\n    # count the number of rows\n    num_gardens = len(filtered)\n    return num_gardens","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[1, 3, 4, 7, 8, 9], [], [5], [2, 8, 8], [4, 5], [2, 3, 7, 8], [7], [1, 2, 3, 6, 7]]\n})\n# Call the tool to solve the problem\nprint(count_gardens_with_20_plants(df))","table":"Name: Plants per garden\nUnit: None\nContent:\nStem | Leaf \n1 | 1, 3, 4, 7, 8, 9\n2 | \n3 | 5\n4 | 2, 8, 8\n5 | 4, 5\n6 | 2, 3, 7, 8\n7 | 7\n8 | 1, 2, 3, 6, 7"}
{"level":5,"answer":43.0,"prediction":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of sports team membership and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the sports team names and the number of members.\n    The DataFrame should have columns 'Team' and 'Number of members'.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the 'Number of members' column\n    mean = df['Number of members'].mean()\n    \n    return mean\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Team': ['wrestling team', 'volleyball team', 'basketball team', 'softball team', 'track team'],\n    'Number of members': [37, 50, 31, 48, 49]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","question":"Megan's school reported how many members each sports team had. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of sports team membership and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the sports team names and the number of members.\n    The DataFrame should have columns 'Team' and 'Number of members'.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the 'Number of members' column\n    mean = df['Number of members'].mean()\n    \n    return mean","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Team': ['wrestling team', 'volleyball team', 'basketball team', 'softball team', 'track team'],\n    'Number of members': [37, 50, 31, 48, 49]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","table":"Name: Sports team membership\nUnit: None\nContent:\nTeam | Number of members\nwrestling team | 37\nvolleyball team | 50\nbasketball team | 31\nsoftball team | 48\ntrack team | 49"}
{"level":7,"answer":1.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of voicemail messages per day and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of voicemail messages per day.\n    The dataframe should contain \"Day\" and \"Voicemail messages\" columns.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Get the number of voicemail messages for the two days\n    messages_day1 = df[df['Day'] == day1]['Voicemail messages'].values[0]\n    messages_day2 = df[df['Day'] == day2]['Voicemail messages'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (messages_day2 - messages_day1) \/ (df.index[df['Day'] == day2][0] - df.index[df['Day'] == day1][0])\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Voicemail messages': [18, 19, 18, 20, 23]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Sunday', 'Monday'))","question":"Worried about going over her storage limit, Celine monitored the number of undeleted voicemail messages stored on her phone each day. According to the table, what was the rate of change between Sunday and Monday?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of voicemail messages per day and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of voicemail messages per day.\n    The dataframe should contain \"Day\" and \"Voicemail messages\" columns.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Get the number of voicemail messages for the two days\n    messages_day1 = df[df['Day'] == day1]['Voicemail messages'].values[0]\n    messages_day2 = df[df['Day'] == day2]['Voicemail messages'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (messages_day2 - messages_day1) \/ (df.index[df['Day'] == day2][0] - df.index[df['Day'] == day1][0])\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Voicemail messages': [18, 19, 18, 20, 23]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Sunday', 'Monday'))","table":"Name: Voicemail messages on Celine's phone\nUnit: voicemail messages per day\nContent:\nDay | Voicemail messages\nSunday | 18\nMonday | 19\nTuesday | 18\nWednesday | 20\nThursday | 23"}
{"level":4,"answer":0.62,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item2_price - item1_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['miniature deck of cards', 'rubber duck', 'plastic horse', 'green marble'],\n    'Price': [0.93, 0.90, 0.57, 0.28]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'rubber duck', 'green marble'))","question":"How much more does a rubber duck cost than a green marble?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item2_price - item1_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['miniature deck of cards', 'rubber duck', 'plastic horse', 'green marble'],\n    'Price': [0.93, 0.90, 0.57, 0.28]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'rubber duck', 'green marble'))","table":"Name: None\nUnit: $\nContent:\nminiature deck of cards | $0.93\nrubber duck | $0.90\nplastic horse | $0.57\ngreen marble | $0.28"}
{"level":3,"answer":578.0,"prediction":"import pandas as pd\n\ndef count_trees_planted(df, organizations):\n    \"\"\"\n    This function takes in a pandas DataFrame of trees planted by different organizations and a list of organizations, and returns the total number of trees planted by the specified organizations.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the organization names and the number of trees planted by each organization.\n    The DataFrame should have columns 'Organization' and 'Number of trees planted'.\n    organizations (list): A list of organization names.\n    Returns:\n    int: The total number of trees planted by the specified organizations.\n    \"\"\"\n    # Filter the DataFrame for the specified organizations\n    filtered_df = df[df['Organization'].isin(organizations)]\n    \n    # Calculate the total number of trees planted by the specified organizations\n    total_trees_planted = filtered_df['Number of trees planted'].sum()\n    \n    return total_trees_planted\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Organization': ['Make it Green', 'Dreaming Green', 'New Planet', 'Plant It'],\n    'Number of trees planted': [270, 454, 207, 371]\n})\n\n# Specify the organizations\norganizations = ['New Planet', 'Plant It']\n\n# Call the tool to solve the problem\nprint(count_trees_planted(df, organizations))","question":"An environmental agency examined how many trees were planted by different organizations. In all, how many trees were planted by New Planet and Plant It?","prediction_code":"import pandas as pd\n\ndef count_trees_planted(df, organizations):\n    \"\"\"\n    This function takes in a pandas DataFrame of trees planted by different organizations and a list of organizations, and returns the total number of trees planted by the specified organizations.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the organization names and the number of trees planted by each organization.\n    The DataFrame should have columns 'Organization' and 'Number of trees planted'.\n    organizations (list): A list of organization names.\n    Returns:\n    int: The total number of trees planted by the specified organizations.\n    \"\"\"\n    # Filter the DataFrame for the specified organizations\n    filtered_df = df[df['Organization'].isin(organizations)]\n    \n    # Calculate the total number of trees planted by the specified organizations\n    total_trees_planted = filtered_df['Number of trees planted'].sum()\n    \n    return total_trees_planted","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Organization': ['Make it Green', 'Dreaming Green', 'New Planet', 'Plant It'],\n    'Number of trees planted': [270, 454, 207, 371]\n})\n\n# Specify the organizations\norganizations = ['New Planet', 'Plant It']\n\n# Call the tool to solve the problem\nprint(count_trees_planted(df, organizations))","table":"Name: Trees planted\nUnit: trees\nContent:\nOrganization | Number of trees planted\nMake it Green | 270\nDreaming Green | 454\nNew Planet | 207\nPlant It | 371"}
{"level":8,"answer":33.0,"prediction":"import pandas as pd\n\ndef count_students_more_than_1_trip(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trips to the science museum and returns the number of students who went to the museum more than 1 time.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of trips to the science museum and their frequencies.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who went to the science museum more than 1 time.\n    \"\"\"\n    # Filter the DataFrame for trips with more than 1 frequency\n    filtered_df = df[df['Frequency'] > 1]\n    \n    # Calculate the total number of students who went to the museum more than 1 time\n    num_students = filtered_df['Frequency'].sum()\n    \n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [0, 1, 2, 3, 4, 5, 6],\n    'Frequency': [3, 6, 2, 5, 12, 1, 13]\n})\n# Call the tool to solve the problem\nprint(count_students_more_than_1_trip(df))","question":"Mrs. Roy, the biology teacher, asked her students how many times they went to the science museum last year. How many students went to the science museum more than 1 time?","prediction_code":"import pandas as pd\n\ndef count_students_more_than_1_trip(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trips to the science museum and returns the number of students who went to the museum more than 1 time.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of trips to the science museum and their frequencies.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who went to the science museum more than 1 time.\n    \"\"\"\n    # Filter the DataFrame for trips with more than 1 frequency\n    filtered_df = df[df['Frequency'] > 1]\n    \n    # Calculate the total number of students who went to the museum more than 1 time\n    num_students = filtered_df['Frequency'].sum()\n    \n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [0, 1, 2, 3, 4, 5, 6],\n    'Frequency': [3, 6, 2, 5, 12, 1, 13]\n})\n# Call the tool to solve the problem\nprint(count_students_more_than_1_trip(df))","table":"Name: Trips to the science museum last year\nUnit: None\nContent:\nNumber of trips | Frequency\n0 | 3\n1 | 6\n2 | 2\n3 | 5\n4 | 12\n5 | 1\n6 | 13"}
{"level":1,"answer":10.0,"prediction":"import pandas as pd\n\ndef calculate_total_goats(df, num_fields):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of goats per field and the number of fields, and returns the total number of goats.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of fields and the number of goats per field with columns 'Number of fields' and 'Number of goats'.\n    num_fields (int): The number of fields.\n    Returns:\n    int: The total number of goats.\n    \"\"\"\n    # Filter the DataFrame for the specific number of fields\n    field_df = df[df['Number of fields'] == num_fields]\n    \n    # Check if the DataFrame is empty\n    if field_df.empty:\n        return None\n    \n    # Get the number of goats for the specific number of fields\n    num_goats = field_df['Number of goats'].values[0]\n    \n    # Calculate the total number of goats\n    total_goats = num_goats * num_fields\n    \n    return total_goats\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of fields': [1, 2, 3, 4, 5],\n    'Number of goats': [2, 4, 6, 8, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_goats(df, 5))","question":"Each field has 2 goats. How many goats are in 5 fields?","prediction_code":"import pandas as pd\n\ndef calculate_total_goats(df, num_fields):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of goats per field and the number of fields, and returns the total number of goats.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of fields and the number of goats per field with columns 'Number of fields' and 'Number of goats'.\n    num_fields (int): The number of fields.\n    Returns:\n    int: The total number of goats.\n    \"\"\"\n    # Filter the DataFrame for the specific number of fields\n    field_df = df[df['Number of fields'] == num_fields]\n    \n    # Check if the DataFrame is empty\n    if field_df.empty:\n        return None\n    \n    # Get the number of goats for the specific number of fields\n    num_goats = field_df['Number of goats'].values[0]\n    \n    # Calculate the total number of goats\n    total_goats = num_goats * num_fields\n    \n    return total_goats","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of fields': [1, 2, 3, 4, 5],\n    'Number of goats': [2, 4, 6, 8, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_goats(df, 5))","table":"Name: None\nUnit: goats\nContent:\nNumber of fields | Number of goats\n1 | 2\n2 | 4\n3 | 6\n4 | 8\n5 | ?"}
{"level":8,"answer":166.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(table, item1, quantity1, item2, quantity2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of the specified items and quantities.\n    Args:\n    table (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    item1 (str): The name of the first item.\n    quantity1 (int): The quantity of the first item.\n    item2 (str): The name of the second item.\n    quantity2 (int): The quantity of the second item.\n    Returns:\n    float: The total cost of the specified items and quantities.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for i in range(len(table)):\n        name = table['Name'][i]\n        price = table['Price'][i]\n        if name == item1:\n            total_cost += quantity1 * price\n        elif name == item2:\n            total_cost += quantity2 * price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['trampoline', 'toy piano', 'remote control car', 'video game'],\n    'Price': [54, 40, 11, 31]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'remote control car', 1, 'video game', 5))","question":"How much money does Pedro need to buy a remote control car and 5 video games?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(table, item1, quantity1, item2, quantity2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of the specified items and quantities.\n    Args:\n    table (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    item1 (str): The name of the first item.\n    quantity1 (int): The quantity of the first item.\n    item2 (str): The name of the second item.\n    quantity2 (int): The quantity of the second item.\n    Returns:\n    float: The total cost of the specified items and quantities.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for i in range(len(table)):\n        name = table['Name'][i]\n        price = table['Price'][i]\n        if name == item1:\n            total_cost += quantity1 * price\n        elif name == item2:\n            total_cost += quantity2 * price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['trampoline', 'toy piano', 'remote control car', 'video game'],\n    'Price': [54, 40, 11, 31]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'remote control car', 1, 'video game', 5))","table":"Name: None\nUnit: $\nContent:\ntrampoline | $54\ntoy piano | $40\nremote control car | $11\nvideo game | $31"}
{"level":8,"answer":6.0,"prediction":"import pandas as pd\n\ndef count_participants_with_more_than_2_pullups(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pull-up data and returns the number of participants who completed more than 2 pull-ups.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of pull-ups completed by each participant.\n    The DataFrame should contain \"Number of pull-ups\" and \"Frequency\" columns.\n    Returns:\n    int: The number of participants who completed more than 2 pull-ups.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of pull-ups is greater than 2\n    filtered_df = df[df['Number of pull-ups'] > 2]\n    \n    # Calculate the total number of participants who completed more than 2 pull-ups\n    num_participants = filtered_df['Frequency'].sum()\n    \n    return num_participants\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of pull-ups': [0, 1, 2, 3],\n    'Frequency': [19, 14, 10, 6]\n})\n# Call the tool to solve the problem\nprint(count_participants_with_more_than_2_pullups(df))","question":"Scott, a fitness counselor, counted the number of pull-ups completed by each bootcamp participant. How many participants did more than 2 pull-ups?","prediction_code":"import pandas as pd\n\ndef count_participants_with_more_than_2_pullups(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pull-up data and returns the number of participants who completed more than 2 pull-ups.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of pull-ups completed by each participant.\n    The DataFrame should contain \"Number of pull-ups\" and \"Frequency\" columns.\n    Returns:\n    int: The number of participants who completed more than 2 pull-ups.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of pull-ups is greater than 2\n    filtered_df = df[df['Number of pull-ups'] > 2]\n    \n    # Calculate the total number of participants who completed more than 2 pull-ups\n    num_participants = filtered_df['Frequency'].sum()\n    \n    return num_participants","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of pull-ups': [0, 1, 2, 3],\n    'Frequency': [19, 14, 10, 6]\n})\n# Call the tool to solve the problem\nprint(count_participants_with_more_than_2_pullups(df))","table":"Name: Doing pull-ups\nUnit: None\nContent:\nNumber of pull-ups | Frequency\n0 | 19\n1 | 14\n2 | 10\n3 | 6"}
{"level":5,"answer":13.0,"prediction":"import pandas as pd\n\ndef count_offices_less_than_70(df):\n    \"\"\"\n    This function takes in a pandas dataframe of office sizes and returns the number of offices that are less than 70 square meters.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the sizes of offices.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of offices that are less than 70 square meters.\n    \"\"\"\n    # prepare a list to store the sizes of all offices\n    sizes = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the size of each office and add it to the list\n        for j in range(len(leaf)):\n            sizes.append(stem * 10 + leaf[j])\n    # count the number of offices that are less than 70 square meters\n    num_offices = sum([1 for size in sizes if size < 70])\n    return num_offices\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6],\n    'Leaf': [[4], [6, 8], [6, 7, 8, 9], [5, 7], [0, 0, 8], [9]]\n})\n# Call the tool to solve the problem\nprint(count_offices_less_than_70(df))","question":"Braden, who rents properties for a living, measures all the offices in a building he is renting. How many offices are less than 70 square meters?","prediction_code":"import pandas as pd\n\ndef count_offices_less_than_70(df):\n    \"\"\"\n    This function takes in a pandas dataframe of office sizes and returns the number of offices that are less than 70 square meters.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the sizes of offices.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of offices that are less than 70 square meters.\n    \"\"\"\n    # prepare a list to store the sizes of all offices\n    sizes = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the size of each office and add it to the list\n        for j in range(len(leaf)):\n            sizes.append(stem * 10 + leaf[j])\n    # count the number of offices that are less than 70 square meters\n    num_offices = sum([1 for size in sizes if size < 70])\n    return num_offices","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6],\n    'Leaf': [[4], [6, 8], [6, 7, 8, 9], [5, 7], [0, 0, 8], [9]]\n})\n# Call the tool to solve the problem\nprint(count_offices_less_than_70(df))","table":"Name: Office sizes (square meters)\nUnit: offices\nContent:\nStem | Leaf \n1 | 4\n2 | 6, 8\n3 | 6, 7, 8, 9\n4 | 5, 7\n5 | 0, 0, 8\n6 | 9"}
{"level":5,"answer":46.0,"prediction":"import pandas as pd\nfrom scipy import stats\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of cookies baked by students and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the names and number of cookies baked by each student.\n    The dataframe should contain \"Name\" and \"Number of cookies\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of cookies']\n    \n    # Calculate the mode using scipy.stats.mode\n    mode = stats.mode(numbers)[0][0]\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Kurt', 'Suzie', 'Todd', 'Alice', 'Zack'],\n    'Number of cookies': [42, 46, 46, 42, 46]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"The art club examined how many cookies each student baked for the bake sale. What is the mode of the numbers?","prediction_code":"import pandas as pd\nfrom scipy import stats\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of cookies baked by students and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the names and number of cookies baked by each student.\n    The dataframe should contain \"Name\" and \"Number of cookies\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of cookies']\n    \n    # Calculate the mode using scipy.stats.mode\n    mode = stats.mode(numbers)[0][0]\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Kurt', 'Suzie', 'Todd', 'Alice', 'Zack'],\n    'Number of cookies': [42, 46, 46, 42, 46]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Cookies baked\nUnit: None\nContent:\nName | Number of cookies\nKurt | 42\nSuzie | 46\nTodd | 46\nAlice | 42\nZack | 46"}
{"level":6,"answer":90.0,"prediction":"import pandas as pd\n\ndef find_largest_number(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of broken tiles per shipment and returns the largest number of broken tiles.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken tiles per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of broken tiles.\n    \"\"\"\n    # Create an empty list to store all the broken tiles\n    broken_tiles = []\n    \n    # Iterate through each row in the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # If the leaf column is not empty, add the broken tiles to the list\n        if leaf:\n            broken_tiles.extend(leaf)\n    \n    # Convert the broken tiles to integers\n    broken_tiles = [int(tile) for tile in broken_tiles]\n    \n    # Find the largest number of broken tiles\n    largest_number = max(broken_tiles)\n    \n    return largest_number\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [3, 4, [], 8, [], 9, [3, 5], 0]\n})\n# Call the tool to solve the problem\nprint(find_largest_number(df))","question":"Dover Flooring tracked the number of broken tiles in each shipment it received last year. What is the largest number of broken tiles?","prediction_code":"import pandas as pd\n\ndef find_largest_number(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of broken tiles per shipment and returns the largest number of broken tiles.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken tiles per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of broken tiles.\n    \"\"\"\n    # Create an empty list to store all the broken tiles\n    broken_tiles = []\n    \n    # Iterate through each row in the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # If the leaf column is not empty, add the broken tiles to the list\n        if leaf:\n            broken_tiles.extend(leaf)\n    \n    # Convert the broken tiles to integers\n    broken_tiles = [int(tile) for tile in broken_tiles]\n    \n    # Find the largest number of broken tiles\n    largest_number = max(broken_tiles)\n    \n    return largest_number","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [3, 4, [], 8, [], 9, [3, 5], 0]\n})\n# Call the tool to solve the problem\nprint(find_largest_number(df))","table":"Name: Broken tiles per shipment\nUnit: broken tiles\nContent:\nStem | Leaf \n2 | 3\n3 | 4\n4 | \n5 | 8\n6 | \n7 | 9\n8 | 3, 5\n9 | 0"}
{"level":8,"answer":11.0,"prediction":"import pandas as pd\n\ndef count_people_with_specific_letter_count(df, letter_count):\n    \"\"\"\n    This function takes in a pandas DataFrame of letter writing frequency and a specific letter count, and returns the number of people who wrote exactly that many letters.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the letter writing frequency.\n    The dataframe should contain \"Letters written\" and \"Frequency\" columns.\n    letter_count (int): The specific letter count to search for.\n    Returns:\n    int: The number of people who wrote exactly the specified number of letters.\n    \"\"\"\n    # Filter the DataFrame for rows where the letter count matches the specified count\n    filtered_df = df[df['Letters written'] == letter_count]\n    \n    # Get the frequency value for the specified count\n    frequency = filtered_df['Frequency'].values[0]\n    \n    return frequency\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Letters written': [0, 1, 2, 3, 4, 5],\n    'Frequency': [3, 11, 7, 14, 10, 17]\n})\n# Call the tool to solve the problem\nprint(count_people_with_specific_letter_count(df, 1))","question":"A researcher asked people how many letters they had written in the past year and recorded the results. How many people wrote exactly 1 letter?","prediction_code":"import pandas as pd\n\ndef count_people_with_specific_letter_count(df, letter_count):\n    \"\"\"\n    This function takes in a pandas DataFrame of letter writing frequency and a specific letter count, and returns the number of people who wrote exactly that many letters.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the letter writing frequency.\n    The dataframe should contain \"Letters written\" and \"Frequency\" columns.\n    letter_count (int): The specific letter count to search for.\n    Returns:\n    int: The number of people who wrote exactly the specified number of letters.\n    \"\"\"\n    # Filter the DataFrame for rows where the letter count matches the specified count\n    filtered_df = df[df['Letters written'] == letter_count]\n    \n    # Get the frequency value for the specified count\n    frequency = filtered_df['Frequency'].values[0]\n    \n    return frequency","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Letters written': [0, 1, 2, 3, 4, 5],\n    'Frequency': [3, 11, 7, 14, 10, 17]\n})\n# Call the tool to solve the problem\nprint(count_people_with_specific_letter_count(df, 1))","table":"Name: Writing letters\nUnit: None\nContent:\nLetters written | Frequency\n0 | 3\n1 | 11\n2 | 7\n3 | 14\n4 | 10\n5 | 17"}
{"level":7,"answer":8.04,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of items and their quantities, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the items and their prices with columns 'Item' and 'Price'.\n    items (dict): A dictionary where the keys are item names and the values are the quantities of each item.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item, quantity in items.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['coarse gravel', 'pebbles', 'white sand', 'rocks', 'fine gravel'],\n    'Price': [1.62, 2.26, 2.14, 1.28, 1.57]\n})\n\n# Initialize the items and their quantities\nitems = {\n    'coarse gravel': 1,\n    'white sand': 3\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"Tucker bought 1 kilogram of coarse gravel and 3 kilograms of white sand. How much did he spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of items and their quantities, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the items and their prices with columns 'Item' and 'Price'.\n    items (dict): A dictionary where the keys are item names and the values are the quantities of each item.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item, quantity in items.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['coarse gravel', 'pebbles', 'white sand', 'rocks', 'fine gravel'],\n    'Price': [1.62, 2.26, 2.14, 1.28, 1.57]\n})\n\n# Initialize the items and their quantities\nitems = {\n    'coarse gravel': 1,\n    'white sand': 3\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\ncoarse gravel | $1.62\/kg\npebbles | $2.26\/kg\nwhite sand | $2.14\/kg\nrocks | $1.28\/kg\nfine gravel | $1.57\/kg"}
{"level":8,"answer":11.2,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of buying a certain quantity of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the item names and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item to be purchased.\n    quantity (int): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of buying the specified quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price of the item\n    price = item_df['Price'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price * quantity\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['box of crayons', 'silver glitter pen', 'box of colored pencils', 'rubber stamp', 'box of paper clips'],\n    'Price': [2.24, 2.88, 1.25, 1.51, 1.47]\n})\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, 'box of crayons', 5)\n\n# Print out the answer\nprint(total_cost)","question":"How much money does Billy need to buy 5 boxes of crayons?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of buying a certain quantity of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the item names and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item to be purchased.\n    quantity (int): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of buying the specified quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price of the item\n    price = item_df['Price'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price * quantity\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['box of crayons', 'silver glitter pen', 'box of colored pencils', 'rubber stamp', 'box of paper clips'],\n    'Price': [2.24, 2.88, 1.25, 1.51, 1.47]\n})\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, 'box of crayons', 5)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\nbox of crayons | $2.24\nsilver glitter pen | $2.88\nbox of colored pencils | $1.25\nrubber stamp | $1.51\nbox of paper clips | $1.47"}
{"level":5,"answer":15088.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['antique cherry bookcase', 'antique cedar cabinet', 'antique walnut buffet', 'antique fir wood bed'],\n    'Price': [6068, 1685, 4191, 4829]\n})\n\n# Define the items to calculate the total cost\nitems = ['antique fir wood bed', 'antique cherry bookcase', 'antique walnut buffet']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Shelley need to buy an antique fir wood bed, an antique cherry bookcase, and an antique walnut buffet?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['antique cherry bookcase', 'antique cedar cabinet', 'antique walnut buffet', 'antique fir wood bed'],\n    'Price': [6068, 1685, 4191, 4829]\n})\n\n# Define the items to calculate the total cost\nitems = ['antique fir wood bed', 'antique cherry bookcase', 'antique walnut buffet']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nantique cherry bookcase | $6,068\nantique cedar cabinet | $1,685\nantique walnut buffet | $4,191\nantique fir wood bed | $4,829"}
{"level":4,"answer":2.0,"prediction":"import pandas as pd\n\ndef count_bags_with_red_buttons(df):\n    \"\"\"\n    This function takes in a pandas dataframe of red buttons per bag, and returns the number of bags that have at least 60 red buttons but fewer than 81 red buttons.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of red buttons per bag.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of bags that have at least 60 red buttons but fewer than 81 red buttons.\n    \"\"\"\n    # prepare a list to calculate red buttons in each bag\n    red_buttons = []\n    # calculate the total number of red buttons in each bag\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        if pd.isnull(leaf):\n            red_buttons.append(stem)\n        else:\n            for j in range(len(leaf)):\n                red_buttons.append(stem * 10 + leaf[j])\n    # filter the bags where the total number of red buttons is greater than or equal to 60 but less than 81\n    filtered = [button for button in red_buttons if 60 <= button < 81]\n    # count the number of rows\n    num_bags = len(filtered)\n    return num_bags\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [1, 5, 2, 8, [3, 6], [], [5, 7], [4, 7, 8]]\n})\n# Call the tool to solve the problem\nprint(count_bags_with_red_buttons(df))","question":"An employee at the craft store counted the number of red buttons in each bag of mixed buttons. How many bags had at least 60 red buttons but fewer than 81 red buttons?","prediction_code":"import pandas as pd\n\ndef count_bags_with_red_buttons(df):\n    \"\"\"\n    This function takes in a pandas dataframe of red buttons per bag, and returns the number of bags that have at least 60 red buttons but fewer than 81 red buttons.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of red buttons per bag.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of bags that have at least 60 red buttons but fewer than 81 red buttons.\n    \"\"\"\n    # prepare a list to calculate red buttons in each bag\n    red_buttons = []\n    # calculate the total number of red buttons in each bag\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        if pd.isnull(leaf):\n            red_buttons.append(stem)\n        else:\n            for j in range(len(leaf)):\n                red_buttons.append(stem * 10 + leaf[j])\n    # filter the bags where the total number of red buttons is greater than or equal to 60 but less than 81\n    filtered = [button for button in red_buttons if 60 <= button < 81]\n    # count the number of rows\n    num_bags = len(filtered)\n    return num_bags","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [1, 5, 2, 8, [3, 6], [], [5, 7], [4, 7, 8]]\n})\n# Call the tool to solve the problem\nprint(count_bags_with_red_buttons(df))","table":"Name: Red buttons per bag\nUnit: None\nContent:\nStem | Leaf \n1 | 1\n2 | 5\n3 | 2\n4 | 8\n5 | 3, 6\n6 | \n7 | 5, 7\n8 | 4, 7, 8"}
{"level":8,"answer":4.0,"prediction":"import pandas as pd\n\ndef calculate_mean_number_of_clubs(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of club membership and returns the mean number of clubs.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and number of clubs for each student.\n    The dataframe should contain \"Name\" and \"Number of clubs\" columns.\n    Returns:\n    float: The mean number of clubs.\n    \"\"\"\n    # Calculate the mean of the \"Number of clubs\" column\n    mean_number_of_clubs = df['Number of clubs'].mean()\n    \n    return mean_number_of_clubs\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Jenna', 'Amy', 'Latrell', 'Christina', 'Wesley', 'Brad', 'Dale'],\n    'Number of clubs': [6, 3, 4, 4, 5, 2, 4]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_number_of_clubs(df))","question":"Some students compared how many clubs they belong to. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean_number_of_clubs(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of club membership and returns the mean number of clubs.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and number of clubs for each student.\n    The dataframe should contain \"Name\" and \"Number of clubs\" columns.\n    Returns:\n    float: The mean number of clubs.\n    \"\"\"\n    # Calculate the mean of the \"Number of clubs\" column\n    mean_number_of_clubs = df['Number of clubs'].mean()\n    \n    return mean_number_of_clubs","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Jenna', 'Amy', 'Latrell', 'Christina', 'Wesley', 'Brad', 'Dale'],\n    'Number of clubs': [6, 3, 4, 4, 5, 2, 4]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_number_of_clubs(df))","table":"Name: Clubs\nUnit: None\nContent:\nName | Number of clubs\nJenna | 6\nAmy | 3\nLatrell | 4\nChristina | 4\nWesley | 5\nBrad | 2\nDale | 4"}
{"level":8,"answer":10.0,"prediction":"import pandas as pd\n\ndef count_companies_with_employees(df, min_employees, max_employees):\n    \"\"\"\n    This function takes in a pandas dataframe of company sizes (number of employees), and returns the number of companies that have at least min_employees employees but less than max_employees employees.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of employees per company.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_employees (int): The minimum number of employees a company should have to be counted.\n    max_employees (int): The maximum number of employees a company should have to be counted.\n    Returns:\n    int: The number of companies that have at least min_employees employees but less than max_employees employees.\n    \"\"\"\n    # prepare a list to calculate the number of employees in each company\n    employees = []\n    # calculate the total number of employees in each company\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            employees.append(stem * 10 + leaf[j])\n    # filter the companies where the total number of employees is greater than or equal to min_employees and less than max_employees\n    filtered = [employee for employee in employees if min_employees <= employee < max_employees]\n    # count the number of companies\n    num_companies = len(filtered)\n    return num_companies\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6],\n    'Leaf': [[2, 9], [0, 3], [], [0, 1, 9], [4, 4, 6, 9]]\n})\n# Set the minimum and maximum number of employees\nmin_employees = 23\nmax_employees = 70\n# Call the tool to solve the problem\nprint(count_companies_with_employees(df, min_employees, max_employees))","question":"The Brookfield Chamber of Commerce researched the number of employees working at local companies. How many companies have at least 23 employees but less than 70 employees?","prediction_code":"import pandas as pd\n\ndef count_companies_with_employees(df, min_employees, max_employees):\n    \"\"\"\n    This function takes in a pandas dataframe of company sizes (number of employees), and returns the number of companies that have at least min_employees employees but less than max_employees employees.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of employees per company.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_employees (int): The minimum number of employees a company should have to be counted.\n    max_employees (int): The maximum number of employees a company should have to be counted.\n    Returns:\n    int: The number of companies that have at least min_employees employees but less than max_employees employees.\n    \"\"\"\n    # prepare a list to calculate the number of employees in each company\n    employees = []\n    # calculate the total number of employees in each company\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            employees.append(stem * 10 + leaf[j])\n    # filter the companies where the total number of employees is greater than or equal to min_employees and less than max_employees\n    filtered = [employee for employee in employees if min_employees <= employee < max_employees]\n    # count the number of companies\n    num_companies = len(filtered)\n    return num_companies","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6],\n    'Leaf': [[2, 9], [0, 3], [], [0, 1, 9], [4, 4, 6, 9]]\n})\n# Set the minimum and maximum number of employees\nmin_employees = 23\nmax_employees = 70\n# Call the tool to solve the problem\nprint(count_companies_with_employees(df, min_employees, max_employees))","table":"Name: Company sizes (number of employees)\nUnit: companies\nContent:\nStem | Leaf \n2 | 2, 9\n3 | 0, 3\n4 | \n5 | 0, 1, 9\n6 | 4, 4, 6, 9"}
{"level":7,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of math teachers per high school and returns the range of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of math teachers per high school.\n    The dataframe should contain \"High school\" and \"Number of math teachers\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the maximum and minimum values of the \"Number of math teachers\" column\n    max_value = df['Number of math teachers'].max()\n    min_value = df['Number of math teachers'].min()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'High school': ['Washington High', 'Lincoln High', 'Northside High', 'Thompson High', 'Moore High', 'Cedar High', 'River High', 'Green High'],\n    'Number of math teachers': [7, 7, 9, 9, 7, 4, 5, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"The school district compared how many math teachers each high school has. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of math teachers per high school and returns the range of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of math teachers per high school.\n    The dataframe should contain \"High school\" and \"Number of math teachers\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the maximum and minimum values of the \"Number of math teachers\" column\n    max_value = df['Number of math teachers'].max()\n    min_value = df['Number of math teachers'].min()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'High school': ['Washington High', 'Lincoln High', 'Northside High', 'Thompson High', 'Moore High', 'Cedar High', 'River High', 'Green High'],\n    'Number of math teachers': [7, 7, 9, 9, 7, 4, 5, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Math teachers\nUnit: None\nContent:\nHigh school | Number of math teachers\nWashington High | 7\nLincoln High | 7\nNorthside High | 9\nThompson High | 9\nMoore High | 7\nCedar High | 4\nRiver High | 5\nGreen High | 9"}
{"level":6,"answer":6.9,"prediction":"import pandas as pd\n\ndef calculate_cost(df, item, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of dressing prices and a specific item and weight, and returns the cost of buying that amount of the item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing dressing names and their prices per pound with columns 'Name' and 'Unit'.\n    item (str): The name of the dressing item.\n    weight (float): The weight of the dressing item in pounds.\n    Returns:\n    float: The cost of buying the specified amount of the dressing item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    if not item_df.empty:\n        item_price = item_df['Unit'].values[0]\n        # Extract the price per pound from the string\n        price_per_pound = float(item_price.split('$')[1].split(' ')[0])\n        # Calculate the cost based on the weight\n        cost = price_per_pound * weight\n        return cost\n    else:\n        return None\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['balsamic vinaigrette', 'blue cheese dressing', 'Italian dressing', 'Thousand Island dressing', 'raspberry vinaigrette', 'ranch dressing'],\n    'Unit': ['$5 per pound', '$4 per pound', '$3 per pound', '$4 per pound', '$3 per pound', '$4 per pound']\n})\n# Call the tool to solve the problem\nprint(calculate_cost(df, 'Italian dressing', 2.3))","question":"How much would it cost to buy 2.3 pounds of Italian dressing?","prediction_code":"import pandas as pd\n\ndef calculate_cost(df, item, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of dressing prices and a specific item and weight, and returns the cost of buying that amount of the item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing dressing names and their prices per pound with columns 'Name' and 'Unit'.\n    item (str): The name of the dressing item.\n    weight (float): The weight of the dressing item in pounds.\n    Returns:\n    float: The cost of buying the specified amount of the dressing item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    if not item_df.empty:\n        item_price = item_df['Unit'].values[0]\n        # Extract the price per pound from the string\n        price_per_pound = float(item_price.split('$')[1].split(' ')[0])\n        # Calculate the cost based on the weight\n        cost = price_per_pound * weight\n        return cost\n    else:\n        return None","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['balsamic vinaigrette', 'blue cheese dressing', 'Italian dressing', 'Thousand Island dressing', 'raspberry vinaigrette', 'ranch dressing'],\n    'Unit': ['$5 per pound', '$4 per pound', '$3 per pound', '$4 per pound', '$3 per pound', '$4 per pound']\n})\n# Call the tool to solve the problem\nprint(calculate_cost(df, 'Italian dressing', 2.3))","table":"Name: None\nUnit: $\nContent:\nbalsamic vinaigrette | $5 per pound\nblue cheese dressing | $4 per pound\nItalian dressing | $3 per pound\nThousand Island dressing | $4 per pound\nraspberry vinaigrette | $3 per pound\nranch dressing | $4 per pound"}
{"level":6,"answer":3.6,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of a specific item given a quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = quantity * item_price\n        return total_cost\n    else:\n        return None\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['dark chocolate chips', 'butterscotch chips', 'white chocolate chips', 'milk chocolate chips'],\n    'Price': [5, 3, 7, 6]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'milk chocolate chips', 0.6))","question":"Mark buys 0.6 pounds of milk chocolate chips. What is the total cost?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of a specific item given a quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = quantity * item_price\n        return total_cost\n    else:\n        return None","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['dark chocolate chips', 'butterscotch chips', 'white chocolate chips', 'milk chocolate chips'],\n    'Price': [5, 3, 7, 6]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'milk chocolate chips', 0.6))","table":"Name: None\nUnit: $\nContent:\ndark chocolate chips | $5 per lb\nbutterscotch chips | $3 per lb\nwhite chocolate chips | $7 per lb\nmilk chocolate chips | $6 per lb"}
{"level":7,"answer":10213.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of items, and returns the total cost of the items using pandas.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (dict): A dictionary where the keys are item names and the values are the number of items to buy.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item, quantity in items.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['racing bike', 'wetsuit', 'mountain bike', 'snowboard'],\n    'Price': [805.00, 777.00, 460.00, 230.00]\n})\n\n# Initialize the items dictionary\nitems = {\n    'wetsuit': 9,\n    'mountain bike': 7\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Jerry need to buy 9 wetsuits and 7 mountain bikes?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of items, and returns the total cost of the items using pandas.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (dict): A dictionary where the keys are item names and the values are the number of items to buy.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item, quantity in items.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['racing bike', 'wetsuit', 'mountain bike', 'snowboard'],\n    'Price': [805.00, 777.00, 460.00, 230.00]\n})\n\n# Initialize the items dictionary\nitems = {\n    'wetsuit': 9,\n    'mountain bike': 7\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nracing bike | $805.00\nwetsuit | $777.00\nmountain bike | $460.00\nsnowboard | $230.00"}
{"level":5,"answer":9.0,"prediction":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of goals made and returns the mode of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of goals made each day.\n    The dataframe should contain \"Day\" and \"Number of goals\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    goals = df['Number of goals']\n    \n    # Calculate the mode using the value_counts() function\n    mode = goals.value_counts().idxmax()\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of goals': [9, 9, 8, 8, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"Chloe recalled how many goals she had made in soccer practice each day. What is the mode of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of goals made and returns the mode of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of goals made each day.\n    The dataframe should contain \"Day\" and \"Number of goals\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    goals = df['Number of goals']\n    \n    # Calculate the mode using the value_counts() function\n    mode = goals.value_counts().idxmax()\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of goals': [9, 9, 8, 8, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Goals made\nUnit: None\nContent:\nDay | Number of goals\nTuesday | 9\nWednesday | 9\nThursday | 8\nFriday | 8\nSaturday | 9"}
{"level":8,"answer":47.23,"prediction":"import pandas as pd\n\ndef calculate_total_cost(menu_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table and a list of items, and returns the total cost of the items using pandas.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of menu item names.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the menu items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = menu_df[menu_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['chocolate cake', 'birthday cake', 'carrot cake', 'pear tart', 'almond tart', 'apple tart'],\n    'Price': [15.23, 28.75, 18.48, 23.91, 12.42, 13.36]\n})\n\n# Call the tool to solve the problem\nitems = ['birthday cake', 'carrot cake']\nprint(calculate_total_cost(df, items))","question":"How much money does Maureen need to buy a birthday cake and a carrot cake?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(menu_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table and a list of items, and returns the total cost of the items using pandas.\n    Args:\n    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of menu item names.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the menu items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = menu_df[menu_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['chocolate cake', 'birthday cake', 'carrot cake', 'pear tart', 'almond tart', 'apple tart'],\n    'Price': [15.23, 28.75, 18.48, 23.91, 12.42, 13.36]\n})\n\n# Call the tool to solve the problem\nitems = ['birthday cake', 'carrot cake']\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nchocolate cake | $15.23\nbirthday cake | $28.75\ncarrot cake | $18.48\npear tart | $23.91\nalmond tart | $12.42\napple tart | $13.36"}
{"level":5,"answer":17.0,"prediction":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of class sizes and returns the mode of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the class sizes with columns 'Teacher' and 'Number of students'.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of students']\n    \n    # Calculate the mode using the value_counts() function\n    mode = numbers.value_counts().idxmax()\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Teacher': ['Mrs. King', 'Mrs. Truman', 'Ms. Katz', 'Mr. Clay', 'Mr. Watson', 'Mr. Chen', 'Mrs. Novak'],\n    'Number of students': [20, 13, 17, 20, 17, 17, 13]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"Some teachers compared how many students are in their classes. What is the mode of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of class sizes and returns the mode of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the class sizes with columns 'Teacher' and 'Number of students'.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of students']\n    \n    # Calculate the mode using the value_counts() function\n    mode = numbers.value_counts().idxmax()\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Teacher': ['Mrs. King', 'Mrs. Truman', 'Ms. Katz', 'Mr. Clay', 'Mr. Watson', 'Mr. Chen', 'Mrs. Novak'],\n    'Number of students': [20, 13, 17, 20, 17, 17, 13]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Class size\nUnit: None\nContent:\nTeacher | Number of students\nMrs. King | 20\nMrs. Truman | 13\nMs. Katz | 17\nMr. Clay | 20\nMr. Watson | 17\nMr. Chen | 17\nMrs. Novak | 13"}
{"level":8,"answer":14.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(table, item1, weight1, item2, weight2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices per pound, and returns the total cost for a given quantity of two items.\n    Args:\n    table (pd.DataFrame): A pandas DataFrame containing items and their prices per pound with columns 'Name' and 'Unit'.\n    item1 (str): The name of the first item.\n    weight1 (float): The weight of the first item in pounds.\n    item2 (str): The name of the second item.\n    weight2 (float): The weight of the second item in pounds.\n    Returns:\n    float: The total cost for the given quantity of two items.\n    \"\"\"\n    # Filter the DataFrame for the specific items\n    item1_df = table[table['Name'] == item1]\n    item2_df = table[table['Name'] == item2]\n    \n    # Calculate the cost for each item\n    if not item1_df.empty:\n        item1_price = item1_df['Unit'].values[0]\n        item1_cost = item1_price * weight1\n    else:\n        item1_cost = 0.0\n    \n    if not item2_df.empty:\n        item2_price = item2_df['Unit'].values[0]\n        item2_cost = item2_price * weight2\n    else:\n        item2_cost = 0.0\n    \n    # Calculate the total cost\n    total_cost = item1_cost + item2_cost\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['chocolate-covered raisins', 'licorice', 'lemon sours', 'chocolates'],\n    'Unit': [2, 4, 2, 2]\n})\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, 'licorice', 1, 'lemon sours', 5)\nprint(total_cost)","question":"What is the total cost for 1 pound of licorice and 5 pounds of lemon sours?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(table, item1, weight1, item2, weight2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices per pound, and returns the total cost for a given quantity of two items.\n    Args:\n    table (pd.DataFrame): A pandas DataFrame containing items and their prices per pound with columns 'Name' and 'Unit'.\n    item1 (str): The name of the first item.\n    weight1 (float): The weight of the first item in pounds.\n    item2 (str): The name of the second item.\n    weight2 (float): The weight of the second item in pounds.\n    Returns:\n    float: The total cost for the given quantity of two items.\n    \"\"\"\n    # Filter the DataFrame for the specific items\n    item1_df = table[table['Name'] == item1]\n    item2_df = table[table['Name'] == item2]\n    \n    # Calculate the cost for each item\n    if not item1_df.empty:\n        item1_price = item1_df['Unit'].values[0]\n        item1_cost = item1_price * weight1\n    else:\n        item1_cost = 0.0\n    \n    if not item2_df.empty:\n        item2_price = item2_df['Unit'].values[0]\n        item2_cost = item2_price * weight2\n    else:\n        item2_cost = 0.0\n    \n    # Calculate the total cost\n    total_cost = item1_cost + item2_cost\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['chocolate-covered raisins', 'licorice', 'lemon sours', 'chocolates'],\n    'Unit': [2, 4, 2, 2]\n})\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, 'licorice', 1, 'lemon sours', 5)\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\nchocolate-covered raisins | $2 per pound\nlicorice | $4 per pound\nlemon sours | $2 per pound\nchocolates | $2 per pound"}
{"level":8,"answer":6.0,"prediction":"import pandas as pd\n\ndef count_people_with_scores(df, min_score, max_score):\n    \"\"\"\n    This function takes in a pandas DataFrame of game show scores and returns the number of people who scored at least min_score but fewer than max_score.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the game show scores.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_score (int): The minimum score to consider.\n    max_score (int): The maximum score to consider.\n    Returns:\n    int: The number of people who scored at least min_score but fewer than max_score.\n    \"\"\"\n    # prepare a list to calculate scores for each person\n    scores = []\n    # calculate the total score for each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # filter the people who scored at least min_score but fewer than max_score\n    filtered = [score for score in scores if min_score <= score < max_score]\n    # count the number of people\n    num_people = len(filtered)\n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[1, 4], [1, 1, 2, 2, 4, 7], [2, 2, 6, 9], [0, 3], [0, 1, 5, 9], [1, 6], [1, 3, 5, 6], [4]]\n})\n# Call the tool to solve the problem\nprint(count_people_with_scores(df, 45, 70))","question":"The staff of a game show tracked the performance of all the contestants during the past season. How many people scored at least 45 points but fewer than 70 points?","prediction_code":"import pandas as pd\n\ndef count_people_with_scores(df, min_score, max_score):\n    \"\"\"\n    This function takes in a pandas DataFrame of game show scores and returns the number of people who scored at least min_score but fewer than max_score.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the game show scores.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_score (int): The minimum score to consider.\n    max_score (int): The maximum score to consider.\n    Returns:\n    int: The number of people who scored at least min_score but fewer than max_score.\n    \"\"\"\n    # prepare a list to calculate scores for each person\n    scores = []\n    # calculate the total score for each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # filter the people who scored at least min_score but fewer than max_score\n    filtered = [score for score in scores if min_score <= score < max_score]\n    # count the number of people\n    num_people = len(filtered)\n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[1, 4], [1, 1, 2, 2, 4, 7], [2, 2, 6, 9], [0, 3], [0, 1, 5, 9], [1, 6], [1, 3, 5, 6], [4]]\n})\n# Call the tool to solve the problem\nprint(count_people_with_scores(df, 45, 70))","table":"Name: Game show scores\nUnit: people\nContent:\nStem | Leaf \n1 | 1, 4\n2 | 1, 1, 2, 2, 4, 7\n3 | 2, 2, 6, 9\n4 | 0, 3\n5 | 0, 1, 5, 9\n6 | 1, 6\n7 | 1, 3, 5, 6\n8 | 4"}
{"level":6,"answer":10.0,"prediction":"import pandas as pd\nfrom statistics import mode\n\ndef find_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of swing counts per elementary school and returns the mode of the swing counts.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the swing counts per elementary school.\n    The dataframe should contain \"School\" and \"Number of swings\" columns.\n    Returns:\n    int: The mode of the swing counts.\n    \"\"\"\n    # Get the swing counts column\n    swing_counts = df['Number of swings']\n    \n    # Calculate the mode of the swing counts\n    mode_count = mode(swing_counts)\n    \n    return mode_count\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'School': ['Jefferson Elementary', 'Roseville Elementary', 'Canyon Elementary', 'Hillside Elementary', 'Boyd Elementary', 'Newberry Elementary', 'Valley Elementary', 'Lincoln Elementary'],\n    'Number of swings': [10, 10, 5, 10, 9, 9, 5, 10]\n})\n# Call the tool to solve the problem\nprint(find_mode(df))","question":"The school district compared how many swings each elementary school has. What is the mode of the numbers?","prediction_code":"import pandas as pd\nfrom statistics import mode\n\ndef find_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of swing counts per elementary school and returns the mode of the swing counts.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the swing counts per elementary school.\n    The dataframe should contain \"School\" and \"Number of swings\" columns.\n    Returns:\n    int: The mode of the swing counts.\n    \"\"\"\n    # Get the swing counts column\n    swing_counts = df['Number of swings']\n    \n    # Calculate the mode of the swing counts\n    mode_count = mode(swing_counts)\n    \n    return mode_count","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'School': ['Jefferson Elementary', 'Roseville Elementary', 'Canyon Elementary', 'Hillside Elementary', 'Boyd Elementary', 'Newberry Elementary', 'Valley Elementary', 'Lincoln Elementary'],\n    'Number of swings': [10, 10, 5, 10, 9, 9, 5, 10]\n})\n# Call the tool to solve the problem\nprint(find_mode(df))","table":"Name: Swings\nUnit: None\nContent:\nSchool | Number of swings\nJefferson Elementary | 10\nRoseville Elementary | 10\nCanyon Elementary | 5\nHillside Elementary | 10\nBoyd Elementary | 9\nNewberry Elementary | 9\nValley Elementary | 5\nLincoln Elementary | 10"}
{"level":6,"answer":7.0,"prediction":"import pandas as pd\n\ndef count_children_less_than_76(df):\n    \"\"\"\n    This function takes in a pandas dataframe of children's weights and returns the number of children who weighed less than 76 pounds.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the weights of children.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of children who weighed less than 76 pounds.\n    \"\"\"\n    # prepare a list to calculate weights of each child\n    weights = []\n    # calculate the weight of each child\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            weights.append(stem * 10 + leaf[j])\n    # filter the children who weighed less than 76 pounds\n    filtered = [weight for weight in weights if weight < 76]\n    # count the number of children\n    num_children = len(filtered)\n    return num_children\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7, 8],\n    'Leaf': [[5, 8], [0, 9], [3], [0, 1, 6], [1, 5, 7]]\n})\n# Call the tool to solve the problem\nprint(count_children_less_than_76(df))","question":"Dr. Scott, a pediatrician, weighed all the children who recently visited her office. How many children weighed less than 76 pounds?","prediction_code":"import pandas as pd\n\ndef count_children_less_than_76(df):\n    \"\"\"\n    This function takes in a pandas dataframe of children's weights and returns the number of children who weighed less than 76 pounds.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the weights of children.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of children who weighed less than 76 pounds.\n    \"\"\"\n    # prepare a list to calculate weights of each child\n    weights = []\n    # calculate the weight of each child\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            weights.append(stem * 10 + leaf[j])\n    # filter the children who weighed less than 76 pounds\n    filtered = [weight for weight in weights if weight < 76]\n    # count the number of children\n    num_children = len(filtered)\n    return num_children","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7, 8],\n    'Leaf': [[5, 8], [0, 9], [3], [0, 1, 6], [1, 5, 7]]\n})\n# Call the tool to solve the problem\nprint(count_children_less_than_76(df))","table":"Name: Children's weights (lbs)\nUnit: children\nContent:\nStem | Leaf \n4 | 5, 8\n5 | 0, 9\n6 | 3\n7 | 0, 1, 6\n8 | 1, 5, 7"}
{"level":5,"answer":11.0,"prediction":"import pandas as pd\n\ndef count_more_boys_voted(df, animal1, animal2):\n    \"\"\"\n    This function takes in a pandas DataFrame of favorite zoo animals and two animal names, and returns the difference in the number of boys who voted for the two animals.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the favorite zoo animals and the number of boys and girls who voted for each animal.\n    The DataFrame should have columns 'Animal', 'Girls', and 'Boys'.\n    animal1 (str): The name of the first animal.\n    animal2 (str): The name of the second animal.\n    Returns:\n    int: The difference in the number of boys who voted for the two animals.\n    \"\"\"\n    # Filter the DataFrame for the two animals\n    animal1_df = df[df['Animal'] == animal1]\n    animal2_df = df[df['Animal'] == animal2]\n    \n    # Get the number of boys who voted for each animal\n    boys_animal1 = animal1_df['Boys'].values[0]\n    boys_animal2 = animal2_df['Boys'].values[0]\n    \n    # Calculate the difference in the number of boys who voted for the two animals\n    diff_boys = boys_animal2 - boys_animal1\n    \n    return diff_boys\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Animal': ['Penguins', 'Polar bears', 'Elephants', 'Tigers'],\n    'Girls': [18, 10, 1, 5],\n    'Boys': [11, 18, 1, 7]\n})\n\n# Call the tool to solve the problem\nprint(count_more_boys_voted(df, 'Polar bears', 'Tigers'))","question":"After a trip to the zoo, the students in Ms. Chandler's science class voted for their favorite animals. How many more boys voted for polar bears than tigers?","prediction_code":"import pandas as pd\n\ndef count_more_boys_voted(df, animal1, animal2):\n    \"\"\"\n    This function takes in a pandas DataFrame of favorite zoo animals and two animal names, and returns the difference in the number of boys who voted for the two animals.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the favorite zoo animals and the number of boys and girls who voted for each animal.\n    The DataFrame should have columns 'Animal', 'Girls', and 'Boys'.\n    animal1 (str): The name of the first animal.\n    animal2 (str): The name of the second animal.\n    Returns:\n    int: The difference in the number of boys who voted for the two animals.\n    \"\"\"\n    # Filter the DataFrame for the two animals\n    animal1_df = df[df['Animal'] == animal1]\n    animal2_df = df[df['Animal'] == animal2]\n    \n    # Get the number of boys who voted for each animal\n    boys_animal1 = animal1_df['Boys'].values[0]\n    boys_animal2 = animal2_df['Boys'].values[0]\n    \n    # Calculate the difference in the number of boys who voted for the two animals\n    diff_boys = boys_animal2 - boys_animal1\n    \n    return diff_boys","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Animal': ['Penguins', 'Polar bears', 'Elephants', 'Tigers'],\n    'Girls': [18, 10, 1, 5],\n    'Boys': [11, 18, 1, 7]\n})\n\n# Call the tool to solve the problem\nprint(count_more_boys_voted(df, 'Polar bears', 'Tigers'))","table":"Name: Favorite zoo animal\nUnit: boys\nContent:\nAnimal | Girls | Boys\nPenguins | 18 | 11\nPolar bears | 10 | 18\nElephants | 1 | 1\nTigers | 5 | 7"}
{"level":6,"answer":8.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of lawn mowers sold and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of lawn mowers sold.\n    The dataframe should contain \"Day\" and \"Number of lawn mowers\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of lawn mowers']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday'],\n    'Number of lawn mowers': [8, 7, 5, 7, 9, 8, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"A garden supply store kept track of how many lawn mowers it sold in the past 7 days. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of lawn mowers sold and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of lawn mowers sold.\n    The dataframe should contain \"Day\" and \"Number of lawn mowers\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of lawn mowers']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday'],\n    'Number of lawn mowers': [8, 7, 5, 7, 9, 8, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Lawn mowers sold\nUnit: None\nContent:\nDay | Number of lawn mowers\nTuesday | 8\nWednesday | 7\nThursday | 5\nFriday | 7\nSaturday | 9\nSunday | 8\nMonday | 8"}
{"level":2,"answer":60.0,"prediction":"import pandas as pd\n\ndef calculate_total_rolls(df, num_packages):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of rolls of tape per package and the number of packages, and returns the total number of rolls of tape.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of rolls of tape per package with columns 'Number of packages' and 'Number of rolls of tape'.\n    num_packages (int): The number of packages.\n    Returns:\n    int: The total number of rolls of tape.\n    \"\"\"\n    # Filter the DataFrame for the specific number of packages\n    package_df = df[df['Number of packages'] == num_packages]\n    \n    # Check if the DataFrame is empty\n    if package_df.empty:\n        return None\n    \n    # Get the number of rolls of tape for the specific number of packages\n    num_rolls = package_df['Number of rolls of tape'].values[0]\n    \n    # Calculate the total number of rolls of tape\n    total_rolls = num_rolls * num_packages\n    \n    return total_rolls\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of packages': [1, 2, 3, 4, 5, 6],\n    'Number of rolls of tape': [10, 20, 30, 40, 50, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_rolls(df, 6))","question":"Each package has 10 rolls of tape. How many rolls of tape are in 6 packages?","prediction_code":"import pandas as pd\n\ndef calculate_total_rolls(df, num_packages):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of rolls of tape per package and the number of packages, and returns the total number of rolls of tape.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of rolls of tape per package with columns 'Number of packages' and 'Number of rolls of tape'.\n    num_packages (int): The number of packages.\n    Returns:\n    int: The total number of rolls of tape.\n    \"\"\"\n    # Filter the DataFrame for the specific number of packages\n    package_df = df[df['Number of packages'] == num_packages]\n    \n    # Check if the DataFrame is empty\n    if package_df.empty:\n        return None\n    \n    # Get the number of rolls of tape for the specific number of packages\n    num_rolls = package_df['Number of rolls of tape'].values[0]\n    \n    # Calculate the total number of rolls of tape\n    total_rolls = num_rolls * num_packages\n    \n    return total_rolls","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of packages': [1, 2, 3, 4, 5, 6],\n    'Number of rolls of tape': [10, 20, 30, 40, 50, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_rolls(df, 6))","table":"Name: None\nUnit: None\nContent:\nNumber of packages | Number of rolls of tape\n1 | 10\n2 | 20\n3 | 30\n4 | 40\n5 | 50\n6 | ?"}
{"level":8,"answer":30.0,"prediction":"import pandas as pd\n\ndef find_smallest_number_of_broken_cookies(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of broken cookies per pack and returns the smallest number of broken cookies.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken cookies per pack.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of broken cookies.\n    \"\"\"\n    # prepare a list to store the number of broken cookies\n    broken_cookies = []\n    \n    # iterate through the dataframe and extract the number of broken cookies\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            broken_cookies.append(stem * 10 + leaf[j])\n    \n    # find the smallest number of broken cookies\n    smallest_number = min(broken_cookies)\n    \n    return smallest_number\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7],\n    'Leaf': [[0, 1], [1, 4], [], [2], [1, 3, 5, 7]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_broken_cookies(df))","question":"A cookie factory monitored the number of broken cookies per pack yesterday. What is the smallest number of broken cookies?","prediction_code":"import pandas as pd\n\ndef find_smallest_number_of_broken_cookies(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of broken cookies per pack and returns the smallest number of broken cookies.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken cookies per pack.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of broken cookies.\n    \"\"\"\n    # prepare a list to store the number of broken cookies\n    broken_cookies = []\n    \n    # iterate through the dataframe and extract the number of broken cookies\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            broken_cookies.append(stem * 10 + leaf[j])\n    \n    # find the smallest number of broken cookies\n    smallest_number = min(broken_cookies)\n    \n    return smallest_number","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7],\n    'Leaf': [[0, 1], [1, 4], [], [2], [1, 3, 5, 7]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_broken_cookies(df))","table":"Name: Broken cookies per pack\nUnit: broken cookies\nContent:\nStem | Leaf \n3 | 0, 1\n4 | 1, 4\n5 | \n6 | 2\n7 | 1, 3, 5, 7"}
{"level":6,"answer":1.2,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost for a given weight of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    weight (float): The weight of the item in kilograms.\n    Returns:\n    float: The total cost for the given weight of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price per kilogram for the item\n        price_per_kg = item_df['Price'].values[0]\n        \n        # Calculate the total cost for the given weight\n        total_cost = price_per_kg * weight\n        \n        return total_cost\n    else:\n        return None\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['calcite', \"fool's gold\", \"tiger's eye\", 'quartz', 'topaz'],\n    'Price': [7, 5, 6, 8, 9]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, \"tiger's eye\", 1\/5))","question":"What is the total cost for 1\/5 of a kilogram of tiger's eye?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost for a given weight of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    weight (float): The weight of the item in kilograms.\n    Returns:\n    float: The total cost for the given weight of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price per kilogram for the item\n        price_per_kg = item_df['Price'].values[0]\n        \n        # Calculate the total cost for the given weight\n        total_cost = price_per_kg * weight\n        \n        return total_cost\n    else:\n        return None","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['calcite', \"fool's gold\", \"tiger's eye\", 'quartz', 'topaz'],\n    'Price': [7, 5, 6, 8, 9]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, \"tiger's eye\", 1\/5))","table":"Name: None\nUnit: $\nContent:\ncalcite | $7 per kilogram\nfool's gold | $5 per kilogram\ntiger's eye | $6 per kilogram\nquartz | $8 per kilogram\ntopaz | $9 per kilogram"}
{"level":5,"answer":50.0,"prediction":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pizza slices sold and returns the mode of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of pizza slices sold by different restaurants.\n    The DataFrame should have columns 'Restaurant' and 'Number of slices sold'.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of slices sold']\n    \n    # Calculate the mode using the value_counts() function\n    mode = numbers.value_counts().idxmax()\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Restaurant': ['Pizza Italia', 'Taste of New York', 'Pizzeria Italiano', 'Pizza, Pasta and More', 'The Real Chicago', 'Deep Dish by Dan', 'The Big Cheese', 'Antonio\\'s Pizzeria'],\n    'Number of slices sold': [50, 50, 59, 58, 50, 59, 56, 56]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"Some pizza restaurants compared their pizza sales. What is the mode of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pizza slices sold and returns the mode of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of pizza slices sold by different restaurants.\n    The DataFrame should have columns 'Restaurant' and 'Number of slices sold'.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of slices sold']\n    \n    # Calculate the mode using the value_counts() function\n    mode = numbers.value_counts().idxmax()\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Restaurant': ['Pizza Italia', 'Taste of New York', 'Pizzeria Italiano', 'Pizza, Pasta and More', 'The Real Chicago', 'Deep Dish by Dan', 'The Big Cheese', 'Antonio\\'s Pizzeria'],\n    'Number of slices sold': [50, 50, 59, 58, 50, 59, 56, 56]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Pizza slices sold\nUnit: None\nContent:\nRestaurant | Number of slices sold\nPizza Italia | 50\nTaste of New York | 50\nPizzeria Italiano | 59\nPizza, Pasta and More | 58\nThe Real Chicago | 50\nDeep Dish by Dan | 59\nThe Big Cheese | 56\nAntonio's Pizzeria | 56"}
{"level":2,"answer":30.0,"prediction":"import pandas as pd\n\ndef calculate_pairs_of_pants(df, num_baskets):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of laundry baskets and the number of pairs of pants in each basket,\n    and returns the total number of pairs of pants in a given number of laundry baskets.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of laundry baskets and the number of pairs of pants in each basket.\n    The DataFrame should have columns 'Number of laundry baskets' and 'Number of pairs of pants'.\n    num_baskets (int): The number of laundry baskets to calculate the total number of pairs of pants for.\n    Returns:\n    int: The total number of pairs of pants in the given number of laundry baskets.\n    \"\"\"\n    # Filter the DataFrame for the given number of laundry baskets\n    filtered_df = df[df['Number of laundry baskets'] == num_baskets]\n    \n    # Check if the filtered DataFrame is empty\n    if filtered_df.empty:\n        return None\n    \n    # Get the number of pairs of pants for the given number of laundry baskets\n    num_pants = filtered_df['Number of pairs of pants'].values[0]\n    \n    return num_pants\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of laundry baskets': [1, 2, 3],\n    'Number of pairs of pants': [10, 20, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_pairs_of_pants(df, 3))","question":"Each laundry basket has 10 pairs of pants. How many pairs of pants are in 3 laundry baskets?","prediction_code":"import pandas as pd\n\ndef calculate_pairs_of_pants(df, num_baskets):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of laundry baskets and the number of pairs of pants in each basket,\n    and returns the total number of pairs of pants in a given number of laundry baskets.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of laundry baskets and the number of pairs of pants in each basket.\n    The DataFrame should have columns 'Number of laundry baskets' and 'Number of pairs of pants'.\n    num_baskets (int): The number of laundry baskets to calculate the total number of pairs of pants for.\n    Returns:\n    int: The total number of pairs of pants in the given number of laundry baskets.\n    \"\"\"\n    # Filter the DataFrame for the given number of laundry baskets\n    filtered_df = df[df['Number of laundry baskets'] == num_baskets]\n    \n    # Check if the filtered DataFrame is empty\n    if filtered_df.empty:\n        return None\n    \n    # Get the number of pairs of pants for the given number of laundry baskets\n    num_pants = filtered_df['Number of pairs of pants'].values[0]\n    \n    return num_pants","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of laundry baskets': [1, 2, 3],\n    'Number of pairs of pants': [10, 20, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_pairs_of_pants(df, 3))","table":"Name: None\nUnit: None\nContent:\nNumber of laundry baskets | Number of pairs of pants\n1 | 10\n2 | 20\n3 | ?"}
{"level":7,"answer":70.88,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of buying a certain quantity of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    item (str): The name of the item to be purchased.\n    quantity (int): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of buying the specified quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = quantity * item_price\n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['beach towel', 'fleece blanket', 'green kitchen towel', 'flannel sheet', 'yellow bath towel'],\n    'Price': [6.94, 8.86, 4.38, 9.08, 4.20]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'fleece blanket', 8))","question":"How much money does Amy need to buy 8 fleece blankets?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of buying a certain quantity of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    item (str): The name of the item to be purchased.\n    quantity (int): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of buying the specified quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = quantity * item_price\n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['beach towel', 'fleece blanket', 'green kitchen towel', 'flannel sheet', 'yellow bath towel'],\n    'Price': [6.94, 8.86, 4.38, 9.08, 4.20]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'fleece blanket', 8))","table":"Name: None\nUnit: $\nContent:\nbeach towel | $6.94\nfleece blanket | $8.86\ngreen kitchen towel | $4.38\nflannel sheet | $9.08\nyellow bath towel | $4.20"}
{"level":5,"answer":3.0,"prediction":"import pandas as pd\n\ndef count_buildings_with_floors(df):\n    \"\"\"\n    This function takes in a pandas dataframe of floors per building, and returns the number of buildings that have at least 10 floors but fewer than 50 floors.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of floors per building.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of buildings that have at least 10 floors but fewer than 50 floors.\n    \"\"\"\n    # prepare a list to calculate the number of floors in each building\n    floors = []\n    # calculate the total number of floors in each building\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            floors.append(stem * 10 + leaf[j])\n    # filter the buildings where the total number of floors is greater than or equal to 10 and less than 50\n    filtered = [floor for floor in floors if floor >= 10 and floor < 50]\n    # count the number of buildings\n    num_buildings = len(filtered)\n    return num_buildings\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3, 4, 5, 6, 7],\n    'Leaf': [[1, 2, 4], [], [9], [0], [3], [], [1], [4, 8]]\n})\n# Call the tool to solve the problem\nprint(count_buildings_with_floors(df))","question":"A city planner counted the number of floors per building in the downtown area. How many buildings have at least 10 floors but fewer than 50 floors?","prediction_code":"import pandas as pd\n\ndef count_buildings_with_floors(df):\n    \"\"\"\n    This function takes in a pandas dataframe of floors per building, and returns the number of buildings that have at least 10 floors but fewer than 50 floors.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of floors per building.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of buildings that have at least 10 floors but fewer than 50 floors.\n    \"\"\"\n    # prepare a list to calculate the number of floors in each building\n    floors = []\n    # calculate the total number of floors in each building\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            floors.append(stem * 10 + leaf[j])\n    # filter the buildings where the total number of floors is greater than or equal to 10 and less than 50\n    filtered = [floor for floor in floors if floor >= 10 and floor < 50]\n    # count the number of buildings\n    num_buildings = len(filtered)\n    return num_buildings","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3, 4, 5, 6, 7],\n    'Leaf': [[1, 2, 4], [], [9], [0], [3], [], [1], [4, 8]]\n})\n# Call the tool to solve the problem\nprint(count_buildings_with_floors(df))","table":"Name: Floors per building\nUnit: buildings\nContent:\nStem | Leaf \n0 | 1, 2, 4\n1 | \n2 | 9\n3 | 0\n4 | 3\n5 | \n6 | 1\n7 | 4, 8"}
{"level":7,"answer":38.0,"prediction":"import pandas as pd\n\ndef count_students_more_than_4_trips(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trips to the beach last summer and returns the number of students who went to the beach more than 4 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of trips and their frequencies.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who went to the beach more than 4 times.\n    \"\"\"\n    # Filter the DataFrame for trips more than 4 times\n    filtered_df = df[df['Number of trips'] > 4]\n    \n    # Calculate the total number of students who went to the beach more than 4 times\n    num_students = filtered_df['Frequency'].sum()\n    \n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [0, 1, 2, 3, 4, 5, 6],\n    'Frequency': [12, 5, 15, 6, 2, 18, 20]\n})\n# Call the tool to solve the problem\nprint(count_students_more_than_4_trips(df))","question":"Mr. Roy, the marine biology teacher, asked his students how many times they went to the beach last summer. How many students went to the beach more than 4 times?","prediction_code":"import pandas as pd\n\ndef count_students_more_than_4_trips(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trips to the beach last summer and returns the number of students who went to the beach more than 4 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of trips and their frequencies.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who went to the beach more than 4 times.\n    \"\"\"\n    # Filter the DataFrame for trips more than 4 times\n    filtered_df = df[df['Number of trips'] > 4]\n    \n    # Calculate the total number of students who went to the beach more than 4 times\n    num_students = filtered_df['Frequency'].sum()\n    \n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [0, 1, 2, 3, 4, 5, 6],\n    'Frequency': [12, 5, 15, 6, 2, 18, 20]\n})\n# Call the tool to solve the problem\nprint(count_students_more_than_4_trips(df))","table":"Name: Trips to the beach last summer\nUnit: None\nContent:\nNumber of trips | Frequency\n0 | 12\n1 | 5\n2 | 15\n3 | 6\n4 | 2\n5 | 18\n6 | 20"}
{"level":4,"answer":6.0,"prediction":"import pandas as pd\n\ndef count_wait_times_less_than(df, threshold):\n    \"\"\"\n    This function takes in a pandas DataFrame of wait times at a doctor's office and a threshold value, and returns the number of people who waited for less than the threshold time.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the wait times of patients.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    threshold (int): The threshold time in minutes.\n    Returns:\n    int: The number of people who waited for less than the threshold time.\n    \"\"\"\n    # prepare a list to store wait times\n    wait_times = []\n    # iterate through the dataframe and extract wait times\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            wait_times.append(stem * 10 + leaf[j])\n    # filter the wait times that are less than the threshold\n    filtered = [time for time in wait_times if time < threshold]\n    # count the number of wait times\n    num_people = len(filtered)\n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[3], [8, 8], [], [2], [5, 9], [], [6], [0], [0]]\n})\n# Set the threshold time\nthreshold = 74\n# Call the tool to solve the problem\nprint(count_wait_times_less_than(df, threshold))","question":"The receptionist at a doctor's office kept track of each patient's wait time. How many people waited for less than 74 minutes?","prediction_code":"import pandas as pd\n\ndef count_wait_times_less_than(df, threshold):\n    \"\"\"\n    This function takes in a pandas DataFrame of wait times at a doctor's office and a threshold value, and returns the number of people who waited for less than the threshold time.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the wait times of patients.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    threshold (int): The threshold time in minutes.\n    Returns:\n    int: The number of people who waited for less than the threshold time.\n    \"\"\"\n    # prepare a list to store wait times\n    wait_times = []\n    # iterate through the dataframe and extract wait times\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            wait_times.append(stem * 10 + leaf[j])\n    # filter the wait times that are less than the threshold\n    filtered = [time for time in wait_times if time < threshold]\n    # count the number of wait times\n    num_people = len(filtered)\n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[3], [8, 8], [], [2], [5, 9], [], [6], [0], [0]]\n})\n# Set the threshold time\nthreshold = 74\n# Call the tool to solve the problem\nprint(count_wait_times_less_than(df, threshold))","table":"Name: Doctor's office wait times (minutes)\nUnit: None\nContent:\nStem | Leaf \n1 | 3\n2 | 8, 8\n3 | \n4 | 2\n5 | 5, 9\n6 | \n7 | 6\n8 | 0\n9 | 0"}
{"level":3,"answer":242.0,"prediction":"import pandas as pd\n\ndef calculate_calls_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of phone calls received and returns the difference in the number of calls between Thursday and Wednesday.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of calls received each day.\n    The dataframe should contain \"Day\" and \"Number of calls\" columns.\n    Returns:\n    int: The difference in the number of calls between Thursday and Wednesday.\n    \"\"\"\n    # Filter the DataFrame for Thursday and Wednesday\n    thursday_calls = df[df['Day'] == 'Thursday']['Number of calls'].values[0]\n    wednesday_calls = df[df['Day'] == 'Wednesday']['Number of calls'].values[0]\n    \n    # Calculate the difference in the number of calls\n    calls_difference = thursday_calls - wednesday_calls\n    \n    return calls_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday'],\n    'Number of calls': [132, 374, 684]\n})\n# Call the tool to solve the problem\nprint(calculate_calls_difference(df))","question":"A technical support line tracked how many calls it received each day. How many more calls did the support line receive on Thursday than on Wednesday?","prediction_code":"import pandas as pd\n\ndef calculate_calls_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of phone calls received and returns the difference in the number of calls between Thursday and Wednesday.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of calls received each day.\n    The dataframe should contain \"Day\" and \"Number of calls\" columns.\n    Returns:\n    int: The difference in the number of calls between Thursday and Wednesday.\n    \"\"\"\n    # Filter the DataFrame for Thursday and Wednesday\n    thursday_calls = df[df['Day'] == 'Thursday']['Number of calls'].values[0]\n    wednesday_calls = df[df['Day'] == 'Wednesday']['Number of calls'].values[0]\n    \n    # Calculate the difference in the number of calls\n    calls_difference = thursday_calls - wednesday_calls\n    \n    return calls_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday'],\n    'Number of calls': [132, 374, 684]\n})\n# Call the tool to solve the problem\nprint(calculate_calls_difference(df))","table":"Name: Phone calls received\nUnit: calls\nContent:\nDay | Number of calls\nWednesday | 132\nThursday | 374\nFriday | 684"}
{"level":7,"answer":4.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of sticker collections and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and numbers of stickers for each person.\n    The dataframe should contain \"Name\" and \"Number of stickers\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of stickers\" column\n    min_value = df['Number of stickers'].min()\n    max_value = df['Number of stickers'].max()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Trisha', 'Alexandra', 'Hugo', 'Denise', 'Ronald', 'Louis'],\n    'Number of stickers': [7, 10, 10, 10, 6, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"Some friends compared the sizes of their sticker collections. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of sticker collections and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and numbers of stickers for each person.\n    The dataframe should contain \"Name\" and \"Number of stickers\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of stickers\" column\n    min_value = df['Number of stickers'].min()\n    max_value = df['Number of stickers'].max()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Trisha', 'Alexandra', 'Hugo', 'Denise', 'Ronald', 'Louis'],\n    'Number of stickers': [7, 10, 10, 10, 6, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Sticker collections\nUnit: None\nContent:\nName | Number of stickers\nTrisha | 7\nAlexandra | 10\nHugo | 10\nDenise | 10\nRonald | 6\nLouis | 8"}
{"level":6,"answer":9.0,"prediction":"import pandas as pd\n\ndef calculate_mean_laps(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of laps driven and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of laps driven.\n    The dataframe should contain \"Day\" and \"Number of laps\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Number of laps\" column\n    mean_laps = df['Number of laps'].mean()\n    \n    return mean_laps\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday'],\n    'Number of laps': [10, 10, 9, 9, 9, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_laps(df))","question":"A race car driver kept track of how many laps he drove in the past 6 days. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean_laps(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of laps driven and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of laps driven.\n    The dataframe should contain \"Day\" and \"Number of laps\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Number of laps\" column\n    mean_laps = df['Number of laps'].mean()\n    \n    return mean_laps","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday'],\n    'Number of laps': [10, 10, 9, 9, 9, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_laps(df))","table":"Name: Laps driven\nUnit: None\nContent:\nDay | Number of laps\nWednesday | 10\nThursday | 10\nFriday | 9\nSaturday | 9\nSunday | 9\nMonday | 7"}
{"level":6,"answer":11.0,"prediction":"import pandas as pd\n\ndef count_people_less_than_80(df):\n    \"\"\"\n    This function takes in a pandas dataframe of ages and returns the number of people who are less than 80 years old.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the ages of people.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of people who are less than 80 years old.\n    \"\"\"\n    # prepare a list to store ages\n    ages = []\n    # calculate the actual age for each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            ages.append(stem * 10 + leaf[j])\n    # filter the ages that are less than 80\n    filtered = [age for age in ages if age < 80]\n    # count the number of people\n    num_people = len(filtered)\n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7, 8],\n    'Leaf': [[3], [2], [4, 9], [1, 1], [3, 3, 6, 6, 9], [1, 4]]\n})\n# Call the tool to solve the problem\nprint(count_people_less_than_80(df))","question":"At their family reunion, the Humphrey family recorded everyone's age. How many people are less than 80 years old?","prediction_code":"import pandas as pd\n\ndef count_people_less_than_80(df):\n    \"\"\"\n    This function takes in a pandas dataframe of ages and returns the number of people who are less than 80 years old.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the ages of people.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of people who are less than 80 years old.\n    \"\"\"\n    # prepare a list to store ages\n    ages = []\n    # calculate the actual age for each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            ages.append(stem * 10 + leaf[j])\n    # filter the ages that are less than 80\n    filtered = [age for age in ages if age < 80]\n    # count the number of people\n    num_people = len(filtered)\n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7, 8],\n    'Leaf': [[3], [2], [4, 9], [1, 1], [3, 3, 6, 6, 9], [1, 4]]\n})\n# Call the tool to solve the problem\nprint(count_people_less_than_80(df))","table":"Name: Ages\nUnit: people\nContent:\nStem | Leaf \n3 | 3\n4 | 2\n5 | 4, 9\n6 | 1, 1\n7 | 3, 3, 6, 6, 9\n8 | 1, 4"}
{"level":5,"answer":191.0,"prediction":"import pandas as pd\n\ndef calculate_remaining_money(df, budget, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, a budget, and a list of items to buy.\n    It returns the remaining money after buying the specified items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    budget (float): The initial budget.\n    items (list): A list of items to buy.\n    Returns:\n    float: The remaining money after buying the specified items.\n    \"\"\"\n    # Initialize the remaining money\n    remaining_money = budget\n    \n    # Iterate through the items and subtract their prices from the remaining money\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            remaining_money -= item_price\n    \n    return remaining_money\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['king snake', 'chameleon', 'chinchilla', 'bearded dragon'],\n    'Price': [119.00, 277.00, 112.00, 118.00]\n})\n\n# Set the initial budget\nbudget = 428.00\n\n# Set the items to buy\nitems = ['king snake', 'bearded dragon']\n\n# Call the tool to solve the problem\nremaining_money = calculate_remaining_money(df, budget, items)\n\n# Print out the answer\nprint(remaining_money)","question":"Matthew has $428.00. How much money will Matthew have left if he buys a king snake and a bearded dragon?","prediction_code":"import pandas as pd\n\ndef calculate_remaining_money(df, budget, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, a budget, and a list of items to buy.\n    It returns the remaining money after buying the specified items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    budget (float): The initial budget.\n    items (list): A list of items to buy.\n    Returns:\n    float: The remaining money after buying the specified items.\n    \"\"\"\n    # Initialize the remaining money\n    remaining_money = budget\n    \n    # Iterate through the items and subtract their prices from the remaining money\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            remaining_money -= item_price\n    \n    return remaining_money","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['king snake', 'chameleon', 'chinchilla', 'bearded dragon'],\n    'Price': [119.00, 277.00, 112.00, 118.00]\n})\n\n# Set the initial budget\nbudget = 428.00\n\n# Set the items to buy\nitems = ['king snake', 'bearded dragon']\n\n# Call the tool to solve the problem\nremaining_money = calculate_remaining_money(df, budget, items)\n\n# Print out the answer\nprint(remaining_money)","table":"Name: None\nUnit: $\nContent:\nking snake | $119.00\nchameleon | $277.00\nchinchilla | $112.00\nbearded dragon | $118.00"}
{"level":8,"answer":8.0,"prediction":"import pandas as pd\n\ndef count_cities_with_billboards(df, min_billboards, max_billboards):\n    \"\"\"\n    This function takes in a pandas dataframe of billboards per city and returns the number of cities that have at least min_billboards billboards but fewer than max_billboards billboards.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of billboards per city.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_billboards (int): The minimum number of billboards a city should have.\n    max_billboards (int): The maximum number of billboards a city should have.\n    Returns:\n    int: The number of cities that meet the criteria.\n    \"\"\"\n    # prepare a list to calculate the number of billboards in each city\n    billboards = []\n    # calculate the total number of billboards in each city\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            billboards.append(stem * 10 + leaf[j])\n    # filter the cities where the number of billboards is greater than or equal to min_billboards and less than max_billboards\n    filtered = [billboard for billboard in billboards if min_billboards <= billboard < max_billboards]\n    # count the number of unique cities\n    num_cities = len(set(filtered))\n    return num_cities\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5],\n    'Leaf': [[0, 1, 1, 9], [3, 6, 6], [0, 1, 2, 6], [1, 9], [0, 2, 3, 7, 8]]\n})\n# Call the tool to solve the problem\nprint(count_cities_with_billboards(df, 22, 49))","question":"The advertising agency counted the number of billboards in each city in the state. How many cities have at least 22 billboards but fewer than 49 billboards?","prediction_code":"import pandas as pd\n\ndef count_cities_with_billboards(df, min_billboards, max_billboards):\n    \"\"\"\n    This function takes in a pandas dataframe of billboards per city and returns the number of cities that have at least min_billboards billboards but fewer than max_billboards billboards.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of billboards per city.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_billboards (int): The minimum number of billboards a city should have.\n    max_billboards (int): The maximum number of billboards a city should have.\n    Returns:\n    int: The number of cities that meet the criteria.\n    \"\"\"\n    # prepare a list to calculate the number of billboards in each city\n    billboards = []\n    # calculate the total number of billboards in each city\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            billboards.append(stem * 10 + leaf[j])\n    # filter the cities where the number of billboards is greater than or equal to min_billboards and less than max_billboards\n    filtered = [billboard for billboard in billboards if min_billboards <= billboard < max_billboards]\n    # count the number of unique cities\n    num_cities = len(set(filtered))\n    return num_cities","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5],\n    'Leaf': [[0, 1, 1, 9], [3, 6, 6], [0, 1, 2, 6], [1, 9], [0, 2, 3, 7, 8]]\n})\n# Call the tool to solve the problem\nprint(count_cities_with_billboards(df, 22, 49))","table":"Name: Billboards per city\nUnit: cities\nContent:\nStem | Leaf \n1 | 0, 1, 1, 9\n2 | 3, 6, 6\n3 | 0, 1, 2, 6\n4 | 1, 9\n5 | 0, 2, 3, 7, 8"}
{"level":7,"answer":-14.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of students receiving scholarships and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of students receiving scholarships per year.\n    The DataFrame should have \"Year\" and \"Students\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_students = df[df['Year'] == start_year]['Students'].values[0]\n    end_students = df[df['Year'] == end_year]['Students'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_students - start_students) \/ start_students * 100\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2015, 2016, 2017, 2018, 2019],\n    'Students': [27, 31, 31, 36, 22]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2018, 2019))","question":"The financial aid office at Murphy University produced an internal report on the number of students receiving scholarships. According to the table, what was the rate of change between 2018 and 2019?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of students receiving scholarships and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of students receiving scholarships per year.\n    The DataFrame should have \"Year\" and \"Students\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_students = df[df['Year'] == start_year]['Students'].values[0]\n    end_students = df[df['Year'] == end_year]['Students'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_students - start_students) \/ start_students * 100\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2015, 2016, 2017, 2018, 2019],\n    'Students': [27, 31, 31, 36, 22]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2018, 2019))","table":"Name: Students receiving scholarships\nUnit: students per year\nContent:\nYear | Students\n2015 | 27\n2016 | 31\n2017 | 31\n2018 | 36\n2019 | 22"}
{"level":5,"answer":3.0,"prediction":"import pandas as pd\n\ndef count_bags_with_26_red_gumdrops(df):\n    \"\"\"\n    This function takes in a pandas dataframe of red gumdrops per bag, and returns the number of bags that have exactly 26 red gumdrops.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of red gumdrops per bag.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of bags that have exactly 26 red gumdrops.\n    \"\"\"\n    # Initialize the count of bags with 26 red gumdrops\n    count = 0\n    \n    # Iterate through the rows of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Calculate the total number of red gumdrops in the bag\n        total_gumdrops = stem * 10 + sum(leaf)\n        \n        # Check if the total number of red gumdrops is exactly 26\n        if total_gumdrops == 26:\n            count += 1\n    \n    return count\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3, 4, 5, 6, 7],\n    'Leaf': [[8], [0, 1, 4, 7, 8], [6, 6, 6, 9], [9, 9], [1], [2, 5, 8], [0, 0, 9], [1, 3, 4, 6]]\n})\n# Call the tool to solve the problem\nprint(count_bags_with_26_red_gumdrops(df))","question":"A machine dispensed red gumdrops into bags of various sizes. How many bags had exactly 26 red gumdrops?","prediction_code":"import pandas as pd\n\ndef count_bags_with_26_red_gumdrops(df):\n    \"\"\"\n    This function takes in a pandas dataframe of red gumdrops per bag, and returns the number of bags that have exactly 26 red gumdrops.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of red gumdrops per bag.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of bags that have exactly 26 red gumdrops.\n    \"\"\"\n    # Initialize the count of bags with 26 red gumdrops\n    count = 0\n    \n    # Iterate through the rows of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Calculate the total number of red gumdrops in the bag\n        total_gumdrops = stem * 10 + sum(leaf)\n        \n        # Check if the total number of red gumdrops is exactly 26\n        if total_gumdrops == 26:\n            count += 1\n    \n    return count","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3, 4, 5, 6, 7],\n    'Leaf': [[8], [0, 1, 4, 7, 8], [6, 6, 6, 9], [9, 9], [1], [2, 5, 8], [0, 0, 9], [1, 3, 4, 6]]\n})\n# Call the tool to solve the problem\nprint(count_bags_with_26_red_gumdrops(df))","table":"Name: Red gumdrops per bag\nUnit: bags\nContent:\nStem | Leaf \n0 | 8\n1 | 0, 1, 4, 7, 8\n2 | 6, 6, 6, 9\n3 | 9, 9\n4 | 1\n5 | 2, 5, 8\n6 | 0, 0, 9\n7 | 1, 3, 4, 6"}
{"level":7,"answer":4.0,"prediction":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of stop signs per street and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of stop signs per street.\n    The dataframe should contain \"Street\" and \"Number of stop signs\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of stop signs']\n    \n    # Calculate the mode using the value_counts() function\n    mode = numbers.value_counts().idxmax()\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Street': ['Peabody Street', 'Jackson Street', 'Smith Street', 'Spring Street', 'Marshall Street', 'Watson Street', 'Irving Street', 'Mason Street'],\n    'Number of stop signs': [4, 6, 5, 4, 4, 4, 6, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"The town council reported on how many stop signs there are on each street. What is the mode of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of stop signs per street and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of stop signs per street.\n    The dataframe should contain \"Street\" and \"Number of stop signs\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of stop signs']\n    \n    # Calculate the mode using the value_counts() function\n    mode = numbers.value_counts().idxmax()\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Street': ['Peabody Street', 'Jackson Street', 'Smith Street', 'Spring Street', 'Marshall Street', 'Watson Street', 'Irving Street', 'Mason Street'],\n    'Number of stop signs': [4, 6, 5, 4, 4, 4, 6, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Stop signs\nUnit: None\nContent:\nStreet | Number of stop signs\nPeabody Street | 4\nJackson Street | 6\nSmith Street | 5\nSpring Street | 4\nMarshall Street | 4\nWatson Street | 4\nIrving Street | 6\nMason Street | 6"}
{"level":5,"answer":22.0,"prediction":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of soccer practice data and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the soccer practice data.\n    The dataframe should contain \"Month\" and \"Number of practices\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Number of practices\" column\n    mean = df['Number of practices'].mean()\n    \n    return mean\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['August', 'September', 'October', 'November', 'March', 'April'],\n    'Number of practices': [27, 26, 24, 17, 19, 19]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","question":"Sue looked over her calendar to see how many times she had soccer practice each month. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of soccer practice data and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the soccer practice data.\n    The dataframe should contain \"Month\" and \"Number of practices\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Number of practices\" column\n    mean = df['Number of practices'].mean()\n    \n    return mean","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['August', 'September', 'October', 'November', 'March', 'April'],\n    'Number of practices': [27, 26, 24, 17, 19, 19]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","table":"Name: Soccer practice\nUnit: None\nContent:\nMonth | Number of practices\nAugust | 27\nSeptember | 26\nOctober | 24\nNovember | 17\nMarch | 19\nApril | 19"}
{"level":8,"answer":2.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average food preparation time and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average food preparation time per day.\n    The DataFrame should have columns 'Day' and 'Food preparation time (minutes)'.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Filter the DataFrame for the two days\n    day1_df = df[df['Day'] == day1]\n    day2_df = df[df['Day'] == day2]\n    \n    # Get the food preparation time for each day\n    day1_time = day1_df['Food preparation time (minutes)'].values[0]\n    day2_time = day2_df['Food preparation time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (day2_time - day1_time) \/ (df.index.get_loc(day2_df.index[0]) - df.index.get_loc(day1_df.index[0]))\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Food preparation time (minutes)': [19, 22, 24, 28, 27]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Wednesday', 'Thursday'))","question":"A restaurant's average food preparation time was tracked from day to day as part of an efficiency improvement program. According to the table, what was the rate of change between Wednesday and Thursday?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average food preparation time and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average food preparation time per day.\n    The DataFrame should have columns 'Day' and 'Food preparation time (minutes)'.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Filter the DataFrame for the two days\n    day1_df = df[df['Day'] == day1]\n    day2_df = df[df['Day'] == day2]\n    \n    # Get the food preparation time for each day\n    day1_time = day1_df['Food preparation time (minutes)'].values[0]\n    day2_time = day2_df['Food preparation time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (day2_time - day1_time) \/ (df.index.get_loc(day2_df.index[0]) - df.index.get_loc(day1_df.index[0]))\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Food preparation time (minutes)': [19, 22, 24, 28, 27]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Wednesday', 'Thursday'))","table":"Name: Average food preparation time\nUnit: minutes per day\nContent:\nDay | Food preparation time (minutes)\nTuesday | 19\nWednesday | 22\nThursday | 24\nFriday | 28\nSaturday | 27"}
{"level":4,"answer":14.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(table, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table and a list of items, and returns the total cost of the items.\n    Args:\n    table (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of item names.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = table[table['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['mystery novel', 'coloring book', 'cookbook', 'airplane calendar', 'dog calendar', 'book of brainteasers'],\n    'Price': [7, 2, 8, 7, 4, 7]\n})\n\n# Define the items Christine wants to buy\nitems = ['cookbook', 'dog calendar', 'coloring book']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, items)\n\n# Print out the answer\nprint(total_cost)","question":"How much money does Christine need to buy a cookbook, a dog calendar, and a coloring book?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(table, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table and a list of items, and returns the total cost of the items.\n    Args:\n    table (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of item names.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = table[table['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['mystery novel', 'coloring book', 'cookbook', 'airplane calendar', 'dog calendar', 'book of brainteasers'],\n    'Price': [7, 2, 8, 7, 4, 7]\n})\n\n# Define the items Christine wants to buy\nitems = ['cookbook', 'dog calendar', 'coloring book']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, items)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\nmystery novel | $7\ncoloring book | $2\ncookbook | $8\nairplane calendar | $7\ndog calendar | $4\nbook of brainteasers | $7"}
{"level":7,"answer":6.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of autographs signed and returns the median of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of autographs signed each day.\n    The dataframe should contain \"Day\" and \"Number of autographs\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of autographs']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Number of autographs': [10, 3, 3, 2, 6, 7, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"An athlete counted how many autographs he signed each day. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of autographs signed and returns the median of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of autographs signed each day.\n    The dataframe should contain \"Day\" and \"Number of autographs\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of autographs']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Number of autographs': [10, 3, 3, 2, 6, 7, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Autographs signed\nUnit: None\nContent:\nDay | Number of autographs\nFriday | 10\nSaturday | 3\nSunday | 3\nMonday | 2\nTuesday | 6\nWednesday | 7\nThursday | 6"}
{"level":6,"answer":2.0,"prediction":"import pandas as pd\n\ndef count_bags_with_peanuts(df, min_peanuts, max_peanuts):\n    \"\"\"\n    This function takes in a pandas dataframe of peanuts per bag of trail mix, and returns the number of bags that have at least min_peanuts peanuts but fewer than max_peanuts peanuts.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of peanuts per bag of trail mix.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_peanuts (int): The minimum number of peanuts required in a bag.\n    max_peanuts (int): The maximum number of peanuts allowed in a bag.\n    Returns:\n    int: The number of bags that have at least min_peanuts peanuts but fewer than max_peanuts peanuts.\n    \"\"\"\n    # prepare a list to calculate peanuts in each bag\n    peanuts = []\n    # calculate the total number of peanuts in each bag\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            peanuts.append(stem * 10 + leaf[j])\n    # filter the bags where the total number of peanuts is greater than or equal to min_peanuts and less than max_peanuts\n    filtered = [peanut for peanut in peanuts if min_peanuts <= peanut < max_peanuts]\n    # count the number of rows\n    num_bags = len(filtered)\n    return num_bags\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[0, 3, 8], [], [4, 9], [3, 8]]\n})\n# Call the tool to solve the problem\nprint(count_bags_with_peanuts(df, 31, 43))","question":"Liz counted the number of peanuts in each bag of trail mix. How many bags had at least 31 peanuts but fewer than 43 peanuts?","prediction_code":"import pandas as pd\n\ndef count_bags_with_peanuts(df, min_peanuts, max_peanuts):\n    \"\"\"\n    This function takes in a pandas dataframe of peanuts per bag of trail mix, and returns the number of bags that have at least min_peanuts peanuts but fewer than max_peanuts peanuts.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of peanuts per bag of trail mix.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_peanuts (int): The minimum number of peanuts required in a bag.\n    max_peanuts (int): The maximum number of peanuts allowed in a bag.\n    Returns:\n    int: The number of bags that have at least min_peanuts peanuts but fewer than max_peanuts peanuts.\n    \"\"\"\n    # prepare a list to calculate peanuts in each bag\n    peanuts = []\n    # calculate the total number of peanuts in each bag\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            peanuts.append(stem * 10 + leaf[j])\n    # filter the bags where the total number of peanuts is greater than or equal to min_peanuts and less than max_peanuts\n    filtered = [peanut for peanut in peanuts if min_peanuts <= peanut < max_peanuts]\n    # count the number of rows\n    num_bags = len(filtered)\n    return num_bags","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[0, 3, 8], [], [4, 9], [3, 8]]\n})\n# Call the tool to solve the problem\nprint(count_bags_with_peanuts(df, 31, 43))","table":"Name: Peanuts per bag of trail mix\nUnit: bags\nContent:\nStem | Leaf \n1 | 0, 3, 8\n2 | \n3 | 4, 9\n4 | 3, 8"}
{"level":4,"answer":357.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['cockatoo', 'finch', 'chameleon', 'king snake'],\n    'Price': [207, 101, 184, 256]\n})\n\n# Define the items to calculate the total cost\nitems = ['finch', 'king snake']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Dalton need to buy a finch and a king snake?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['cockatoo', 'finch', 'chameleon', 'king snake'],\n    'Price': [207, 101, 184, 256]\n})\n\n# Define the items to calculate the total cost\nitems = ['finch', 'king snake']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\ncockatoo | $207\nfinch | $101\nchameleon | $184\nking snake | $256"}
{"level":8,"answer":0.98,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of a specific item and quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item and quantity.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['unsalted almonds', 'salted almonds', 'yogurt-covered almonds', 'chocolate-covered almonds'],\n    'Price': [2.17, 0.98, 2.00, 1.76]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'salted almonds', 1))","question":"Kenny went to the store and bought 1 kilogram of salted almonds. How much did he spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of a specific item and quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item and quantity.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['unsalted almonds', 'salted almonds', 'yogurt-covered almonds', 'chocolate-covered almonds'],\n    'Price': [2.17, 0.98, 2.00, 1.76]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'salted almonds', 1))","table":"Name: None\nUnit: $\nContent:\nunsalted almonds | $2.17 per kg\nsalted almonds | $0.98 per kg\nyogurt-covered almonds | $2.00 per kg\nchocolate-covered almonds | $1.76 per kg"}
{"level":7,"answer":10.97,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to be purchased.\n    It returns the total cost of the items.\n    \n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    items (list): A list of items to be purchased.\n    \n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['broom', 'wrench', 'can of paint', 'padlock', 'lawn sprinkler'],\n    'Price': [3.05, 6.01, 9.36, 4.96, 5.50]\n})\n\n# Define the items to be purchased\nitems = ['wrench', 'padlock']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, items)\n\n# Print out the answer\nprint(total_cost)","question":"How much money does Brittany need to buy a wrench and a padlock?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to be purchased.\n    It returns the total cost of the items.\n    \n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    items (list): A list of items to be purchased.\n    \n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['broom', 'wrench', 'can of paint', 'padlock', 'lawn sprinkler'],\n    'Price': [3.05, 6.01, 9.36, 4.96, 5.50]\n})\n\n# Define the items to be purchased\nitems = ['wrench', 'padlock']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, items)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\nbroom | $3.05\nwrench | $6.01\ncan of paint | $9.36\npadlock | $4.96\nlawn sprinkler | $5.50"}
{"level":4,"answer":48.0,"prediction":"import pandas as pd\n\ndef find_largest_number_of_problems(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of problems per test and returns the largest number of problems.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of problems per test.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of problems.\n    \"\"\"\n    # Get the maximum value in the \"Stem\" column\n    max_stem = df['Stem'].max()\n    \n    # Get the maximum value in the \"Leaf\" column\n    max_leaf = df['Leaf'].max()\n    \n    # Return the larger of the two values\n    return max(max_stem, max_leaf)\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[0, 3, 4, 4, 4, 6, 6, 9], [3, 5, 5], [4, 5, 7], [1, 2, 4, 5, 5, 5, 5, 8]]\n})\n# Call the tool to solve the problem\nprint(find_largest_number_of_problems(df))","question":"Eli counted the number of problems on each of his tests. What is the largest number of problems?","prediction_code":"import pandas as pd\n\ndef find_largest_number_of_problems(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of problems per test and returns the largest number of problems.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of problems per test.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of problems.\n    \"\"\"\n    # Get the maximum value in the \"Stem\" column\n    max_stem = df['Stem'].max()\n    \n    # Get the maximum value in the \"Leaf\" column\n    max_leaf = df['Leaf'].max()\n    \n    # Return the larger of the two values\n    return max(max_stem, max_leaf)","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[0, 3, 4, 4, 4, 6, 6, 9], [3, 5, 5], [4, 5, 7], [1, 2, 4, 5, 5, 5, 5, 8]]\n})\n# Call the tool to solve the problem\nprint(find_largest_number_of_problems(df))","table":"Name: Problems per test\nUnit: problems\nContent:\nStem | Leaf \n1 | 0, 3, 4, 4, 4, 6, 6, 9\n2 | 3, 5, 5\n3 | 4, 5, 7\n4 | 1, 2, 4, 5, 5, 5, 5, 8"}
{"level":7,"answer":64.0,"prediction":"import pandas as pd\n\ndef find_smallest_number_of_toys(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of toys per bin and returns the smallest number of toys.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of toys per bin.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of toys.\n    \"\"\"\n    # Create a list to store all the toy counts\n    toy_counts = []\n    \n    # Iterate through each row of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # If there are multiple toy counts in the \"Leaf\" column, split them and add them to the toy_counts list\n        if isinstance(leaf, str):\n            leaf = leaf.split(', ')\n            toy_counts.extend([stem * 10 + int(l) for l in leaf])\n        \n        # If there is only one toy count in the \"Leaf\" column, add it to the toy_counts list\n        elif isinstance(leaf, int):\n            toy_counts.append(stem * 10 + leaf)\n    \n    # Find the smallest number of toys\n    smallest_number_of_toys = min(toy_counts)\n    \n    return smallest_number_of_toys\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [6, 7, 8, 9],\n    'Leaf': [4, 8, '2, 7, 9', 0]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_toys(df))","question":"A toy store employee counted the number of toys in each bin in the sale section. What is the smallest number of toys?","prediction_code":"import pandas as pd\n\ndef find_smallest_number_of_toys(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of toys per bin and returns the smallest number of toys.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of toys per bin.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of toys.\n    \"\"\"\n    # Create a list to store all the toy counts\n    toy_counts = []\n    \n    # Iterate through each row of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # If there are multiple toy counts in the \"Leaf\" column, split them and add them to the toy_counts list\n        if isinstance(leaf, str):\n            leaf = leaf.split(', ')\n            toy_counts.extend([stem * 10 + int(l) for l in leaf])\n        \n        # If there is only one toy count in the \"Leaf\" column, add it to the toy_counts list\n        elif isinstance(leaf, int):\n            toy_counts.append(stem * 10 + leaf)\n    \n    # Find the smallest number of toys\n    smallest_number_of_toys = min(toy_counts)\n    \n    return smallest_number_of_toys","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [6, 7, 8, 9],\n    'Leaf': [4, 8, '2, 7, 9', 0]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_toys(df))","table":"Name: Toys per bin\nUnit: toys\nContent:\nStem | Leaf \n6 | 4\n7 | 8\n8 | 2, 7, 9\n9 | 0"}
{"level":2,"answer":60.0,"prediction":"import pandas as pd\n\ndef calculate_coconut_bars(df, num_boxes):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of coconut bars per box and the number of boxes, and returns the total number of coconut bars.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of coconut bars per box.\n    The DataFrame should have columns 'Number of boxes' and 'Number of coconut bars'.\n    num_boxes (int): The number of boxes.\n    Returns:\n    int: The total number of coconut bars.\n    \"\"\"\n    # Filter the DataFrame for the specific number of boxes\n    box_df = df[df['Number of boxes'] == num_boxes]\n    \n    # Get the number of coconut bars from the filtered DataFrame\n    num_coconut_bars = box_df['Number of coconut bars'].values[0]\n    \n    # Calculate the total number of coconut bars\n    total_coconut_bars = num_coconut_bars * num_boxes\n    \n    return total_coconut_bars\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of boxes': [1, 2, 3, 4, 5, 6],\n    'Number of coconut bars': [10, 20, 30, 40, 50, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_coconut_bars(df, 6))","question":"Each box has 10 coconut bars. How many coconut bars are in 6 boxes?","prediction_code":"import pandas as pd\n\ndef calculate_coconut_bars(df, num_boxes):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of coconut bars per box and the number of boxes, and returns the total number of coconut bars.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of coconut bars per box.\n    The DataFrame should have columns 'Number of boxes' and 'Number of coconut bars'.\n    num_boxes (int): The number of boxes.\n    Returns:\n    int: The total number of coconut bars.\n    \"\"\"\n    # Filter the DataFrame for the specific number of boxes\n    box_df = df[df['Number of boxes'] == num_boxes]\n    \n    # Get the number of coconut bars from the filtered DataFrame\n    num_coconut_bars = box_df['Number of coconut bars'].values[0]\n    \n    # Calculate the total number of coconut bars\n    total_coconut_bars = num_coconut_bars * num_boxes\n    \n    return total_coconut_bars","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of boxes': [1, 2, 3, 4, 5, 6],\n    'Number of coconut bars': [10, 20, 30, 40, 50, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_coconut_bars(df, 6))","table":"Name: None\nUnit: None\nContent:\nNumber of boxes | Number of coconut bars\n1 | 10\n2 | 20\n3 | 30\n4 | 40\n5 | 50\n6 | ?"}
{"level":6,"answer":90.0,"prediction":"import pandas as pd\n\ndef find_largest_scarf_length(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of scarf lengths and returns the length of the largest scarf.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the lengths of scarves.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The length of the largest scarf.\n    \"\"\"\n    # prepare a list to store all scarf lengths\n    lengths = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the length of each scarf and add it to the list\n        for j in range(len(leaf)):\n            lengths.append(stem * 10 + leaf[j])\n    # find the maximum length from the list\n    max_length = max(lengths)\n    return max_length\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [6, 7, 8, 9],\n    'Leaf': [[9], [1, 1, 2, 3, 4, 5, 8], [0, 0, 2, 4, 5, 6, 6, 7, 7, 7, 8, 9], [0, 0]]\n})\n# Call the tool to solve the problem\nprint(find_largest_scarf_length(df))","question":"Kayla measured the length of each scarf in the clothing store where she works. What is the length of the largest scarf?","prediction_code":"import pandas as pd\n\ndef find_largest_scarf_length(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of scarf lengths and returns the length of the largest scarf.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the lengths of scarves.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The length of the largest scarf.\n    \"\"\"\n    # prepare a list to store all scarf lengths\n    lengths = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the length of each scarf and add it to the list\n        for j in range(len(leaf)):\n            lengths.append(stem * 10 + leaf[j])\n    # find the maximum length from the list\n    max_length = max(lengths)\n    return max_length","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [6, 7, 8, 9],\n    'Leaf': [[9], [1, 1, 2, 3, 4, 5, 8], [0, 0, 2, 4, 5, 6, 6, 7, 7, 7, 8, 9], [0, 0]]\n})\n# Call the tool to solve the problem\nprint(find_largest_scarf_length(df))","table":"Name: Scarf lengths (centimeters)\nUnit: centimeters\nContent:\nStem | Leaf \n6 | 9\n7 | 1, 1, 2, 3, 4, 5, 8\n8 | 0, 0, 2, 4, 5, 6, 6, 7, 7, 7, 8, 9\n9 | 0, 0"}
{"level":5,"answer":60.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of minutes spent practicing tennis and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of minutes spent practicing tennis.\n    The dataframe should contain \"Day\" and \"Minutes\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the \"Minutes\" column as a Series\n    minutes_series = df['Minutes']\n    \n    # Calculate the median using pandas\n    median = minutes_series.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Minutes': [56, 60, 60, 58, 61]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"Kelsey jotted down how many minutes she spent practicing tennis in the past 5 days. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of minutes spent practicing tennis and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of minutes spent practicing tennis.\n    The dataframe should contain \"Day\" and \"Minutes\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the \"Minutes\" column as a Series\n    minutes_series = df['Minutes']\n    \n    # Calculate the median using pandas\n    median = minutes_series.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Minutes': [56, 60, 60, 58, 61]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Minutes spent practicing\nUnit: None\nContent:\nDay | Minutes\nSunday | 56\nMonday | 60\nTuesday | 60\nWednesday | 58\nThursday | 61"}
{"level":4,"answer":20.52,"prediction":"import pandas as pd\n\ndef calculate_total_cost(items_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to be purchased,\n    and returns the total cost of the items using pandas.\n    Args:\n    items_df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = items_df[items_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['gray sweatshirt', 'pair of jeans', 'pair of tennis shoes', 'blue sweater', 'black jacket'],\n    'Price': [8.59, 5.97, 9.64, 5.68, 5.96]\n})\n\n# Define the items to be purchased\nitems = ['gray sweatshirt', 'black jacket', 'pair of jeans']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Jackson need to buy a gray sweatshirt, a black jacket, and a pair of jeans?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(items_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to be purchased,\n    and returns the total cost of the items using pandas.\n    Args:\n    items_df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = items_df[items_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['gray sweatshirt', 'pair of jeans', 'pair of tennis shoes', 'blue sweater', 'black jacket'],\n    'Price': [8.59, 5.97, 9.64, 5.68, 5.96]\n})\n\n# Define the items to be purchased\nitems = ['gray sweatshirt', 'black jacket', 'pair of jeans']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\ngray sweatshirt | $8.59\npair of jeans | $5.97\npair of tennis shoes | $9.64\nblue sweater | $5.68\nblack jacket | $5.96"}
{"level":5,"answer":3.0,"prediction":"import pandas as pd\n\ndef count_strings_with_28_broken_lights(df):\n    \"\"\"\n    This function takes in a pandas dataframe of broken lights per string, and returns the number of strings that have exactly 28 broken lights.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken lights per string.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of strings that have exactly 28 broken lights.\n    \"\"\"\n    # prepare a list to calculate broken lights in each string\n    broken_lights = []\n    # calculate the total number of broken lights in each string\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            broken_lights.append(stem * 10 + leaf[j])\n    # filter the strings where the total number of broken lights is equal to 28\n    filtered = [lights for lights in broken_lights if lights == 28]\n    # count the number of rows\n    num_strings = len(filtered)\n    return num_strings\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[1, 7, 8, 8, 8, 9], [0, 5], [3, 8, 8], [9, 9], [0, 7], [], [3, 6, 7]]\n})\n# Call the tool to solve the problem\nprint(count_strings_with_28_broken_lights(df))","question":"While hanging Christmas lights for neighbors, Felix counted the number of broken lights on each string. How many strings had exactly 28 broken lights?","prediction_code":"import pandas as pd\n\ndef count_strings_with_28_broken_lights(df):\n    \"\"\"\n    This function takes in a pandas dataframe of broken lights per string, and returns the number of strings that have exactly 28 broken lights.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken lights per string.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of strings that have exactly 28 broken lights.\n    \"\"\"\n    # prepare a list to calculate broken lights in each string\n    broken_lights = []\n    # calculate the total number of broken lights in each string\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            broken_lights.append(stem * 10 + leaf[j])\n    # filter the strings where the total number of broken lights is equal to 28\n    filtered = [lights for lights in broken_lights if lights == 28]\n    # count the number of rows\n    num_strings = len(filtered)\n    return num_strings","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[1, 7, 8, 8, 8, 9], [0, 5], [3, 8, 8], [9, 9], [0, 7], [], [3, 6, 7]]\n})\n# Call the tool to solve the problem\nprint(count_strings_with_28_broken_lights(df))","table":"Name: Broken lights per string\nUnit: strings\nContent:\nStem | Leaf \n2 | 1, 7, 8, 8, 8, 9\n3 | 0, 5\n4 | 3, 8, 8\n5 | 9, 9\n6 | 0, 7\n7 | \n8 | 3, 6, 7"}
{"level":8,"answer":19.0,"prediction":"import pandas as pd\n\ndef count_students_made_frames(df, num_frames):\n    \"\"\"\n    This function takes in a pandas DataFrame of picture frames made by students and returns the number of students who made exactly a given number of frames.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of picture frames made by students.\n    The dataframe should contain \"Picture frames made\" and \"Frequency\" columns.\n    num_frames (int): The number of frames to count.\n    Returns:\n    int: The number of students who made exactly the given number of frames.\n    \"\"\"\n    # Filter the DataFrame for the rows where the number of frames matches the given number\n    filtered_df = df[df['Picture frames made'] == num_frames]\n    \n    # Get the frequency of the matching rows\n    frequency = filtered_df['Frequency'].sum()\n    \n    return frequency\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Picture frames made': [0, 1, 2, 3, 4, 5, 6],\n    'Frequency': [2, 10, 3, 18, 17, 11, 19]\n})\n# Call the tool to solve the problem\nprint(count_students_made_frames(df, 6))","question":"The shop teacher, Mr. Johnston, wrote down how many picture frames the students made last week. How many students made exactly 6 picture frames?","prediction_code":"import pandas as pd\n\ndef count_students_made_frames(df, num_frames):\n    \"\"\"\n    This function takes in a pandas DataFrame of picture frames made by students and returns the number of students who made exactly a given number of frames.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of picture frames made by students.\n    The dataframe should contain \"Picture frames made\" and \"Frequency\" columns.\n    num_frames (int): The number of frames to count.\n    Returns:\n    int: The number of students who made exactly the given number of frames.\n    \"\"\"\n    # Filter the DataFrame for the rows where the number of frames matches the given number\n    filtered_df = df[df['Picture frames made'] == num_frames]\n    \n    # Get the frequency of the matching rows\n    frequency = filtered_df['Frequency'].sum()\n    \n    return frequency","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Picture frames made': [0, 1, 2, 3, 4, 5, 6],\n    'Frequency': [2, 10, 3, 18, 17, 11, 19]\n})\n# Call the tool to solve the problem\nprint(count_students_made_frames(df, 6))","table":"Name: Making picture frames\nUnit: None\nContent:\nPicture frames made | Frequency\n0 | 2\n1 | 10\n2 | 3\n3 | 18\n4 | 17\n5 | 11\n6 | 19"}
{"level":3,"answer":3873.0,"prediction":"import pandas as pd\n\ndef calculate_total_patients(df, months):\n    \"\"\"\n    This function takes in a pandas DataFrame of patients seen per month and a list of months, and returns the total number of patients seen in the specified months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of patients seen per month.\n    The dataframe should contain \"Month\" and \"Number of patients\" columns.\n    months (list): A list of months for which the total number of patients should be calculated.\n    Returns:\n    int: The total number of patients seen in the specified months.\n    \"\"\"\n    # Filter the DataFrame for the specified months\n    filtered_df = df[df['Month'].isin(months)]\n    \n    # Calculate the total number of patients\n    total_patients = filtered_df['Number of patients'].sum()\n    \n    return total_patients\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['October', 'November', 'December', 'January', 'February'],\n    'Number of patients': [1004, 1907, 1381, 1908, 1966]\n})\n\n# Specify the months for which the total number of patients should be calculated\nmonths = ['November', 'February']\n\n# Call the tool to solve the problem\nprint(calculate_total_patients(df, months))","question":"A doctor's records revealed how many patients he saw each month. How many patients did the doctor see in total in November and February?","prediction_code":"import pandas as pd\n\ndef calculate_total_patients(df, months):\n    \"\"\"\n    This function takes in a pandas DataFrame of patients seen per month and a list of months, and returns the total number of patients seen in the specified months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of patients seen per month.\n    The dataframe should contain \"Month\" and \"Number of patients\" columns.\n    months (list): A list of months for which the total number of patients should be calculated.\n    Returns:\n    int: The total number of patients seen in the specified months.\n    \"\"\"\n    # Filter the DataFrame for the specified months\n    filtered_df = df[df['Month'].isin(months)]\n    \n    # Calculate the total number of patients\n    total_patients = filtered_df['Number of patients'].sum()\n    \n    return total_patients","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['October', 'November', 'December', 'January', 'February'],\n    'Number of patients': [1004, 1907, 1381, 1908, 1966]\n})\n\n# Specify the months for which the total number of patients should be calculated\nmonths = ['November', 'February']\n\n# Call the tool to solve the problem\nprint(calculate_total_patients(df, months))","table":"Name: Patients seen\nUnit: patients\nContent:\nMonth | Number of patients\nOctober | 1,004\nNovember | 1,907\nDecember | 1,381\nJanuary | 1,908\nFebruary | 1,966"}
{"level":7,"answer":23.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of leftover loaves of bread per day and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of leftover loaves of bread per day.\n    The dataframe should contain \"Day\" and \"Leftover loaves\" columns.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Get the leftover loaves for the two days\n    loaves_day1 = df[df['Day'] == day1]['Leftover loaves'].values[0]\n    loaves_day2 = df[df['Day'] == day2]['Leftover loaves'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (loaves_day2 - loaves_day1) \/ loaves_day1\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Leftover loaves': [24, 9, 19, 15, 38]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Wednesday', 'Thursday'))","question":"A vendor who sold bread at farmers' markets counted the number of leftover loaves at the end of each day. According to the table, what was the rate of change between Wednesday and Thursday?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of leftover loaves of bread per day and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of leftover loaves of bread per day.\n    The dataframe should contain \"Day\" and \"Leftover loaves\" columns.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Get the leftover loaves for the two days\n    loaves_day1 = df[df['Day'] == day1]['Leftover loaves'].values[0]\n    loaves_day2 = df[df['Day'] == day2]['Leftover loaves'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (loaves_day2 - loaves_day1) \/ loaves_day1\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Leftover loaves': [24, 9, 19, 15, 38]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Wednesday', 'Thursday'))","table":"Name: Loaves of leftover bread\nUnit: loaves per day\nContent:\nDay | Leftover loaves\nSunday | 24\nMonday | 9\nTuesday | 19\nWednesday | 15\nThursday | 38"}
{"level":4,"answer":8.0,"prediction":"import pandas as pd\n\ndef get_stock_price(df, company, day):\n    \"\"\"\n    This function takes in a pandas DataFrame of stock prices, the name of a company, and a day, and returns the stock price of the company on that day.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing stock prices with columns 'Company', 'Wednesday', and 'Thursday'.\n    company (str): The name of the company.\n    day (str): The day for which the stock price is required ('Wednesday' or 'Thursday').\n    Returns:\n    float: The stock price of the company on the specified day.\n    \"\"\"\n    # Filter the DataFrame for the specific company\n    company_df = df[df['Company'] == company]\n    \n    # Get the stock price for the specified day\n    stock_price = company_df[day].values[0]\n    \n    return stock_price\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Company': ['Houston Sporting Goods', 'Computer Data Company', 'Jonas Incorporated'],\n    'Wednesday': [14, 18, 3],\n    'Thursday': [17, 5, 8]\n})\n\n# Call the tool to solve the problem\nprint(get_stock_price(df, 'Jonas Incorporated', 'Thursday'))","question":"A stock broker followed the stock prices of a certain set of companies. How much did Jonas Incorporated's stock cost on Thursday?","prediction_code":"import pandas as pd\n\ndef get_stock_price(df, company, day):\n    \"\"\"\n    This function takes in a pandas DataFrame of stock prices, the name of a company, and a day, and returns the stock price of the company on that day.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing stock prices with columns 'Company', 'Wednesday', and 'Thursday'.\n    company (str): The name of the company.\n    day (str): The day for which the stock price is required ('Wednesday' or 'Thursday').\n    Returns:\n    float: The stock price of the company on the specified day.\n    \"\"\"\n    # Filter the DataFrame for the specific company\n    company_df = df[df['Company'] == company]\n    \n    # Get the stock price for the specified day\n    stock_price = company_df[day].values[0]\n    \n    return stock_price","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Company': ['Houston Sporting Goods', 'Computer Data Company', 'Jonas Incorporated'],\n    'Wednesday': [14, 18, 3],\n    'Thursday': [17, 5, 8]\n})\n\n# Call the tool to solve the problem\nprint(get_stock_price(df, 'Jonas Incorporated', 'Thursday'))","table":"Name: Stock prices\nUnit: $\nContent:\nCompany | Wednesday | Thursday\nHouston Sporting Goods | $14 | $17\nComputer Data Company | $18 | $5\nJonas Incorporated | $3 | $8"}
{"level":6,"answer":5.0,"prediction":"import pandas as pd\n\ndef count_schools_with_classrooms(df, min_classrooms, max_classrooms):\n    \"\"\"\n    This function takes in a pandas dataframe of classrooms per school and returns the number of schools that have at least min_classrooms but fewer than max_classrooms classrooms.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of classrooms per school.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_classrooms (int): The minimum number of classrooms required.\n    max_classrooms (int): The maximum number of classrooms allowed.\n    Returns:\n    int: The number of schools that have at least min_classrooms but fewer than max_classrooms classrooms.\n    \"\"\"\n    # prepare a list to calculate the number of classrooms in each school\n    classrooms = []\n    # calculate the total number of classrooms in each school\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            classrooms.append(stem * 10 + leaf[j])\n    # filter the schools where the total number of classrooms is greater than or equal to min_classrooms and less than max_classrooms\n    filtered = [room for room in classrooms if room >= min_classrooms and room < max_classrooms]\n    # count the number of unique schools\n    num_schools = len(set(filtered))\n    return num_schools\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[2, 2, 4], [5], [1], [], [7], [6, 8], [7, 8], [0]]\n})\n# Set the minimum and maximum number of classrooms\nmin_classrooms = 64\nmax_classrooms = 90\n# Call the tool to solve the problem\nprint(count_schools_with_classrooms(df, min_classrooms, max_classrooms))","question":"For a social studies project, Adam counted the number of classrooms in each school in the city. How many schools have at least 64 classrooms but fewer than 90 classrooms?","prediction_code":"import pandas as pd\n\ndef count_schools_with_classrooms(df, min_classrooms, max_classrooms):\n    \"\"\"\n    This function takes in a pandas dataframe of classrooms per school and returns the number of schools that have at least min_classrooms but fewer than max_classrooms classrooms.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of classrooms per school.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_classrooms (int): The minimum number of classrooms required.\n    max_classrooms (int): The maximum number of classrooms allowed.\n    Returns:\n    int: The number of schools that have at least min_classrooms but fewer than max_classrooms classrooms.\n    \"\"\"\n    # prepare a list to calculate the number of classrooms in each school\n    classrooms = []\n    # calculate the total number of classrooms in each school\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            classrooms.append(stem * 10 + leaf[j])\n    # filter the schools where the total number of classrooms is greater than or equal to min_classrooms and less than max_classrooms\n    filtered = [room for room in classrooms if room >= min_classrooms and room < max_classrooms]\n    # count the number of unique schools\n    num_schools = len(set(filtered))\n    return num_schools","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[2, 2, 4], [5], [1], [], [7], [6, 8], [7, 8], [0]]\n})\n# Set the minimum and maximum number of classrooms\nmin_classrooms = 64\nmax_classrooms = 90\n# Call the tool to solve the problem\nprint(count_schools_with_classrooms(df, min_classrooms, max_classrooms))","table":"Name: Classrooms per school\nUnit: schools\nContent:\nStem | Leaf \n2 | 2, 2, 4\n3 | 5\n4 | 1\n5 | \n6 | 7\n7 | 6, 8\n8 | 7, 8\n9 | 0"}
{"level":7,"answer":11639.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['designer ball gown', 'designer coat', 'designer watch', 'pair of designer shoes'],\n    'Price': [5347.00, 9698.00, 6292.00, 6112.00]\n})\n\n# Call the tool to solve the problem\nitems = ['designer ball gown', 'designer watch']\nprint(calculate_total_cost(df, items))","question":"How much money does Gina need to buy a designer ball gown and a designer watch?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['designer ball gown', 'designer coat', 'designer watch', 'pair of designer shoes'],\n    'Price': [5347.00, 9698.00, 6292.00, 6112.00]\n})\n\n# Call the tool to solve the problem\nitems = ['designer ball gown', 'designer watch']\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\ndesigner ball gown | $5,347.00\ndesigner coat | $9,698.00\ndesigner watch | $6,292.00\npair of designer shoes | $6,112.00"}
{"level":8,"answer":37.0,"prediction":"import pandas as pd\n\ndef count_students_with_picture_frames(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of picture frames made by students and returns the number of students who made at least 1 picture frame.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of picture frames made by students.\n    The dataframe should contain \"Picture frames made\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who made at least 1 picture frame.\n    \"\"\"\n    # Filter the DataFrame for students who made at least 1 picture frame\n    filtered_df = df[df['Picture frames made'] >= 1]\n    \n    # Count the number of rows in the filtered DataFrame\n    num_students = len(filtered_df)\n    \n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Picture frames made': [0, 1, 2, 3, 4, 5],\n    'Frequency': [6, 2, 8, 4, 13, 10]\n})\n# Call the tool to solve the problem\nprint(count_students_with_picture_frames(df))","question":"The shop teacher, Mr. Sherman, wrote down how many picture frames the students made last week. How many students made at least 1 picture frame?","prediction_code":"import pandas as pd\n\ndef count_students_with_picture_frames(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of picture frames made by students and returns the number of students who made at least 1 picture frame.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of picture frames made by students.\n    The dataframe should contain \"Picture frames made\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who made at least 1 picture frame.\n    \"\"\"\n    # Filter the DataFrame for students who made at least 1 picture frame\n    filtered_df = df[df['Picture frames made'] >= 1]\n    \n    # Count the number of rows in the filtered DataFrame\n    num_students = len(filtered_df)\n    \n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Picture frames made': [0, 1, 2, 3, 4, 5],\n    'Frequency': [6, 2, 8, 4, 13, 10]\n})\n# Call the tool to solve the problem\nprint(count_students_with_picture_frames(df))","table":"Name: Making picture frames\nUnit: None\nContent:\nPicture frames made | Frequency\n0 | 6\n1 | 2\n2 | 8\n3 | 4\n4 | 13\n5 | 10"}
{"level":6,"answer":14.7,"prediction":"import pandas as pd\n\ndef calculate_cost(df, item, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame of bead prices, an item name, and a weight in kilograms, and returns the cost of buying that weight of the item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bead prices with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    weight (float): The weight of the item in kilograms.\n    Returns:\n    float: The cost of buying the specified weight of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        cost = item_price * weight\n        return cost\n    else:\n        return None\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['star-shaped beads', 'spherical beads', 'oval beads', 'heart-shaped beads', 'square beads', 'flower-shaped beads', 'rectangular beads'],\n    'Price': [2, 2, 3, 3, 3, 2, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_cost(df, 'heart-shaped beads', 4 + 9\/10))","question":"How much would it cost to buy 4+9\/10 kilograms of heart-shaped beads?","prediction_code":"import pandas as pd\n\ndef calculate_cost(df, item, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame of bead prices, an item name, and a weight in kilograms, and returns the cost of buying that weight of the item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bead prices with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    weight (float): The weight of the item in kilograms.\n    Returns:\n    float: The cost of buying the specified weight of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        cost = item_price * weight\n        return cost\n    else:\n        return None","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['star-shaped beads', 'spherical beads', 'oval beads', 'heart-shaped beads', 'square beads', 'flower-shaped beads', 'rectangular beads'],\n    'Price': [2, 2, 3, 3, 3, 2, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_cost(df, 'heart-shaped beads', 4 + 9\/10))","table":"Name: None\nUnit: $\nContent:\nstar-shaped beads | $2\/kg\nspherical beads | $2\/kg\noval beads | $3\/kg\nheart-shaped beads | $3\/kg\nsquare beads | $3\/kg\nflower-shaped beads | $2\/kg\nrectangular beads | $3\/kg"}
{"level":7,"answer":3.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of games won by the Hillsboro baseball team and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of games won by the Hillsboro baseball team each year.\n    The DataFrame should have columns 'Year' and 'Games won'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_games_won = df[df['Year'] == start_year]['Games won'].values[0]\n    end_games_won = df[df['Year'] == end_year]['Games won'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_games_won - start_games_won) \/ (end_year - start_year)\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2014, 2015, 2016, 2017, 2018],\n    'Games won': [20, 23, 24, 28, 10]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2014, 2015))","question":"Fans of the Hillsboro baseball team compared the number of games won by their team each year. According to the table, what was the rate of change between 2014 and 2015?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of games won by the Hillsboro baseball team and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of games won by the Hillsboro baseball team each year.\n    The DataFrame should have columns 'Year' and 'Games won'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_games_won = df[df['Year'] == start_year]['Games won'].values[0]\n    end_games_won = df[df['Year'] == end_year]['Games won'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_games_won - start_games_won) \/ (end_year - start_year)\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2014, 2015, 2016, 2017, 2018],\n    'Games won': [20, 23, 24, 28, 10]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2014, 2015))","table":"Name: Games won by the Hillsboro baseball team\nUnit: games per year\nContent:\nYear | Games won\n2014 | 20\n2015 | 23\n2016 | 24\n2017 | 28\n2018 | 10"}
{"level":6,"answer":18.0,"prediction":"import pandas as pd\n\ndef count_bushes_with_fewer_roses(df, threshold):\n    \"\"\"\n    This function takes in a pandas dataframe of roses per bush and a threshold, and returns the number of bushes that have fewer than the threshold number of roses.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of roses per bush.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    threshold (int): The threshold number of roses.\n    Returns:\n    int: The number of bushes that have fewer than the threshold number of roses.\n    \"\"\"\n    # prepare a list to calculate the number of roses in each bush\n    roses = []\n    # calculate the total number of roses in each bush\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            roses.append(stem * 10 + leaf[j])\n    # filter the bushes where the total number of roses is less than the threshold\n    filtered = [rose for rose in roses if rose < threshold]\n    # count the number of rows\n    num_bushes = len(filtered)\n    return num_bushes\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[4], [0, 4], [1, 7, 9], [0, 3, 4, 5, 6, 7, 7, 7], [1, 2, 9], [1, 4, 4, 6], [4], [0]]\n})\n# Set the threshold\nthreshold = 73\n# Call the tool to solve the problem\nprint(count_bushes_with_fewer_roses(df, threshold))","question":"The owner of a plant nursery wrote down the number of roses on each bush. How many bushes have fewer than 73 roses?","prediction_code":"import pandas as pd\n\ndef count_bushes_with_fewer_roses(df, threshold):\n    \"\"\"\n    This function takes in a pandas dataframe of roses per bush and a threshold, and returns the number of bushes that have fewer than the threshold number of roses.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of roses per bush.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    threshold (int): The threshold number of roses.\n    Returns:\n    int: The number of bushes that have fewer than the threshold number of roses.\n    \"\"\"\n    # prepare a list to calculate the number of roses in each bush\n    roses = []\n    # calculate the total number of roses in each bush\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            roses.append(stem * 10 + leaf[j])\n    # filter the bushes where the total number of roses is less than the threshold\n    filtered = [rose for rose in roses if rose < threshold]\n    # count the number of rows\n    num_bushes = len(filtered)\n    return num_bushes","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[4], [0, 4], [1, 7, 9], [0, 3, 4, 5, 6, 7, 7, 7], [1, 2, 9], [1, 4, 4, 6], [4], [0]]\n})\n# Set the threshold\nthreshold = 73\n# Call the tool to solve the problem\nprint(count_bushes_with_fewer_roses(df, threshold))","table":"Name: Roses per bush\nUnit: bushes\nContent:\nStem | Leaf \n2 | 4\n3 | 0, 4\n4 | 1, 7, 9\n5 | 0, 3, 4, 5, 6, 7, 7, 7\n6 | 1, 2, 9\n7 | 1, 4, 4, 6\n8 | 4\n9 | 0"}
{"level":8,"answer":20.0,"prediction":"import pandas as pd\n\ndef count_members_more_than_4_trips(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trips to the zoo last year and returns the number of members who went to the zoo more than 4 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of trips and their frequencies.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of members who went to the zoo more than 4 times.\n    \"\"\"\n    # Filter the DataFrame for trips more than 4 times\n    filtered_df = df[df['Number of trips'] > 4]\n    \n    # Calculate the total number of members who went to the zoo more than 4 times\n    num_members = filtered_df['Frequency'].sum()\n    \n    return num_members\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [0, 1, 2, 3, 4, 5],\n    'Frequency': [6, 11, 5, 17, 19, 20]\n})\n# Call the tool to solve the problem\nprint(count_members_more_than_4_trips(df))","question":"The members of the science club shared how many times they had been to the zoo last year. How many members went to the zoo more than 4 times?","prediction_code":"import pandas as pd\n\ndef count_members_more_than_4_trips(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trips to the zoo last year and returns the number of members who went to the zoo more than 4 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of trips and their frequencies.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of members who went to the zoo more than 4 times.\n    \"\"\"\n    # Filter the DataFrame for trips more than 4 times\n    filtered_df = df[df['Number of trips'] > 4]\n    \n    # Calculate the total number of members who went to the zoo more than 4 times\n    num_members = filtered_df['Frequency'].sum()\n    \n    return num_members","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [0, 1, 2, 3, 4, 5],\n    'Frequency': [6, 11, 5, 17, 19, 20]\n})\n# Call the tool to solve the problem\nprint(count_members_more_than_4_trips(df))","table":"Name: Trips to the zoo last year\nUnit: None\nContent:\nNumber of trips | Frequency\n0 | 6\n1 | 11\n2 | 5\n3 | 17\n4 | 19\n5 | 20"}
{"level":6,"answer":8.8,"prediction":"import pandas as pd\n\ndef calculate_total_cost(sauce_df, sauce, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a sauce table, a specific sauce, and the weight of the sauce in pounds,\n    and returns the total cost of the sauce using pandas.\n    Args:\n    sauce_df (pd.DataFrame): A pandas DataFrame containing sauce names and their prices with columns 'Sauce' and 'Price'.\n    sauce (str): The name of the sauce.\n    weight (float): The weight of the sauce in pounds.\n    Returns:\n    float: The total cost of the sauce.\n    \"\"\"\n    # Filter the DataFrame for the specific sauce\n    sauce_row = sauce_df[sauce_df['Sauce'] == sauce]\n    \n    # Check if the sauce exists in the DataFrame\n    if not sauce_row.empty:\n        sauce_price = sauce_row['Price'].values[0]\n        total_cost = sauce_price * weight\n        return total_cost\n    else:\n        return None\n########################################\n# Initialize the table into a dataframe\nsauce_df = pd.DataFrame({\n    'Sauce': ['marinara sauce', 'tomato sauce', 'chicken sauce', 'pesto sauce', 'alfredo sauce'],\n    'Price': [4, 7, 7, 5, 3]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(sauce_df, 'marinara sauce', 2.2))","question":"Alexandra went to the store and bought 2.2 pounds of marinara sauce. How much did she spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(sauce_df, sauce, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a sauce table, a specific sauce, and the weight of the sauce in pounds,\n    and returns the total cost of the sauce using pandas.\n    Args:\n    sauce_df (pd.DataFrame): A pandas DataFrame containing sauce names and their prices with columns 'Sauce' and 'Price'.\n    sauce (str): The name of the sauce.\n    weight (float): The weight of the sauce in pounds.\n    Returns:\n    float: The total cost of the sauce.\n    \"\"\"\n    # Filter the DataFrame for the specific sauce\n    sauce_row = sauce_df[sauce_df['Sauce'] == sauce]\n    \n    # Check if the sauce exists in the DataFrame\n    if not sauce_row.empty:\n        sauce_price = sauce_row['Price'].values[0]\n        total_cost = sauce_price * weight\n        return total_cost\n    else:\n        return None","prediction_call":"# Initialize the table into a dataframe\nsauce_df = pd.DataFrame({\n    'Sauce': ['marinara sauce', 'tomato sauce', 'chicken sauce', 'pesto sauce', 'alfredo sauce'],\n    'Price': [4, 7, 7, 5, 3]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(sauce_df, 'marinara sauce', 2.2))","table":"Name: None\nUnit: $\nContent:\nmarinara sauce | $4\/lb\ntomato sauce | $7\/lb\nchicken sauce | $7\/lb\npesto sauce | $5\/lb\nalfredo sauce | $3\/lb"}
{"level":5,"answer":40.0,"prediction":"import pandas as pd\nfrom statistics import mode\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of scores and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the scores.\n    The dataframe should contain \"Name\" and \"Score\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the scores column from the DataFrame\n    scores = df['Score']\n    \n    # Calculate the mode of the scores\n    mode_score = mode(scores)\n    \n    return mode_score\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['William', 'Quinn', 'Michael', 'Sandeep', 'Lucia'],\n    'Score': [44, 40, 44, 40, 40]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"Some friends played miniature golf and wrote down their scores. What is the mode of the numbers?","prediction_code":"import pandas as pd\nfrom statistics import mode\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of scores and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the scores.\n    The dataframe should contain \"Name\" and \"Score\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the scores column from the DataFrame\n    scores = df['Score']\n    \n    # Calculate the mode of the scores\n    mode_score = mode(scores)\n    \n    return mode_score","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['William', 'Quinn', 'Michael', 'Sandeep', 'Lucia'],\n    'Score': [44, 40, 44, 40, 40]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Miniature golf scores\nUnit: None\nContent:\nName | Score\nWilliam | 44\nQuinn | 40\nMichael | 44\nSandeep | 40\nLucia | 40"}
{"level":8,"answer":70.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are menu item names and the values are the number of pounds for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the menu items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['gingersnap cookie dough', 'snickerdoodle cookie dough', 'double chocolate cookie dough', 'oatmeal raisin cookie dough', 'peanut butter cookie dough', 'chocolate chip cookie dough'],\n    'Price': [8, 4, 8, 6, 8, 7]\n})\n\n# Initialize the orders dictionary\norders = {\n    'gingersnap cookie dough': 5,\n    'snickerdoodle cookie dough': 4,\n    'chocolate chip cookie dough': 2\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","question":"Emilia went to the store and bought 5 pounds of gingersnap cookie dough, 4 pounds of snickerdoodle cookie dough, and 2 pounds of chocolate chip cookie dough. How much did she spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are menu item names and the values are the number of pounds for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the menu items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['gingersnap cookie dough', 'snickerdoodle cookie dough', 'double chocolate cookie dough', 'oatmeal raisin cookie dough', 'peanut butter cookie dough', 'chocolate chip cookie dough'],\n    'Price': [8, 4, 8, 6, 8, 7]\n})\n\n# Initialize the orders dictionary\norders = {\n    'gingersnap cookie dough': 5,\n    'snickerdoodle cookie dough': 4,\n    'chocolate chip cookie dough': 2\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","table":"Name: None\nUnit: $\nContent:\ngingersnap cookie dough | $8\/pound\nsnickerdoodle cookie dough | $4\/pound\ndouble chocolate cookie dough | $8\/pound\noatmeal raisin cookie dough | $6\/pound\npeanut butter cookie dough | $8\/pound\nchocolate chip cookie dough | $7\/pound"}
{"level":5,"answer":98.0,"prediction":"import pandas as pd\nimport statistics\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pretzels sold and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pretzels sold.\n    The dataframe should contain \"Day\" and \"Number of pretzels\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of pretzels']\n    \n    # Calculate the mode using the statistics module\n    mode = statistics.mode(numbers)\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Number of pretzels': [98, 98, 97, 97, 98]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"A pretzel stand owner kept track of the number of pretzels sold during the past 5 days. What is the mode of the numbers?","prediction_code":"import pandas as pd\nimport statistics\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pretzels sold and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pretzels sold.\n    The dataframe should contain \"Day\" and \"Number of pretzels\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of pretzels']\n    \n    # Calculate the mode using the statistics module\n    mode = statistics.mode(numbers)\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Number of pretzels': [98, 98, 97, 97, 98]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Pretzels sold\nUnit: None\nContent:\nDay | Number of pretzels\nSunday | 98\nMonday | 98\nTuesday | 97\nWednesday | 97\nThursday | 98"}
{"level":3,"answer":630.0,"prediction":"import pandas as pd\n\ndef calculate_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of apples picked and returns the difference in the number of apples picked on Friday and Wednesday.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of apples picked on different days.\n    The dataframe should contain \"Day\" and \"Number of apples\" columns.\n    Returns:\n    int: The difference in the number of apples picked on Friday and Wednesday.\n    \"\"\"\n    # Filter the DataFrame for Wednesday and Friday\n    wednesday_df = df[df['Day'] == 'Wednesday']\n    friday_df = df[df['Day'] == 'Friday']\n    \n    # Get the number of apples picked on Wednesday and Friday\n    wednesday_apples = wednesday_df['Number of apples'].values[0]\n    friday_apples = friday_df['Number of apples'].values[0]\n    \n    # Calculate the difference\n    difference = friday_apples - wednesday_apples\n    \n    return difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday'],\n    'Number of apples': [154, 394, 784]\n})\n# Call the tool to solve the problem\nprint(calculate_difference(df))","question":"The owner of an orchard kept records about how many apples were picked in the past 3 days. How many more apples were picked on Friday than on Wednesday?","prediction_code":"import pandas as pd\n\ndef calculate_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of apples picked and returns the difference in the number of apples picked on Friday and Wednesday.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of apples picked on different days.\n    The dataframe should contain \"Day\" and \"Number of apples\" columns.\n    Returns:\n    int: The difference in the number of apples picked on Friday and Wednesday.\n    \"\"\"\n    # Filter the DataFrame for Wednesday and Friday\n    wednesday_df = df[df['Day'] == 'Wednesday']\n    friday_df = df[df['Day'] == 'Friday']\n    \n    # Get the number of apples picked on Wednesday and Friday\n    wednesday_apples = wednesday_df['Number of apples'].values[0]\n    friday_apples = friday_df['Number of apples'].values[0]\n    \n    # Calculate the difference\n    difference = friday_apples - wednesday_apples\n    \n    return difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday'],\n    'Number of apples': [154, 394, 784]\n})\n# Call the tool to solve the problem\nprint(calculate_difference(df))","table":"Name: Apples picked\nUnit: apples\nContent:\nDay | Number of apples\nWednesday | 154\nThursday | 394\nFriday | 784"}
{"level":1,"answer":20.0,"prediction":"import pandas as pd\n\ndef calculate_total_passengers(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of passengers per bus and returns the total number of passengers for a given number of buses.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of buses and the number of passengers per bus.\n    The dataframe should contain \"Number of buses\" and \"Number of passengers\" columns.\n    Returns:\n    int: The total number of passengers for the given number of buses.\n    \"\"\"\n    # Get the number of passengers per bus\n    passengers_per_bus = df['Number of passengers'].values[0]\n    \n    # Get the number of buses\n    num_buses = df['Number of buses'].values[0]\n    \n    # Calculate the total number of passengers\n    total_passengers = passengers_per_bus * num_buses\n    \n    return total_passengers\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of buses': [1, 2, 3, 4],\n    'Number of passengers': [5, 10, 15, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_passengers(df))","question":"Each bus has 5 passengers. How many passengers are on 4 buses?","prediction_code":"import pandas as pd\n\ndef calculate_total_passengers(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of passengers per bus and returns the total number of passengers for a given number of buses.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of buses and the number of passengers per bus.\n    The dataframe should contain \"Number of buses\" and \"Number of passengers\" columns.\n    Returns:\n    int: The total number of passengers for the given number of buses.\n    \"\"\"\n    # Get the number of passengers per bus\n    passengers_per_bus = df['Number of passengers'].values[0]\n    \n    # Get the number of buses\n    num_buses = df['Number of buses'].values[0]\n    \n    # Calculate the total number of passengers\n    total_passengers = passengers_per_bus * num_buses\n    \n    return total_passengers","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of buses': [1, 2, 3, 4],\n    'Number of passengers': [5, 10, 15, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_passengers(df))","table":"Name: None\nUnit: passengers\nContent:\nNumber of buses | Number of passengers\n1 | 5\n2 | 10\n3 | 15\n4 | ?"}
{"level":5,"answer":46.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of quiz show scores and returns the median of the scores.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the quiz show scores.\n    The dataframe should contain \"Name\" and \"Score\" columns.\n    Returns:\n    float: The median of the quiz show scores.\n    \"\"\"\n    # Get the scores column from the DataFrame\n    scores = df['Score']\n    \n    # Calculate the median using the pandas median function\n    median = scores.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Mona', 'Jaylen', 'Brenda', 'Sally', 'Abby'],\n    'Score': [46, 53, 46, 46, 41]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"The players on a quiz show received the following scores. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of quiz show scores and returns the median of the scores.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the quiz show scores.\n    The dataframe should contain \"Name\" and \"Score\" columns.\n    Returns:\n    float: The median of the quiz show scores.\n    \"\"\"\n    # Get the scores column from the DataFrame\n    scores = df['Score']\n    \n    # Calculate the median using the pandas median function\n    median = scores.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Mona', 'Jaylen', 'Brenda', 'Sally', 'Abby'],\n    'Score': [46, 53, 46, 46, 41]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Quiz show scores\nUnit: None\nContent:\nName | Score\nMona | 46\nJaylen | 53\nBrenda | 46\nSally | 46\nAbby | 41"}
{"level":5,"answer":13.0,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['cat calendar', 'map of Africa', 'map of the world', 'book of poems'],\n    'Price': [13.00, 15.00, 11.00, 24.00]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'book of poems', 'map of the world'))","question":"How much more does a book of poems cost than a map of the world?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and two items, and returns the price difference between the two items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the two items\n    item1_df = df[df['Item'] == item1]\n    item2_df = df[df['Item'] == item2]\n    \n    # Get the prices of the two items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['cat calendar', 'map of Africa', 'map of the world', 'book of poems'],\n    'Price': [13.00, 15.00, 11.00, 24.00]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'book of poems', 'map of the world'))","table":"Name: None\nUnit: $\nContent:\ncat calendar | $13.00\nmap of Africa | $15.00\nmap of the world | $11.00\nbook of poems | $24.00"}
{"level":7,"answer":15.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item given its quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price of the item\n    price = item_df['Price'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price * quantity\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['cream cheese', 'plain yogurt', 'Greek yogurt', 'cottage cheese', 'sour cream'],\n    'Price': [3, 3, 3, 5, 5]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'sour cream', 3))","question":"Jackson buys 3 pounds of sour cream. What is the total cost?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item given its quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price of the item\n    price = item_df['Price'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price * quantity\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['cream cheese', 'plain yogurt', 'Greek yogurt', 'cottage cheese', 'sour cream'],\n    'Price': [3, 3, 3, 5, 5]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'sour cream', 3))","table":"Name: None\nUnit: $\nContent:\ncream cheese | $3\/lb\nplain yogurt | $3\/lb\nGreek yogurt | $3\/lb\ncottage cheese | $5\/lb\nsour cream | $5\/lb"}
{"level":2,"answer":6.0,"prediction":"import pandas as pd\n\ndef calculate_jackets_on_shelves(df, num_shelves):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of shelves and jackets, and returns the number of jackets on a given number of shelves.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of shelves and jackets with columns 'Number of shelves' and 'Number of jackets'.\n    num_shelves (int): The number of shelves to calculate the number of jackets on.\n    Returns:\n    int: The number of jackets on the given number of shelves.\n    \"\"\"\n    # Filter the DataFrame for the specific number of shelves\n    shelves_df = df[df['Number of shelves'] == num_shelves]\n    \n    # Check if the number of shelves exists in the DataFrame\n    if shelves_df.empty:\n        return \"Number of shelves not found\"\n    \n    # Get the number of jackets on the shelves\n    num_jackets = shelves_df['Number of jackets'].values[0]\n    \n    return num_jackets\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of shelves': [1, 2, 3],\n    'Number of jackets': [2, 4, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_jackets_on_shelves(df, 3))","question":"Each shelf has 2 jackets. How many jackets are on 3 shelves?","prediction_code":"import pandas as pd\n\ndef calculate_jackets_on_shelves(df, num_shelves):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of shelves and jackets, and returns the number of jackets on a given number of shelves.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of shelves and jackets with columns 'Number of shelves' and 'Number of jackets'.\n    num_shelves (int): The number of shelves to calculate the number of jackets on.\n    Returns:\n    int: The number of jackets on the given number of shelves.\n    \"\"\"\n    # Filter the DataFrame for the specific number of shelves\n    shelves_df = df[df['Number of shelves'] == num_shelves]\n    \n    # Check if the number of shelves exists in the DataFrame\n    if shelves_df.empty:\n        return \"Number of shelves not found\"\n    \n    # Get the number of jackets on the shelves\n    num_jackets = shelves_df['Number of jackets'].values[0]\n    \n    return num_jackets","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of shelves': [1, 2, 3],\n    'Number of jackets': [2, 4, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_jackets_on_shelves(df, 3))","table":"Name: None\nUnit: None\nContent:\nNumber of shelves | Number of jackets\n1 | 2\n2 | 4\n3 | ?"}
{"level":1,"answer":12.0,"prediction":"import pandas as pd\n\ndef calculate_total_bottles(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of mustard bottles per table and returns the total number of mustard bottles on all tables.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of tables and the number of mustard bottles per table.\n    The dataframe should contain \"Number of tables\" and \"Number of mustard bottles\" columns.\n    Returns:\n    int: The total number of mustard bottles on all tables.\n    \"\"\"\n    # Get the number of mustard bottles per table\n    bottles_per_table = df['Number of mustard bottles'].values[0]\n    \n    # Get the number of tables\n    num_tables = df['Number of tables'].values[-1]\n    \n    # Calculate the total number of mustard bottles\n    total_bottles = bottles_per_table * num_tables\n    \n    return total_bottles\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of tables': [1, 2, 3, 4, 5, 6],\n    'Number of mustard bottles': [2, 4, 6, 8, 10, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_bottles(df))","question":"Each table has 2 mustard bottles. How many mustard bottles are on 6 tables?","prediction_code":"import pandas as pd\n\ndef calculate_total_bottles(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of mustard bottles per table and returns the total number of mustard bottles on all tables.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of tables and the number of mustard bottles per table.\n    The dataframe should contain \"Number of tables\" and \"Number of mustard bottles\" columns.\n    Returns:\n    int: The total number of mustard bottles on all tables.\n    \"\"\"\n    # Get the number of mustard bottles per table\n    bottles_per_table = df['Number of mustard bottles'].values[0]\n    \n    # Get the number of tables\n    num_tables = df['Number of tables'].values[-1]\n    \n    # Calculate the total number of mustard bottles\n    total_bottles = bottles_per_table * num_tables\n    \n    return total_bottles","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of tables': [1, 2, 3, 4, 5, 6],\n    'Number of mustard bottles': [2, 4, 6, 8, 10, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_bottles(df))","table":"Name: None\nUnit: mustard bottles\nContent:\nNumber of tables | Number of mustard bottles\n1 | 2\n2 | 4\n3 | 6\n4 | 8\n5 | 10\n6 | ?"}
{"level":7,"answer":158.9,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of items, and returns the total cost of the items using pandas.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (dict): A dictionary where the keys are item names and the values are the number of items to buy.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item, quantity in items.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['garden hose', 'lawn mower', 'hammer', 'wrench', 'wheelbarrow'],\n    'Price': [12.17, 93.65, 18.47, 11.14, 64.96]\n})\n\n# Initialize the items dictionary\nitems = {\n    'wrench': 1,\n    'hammer': 8\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Anna need to buy a wrench and 8 hammers?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of items, and returns the total cost of the items using pandas.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (dict): A dictionary where the keys are item names and the values are the number of items to buy.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item, quantity in items.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['garden hose', 'lawn mower', 'hammer', 'wrench', 'wheelbarrow'],\n    'Price': [12.17, 93.65, 18.47, 11.14, 64.96]\n})\n\n# Initialize the items dictionary\nitems = {\n    'wrench': 1,\n    'hammer': 8\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\ngarden hose | $12.17\nlawn mower | $93.65\nhammer | $18.47\nwrench | $11.14\nwheelbarrow | $64.96"}
{"level":5,"answer":109.53,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['finch', 'cockatoo', 'pot-bellied pig', 'hedgehog', 'chinchilla', 'chameleon'],\n    'Price': [48.44, 58.86, 26.30, 61.09, 39.24, 63.10]\n})\n\n# Define the items to calculate the total cost\nitems = ['hedgehog', 'finch']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Rhianna need to buy a hedgehog and a finch?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['finch', 'cockatoo', 'pot-bellied pig', 'hedgehog', 'chinchilla', 'chameleon'],\n    'Price': [48.44, 58.86, 26.30, 61.09, 39.24, 63.10]\n})\n\n# Define the items to calculate the total cost\nitems = ['hedgehog', 'finch']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nfinch | $48.44\ncockatoo | $58.86\npot-bellied pig | $26.30\nhedgehog | $61.09\nchinchilla | $39.24\nchameleon | $63.10"}
{"level":8,"answer":24.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of a specific item and quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (int): The quantity of the item.\n    Returns:\n    float: The total cost of the item and quantity.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['gold confetti', 'rainbow confetti', 'red confetti', 'green confetti', 'silver confetti', 'blue confetti'],\n    'Price': [10, 12, 12, 12, 11, 11]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'red confetti', 2))","question":"Cole bought 2 pounds of red confetti. How much did he spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of a specific item and quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (int): The quantity of the item.\n    Returns:\n    float: The total cost of the item and quantity.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['gold confetti', 'rainbow confetti', 'red confetti', 'green confetti', 'silver confetti', 'blue confetti'],\n    'Price': [10, 12, 12, 12, 11, 11]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'red confetti', 2))","table":"Name: None\nUnit: $\nContent:\ngold confetti | $10\/pound\nrainbow confetti | $12\/pound\nred confetti | $12\/pound\ngreen confetti | $12\/pound\nsilver confetti | $11\/pound\nblue confetti | $11\/pound"}
{"level":7,"answer":3.0,"prediction":"import pandas as pd\n\ndef count_farms_with_cows(df, min_cows, max_cows):\n    \"\"\"\n    This function takes in a pandas DataFrame of cows per farm and returns the number of farms that have at least min_cows cows but fewer than max_cows cows.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of cows per farm.\n    The DataFrame should contain \"Stem\" and \"Leaf\" columns.\n    min_cows (int): The minimum number of cows per farm to be considered.\n    max_cows (int): The maximum number of cows per farm to be considered.\n    Returns:\n    int: The number of farms that have at least min_cows cows but fewer than max_cows cows.\n    \"\"\"\n    # prepare a list to calculate the number of cows on each farm\n    cows = []\n    # calculate the total number of cows on each farm\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            cows.append(stem * 10 + leaf[j])\n    # filter the farms where the number of cows is greater than or equal to min_cows and less than max_cows\n    filtered = [cow for cow in cows if min_cows <= cow < max_cows]\n    # count the number of farms\n    num_farms = len(filtered)\n    return num_farms\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6],\n    'Leaf': [[0, 0, 3, 4], [2], [2, 7, 8], [3, 5, 5, 8, 9], [4, 6, 8], [1, 2, 3]]\n})\n# Call the tool to solve the problem\nprint(count_farms_with_cows(df, 25, 41))","question":"A researcher recorded the number of cows on each farm in the county. How many farms have at least 25 cows but fewer than 41 cows?","prediction_code":"import pandas as pd\n\ndef count_farms_with_cows(df, min_cows, max_cows):\n    \"\"\"\n    This function takes in a pandas DataFrame of cows per farm and returns the number of farms that have at least min_cows cows but fewer than max_cows cows.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of cows per farm.\n    The DataFrame should contain \"Stem\" and \"Leaf\" columns.\n    min_cows (int): The minimum number of cows per farm to be considered.\n    max_cows (int): The maximum number of cows per farm to be considered.\n    Returns:\n    int: The number of farms that have at least min_cows cows but fewer than max_cows cows.\n    \"\"\"\n    # prepare a list to calculate the number of cows on each farm\n    cows = []\n    # calculate the total number of cows on each farm\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            cows.append(stem * 10 + leaf[j])\n    # filter the farms where the number of cows is greater than or equal to min_cows and less than max_cows\n    filtered = [cow for cow in cows if min_cows <= cow < max_cows]\n    # count the number of farms\n    num_farms = len(filtered)\n    return num_farms","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6],\n    'Leaf': [[0, 0, 3, 4], [2], [2, 7, 8], [3, 5, 5, 8, 9], [4, 6, 8], [1, 2, 3]]\n})\n# Call the tool to solve the problem\nprint(count_farms_with_cows(df, 25, 41))","table":"Name: Cows per farm\nUnit: farms\nContent:\nStem | Leaf \n1 | 0, 0, 3, 4\n2 | 2\n3 | 2, 7, 8\n4 | 3, 5, 5, 8, 9\n5 | 4, 6, 8\n6 | 1, 2, 3"}
{"level":8,"answer":6.6,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['tube of toothpaste', 'bottle of shampoo', 'box of bandages', 'bottle of mouthwash', 'sewing kit', 'package of dental floss'],\n    'Price': [3.48, 4.87, 2.37, 1.08, 3.12, 1.59]\n})\n\n# Define the items to be purchased\nitems = ['tube of toothpaste', 'sewing kit']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, items)\n\n# Print out the answer\nprint(total_cost)","question":"How much money does Katy need to buy a tube of toothpaste and a sewing kit?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['tube of toothpaste', 'bottle of shampoo', 'box of bandages', 'bottle of mouthwash', 'sewing kit', 'package of dental floss'],\n    'Price': [3.48, 4.87, 2.37, 1.08, 3.12, 1.59]\n})\n\n# Define the items to be purchased\nitems = ['tube of toothpaste', 'sewing kit']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, items)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\ntube of toothpaste | $3.48\nbottle of shampoo | $4.87\nbox of bandages | $2.37\nbottle of mouthwash | $1.08\nsewing kit | $3.12\npackage of dental floss | $1.59"}
{"level":5,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pet ownership and returns the mean number of pets.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and number of pets for each student.\n    The dataframe should contain \"Name\" and \"Number of pets\" columns.\n    Returns:\n    float: The mean number of pets.\n    \"\"\"\n    # Calculate the mean of the \"Number of pets\" column\n    mean = df['Number of pets'].mean()\n    \n    return mean\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Dustin', 'Matt', 'Aubrey', 'Brittany', 'Leon'],\n    'Number of pets': [1, 7, 4, 4, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","question":"Some students compared how many pets they have. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pet ownership and returns the mean number of pets.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and number of pets for each student.\n    The dataframe should contain \"Name\" and \"Number of pets\" columns.\n    Returns:\n    float: The mean number of pets.\n    \"\"\"\n    # Calculate the mean of the \"Number of pets\" column\n    mean = df['Number of pets'].mean()\n    \n    return mean","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Dustin', 'Matt', 'Aubrey', 'Brittany', 'Leon'],\n    'Number of pets': [1, 7, 4, 4, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","table":"Name: Pets\nUnit: None\nContent:\nName | Number of pets\nDustin | 1\nMatt | 7\nAubrey | 4\nBrittany | 4\nLeon | 9"}
{"level":8,"answer":51.0,"prediction":"import pandas as pd\n\ndef count_students_with_at_least_2_boxes(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of boxes sold by each student and returns the number of students who sold at least 2 boxes.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of boxes sold by each student.\n    The DataFrame should contain \"Boxes sold\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who sold at least 2 boxes.\n    \"\"\"\n    # Filter the DataFrame for students who sold at least 2 boxes\n    filtered_df = df[df['Boxes sold'] >= 2]\n    \n    # Calculate the total number of students who sold at least 2 boxes\n    num_students = filtered_df['Frequency'].sum()\n    \n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Boxes sold': [1, 2, 3, 4, 5],\n    'Frequency': [17, 7, 15, 18, 11]\n})\n# Call the tool to solve the problem\nprint(count_students_with_at_least_2_boxes(df))","question":"A parent volunteer counted the number of boxes sold by each student participating in the cookie fundraiser. How many students sold at least 2 boxes of cookies?","prediction_code":"import pandas as pd\n\ndef count_students_with_at_least_2_boxes(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of boxes sold by each student and returns the number of students who sold at least 2 boxes.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of boxes sold by each student.\n    The DataFrame should contain \"Boxes sold\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who sold at least 2 boxes.\n    \"\"\"\n    # Filter the DataFrame for students who sold at least 2 boxes\n    filtered_df = df[df['Boxes sold'] >= 2]\n    \n    # Calculate the total number of students who sold at least 2 boxes\n    num_students = filtered_df['Frequency'].sum()\n    \n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Boxes sold': [1, 2, 3, 4, 5],\n    'Frequency': [17, 7, 15, 18, 11]\n})\n# Call the tool to solve the problem\nprint(count_students_with_at_least_2_boxes(df))","table":"Name: Selling cookies\nUnit: None\nContent:\nBoxes sold | Frequency\n1 | 17\n2 | 7\n3 | 15\n4 | 18\n5 | 11"}
{"level":6,"answer":10.0,"prediction":"import pandas as pd\n\ndef calculate_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the cost of buying a certain quantity of an item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price table with columns 'Item' and 'Price'.\n    item (str): The name of the item to calculate the cost for.\n    quantity (float): The quantity of the item to calculate the cost for.\n    Returns:\n    float: The cost of buying the specified quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return None\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['corn tortilla chips', 'unsalted popcorn', 'flour tortilla chips', 'cheese puffs'],\n    'Price': [2, 2, 1, 1]\n})\n# Call the tool to solve the problem\nprint(calculate_cost(df, 'unsalted popcorn', 5))","question":"How much would it cost to buy 5 kilograms of unsalted popcorn?","prediction_code":"import pandas as pd\n\ndef calculate_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the cost of buying a certain quantity of an item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price table with columns 'Item' and 'Price'.\n    item (str): The name of the item to calculate the cost for.\n    quantity (float): The quantity of the item to calculate the cost for.\n    Returns:\n    float: The cost of buying the specified quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return None","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['corn tortilla chips', 'unsalted popcorn', 'flour tortilla chips', 'cheese puffs'],\n    'Price': [2, 2, 1, 1]\n})\n# Call the tool to solve the problem\nprint(calculate_cost(df, 'unsalted popcorn', 5))","table":"Name: None\nUnit: $\nContent:\ncorn tortilla chips | $2\/kilogram\nunsalted popcorn | $2\/kilogram\nflour tortilla chips | $1\/kilogram\ncheese puffs | $1\/kilogram"}
{"level":8,"answer":5.0,"prediction":"import pandas as pd\n\ndef find_most_common_score(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of scores on a TV game show and returns the score that the greatest number of people received.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the scores and their frequencies.\n    The dataframe should contain \"Score\" and \"Frequency\" columns.\n    Returns:\n    int: The score that the greatest number of people received.\n    \"\"\"\n    # Find the index of the row with the maximum frequency\n    max_freq_index = df['Frequency'].idxmax()\n    \n    # Get the score corresponding to the maximum frequency\n    most_common_score = df.loc[max_freq_index, 'Score']\n    \n    return most_common_score\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Score': [5, 6, 7, 8, 9, 10],\n    'Frequency': [19, 7, 17, 5, 18, 1]\n})\n# Call the tool to solve the problem\nprint(find_most_common_score(df))","question":"Convinced that he could do well as a competitor, Cameron tracked the scores on a TV game show over the course of a week. Which score did the greatest number of people receive?","prediction_code":"import pandas as pd\n\ndef find_most_common_score(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of scores on a TV game show and returns the score that the greatest number of people received.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the scores and their frequencies.\n    The dataframe should contain \"Score\" and \"Frequency\" columns.\n    Returns:\n    int: The score that the greatest number of people received.\n    \"\"\"\n    # Find the index of the row with the maximum frequency\n    max_freq_index = df['Frequency'].idxmax()\n    \n    # Get the score corresponding to the maximum frequency\n    most_common_score = df.loc[max_freq_index, 'Score']\n    \n    return most_common_score","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Score': [5, 6, 7, 8, 9, 10],\n    'Frequency': [19, 7, 17, 5, 18, 1]\n})\n# Call the tool to solve the problem\nprint(find_most_common_score(df))","table":"Name: Scores on a TV game show\nUnit: None\nContent:\nScore | Frequency\n5 | 19\n6 | 7\n7 | 17\n8 | 5\n9 | 18\n10 | 1"}
{"level":4,"answer":174.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(ticket_df, tickets):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ticket price table and a list of tickets, and returns the total cost of the tickets using pandas.\n    Args:\n    ticket_df (pd.DataFrame): A pandas DataFrame containing ticket names and their prices with columns 'Ticket' and 'Price'.\n    tickets (list): A list of ticket names.\n    Returns:\n    float: The total cost of the tickets.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the tickets and calculate the cost for each ticket\n    for ticket in tickets:\n        # Filter the DataFrame for the specific ticket\n        ticket_row = ticket_df[ticket_df['Ticket'] == ticket]\n        if not ticket_row.empty:\n            ticket_price = ticket_row['Price'].values[0]\n            total_cost += ticket_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\nticket_df = pd.DataFrame({\n    'Ticket': ['tennis ticket', 'soccer ticket', 'baseball ticket', 'basketball ticket', 'football ticket'],\n    'Price': [78, 70, 26, 21, 90]\n})\n\n# Define the list of tickets\ntickets = ['baseball ticket', 'tennis ticket', 'soccer ticket']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(ticket_df, tickets))","question":"How much money does Jada need to buy a baseball ticket, a tennis ticket, and a soccer ticket?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(ticket_df, tickets):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ticket price table and a list of tickets, and returns the total cost of the tickets using pandas.\n    Args:\n    ticket_df (pd.DataFrame): A pandas DataFrame containing ticket names and their prices with columns 'Ticket' and 'Price'.\n    tickets (list): A list of ticket names.\n    Returns:\n    float: The total cost of the tickets.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the tickets and calculate the cost for each ticket\n    for ticket in tickets:\n        # Filter the DataFrame for the specific ticket\n        ticket_row = ticket_df[ticket_df['Ticket'] == ticket]\n        if not ticket_row.empty:\n            ticket_price = ticket_row['Price'].values[0]\n            total_cost += ticket_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\nticket_df = pd.DataFrame({\n    'Ticket': ['tennis ticket', 'soccer ticket', 'baseball ticket', 'basketball ticket', 'football ticket'],\n    'Price': [78, 70, 26, 21, 90]\n})\n\n# Define the list of tickets\ntickets = ['baseball ticket', 'tennis ticket', 'soccer ticket']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(ticket_df, tickets))","table":"Name: None\nUnit: $\nContent:\ntennis ticket | $78\nsoccer ticket | $70\nbaseball ticket | $26\nbasketball ticket | $21\nfootball ticket | $90"}
{"level":8,"answer":0.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of art contest entries per year and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of art contest entries per year.\n    The dataframe should contain \"Year\" and \"Number of entries\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_entries = df[df['Year'] == start_year]['Number of entries'].values[0]\n    end_entries = df[df['Year'] == end_year]['Number of entries'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_entries - start_entries) \/ start_entries\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2007, 2008, 2009, 2010, 2011],\n    'Number of entries': [42, 42, 40, 32, 34]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2007, 2008))","question":"Mrs. Buchanan hosts an annual art contest for kids, and she keeps a record of the number of entries each year. According to the table, what was the rate of change between 2007 and 2008?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of art contest entries per year and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of art contest entries per year.\n    The dataframe should contain \"Year\" and \"Number of entries\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_entries = df[df['Year'] == start_year]['Number of entries'].values[0]\n    end_entries = df[df['Year'] == end_year]['Number of entries'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_entries - start_entries) \/ start_entries\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2007, 2008, 2009, 2010, 2011],\n    'Number of entries': [42, 42, 40, 32, 34]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2007, 2008))","table":"Name: Art contest entries\nUnit: entries per year\nContent:\nYear | Number of entries\n2007 | 42\n2008 | 42\n2009 | 40\n2010 | 32\n2011 | 34"}
{"level":3,"answer":6026.0,"prediction":"import pandas as pd\n\ndef count_cars_on_days(df, days):\n    \"\"\"\n    This function takes in a pandas DataFrame of cars at an intersection and a list of days, and returns the total number of cars that went through the intersection on those days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of cars at an intersection.\n    The dataframe should contain \"Day\" and \"Number of cars\" columns.\n    days (list): A list of days for which the total number of cars is to be calculated.\n    Returns:\n    int: The total number of cars that went through the intersection on the specified days.\n    \"\"\"\n    # Filter the DataFrame for the specified days\n    filtered_df = df[df['Day'].isin(days)]\n    \n    # Calculate the total number of cars on the specified days\n    total_cars = filtered_df['Number of cars'].sum()\n    \n    return total_cars\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday'],\n    'Number of cars': [1346, 4680, 3242]\n})\n\n# Specify the days for which the total number of cars is to be calculated\ndays = ['Wednesday', 'Thursday']\n\n# Call the tool to solve the problem\nprint(count_cars_on_days(df, days))","question":"A city monitored how many cars went through a certain intersection in the past 3 days. How many cars in total went through the intersection on Wednesday and Thursday?","prediction_code":"import pandas as pd\n\ndef count_cars_on_days(df, days):\n    \"\"\"\n    This function takes in a pandas DataFrame of cars at an intersection and a list of days, and returns the total number of cars that went through the intersection on those days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of cars at an intersection.\n    The dataframe should contain \"Day\" and \"Number of cars\" columns.\n    days (list): A list of days for which the total number of cars is to be calculated.\n    Returns:\n    int: The total number of cars that went through the intersection on the specified days.\n    \"\"\"\n    # Filter the DataFrame for the specified days\n    filtered_df = df[df['Day'].isin(days)]\n    \n    # Calculate the total number of cars on the specified days\n    total_cars = filtered_df['Number of cars'].sum()\n    \n    return total_cars","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday'],\n    'Number of cars': [1346, 4680, 3242]\n})\n\n# Specify the days for which the total number of cars is to be calculated\ndays = ['Wednesday', 'Thursday']\n\n# Call the tool to solve the problem\nprint(count_cars_on_days(df, days))","table":"Name: Cars at an intersection\nUnit: cars\nContent:\nDay | Number of cars\nWednesday | 1,346\nThursday | 4,680\nFriday | 3,242"}
{"level":5,"answer":25.0,"prediction":"import pandas as pd\nfrom statistics import mode\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of sheep owned by farmers and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of sheep owned by each farmer.\n    The dataframe should contain \"Farmer\" and \"Number of sheep\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of sheep']\n    \n    # Calculate the mode\n    mode_number = mode(numbers)\n    \n    return mode_number\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Farmer': ['Farmer Jo', 'Farmer Dave', 'Farmer Wendy', 'Farmer Meghan', 'Farmer Dan', 'Farmer Walt'],\n    'Number of sheep': [30, 25, 30, 27, 25, 25]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"Some farmers compared how many sheep were in their flocks. What is the mode of the numbers?","prediction_code":"import pandas as pd\nfrom statistics import mode\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of sheep owned by farmers and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of sheep owned by each farmer.\n    The dataframe should contain \"Farmer\" and \"Number of sheep\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of sheep']\n    \n    # Calculate the mode\n    mode_number = mode(numbers)\n    \n    return mode_number","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Farmer': ['Farmer Jo', 'Farmer Dave', 'Farmer Wendy', 'Farmer Meghan', 'Farmer Dan', 'Farmer Walt'],\n    'Number of sheep': [30, 25, 30, 27, 25, 25]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Sheep owned\nUnit: None\nContent:\nFarmer | Number of sheep\nFarmer Jo | 30\nFarmer Dave | 25\nFarmer Wendy | 30\nFarmer Meghan | 27\nFarmer Dan | 25\nFarmer Walt | 25"}
{"level":5,"answer":10.0,"prediction":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of basketball hoops per park and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of basketball hoops per park.\n    The dataframe should contain \"Park\" and \"Number of basketball hoops\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column with the number of basketball hoops\n    hoops_column = df['Number of basketball hoops']\n    \n    # Calculate the mode using the mode() function from pandas\n    mode = hoops_column.mode().values[0]\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Park': ['Pinehurst Park', 'Westfield Park', 'Linden Park', 'Crestview Park', 'Otter Park', 'Mooreland Park', 'Kelly Park'],\n    'Number of basketball hoops': [9, 11, 11, 9, 10, 10, 10]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"The parks department compared how many basketball hoops there are at each park. What is the mode of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of basketball hoops per park and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of basketball hoops per park.\n    The dataframe should contain \"Park\" and \"Number of basketball hoops\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column with the number of basketball hoops\n    hoops_column = df['Number of basketball hoops']\n    \n    # Calculate the mode using the mode() function from pandas\n    mode = hoops_column.mode().values[0]\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Park': ['Pinehurst Park', 'Westfield Park', 'Linden Park', 'Crestview Park', 'Otter Park', 'Mooreland Park', 'Kelly Park'],\n    'Number of basketball hoops': [9, 11, 11, 9, 10, 10, 10]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Basketball hoops\nUnit: None\nContent:\nPark | Number of basketball hoops\nPinehurst Park | 9\nWestfield Park | 11\nLinden Park | 11\nCrestview Park | 9\nOtter Park | 10\nMooreland Park | 10\nKelly Park | 10"}
{"level":8,"answer":18.0,"prediction":"import pandas as pd\n\ndef count_players_with_fewer_than_3_runs(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of baseball runs scored last season and returns the number of players who scored fewer than 3 runs.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of runs scored by players last season.\n    The dataframe should contain \"Runs scored\" and \"Frequency\" columns.\n    Returns:\n    int: The number of players who scored fewer than 3 runs last season.\n    \"\"\"\n    # Filter the DataFrame for runs scored fewer than 3\n    filtered_df = df[df['Runs scored'] < 3]\n    \n    # Calculate the total number of players\n    num_players = filtered_df['Frequency'].sum()\n    \n    return num_players\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Runs scored': [0, 1, 2, 3, 4],\n    'Frequency': [1, 13, 4, 16, 20]\n})\n# Call the tool to solve the problem\nprint(count_players_with_fewer_than_3_runs(df))","question":"A statistician analyzed the number of runs scored by players last season. How many players scored fewer than 3 runs last season?","prediction_code":"import pandas as pd\n\ndef count_players_with_fewer_than_3_runs(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of baseball runs scored last season and returns the number of players who scored fewer than 3 runs.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of runs scored by players last season.\n    The dataframe should contain \"Runs scored\" and \"Frequency\" columns.\n    Returns:\n    int: The number of players who scored fewer than 3 runs last season.\n    \"\"\"\n    # Filter the DataFrame for runs scored fewer than 3\n    filtered_df = df[df['Runs scored'] < 3]\n    \n    # Calculate the total number of players\n    num_players = filtered_df['Frequency'].sum()\n    \n    return num_players","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Runs scored': [0, 1, 2, 3, 4],\n    'Frequency': [1, 13, 4, 16, 20]\n})\n# Call the tool to solve the problem\nprint(count_players_with_fewer_than_3_runs(df))","table":"Name: Baseball runs scored last season\nUnit: None\nContent:\nRuns scored | Frequency\n0 | 1\n1 | 13\n2 | 4\n3 | 16\n4 | 20"}
{"level":4,"answer":21.0,"prediction":"import pandas as pd\n\ndef count_shipments_with_20_boxes(df):\n    \"\"\"\n    This function takes in a pandas dataframe of boxes per shipment, and returns the number of shipments that have at least 20 boxes.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of boxes per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of shipments that have at least 20 boxes.\n    \"\"\"\n    # prepare a list to calculate the number of boxes in each shipment\n    boxes = []\n    # calculate the total number of boxes in each shipment\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            boxes.append(stem * 10 + leaf[j])\n    # filter the shipments where the total number of boxes is greater than or equal to 20\n    filtered = [box for box in boxes if box >= 20]\n    # count the number of shipments\n    num_shipments = len(filtered)\n    return num_shipments\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7],\n    'Leaf': [[6], [0, 2, 3], [9, 9], [0, 1, 3, 5, 5], [5, 6, 9], [1, 3, 5, 5, 9], [1, 3, 4]]\n})\n# Call the tool to solve the problem\nprint(count_shipments_with_20_boxes(df))","question":"A shipping company keeps track of the number of boxes in each shipment they send out. How many shipments had at least 20 boxes?","prediction_code":"import pandas as pd\n\ndef count_shipments_with_20_boxes(df):\n    \"\"\"\n    This function takes in a pandas dataframe of boxes per shipment, and returns the number of shipments that have at least 20 boxes.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of boxes per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of shipments that have at least 20 boxes.\n    \"\"\"\n    # prepare a list to calculate the number of boxes in each shipment\n    boxes = []\n    # calculate the total number of boxes in each shipment\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            boxes.append(stem * 10 + leaf[j])\n    # filter the shipments where the total number of boxes is greater than or equal to 20\n    filtered = [box for box in boxes if box >= 20]\n    # count the number of shipments\n    num_shipments = len(filtered)\n    return num_shipments","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7],\n    'Leaf': [[6], [0, 2, 3], [9, 9], [0, 1, 3, 5, 5], [5, 6, 9], [1, 3, 5, 5, 9], [1, 3, 4]]\n})\n# Call the tool to solve the problem\nprint(count_shipments_with_20_boxes(df))","table":"Name: Boxes per shipment\nUnit: None\nContent:\nStem | Leaf \n1 | 6\n2 | 0, 2, 3\n3 | 9, 9\n4 | 0, 1, 3, 5, 5\n5 | 5, 6, 9\n6 | 1, 3, 5, 5, 9\n7 | 1, 3, 4"}
{"level":6,"answer":6.0,"prediction":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of babysitting hours per month and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of babysitting hours per month.\n    The dataframe should contain \"Month\" and \"Hours\" columns.\n    Returns:\n    float: The mode of the numbers.\n    \"\"\"\n    # Get the \"Hours\" column from the DataFrame\n    hours = df['Hours']\n    \n    # Calculate the mode using the mode() function from pandas\n    mode = hours.mode().values[0]\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['November', 'December', 'January', 'February', 'March', 'April', 'May'],\n    'Hours': [8, 6, 8, 6, 6, 9, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"Lillian looked at her calendar to figure out how much time she spent babysitting each month. What is the mode of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of babysitting hours per month and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of babysitting hours per month.\n    The dataframe should contain \"Month\" and \"Hours\" columns.\n    Returns:\n    float: The mode of the numbers.\n    \"\"\"\n    # Get the \"Hours\" column from the DataFrame\n    hours = df['Hours']\n    \n    # Calculate the mode using the mode() function from pandas\n    mode = hours.mode().values[0]\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['November', 'December', 'January', 'February', 'March', 'April', 'May'],\n    'Hours': [8, 6, 8, 6, 6, 9, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Hours of babysitting\nUnit: None\nContent:\nMonth | Hours\nNovember | 8\nDecember | 6\nJanuary | 8\nFebruary | 6\nMarch | 6\nApril | 9\nMay | 9"}
{"level":8,"answer":10.0,"prediction":"import pandas as pd\n\ndef count_bags_with_red_buttons(df):\n    \"\"\"\n    This function takes in a pandas dataframe of red buttons per bag, and returns the number of bags that have at least 50 red buttons but fewer than 70 red buttons.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of red buttons per bag.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of bags that have at least 50 red buttons but fewer than 70 red buttons.\n    \"\"\"\n    # prepare a list to calculate red buttons in each bag\n    red_buttons = []\n    # calculate the total number of red buttons in each bag\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            red_buttons.append(stem * 10 + leaf[j])\n    # filter the bags where the total number of red buttons is greater than or equal to 50 and less than 70\n    filtered = [button for button in red_buttons if 50 <= button < 70]\n    # count the number of rows\n    num_bags = len(filtered)\n    return num_bags\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7, 8],\n    'Leaf': [[0, 2, 2, 3, 4, 7], [0, 5, 6, 7, 9], [0, 0, 6, 8, 8], [0, 1], [4, 8]]\n})\n# Call the tool to solve the problem\nprint(count_bags_with_red_buttons(df))","question":"An employee at the craft store counted the number of red buttons in each bag of mixed buttons. How many bags had at least 50 red buttons but fewer than 70 red buttons?","prediction_code":"import pandas as pd\n\ndef count_bags_with_red_buttons(df):\n    \"\"\"\n    This function takes in a pandas dataframe of red buttons per bag, and returns the number of bags that have at least 50 red buttons but fewer than 70 red buttons.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of red buttons per bag.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of bags that have at least 50 red buttons but fewer than 70 red buttons.\n    \"\"\"\n    # prepare a list to calculate red buttons in each bag\n    red_buttons = []\n    # calculate the total number of red buttons in each bag\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            red_buttons.append(stem * 10 + leaf[j])\n    # filter the bags where the total number of red buttons is greater than or equal to 50 and less than 70\n    filtered = [button for button in red_buttons if 50 <= button < 70]\n    # count the number of rows\n    num_bags = len(filtered)\n    return num_bags","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7, 8],\n    'Leaf': [[0, 2, 2, 3, 4, 7], [0, 5, 6, 7, 9], [0, 0, 6, 8, 8], [0, 1], [4, 8]]\n})\n# Call the tool to solve the problem\nprint(count_bags_with_red_buttons(df))","table":"Name: Red buttons per bag\nUnit: bags\nContent:\nStem | Leaf \n4 | 0, 2, 2, 3, 4, 7\n5 | 0, 5, 6, 7, 9\n6 | 0, 0, 6, 8, 8\n7 | 0, 1\n8 | 4, 8"}
{"level":4,"answer":17.0,"prediction":"import pandas as pd\n\ndef count_schools_with_classrooms(df, min_classrooms, max_classrooms):\n    \"\"\"\n    This function takes in a pandas DataFrame of classrooms per school and returns the number of schools that have at least min_classrooms but fewer than max_classrooms classrooms.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of classrooms per school.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_classrooms (int): The minimum number of classrooms required for a school to be counted.\n    max_classrooms (int): The maximum number of classrooms allowed for a school to be counted.\n    Returns:\n    int: The number of schools that have at least min_classrooms but fewer than max_classrooms classrooms.\n    \"\"\"\n    # prepare a list to calculate the number of classrooms in each school\n    classrooms = []\n    # calculate the total number of classrooms in each school\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            classrooms.append(stem * 10 + leaf[j])\n    # filter the schools where the total number of classrooms is greater than or equal to min_classrooms and less than max_classrooms\n    filtered = [room for room in classrooms if min_classrooms <= room < max_classrooms]\n    # count the number of schools\n    num_schools = len(filtered)\n    return num_schools\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7, 8],\n    'Leaf': [[5, 8, 9], [1, 3, 4, 4, 8], [3, 4, 6, 8, 8], [0, 0, 1, 6], [0, 1, 1, 4, 7, 8, 9, 9]]\n})\n# Set the minimum and maximum number of classrooms\nmin_classrooms = 60\nmax_classrooms = 90\n# Call the tool to solve the problem\nprint(count_schools_with_classrooms(df, min_classrooms, max_classrooms))","question":"For a social studies project, Diana counted the number of classrooms in each school in the city. How many schools have at least 60 classrooms but fewer than 90 classrooms?","prediction_code":"import pandas as pd\n\ndef count_schools_with_classrooms(df, min_classrooms, max_classrooms):\n    \"\"\"\n    This function takes in a pandas DataFrame of classrooms per school and returns the number of schools that have at least min_classrooms but fewer than max_classrooms classrooms.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of classrooms per school.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    min_classrooms (int): The minimum number of classrooms required for a school to be counted.\n    max_classrooms (int): The maximum number of classrooms allowed for a school to be counted.\n    Returns:\n    int: The number of schools that have at least min_classrooms but fewer than max_classrooms classrooms.\n    \"\"\"\n    # prepare a list to calculate the number of classrooms in each school\n    classrooms = []\n    # calculate the total number of classrooms in each school\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            classrooms.append(stem * 10 + leaf[j])\n    # filter the schools where the total number of classrooms is greater than or equal to min_classrooms and less than max_classrooms\n    filtered = [room for room in classrooms if min_classrooms <= room < max_classrooms]\n    # count the number of schools\n    num_schools = len(filtered)\n    return num_schools","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7, 8],\n    'Leaf': [[5, 8, 9], [1, 3, 4, 4, 8], [3, 4, 6, 8, 8], [0, 0, 1, 6], [0, 1, 1, 4, 7, 8, 9, 9]]\n})\n# Set the minimum and maximum number of classrooms\nmin_classrooms = 60\nmax_classrooms = 90\n# Call the tool to solve the problem\nprint(count_schools_with_classrooms(df, min_classrooms, max_classrooms))","table":"Name: Classrooms per school\nUnit: None\nContent:\nStem | Leaf \n4 | 5, 8, 9\n5 | 1, 3, 4, 4, 8\n6 | 3, 4, 6, 8, 8\n7 | 0, 0, 1, 6\n8 | 0, 1, 1, 4, 7, 8, 9, 9"}
{"level":1,"answer":30.0,"prediction":"import pandas as pd\n\ndef calculate_total_cookies(df, num_plates):\n    \"\"\"\n    This function takes in a pandas DataFrame of oatmeal cookies per plate and the number of plates, and returns the total number of oatmeal cookies.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of oatmeal cookies per plate.\n    The dataframe should contain \"Number of plates\" and \"Number of oatmeal cookies\" columns.\n    num_plates (int): The number of plates.\n    Returns:\n    int: The total number of oatmeal cookies.\n    \"\"\"\n    # Filter the DataFrame for the specific number of plates\n    plate_df = df[df['Number of plates'] == num_plates]\n    \n    # Get the number of oatmeal cookies for the specific number of plates\n    num_cookies = plate_df['Number of oatmeal cookies'].values[0]\n    \n    return num_cookies\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of plates': [1, 2, 3],\n    'Number of oatmeal cookies': [10, 20, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cookies(df, 3))","question":"Each plate has 10 oatmeal cookies. How many oatmeal cookies are on 3 plates?","prediction_code":"import pandas as pd\n\ndef calculate_total_cookies(df, num_plates):\n    \"\"\"\n    This function takes in a pandas DataFrame of oatmeal cookies per plate and the number of plates, and returns the total number of oatmeal cookies.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of oatmeal cookies per plate.\n    The dataframe should contain \"Number of plates\" and \"Number of oatmeal cookies\" columns.\n    num_plates (int): The number of plates.\n    Returns:\n    int: The total number of oatmeal cookies.\n    \"\"\"\n    # Filter the DataFrame for the specific number of plates\n    plate_df = df[df['Number of plates'] == num_plates]\n    \n    # Get the number of oatmeal cookies for the specific number of plates\n    num_cookies = plate_df['Number of oatmeal cookies'].values[0]\n    \n    return num_cookies","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of plates': [1, 2, 3],\n    'Number of oatmeal cookies': [10, 20, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cookies(df, 3))","table":"Name: None\nUnit: oatmeal cookies\nContent:\nNumber of plates | Number of oatmeal cookies\n1 | 10\n2 | 20\n3 | ?"}
{"level":3,"answer":178.0,"prediction":"import pandas as pd\n\ndef calculate_cookies_difference(df, student1, student2):\n    \"\"\"\n    This function takes in a pandas DataFrame of cookies baked by students and returns the difference in the number of cookies baked by two specific students.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the names of students and the number of cookies they baked.\n    student1 (str): The name of the first student.\n    student2 (str): The name of the second student.\n    Returns:\n    int: The difference in the number of cookies baked by the two students.\n    \"\"\"\n    # Filter the DataFrame for the specific students\n    student1_cookies = df[df['Name'] == student1]['Number of cookies'].values[0]\n    student2_cookies = df[df['Name'] == student2]['Number of cookies'].values[0]\n    \n    # Calculate the difference in the number of cookies baked\n    cookies_difference = student2_cookies - student1_cookies\n    \n    return cookies_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Pam', 'Lorenzo', 'Rhianna', 'Henry'],\n    'Number of cookies': [594, 772, 230, 412]\n})\n\n# Call the tool to solve the problem\nprint(calculate_cookies_difference(df, 'Pam', 'Lorenzo'))","question":"The art club examined how many cookies each student baked for the bake sale. How many more cookies did Lorenzo bake than Pam?","prediction_code":"import pandas as pd\n\ndef calculate_cookies_difference(df, student1, student2):\n    \"\"\"\n    This function takes in a pandas DataFrame of cookies baked by students and returns the difference in the number of cookies baked by two specific students.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the names of students and the number of cookies they baked.\n    student1 (str): The name of the first student.\n    student2 (str): The name of the second student.\n    Returns:\n    int: The difference in the number of cookies baked by the two students.\n    \"\"\"\n    # Filter the DataFrame for the specific students\n    student1_cookies = df[df['Name'] == student1]['Number of cookies'].values[0]\n    student2_cookies = df[df['Name'] == student2]['Number of cookies'].values[0]\n    \n    # Calculate the difference in the number of cookies baked\n    cookies_difference = student2_cookies - student1_cookies\n    \n    return cookies_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Pam', 'Lorenzo', 'Rhianna', 'Henry'],\n    'Number of cookies': [594, 772, 230, 412]\n})\n\n# Call the tool to solve the problem\nprint(calculate_cookies_difference(df, 'Pam', 'Lorenzo'))","table":"Name: Cookies baked\nUnit: cookies\nContent:\nName | Number of cookies\nPam | 594\nLorenzo | 772\nRhianna | 230\nHenry | 412"}
{"level":7,"answer":9.0,"prediction":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of miles hiked per day and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of miles hiked per day.\n    The dataframe should contain \"Day\" and \"Number of miles\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Number of miles\" column\n    mean = df['Number of miles'].mean()\n    \n    return mean\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday'],\n    'Number of miles': [10, 9, 6, 10, 10]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","question":"Eli went on a camping trip and logged the number of miles he hiked each day. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of miles hiked per day and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of miles hiked per day.\n    The dataframe should contain \"Day\" and \"Number of miles\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Number of miles\" column\n    mean = df['Number of miles'].mean()\n    \n    return mean","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday'],\n    'Number of miles': [10, 9, 6, 10, 10]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","table":"Name: Miles hiked\nUnit: None\nContent:\nDay | Number of miles\nSaturday | 10\nSunday | 9\nMonday | 6\nTuesday | 10\nWednesday | 10"}
{"level":8,"answer":46.0,"prediction":"import pandas as pd\n\ndef count_members_with_at_least_1_trip(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trips to the zoo last year and returns the number of members who went to the zoo at least 1 time.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of trips and their frequencies.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of members who went to the zoo at least 1 time.\n    \"\"\"\n    # Filter the DataFrame for trips greater than or equal to 1\n    filtered_df = df[df['Number of trips'] >= 1]\n    \n    # Calculate the total number of members who went to the zoo at least 1 time\n    num_members = filtered_df['Frequency'].sum()\n    \n    return num_members\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [0, 1, 2, 3, 4, 5],\n    'Frequency': [8, 4, 6, 16, 1, 19]\n})\n# Call the tool to solve the problem\nprint(count_members_with_at_least_1_trip(df))","question":"The members of the science club shared how many times they had been to the zoo last year. How many members went to the zoo at least 1 time?","prediction_code":"import pandas as pd\n\ndef count_members_with_at_least_1_trip(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of trips to the zoo last year and returns the number of members who went to the zoo at least 1 time.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of trips and their frequencies.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The number of members who went to the zoo at least 1 time.\n    \"\"\"\n    # Filter the DataFrame for trips greater than or equal to 1\n    filtered_df = df[df['Number of trips'] >= 1]\n    \n    # Calculate the total number of members who went to the zoo at least 1 time\n    num_members = filtered_df['Frequency'].sum()\n    \n    return num_members","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [0, 1, 2, 3, 4, 5],\n    'Frequency': [8, 4, 6, 16, 1, 19]\n})\n# Call the tool to solve the problem\nprint(count_members_with_at_least_1_trip(df))","table":"Name: Trips to the zoo last year\nUnit: None\nContent:\nNumber of trips | Frequency\n0 | 8\n1 | 4\n2 | 6\n3 | 16\n4 | 1\n5 | 19"}
{"level":8,"answer":4.89,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of popcorn prices and a specific item and quantity, and returns the total cost for the given quantity of the item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing popcorn prices with columns 'Name' and 'Unit'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost for the given quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    if not item_df.empty:\n        # Extract the unit price from the DataFrame\n        unit_price = float(item_df['Unit'].values[0].split('$')[1].split(' ')[0])\n        # Calculate the total cost\n        total_cost = unit_price * quantity\n        return total_cost\n    else:\n        return None\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['ranch popcorn', 'kettle corn', 'chocolate popcorn', 'Parmesan popcorn', 'cheddar popcorn'],\n    'Unit': ['$1.14 per kg', '$1.22 per kg', '$0.45 per kg', '$1.34 per kg', '$1.63 per kg']\n})\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'cheddar popcorn', 3))","question":"What is the total cost for 3 kilograms of cheddar popcorn?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of popcorn prices and a specific item and quantity, and returns the total cost for the given quantity of the item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing popcorn prices with columns 'Name' and 'Unit'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost for the given quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    if not item_df.empty:\n        # Extract the unit price from the DataFrame\n        unit_price = float(item_df['Unit'].values[0].split('$')[1].split(' ')[0])\n        # Calculate the total cost\n        total_cost = unit_price * quantity\n        return total_cost\n    else:\n        return None","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['ranch popcorn', 'kettle corn', 'chocolate popcorn', 'Parmesan popcorn', 'cheddar popcorn'],\n    'Unit': ['$1.14 per kg', '$1.22 per kg', '$0.45 per kg', '$1.34 per kg', '$1.63 per kg']\n})\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'cheddar popcorn', 3))","table":"Name: None\nUnit: $\nContent:\nranch popcorn | $1.14 per kg\nkettle corn | $1.22 per kg\nchocolate popcorn | $0.45 per kg\nParmesan popcorn | $1.34 per kg\ncheddar popcorn | $1.63 per kg"}
{"level":5,"answer":16051.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, packages):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of vacation packages and their prices, and a list of packages to buy.\n    It returns the total cost of the selected packages.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing vacation packages and their prices with columns 'Name' and 'Price'.\n    packages (list): A list of package names to buy.\n    Returns:\n    float: The total cost of the selected packages.\n    \"\"\"\n    # Filter the DataFrame for the selected packages\n    selected_packages = df[df['Name'].isin(packages)]\n    \n    # Calculate the total cost of the selected packages\n    total_cost = selected_packages['Price'].sum()\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Caribbean vacation package', 'Hawaiian vacation package', 'European vacation package', 'Australian vacation package', 'African safari vacation package', 'Jamaican vacation package'],\n    'Price': [3067, 9919, 8830, 7221, 2180, 3400]\n})\n\n# Define the packages to buy\npackages = ['European vacation package', 'Australian vacation package']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, packages))","question":"How much money does Stefan need to buy a European vacation package and an Australian vacation package?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, packages):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of vacation packages and their prices, and a list of packages to buy.\n    It returns the total cost of the selected packages.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing vacation packages and their prices with columns 'Name' and 'Price'.\n    packages (list): A list of package names to buy.\n    Returns:\n    float: The total cost of the selected packages.\n    \"\"\"\n    # Filter the DataFrame for the selected packages\n    selected_packages = df[df['Name'].isin(packages)]\n    \n    # Calculate the total cost of the selected packages\n    total_cost = selected_packages['Price'].sum()\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Caribbean vacation package', 'Hawaiian vacation package', 'European vacation package', 'Australian vacation package', 'African safari vacation package', 'Jamaican vacation package'],\n    'Price': [3067, 9919, 8830, 7221, 2180, 3400]\n})\n\n# Define the packages to buy\npackages = ['European vacation package', 'Australian vacation package']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, packages))","table":"Name: None\nUnit: $\nContent:\nCaribbean vacation package | $3,067\nHawaiian vacation package | $9,919\nEuropean vacation package | $8,830\nAustralian vacation package | $7,221\nAfrican safari vacation package | $2,180\nJamaican vacation package | $3,400"}
{"level":3,"answer":0.12,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price list and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price list with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost for.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['piece of red sandstone', 'pumice stone', 'piece of rose quartz', 'piece of black mica', 'piece of black obsidian', 'yellow tiger\\'s eye'],\n    'Price': [0.04, 0.07, 0.05, 0.03, 0.02, 0.06]\n})\n\n# Define the items to calculate the total cost for\nitems = ['piece of rose quartz', 'pumice stone']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Ed need to buy a piece of rose quartz and a pumice stone?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price list and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price list with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost for.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['piece of red sandstone', 'pumice stone', 'piece of rose quartz', 'piece of black mica', 'piece of black obsidian', 'yellow tiger\\'s eye'],\n    'Price': [0.04, 0.07, 0.05, 0.03, 0.02, 0.06]\n})\n\n# Define the items to calculate the total cost for\nitems = ['piece of rose quartz', 'pumice stone']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\npiece of red sandstone | $0.04\npumice stone | $0.07\npiece of rose quartz | $0.05\npiece of black mica | $0.03\npiece of black obsidian | $0.02\nyellow tiger's eye | $0.06"}
{"level":2,"answer":8.0,"prediction":"import pandas as pd\n\ndef calculate_notepads(df, num_drawers):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of desk drawers and the number of notepads per drawer,\n    and returns the total number of notepads in a given number of drawers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of desk drawers and the number of notepads per drawer.\n    The DataFrame should have columns 'Number of desk drawers' and 'Number of notepads'.\n    num_drawers (int): The number of desk drawers to calculate the total number of notepads for.\n    Returns:\n    int: The total number of notepads in the given number of drawers.\n    \"\"\"\n    # Filter the DataFrame for the specific number of drawers\n    drawers_df = df[df['Number of desk drawers'] == num_drawers]\n    \n    # Check if the number of drawers exists in the DataFrame\n    if drawers_df.empty:\n        return \"Number of drawers not found\"\n    \n    # Get the number of notepads for the given number of drawers\n    num_notepads = drawers_df['Number of notepads'].values[0]\n    \n    # Calculate the total number of notepads\n    total_notepads = num_notepads * num_drawers\n    \n    return total_notepads\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of desk drawers': [1, 2, 3, 4],\n    'Number of notepads': [2, 4, 6, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_notepads(df, 4))","question":"Each desk drawer has 2 notepads. How many notepads are in 4 desk drawers?","prediction_code":"import pandas as pd\n\ndef calculate_notepads(df, num_drawers):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of desk drawers and the number of notepads per drawer,\n    and returns the total number of notepads in a given number of drawers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of desk drawers and the number of notepads per drawer.\n    The DataFrame should have columns 'Number of desk drawers' and 'Number of notepads'.\n    num_drawers (int): The number of desk drawers to calculate the total number of notepads for.\n    Returns:\n    int: The total number of notepads in the given number of drawers.\n    \"\"\"\n    # Filter the DataFrame for the specific number of drawers\n    drawers_df = df[df['Number of desk drawers'] == num_drawers]\n    \n    # Check if the number of drawers exists in the DataFrame\n    if drawers_df.empty:\n        return \"Number of drawers not found\"\n    \n    # Get the number of notepads for the given number of drawers\n    num_notepads = drawers_df['Number of notepads'].values[0]\n    \n    # Calculate the total number of notepads\n    total_notepads = num_notepads * num_drawers\n    \n    return total_notepads","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of desk drawers': [1, 2, 3, 4],\n    'Number of notepads': [2, 4, 6, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_notepads(df, 4))","table":"Name: None\nUnit: None\nContent:\nNumber of desk drawers | Number of notepads\n1 | 2\n2 | 4\n3 | 6\n4 | ?"}
{"level":8,"answer":3.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average food preparation time and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average food preparation time for each day.\n    The DataFrame should have columns 'Day' and 'Food preparation time (minutes)'.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Filter the DataFrame for the two days\n    day1_df = df[df['Day'] == day1]\n    day2_df = df[df['Day'] == day2]\n    \n    # Get the food preparation time for each day\n    day1_time = day1_df['Food preparation time (minutes)'].values[0]\n    day2_time = day2_df['Food preparation time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (day2_time - day1_time) \/ (df.index(day2) - df.index(day1))\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Food preparation time (minutes)': [38, 41, 45, 39, 39]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Tuesday', 'Wednesday'))","question":"A restaurant's average food preparation time was tracked from day to day as part of an efficiency improvement program. According to the table, what was the rate of change between Tuesday and Wednesday?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average food preparation time and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average food preparation time for each day.\n    The DataFrame should have columns 'Day' and 'Food preparation time (minutes)'.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Filter the DataFrame for the two days\n    day1_df = df[df['Day'] == day1]\n    day2_df = df[df['Day'] == day2]\n    \n    # Get the food preparation time for each day\n    day1_time = day1_df['Food preparation time (minutes)'].values[0]\n    day2_time = day2_df['Food preparation time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (day2_time - day1_time) \/ (df.index(day2) - df.index(day1))\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Food preparation time (minutes)': [38, 41, 45, 39, 39]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Tuesday', 'Wednesday'))","table":"Name: Average food preparation time\nUnit: minutes per day\nContent:\nDay | Food preparation time (minutes)\nTuesday | 38\nWednesday | 41\nThursday | 45\nFriday | 39\nSaturday | 39"}
{"level":5,"answer":12.0,"prediction":"import pandas as pd\n\ndef find_smallest_number_of_bricks(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of bricks per building and returns the smallest number of bricks.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of bricks per building.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of bricks.\n    \"\"\"\n    # Initialize the smallest number of bricks as infinity\n    smallest_bricks = float('inf')\n    \n    # Iterate through the rows of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Check if the number of bricks in the current row is smaller than the current smallest number of bricks\n        if stem < smallest_bricks:\n            smallest_bricks = stem\n        \n        # Check if there are any additional bricks in the leaf column\n        if len(leaf) > 0:\n            for j in range(len(leaf)):\n                brick = stem * 10 + leaf[j]\n                if brick < smallest_bricks:\n                    smallest_bricks = brick\n    \n    return smallest_bricks\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[2, 4], [], [], [5], [], [4, 6, 6, 7, 8], [], [], [0]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_bricks(df))","question":"The architecture student counted the number of bricks in each building in his neighborhood. What is the smallest number of bricks?","prediction_code":"import pandas as pd\n\ndef find_smallest_number_of_bricks(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of bricks per building and returns the smallest number of bricks.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of bricks per building.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of bricks.\n    \"\"\"\n    # Initialize the smallest number of bricks as infinity\n    smallest_bricks = float('inf')\n    \n    # Iterate through the rows of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Check if the number of bricks in the current row is smaller than the current smallest number of bricks\n        if stem < smallest_bricks:\n            smallest_bricks = stem\n        \n        # Check if there are any additional bricks in the leaf column\n        if len(leaf) > 0:\n            for j in range(len(leaf)):\n                brick = stem * 10 + leaf[j]\n                if brick < smallest_bricks:\n                    smallest_bricks = brick\n    \n    return smallest_bricks","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[2, 4], [], [], [5], [], [4, 6, 6, 7, 8], [], [], [0]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_bricks(df))","table":"Name: Bricks per building\nUnit: bricks\nContent:\nStem | Leaf \n1 | 2, 4\n2 | \n3 | \n4 | 5\n5 | \n6 | 4, 6, 6, 7, 8\n7 | \n8 | \n9 | 0"}
{"level":7,"answer":57.0,"prediction":"import pandas as pd\n\ndef calculate_total_visitors(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of library visits per resident and returns the total number of residents who visited the library.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of library visits per resident.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The total number of residents who visited the library.\n    \"\"\"\n    # Calculate the total number of residents who visited the library\n    total_visitors = df['Frequency'].sum()\n    \n    return total_visitors\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [1, 2, 3, 4, 5, 6],\n    'Frequency': [10, 5, 19, 0, 16, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_total_visitors(df))","question":"In considering whether to open a new branch, the city council examined the number of times some typical residents went to the library last month. How many people are there in all?","prediction_code":"import pandas as pd\n\ndef calculate_total_visitors(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of library visits per resident and returns the total number of residents who visited the library.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of library visits per resident.\n    The dataframe should contain \"Number of trips\" and \"Frequency\" columns.\n    Returns:\n    int: The total number of residents who visited the library.\n    \"\"\"\n    # Calculate the total number of residents who visited the library\n    total_visitors = df['Frequency'].sum()\n    \n    return total_visitors","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of trips': [1, 2, 3, 4, 5, 6],\n    'Frequency': [10, 5, 19, 0, 16, 7]\n})\n# Call the tool to solve the problem\nprint(calculate_total_visitors(df))","table":"Name: Going to the library last month\nUnit: None\nContent:\nNumber of trips | Frequency\n1 | 10\n2 | 5\n3 | 19\n4 | 0\n5 | 16\n6 | 7"}
{"level":7,"answer":7.44,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of buying a certain quantity of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price table with columns 'Item' and 'Price'.\n    item (str): The name of the item to calculate the cost for.\n    quantity (int): The quantity of the item to calculate the cost for.\n    Returns:\n    float: The total cost of buying the specified quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['bottle of vinegar', 'bottle of soy sauce', 'bottle of ketchup', 'jar of salsa', 'bottle of mustard', 'bottle of hot sauce'],\n    'Price': [0.66, 0.79, 0.86, 0.93, 0.75, 0.79]\n})\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, 'jar of salsa', 8)\n\n# Print out the answer\nprint(total_cost)","question":"How much money does Chloe need to buy 8 jars of salsa?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of buying a certain quantity of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price table with columns 'Item' and 'Price'.\n    item (str): The name of the item to calculate the cost for.\n    quantity (int): The quantity of the item to calculate the cost for.\n    Returns:\n    float: The total cost of buying the specified quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['bottle of vinegar', 'bottle of soy sauce', 'bottle of ketchup', 'jar of salsa', 'bottle of mustard', 'bottle of hot sauce'],\n    'Price': [0.66, 0.79, 0.86, 0.93, 0.75, 0.79]\n})\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, 'jar of salsa', 8)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\nbottle of vinegar | $0.66\nbottle of soy sauce | $0.79\nbottle of ketchup | $0.86\njar of salsa | $0.93\nbottle of mustard | $0.75\nbottle of hot sauce | $0.79"}
{"level":5,"answer":11.0,"prediction":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of basketball hoops per park and returns the mean number of basketball hoops.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of basketball hoops per park.\n    The dataframe should contain \"Park\" and \"Number of basketball hoops\" columns.\n    Returns:\n    float: The mean number of basketball hoops.\n    \"\"\"\n    # Calculate the mean of the \"Number of basketball hoops\" column\n    mean_hoops = df['Number of basketball hoops'].mean()\n    \n    return mean_hoops\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Park': ['Canal Park', 'Linden Park', 'Heron Park', 'Palm Park', 'Kelly Park', 'Mooreland Park'],\n    'Number of basketball hoops': [9, 9, 10, 12, 13, 13]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","question":"The parks department compared how many basketball hoops there are at each park. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of basketball hoops per park and returns the mean number of basketball hoops.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of basketball hoops per park.\n    The dataframe should contain \"Park\" and \"Number of basketball hoops\" columns.\n    Returns:\n    float: The mean number of basketball hoops.\n    \"\"\"\n    # Calculate the mean of the \"Number of basketball hoops\" column\n    mean_hoops = df['Number of basketball hoops'].mean()\n    \n    return mean_hoops","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Park': ['Canal Park', 'Linden Park', 'Heron Park', 'Palm Park', 'Kelly Park', 'Mooreland Park'],\n    'Number of basketball hoops': [9, 9, 10, 12, 13, 13]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","table":"Name: Basketball hoops\nUnit: None\nContent:\nPark | Number of basketball hoops\nCanal Park | 9\nLinden Park | 9\nHeron Park | 10\nPalm Park | 12\nKelly Park | 13\nMooreland Park | 13"}
{"level":5,"answer":3.0,"prediction":"import pandas as pd\n\ndef count_farms_with_cows(df, min_cows, max_cows):\n    \"\"\"\n    This function takes in a pandas DataFrame of cows per farm and returns the number of farms that have at least min_cows cows but fewer than max_cows cows.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of cows per farm.\n    The DataFrame should contain \"Stem\" and \"Leaf\" columns.\n    min_cows (int): The minimum number of cows per farm.\n    max_cows (int): The maximum number of cows per farm.\n    Returns:\n    int: The number of farms that have at least min_cows cows but fewer than max_cows cows.\n    \"\"\"\n    # prepare a list to calculate the number of cows on each farm\n    cows = []\n    # calculate the total number of cows on each farm\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            cows.append(stem * 10 + leaf[j])\n    # filter the farms where the number of cows is greater than or equal to min_cows and less than max_cows\n    filtered = [cow for cow in cows if min_cows <= cow < max_cows]\n    # count the number of farms\n    num_farms = len(filtered)\n    return num_farms\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[0, 2, 2, 3, 9], [2, 6], [4], [3], [8], [8], [0]]\n})\n# Call the tool to solve the problem\nprint(count_farms_with_cows(df, 70, 100))","question":"A researcher recorded the number of cows on each farm in the county. How many farms have at least 70 cows but fewer than 100 cows?","prediction_code":"import pandas as pd\n\ndef count_farms_with_cows(df, min_cows, max_cows):\n    \"\"\"\n    This function takes in a pandas DataFrame of cows per farm and returns the number of farms that have at least min_cows cows but fewer than max_cows cows.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of cows per farm.\n    The DataFrame should contain \"Stem\" and \"Leaf\" columns.\n    min_cows (int): The minimum number of cows per farm.\n    max_cows (int): The maximum number of cows per farm.\n    Returns:\n    int: The number of farms that have at least min_cows cows but fewer than max_cows cows.\n    \"\"\"\n    # prepare a list to calculate the number of cows on each farm\n    cows = []\n    # calculate the total number of cows on each farm\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            cows.append(stem * 10 + leaf[j])\n    # filter the farms where the number of cows is greater than or equal to min_cows and less than max_cows\n    filtered = [cow for cow in cows if min_cows <= cow < max_cows]\n    # count the number of farms\n    num_farms = len(filtered)\n    return num_farms","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[0, 2, 2, 3, 9], [2, 6], [4], [3], [8], [8], [0]]\n})\n# Call the tool to solve the problem\nprint(count_farms_with_cows(df, 70, 100))","table":"Name: Cows per farm\nUnit: farms\nContent:\nStem | Leaf \n3 | 0, 2, 2, 3, 9\n4 | 2, 6\n5 | 4\n6 | 3\n7 | 8\n8 | 8\n9 | 0"}
{"level":8,"answer":6.12,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of items, and returns the total cost of the items using pandas.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (dict): A dictionary where the keys are item names and the values are the quantities of each item.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item, quantity in items.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['grapefruits', 'oranges', 'pineapples', 'lemons'],\n    'Price': [0.82, 1.28, 1.26, 1.10]\n})\n\n# Initialize the items dictionary\nitems = {\n    'lemons': 1,\n    'grapefruits': 3,\n    'oranges': 2\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"Justine went to the store and bought 1 kilogram of lemons, 3 kilograms of grapefruits, and 2 kilograms of oranges. How much did she spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of items, and returns the total cost of the items using pandas.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (dict): A dictionary where the keys are item names and the values are the quantities of each item.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item, quantity in items.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['grapefruits', 'oranges', 'pineapples', 'lemons'],\n    'Price': [0.82, 1.28, 1.26, 1.10]\n})\n\n# Initialize the items dictionary\nitems = {\n    'lemons': 1,\n    'grapefruits': 3,\n    'oranges': 2\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\ngrapefruits | $0.82\/kg\noranges | $1.28\/kg\npineapples | $1.26\/kg\nlemons | $1.10\/kg"}
{"level":8,"answer":17.0,"prediction":"import pandas as pd\n\ndef count_students_more_than_2_times(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of times students went down the slide during recess, and returns the number of students who went down the slide more than 2 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of times students went down the slide.\n    The dataframe should contain \"Number of times\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who went down the slide more than 2 times.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of times is greater than 2\n    filtered_df = df[df['Number of times'] > 2]\n    \n    # Calculate the total number of students who went down the slide more than 2 times\n    num_students = filtered_df['Frequency'].sum()\n    \n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of times': [0, 1, 2, 3, 4],\n    'Frequency': [10, 19, 1, 12, 5]\n})\n# Call the tool to solve the problem\nprint(count_students_more_than_2_times(df))","question":"A school interested in expanding its playground counted the number of times that students went down the slide during recess. How many students went down the slide more than 2 times?","prediction_code":"import pandas as pd\n\ndef count_students_more_than_2_times(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of times students went down the slide during recess, and returns the number of students who went down the slide more than 2 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of times students went down the slide.\n    The dataframe should contain \"Number of times\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who went down the slide more than 2 times.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of times is greater than 2\n    filtered_df = df[df['Number of times'] > 2]\n    \n    # Calculate the total number of students who went down the slide more than 2 times\n    num_students = filtered_df['Frequency'].sum()\n    \n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of times': [0, 1, 2, 3, 4],\n    'Frequency': [10, 19, 1, 12, 5]\n})\n# Call the tool to solve the problem\nprint(count_students_more_than_2_times(df))","table":"Name: Going down the slide at recess\nUnit: None\nContent:\nNumber of times | Frequency\n0 | 10\n1 | 19\n2 | 1\n3 | 12\n4 | 5"}
{"level":4,"answer":0.0,"prediction":"import pandas as pd\n\ndef count_magazines_with_39_pages(df):\n    \"\"\"\n    This function takes in a pandas dataframe of pages per magazine, and returns the number of magazines that have exactly 39 pages.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pages per magazine.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of magazines that have exactly 39 pages.\n    \"\"\"\n    # prepare a list to calculate the total number of pages in each magazine\n    pages = []\n    # calculate the total number of pages in each magazine\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            pages.append(stem * 10 + leaf[j])\n    # count the number of magazines that have exactly 39 pages\n    num_magazines = pages.count(39)\n    return num_magazines\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7],\n    'Leaf': [[7], [1, 3, 5, 5, 6, 9], [4], [1, 3], [3, 3, 5, 7]]\n})\n# Call the tool to solve the problem\nprint(count_magazines_with_39_pages(df))","question":"Jada, a journalism student, counted the number of pages in several major magazines. How many magazines had exactly 39 pages?","prediction_code":"import pandas as pd\n\ndef count_magazines_with_39_pages(df):\n    \"\"\"\n    This function takes in a pandas dataframe of pages per magazine, and returns the number of magazines that have exactly 39 pages.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pages per magazine.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of magazines that have exactly 39 pages.\n    \"\"\"\n    # prepare a list to calculate the total number of pages in each magazine\n    pages = []\n    # calculate the total number of pages in each magazine\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            pages.append(stem * 10 + leaf[j])\n    # count the number of magazines that have exactly 39 pages\n    num_magazines = pages.count(39)\n    return num_magazines","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7],\n    'Leaf': [[7], [1, 3, 5, 5, 6, 9], [4], [1, 3], [3, 3, 5, 7]]\n})\n# Call the tool to solve the problem\nprint(count_magazines_with_39_pages(df))","table":"Name: Pages per magazine\nUnit: None\nContent:\nStem | Leaf \n3 | 7\n4 | 1, 3, 5, 5, 6, 9\n5 | 4\n6 | 1, 3\n7 | 3, 3, 5, 7"}
{"level":8,"answer":7.29,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of buying a certain quantity of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item to be purchased.\n    quantity (int): The number of items to be purchased.\n    Returns:\n    float: The total cost of buying the specified quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = quantity * item_price\n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['baseball bat key chain', 'alligator key chain', 'horse key chain', 'football helmet key chain', 'puppy key chain'],\n    'Price': [2.82, 2.66, 2.43, 2.43, 2.21]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'horse key chain', 3))","question":"How much money does Colin need to buy 3 horse key chains?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of buying a certain quantity of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item to be purchased.\n    quantity (int): The number of items to be purchased.\n    Returns:\n    float: The total cost of buying the specified quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = quantity * item_price\n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['baseball bat key chain', 'alligator key chain', 'horse key chain', 'football helmet key chain', 'puppy key chain'],\n    'Price': [2.82, 2.66, 2.43, 2.43, 2.21]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'horse key chain', 3))","table":"Name: None\nUnit: $\nContent:\nbaseball bat key chain | $2.82\nalligator key chain | $2.66\nhorse key chain | $2.43\nfootball helmet key chain | $2.43\npuppy key chain | $2.21"}
{"level":7,"answer":324.0,"prediction":"import pandas as pd\n\ndef calculate_ride_cost_difference(df, ride1, ride2):\n    \"\"\"\n    This function takes in a pandas DataFrame of ride costs and two ride names, and returns the difference in cost between the two rides.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ride names and their costs with columns 'Name' and 'Cost'.\n    ride1 (str): The name of the first ride.\n    ride2 (str): The name of the second ride.\n    Returns:\n    float: The difference in cost between the two rides.\n    \"\"\"\n    # Filter the DataFrame for the two rides\n    ride1_df = df[df['Name'] == ride1]\n    ride2_df = df[df['Name'] == ride2]\n    \n    # Get the cost of each ride\n    ride1_cost = ride1_df['Cost'].values[0]\n    ride2_cost = ride2_df['Cost'].values[0]\n    \n    # Calculate the difference in cost\n    cost_difference = ride1_cost - ride2_cost\n    \n    return cost_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['airplane ride', 'speedboat ride', 'helicopter ride', 'hot air balloon ride', 'jet ski ride', 'limousine ride'],\n    'Cost': [322.00, 562.00, 830.00, 623.00, 299.00, 699.00]\n})\n\n# Call the tool to solve the problem\nride1 = 'hot air balloon ride'\nride2 = 'jet ski ride'\ncost_difference = calculate_ride_cost_difference(df, ride1, ride2)\n\n# Print out the answer\nprint(cost_difference)","question":"How much more does a hot air balloon ride cost than a jet ski ride?","prediction_code":"import pandas as pd\n\ndef calculate_ride_cost_difference(df, ride1, ride2):\n    \"\"\"\n    This function takes in a pandas DataFrame of ride costs and two ride names, and returns the difference in cost between the two rides.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ride names and their costs with columns 'Name' and 'Cost'.\n    ride1 (str): The name of the first ride.\n    ride2 (str): The name of the second ride.\n    Returns:\n    float: The difference in cost between the two rides.\n    \"\"\"\n    # Filter the DataFrame for the two rides\n    ride1_df = df[df['Name'] == ride1]\n    ride2_df = df[df['Name'] == ride2]\n    \n    # Get the cost of each ride\n    ride1_cost = ride1_df['Cost'].values[0]\n    ride2_cost = ride2_df['Cost'].values[0]\n    \n    # Calculate the difference in cost\n    cost_difference = ride1_cost - ride2_cost\n    \n    return cost_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['airplane ride', 'speedboat ride', 'helicopter ride', 'hot air balloon ride', 'jet ski ride', 'limousine ride'],\n    'Cost': [322.00, 562.00, 830.00, 623.00, 299.00, 699.00]\n})\n\n# Call the tool to solve the problem\nride1 = 'hot air balloon ride'\nride2 = 'jet ski ride'\ncost_difference = calculate_ride_cost_difference(df, ride1, ride2)\n\n# Print out the answer\nprint(cost_difference)","table":"Name: None\nUnit: $\nContent:\nairplane ride | $322.00\nspeedboat ride | $562.00\nhelicopter ride | $830.00\nhot air balloon ride | $623.00\njet ski ride | $299.00\nlimousine ride | $699.00"}
{"level":8,"answer":6.0,"prediction":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of stuffed animal collections and returns the mode of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and numbers of stuffed animals.\n    The dataframe should contain \"Name\" and \"Number of stuffed animals\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of stuffed animals']\n    \n    # Calculate the mode using the value_counts() function\n    mode = numbers.value_counts().idxmax()\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Tyrone', 'Ronald', 'Santiago', 'Mateo', 'Harper', 'Edward'],\n    'Number of stuffed animals': [5, 6, 7, 7, 6, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"Some friends compared the sizes of their stuffed animal collections. What is the mode of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of stuffed animal collections and returns the mode of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and numbers of stuffed animals.\n    The dataframe should contain \"Name\" and \"Number of stuffed animals\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of stuffed animals']\n    \n    # Calculate the mode using the value_counts() function\n    mode = numbers.value_counts().idxmax()\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Tyrone', 'Ronald', 'Santiago', 'Mateo', 'Harper', 'Edward'],\n    'Number of stuffed animals': [5, 6, 7, 7, 6, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Stuffed animal collections\nUnit: None\nContent:\nName | Number of stuffed animals\nTyrone | 5\nRonald | 6\nSantiago | 7\nMateo | 7\nHarper | 6\nEdward | 6"}
{"level":6,"answer":1.0,"prediction":"import pandas as pd\n\ndef count_farms_with_62_cows(df):\n    \"\"\"\n    This function takes in a pandas dataframe of cows per farm, and returns the number of farms that have exactly 62 cows.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of cows per farm.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of farms that have exactly 62 cows.\n    \"\"\"\n    # prepare a list to calculate the number of cows in each farm\n    cows = []\n    # calculate the total number of cows in each farm\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            cows.append(stem * 10 + leaf[j])\n    # filter the farms where the total number of cows is equal to 62\n    filtered = [cow for cow in cows if cow == 62]\n    # count the number of rows\n    num_farms = len(filtered)\n    return num_farms\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6],\n    'Leaf': [[2, 2, 7], [8, 9, 9], [0, 0, 1, 4, 5, 7], [0, 2]]\n})\n# Call the tool to solve the problem\nprint(count_farms_with_62_cows(df))","question":"A researcher recorded the number of cows on each farm in the county. How many farms have exactly 62 cows?","prediction_code":"import pandas as pd\n\ndef count_farms_with_62_cows(df):\n    \"\"\"\n    This function takes in a pandas dataframe of cows per farm, and returns the number of farms that have exactly 62 cows.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of cows per farm.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of farms that have exactly 62 cows.\n    \"\"\"\n    # prepare a list to calculate the number of cows in each farm\n    cows = []\n    # calculate the total number of cows in each farm\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            cows.append(stem * 10 + leaf[j])\n    # filter the farms where the total number of cows is equal to 62\n    filtered = [cow for cow in cows if cow == 62]\n    # count the number of rows\n    num_farms = len(filtered)\n    return num_farms","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6],\n    'Leaf': [[2, 2, 7], [8, 9, 9], [0, 0, 1, 4, 5, 7], [0, 2]]\n})\n# Call the tool to solve the problem\nprint(count_farms_with_62_cows(df))","table":"Name: Cows per farm\nUnit: farms\nContent:\nStem | Leaf \n3 | 2, 2, 7\n4 | 8, 9, 9\n5 | 0, 0, 1, 4, 5, 7\n6 | 0, 2"}
{"level":1,"answer":50.0,"prediction":"import pandas as pd\n\ndef calculate_total_mustard_bottles(df, num_tables):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of mustard bottles per restaurant table and the number of tables, and returns the total number of mustard bottles.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of mustard bottles per restaurant table.\n    The dataframe should contain \"Number of restaurant tables\" and \"Number of mustard bottles\" columns.\n    num_tables (int): The number of restaurant tables.\n    Returns:\n    int: The total number of mustard bottles.\n    \"\"\"\n    # Get the number of mustard bottles per table\n    mustard_per_table = df['Number of mustard bottles'].values[0]\n    \n    # Calculate the total number of mustard bottles\n    total_mustard_bottles = mustard_per_table * num_tables\n    \n    return total_mustard_bottles\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of restaurant tables': [1, 2, 3, 4, 5],\n    'Number of mustard bottles': [10, 20, 30, 40, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_mustard_bottles(df, 5))","question":"Each restaurant table has 10 mustard bottles. How many mustard bottles are on 5 restaurant tables?","prediction_code":"import pandas as pd\n\ndef calculate_total_mustard_bottles(df, num_tables):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of mustard bottles per restaurant table and the number of tables, and returns the total number of mustard bottles.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of mustard bottles per restaurant table.\n    The dataframe should contain \"Number of restaurant tables\" and \"Number of mustard bottles\" columns.\n    num_tables (int): The number of restaurant tables.\n    Returns:\n    int: The total number of mustard bottles.\n    \"\"\"\n    # Get the number of mustard bottles per table\n    mustard_per_table = df['Number of mustard bottles'].values[0]\n    \n    # Calculate the total number of mustard bottles\n    total_mustard_bottles = mustard_per_table * num_tables\n    \n    return total_mustard_bottles","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of restaurant tables': [1, 2, 3, 4, 5],\n    'Number of mustard bottles': [10, 20, 30, 40, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_mustard_bottles(df, 5))","table":"Name: None\nUnit: mustard bottles\nContent:\nNumber of restaurant tables | Number of mustard bottles\n1 | 10\n2 | 20\n3 | 30\n4 | 40\n5 | ?"}
{"level":5,"answer":33.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of phone calls received and returns the range of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of calls received each day.\n    The dataframe should contain \"Day\" and \"Number of calls\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of calls\" column\n    min_calls = df['Number of calls'].min()\n    max_calls = df['Number of calls'].max()\n    \n    # Calculate the range\n    range_calls = max_calls - min_calls\n    \n    return range_calls\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday'],\n    'Number of calls': [95, 87, 92, 76, 62, 85, 86]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"A technical support line tracked how many calls it received each day. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of phone calls received and returns the range of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of calls received each day.\n    The dataframe should contain \"Day\" and \"Number of calls\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of calls\" column\n    min_calls = df['Number of calls'].min()\n    max_calls = df['Number of calls'].max()\n    \n    # Calculate the range\n    range_calls = max_calls - min_calls\n    \n    return range_calls","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday'],\n    'Number of calls': [95, 87, 92, 76, 62, 85, 86]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Phone calls received\nUnit: None\nContent:\nDay | Number of calls\nThursday | 95\nFriday | 87\nSaturday | 92\nSunday | 76\nMonday | 62\nTuesday | 85\nWednesday | 86"}
{"level":2,"answer":40.0,"prediction":"import pandas as pd\n\ndef calculate_sweaters_in_bags(df, num_bags):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of sweaters in shopping bags and the number of bags, and returns the total number of sweaters.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of shopping bags and the number of sweaters per bag.\n    The DataFrame should have columns 'Number of shopping bags' and 'Number of sweaters'.\n    num_bags (int): The number of shopping bags.\n    Returns:\n    int: The total number of sweaters.\n    \"\"\"\n    # Filter the DataFrame for the specific number of bags\n    bags_df = df[df['Number of shopping bags'] == num_bags]\n    \n    # Get the number of sweaters from the filtered DataFrame\n    num_sweaters = bags_df['Number of sweaters'].values[0]\n    \n    # Calculate the total number of sweaters\n    total_sweaters = num_sweaters * num_bags\n    \n    return total_sweaters\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of shopping bags': [1, 2, 3, 4],\n    'Number of sweaters': [10, 20, 30, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_sweaters_in_bags(df, 4))","question":"Each shopping bag has 10 sweaters. How many sweaters are in 4 shopping bags?","prediction_code":"import pandas as pd\n\ndef calculate_sweaters_in_bags(df, num_bags):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of sweaters in shopping bags and the number of bags, and returns the total number of sweaters.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of shopping bags and the number of sweaters per bag.\n    The DataFrame should have columns 'Number of shopping bags' and 'Number of sweaters'.\n    num_bags (int): The number of shopping bags.\n    Returns:\n    int: The total number of sweaters.\n    \"\"\"\n    # Filter the DataFrame for the specific number of bags\n    bags_df = df[df['Number of shopping bags'] == num_bags]\n    \n    # Get the number of sweaters from the filtered DataFrame\n    num_sweaters = bags_df['Number of sweaters'].values[0]\n    \n    # Calculate the total number of sweaters\n    total_sweaters = num_sweaters * num_bags\n    \n    return total_sweaters","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of shopping bags': [1, 2, 3, 4],\n    'Number of sweaters': [10, 20, 30, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_sweaters_in_bags(df, 4))","table":"Name: None\nUnit: None\nContent:\nNumber of shopping bags | Number of sweaters\n1 | 10\n2 | 20\n3 | 30\n4 | ?"}
{"level":8,"answer":157.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of orders, and returns the total cost of the orders.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['DVD', 'microphone', 'toaster', 'camera'],\n    'Price': [15.00, 14.00, 45.00, 68.00]\n})\n\n# Initialize the orders dictionary\norders = {\n    'DVD': 3,\n    'microphone': 8\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","question":"How much money does Dylan need to buy 8 microphones and 3 DVDs?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of orders, and returns the total cost of the orders.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['DVD', 'microphone', 'toaster', 'camera'],\n    'Price': [15.00, 14.00, 45.00, 68.00]\n})\n\n# Initialize the orders dictionary\norders = {\n    'DVD': 3,\n    'microphone': 8\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","table":"Name: None\nUnit: $\nContent:\nDVD | $15.00\nmicrophone | $14.00\ntoaster | $45.00\ncamera | $68.00"}
{"level":5,"answer":9.0,"prediction":"import pandas as pd\n\ndef calculate_mean_age(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of club members' ages and returns the mean of the ages.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and ages of club members.\n    The DataFrame should have columns 'Name' and 'Age (years)'.\n    Returns:\n    float: The mean of the ages.\n    \"\"\"\n    # Extract the 'Age (years)' column from the DataFrame\n    ages = df['Age (years)']\n    \n    # Calculate the mean of the ages using the pandas mean() function\n    mean_age = ages.mean()\n    \n    return mean_age\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Roger', 'Emily', 'Camille', 'Ben', 'Oscar', 'Lindsey', 'Shelby'],\n    'Age (years)': [10, 8, 7, 7, 13, 8, 10]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_age(df))","question":"The science club made a table showing the ages of its members. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean_age(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of club members' ages and returns the mean of the ages.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and ages of club members.\n    The DataFrame should have columns 'Name' and 'Age (years)'.\n    Returns:\n    float: The mean of the ages.\n    \"\"\"\n    # Extract the 'Age (years)' column from the DataFrame\n    ages = df['Age (years)']\n    \n    # Calculate the mean of the ages using the pandas mean() function\n    mean_age = ages.mean()\n    \n    return mean_age","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Roger', 'Emily', 'Camille', 'Ben', 'Oscar', 'Lindsey', 'Shelby'],\n    'Age (years)': [10, 8, 7, 7, 13, 8, 10]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_age(df))","table":"Name: Club members' ages\nUnit: None\nContent:\nName | Age (years)\nRoger | 10\nEmily | 8\nCamille | 7\nBen | 7\nOscar | 13\nLindsey | 8\nShelby | 10"}
{"level":7,"answer":4.0,"prediction":"import pandas as pd\n\ndef calculate_mean_age(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of ages of cousins and returns the mean of the ages.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and ages of cousins.\n    The DataFrame should have columns 'Name' and 'Age (years)'.\n    Returns:\n    float: The mean of the ages of cousins.\n    \"\"\"\n    # Extract the 'Age (years)' column from the DataFrame\n    ages = df['Age (years)']\n    \n    # Calculate the mean of the ages\n    mean_age = ages.mean()\n    \n    return mean_age\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Abdul', 'Matt', 'Layla', 'Brian', 'Celine', 'Eve', 'Vivian'],\n    'Age (years)': [4, 5, 4, 1, 3, 5, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_age(df))","question":"A girl compared the ages of her cousins. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean_age(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of ages of cousins and returns the mean of the ages.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and ages of cousins.\n    The DataFrame should have columns 'Name' and 'Age (years)'.\n    Returns:\n    float: The mean of the ages of cousins.\n    \"\"\"\n    # Extract the 'Age (years)' column from the DataFrame\n    ages = df['Age (years)']\n    \n    # Calculate the mean of the ages\n    mean_age = ages.mean()\n    \n    return mean_age","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Abdul', 'Matt', 'Layla', 'Brian', 'Celine', 'Eve', 'Vivian'],\n    'Age (years)': [4, 5, 4, 1, 3, 5, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_age(df))","table":"Name: Ages of cousins\nUnit: None\nContent:\nName | Age (years)\nAbdul | 4\nMatt | 5\nLayla | 4\nBrian | 1\nCeline | 3\nEve | 5\nVivian | 6"}
{"level":3,"answer":8861.0,"prediction":"import pandas as pd\n\ndef calculate_total_tractors(df, months):\n    \"\"\"\n    This function takes in a pandas DataFrame of tractors made each month and a list of months, and returns the total number of tractors made in the specified months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of tractors made each month.\n    The DataFrame should have columns 'Month' and 'Number of tractors'.\n    months (list): A list of months for which the total number of tractors is to be calculated.\n    Returns:\n    int: The total number of tractors made in the specified months.\n    \"\"\"\n    # Filter the DataFrame for the specified months\n    filtered_df = df[df['Month'].isin(months)]\n    \n    # Calculate the total number of tractors made in the specified months\n    total_tractors = filtered_df['Number of tractors'].sum()\n    \n    return total_tractors\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['December', 'January', 'February', 'March'],\n    'Number of tractors': [6678, 1797, 1315, 2183]\n})\n\n# Specify the months for which the total number of tractors is to be calculated\nmonths = ['December', 'March']\n\n# Call the tool to solve the problem\nprint(calculate_total_tractors(df, months))","question":"A farm equipment company kept a record of the number of tractors made each month. How many tractors did the company make in total in December and March?","prediction_code":"import pandas as pd\n\ndef calculate_total_tractors(df, months):\n    \"\"\"\n    This function takes in a pandas DataFrame of tractors made each month and a list of months, and returns the total number of tractors made in the specified months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of tractors made each month.\n    The DataFrame should have columns 'Month' and 'Number of tractors'.\n    months (list): A list of months for which the total number of tractors is to be calculated.\n    Returns:\n    int: The total number of tractors made in the specified months.\n    \"\"\"\n    # Filter the DataFrame for the specified months\n    filtered_df = df[df['Month'].isin(months)]\n    \n    # Calculate the total number of tractors made in the specified months\n    total_tractors = filtered_df['Number of tractors'].sum()\n    \n    return total_tractors","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['December', 'January', 'February', 'March'],\n    'Number of tractors': [6678, 1797, 1315, 2183]\n})\n\n# Specify the months for which the total number of tractors is to be calculated\nmonths = ['December', 'March']\n\n# Call the tool to solve the problem\nprint(calculate_total_tractors(df, months))","table":"Name: Tractors made\nUnit: tractors\nContent:\nMonth | Number of tractors\nDecember | 6,678\nJanuary | 1,797\nFebruary | 1,315\nMarch | 2,183"}
{"level":7,"answer":37.0,"prediction":"import pandas as pd\n\ndef count_readers(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of winter hats and returns the total number of readers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of winter hats and their frequencies.\n    The dataframe should contain \"Number of winter hats\" and \"Frequency\" columns.\n    Returns:\n    int: The total number of readers.\n    \"\"\"\n    # Sum the frequencies to get the total number of readers\n    total_readers = df['Frequency'].sum()\n    \n    return total_readers\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of winter hats': [0, 1, 2, 3, 4],\n    'Frequency': [2, 9, 3, 10, 13]\n})\n# Call the tool to solve the problem\nprint(count_readers(df))","question":"A fashion magazine poll asks how many winter hats each reader owns. How many readers are there in all?","prediction_code":"import pandas as pd\n\ndef count_readers(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of winter hats and returns the total number of readers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of winter hats and their frequencies.\n    The dataframe should contain \"Number of winter hats\" and \"Frequency\" columns.\n    Returns:\n    int: The total number of readers.\n    \"\"\"\n    # Sum the frequencies to get the total number of readers\n    total_readers = df['Frequency'].sum()\n    \n    return total_readers","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of winter hats': [0, 1, 2, 3, 4],\n    'Frequency': [2, 9, 3, 10, 13]\n})\n# Call the tool to solve the problem\nprint(count_readers(df))","table":"Name: Winter hats\nUnit: None\nContent:\nNumber of winter hats | Frequency\n0 | 2\n1 | 9\n2 | 3\n3 | 10\n4 | 13"}
{"level":8,"answer":31.0,"prediction":"import pandas as pd\n\ndef count_students_with_more_than_2_poems(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of poems written by students and returns the number of students who wrote more than 2 poems.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of poems written by students.\n    The DataFrame should contain \"Poems written\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who wrote more than 2 poems.\n    \"\"\"\n    # Filter the DataFrame for students who wrote more than 2 poems\n    filtered_df = df[df['Poems written'] > 2]\n    \n    # Count the number of rows\n    num_students = len(filtered_df)\n    \n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Poems written': [1, 2, 3, 4],\n    'Frequency': [2, 9, 17, 14]\n})\n# Call the tool to solve the problem\nprint(count_students_with_more_than_2_poems(df))","question":"Students at Summerfield Middle School wrote and submitted poems for a district-wide writing contest. How many students wrote more than 2 poems?","prediction_code":"import pandas as pd\n\ndef count_students_with_more_than_2_poems(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of poems written by students and returns the number of students who wrote more than 2 poems.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of poems written by students.\n    The DataFrame should contain \"Poems written\" and \"Frequency\" columns.\n    Returns:\n    int: The number of students who wrote more than 2 poems.\n    \"\"\"\n    # Filter the DataFrame for students who wrote more than 2 poems\n    filtered_df = df[df['Poems written'] > 2]\n    \n    # Count the number of rows\n    num_students = len(filtered_df)\n    \n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Poems written': [1, 2, 3, 4],\n    'Frequency': [2, 9, 17, 14]\n})\n# Call the tool to solve the problem\nprint(count_students_with_more_than_2_poems(df))","table":"Name: Writing poems\nUnit: None\nContent:\nPoems written | Frequency\n1 | 2\n2 | 9\n3 | 17\n4 | 14"}
{"level":6,"answer":7.0,"prediction":"import pandas as pd\n\ndef calculate_median_hours(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of hours worked per day and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of hours worked per day.\n    The dataframe should contain \"Day\" and \"Hours\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the \"Hours\" column from the DataFrame\n    hours = df['Hours']\n    \n    # Calculate the median using the pandas median function\n    median_hours = hours.median()\n    \n    return median_hours\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Hours': [10, 6, 4, 7, 6, 9, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_median_hours(df))","question":"A waitress kept track of how many hours she worked each day. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median_hours(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of hours worked per day and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of hours worked per day.\n    The dataframe should contain \"Day\" and \"Hours\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the \"Hours\" column from the DataFrame\n    hours = df['Hours']\n    \n    # Calculate the median using the pandas median function\n    median_hours = hours.median()\n    \n    return median_hours","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Hours': [10, 6, 4, 7, 6, 9, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_median_hours(df))","table":"Name: Hours worked\nUnit: None\nContent:\nDay | Hours\nFriday | 10\nSaturday | 6\nSunday | 4\nMonday | 7\nTuesday | 6\nWednesday | 9\nThursday | 8"}
{"level":5,"answer":8.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of kilometers run per day and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of kilometers run per day.\n    The dataframe should contain \"Day\" and \"Kilometers\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Kilometers\" column\n    min_value = df['Kilometers'].min()\n    max_value = df['Kilometers'].max()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday'],\n    'Kilometers': [7, 7, 0, 8, 1, 6, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"Rodrigo's coach wrote down how many kilometers he had run over the past 7 days. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of kilometers run per day and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of kilometers run per day.\n    The dataframe should contain \"Day\" and \"Kilometers\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Kilometers\" column\n    min_value = df['Kilometers'].min()\n    max_value = df['Kilometers'].max()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday'],\n    'Kilometers': [7, 7, 0, 8, 1, 6, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Kilometers run\nUnit: None\nContent:\nDay | Kilometers\nTuesday | 7\nWednesday | 7\nThursday | 0\nFriday | 8\nSaturday | 1\nSunday | 6\nMonday | 3"}
{"level":7,"answer":7.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of spelling words practiced and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of spelling words practiced each day.\n    The dataframe should contain \"Day\" and \"Number of spelling words\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of spelling words']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Number of spelling words': [9, 4, 9, 7, 4, 7, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"Liz wrote down how many spelling words she practiced each day. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of spelling words practiced and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of spelling words practiced each day.\n    The dataframe should contain \"Day\" and \"Number of spelling words\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of spelling words']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Number of spelling words': [9, 4, 9, 7, 4, 7, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Spelling words practiced\nUnit: None\nContent:\nDay | Number of spelling words\nFriday | 9\nSaturday | 4\nSunday | 9\nMonday | 7\nTuesday | 4\nWednesday | 7\nThursday | 6"}
{"level":3,"answer":169.0,"prediction":"import pandas as pd\n\ndef calculate_pumpkins_sold(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pumpkins sold per day and returns the difference in the number of pumpkins sold on Monday and Tuesday.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of pumpkins sold per day.\n    The dataframe should contain \"Day\" and \"Number of pumpkins\" columns.\n    Returns:\n    int: The difference in the number of pumpkins sold on Monday and Tuesday.\n    \"\"\"\n    # Filter the DataFrame for Monday and Tuesday\n    monday_df = df[df['Day'] == 'Monday']\n    tuesday_df = df[df['Day'] == 'Tuesday']\n    \n    # Get the number of pumpkins sold on Monday and Tuesday\n    monday_pumpkins = monday_df['Number of pumpkins'].values[0]\n    tuesday_pumpkins = tuesday_df['Number of pumpkins'].values[0]\n    \n    # Calculate the difference\n    difference = monday_pumpkins - tuesday_pumpkins\n    \n    return difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Number of pumpkins': [786, 617, 301, 436, 105]\n})\n# Call the tool to solve the problem\nprint(calculate_pumpkins_sold(df))","question":"A pumpkin patch monitored the number of pumpkins sold each day. How many more pumpkins did the pumpkin patch sell on Monday than on Tuesday?","prediction_code":"import pandas as pd\n\ndef calculate_pumpkins_sold(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pumpkins sold per day and returns the difference in the number of pumpkins sold on Monday and Tuesday.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of pumpkins sold per day.\n    The dataframe should contain \"Day\" and \"Number of pumpkins\" columns.\n    Returns:\n    int: The difference in the number of pumpkins sold on Monday and Tuesday.\n    \"\"\"\n    # Filter the DataFrame for Monday and Tuesday\n    monday_df = df[df['Day'] == 'Monday']\n    tuesday_df = df[df['Day'] == 'Tuesday']\n    \n    # Get the number of pumpkins sold on Monday and Tuesday\n    monday_pumpkins = monday_df['Number of pumpkins'].values[0]\n    tuesday_pumpkins = tuesday_df['Number of pumpkins'].values[0]\n    \n    # Calculate the difference\n    difference = monday_pumpkins - tuesday_pumpkins\n    \n    return difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Number of pumpkins': [786, 617, 301, 436, 105]\n})\n# Call the tool to solve the problem\nprint(calculate_pumpkins_sold(df))","table":"Name: Pumpkins sold\nUnit: pumpkins\nContent:\nDay | Number of pumpkins\nMonday | 786\nTuesday | 617\nWednesday | 301\nThursday | 436\nFriday | 105"}
{"level":8,"answer":16.0,"prediction":"import pandas as pd\n\ndef count_contestants_above_score(df, score):\n    \"\"\"\n    This function takes in a pandas DataFrame of scores on a quiz show and a score threshold, and returns the number of contestants who scored above the threshold.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the scores and frequencies of the contestants.\n    The dataframe should contain \"Score\" and \"Frequency\" columns.\n    score (int): The score threshold.\n    Returns:\n    int: The number of contestants who scored above the threshold.\n    \"\"\"\n    # Filter the DataFrame for scores above the threshold\n    filtered_df = df[df['Score'] > score]\n    \n    # Calculate the total number of contestants above the threshold\n    num_contestants = filtered_df['Frequency'].sum()\n    \n    return num_contestants\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Score': [5, 6, 7, 8, 9, 10],\n    'Frequency': [18, 6, 15, 13, 5, 16]\n})\n# Call the tool to solve the problem\nprint(count_contestants_above_score(df, 9))","question":"A game show program recorded the scores of its contestants. How many contestants scored more than 9?","prediction_code":"import pandas as pd\n\ndef count_contestants_above_score(df, score):\n    \"\"\"\n    This function takes in a pandas DataFrame of scores on a quiz show and a score threshold, and returns the number of contestants who scored above the threshold.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the scores and frequencies of the contestants.\n    The dataframe should contain \"Score\" and \"Frequency\" columns.\n    score (int): The score threshold.\n    Returns:\n    int: The number of contestants who scored above the threshold.\n    \"\"\"\n    # Filter the DataFrame for scores above the threshold\n    filtered_df = df[df['Score'] > score]\n    \n    # Calculate the total number of contestants above the threshold\n    num_contestants = filtered_df['Frequency'].sum()\n    \n    return num_contestants","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Score': [5, 6, 7, 8, 9, 10],\n    'Frequency': [18, 6, 15, 13, 5, 16]\n})\n# Call the tool to solve the problem\nprint(count_contestants_above_score(df, 9))","table":"Name: Scores on a quiz show\nUnit: None\nContent:\nScore | Frequency\n5 | 18\n6 | 6\n7 | 15\n8 | 13\n9 | 5\n10 | 16"}
{"level":7,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of numbers and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the numbers.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the numbers using the mean() function from pandas\n    mean = df.mean()\n    \n    return mean\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Teacher': ['Ms. Rojas', 'Ms. Cohen', 'Mr. Watson', 'Mrs. Jansen', 'Mr. Morales', 'Mr. Schmidt', 'Mrs. Tan', 'Mr. Lim'],\n    'Number of computers': [9, 1, 3, 9, 4, 2, 4, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","question":"The teachers at a middle school counted how many computers they had in their classrooms. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of numbers and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the numbers.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the numbers using the mean() function from pandas\n    mean = df.mean()\n    \n    return mean","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Teacher': ['Ms. Rojas', 'Ms. Cohen', 'Mr. Watson', 'Mrs. Jansen', 'Mr. Morales', 'Mr. Schmidt', 'Mrs. Tan', 'Mr. Lim'],\n    'Number of computers': [9, 1, 3, 9, 4, 2, 4, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","table":"Name: Computers in classrooms\nUnit: None\nContent:\nTeacher | Number of computers\nMs. Rojas | 9\nMs. Cohen | 1\nMr. Watson | 3\nMrs. Jansen | 9\nMr. Morales | 4\nMr. Schmidt | 2\nMrs. Tan | 4\nMr. Lim | 8"}
{"level":5,"answer":19.0,"prediction":"import pandas as pd\nimport statistics\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of lawn mowers sold and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of lawn mowers sold.\n    The dataframe should contain \"Day\" and \"Number of lawn mowers\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of lawn mowers']\n    \n    # Calculate the mode using the statistics module\n    mode = statistics.mode(numbers)\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Number of lawn mowers': [17, 19, 19, 17, 13, 19]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"A garden supply store kept track of how many lawn mowers it sold in the past 6 days. What is the mode of the numbers?","prediction_code":"import pandas as pd\nimport statistics\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of lawn mowers sold and returns the mode of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of lawn mowers sold.\n    The dataframe should contain \"Day\" and \"Number of lawn mowers\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of lawn mowers']\n    \n    # Calculate the mode using the statistics module\n    mode = statistics.mode(numbers)\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Number of lawn mowers': [17, 19, 19, 17, 13, 19]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Lawn mowers sold\nUnit: None\nContent:\nDay | Number of lawn mowers\nSunday | 17\nMonday | 19\nTuesday | 19\nWednesday | 17\nThursday | 13\nFriday | 19"}
{"level":6,"answer":6.0,"prediction":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of bird sightings and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of birds seen each day.\n    The DataFrame should have columns 'Day' and 'Number of birds'.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean using pandas\n    mean = df['Number of birds'].mean()\n    \n    return mean\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Number of birds': [2, 10, 5, 7, 3, 9, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","question":"Cody went on a bird watching trip and jotted down the number of birds he saw each day. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of bird sightings and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of birds seen each day.\n    The DataFrame should have columns 'Day' and 'Number of birds'.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean using pandas\n    mean = df['Number of birds'].mean()\n    \n    return mean","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Number of birds': [2, 10, 5, 7, 3, 9, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","table":"Name: Number of birds\nUnit: None\nContent:\nDay | Number of birds\nFriday | 2\nSaturday | 10\nSunday | 5\nMonday | 7\nTuesday | 3\nWednesday | 9\nThursday | 6"}
{"level":6,"answer":4.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of bags of popcorn sold and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of bags of popcorn sold.\n    The DataFrame should have \"Day\" and \"Number of bags of popcorn\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of bags of popcorn']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Number of bags of popcorn': [6, 6, 0, 8, 4, 2, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"A concession stand worker at the movie theater looked up how many bags of popcorn were sold in the past 7 days. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of bags of popcorn sold and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of bags of popcorn sold.\n    The DataFrame should have \"Day\" and \"Number of bags of popcorn\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of bags of popcorn']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Number of bags of popcorn': [6, 6, 0, 8, 4, 2, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Bags of popcorn sold\nUnit: None\nContent:\nDay | Number of bags of popcorn\nSaturday | 6\nSunday | 6\nMonday | 0\nTuesday | 8\nWednesday | 4\nThursday | 2\nFriday | 3"}
{"level":7,"answer":1.0,"prediction":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of soccer fields per park and returns the mode of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of soccer fields per park.\n    The dataframe should contain \"Park\" and \"Number of soccer fields\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the \"Number of soccer fields\" column\n    soccer_fields = df['Number of soccer fields']\n    \n    # Calculate the mode using the value_counts() function\n    mode = soccer_fields.value_counts().idxmax()\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Park': ['Crane Park', 'Juniper Park', 'Middle Park', 'Madison Park', 'Moon Park', 'Windy Hill Park', 'Elmhurst Park'],\n    'Number of soccer fields': [1, 6, 1, 1, 6, 3, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"The parks department compared how many soccer fields there are at each park. What is the mode of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of soccer fields per park and returns the mode of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of soccer fields per park.\n    The dataframe should contain \"Park\" and \"Number of soccer fields\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the \"Number of soccer fields\" column\n    soccer_fields = df['Number of soccer fields']\n    \n    # Calculate the mode using the value_counts() function\n    mode = soccer_fields.value_counts().idxmax()\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Park': ['Crane Park', 'Juniper Park', 'Middle Park', 'Madison Park', 'Moon Park', 'Windy Hill Park', 'Elmhurst Park'],\n    'Number of soccer fields': [1, 6, 1, 1, 6, 3, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Soccer fields\nUnit: None\nContent:\nPark | Number of soccer fields\nCrane Park | 1\nJuniper Park | 6\nMiddle Park | 1\nMadison Park | 1\nMoon Park | 6\nWindy Hill Park | 3\nElmhurst Park | 3"}
{"level":2,"answer":50.0,"prediction":"import pandas as pd\n\ndef calculate_total_cookies(df, num_platters):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of sugar cookies per platter and the number of platters, and returns the total number of sugar cookies.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of sugar cookies per platter with columns 'Number of platters' and 'Number of sugar cookies'.\n    num_platters (int): The number of platters.\n    Returns:\n    int: The total number of sugar cookies.\n    \"\"\"\n    # Filter the DataFrame for the specific number of platters\n    platter_df = df[df['Number of platters'] == num_platters]\n    \n    # Get the number of sugar cookies for the specified number of platters\n    num_cookies = platter_df['Number of sugar cookies'].values[0]\n    \n    # Calculate the total number of sugar cookies\n    total_cookies = num_platters * num_cookies\n    \n    return total_cookies\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of platters': [1, 2, 3, 4, 5],\n    'Number of sugar cookies': [10, 20, 30, 40, None]\n})\n\n# Set the number of platters\nnum_platters = 5\n\n# Call the tool to solve the problem\nprint(calculate_total_cookies(df, num_platters))","question":"Each platter has 10 sugar cookies. How many sugar cookies are on 5 platters?","prediction_code":"import pandas as pd\n\ndef calculate_total_cookies(df, num_platters):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of sugar cookies per platter and the number of platters, and returns the total number of sugar cookies.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of sugar cookies per platter with columns 'Number of platters' and 'Number of sugar cookies'.\n    num_platters (int): The number of platters.\n    Returns:\n    int: The total number of sugar cookies.\n    \"\"\"\n    # Filter the DataFrame for the specific number of platters\n    platter_df = df[df['Number of platters'] == num_platters]\n    \n    # Get the number of sugar cookies for the specified number of platters\n    num_cookies = platter_df['Number of sugar cookies'].values[0]\n    \n    # Calculate the total number of sugar cookies\n    total_cookies = num_platters * num_cookies\n    \n    return total_cookies","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of platters': [1, 2, 3, 4, 5],\n    'Number of sugar cookies': [10, 20, 30, 40, None]\n})\n\n# Set the number of platters\nnum_platters = 5\n\n# Call the tool to solve the problem\nprint(calculate_total_cookies(df, num_platters))","table":"Name: None\nUnit: None\nContent:\nNumber of platters | Number of sugar cookies\n1 | 10\n2 | 20\n3 | 30\n4 | 40\n5 | ?"}
{"level":6,"answer":0.0,"prediction":"import pandas as pd\n\ndef count_students_with_17_points(df):\n    \"\"\"\n    This function takes in a pandas dataframe of pop quiz scores and returns the number of students who scored exactly 17 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the pop quiz scores.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of students who scored exactly 17 points.\n    \"\"\"\n    # prepare a list to calculate the total score of each student\n    scores = []\n    # calculate the total score of each student\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # count the number of students who scored exactly 17 points\n    num_students = scores.count(17)\n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5],\n    'Leaf': [[1, 2, 8, 8], [5, 6], [0, 1, 6], [1, 2, 2, 6, 8], [1, 2, 5, 6, 7, 8]]\n})\n# Call the tool to solve the problem\nprint(count_students_with_17_points(df))","question":"Professor Arnold released the results of yesterday's pop quiz. How many students scored exactly 17 points?","prediction_code":"import pandas as pd\n\ndef count_students_with_17_points(df):\n    \"\"\"\n    This function takes in a pandas dataframe of pop quiz scores and returns the number of students who scored exactly 17 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the pop quiz scores.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of students who scored exactly 17 points.\n    \"\"\"\n    # prepare a list to calculate the total score of each student\n    scores = []\n    # calculate the total score of each student\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # count the number of students who scored exactly 17 points\n    num_students = scores.count(17)\n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5],\n    'Leaf': [[1, 2, 8, 8], [5, 6], [0, 1, 6], [1, 2, 2, 6, 8], [1, 2, 5, 6, 7, 8]]\n})\n# Call the tool to solve the problem\nprint(count_students_with_17_points(df))","table":"Name: Pop quiz scores\nUnit: students\nContent:\nStem | Leaf \n1 | 1, 2, 8, 8\n2 | 5, 6\n3 | 0, 1, 6\n4 | 1, 2, 2, 6, 8\n5 | 1, 2, 5, 6, 7, 8"}
{"level":4,"answer":46.0,"prediction":"import pandas as pd\n\ndef find_smallest_number(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of butterscotch candies per bag and returns the smallest number of butterscotch candies.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of butterscotch candies per bag.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of butterscotch candies.\n    \"\"\"\n    # Initialize the smallest number as infinity\n    smallest_number = float('inf')\n    \n    # Iterate through the rows of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Calculate the total number of butterscotch candies in each bag\n        total_candies = stem * 10 + sum(leaf)\n        \n        # Update the smallest number if the current bag has fewer candies\n        if total_candies < smallest_number:\n            smallest_number = total_candies\n    \n    return smallest_number\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7, 8],\n    'Leaf': [[6, 9], [9, 9, 9], [8, 9], [], [3]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number(df))","question":"At a candy factory, butterscotch candies were packaged into bags of different sizes. What is the smallest number of butterscotch candies?","prediction_code":"import pandas as pd\n\ndef find_smallest_number(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of butterscotch candies per bag and returns the smallest number of butterscotch candies.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of butterscotch candies per bag.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of butterscotch candies.\n    \"\"\"\n    # Initialize the smallest number as infinity\n    smallest_number = float('inf')\n    \n    # Iterate through the rows of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Calculate the total number of butterscotch candies in each bag\n        total_candies = stem * 10 + sum(leaf)\n        \n        # Update the smallest number if the current bag has fewer candies\n        if total_candies < smallest_number:\n            smallest_number = total_candies\n    \n    return smallest_number","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7, 8],\n    'Leaf': [[6, 9], [9, 9, 9], [8, 9], [], [3]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number(df))","table":"Name: Butterscotch candies per bag\nUnit: butterscotch candies\nContent:\nStem | Leaf \n4 | 6, 9\n5 | 9, 9, 9\n6 | 8, 9\n7 | \n8 | 3"}
{"level":5,"answer":17.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of watermelons harvested and returns the median of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of watermelons harvested.\n    The dataframe should contain \"Day\" and \"Number of watermelons\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column with the numbers\n    numbers = df['Number of watermelons']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday'],\n    'Number of watermelons': [15, 17, 26, 10, 21]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"A farmer recalled how many watermelons were harvested in the past 5 days. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of watermelons harvested and returns the median of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of watermelons harvested.\n    The dataframe should contain \"Day\" and \"Number of watermelons\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column with the numbers\n    numbers = df['Number of watermelons']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday'],\n    'Number of watermelons': [15, 17, 26, 10, 21]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Watermelons harvested\nUnit: None\nContent:\nDay | Number of watermelons\nSaturday | 15\nSunday | 17\nMonday | 26\nTuesday | 10\nWednesday | 21"}
{"level":6,"answer":31.0,"prediction":"import pandas as pd\n\ndef find_smallest_number_of_broken_cookies(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of broken cookies per pack and returns the smallest number of broken cookies.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken cookies per pack.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of broken cookies.\n    \"\"\"\n    # prepare a list to store the number of broken cookies\n    broken_cookies = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # if there are multiple values in the leaf column, split them and add them to the broken_cookies list\n        if isinstance(leaf, str):\n            leaf = leaf.split(',')\n            for j in range(len(leaf)):\n                broken_cookies.append(stem * 10 + int(leaf[j]))\n        # if there is only one value in the leaf column, add it to the broken_cookies list\n        elif isinstance(leaf, int):\n            broken_cookies.append(stem * 10 + leaf)\n    # find the smallest number of broken cookies\n    smallest_number = min(broken_cookies)\n    return smallest_number\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [1, '0, 4', 7, 5, '2, 5', '', 0]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_broken_cookies(df))","question":"A cookie factory monitored the number of broken cookies per pack yesterday. What is the smallest number of broken cookies?","prediction_code":"import pandas as pd\n\ndef find_smallest_number_of_broken_cookies(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of broken cookies per pack and returns the smallest number of broken cookies.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken cookies per pack.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of broken cookies.\n    \"\"\"\n    # prepare a list to store the number of broken cookies\n    broken_cookies = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # if there are multiple values in the leaf column, split them and add them to the broken_cookies list\n        if isinstance(leaf, str):\n            leaf = leaf.split(',')\n            for j in range(len(leaf)):\n                broken_cookies.append(stem * 10 + int(leaf[j]))\n        # if there is only one value in the leaf column, add it to the broken_cookies list\n        elif isinstance(leaf, int):\n            broken_cookies.append(stem * 10 + leaf)\n    # find the smallest number of broken cookies\n    smallest_number = min(broken_cookies)\n    return smallest_number","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [1, '0, 4', 7, 5, '2, 5', '', 0]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_broken_cookies(df))","table":"Name: Broken cookies per pack\nUnit: broken cookies\nContent:\nStem | Leaf \n3 | 1\n4 | 0, 4\n5 | 7\n6 | 5\n7 | 2, 5\n8 | \n9 | 0"}
{"level":7,"answer":1.5,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its price per kilogram and the quantity purchased.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per kilogram for different items.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item purchased in kilograms.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price per kilogram for the item\n    price_per_kg = item_df['Unit'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price_per_kg * quantity\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['chili peppers', 'red bell peppers', 'purple bell peppers', 'Anaheim peppers'],\n    'Unit': [0.88, 1.34, 0.73, 0.75]\n})\n\n# Call the tool to solve the problem\nitem = 'Anaheim peppers'\nquantity = 2\ntotal_cost = calculate_total_cost(df, item, quantity)\n\n# Print out the answer\nprint(total_cost)","question":"Keith went to the store. He bought 2 kilograms of Anaheim peppers. How much did he spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its price per kilogram and the quantity purchased.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per kilogram for different items.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item purchased in kilograms.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price per kilogram for the item\n    price_per_kg = item_df['Unit'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price_per_kg * quantity\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['chili peppers', 'red bell peppers', 'purple bell peppers', 'Anaheim peppers'],\n    'Unit': [0.88, 1.34, 0.73, 0.75]\n})\n\n# Call the tool to solve the problem\nitem = 'Anaheim peppers'\nquantity = 2\ntotal_cost = calculate_total_cost(df, item, quantity)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\nchili peppers | $0.88\/kg\nred bell peppers | $1.34\/kg\npurple bell peppers | $0.73\/kg\nAnaheim peppers | $0.75\/kg"}
{"level":8,"answer":7.0,"prediction":"import pandas as pd\n\ndef count_magazines_with_12_articles(df):\n    \"\"\"\n    This function takes in a pandas dataframe of articles per magazine, and returns the number of magazines that have at least 12 articles.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of articles per magazine.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of magazines that have at least 12 articles.\n    \"\"\"\n    # prepare a list to calculate the number of articles in each magazine\n    articles = []\n    # calculate the total number of articles in each magazine\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            articles.append(stem * 10 + leaf[j])\n    # filter the magazines where the total number of articles is greater than or equal to 12\n    filtered = [article for article in articles if article >= 12]\n    # count the number of magazines\n    num_magazines = len(filtered)\n    return num_magazines\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[2, 4, 7, 9], [2], [4], [0]]\n})\n# Call the tool to solve the problem\nprint(count_magazines_with_12_articles(df))","question":"Nick counted the number of articles in several different magazines. How many magazines had at least 12 articles?","prediction_code":"import pandas as pd\n\ndef count_magazines_with_12_articles(df):\n    \"\"\"\n    This function takes in a pandas dataframe of articles per magazine, and returns the number of magazines that have at least 12 articles.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of articles per magazine.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of magazines that have at least 12 articles.\n    \"\"\"\n    # prepare a list to calculate the number of articles in each magazine\n    articles = []\n    # calculate the total number of articles in each magazine\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            articles.append(stem * 10 + leaf[j])\n    # filter the magazines where the total number of articles is greater than or equal to 12\n    filtered = [article for article in articles if article >= 12]\n    # count the number of magazines\n    num_magazines = len(filtered)\n    return num_magazines","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[2, 4, 7, 9], [2], [4], [0]]\n})\n# Call the tool to solve the problem\nprint(count_magazines_with_12_articles(df))","table":"Name: Articles per magazine\nUnit: magazines\nContent:\nStem | Leaf \n1 | 2, 4, 7, 9\n2 | 2\n3 | 4\n4 | 0"}
{"level":8,"answer":3.0,"prediction":"import pandas as pd\n\ndef count_gardens_with_plants(df):\n    \"\"\"\n    This function takes in a pandas dataframe of plants per garden, and returns the number of gardens that have at least 40 plants but fewer than 60 plants.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of plants per garden.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of gardens that have at least 40 plants but fewer than 60 plants.\n    \"\"\"\n    # prepare a list to calculate the number of plants in each garden\n    plants = []\n    # calculate the total number of plants in each garden\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            plants.append(stem * 10 + leaf[j])\n    # filter the gardens where the total number of plants is greater than or equal to 40 and less than 60\n    filtered = [plant for plant in plants if 40 <= plant < 60]\n    # count the number of gardens\n    num_gardens = len(filtered)\n    return num_gardens\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6],\n    'Leaf': [[1, 5], [3, 4, 9], [7, 8, 8], [6, 8], [3], [0, 4, 5, 6, 6, 7, 8, 9]]\n})\n# Call the tool to solve the problem\nprint(count_gardens_with_plants(df))","question":"The members of the local garden club tallied the number of plants in each person's garden. How many gardens have at least 40 plants but fewer than 60 plants?","prediction_code":"import pandas as pd\n\ndef count_gardens_with_plants(df):\n    \"\"\"\n    This function takes in a pandas dataframe of plants per garden, and returns the number of gardens that have at least 40 plants but fewer than 60 plants.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of plants per garden.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of gardens that have at least 40 plants but fewer than 60 plants.\n    \"\"\"\n    # prepare a list to calculate the number of plants in each garden\n    plants = []\n    # calculate the total number of plants in each garden\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            plants.append(stem * 10 + leaf[j])\n    # filter the gardens where the total number of plants is greater than or equal to 40 and less than 60\n    filtered = [plant for plant in plants if 40 <= plant < 60]\n    # count the number of gardens\n    num_gardens = len(filtered)\n    return num_gardens","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6],\n    'Leaf': [[1, 5], [3, 4, 9], [7, 8, 8], [6, 8], [3], [0, 4, 5, 6, 6, 7, 8, 9]]\n})\n# Call the tool to solve the problem\nprint(count_gardens_with_plants(df))","table":"Name: Plants per garden\nUnit: gardens\nContent:\nStem | Leaf \n1 | 1, 5\n2 | 3, 4, 9\n3 | 7, 8, 8\n4 | 6, 8\n5 | 3\n6 | 0, 4, 5, 6, 6, 7, 8, 9"}
{"level":5,"answer":55.0,"prediction":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of scores and returns the mode of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the scores.\n    The DataFrame should have a column named 'Score'.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the values in the 'Score' column\n    scores = df['Score'].values\n    \n    # Calculate the mode using the value_counts() function\n    mode = scores.value_counts().idxmax()\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Aiden', 'Tori', 'Shane', 'Javier', 'Keenan', 'Rebecca', 'Bridget', 'Melissa'],\n    'Score': [55, 55, 53, 55, 53, 51, 53, 55]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"Some friends played a trivia game and recorded their scores. What is the mode of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of scores and returns the mode of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the scores.\n    The DataFrame should have a column named 'Score'.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the values in the 'Score' column\n    scores = df['Score'].values\n    \n    # Calculate the mode using the value_counts() function\n    mode = scores.value_counts().idxmax()\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Aiden', 'Tori', 'Shane', 'Javier', 'Keenan', 'Rebecca', 'Bridget', 'Melissa'],\n    'Score': [55, 55, 53, 55, 53, 51, 53, 55]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Trivia game scores\nUnit: None\nContent:\nName | Score\nAiden | 55\nTori | 55\nShane | 53\nJavier | 55\nKeenan | 53\nRebecca | 51\nBridget | 53\nMelissa | 55"}
{"level":6,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of temperature at noon for 5 days and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the temperature at noon for 5 days.\n    The dataframe should contain \"Day\" and \"Temperature (\u00c2\u00b0C)\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum temperature values\n    min_temp = df['Temperature (\u00c2\u00b0C)'].min()\n    max_temp = df['Temperature (\u00c2\u00b0C)'].max()\n    \n    # Calculate the range\n    temp_range = max_temp - min_temp\n    \n    return temp_range\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Temperature (\u00c2\u00b0C)': [8, 6, 4, 5, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"Mabel graphed the temperature at noon for 5 days. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of temperature at noon for 5 days and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the temperature at noon for 5 days.\n    The dataframe should contain \"Day\" and \"Temperature (\u00c2\u00b0C)\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum temperature values\n    min_temp = df['Temperature (\u00c2\u00b0C)'].min()\n    max_temp = df['Temperature (\u00c2\u00b0C)'].max()\n    \n    # Calculate the range\n    temp_range = max_temp - min_temp\n    \n    return temp_range","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Temperature (\u00c2\u00b0C)': [8, 6, 4, 5, 9]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Temperature at noon\nUnit: None\nContent:\nDay | Temperature (\u00c2\u00b0C)\nTuesday | 8\nWednesday | 6\nThursday | 4\nFriday | 5\nSaturday | 9"}
{"level":5,"answer":4.0,"prediction":"import pandas as pd\n\ndef count_people_with_21_situps(df):\n    \"\"\"\n    This function takes in a pandas dataframe of sit-up competition results and returns the number of people who did exactly 21 sit-ups.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of sit-ups for each person.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of people who did exactly 21 sit-ups.\n    \"\"\"\n    # prepare a list to store the number of sit-ups for each person\n    situps = []\n    # iterate through the dataframe and extract the number of sit-ups for each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            situps.append(stem * 10 + leaf[j])\n    # count the number of people who did exactly 21 sit-ups\n    num_people = situps.count(21)\n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7],\n    'Leaf': [[1], [1, 1, 1, 1, 2, 3], [4, 8], [4], [0, 2], [], [2, 5, 8, 8, 9]]\n})\n# Call the tool to solve the problem\nprint(count_people_with_21_situps(df))","question":"Miss Doyle ran a sit-up competition among her P.E. students and monitored how many sit-ups each students could do. How many people did exactly 21 sit-ups?","prediction_code":"import pandas as pd\n\ndef count_people_with_21_situps(df):\n    \"\"\"\n    This function takes in a pandas dataframe of sit-up competition results and returns the number of people who did exactly 21 sit-ups.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of sit-ups for each person.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of people who did exactly 21 sit-ups.\n    \"\"\"\n    # prepare a list to store the number of sit-ups for each person\n    situps = []\n    # iterate through the dataframe and extract the number of sit-ups for each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            situps.append(stem * 10 + leaf[j])\n    # count the number of people who did exactly 21 sit-ups\n    num_people = situps.count(21)\n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7],\n    'Leaf': [[1], [1, 1, 1, 1, 2, 3], [4, 8], [4], [0, 2], [], [2, 5, 8, 8, 9]]\n})\n# Call the tool to solve the problem\nprint(count_people_with_21_situps(df))","table":"Name: Sit-up competition (number of sit-ups)\nUnit: people\nContent:\nStem | Leaf \n1 | 1\n2 | 1, 1, 1, 1, 2, 3\n3 | 4, 8\n4 | 4\n5 | 0, 2\n6 | \n7 | 2, 5, 8, 8, 9"}
{"level":4,"answer":13.0,"prediction":"import pandas as pd\n\ndef find_lowest_score(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of midterm exam scores and returns the lowest score.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the midterm exam scores.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The lowest score on the midterm exam.\n    \"\"\"\n    # prepare a list to store all the scores\n    scores = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # iterate through each leaf value in the row\n        for j in range(len(leaf)):\n            # calculate the score by combining the stem and leaf values\n            score = stem * 10 + leaf[j]\n            # add the score to the list\n            scores.append(score)\n    # find the lowest score using the min() function\n    lowest_score = min(scores)\n    return lowest_score\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[3, 6, 9], [2, 7], [1], [], [4], [0], [], [7, 9], [0]]\n})\n# Call the tool to solve the problem\nprint(find_lowest_score(df))","question":"Professor Kerr informed his students of their scores on the midterm exam. What is the lowest score?","prediction_code":"import pandas as pd\n\ndef find_lowest_score(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of midterm exam scores and returns the lowest score.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the midterm exam scores.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The lowest score on the midterm exam.\n    \"\"\"\n    # prepare a list to store all the scores\n    scores = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # iterate through each leaf value in the row\n        for j in range(len(leaf)):\n            # calculate the score by combining the stem and leaf values\n            score = stem * 10 + leaf[j]\n            # add the score to the list\n            scores.append(score)\n    # find the lowest score using the min() function\n    lowest_score = min(scores)\n    return lowest_score","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[3, 6, 9], [2, 7], [1], [], [4], [0], [], [7, 9], [0]]\n})\n# Call the tool to solve the problem\nprint(find_lowest_score(df))","table":"Name: Midterm exam scores\nUnit: points\nContent:\nStem | Leaf \n1 | 3, 6, 9\n2 | 2, 7\n3 | 1\n4 | \n5 | 4\n6 | 0\n7 | \n8 | 7, 9\n9 | 0"}
{"level":7,"answer":9.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pet names and the number of pets they have, and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the pet names and the number of pets they have.\n    The DataFrame should contain \"Name\" and \"Number of pets\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the maximum and minimum values of the \"Number of pets\" column\n    max_value = df['Number of pets'].max()\n    min_value = df['Number of pets'].min()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Eddie', 'Sophia', 'Zoe', 'Addison', 'Noah', 'Miranda', 'Louis', 'Bobby'],\n    'Number of pets': [8, 1, 3, 4, 7, 1, 10, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"Some students compared how many pets they have. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pet names and the number of pets they have, and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the pet names and the number of pets they have.\n    The DataFrame should contain \"Name\" and \"Number of pets\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the maximum and minimum values of the \"Number of pets\" column\n    max_value = df['Number of pets'].max()\n    min_value = df['Number of pets'].min()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Eddie', 'Sophia', 'Zoe', 'Addison', 'Noah', 'Miranda', 'Louis', 'Bobby'],\n    'Number of pets': [8, 1, 3, 4, 7, 1, 10, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Pets\nUnit: None\nContent:\nName | Number of pets\nEddie | 8\nSophia | 1\nZoe | 3\nAddison | 4\nNoah | 7\nMiranda | 1\nLouis | 10\nBobby | 3"}
{"level":8,"answer":6.76,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its price per kilogram and the quantity purchased.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per kilogram for different items.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item purchased in kilograms.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price per kilogram for the item\n        price_per_kg = item_df['Unit'].values[0]\n        \n        # Calculate the total cost of the item\n        total_cost = price_per_kg * quantity\n        \n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Russet Burbank potatoes', 'King Edward potatoes', 'Red Pontiac potatoes', 'Golden Wonder potatoes', 'Yukon Gold potatoes'],\n    'Unit': [1.75, 1.69, 0.63, 1.78, 0.40]\n})\n\n# Call the tool to solve the problem\nitem = 'King Edward potatoes'\nquantity = 4\ntotal_cost = calculate_total_cost(df, item, quantity)\n\n# Print out the answer\nprint(total_cost)","question":"Jerry went to the store. He bought 4 kilograms of King Edward potatoes. How much did he spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its price per kilogram and the quantity purchased.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price per kilogram for different items.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item purchased in kilograms.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price per kilogram for the item\n        price_per_kg = item_df['Unit'].values[0]\n        \n        # Calculate the total cost of the item\n        total_cost = price_per_kg * quantity\n        \n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Russet Burbank potatoes', 'King Edward potatoes', 'Red Pontiac potatoes', 'Golden Wonder potatoes', 'Yukon Gold potatoes'],\n    'Unit': [1.75, 1.69, 0.63, 1.78, 0.40]\n})\n\n# Call the tool to solve the problem\nitem = 'King Edward potatoes'\nquantity = 4\ntotal_cost = calculate_total_cost(df, item, quantity)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\nRusset Burbank potatoes | $1.75\/kg\nKing Edward potatoes | $1.69\/kg\nRed Pontiac potatoes | $0.63\/kg\nGolden Wonder potatoes | $1.78\/kg\nYukon Gold potatoes | $0.40\/kg"}
{"level":4,"answer":8.0,"prediction":"import pandas as pd\n\ndef calculate_cheese_consumption_difference(df, country):\n    \"\"\"\n    This function takes in a pandas DataFrame of cheese consumption per capita and a country name, and returns the difference in cheese consumption per capita for the given country between 2006 and 1996.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing cheese consumption per capita data.\n    The DataFrame should have columns 'Country', '1996', and '2006'.\n    country (str): The name of the country to calculate the difference for.\n    Returns:\n    int: The difference in cheese consumption per capita for the given country between 2006 and 1996.\n    \"\"\"\n    # Filter the DataFrame for the given country\n    country_df = df[df['Country'] == country]\n    \n    # Calculate the difference in cheese consumption per capita between 2006 and 1996\n    consumption_1996 = country_df['1996'].values[0]\n    consumption_2006 = country_df['2006'].values[0]\n    difference = consumption_2006 - consumption_1996\n    \n    return difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Country': ['Germany', 'Australia', 'Great Britain', 'Austria', 'Canada'],\n    '1996': [12, 10, 9, 10, 10],\n    '2006': [20, 10, 10, 17, 11]\n})\n# Call the tool to solve the problem\nprint(calculate_cheese_consumption_difference(df, 'Germany'))","question":"An agricultural agency is researching how much cheese people have been eating in different parts of the world. How much more cheese did Germany consume per capita in 2006 than in 1996?","prediction_code":"import pandas as pd\n\ndef calculate_cheese_consumption_difference(df, country):\n    \"\"\"\n    This function takes in a pandas DataFrame of cheese consumption per capita and a country name, and returns the difference in cheese consumption per capita for the given country between 2006 and 1996.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing cheese consumption per capita data.\n    The DataFrame should have columns 'Country', '1996', and '2006'.\n    country (str): The name of the country to calculate the difference for.\n    Returns:\n    int: The difference in cheese consumption per capita for the given country between 2006 and 1996.\n    \"\"\"\n    # Filter the DataFrame for the given country\n    country_df = df[df['Country'] == country]\n    \n    # Calculate the difference in cheese consumption per capita between 2006 and 1996\n    consumption_1996 = country_df['1996'].values[0]\n    consumption_2006 = country_df['2006'].values[0]\n    difference = consumption_2006 - consumption_1996\n    \n    return difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Country': ['Germany', 'Australia', 'Great Britain', 'Austria', 'Canada'],\n    '1996': [12, 10, 9, 10, 10],\n    '2006': [20, 10, 10, 17, 11]\n})\n# Call the tool to solve the problem\nprint(calculate_cheese_consumption_difference(df, 'Germany'))","table":"Name: Cheese consumption per capita (kg)\nUnit: kg\nContent:\nCountry | 1996 | 2006\nGermany | 12 | 20\nAustralia | 10 | 10\nGreat Britain | 9 | 10\nAustria | 10 | 17\nCanada | 10 | 11"}
{"level":6,"answer":4.0,"prediction":"import pandas as pd\n\ndef count_people_with_15_points(df):\n    \"\"\"\n    This function takes in a pandas dataframe of quiz show scores and returns the number of people who scored exactly 15 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the scores of the people competing on the quiz show.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of people who scored exactly 15 points.\n    \"\"\"\n    # prepare a list to calculate scores of each person\n    scores = []\n    # calculate the total score of each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # count the number of people who scored exactly 15 points\n    num_people = scores.count(15)\n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5],\n    'Leaf': [[5, 5, 5, 5], [2, 3, 4, 4, 5, 9], [7], [7], [1, 3, 6, 6, 9]]\n})\n# Call the tool to solve the problem\nprint(count_people_with_15_points(df))","question":"For a math assignment, Christina researched the scores of the people competing on her favorite quiz show. How many people scored exactly 15 points?","prediction_code":"import pandas as pd\n\ndef count_people_with_15_points(df):\n    \"\"\"\n    This function takes in a pandas dataframe of quiz show scores and returns the number of people who scored exactly 15 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the scores of the people competing on the quiz show.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of people who scored exactly 15 points.\n    \"\"\"\n    # prepare a list to calculate scores of each person\n    scores = []\n    # calculate the total score of each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # count the number of people who scored exactly 15 points\n    num_people = scores.count(15)\n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5],\n    'Leaf': [[5, 5, 5, 5], [2, 3, 4, 4, 5, 9], [7], [7], [1, 3, 6, 6, 9]]\n})\n# Call the tool to solve the problem\nprint(count_people_with_15_points(df))","table":"Name: Quiz show scores\nUnit: people\nContent:\nStem | Leaf \n1 | 5, 5, 5, 5\n2 | 2, 3, 4, 4, 5, 9\n3 | 7\n4 | 7\n5 | 1, 3, 6, 6, 9"}
{"level":3,"answer":6445.0,"prediction":"import pandas as pd\n\ndef calculate_paper_bags_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of paper bags used and returns the difference in the number of paper bags used on Sunday and Monday.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of paper bags used on different days.\n    The dataframe should contain \"Day\" and \"Number of paper bags\" columns.\n    Returns:\n    int: The difference in the number of paper bags used on Sunday and Monday.\n    \"\"\"\n    # Filter the DataFrame for Sunday and Monday rows\n    sunday_bags = df[df['Day'] == 'Sunday']['Number of paper bags'].values[0]\n    monday_bags = df[df['Day'] == 'Monday']['Number of paper bags'].values[0]\n    \n    # Calculate the difference\n    bags_difference = sunday_bags - monday_bags\n    \n    return bags_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Number of paper bags': [6569, 3016, 8094, 1649, 4366]\n})\n# Call the tool to solve the problem\nprint(calculate_paper_bags_difference(df))","question":"A grocery store monitored how many paper bags were used in the past 5 days. How many more paper bags did the grocery store use on Sunday than on Monday?","prediction_code":"import pandas as pd\n\ndef calculate_paper_bags_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of paper bags used and returns the difference in the number of paper bags used on Sunday and Monday.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of paper bags used on different days.\n    The dataframe should contain \"Day\" and \"Number of paper bags\" columns.\n    Returns:\n    int: The difference in the number of paper bags used on Sunday and Monday.\n    \"\"\"\n    # Filter the DataFrame for Sunday and Monday rows\n    sunday_bags = df[df['Day'] == 'Sunday']['Number of paper bags'].values[0]\n    monday_bags = df[df['Day'] == 'Monday']['Number of paper bags'].values[0]\n    \n    # Calculate the difference\n    bags_difference = sunday_bags - monday_bags\n    \n    return bags_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Number of paper bags': [6569, 3016, 8094, 1649, 4366]\n})\n# Call the tool to solve the problem\nprint(calculate_paper_bags_difference(df))","table":"Name: Paper bags used\nUnit: paper bags\nContent:\nDay | Number of paper bags\nFriday | 6,569\nSaturday | 3,016\nSunday | 8,094\nMonday | 1,649\nTuesday | 4,366"}
{"level":8,"answer":4.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of new cable customers and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of new customers each day.\n    The dataframe should contain \"Day\" and \"Number of new customers\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of new customers\" column\n    min_value = df['Number of new customers'].min()\n    max_value = df['Number of new customers'].max()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Number of new customers': [9, 9, 10, 10, 8, 9, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"A cable company analyst paid attention to how many new customers it had each day. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of new cable customers and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of new customers each day.\n    The dataframe should contain \"Day\" and \"Number of new customers\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of new customers\" column\n    min_value = df['Number of new customers'].min()\n    max_value = df['Number of new customers'].max()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Number of new customers': [9, 9, 10, 10, 8, 9, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: New cable customers\nUnit: None\nContent:\nDay | Number of new customers\nWednesday | 9\nThursday | 9\nFriday | 10\nSaturday | 10\nSunday | 8\nMonday | 9\nTuesday | 6"}
{"level":8,"answer":66.6,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of buying a certain quantity of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item to calculate the cost for.\n    quantity (int): The quantity of the item to calculate the cost for.\n    Returns:\n    float: The total cost of buying the specified quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price of the item\n    price = item_df['Price'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price * quantity\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['pair of brown pants', 'pair of shorts', 'pair of tennis shoes', 'denim jacket', 'black jacket', 'pair of boots'],\n    'Price': [21.36, 16.65, 15.63, 22.82, 12.64, 35.51]\n})\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, 'pair of shorts', 4)\n\n# Print out the answer\nprint(total_cost)","question":"How much money does David need to buy 4 pairs of shorts?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of buying a certain quantity of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item to calculate the cost for.\n    quantity (int): The quantity of the item to calculate the cost for.\n    Returns:\n    float: The total cost of buying the specified quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price of the item\n    price = item_df['Price'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price * quantity\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['pair of brown pants', 'pair of shorts', 'pair of tennis shoes', 'denim jacket', 'black jacket', 'pair of boots'],\n    'Price': [21.36, 16.65, 15.63, 22.82, 12.64, 35.51]\n})\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, 'pair of shorts', 4)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\npair of brown pants | $21.36\npair of shorts | $16.65\npair of tennis shoes | $15.63\ndenim jacket | $22.82\nblack jacket | $12.64\npair of boots | $35.51"}
{"level":6,"answer":24.0,"prediction":"import pandas as pd\n\ndef count_students_with_at_least_10_points(df):\n    \"\"\"\n    This function takes in a pandas dataframe of test scores per student, and returns the number of students who scored at least 10 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the test scores per student.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of students who scored at least 10 points.\n    \"\"\"\n    # prepare a list to calculate the total score of each student\n    scores = []\n    # calculate the total score of each student\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # filter the students who scored at least 10 points\n    filtered = [score for score in scores if score >= 10]\n    # count the number of students\n    num_students = len(filtered)\n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5],\n    'Leaf': [[0, 5, 7, 8, 9], [1, 2, 7], [1, 4, 5, 8], [0, 1, 4, 4, 4, 6, 8], [2, 4, 7, 9, 9]]\n})\n# Call the tool to solve the problem\nprint(count_students_with_at_least_10_points(df))","question":"Principal Levin reported the state test scores from some students at her school. How many students scored at least 10 points?","prediction_code":"import pandas as pd\n\ndef count_students_with_at_least_10_points(df):\n    \"\"\"\n    This function takes in a pandas dataframe of test scores per student, and returns the number of students who scored at least 10 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the test scores per student.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of students who scored at least 10 points.\n    \"\"\"\n    # prepare a list to calculate the total score of each student\n    scores = []\n    # calculate the total score of each student\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # filter the students who scored at least 10 points\n    filtered = [score for score in scores if score >= 10]\n    # count the number of students\n    num_students = len(filtered)\n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5],\n    'Leaf': [[0, 5, 7, 8, 9], [1, 2, 7], [1, 4, 5, 8], [0, 1, 4, 4, 4, 6, 8], [2, 4, 7, 9, 9]]\n})\n# Call the tool to solve the problem\nprint(count_students_with_at_least_10_points(df))","table":"Name: Test scores\nUnit: students\nContent:\nStem | Leaf \n1 | 0, 5, 7, 8, 9\n2 | 1, 2, 7\n3 | 1, 4, 5, 8\n4 | 0, 1, 4, 4, 4, 6, 8\n5 | 2, 4, 7, 9, 9"}
{"level":3,"answer":2050.0,"prediction":"import pandas as pd\n\ndef calculate_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of cars at an intersection and returns the difference in the number of cars between Sunday and Monday.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of cars at the intersection for each day.\n    The dataframe should contain \"Day\" and \"Number of cars\" columns.\n    Returns:\n    int: The difference in the number of cars between Sunday and Monday.\n    \"\"\"\n    # Filter the DataFrame for Sunday and Monday\n    sunday_cars = df[df['Day'] == 'Sunday']['Number of cars'].values[0]\n    monday_cars = df[df['Day'] == 'Monday']['Number of cars'].values[0]\n    \n    # Calculate the difference\n    difference = sunday_cars - monday_cars\n    \n    return difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Sunday', 'Monday'],\n    'Number of cars': [7483, 4763, 2713]\n})\n# Call the tool to solve the problem\nprint(calculate_difference(df))","question":"A city monitored how many cars went through a certain intersection in the past 3 days. How many more cars went through the intersection on Sunday than on Monday?","prediction_code":"import pandas as pd\n\ndef calculate_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of cars at an intersection and returns the difference in the number of cars between Sunday and Monday.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of cars at the intersection for each day.\n    The dataframe should contain \"Day\" and \"Number of cars\" columns.\n    Returns:\n    int: The difference in the number of cars between Sunday and Monday.\n    \"\"\"\n    # Filter the DataFrame for Sunday and Monday\n    sunday_cars = df[df['Day'] == 'Sunday']['Number of cars'].values[0]\n    monday_cars = df[df['Day'] == 'Monday']['Number of cars'].values[0]\n    \n    # Calculate the difference\n    difference = sunday_cars - monday_cars\n    \n    return difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Sunday', 'Monday'],\n    'Number of cars': [7483, 4763, 2713]\n})\n# Call the tool to solve the problem\nprint(calculate_difference(df))","table":"Name: Cars at an intersection\nUnit: cars\nContent:\nDay | Number of cars\nSaturday | 7,483\nSunday | 4,763\nMonday | 2,713"}
{"level":2,"answer":12.0,"prediction":"import pandas as pd\n\ndef calculate_charms(df, num_bracelets):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of bracelets and number of charms, and returns the number of charms on a given number of bracelets.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of bracelets and number of charms.\n    The dataframe should contain \"Number of bracelets\" and \"Number of charms\" columns.\n    num_bracelets (int): The number of bracelets to calculate the number of charms for.\n    Returns:\n    int: The number of charms on the given number of bracelets.\n    \"\"\"\n    # Filter the DataFrame for the given number of bracelets\n    filtered_df = df[df['Number of bracelets'] == num_bracelets]\n    \n    # Get the number of charms for the given number of bracelets\n    num_charms = filtered_df['Number of charms'].values[0]\n    \n    return num_charms\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of bracelets': [1, 2, 3, 4, 5, 6],\n    'Number of charms': [2, 4, 6, 8, 10, '?']\n})\n\n# Call the tool to solve the problem\nnum_bracelets = 6\nprint(calculate_charms(df, num_bracelets))","question":"Each bracelet has 2 charms. How many charms are on 6 bracelets?","prediction_code":"import pandas as pd\n\ndef calculate_charms(df, num_bracelets):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of bracelets and number of charms, and returns the number of charms on a given number of bracelets.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of bracelets and number of charms.\n    The dataframe should contain \"Number of bracelets\" and \"Number of charms\" columns.\n    num_bracelets (int): The number of bracelets to calculate the number of charms for.\n    Returns:\n    int: The number of charms on the given number of bracelets.\n    \"\"\"\n    # Filter the DataFrame for the given number of bracelets\n    filtered_df = df[df['Number of bracelets'] == num_bracelets]\n    \n    # Get the number of charms for the given number of bracelets\n    num_charms = filtered_df['Number of charms'].values[0]\n    \n    return num_charms","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of bracelets': [1, 2, 3, 4, 5, 6],\n    'Number of charms': [2, 4, 6, 8, 10, '?']\n})\n\n# Call the tool to solve the problem\nnum_bracelets = 6\nprint(calculate_charms(df, num_bracelets))","table":"Name: None\nUnit: None\nContent:\nNumber of bracelets | Number of charms\n1 | 2\n2 | 4\n3 | 6\n4 | 8\n5 | 10\n6 | ?"}
{"level":3,"answer":1083.0,"prediction":"import pandas as pd\n\ndef calculate_total_bananas_sold(df, days):\n    \"\"\"\n    This function takes in a pandas DataFrame of bananas sold per day and a list of days, and returns the total number of bananas sold on those days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of bananas sold per day.\n    The dataframe should contain \"Day\" and \"Number of bananas\" columns.\n    days (list): A list of days for which the total number of bananas sold needs to be calculated.\n    Returns:\n    int: The total number of bananas sold on the specified days.\n    \"\"\"\n    # Filter the DataFrame for the specified days\n    filtered_df = df[df['Day'].isin(days)]\n    \n    # Calculate the total number of bananas sold on the specified days\n    total_bananas_sold = filtered_df['Number of bananas'].sum()\n    \n    return total_bananas_sold\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Thursday', 'Friday', 'Saturday', 'Sunday'],\n    'Number of bananas': [790, 293, 150, 102]\n})\n\n# Specify the days for which the total number of bananas sold needs to be calculated\ndays = ['Thursday', 'Friday']\n\n# Call the tool to solve the problem\nprint(calculate_total_bananas_sold(df, days))","question":"A grocery store tracked how many bananas it sold each day. How many bananas in total did the store sell on Thursday and Friday?","prediction_code":"import pandas as pd\n\ndef calculate_total_bananas_sold(df, days):\n    \"\"\"\n    This function takes in a pandas DataFrame of bananas sold per day and a list of days, and returns the total number of bananas sold on those days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of bananas sold per day.\n    The dataframe should contain \"Day\" and \"Number of bananas\" columns.\n    days (list): A list of days for which the total number of bananas sold needs to be calculated.\n    Returns:\n    int: The total number of bananas sold on the specified days.\n    \"\"\"\n    # Filter the DataFrame for the specified days\n    filtered_df = df[df['Day'].isin(days)]\n    \n    # Calculate the total number of bananas sold on the specified days\n    total_bananas_sold = filtered_df['Number of bananas'].sum()\n    \n    return total_bananas_sold","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Thursday', 'Friday', 'Saturday', 'Sunday'],\n    'Number of bananas': [790, 293, 150, 102]\n})\n\n# Specify the days for which the total number of bananas sold needs to be calculated\ndays = ['Thursday', 'Friday']\n\n# Call the tool to solve the problem\nprint(calculate_total_bananas_sold(df, days))","table":"Name: Bananas sold\nUnit: bananas\nContent:\nDay | Number of bananas\nThursday | 790\nFriday | 293\nSaturday | 150\nSunday | 102"}
{"level":3,"answer":8.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(table, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table and a list of items, and returns the total cost of the items.\n    Args:\n    table (pd.DataFrame): A pandas DataFrame containing the items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of item names.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = table[table['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['cat calendar', 'map of Africa', 'cookbook', 'mystery novel'],\n    'Price': [5, 7, 3, 3]\n})\n\n# Define the items Shelley wants to buy\nitems = ['cat calendar', 'mystery novel']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Shelley need to buy a cat calendar and a mystery novel?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(table, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table and a list of items, and returns the total cost of the items.\n    Args:\n    table (pd.DataFrame): A pandas DataFrame containing the items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of item names.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = table[table['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['cat calendar', 'map of Africa', 'cookbook', 'mystery novel'],\n    'Price': [5, 7, 3, 3]\n})\n\n# Define the items Shelley wants to buy\nitems = ['cat calendar', 'mystery novel']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\ncat calendar | $5\nmap of Africa | $7\ncookbook | $3\nmystery novel | $3"}
{"level":8,"answer":47.4,"prediction":"import pandas as pd\n\ndef calculate_total_cost(items_df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a dictionary of orders, and returns the total cost of the orders.\n    Args:\n    items_df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = items_df[items_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['plastic bowl', 'cookie sheet', 'rolling pin', 'funnel', 'coffee mug', 'glass bowl'],\n    'Price': [1.61, 9.86, 8.65, 1.01, 4.25, 7.96]\n})\n\n# Define the orders\norders = {\n    'cookie sheet': 4,\n    'glass bowl': 1\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","question":"How much money does Helen need to buy 4 cookie sheets and a glass bowl?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(items_df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a dictionary of orders, and returns the total cost of the orders.\n    Args:\n    items_df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = items_df[items_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['plastic bowl', 'cookie sheet', 'rolling pin', 'funnel', 'coffee mug', 'glass bowl'],\n    'Price': [1.61, 9.86, 8.65, 1.01, 4.25, 7.96]\n})\n\n# Define the orders\norders = {\n    'cookie sheet': 4,\n    'glass bowl': 1\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","table":"Name: None\nUnit: $\nContent:\nplastic bowl | $1.61\ncookie sheet | $9.86\nrolling pin | $8.65\nfunnel | $1.01\ncoffee mug | $4.25\nglass bowl | $7.96"}
{"level":7,"answer":7.0,"prediction":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of bird sightings and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of birds seen each day.\n    The DataFrame should have columns 'Day' and 'Number of birds'.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean using the 'Number of birds' column\n    mean = df['Number of birds'].mean()\n    \n    return mean\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of birds': [9, 6, 3, 8, 8, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","question":"David went on a bird watching trip and jotted down the number of birds he saw each day. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of bird sightings and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of birds seen each day.\n    The DataFrame should have columns 'Day' and 'Number of birds'.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean using the 'Number of birds' column\n    mean = df['Number of birds'].mean()\n    \n    return mean","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Number of birds': [9, 6, 3, 8, 8, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","table":"Name: Number of birds\nUnit: None\nContent:\nDay | Number of birds\nMonday | 9\nTuesday | 6\nWednesday | 3\nThursday | 8\nFriday | 8\nSaturday | 8"}
{"level":8,"answer":15.0,"prediction":"import pandas as pd\n\ndef count_customers_with_at_least_4_flowers(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of flowers picked by customers and returns the number of customers who picked at least 4 flowers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of flowers picked and their frequencies.\n    The DataFrame should contain \"Flowers picked\" and \"Frequency\" columns.\n    Returns:\n    int: The number of customers who picked at least 4 flowers.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of flowers picked is greater than or equal to 4\n    filtered_df = df[df['Flowers picked'] >= 4]\n    \n    # Calculate the total number of customers who picked at least 4 flowers\n    num_customers = filtered_df['Frequency'].sum()\n    \n    return num_customers\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Flowers picked': [1, 2, 3, 4, 5, 6],\n    'Frequency': [7, 20, 15, 8, 5, 2]\n})\n# Call the tool to solve the problem\nprint(count_customers_with_at_least_4_flowers(df))","question":"The owner of a pick-your-own-bouquet flower farm recorded the number of flowers that customers picked yesterday. How many customers picked at least 4 flowers?","prediction_code":"import pandas as pd\n\ndef count_customers_with_at_least_4_flowers(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of flowers picked by customers and returns the number of customers who picked at least 4 flowers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of flowers picked and their frequencies.\n    The DataFrame should contain \"Flowers picked\" and \"Frequency\" columns.\n    Returns:\n    int: The number of customers who picked at least 4 flowers.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of flowers picked is greater than or equal to 4\n    filtered_df = df[df['Flowers picked'] >= 4]\n    \n    # Calculate the total number of customers who picked at least 4 flowers\n    num_customers = filtered_df['Frequency'].sum()\n    \n    return num_customers","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Flowers picked': [1, 2, 3, 4, 5, 6],\n    'Frequency': [7, 20, 15, 8, 5, 2]\n})\n# Call the tool to solve the problem\nprint(count_customers_with_at_least_4_flowers(df))","table":"Name: Picking flowers\nUnit: None\nContent:\nFlowers picked | Frequency\n1 | 7\n2 | 20\n3 | 15\n4 | 8\n5 | 5\n6 | 2"}
{"level":8,"answer":4.0,"prediction":"import pandas as pd\n\ndef find_score_with_fewest_people(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of scores on a radio quiz show and returns the score that the fewest people received.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the scores and their frequencies.\n    The dataframe should contain \"Score\" and \"Frequency\" columns.\n    Returns:\n    int: The score that the fewest people received.\n    \"\"\"\n    # Find the index of the row with the minimum frequency\n    min_freq_index = df['Frequency'].idxmin()\n    \n    # Get the score corresponding to the minimum frequency\n    score_with_fewest_people = df.loc[min_freq_index, 'Score']\n    \n    return score_with_fewest_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Score': [0, 1, 2, 3, 4, 5],\n    'Frequency': [6, 16, 13, 9, 2, 10]\n})\n# Call the tool to solve the problem\nprint(find_score_with_fewest_people(df))","question":"Harry, a huge fan, tracked the scores on his favorite radio quiz show. Which score did the fewest people receive?","prediction_code":"import pandas as pd\n\ndef find_score_with_fewest_people(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of scores on a radio quiz show and returns the score that the fewest people received.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the scores and their frequencies.\n    The dataframe should contain \"Score\" and \"Frequency\" columns.\n    Returns:\n    int: The score that the fewest people received.\n    \"\"\"\n    # Find the index of the row with the minimum frequency\n    min_freq_index = df['Frequency'].idxmin()\n    \n    # Get the score corresponding to the minimum frequency\n    score_with_fewest_people = df.loc[min_freq_index, 'Score']\n    \n    return score_with_fewest_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Score': [0, 1, 2, 3, 4, 5],\n    'Frequency': [6, 16, 13, 9, 2, 10]\n})\n# Call the tool to solve the problem\nprint(find_score_with_fewest_people(df))","table":"Name: Scores on a radio quiz show\nUnit: None\nContent:\nScore | Frequency\n0 | 6\n1 | 16\n2 | 13\n3 | 9\n4 | 2\n5 | 10"}
{"level":8,"answer":18.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, month1, month2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average waiting time at the DMV and two months, and returns the rate of change between the two months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average waiting time at the DMV with columns 'Month' and 'Waiting time (minutes)'.\n    month1 (str): The first month for calculating the rate of change.\n    month2 (str): The second month for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two months.\n    \"\"\"\n    # Filter the DataFrame for the two months\n    month1_df = df[df['Month'] == month1]\n    month2_df = df[df['Month'] == month2]\n    \n    # Get the waiting time for each month\n    waiting_time1 = month1_df['Waiting time (minutes)'].values[0]\n    waiting_time2 = month2_df['Waiting time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (waiting_time2 - waiting_time1) \/ waiting_time1\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['April', 'May', 'June', 'July', 'August'],\n    'Waiting time (minutes)': [7, 47, 17, 35, 24]\n})\n\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'June', 'July'))","question":"An administrator at the Department of Motor Vehicles (DMV) tracked the average wait time from month to month. According to the table, what was the rate of change between June and July?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, month1, month2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average waiting time at the DMV and two months, and returns the rate of change between the two months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average waiting time at the DMV with columns 'Month' and 'Waiting time (minutes)'.\n    month1 (str): The first month for calculating the rate of change.\n    month2 (str): The second month for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two months.\n    \"\"\"\n    # Filter the DataFrame for the two months\n    month1_df = df[df['Month'] == month1]\n    month2_df = df[df['Month'] == month2]\n    \n    # Get the waiting time for each month\n    waiting_time1 = month1_df['Waiting time (minutes)'].values[0]\n    waiting_time2 = month2_df['Waiting time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (waiting_time2 - waiting_time1) \/ waiting_time1\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['April', 'May', 'June', 'July', 'August'],\n    'Waiting time (minutes)': [7, 47, 17, 35, 24]\n})\n\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'June', 'July'))","table":"Name: Average waiting time at the DMV\nUnit: minutes per month\nContent:\nMonth | Waiting time (minutes)\nApril | 7\nMay | 47\nJune | 17\nJuly | 35\nAugust | 24"}
{"level":8,"answer":0.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of amount spent on lunch per day and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the amount spent on lunch per day.\n    The dataframe should contain \"Day\" and \"Amount spent\" columns.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Get the amount spent on lunch for the two days\n    amount1 = df[df['Day'] == day1]['Amount spent'].values[0]\n    amount2 = df[df['Day'] == day2]['Amount spent'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (amount2 - amount1) \/ amount1\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Amount spent': [2, 10, 8, 6, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Friday', 'Saturday'))","question":"In trying to calculate how much money could be saved by packing lunch, Nick recorded the amount he spent on lunch each day. According to the table, what was the rate of change between Friday and Saturday?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of amount spent on lunch per day and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the amount spent on lunch per day.\n    The dataframe should contain \"Day\" and \"Amount spent\" columns.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Get the amount spent on lunch for the two days\n    amount1 = df[df['Day'] == day1]['Amount spent'].values[0]\n    amount2 = df[df['Day'] == day2]['Amount spent'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (amount2 - amount1) \/ amount1\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Amount spent': [2, 10, 8, 6, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Friday', 'Saturday'))","table":"Name: Amount Nick spent on lunch\nUnit: $, per day\nContent:\nDay | Amount spent\nTuesday | $2\nWednesday | $10\nThursday | $8\nFriday | $6\nSaturday | $6"}
{"level":8,"answer":9.0,"prediction":"import pandas as pd\n\ndef count_children_without_candy_necklaces(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of candy necklaces made by children and returns the number of children who did not make any candy necklaces.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of candy necklaces made by each child.\n    The dataframe should contain \"Candy necklaces made\" and \"Frequency\" columns.\n    Returns:\n    int: The number of children who did not make any candy necklaces.\n    \"\"\"\n    # Filter the DataFrame for children who did not make any candy necklaces\n    no_necklaces_df = df[df['Candy necklaces made'] == 0]\n    \n    # Count the number of rows in the filtered DataFrame\n    num_children = len(no_necklaces_df)\n    \n    return num_children\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Candy necklaces made': [0, 1, 2, 3],\n    'Frequency': [9, 5, 10, 14]\n})\n# Call the tool to solve the problem\nprint(count_children_without_candy_necklaces(df))","question":"While working as a summer camp counselor, Kiera monitored how many candy necklaces each child made. How many children did not make any candy necklaces?","prediction_code":"import pandas as pd\n\ndef count_children_without_candy_necklaces(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of candy necklaces made by children and returns the number of children who did not make any candy necklaces.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of candy necklaces made by each child.\n    The dataframe should contain \"Candy necklaces made\" and \"Frequency\" columns.\n    Returns:\n    int: The number of children who did not make any candy necklaces.\n    \"\"\"\n    # Filter the DataFrame for children who did not make any candy necklaces\n    no_necklaces_df = df[df['Candy necklaces made'] == 0]\n    \n    # Count the number of rows in the filtered DataFrame\n    num_children = len(no_necklaces_df)\n    \n    return num_children","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Candy necklaces made': [0, 1, 2, 3],\n    'Frequency': [9, 5, 10, 14]\n})\n# Call the tool to solve the problem\nprint(count_children_without_candy_necklaces(df))","table":"Name: Making candy necklaces\nUnit: None\nContent:\nCandy necklaces made | Frequency\n0 | 9\n1 | 5\n2 | 10\n3 | 14"}
{"level":6,"answer":10.4,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost for a given item and quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price table with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item in kilograms.\n    Returns:\n    float: The total cost for the given item and quantity.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price per kilogram\n        price_per_kg = item_df['Price'].values[0]\n        \n        # Calculate the total cost\n        total_cost = quantity * price_per_kg\n        \n        return total_cost\n    else:\n        return None\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['spelt rolls', 'hamburger buns', 'rye rolls', 'wheat rolls', 'English muffins', 'tortillas'],\n    'Price': [8, 7, 6, 8, 8, 5]\n})\n\n# Call the tool to solve the problem\nitem = 'English muffins'\nquantity = 1 + 3\/10\ntotal_cost = calculate_total_cost(df, item, quantity)\n\n# Print out the answer\nprint(total_cost)","question":"Colton wants to buy 1+3\/10 kilograms of English muffins. How much will he spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost for a given item and quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price table with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item in kilograms.\n    Returns:\n    float: The total cost for the given item and quantity.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price per kilogram\n        price_per_kg = item_df['Price'].values[0]\n        \n        # Calculate the total cost\n        total_cost = quantity * price_per_kg\n        \n        return total_cost\n    else:\n        return None","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['spelt rolls', 'hamburger buns', 'rye rolls', 'wheat rolls', 'English muffins', 'tortillas'],\n    'Price': [8, 7, 6, 8, 8, 5]\n})\n\n# Call the tool to solve the problem\nitem = 'English muffins'\nquantity = 1 + 3\/10\ntotal_cost = calculate_total_cost(df, item, quantity)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\nspelt rolls | $8\/kilogram\nhamburger buns | $7\/kilogram\nrye rolls | $6\/kilogram\nwheat rolls | $8\/kilogram\nEnglish muffins | $8\/kilogram\ntortillas | $5\/kilogram"}
{"level":6,"answer":8.0,"prediction":"import pandas as pd\n\ndef count_pages_with_fewer_words(df, threshold):\n    \"\"\"\n    This function takes in a pandas dataframe of words per page and a threshold, and returns the number of pages that have fewer than the threshold number of words.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of words per page.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    threshold (int): The threshold number of words.\n    Returns:\n    int: The number of pages that have fewer than the threshold number of words.\n    \"\"\"\n    # prepare a list to calculate the number of words in each page\n    words = []\n    # calculate the total number of words in each page\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            words.append(stem * 10 + leaf[j])\n    # filter the pages where the total number of words is less than the threshold\n    filtered = [word for word in words if word < threshold]\n    # count the number of pages\n    num_pages = len(filtered)\n    return num_pages\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [5, 6, 7, 8, 9],\n    'Leaf': [[9, 9], [4, 8], [2, 6, 6], [], [0]]\n})\n# Set the threshold\nthreshold = 92\n# Call the tool to solve the problem\nprint(count_pages_with_fewer_words(df, threshold))","question":"Darnell counted the number of words per page in his new book. How many pages have fewer than 92 words?","prediction_code":"import pandas as pd\n\ndef count_pages_with_fewer_words(df, threshold):\n    \"\"\"\n    This function takes in a pandas dataframe of words per page and a threshold, and returns the number of pages that have fewer than the threshold number of words.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of words per page.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    threshold (int): The threshold number of words.\n    Returns:\n    int: The number of pages that have fewer than the threshold number of words.\n    \"\"\"\n    # prepare a list to calculate the number of words in each page\n    words = []\n    # calculate the total number of words in each page\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            words.append(stem * 10 + leaf[j])\n    # filter the pages where the total number of words is less than the threshold\n    filtered = [word for word in words if word < threshold]\n    # count the number of pages\n    num_pages = len(filtered)\n    return num_pages","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [5, 6, 7, 8, 9],\n    'Leaf': [[9, 9], [4, 8], [2, 6, 6], [], [0]]\n})\n# Set the threshold\nthreshold = 92\n# Call the tool to solve the problem\nprint(count_pages_with_fewer_words(df, threshold))","table":"Name: Words per page\nUnit: pages\nContent:\nStem | Leaf \n5 | 9, 9\n6 | 4, 8\n7 | 2, 6, 6\n8 | \n9 | 0"}
{"level":4,"answer":1.0,"prediction":"import pandas as pd\n\ndef count_stores_with_81_pairs(df):\n    \"\"\"\n    This function takes in a pandas dataframe of pairs of shoes per store, and returns the number of stores that have exactly 81 pairs of shoes.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pairs of shoes per store.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of stores that have exactly 81 pairs of shoes.\n    \"\"\"\n    # prepare a list to calculate the total number of pairs of shoes in each store\n    pairs = []\n    # calculate the total number of pairs of shoes in each store\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            pairs.append(stem * 10 + leaf[j])\n    # count the number of stores that have exactly 81 pairs of shoes\n    num_stores = pairs.count(81)\n    return num_stores\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7, 8],\n    'Leaf': [[3], [1, 3], [8], [1, 1, 4, 5], [1, 4]]\n})\n# Call the tool to solve the problem\nprint(count_stores_with_81_pairs(df))","question":"Britney counted the number of pairs of shoes for sale at each of the shoe stores in the mall. How many stores have exactly 81 pairs of shoes?","prediction_code":"import pandas as pd\n\ndef count_stores_with_81_pairs(df):\n    \"\"\"\n    This function takes in a pandas dataframe of pairs of shoes per store, and returns the number of stores that have exactly 81 pairs of shoes.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of pairs of shoes per store.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of stores that have exactly 81 pairs of shoes.\n    \"\"\"\n    # prepare a list to calculate the total number of pairs of shoes in each store\n    pairs = []\n    # calculate the total number of pairs of shoes in each store\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            pairs.append(stem * 10 + leaf[j])\n    # count the number of stores that have exactly 81 pairs of shoes\n    num_stores = pairs.count(81)\n    return num_stores","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7, 8],\n    'Leaf': [[3], [1, 3], [8], [1, 1, 4, 5], [1, 4]]\n})\n# Call the tool to solve the problem\nprint(count_stores_with_81_pairs(df))","table":"Name: Pairs of shoes per store\nUnit: None\nContent:\nStem | Leaf \n4 | 3\n5 | 1, 3\n6 | 8\n7 | 1, 1, 4, 5\n8 | 1, 4"}
{"level":7,"answer":8.0,"prediction":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of web pages visited by people and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names of people and the number of web pages they visited.\n    The dataframe should contain \"Person\" and \"Number of Web pages\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of Web pages\" column\n    min_value = df['Number of Web pages'].min()\n    max_value = df['Number of Web pages'].max()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Person': ['Emir', 'Grace', 'Irma', 'Lamar', 'Duncan', 'Maddie', 'Bella', 'Charlie'],\n    'Number of Web pages': [2, 7, 8, 10, 5, 2, 10, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","question":"Several people compared how many Web pages they had visited. What is the range of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of web pages visited by people and returns the range of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names of people and the number of web pages they visited.\n    The dataframe should contain \"Person\" and \"Number of Web pages\" columns.\n    Returns:\n    int: The range of the numbers.\n    \"\"\"\n    # Get the minimum and maximum values of the \"Number of Web pages\" column\n    min_value = df['Number of Web pages'].min()\n    max_value = df['Number of Web pages'].max()\n    \n    # Calculate the range\n    range_value = max_value - min_value\n    \n    return range_value","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Person': ['Emir', 'Grace', 'Irma', 'Lamar', 'Duncan', 'Maddie', 'Bella', 'Charlie'],\n    'Number of Web pages': [2, 7, 8, 10, 5, 2, 10, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_range(df))","table":"Name: Web pages visited\nUnit: None\nContent:\nPerson | Number of Web pages\nEmir | 2\nGrace | 7\nIrma | 8\nLamar | 10\nDuncan | 5\nMaddie | 2\nBella | 10\nCharlie | 8"}
{"level":8,"answer":6.0,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, book1, book2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a book price table and two book names, and returns the price difference between the two books.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing book names and their prices with columns 'Name' and 'Price'.\n    book1 (str): The name of the first book.\n    book2 (str): The name of the second book.\n    Returns:\n    float: The price difference between the two books.\n    \"\"\"\n    # Filter the DataFrame for the two books\n    book1_df = df[df['Name'] == book1]\n    book2_df = df[df['Name'] == book2]\n    \n    # Get the prices of the two books\n    book1_price = book1_df['Price'].values[0]\n    book2_price = book2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = book2_price - book1_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['book about dinosaurs', 'book about ballet', 'book about Europe', 'book about trains', 'book about fish'],\n    'Price': [12.00, 10.00, 18.00, 23.00, 10.00]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'book about Europe', 'book about dinosaurs'))","question":"How much more does a book about Europe cost than a book about dinosaurs?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, book1, book2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a book price table and two book names, and returns the price difference between the two books.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing book names and their prices with columns 'Name' and 'Price'.\n    book1 (str): The name of the first book.\n    book2 (str): The name of the second book.\n    Returns:\n    float: The price difference between the two books.\n    \"\"\"\n    # Filter the DataFrame for the two books\n    book1_df = df[df['Name'] == book1]\n    book2_df = df[df['Name'] == book2]\n    \n    # Get the prices of the two books\n    book1_price = book1_df['Price'].values[0]\n    book2_price = book2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = book2_price - book1_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['book about dinosaurs', 'book about ballet', 'book about Europe', 'book about trains', 'book about fish'],\n    'Price': [12.00, 10.00, 18.00, 23.00, 10.00]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'book about Europe', 'book about dinosaurs'))","table":"Name: None\nUnit: $\nContent:\nbook about dinosaurs | $12.00\nbook about ballet | $10.00\nbook about Europe | $18.00\nbook about trains | $23.00\nbook about fish | $10.00"}
{"level":2,"answer":15.0,"prediction":"def calculate_total_walnuts(df, num_bowls):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of walnuts per bowl and the number of bowls, and returns the total number of walnuts.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of walnuts per bowl.\n    The dataframe should contain \"Number of bowls\" and \"Number of walnuts\" columns.\n    num_bowls (int): The number of bowls.\n    Returns:\n    int: The total number of walnuts.\n    \"\"\"\n    # Filter the DataFrame for the specific number of bowls\n    bowls_df = df[df['Number of bowls'] == num_bowls]\n    \n    # Get the number of walnuts for the specific number of bowls\n    num_walnuts = bowls_df['Number of walnuts'].values[0]\n    \n    # Calculate the total number of walnuts\n    total_walnuts = num_walnuts * num_bowls\n    \n    return total_walnuts\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of bowls': [1, 2, 3],\n    'Number of walnuts': [5, 10, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_walnuts(df, 3))","question":"Each bowl has 5 walnuts. How many walnuts are in 3 bowls?","prediction_code":"def calculate_total_walnuts(df, num_bowls):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of walnuts per bowl and the number of bowls, and returns the total number of walnuts.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of walnuts per bowl.\n    The dataframe should contain \"Number of bowls\" and \"Number of walnuts\" columns.\n    num_bowls (int): The number of bowls.\n    Returns:\n    int: The total number of walnuts.\n    \"\"\"\n    # Filter the DataFrame for the specific number of bowls\n    bowls_df = df[df['Number of bowls'] == num_bowls]\n    \n    # Get the number of walnuts for the specific number of bowls\n    num_walnuts = bowls_df['Number of walnuts'].values[0]\n    \n    # Calculate the total number of walnuts\n    total_walnuts = num_walnuts * num_bowls\n    \n    return total_walnuts","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of bowls': [1, 2, 3],\n    'Number of walnuts': [5, 10, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_walnuts(df, 3))","table":"Name: None\nUnit: None\nContent:\nNumber of bowls | Number of walnuts\n1 | 5\n2 | 10\n3 | ?"}
{"level":2,"answer":12.0,"prediction":"import pandas as pd\n\ndef calculate_flashlights_in_drawers(df, num_drawers):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of flashlights in each drawer and the number of drawers, and returns the total number of flashlights in the given number of drawers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of drawers and the corresponding number of flashlights.\n    The DataFrame should have columns 'Number of drawers' and 'Number of flashlights'.\n    num_drawers (int): The number of drawers to calculate the total number of flashlights for.\n    Returns:\n    int: The total number of flashlights in the given number of drawers.\n    \"\"\"\n    # Filter the DataFrame for the given number of drawers\n    drawers_df = df[df['Number of drawers'] == num_drawers]\n    \n    # Get the number of flashlights for the given number of drawers\n    num_flashlights = drawers_df['Number of flashlights'].values[0]\n    \n    return num_flashlights\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of drawers': [1, 2, 3, 4, 5, 6],\n    'Number of flashlights': [2, 4, 6, 8, 10, '?']\n})\n\n# Call the tool to solve the problem\nnum_flashlights = calculate_flashlights_in_drawers(df, 6)\n\n# Print out the answer\nprint(num_flashlights)","question":"Each drawer has 2 flashlights. How many flashlights are in 6 drawers?","prediction_code":"import pandas as pd\n\ndef calculate_flashlights_in_drawers(df, num_drawers):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of flashlights in each drawer and the number of drawers, and returns the total number of flashlights in the given number of drawers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of drawers and the corresponding number of flashlights.\n    The DataFrame should have columns 'Number of drawers' and 'Number of flashlights'.\n    num_drawers (int): The number of drawers to calculate the total number of flashlights for.\n    Returns:\n    int: The total number of flashlights in the given number of drawers.\n    \"\"\"\n    # Filter the DataFrame for the given number of drawers\n    drawers_df = df[df['Number of drawers'] == num_drawers]\n    \n    # Get the number of flashlights for the given number of drawers\n    num_flashlights = drawers_df['Number of flashlights'].values[0]\n    \n    return num_flashlights","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of drawers': [1, 2, 3, 4, 5, 6],\n    'Number of flashlights': [2, 4, 6, 8, 10, '?']\n})\n\n# Call the tool to solve the problem\nnum_flashlights = calculate_flashlights_in_drawers(df, 6)\n\n# Print out the answer\nprint(num_flashlights)","table":"Name: None\nUnit: None\nContent:\nNumber of drawers | Number of flashlights\n1 | 2\n2 | 4\n3 | 6\n4 | 8\n5 | 10\n6 | ?"}
{"level":5,"answer":9.0,"prediction":"import pandas as pd\n\ndef find_smallest_number(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of butterscotch candies per bag and returns the smallest number of butterscotch candies.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of butterscotch candies per bag.\n    The DataFrame should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of butterscotch candies.\n    \"\"\"\n    # Initialize the smallest number as infinity\n    smallest_number = float('inf')\n    \n    # Iterate through the DataFrame and update the smallest number if a smaller value is found\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        if stem < smallest_number:\n            smallest_number = stem\n        if leaf:\n            for j in range(len(leaf)):\n                if leaf[j] < smallest_number:\n                    smallest_number = leaf[j]\n    \n    return smallest_number\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [9, [], [1, 2, 4], [], 7, [0, 0, 0], 9, [0, 1, 5], [0, 8], [0]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number(df))","question":"At a candy factory, butterscotch candies were packaged into bags of different sizes. What is the smallest number of butterscotch candies?","prediction_code":"import pandas as pd\n\ndef find_smallest_number(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of butterscotch candies per bag and returns the smallest number of butterscotch candies.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of butterscotch candies per bag.\n    The DataFrame should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of butterscotch candies.\n    \"\"\"\n    # Initialize the smallest number as infinity\n    smallest_number = float('inf')\n    \n    # Iterate through the DataFrame and update the smallest number if a smaller value is found\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        if stem < smallest_number:\n            smallest_number = stem\n        if leaf:\n            for j in range(len(leaf)):\n                if leaf[j] < smallest_number:\n                    smallest_number = leaf[j]\n    \n    return smallest_number","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [9, [], [1, 2, 4], [], 7, [0, 0, 0], 9, [0, 1, 5], [0, 8], [0]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number(df))","table":"Name: Butterscotch candies per bag\nUnit: butterscotch candies\nContent:\nStem | Leaf \n0 | 9\n1 | \n2 | 1, 2, 4\n3 | \n4 | 7\n5 | 0, 0, 0\n6 | 9\n7 | 0, 1, 5\n8 | 0, 8\n9 | 0"}
{"level":8,"answer":23.0,"prediction":"import pandas as pd\n\ndef count_shipments_with_10_boxes(df):\n    \"\"\"\n    This function takes in a pandas dataframe of boxes per shipment, and returns the number of shipments that have at least 10 boxes.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of boxes per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of shipments that have at least 10 boxes.\n    \"\"\"\n    # prepare a list to calculate the number of boxes in each shipment\n    boxes = []\n    # calculate the total number of boxes in each shipment\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            boxes.append(stem * 10 + leaf[j])\n    # filter the shipments where the total number of boxes is greater than or equal to 10\n    filtered = [box for box in boxes if box >= 10]\n    # count the number of shipments\n    num_shipments = len(filtered)\n    return num_shipments\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7],\n    'Leaf': [[0, 0, 2, 6, 8], [4, 6], [], [2, 2, 4, 8, 9], [1, 3, 6], [2, 2, 3, 8, 9, 9], [3, 7]]\n})\n# Call the tool to solve the problem\nprint(count_shipments_with_10_boxes(df))","question":"A shipping company keeps track of the number of boxes in each shipment they send out. How many shipments had at least 10 boxes?","prediction_code":"import pandas as pd\n\ndef count_shipments_with_10_boxes(df):\n    \"\"\"\n    This function takes in a pandas dataframe of boxes per shipment, and returns the number of shipments that have at least 10 boxes.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of boxes per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of shipments that have at least 10 boxes.\n    \"\"\"\n    # prepare a list to calculate the number of boxes in each shipment\n    boxes = []\n    # calculate the total number of boxes in each shipment\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            boxes.append(stem * 10 + leaf[j])\n    # filter the shipments where the total number of boxes is greater than or equal to 10\n    filtered = [box for box in boxes if box >= 10]\n    # count the number of shipments\n    num_shipments = len(filtered)\n    return num_shipments","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7],\n    'Leaf': [[0, 0, 2, 6, 8], [4, 6], [], [2, 2, 4, 8, 9], [1, 3, 6], [2, 2, 3, 8, 9, 9], [3, 7]]\n})\n# Call the tool to solve the problem\nprint(count_shipments_with_10_boxes(df))","table":"Name: Boxes per shipment\nUnit: shipments\nContent:\nStem | Leaf \n1 | 0, 0, 2, 6, 8\n2 | 4, 6\n3 | \n4 | 2, 2, 4, 8, 9\n5 | 1, 3, 6\n6 | 2, 2, 3, 8, 9, 9\n7 | 3, 7"}
{"level":6,"answer":4.0,"prediction":"import pandas as pd\n\ndef count_shipments_with_cracked_panes(df):\n    \"\"\"\n    This function takes in a pandas dataframe of cracked window panes per shipment, and returns the number of shipments that have at least 75 cracked window panes but less than 85 cracked window panes.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of cracked window panes per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of shipments that have at least 75 cracked window panes but less than 85 cracked window panes.\n    \"\"\"\n    # prepare a list to calculate the number of cracked window panes in each shipment\n    panes = []\n    # calculate the total number of cracked window panes in each shipment\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            panes.append(stem * 10 + leaf[j])\n    # filter the shipments where the total number of cracked window panes is greater than or equal to 75 and less than 85\n    filtered = [pane for pane in panes if 75 <= pane < 85]\n    # count the number of shipments\n    num_shipments = len(filtered)\n    return num_shipments\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7, 8],\n    'Leaf': [[2, 4, 6], [9], [], [4, 7, 7], [1, 4, 5, 5]]\n})\n# Call the tool to solve the problem\nprint(count_shipments_with_cracked_panes(df))","question":"The employees at Zachary's Construction monitored the number of cracked window panes in each shipment they received. How many shipments had at least 75 cracked window panes but less than 85 cracked window panes?","prediction_code":"import pandas as pd\n\ndef count_shipments_with_cracked_panes(df):\n    \"\"\"\n    This function takes in a pandas dataframe of cracked window panes per shipment, and returns the number of shipments that have at least 75 cracked window panes but less than 85 cracked window panes.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of cracked window panes per shipment.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of shipments that have at least 75 cracked window panes but less than 85 cracked window panes.\n    \"\"\"\n    # prepare a list to calculate the number of cracked window panes in each shipment\n    panes = []\n    # calculate the total number of cracked window panes in each shipment\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            panes.append(stem * 10 + leaf[j])\n    # filter the shipments where the total number of cracked window panes is greater than or equal to 75 and less than 85\n    filtered = [pane for pane in panes if 75 <= pane < 85]\n    # count the number of shipments\n    num_shipments = len(filtered)\n    return num_shipments","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7, 8],\n    'Leaf': [[2, 4, 6], [9], [], [4, 7, 7], [1, 4, 5, 5]]\n})\n# Call the tool to solve the problem\nprint(count_shipments_with_cracked_panes(df))","table":"Name: Cracked window panes per shipment\nUnit: shipments\nContent:\nStem | Leaf \n4 | 2, 4, 6\n5 | 9\n6 | \n7 | 4, 7, 7\n8 | 1, 4, 5, 5"}
{"level":6,"answer":13.6,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of a specific item based on the quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = quantity * item_price\n        return total_cost\n    else:\n        return None\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['sunflower seed butter', 'walnut butter', 'almond butter', 'cashew butter'],\n    'Price': [4, 7, 4, 4]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'cashew butter', 3.4))","question":"Alexa wants to buy 3.4 pounds of cashew butter. How much will she spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of a specific item based on the quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = quantity * item_price\n        return total_cost\n    else:\n        return None","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['sunflower seed butter', 'walnut butter', 'almond butter', 'cashew butter'],\n    'Price': [4, 7, 4, 4]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'cashew butter', 3.4))","table":"Name: None\nUnit: $\nContent:\nsunflower seed butter | $4\/pound\nwalnut butter | $7\/pound\nalmond butter | $4\/pound\ncashew butter | $4\/pound"}
{"level":7,"answer":-4.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of boxes of Girl Scout cookies sold per day and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of boxes of cookies sold per day.\n    The dataframe should contain \"Day\" and \"Boxes of cookies\" columns.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Get the number of boxes of cookies sold on day1 and day2\n    boxes_day1 = df[df['Day'] == day1]['Boxes of cookies'].values[0]\n    boxes_day2 = df[df['Day'] == day2]['Boxes of cookies'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (boxes_day2 - boxes_day1) \/ boxes_day1\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Boxes of cookies': [38, 41, 38, 34, 36]\n})\n\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Wednesday', 'Thursday'))","question":"A Girl Scout troop recorded how many boxes of cookies they sold each day for a week. According to the table, what was the rate of change between Wednesday and Thursday?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of boxes of Girl Scout cookies sold per day and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of boxes of cookies sold per day.\n    The dataframe should contain \"Day\" and \"Boxes of cookies\" columns.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Get the number of boxes of cookies sold on day1 and day2\n    boxes_day1 = df[df['Day'] == day1]['Boxes of cookies'].values[0]\n    boxes_day2 = df[df['Day'] == day2]['Boxes of cookies'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (boxes_day2 - boxes_day1) \/ boxes_day1\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Boxes of cookies': [38, 41, 38, 34, 36]\n})\n\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Wednesday', 'Thursday'))","table":"Name: Boxes of Girl Scout cookies sold\nUnit: boxes per day\nContent:\nDay | Boxes of cookies\nMonday | 38\nTuesday | 41\nWednesday | 38\nThursday | 34\nFriday | 36"}
{"level":7,"answer":1.0,"prediction":"import pandas as pd\n\ndef find_score_with_fewest_people(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of scores on a radio quiz show and returns the score that the fewest people received.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the scores and their frequencies.\n    The dataframe should contain \"Score\" and \"Frequency\" columns.\n    Returns:\n    int: The score that the fewest people received.\n    \"\"\"\n    # Find the index of the row with the minimum frequency\n    min_freq_index = df['Frequency'].idxmin()\n    \n    # Get the score corresponding to the minimum frequency\n    score_with_fewest_people = df.loc[min_freq_index, 'Score']\n    \n    return score_with_fewest_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Score': [0, 1, 2, 3, 4, 5],\n    'Frequency': [4, 1, 5, 3, 7, 2]\n})\n# Call the tool to solve the problem\nprint(find_score_with_fewest_people(df))","question":"Brittany, a huge fan, tracked the scores on her favorite radio quiz show. Which score did the fewest people receive?","prediction_code":"import pandas as pd\n\ndef find_score_with_fewest_people(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of scores on a radio quiz show and returns the score that the fewest people received.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the scores and their frequencies.\n    The dataframe should contain \"Score\" and \"Frequency\" columns.\n    Returns:\n    int: The score that the fewest people received.\n    \"\"\"\n    # Find the index of the row with the minimum frequency\n    min_freq_index = df['Frequency'].idxmin()\n    \n    # Get the score corresponding to the minimum frequency\n    score_with_fewest_people = df.loc[min_freq_index, 'Score']\n    \n    return score_with_fewest_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Score': [0, 1, 2, 3, 4, 5],\n    'Frequency': [4, 1, 5, 3, 7, 2]\n})\n# Call the tool to solve the problem\nprint(find_score_with_fewest_people(df))","table":"Name: Scores on a radio quiz show\nUnit: None\nContent:\nScore | Frequency\n0 | 4\n1 | 1\n2 | 5\n3 | 3\n4 | 7\n5 | 2"}
{"level":2,"answer":12.0,"prediction":"import pandas as pd\n\ndef calculate_screwdrivers(toolbox_df, num_toolboxes):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of screwdrivers in each tool box and the number of tool boxes, and returns the total number of screwdrivers.\n    Args:\n    toolbox_df (pd.DataFrame): A pandas DataFrame containing the number of tool boxes and the number of screwdrivers in each tool box.\n    The DataFrame should have columns 'Number of tool boxes' and 'Number of screwdrivers'.\n    num_toolboxes (int): The number of tool boxes to calculate the total number of screwdrivers.\n    Returns:\n    int: The total number of screwdrivers in the given number of tool boxes.\n    \"\"\"\n    # Filter the DataFrame for the given number of tool boxes\n    toolbox_subset = toolbox_df[toolbox_df['Number of tool boxes'] <= num_toolboxes]\n    \n    # Calculate the total number of screwdrivers\n    total_screwdrivers = toolbox_subset['Number of screwdrivers'].sum()\n    \n    return total_screwdrivers\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of tool boxes': [1, 2, 3, 4, 5, 6],\n    'Number of screwdrivers': [2, 4, 6, 8, 10, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_screwdrivers(df, 6))","question":"Each tool box has 2 screwdrivers. How many screwdrivers are in 6 tool boxes?","prediction_code":"import pandas as pd\n\ndef calculate_screwdrivers(toolbox_df, num_toolboxes):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of screwdrivers in each tool box and the number of tool boxes, and returns the total number of screwdrivers.\n    Args:\n    toolbox_df (pd.DataFrame): A pandas DataFrame containing the number of tool boxes and the number of screwdrivers in each tool box.\n    The DataFrame should have columns 'Number of tool boxes' and 'Number of screwdrivers'.\n    num_toolboxes (int): The number of tool boxes to calculate the total number of screwdrivers.\n    Returns:\n    int: The total number of screwdrivers in the given number of tool boxes.\n    \"\"\"\n    # Filter the DataFrame for the given number of tool boxes\n    toolbox_subset = toolbox_df[toolbox_df['Number of tool boxes'] <= num_toolboxes]\n    \n    # Calculate the total number of screwdrivers\n    total_screwdrivers = toolbox_subset['Number of screwdrivers'].sum()\n    \n    return total_screwdrivers","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of tool boxes': [1, 2, 3, 4, 5, 6],\n    'Number of screwdrivers': [2, 4, 6, 8, 10, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_screwdrivers(df, 6))","table":"Name: None\nUnit: None\nContent:\nNumber of tool boxes | Number of screwdrivers\n1 | 2\n2 | 4\n3 | 6\n4 | 8\n5 | 10\n6 | ?"}
{"level":7,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_mean_distance(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of blocks each student lives from school, and returns the mean of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of blocks each student lives from school.\n    The dataframe should contain \"Name\" and \"Number of blocks\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Number of blocks\" column\n    mean_distance = df['Number of blocks'].mean()\n    \n    return mean_distance\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Jen', 'Nina', 'Tyrone', 'Belle', 'Kari', 'Emmet', 'Andy'],\n    'Number of blocks': [5, 5, 2, 5, 3, 7, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_distance(df))","question":"Some students compared how many blocks they live from school. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean_distance(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of blocks each student lives from school, and returns the mean of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of blocks each student lives from school.\n    The dataframe should contain \"Name\" and \"Number of blocks\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Number of blocks\" column\n    mean_distance = df['Number of blocks'].mean()\n    \n    return mean_distance","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Jen', 'Nina', 'Tyrone', 'Belle', 'Kari', 'Emmet', 'Andy'],\n    'Number of blocks': [5, 5, 2, 5, 3, 7, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_distance(df))","table":"Name: Blocks from school\nUnit: None\nContent:\nName | Number of blocks\nJen | 5\nNina | 5\nTyrone | 2\nBelle | 5\nKari | 3\nEmmet | 7\nAndy | 8"}
{"level":7,"answer":7.0,"prediction":"import pandas as pd\n\ndef calculate_mean_distance(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of blocks each student lives from school, and returns the mean of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of blocks each student lives from school.\n    The dataframe should contain \"Name\" and \"Number of blocks\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Number of blocks\" column\n    mean_distance = df['Number of blocks'].mean()\n    \n    return mean_distance\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Paula', 'Candice', 'Frank', 'Gavin', 'Kenny', 'Lucas'],\n    'Number of blocks': [8, 10, 10, 2, 4, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_distance(df))","question":"Some students compared how many blocks they live from school. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean_distance(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of blocks each student lives from school, and returns the mean of the numbers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of blocks each student lives from school.\n    The dataframe should contain \"Name\" and \"Number of blocks\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Number of blocks\" column\n    mean_distance = df['Number of blocks'].mean()\n    \n    return mean_distance","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Paula', 'Candice', 'Frank', 'Gavin', 'Kenny', 'Lucas'],\n    'Number of blocks': [8, 10, 10, 2, 4, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_mean_distance(df))","table":"Name: Blocks from school\nUnit: None\nContent:\nName | Number of blocks\nPaula | 8\nCandice | 10\nFrank | 10\nGavin | 2\nKenny | 4\nLucas | 8"}
{"level":5,"answer":0.11,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['brown cat\\'s eye bead', 'white bead with black spots', 'small pink bead', 'long red bead', 'blue glass bead'],\n    'Price': [0.05, 0.08, 0.06, 0.07, 0.06]\n})\n\n# Call the tool to solve the problem\nitems = ['blue glass bead', 'brown cat\\'s eye bead']\nprint(calculate_total_cost(df, items))","question":"How much money does Leslie need to buy a blue glass bead and a brown cat's eye bead?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['brown cat\\'s eye bead', 'white bead with black spots', 'small pink bead', 'long red bead', 'blue glass bead'],\n    'Price': [0.05, 0.08, 0.06, 0.07, 0.06]\n})\n\n# Call the tool to solve the problem\nitems = ['blue glass bead', 'brown cat\\'s eye bead']\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nbrown cat's eye bead | $0.05\nwhite bead with black spots | $0.08\nsmall pink bead | $0.06\nlong red bead | $0.07\nblue glass bead | $0.06"}
{"level":6,"answer":6.0,"prediction":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of club membership and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and number of clubs for each student.\n    The dataframe should contain \"Name\" and \"Number of clubs\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Number of clubs\" column\n    mean = df['Number of clubs'].mean()\n    \n    return mean\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Maria', 'Vince', 'Brody', 'Omar', 'Edmond', 'Wesley', 'Kayla'],\n    'Number of clubs': [9, 3, 9, 10, 1, 2, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","question":"Some students compared how many clubs they belong to. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of club membership and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names and number of clubs for each student.\n    The dataframe should contain \"Name\" and \"Number of clubs\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean of the \"Number of clubs\" column\n    mean = df['Number of clubs'].mean()\n    \n    return mean","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Maria', 'Vince', 'Brody', 'Omar', 'Edmond', 'Wesley', 'Kayla'],\n    'Number of clubs': [9, 3, 9, 10, 1, 2, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","table":"Name: Clubs\nUnit: None\nContent:\nName | Number of clubs\nMaria | 9\nVince | 3\nBrody | 9\nOmar | 10\nEdmond | 1\nWesley | 2\nKayla | 8"}
{"level":7,"answer":4.21,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, book1, book2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a book price table and two book names, and returns the price difference between the two books.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing book names and their prices with columns 'Name' and 'Price'.\n    book1 (str): The name of the first book.\n    book2 (str): The name of the second book.\n    Returns:\n    float: The price difference between the two books.\n    \"\"\"\n    # Filter the DataFrame for the two books\n    book1_df = df[df['Name'] == book1]\n    book2_df = df[df['Name'] == book2]\n    \n    # Get the prices of the two books\n    book1_price = book1_df['Price'].values[0]\n    book2_price = book2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = book2_price - book1_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['book about ballet', 'book about basketball', 'book about dogs', 'book about Europe', 'book about Asia'],\n    'Price': [11.69, 12.07, 18.10, 15.90, 14.69]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'book about ballet', 'book about Europe'))","question":"How much more does a book about Europe cost than a book about ballet?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, book1, book2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a book price table and two book names, and returns the price difference between the two books.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing book names and their prices with columns 'Name' and 'Price'.\n    book1 (str): The name of the first book.\n    book2 (str): The name of the second book.\n    Returns:\n    float: The price difference between the two books.\n    \"\"\"\n    # Filter the DataFrame for the two books\n    book1_df = df[df['Name'] == book1]\n    book2_df = df[df['Name'] == book2]\n    \n    # Get the prices of the two books\n    book1_price = book1_df['Price'].values[0]\n    book2_price = book2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = book2_price - book1_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['book about ballet', 'book about basketball', 'book about dogs', 'book about Europe', 'book about Asia'],\n    'Price': [11.69, 12.07, 18.10, 15.90, 14.69]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'book about ballet', 'book about Europe'))","table":"Name: None\nUnit: $\nContent:\nbook about ballet | $11.69\nbook about basketball | $12.07\nbook about dogs | $18.10\nbook about Europe | $15.90\nbook about Asia | $14.69"}
{"level":3,"answer":588.0,"prediction":"import pandas as pd\n\ndef calculate_difference(df, month1, month2):\n    \"\"\"\n    This function takes in a pandas DataFrame of magazine sales figures and two months, and returns the difference in the number of copies sold between the two months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the sales figures with columns 'Month' and 'Number of magazines'.\n    month1 (str): The first month to compare.\n    month2 (str): The second month to compare.\n    Returns:\n    int: The difference in the number of copies sold between the two months.\n    \"\"\"\n    # Filter the DataFrame for the two months\n    month1_df = df[df['Month'] == month1]\n    month2_df = df[df['Month'] == month2]\n    \n    # Get the number of copies sold for each month\n    month1_copies = month1_df['Number of magazines'].values[0]\n    month2_copies = month2_df['Number of magazines'].values[0]\n    \n    # Calculate the difference\n    difference = month2_copies - month1_copies\n    \n    return difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['October', 'November', 'December', 'January'],\n    'Number of magazines': [677, 849, 111, 261]\n})\n\n# Call the tool to solve the problem\nprint(calculate_difference(df, 'January', 'November'))","question":"A magazine editor looked at his sales figures for the past 4 months. How many more copies were sold in November than in January?","prediction_code":"import pandas as pd\n\ndef calculate_difference(df, month1, month2):\n    \"\"\"\n    This function takes in a pandas DataFrame of magazine sales figures and two months, and returns the difference in the number of copies sold between the two months.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the sales figures with columns 'Month' and 'Number of magazines'.\n    month1 (str): The first month to compare.\n    month2 (str): The second month to compare.\n    Returns:\n    int: The difference in the number of copies sold between the two months.\n    \"\"\"\n    # Filter the DataFrame for the two months\n    month1_df = df[df['Month'] == month1]\n    month2_df = df[df['Month'] == month2]\n    \n    # Get the number of copies sold for each month\n    month1_copies = month1_df['Number of magazines'].values[0]\n    month2_copies = month2_df['Number of magazines'].values[0]\n    \n    # Calculate the difference\n    difference = month2_copies - month1_copies\n    \n    return difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['October', 'November', 'December', 'January'],\n    'Number of magazines': [677, 849, 111, 261]\n})\n\n# Call the tool to solve the problem\nprint(calculate_difference(df, 'January', 'November'))","table":"Name: Magazines sold\nUnit: copies\nContent:\nMonth | Number of magazines\nOctober | 677\nNovember | 849\nDecember | 111\nJanuary | 261"}
{"level":5,"answer":3.0,"prediction":"import pandas as pd\n\ndef count_necklaces_with_30_beads(df):\n    \"\"\"\n    This function takes in a pandas dataframe of beads per necklace, and returns the number of necklaces that have exactly 30 beads.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of beads per necklace.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of necklaces that have exactly 30 beads.\n    \"\"\"\n    # prepare a list to calculate beads in each necklace\n    beads = []\n    # calculate the total number of beads in each necklace\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            beads.append(stem * 10 + leaf[j])\n    # filter the necklaces where the total number of beads is equal to 30\n    filtered = [bead for bead in beads if bead == 30]\n    # count the number of rows\n    num_necklaces = len(filtered)\n    return num_necklaces\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6],\n    'Leaf': [[4, 8], [0, 0, 0, 2, 3, 6, 6, 7, 8, 9], [0, 1, 1, 4, 4, 9], [5, 9], [2, 3, 3]]\n})\n# Call the tool to solve the problem\nprint(count_necklaces_with_30_beads(df))","question":"Michelle counted all the beads in each necklace at the jewelry store where she works. How many necklaces had exactly 30 beads?","prediction_code":"import pandas as pd\n\ndef count_necklaces_with_30_beads(df):\n    \"\"\"\n    This function takes in a pandas dataframe of beads per necklace, and returns the number of necklaces that have exactly 30 beads.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of beads per necklace.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of necklaces that have exactly 30 beads.\n    \"\"\"\n    # prepare a list to calculate beads in each necklace\n    beads = []\n    # calculate the total number of beads in each necklace\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            beads.append(stem * 10 + leaf[j])\n    # filter the necklaces where the total number of beads is equal to 30\n    filtered = [bead for bead in beads if bead == 30]\n    # count the number of rows\n    num_necklaces = len(filtered)\n    return num_necklaces","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6],\n    'Leaf': [[4, 8], [0, 0, 0, 2, 3, 6, 6, 7, 8, 9], [0, 1, 1, 4, 4, 9], [5, 9], [2, 3, 3]]\n})\n# Call the tool to solve the problem\nprint(count_necklaces_with_30_beads(df))","table":"Name: Beads per necklace\nUnit: necklaces\nContent:\nStem | Leaf \n2 | 4, 8\n3 | 0, 0, 0, 2, 3, 6, 6, 7, 8, 9\n4 | 0, 1, 1, 4, 4, 9\n5 | 5, 9\n6 | 2, 3, 3"}
{"level":7,"answer":49.0,"prediction":"import pandas as pd\n\ndef count_people(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of seashells found and their frequencies, and returns the total number of people.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of seashells found and their frequencies.\n    The dataframe should contain \"Seashells found\" and \"Frequency\" columns.\n    Returns:\n    int: The total number of people.\n    \"\"\"\n    # Calculate the total number of people by summing the frequencies\n    total_people = df['Frequency'].sum()\n    \n    return total_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Seashells found': [0, 1, 2, 3, 4],\n    'Frequency': [5, 16, 7, 15, 6]\n})\n# Call the tool to solve the problem\nprint(count_people(df))","question":"Mandy counted the total number of shells collected by her friends during a walk on the beach. How many people are there in all?","prediction_code":"import pandas as pd\n\ndef count_people(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of seashells found and their frequencies, and returns the total number of people.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of seashells found and their frequencies.\n    The dataframe should contain \"Seashells found\" and \"Frequency\" columns.\n    Returns:\n    int: The total number of people.\n    \"\"\"\n    # Calculate the total number of people by summing the frequencies\n    total_people = df['Frequency'].sum()\n    \n    return total_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Seashells found': [0, 1, 2, 3, 4],\n    'Frequency': [5, 16, 7, 15, 6]\n})\n# Call the tool to solve the problem\nprint(count_people(df))","table":"Name: Finding seashells\nUnit: None\nContent:\nSeashells found | Frequency\n0 | 5\n1 | 16\n2 | 7\n3 | 15\n4 | 6"}
{"level":4,"answer":13.0,"prediction":"import pandas as pd\n\ndef find_smallest_number(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of butterscotch candies per bag and returns the smallest number of butterscotch candies.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of butterscotch candies per bag.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of butterscotch candies.\n    \"\"\"\n    # Initialize the smallest number as infinity\n    smallest_number = float('inf')\n    \n    # Iterate through the rows of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Check if the current row has a smaller number of candies\n        if stem < smallest_number:\n            smallest_number = stem\n        \n        # Check if any of the leaf values is smaller than the current smallest number\n        for j in range(len(leaf)):\n            if leaf[j] < smallest_number:\n                smallest_number = leaf[j]\n    \n    return smallest_number\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6],\n    'Leaf': [[3, 5, 7], [], [9], [8], [4], [3]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number(df))","question":"At a candy factory, butterscotch candies were packaged into bags of different sizes. What is the smallest number of butterscotch candies?","prediction_code":"import pandas as pd\n\ndef find_smallest_number(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of butterscotch candies per bag and returns the smallest number of butterscotch candies.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of butterscotch candies per bag.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of butterscotch candies.\n    \"\"\"\n    # Initialize the smallest number as infinity\n    smallest_number = float('inf')\n    \n    # Iterate through the rows of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Check if the current row has a smaller number of candies\n        if stem < smallest_number:\n            smallest_number = stem\n        \n        # Check if any of the leaf values is smaller than the current smallest number\n        for j in range(len(leaf)):\n            if leaf[j] < smallest_number:\n                smallest_number = leaf[j]\n    \n    return smallest_number","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6],\n    'Leaf': [[3, 5, 7], [], [9], [8], [4], [3]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number(df))","table":"Name: Butterscotch candies per bag\nUnit: butterscotch candies\nContent:\nStem | Leaf \n1 | 3, 5, 7\n2 | \n3 | 9\n4 | 8\n5 | 4\n6 | 3"}
{"level":1,"answer":30.0,"prediction":"import pandas as pd\n\ndef calculate_total_passengers(df, num_vans):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of passengers per van and the number of vans, and returns the total number of passengers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of passengers per van.\n    The dataframe should contain \"Number of vans\" and \"Number of passengers\" columns.\n    num_vans (int): The number of vans.\n    Returns:\n    int: The total number of passengers.\n    \"\"\"\n    # Filter the DataFrame for the specific number of vans\n    vans_df = df[df['Number of vans'] == num_vans]\n    \n    # Get the number of passengers for the specific number of vans\n    num_passengers = vans_df['Number of passengers'].values[0]\n    \n    # Calculate the total number of passengers\n    total_passengers = num_passengers * num_vans\n    \n    return total_passengers\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of vans': [1, 2, 3, 4, 5, 6],\n    'Number of passengers': [5, 10, 15, 20, 25, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_passengers(df, 6))","question":"Each van has 5 passengers. How many passengers are in 6 vans?","prediction_code":"import pandas as pd\n\ndef calculate_total_passengers(df, num_vans):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of passengers per van and the number of vans, and returns the total number of passengers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of passengers per van.\n    The dataframe should contain \"Number of vans\" and \"Number of passengers\" columns.\n    num_vans (int): The number of vans.\n    Returns:\n    int: The total number of passengers.\n    \"\"\"\n    # Filter the DataFrame for the specific number of vans\n    vans_df = df[df['Number of vans'] == num_vans]\n    \n    # Get the number of passengers for the specific number of vans\n    num_passengers = vans_df['Number of passengers'].values[0]\n    \n    # Calculate the total number of passengers\n    total_passengers = num_passengers * num_vans\n    \n    return total_passengers","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of vans': [1, 2, 3, 4, 5, 6],\n    'Number of passengers': [5, 10, 15, 20, 25, '?']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_passengers(df, 6))","table":"Name: None\nUnit: passengers\nContent:\nNumber of vans | Number of passengers\n1 | 5\n2 | 10\n3 | 15\n4 | 20\n5 | 25\n6 | ?"}
{"level":3,"answer":3322.0,"prediction":"import pandas as pd\n\ndef calculate_score_difference(df, player1, player2):\n    \"\"\"\n    This function takes in a pandas DataFrame of trivia game scores and two player names, and returns the difference in scores between the two players.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the trivia game scores with columns 'Name' and 'Score'.\n    player1 (str): The name of the first player.\n    player2 (str): The name of the second player.\n    Returns:\n    int: The difference in scores between the two players.\n    \"\"\"\n    # Filter the DataFrame for the two players\n    player1_scores = df[df['Name'] == player1]['Score'].values\n    player2_scores = df[df['Name'] == player2]['Score'].values\n    \n    # Calculate the score difference\n    score_difference = player2_scores - player1_scores\n    \n    return score_difference[0]\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Charlie', 'Spencer', 'Vivian', 'Liam', 'Hansen'],\n    'Score': [[2500], [7377], [5822], [4048], [1238]]\n})\n# Call the tool to solve the problem\nprint(calculate_score_difference(df, 'Charlie', 'Vivian'))","question":"Some friends played a trivia game and recorded their scores. How many more points did Vivian score than Charlie?","prediction_code":"import pandas as pd\n\ndef calculate_score_difference(df, player1, player2):\n    \"\"\"\n    This function takes in a pandas DataFrame of trivia game scores and two player names, and returns the difference in scores between the two players.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the trivia game scores with columns 'Name' and 'Score'.\n    player1 (str): The name of the first player.\n    player2 (str): The name of the second player.\n    Returns:\n    int: The difference in scores between the two players.\n    \"\"\"\n    # Filter the DataFrame for the two players\n    player1_scores = df[df['Name'] == player1]['Score'].values\n    player2_scores = df[df['Name'] == player2]['Score'].values\n    \n    # Calculate the score difference\n    score_difference = player2_scores - player1_scores\n    \n    return score_difference[0]","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Charlie', 'Spencer', 'Vivian', 'Liam', 'Hansen'],\n    'Score': [[2500], [7377], [5822], [4048], [1238]]\n})\n# Call the tool to solve the problem\nprint(calculate_score_difference(df, 'Charlie', 'Vivian'))","table":"Name: Trivia game scores\nUnit: points\nContent:\nName | Score\nCharlie | 2,500\nSpencer | 7,377\nVivian | 5,822\nLiam | 4,048\nHansen | 1,238"}
{"level":6,"answer":77.0,"prediction":"import pandas as pd\n\ndef find_heaviest_child(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of children's weights and returns the weight of the heaviest child.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the children's weights.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The weight of the heaviest child.\n    \"\"\"\n    # prepare a list to store all the weights\n    weights = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the weight for each child and add it to the list\n        for j in range(len(leaf)):\n            weight = stem * 10 + leaf[j]\n            weights.append(weight)\n    # find the maximum weight from the list\n    max_weight = max(weights)\n    return max_weight\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7],\n    'Leaf': [[6, 9], [1, 2, 3, 5, 6, 9], [0, 1, 1, 2, 3, 7], [2, 2, 6, 9], [2, 2, 5, 5, 7]]\n})\n# Call the tool to solve the problem\nprint(find_heaviest_child(df))","question":"Dr. Dixon, a pediatrician, weighed all the children who recently visited her office. What is the weight of the heaviest child?","prediction_code":"import pandas as pd\n\ndef find_heaviest_child(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of children's weights and returns the weight of the heaviest child.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the children's weights.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The weight of the heaviest child.\n    \"\"\"\n    # prepare a list to store all the weights\n    weights = []\n    # iterate through each row of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        # calculate the weight for each child and add it to the list\n        for j in range(len(leaf)):\n            weight = stem * 10 + leaf[j]\n            weights.append(weight)\n    # find the maximum weight from the list\n    max_weight = max(weights)\n    return max_weight","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7],\n    'Leaf': [[6, 9], [1, 2, 3, 5, 6, 9], [0, 1, 1, 2, 3, 7], [2, 2, 6, 9], [2, 2, 5, 5, 7]]\n})\n# Call the tool to solve the problem\nprint(find_heaviest_child(df))","table":"Name: Children's weights (lbs)\nUnit: pounds\nContent:\nStem | Leaf \n3 | 6, 9\n4 | 1, 2, 3, 5, 6, 9\n5 | 0, 1, 1, 2, 3, 7\n6 | 2, 2, 6, 9\n7 | 2, 2, 5, 5, 7"}
{"level":5,"answer":3.0,"prediction":"import pandas as pd\n\ndef calculate_sales_difference(df, product1, product2, day):\n    \"\"\"\n    This function takes in a pandas DataFrame of beverage sales, two product names, and a day, and returns the difference in sales between the two products on the specified day.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing beverage sales data with columns 'Beverage', 'Friday', and 'Saturday'.\n    product1 (str): The name of the first product.\n    product2 (str): The name of the second product.\n    day (str): The day for which the sales difference is calculated ('Friday' or 'Saturday').\n    Returns:\n    float: The difference in sales between the two products on the specified day.\n    \"\"\"\n    # Filter the DataFrame for the specified day\n    day_sales = df[df[day].notnull()]\n    \n    # Filter the DataFrame for the two specified products\n    product1_sales = day_sales[day_sales['Beverage'] == product1]\n    product2_sales = day_sales[day_sales['Beverage'] == product2]\n    \n    # Calculate the sales for each product\n    product1_sales = product1_sales[day].values[0]\n    product2_sales = product2_sales[day].values[0]\n    \n    # Calculate the sales difference\n    sales_difference = product1_sales - product2_sales\n    \n    return sales_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Beverage': ['Pearl\\'s Soda', 'Fizzy Fun', 'Brenner\\'s Juices', 'Nature\\'s Nectar', 'Krazy Kola'],\n    'Friday': [11, 9, 6, 6, 8],\n    'Saturday': [15, 13, 14, 16, 10]\n})\n\n# Call the tool to solve the problem\nprint(calculate_sales_difference(df, 'Nature\\'s Nectar', 'Fizzy Fun', 'Saturday'))","question":"Bert, an employee at McKenzie's Convenience Store, looked at the sales of each of its soda products. On Saturday, how much more did the convenience store make from Nature's Nectar sales than from Fizzy Fun sales?","prediction_code":"import pandas as pd\n\ndef calculate_sales_difference(df, product1, product2, day):\n    \"\"\"\n    This function takes in a pandas DataFrame of beverage sales, two product names, and a day, and returns the difference in sales between the two products on the specified day.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing beverage sales data with columns 'Beverage', 'Friday', and 'Saturday'.\n    product1 (str): The name of the first product.\n    product2 (str): The name of the second product.\n    day (str): The day for which the sales difference is calculated ('Friday' or 'Saturday').\n    Returns:\n    float: The difference in sales between the two products on the specified day.\n    \"\"\"\n    # Filter the DataFrame for the specified day\n    day_sales = df[df[day].notnull()]\n    \n    # Filter the DataFrame for the two specified products\n    product1_sales = day_sales[day_sales['Beverage'] == product1]\n    product2_sales = day_sales[day_sales['Beverage'] == product2]\n    \n    # Calculate the sales for each product\n    product1_sales = product1_sales[day].values[0]\n    product2_sales = product2_sales[day].values[0]\n    \n    # Calculate the sales difference\n    sales_difference = product1_sales - product2_sales\n    \n    return sales_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Beverage': ['Pearl\\'s Soda', 'Fizzy Fun', 'Brenner\\'s Juices', 'Nature\\'s Nectar', 'Krazy Kola'],\n    'Friday': [11, 9, 6, 6, 8],\n    'Saturday': [15, 13, 14, 16, 10]\n})\n\n# Call the tool to solve the problem\nprint(calculate_sales_difference(df, 'Nature\\'s Nectar', 'Fizzy Fun', 'Saturday'))","table":"Name: Convenience store beverage sales\nUnit: $\nContent:\nBeverage | Friday | Saturday\nPearl's Soda | $11 | $15\nFizzy Fun | $9 | $13\nBrenner's Juices | $6 | $14\nNature's Nectar | $6 | $16\nKrazy Kola | $8 | $10"}
{"level":8,"answer":-4.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average food preparation time and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average food preparation time for each day.\n    The DataFrame should have columns 'Day' and 'Food preparation time (minutes)'.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Filter the DataFrame for the two days\n    day1_df = df[df['Day'] == day1]\n    day2_df = df[df['Day'] == day2]\n    \n    # Get the food preparation time for each day\n    day1_time = day1_df['Food preparation time (minutes)'].values[0]\n    day2_time = day2_df['Food preparation time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (day2_time - day1_time) \/ (df.index.get_loc(day2_df.index[0]) - df.index.get_loc(day1_df.index[0]))\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Food preparation time (minutes)': [36, 37, 37, 33, 32]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Thursday', 'Friday'))","question":"A restaurant's average food preparation time was tracked from day to day as part of an efficiency improvement program. According to the table, what was the rate of change between Thursday and Friday?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame of average food preparation time and two days, and returns the rate of change between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the average food preparation time for each day.\n    The DataFrame should have columns 'Day' and 'Food preparation time (minutes)'.\n    day1 (str): The first day for calculating the rate of change.\n    day2 (str): The second day for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two days.\n    \"\"\"\n    # Filter the DataFrame for the two days\n    day1_df = df[df['Day'] == day1]\n    day2_df = df[df['Day'] == day2]\n    \n    # Get the food preparation time for each day\n    day1_time = day1_df['Food preparation time (minutes)'].values[0]\n    day2_time = day2_df['Food preparation time (minutes)'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (day2_time - day1_time) \/ (df.index.get_loc(day2_df.index[0]) - df.index.get_loc(day1_df.index[0]))\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Food preparation time (minutes)': [36, 37, 37, 33, 32]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 'Thursday', 'Friday'))","table":"Name: Average food preparation time\nUnit: minutes per day\nContent:\nDay | Food preparation time (minutes)\nTuesday | 36\nWednesday | 37\nThursday | 37\nFriday | 33\nSaturday | 32"}
{"level":8,"answer":110.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of items, and returns the total cost of the items using pandas.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (dict): A dictionary where the keys are item names and the values are the number of items to buy.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item, quantity in items.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['fishing pole', 'football', 'baseball bat', 'tennis racquet'],\n    'Price': [21.00, 14.00, 25.00, 16.00]\n})\n\n# Initialize the items dictionary\nitems = {\n    'tennis racquet': 6,\n    'football': 1\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Aisha need to buy 6 tennis racquets and a football?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a dictionary of items, and returns the total cost of the items using pandas.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (dict): A dictionary where the keys are item names and the values are the number of items to buy.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item, quantity in items.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['fishing pole', 'football', 'baseball bat', 'tennis racquet'],\n    'Price': [21.00, 14.00, 25.00, 16.00]\n})\n\n# Initialize the items dictionary\nitems = {\n    'tennis racquet': 6,\n    'football': 1\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nfishing pole | $21.00\nfootball | $14.00\nbaseball bat | $25.00\ntennis racquet | $16.00"}
{"level":8,"answer":12.0,"prediction":"import pandas as pd\n\ndef count_people_over_60(df):\n    \"\"\"\n    This function takes in a pandas dataframe of ages and returns the number of people who are at least 60 years old.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the ages of people.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of people who are at least 60 years old.\n    \"\"\"\n    # prepare a list to calculate ages of each person\n    ages = []\n    # calculate the age of each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            ages.append(stem * 10 + leaf[j])\n    # filter the ages where the age is greater than or equal to 60\n    filtered = [age for age in ages if age >= 60]\n    # count the number of ages\n    num_people = len(filtered)\n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7, 8],\n    'Leaf': [[0, 5, 6, 9], [0, 0, 5, 6, 9], [3, 7, 8, 9], [2, 4, 8], [0, 0, 3, 4, 4]]\n})\n# Call the tool to solve the problem\nprint(count_people_over_60(df))","question":"At their family reunion, the Levin family recorded everyone's age. How many people are at least 60 years old?","prediction_code":"import pandas as pd\n\ndef count_people_over_60(df):\n    \"\"\"\n    This function takes in a pandas dataframe of ages and returns the number of people who are at least 60 years old.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the ages of people.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of people who are at least 60 years old.\n    \"\"\"\n    # prepare a list to calculate ages of each person\n    ages = []\n    # calculate the age of each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            ages.append(stem * 10 + leaf[j])\n    # filter the ages where the age is greater than or equal to 60\n    filtered = [age for age in ages if age >= 60]\n    # count the number of ages\n    num_people = len(filtered)\n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7, 8],\n    'Leaf': [[0, 5, 6, 9], [0, 0, 5, 6, 9], [3, 7, 8, 9], [2, 4, 8], [0, 0, 3, 4, 4]]\n})\n# Call the tool to solve the problem\nprint(count_people_over_60(df))","table":"Name: Ages\nUnit: people\nContent:\nStem | Leaf \n4 | 0, 5, 6, 9\n5 | 0, 0, 5, 6, 9\n6 | 3, 7, 8, 9\n7 | 2, 4, 8\n8 | 0, 0, 3, 4, 4"}
{"level":7,"answer":5.0,"prediction":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of couches sold each day and returns the mode of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of couches sold each day.\n    The dataframe should contain \"Day\" and \"Number of couches\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of couches']\n    \n    # Calculate the mode using the value_counts() function\n    mode = numbers.value_counts().idxmax()\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday'],\n    'Number of couches': [5, 5, 6, 6, 10, 10, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"A furniture store kept a record of how many couches it sold each day. What is the mode of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of couches sold each day and returns the mode of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of couches sold each day.\n    The dataframe should contain \"Day\" and \"Number of couches\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of couches']\n    \n    # Calculate the mode using the value_counts() function\n    mode = numbers.value_counts().idxmax()\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday'],\n    'Number of couches': [5, 5, 6, 6, 10, 10, 5]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Couches sold\nUnit: None\nContent:\nDay | Number of couches\nThursday | 5\nFriday | 5\nSaturday | 6\nSunday | 6\nMonday | 10\nTuesday | 10\nWednesday | 5"}
{"level":8,"answer":3.0,"prediction":"import pandas as pd\n\ndef count_necklaces_with_76_beads(df):\n    \"\"\"\n    This function takes in a pandas dataframe of beads per necklace, and returns the number of necklaces that have exactly 76 beads.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of beads per necklace.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of necklaces that have exactly 76 beads.\n    \"\"\"\n    # Initialize the count of necklaces with 76 beads\n    count = 0\n    \n    # Iterate through the rows of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Calculate the total number of beads in the necklace\n        total_beads = stem * 10 + sum(leaf)\n        \n        # Check if the total number of beads is exactly 76\n        if total_beads == 76:\n            count += 1\n    \n    return count\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[2, 4], [], [8, 9], [3, 5, 8], [], [4, 6, 6, 6, 8], [], [0]]\n})\n# Call the tool to solve the problem\nprint(count_necklaces_with_76_beads(df))","question":"Erica counted all the beads in each necklace at the jewelry store where she works. How many necklaces had exactly 76 beads?","prediction_code":"import pandas as pd\n\ndef count_necklaces_with_76_beads(df):\n    \"\"\"\n    This function takes in a pandas dataframe of beads per necklace, and returns the number of necklaces that have exactly 76 beads.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of beads per necklace.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of necklaces that have exactly 76 beads.\n    \"\"\"\n    # Initialize the count of necklaces with 76 beads\n    count = 0\n    \n    # Iterate through the rows of the dataframe\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Calculate the total number of beads in the necklace\n        total_beads = stem * 10 + sum(leaf)\n        \n        # Check if the total number of beads is exactly 76\n        if total_beads == 76:\n            count += 1\n    \n    return count","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[2, 4], [], [8, 9], [3, 5, 8], [], [4, 6, 6, 6, 8], [], [0]]\n})\n# Call the tool to solve the problem\nprint(count_necklaces_with_76_beads(df))","table":"Name: Beads per necklace\nUnit: necklaces\nContent:\nStem | Leaf \n2 | 2, 4\n3 | \n4 | 8, 9\n5 | 3, 5, 8\n6 | \n7 | 4, 6, 6, 6, 8\n8 | \n9 | 0"}
{"level":4,"answer":8.0,"prediction":"import pandas as pd\n\ndef calculate_medal_difference(df, country):\n    \"\"\"\n    This function takes in a pandas DataFrame of Olympic medals won by countries and a specific country name, and returns the difference in medals won by that country between two years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of Olympic medals won by countries over time.\n    The DataFrame should have columns 'Country', '1984', and '1988'.\n    country (str): The name of the country to calculate the medal difference for.\n    Returns:\n    int: The difference in medals won by the country between 1984 and 1988.\n    \"\"\"\n    # Filter the DataFrame for the specific country\n    country_df = df[df['Country'] == country]\n    \n    # Get the number of medals won by the country in 1984 and 1988\n    medals_1984 = country_df['1984'].values[0]\n    medals_1988 = country_df['1988'].values[0]\n    \n    # Calculate the difference in medals\n    medal_difference = medals_1984 - medals_1988\n    \n    return medal_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Country': ['Finland', 'Sweden', 'Brazil'],\n    '1984': [12, 19, 8],\n    '1988': [4, 11, 6]\n})\n\n# Call the tool to solve the problem\nprint(calculate_medal_difference(df, 'Sweden'))","question":"A sports network displayed the number of Olympic medals won by certain countries over time. How many more medals did Sweden win in 1984 than in 1988?","prediction_code":"import pandas as pd\n\ndef calculate_medal_difference(df, country):\n    \"\"\"\n    This function takes in a pandas DataFrame of Olympic medals won by countries and a specific country name, and returns the difference in medals won by that country between two years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of Olympic medals won by countries over time.\n    The DataFrame should have columns 'Country', '1984', and '1988'.\n    country (str): The name of the country to calculate the medal difference for.\n    Returns:\n    int: The difference in medals won by the country between 1984 and 1988.\n    \"\"\"\n    # Filter the DataFrame for the specific country\n    country_df = df[df['Country'] == country]\n    \n    # Get the number of medals won by the country in 1984 and 1988\n    medals_1984 = country_df['1984'].values[0]\n    medals_1988 = country_df['1988'].values[0]\n    \n    # Calculate the difference in medals\n    medal_difference = medals_1984 - medals_1988\n    \n    return medal_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Country': ['Finland', 'Sweden', 'Brazil'],\n    '1984': [12, 19, 8],\n    '1988': [4, 11, 6]\n})\n\n# Call the tool to solve the problem\nprint(calculate_medal_difference(df, 'Sweden'))","table":"Name: Olympic medals\nUnit: medals\nContent:\nCountry | 1984 | 1988\nFinland | 12 | 4\nSweden | 19 | 11\nBrazil | 8 | 6"}
{"level":6,"answer":8.8,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost for a given item and quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost for the given item and quantity.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return None\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['cream cheese', 'plain yogurt', 'butter', 'Greek yogurt'],\n    'Price': [4, 4, 5, 5]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'plain yogurt', 2.2))","question":"What is the total cost for 2.2 pounds of plain yogurt?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost for a given item and quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost for the given item and quantity.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * quantity\n        return total_cost\n    else:\n        return None","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['cream cheese', 'plain yogurt', 'butter', 'Greek yogurt'],\n    'Price': [4, 4, 5, 5]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'plain yogurt', 2.2))","table":"Name: None\nUnit: $\nContent:\ncream cheese | $4\/lb\nplain yogurt | $4\/lb\nbutter | $5\/lb\nGreek yogurt | $5\/lb"}
{"level":8,"answer":6.0,"prediction":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of bird sightings and returns the mode of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of birds seen each day.\n    The DataFrame should have columns 'Day' and 'Number of birds'.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of birds']\n    \n    # Calculate the mode using the value_counts() function\n    mode = numbers.value_counts().idxmax()\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Number of birds': [2, 6, 6, 2, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"Tyler went on a bird watching trip and jotted down the number of birds he saw each day. What is the mode of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of bird sightings and returns the mode of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of birds seen each day.\n    The DataFrame should have columns 'Day' and 'Number of birds'.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of birds']\n    \n    # Calculate the mode using the value_counts() function\n    mode = numbers.value_counts().idxmax()\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Number of birds': [2, 6, 6, 2, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Number of birds\nUnit: None\nContent:\nDay | Number of birds\nFriday | 2\nSaturday | 6\nSunday | 6\nMonday | 2\nTuesday | 6"}
{"level":3,"answer":56.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(items_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    items_df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = items_df[items_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['ladder', 'lawn mower', 'lawn sprinkler', 'shovel'],\n    'Price': [36.00, 44.00, 17.00, 20.00]\n})\n\n# Define the items to calculate the total cost\nitems = ['ladder', 'shovel']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Devin need to buy a ladder and a shovel?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(items_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    items_df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = items_df[items_df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['ladder', 'lawn mower', 'lawn sprinkler', 'shovel'],\n    'Price': [36.00, 44.00, 17.00, 20.00]\n})\n\n# Define the items to calculate the total cost\nitems = ['ladder', 'shovel']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nladder | $36.00\nlawn mower | $44.00\nlawn sprinkler | $17.00\nshovel | $20.00"}
{"level":8,"answer":4.0,"prediction":"import pandas as pd\n\ndef count_students_with_52_points(df):\n    \"\"\"\n    This function takes in a pandas dataframe of science test scores and returns the number of students who scored exactly 52 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the test scores.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of students who scored exactly 52 points.\n    \"\"\"\n    # prepare a list to store the scores of each student\n    scores = []\n    # calculate the total score of each student\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # count the number of students who scored exactly 52 points\n    num_students = scores.count(52)\n    return num_students\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7],\n    'Leaf': [[8, 9], [4], [], [2, 2, 2, 2, 8], [], [1]]\n})\n# Call the tool to solve the problem\nprint(count_students_with_52_points(df))","question":"Mrs. Wyatt, the science teacher, informed her students of their scores on Monday's test. How many students scored exactly 52 points?","prediction_code":"import pandas as pd\n\ndef count_students_with_52_points(df):\n    \"\"\"\n    This function takes in a pandas dataframe of science test scores and returns the number of students who scored exactly 52 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the test scores.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of students who scored exactly 52 points.\n    \"\"\"\n    # prepare a list to store the scores of each student\n    scores = []\n    # calculate the total score of each student\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # count the number of students who scored exactly 52 points\n    num_students = scores.count(52)\n    return num_students","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7],\n    'Leaf': [[8, 9], [4], [], [2, 2, 2, 2, 8], [], [1]]\n})\n# Call the tool to solve the problem\nprint(count_students_with_52_points(df))","table":"Name: Science test scores\nUnit: students\nContent:\nStem | Leaf \n2 | 8, 9\n3 | 4\n4 | \n5 | 2, 2, 2, 2, 8\n6 | \n7 | 1"}
{"level":8,"answer":-14.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of art contest entries per year and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of art contest entries per year.\n    The DataFrame should have columns 'Year' and 'Number of entries'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_entries = df[df['Year'] == start_year]['Number of entries'].values[0]\n    end_entries = df[df['Year'] == end_year]['Number of entries'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_entries - start_entries) \/ start_entries\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2012, 2013, 2014, 2015, 2016],\n    'Number of entries': [27, 25, 22, 37, 23]\n})\n\n# Call the tool to solve the problem\nrate_of_change = calculate_rate_of_change(df, 2015, 2016)\n\n# Print out the answer\nprint(rate_of_change)","question":"Mrs. Serrano hosts an annual art contest for kids, and she keeps a record of the number of entries each year. According to the table, what was the rate of change between 2015 and 2016?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of art contest entries per year and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of art contest entries per year.\n    The DataFrame should have columns 'Year' and 'Number of entries'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_entries = df[df['Year'] == start_year]['Number of entries'].values[0]\n    end_entries = df[df['Year'] == end_year]['Number of entries'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_entries - start_entries) \/ start_entries\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2012, 2013, 2014, 2015, 2016],\n    'Number of entries': [27, 25, 22, 37, 23]\n})\n\n# Call the tool to solve the problem\nrate_of_change = calculate_rate_of_change(df, 2015, 2016)\n\n# Print out the answer\nprint(rate_of_change)","table":"Name: Art contest entries\nUnit: entries per year\nContent:\nYear | Number of entries\n2012 | 27\n2013 | 25\n2014 | 22\n2015 | 37\n2016 | 23"}
{"level":4,"answer":223.0,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, hotel1, hotel2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the prices of different hotels and returns the price difference between two specific hotels.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the prices of different hotels with columns 'Hotel' and 'Price'.\n    hotel1 (str): The name of the first hotel.\n    hotel2 (str): The name of the second hotel.\n    Returns:\n    float: The price difference between the two hotels.\n    \"\"\"\n    # Filter the DataFrame for the specific hotels\n    hotel1_df = df[df['Hotel'] == hotel1]\n    hotel2_df = df[df['Hotel'] == hotel2]\n    \n    # Get the prices for the two hotels\n    hotel1_price = hotel1_df['Price'].values[0]\n    hotel2_price = hotel2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = hotel2_price - hotel1_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Hotel': [\"night's stay at Summit Hotel and Spa\", \"night's stay at Daybreak Motel\", \"night's stay at Grand Mountain Inn\", \"night's stay at Quiet Harbor Motel\"],\n    'Price': [234.00, 117.00, 457.00, 327.00]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, \"night's stay at Summit Hotel and Spa\", \"night's stay at Grand Mountain Inn\"))","question":"How much more does a night's stay at Grand Mountain Inn cost than a night's stay at Summit Hotel and Spa?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, hotel1, hotel2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the prices of different hotels and returns the price difference between two specific hotels.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the prices of different hotels with columns 'Hotel' and 'Price'.\n    hotel1 (str): The name of the first hotel.\n    hotel2 (str): The name of the second hotel.\n    Returns:\n    float: The price difference between the two hotels.\n    \"\"\"\n    # Filter the DataFrame for the specific hotels\n    hotel1_df = df[df['Hotel'] == hotel1]\n    hotel2_df = df[df['Hotel'] == hotel2]\n    \n    # Get the prices for the two hotels\n    hotel1_price = hotel1_df['Price'].values[0]\n    hotel2_price = hotel2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = hotel2_price - hotel1_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Hotel': [\"night's stay at Summit Hotel and Spa\", \"night's stay at Daybreak Motel\", \"night's stay at Grand Mountain Inn\", \"night's stay at Quiet Harbor Motel\"],\n    'Price': [234.00, 117.00, 457.00, 327.00]\n})\n\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, \"night's stay at Summit Hotel and Spa\", \"night's stay at Grand Mountain Inn\"))","table":"Name: None\nUnit: $\nContent:\nnight's stay at Summit Hotel and Spa | $234.00\nnight's stay at Daybreak Motel | $117.00\nnight's stay at Grand Mountain Inn | $457.00\nnight's stay at Quiet Harbor Motel | $327.00"}
{"level":5,"answer":50.8,"prediction":"import pandas as pd\n\ndef calculate_final_balance(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing Franco's financial record for September and returns the final balance at the end of September.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the financial record with columns 'Date', 'Description', 'Received', 'Expenses', and 'Available Funds'.\n    Returns:\n    float: The final balance at the end of September.\n    \"\"\"\n    # Get the last row of the DataFrame which contains the final balance\n    final_balance = df['Available Funds'].values[-1]\n    \n    # Remove the dollar sign and convert the final balance to float\n    final_balance = float(final_balance.replace('$', ''))\n    \n    return final_balance\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Date': [' ', '9\/2', '9\/3', '9\/5'],\n    'Description': ['Balance: end of August', 'sandpaper', 'paintbrush', 'painting fence'],\n    'Received': ['', '', '', 30.00],\n    'Expenses': ['', 2.45, 5.95, ''],\n    'Available Funds': [29.20, 26.75, 20.80, 50.80]\n})\n# Call the tool to solve the problem\nprint(calculate_final_balance(df))","question":"This is Franco's complete financial record for September. At the end of September, how much money did Franco have?","prediction_code":"import pandas as pd\n\ndef calculate_final_balance(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing Franco's financial record for September and returns the final balance at the end of September.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the financial record with columns 'Date', 'Description', 'Received', 'Expenses', and 'Available Funds'.\n    Returns:\n    float: The final balance at the end of September.\n    \"\"\"\n    # Get the last row of the DataFrame which contains the final balance\n    final_balance = df['Available Funds'].values[-1]\n    \n    # Remove the dollar sign and convert the final balance to float\n    final_balance = float(final_balance.replace('$', ''))\n    \n    return final_balance","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Date': [' ', '9\/2', '9\/3', '9\/5'],\n    'Description': ['Balance: end of August', 'sandpaper', 'paintbrush', 'painting fence'],\n    'Received': ['', '', '', 30.00],\n    'Expenses': ['', 2.45, 5.95, ''],\n    'Available Funds': [29.20, 26.75, 20.80, 50.80]\n})\n# Call the tool to solve the problem\nprint(calculate_final_balance(df))","table":"Name: None\nUnit: $\nContent:\nDate | Description | Received | Expenses | Available Funds\n | Balance: end of August | | | $29.20\n9\/2 | sandpaper | | $2.45 | $26.75\n9\/3 | paintbrush | | $5.95 | $20.80\n9\/5 | painting fence | $30.00 | | $50.80"}
{"level":7,"answer":62.12,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a dictionary of items and their quantities, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (dict): A dictionary where the keys are item names and the values are the quantities of each item.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item, quantity in items.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['coffee pot', 'cutting board', 'serving platter', 'set of spoons', 'glass bowl'],\n    'Price': [12.24, 27.98, 12.47, 14.09, 18.18]\n})\n\n# Initialize the items and quantities\nitems = {\n    'coffee pot': 1,\n    'serving platter': 4\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Brittany need to buy a coffee pot and 4 serving platters?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a dictionary of items and their quantities, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (dict): A dictionary where the keys are item names and the values are the quantities of each item.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item, quantity in items.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['coffee pot', 'cutting board', 'serving platter', 'set of spoons', 'glass bowl'],\n    'Price': [12.24, 27.98, 12.47, 14.09, 18.18]\n})\n\n# Initialize the items and quantities\nitems = {\n    'coffee pot': 1,\n    'serving platter': 4\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\ncoffee pot | $12.24\ncutting board | $27.98\nserving platter | $12.47\nset of spoons | $14.09\nglass bowl | $18.18"}
{"level":7,"answer":2.78,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item given its quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information for different items.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Extract the price per kilogram\n    price_per_kg = float(item_df['Unit'].values[0].split('$')[1].split(' ')[0])\n    \n    # Calculate the total cost\n    total_cost = price_per_kg * quantity\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['grapes', 'bananas', 'cherries', 'apricots'],\n    'Unit': ['$2.05 per kilogram', '$0.41 per kilogram', '$1.39 per kilogram', '$2.06 per kilogram']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'cherries', 2))","question":"If Akira buys 2 kilograms of cherries, how much will she spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item given its quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information for different items.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Extract the price per kilogram\n    price_per_kg = float(item_df['Unit'].values[0].split('$')[1].split(' ')[0])\n    \n    # Calculate the total cost\n    total_cost = price_per_kg * quantity\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['grapes', 'bananas', 'cherries', 'apricots'],\n    'Unit': ['$2.05 per kilogram', '$0.41 per kilogram', '$1.39 per kilogram', '$2.06 per kilogram']\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'cherries', 2))","table":"Name: None\nUnit: $\nContent:\ngrapes | $2.05 per kilogram\nbananas | $0.41 per kilogram\ncherries | $1.39 per kilogram\napricots | $2.06 per kilogram"}
{"level":6,"answer":14.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item given the quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price per pound for the item\n    price_per_lb = item_df['Price'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price_per_lb * quantity\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['whole wheat flour', 'unbleached white flour', 'bleached white flour', 'soy flour'],\n    'Price': [3, 6, 5, 4]\n})\n\n# Call the tool to solve the problem\nitem = 'soy flour'\nquantity = 3.5\ntotal_cost = calculate_total_cost(df, item, quantity)\n\n# Print out the answer\nprint(total_cost)","question":"Rita wants to buy 3+1\/2 pounds of soy flour. How much will she spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item given the quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item to be purchased.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price per pound for the item\n    price_per_lb = item_df['Price'].values[0]\n    \n    # Calculate the total cost\n    total_cost = price_per_lb * quantity\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['whole wheat flour', 'unbleached white flour', 'bleached white flour', 'soy flour'],\n    'Price': [3, 6, 5, 4]\n})\n\n# Call the tool to solve the problem\nitem = 'soy flour'\nquantity = 3.5\ntotal_cost = calculate_total_cost(df, item, quantity)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\nwhole wheat flour | $3\/lb\nunbleached white flour | $6\/lb\nbleached white flour | $5\/lb\nsoy flour | $4\/lb"}
{"level":7,"answer":-42.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of games won by Maura's soccer team and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of games won per year.\n    The DataFrame should have columns 'Year' and 'Games won'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_games_won = df[df['Year'] == start_year]['Games won'].values[0]\n    end_games_won = df[df['Year'] == end_year]['Games won'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_games_won - start_games_won) \/ (end_year - start_year)\n    \n    return rate_of_change\n########################################\n# Initialize the table into a DataFrame\ndf = pd.DataFrame({\n    'Year': [2017, 2018, 2019, 2020, 2021],\n    'Games won': [50, 8, 30, 46, 26]\n})\n\n# Call the tool function to calculate the rate of change between 2017 and 2018\nrate_of_change = calculate_rate_of_change(df, 2017, 2018)\n\n# Print out the answer\nprint(rate_of_change)","question":"Maura kept track of the number of games her soccer team won each year. According to the table, what was the rate of change between 2017 and 2018?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of games won by Maura's soccer team and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of games won per year.\n    The DataFrame should have columns 'Year' and 'Games won'.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_games_won = df[df['Year'] == start_year]['Games won'].values[0]\n    end_games_won = df[df['Year'] == end_year]['Games won'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_games_won - start_games_won) \/ (end_year - start_year)\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a DataFrame\ndf = pd.DataFrame({\n    'Year': [2017, 2018, 2019, 2020, 2021],\n    'Games won': [50, 8, 30, 46, 26]\n})\n\n# Call the tool function to calculate the rate of change between 2017 and 2018\nrate_of_change = calculate_rate_of_change(df, 2017, 2018)\n\n# Print out the answer\nprint(rate_of_change)","table":"Name: Games won by Maura's soccer team\nUnit: games per year\nContent:\nYear | Games won\n2017 | 50\n2018 | 8\n2019 | 30\n2020 | 46\n2021 | 26"}
{"level":5,"answer":0.15,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost for.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['orange agate', 'piece of green slate', 'piece of copper', 'yellow tiger\\'s eye', 'piece of rose quartz'],\n    'Price': [0.04, 0.02, 0.09, 0.06, 0.06]\n})\n\n# Define the items to calculate the total cost for\nitems = ['piece of rose quartz', 'piece of copper']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, items)\n\n# Print out the answer\nprint(total_cost)","question":"How much money does Evelyn need to buy a piece of rose quartz and a piece of copper?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost for.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['orange agate', 'piece of green slate', 'piece of copper', 'yellow tiger\\'s eye', 'piece of rose quartz'],\n    'Price': [0.04, 0.02, 0.09, 0.06, 0.06]\n})\n\n# Define the items to calculate the total cost for\nitems = ['piece of rose quartz', 'piece of copper']\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, items)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\norange agate | $0.04\npiece of green slate | $0.02\npiece of copper | $0.09\nyellow tiger's eye | $0.06\npiece of rose quartz | $0.06"}
{"level":7,"answer":5451.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a dictionary of items and their quantities, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    items (dict): A dictionary where the keys are item names and the values are the quantities of each item.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item, quantity in items.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['kinkajou', 'alpaca', 'cockatiel', 'llama', 'macaw'],\n    'Price': [2241.00, 3558.00, 1070.00, 2673.00, 6125.00]\n})\n\n# Initialize the items and quantities\nitems = {\n    'kinkajou': 1,\n    'cockatiel': 3\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Ryan need to buy a kinkajou and 3 cockatiels?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a dictionary of items and their quantities, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Name' and 'Price'.\n    items (dict): A dictionary where the keys are item names and the values are the quantities of each item.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item, quantity in items.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Name'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['kinkajou', 'alpaca', 'cockatiel', 'llama', 'macaw'],\n    'Price': [2241.00, 3558.00, 1070.00, 2673.00, 6125.00]\n})\n\n# Initialize the items and quantities\nitems = {\n    'kinkajou': 1,\n    'cockatiel': 3\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nkinkajou | $2,241.00\nalpaca | $3,558.00\ncockatiel | $1,070.00\nllama | $2,673.00\nmacaw | $6,125.00"}
{"level":7,"answer":11.34,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of buying a certain quantity of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item to be purchased.\n    quantity (int): The number of items to be purchased.\n    Returns:\n    float: The total cost of buying the specified quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = quantity * item_price\n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['map of Canada', 'book of crossword puzzles', 'magazine', 'map of the world', 'book of piano music'],\n    'Price': [9.08, 7.05, 1.89, 3.06, 9.78]\n})\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, 'magazine', 6)\n\n# Print out the answer\nprint(total_cost)","question":"How much money does Damon need to buy 6 magazines?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the total cost of buying a certain quantity of a specific item.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    item (str): The name of the item to be purchased.\n    quantity (int): The number of items to be purchased.\n    Returns:\n    float: The total cost of buying the specified quantity of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = quantity * item_price\n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['map of Canada', 'book of crossword puzzles', 'magazine', 'map of the world', 'book of piano music'],\n    'Price': [9.08, 7.05, 1.89, 3.06, 9.78]\n})\n\n# Call the tool to solve the problem\ntotal_cost = calculate_total_cost(df, 'magazine', 6)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\nmap of Canada | $9.08\nbook of crossword puzzles | $7.05\nmagazine | $1.89\nmap of the world | $3.06\nbook of piano music | $9.78"}
{"level":8,"answer":33.0,"prediction":"import pandas as pd\n\ndef count_people_with_fewer_than_3_seashells(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of seashells found and their frequencies, and returns the number of people who found fewer than 3 seashells.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of seashells found and their frequencies.\n    The dataframe should contain \"Seashells found\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who found fewer than 3 seashells.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of seashells found is less than 3\n    filtered_df = df[df['Seashells found'] < 3]\n    \n    # Calculate the total number of people who found fewer than 3 seashells\n    num_people = filtered_df['Frequency'].sum()\n    \n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Seashells found': [0, 1, 2, 3, 4, 5, 6],\n    'Frequency': [15, 11, 7, 14, 9, 13, 18]\n})\n# Call the tool to solve the problem\nprint(count_people_with_fewer_than_3_seashells(df))","question":"Alec counted the total number of shells collected by his friends during a walk on the beach. How many people found fewer than 3 seashells?","prediction_code":"import pandas as pd\n\ndef count_people_with_fewer_than_3_seashells(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of seashells found and their frequencies, and returns the number of people who found fewer than 3 seashells.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of seashells found and their frequencies.\n    The dataframe should contain \"Seashells found\" and \"Frequency\" columns.\n    Returns:\n    int: The number of people who found fewer than 3 seashells.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of seashells found is less than 3\n    filtered_df = df[df['Seashells found'] < 3]\n    \n    # Calculate the total number of people who found fewer than 3 seashells\n    num_people = filtered_df['Frequency'].sum()\n    \n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Seashells found': [0, 1, 2, 3, 4, 5, 6],\n    'Frequency': [15, 11, 7, 14, 9, 13, 18]\n})\n# Call the tool to solve the problem\nprint(count_people_with_fewer_than_3_seashells(df))","table":"Name: Finding seashells\nUnit: None\nContent:\nSeashells found | Frequency\n0 | 15\n1 | 11\n2 | 7\n3 | 14\n4 | 9\n5 | 13\n6 | 18"}
{"level":8,"answer":14.0,"prediction":"import pandas as pd\n\ndef count_guests_fewer_than_2(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of times guests went sledding last winter, and returns the number of guests who went sledding fewer than 2 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of times guests went sledding last winter.\n    The dataframe should contain \"Number of times\" and \"Frequency\" columns.\n    Returns:\n    int: The number of guests who went sledding fewer than 2 times.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of times is fewer than 2\n    filtered_df = df[df['Number of times'] < 2]\n    \n    # Calculate the total frequency of guests who went sledding fewer than 2 times\n    total_frequency = filtered_df['Frequency'].sum()\n    \n    return total_frequency\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of times': [0, 1, 2, 3],\n    'Frequency': [1, 13, 0, 5]\n})\n# Call the tool to solve the problem\nprint(count_guests_fewer_than_2(df))","question":"The Dover Ski Resort asked its guests how many times they went sledding last winter. How many guests went sledding fewer than 2 times?","prediction_code":"import pandas as pd\n\ndef count_guests_fewer_than_2(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of times guests went sledding last winter, and returns the number of guests who went sledding fewer than 2 times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of times guests went sledding last winter.\n    The dataframe should contain \"Number of times\" and \"Frequency\" columns.\n    Returns:\n    int: The number of guests who went sledding fewer than 2 times.\n    \"\"\"\n    # Filter the DataFrame for rows where the number of times is fewer than 2\n    filtered_df = df[df['Number of times'] < 2]\n    \n    # Calculate the total frequency of guests who went sledding fewer than 2 times\n    total_frequency = filtered_df['Frequency'].sum()\n    \n    return total_frequency","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of times': [0, 1, 2, 3],\n    'Frequency': [1, 13, 0, 5]\n})\n# Call the tool to solve the problem\nprint(count_guests_fewer_than_2(df))","table":"Name: Sledding last winter\nUnit: None\nContent:\nNumber of times | Frequency\n0 | 1\n1 | 13\n2 | 0\n3 | 5"}
{"level":7,"answer":21.0,"prediction":"import pandas as pd\n\ndef count_buildings_with_fewer_bricks(df, threshold):\n    \"\"\"\n    This function takes in a pandas dataframe of bricks per building and a threshold value, and returns the number of buildings that have fewer than the threshold number of bricks.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of bricks per building.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    threshold (int): The threshold number of bricks.\n    Returns:\n    int: The number of buildings that have fewer than the threshold number of bricks.\n    \"\"\"\n    # prepare a list to calculate the number of bricks in each building\n    bricks = []\n    # calculate the total number of bricks in each building\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            bricks.append(stem * 10 + leaf[j])\n    # filter the buildings where the total number of bricks is less than the threshold\n    filtered = [brick for brick in bricks if brick < threshold]\n    # count the number of buildings\n    num_buildings = len(filtered)\n    return num_buildings\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7],\n    'Leaf': [[6, 7, 8], [4], [4, 6], [0, 2, 3, 4, 9], [0, 8, 9], [0, 3, 8], [5, 6, 8, 9]]\n})\n# Set the threshold value\nthreshold = 80\n# Call the tool to solve the problem\nprint(count_buildings_with_fewer_bricks(df, threshold))","question":"The architecture student counted the number of bricks in each building in her neighborhood. How many buildings have fewer than 80 bricks?","prediction_code":"import pandas as pd\n\ndef count_buildings_with_fewer_bricks(df, threshold):\n    \"\"\"\n    This function takes in a pandas dataframe of bricks per building and a threshold value, and returns the number of buildings that have fewer than the threshold number of bricks.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of bricks per building.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    threshold (int): The threshold number of bricks.\n    Returns:\n    int: The number of buildings that have fewer than the threshold number of bricks.\n    \"\"\"\n    # prepare a list to calculate the number of bricks in each building\n    bricks = []\n    # calculate the total number of bricks in each building\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            bricks.append(stem * 10 + leaf[j])\n    # filter the buildings where the total number of bricks is less than the threshold\n    filtered = [brick for brick in bricks if brick < threshold]\n    # count the number of buildings\n    num_buildings = len(filtered)\n    return num_buildings","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7],\n    'Leaf': [[6, 7, 8], [4], [4, 6], [0, 2, 3, 4, 9], [0, 8, 9], [0, 3, 8], [5, 6, 8, 9]]\n})\n# Set the threshold value\nthreshold = 80\n# Call the tool to solve the problem\nprint(count_buildings_with_fewer_bricks(df, threshold))","table":"Name: Bricks per building\nUnit: buildings\nContent:\nStem | Leaf \n1 | 6, 7, 8\n2 | 4\n3 | 4, 6\n4 | 0, 2, 3, 4, 9\n5 | 0, 8, 9\n6 | 0, 3, 8\n7 | 5, 6, 8, 9"}
{"level":8,"answer":3.0,"prediction":"import pandas as pd\n\ndef count_classrooms_with_41_desks(df):\n    \"\"\"\n    This function takes in a pandas dataframe of desks per classroom, and returns the number of classrooms that have at least 41 desks.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of desks per classroom.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of classrooms that have at least 41 desks.\n    \"\"\"\n    # prepare a list to calculate the number of desks in each classroom\n    desks = []\n    # calculate the total number of desks in each classroom\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            desks.append(stem * 10 + leaf[j])\n    # filter the classrooms where the total number of desks is greater than or equal to 41\n    filtered = [desk for desk in desks if desk >= 41]\n    # count the number of rows\n    num_classrooms = len(filtered)\n    return num_classrooms\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[1, 6, 7, 8, 9], [0, 2, 7], [0, 7, 9], [2, 4, 9]]\n})\n# Call the tool to solve the problem\nprint(count_classrooms_with_41_desks(df))","question":"Eve counted the number of desks in each classroom at her school. How many classrooms have at least 41 desks?","prediction_code":"import pandas as pd\n\ndef count_classrooms_with_41_desks(df):\n    \"\"\"\n    This function takes in a pandas dataframe of desks per classroom, and returns the number of classrooms that have at least 41 desks.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of desks per classroom.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of classrooms that have at least 41 desks.\n    \"\"\"\n    # prepare a list to calculate the number of desks in each classroom\n    desks = []\n    # calculate the total number of desks in each classroom\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            desks.append(stem * 10 + leaf[j])\n    # filter the classrooms where the total number of desks is greater than or equal to 41\n    filtered = [desk for desk in desks if desk >= 41]\n    # count the number of rows\n    num_classrooms = len(filtered)\n    return num_classrooms","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[1, 6, 7, 8, 9], [0, 2, 7], [0, 7, 9], [2, 4, 9]]\n})\n# Call the tool to solve the problem\nprint(count_classrooms_with_41_desks(df))","table":"Name: Desks per classroom\nUnit: classrooms\nContent:\nStem | Leaf \n1 | 1, 6, 7, 8, 9\n2 | 0, 2, 7\n3 | 0, 7, 9\n4 | 2, 4, 9"}
{"level":7,"answer":19.0,"prediction":"import pandas as pd\n\ndef count_people_with_at_least_30_points(df):\n    \"\"\"\n    This function takes in a pandas dataframe of quiz show scores and returns the number of people who scored at least 30 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the scores of the people competing on the quiz show.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of people who scored at least 30 points.\n    \"\"\"\n    # prepare a list to calculate scores of each person\n    scores = []\n    # calculate the total score of each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # filter the people who scored at least 30 points\n    filtered = [score for score in scores if score >= 30]\n    # count the number of people\n    num_people = len(filtered)\n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7, 8],\n    'Leaf': [[3, 7], [3, 3, 8], [0, 2, 4, 6, 7, 9], [2, 3, 5], [4, 5, 5], [9, 9]]\n})\n# Call the tool to solve the problem\nprint(count_people_with_at_least_30_points(df))","question":"For a math assignment, Cara researched the scores of the people competing on her favorite quiz show. How many people scored at least 30 points?","prediction_code":"import pandas as pd\n\ndef count_people_with_at_least_30_points(df):\n    \"\"\"\n    This function takes in a pandas dataframe of quiz show scores and returns the number of people who scored at least 30 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the scores of the people competing on the quiz show.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of people who scored at least 30 points.\n    \"\"\"\n    # prepare a list to calculate scores of each person\n    scores = []\n    # calculate the total score of each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # filter the people who scored at least 30 points\n    filtered = [score for score in scores if score >= 30]\n    # count the number of people\n    num_people = len(filtered)\n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7, 8],\n    'Leaf': [[3, 7], [3, 3, 8], [0, 2, 4, 6, 7, 9], [2, 3, 5], [4, 5, 5], [9, 9]]\n})\n# Call the tool to solve the problem\nprint(count_people_with_at_least_30_points(df))","table":"Name: Quiz show scores\nUnit: people\nContent:\nStem | Leaf \n3 | 3, 7\n4 | 3, 3, 8\n5 | 0, 2, 4, 6, 7, 9\n6 | 2, 3, 5\n7 | 4, 5, 5\n8 | 9, 9"}
{"level":6,"answer":5.1,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost for a given item and weight.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price table with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    weight (float): The weight of the item in pounds.\n    Returns:\n    float: The total cost for the given item and weight.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * weight\n        return total_cost\n    else:\n        return None\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['navel oranges', 'Persian oranges', 'pomelos', 'blood oranges', 'Valencia oranges', 'tangerines'],\n    'Price': [3, 2, 2, 4, 4, 4]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'navel oranges', 1 + 7\/10))","question":"What is the total cost for 1+7\/10 pounds of navel oranges?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, weight):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost for a given item and weight.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price table with columns 'Item' and 'Price'.\n    item (str): The name of the item.\n    weight (float): The weight of the item in pounds.\n    Returns:\n    float: The total cost for the given item and weight.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Item'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        item_price = item_df['Price'].values[0]\n        total_cost = item_price * weight\n        return total_cost\n    else:\n        return None","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['navel oranges', 'Persian oranges', 'pomelos', 'blood oranges', 'Valencia oranges', 'tangerines'],\n    'Price': [3, 2, 2, 4, 4, 4]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'navel oranges', 1 + 7\/10))","table":"Name: None\nUnit: $\nContent:\nnavel oranges | $3\/pound\nPersian oranges | $2\/pound\npomelos | $2\/pound\nblood oranges | $4\/pound\nValencia oranges | $4\/pound\ntangerines | $4\/pound"}
{"level":4,"answer":18.0,"prediction":"import pandas as pd\n\ndef find_smallest_number(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of lemon-flavored candies per bag and returns the smallest number of lemon-flavored candies.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of lemon-flavored candies per bag.\n    The DataFrame should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of lemon-flavored candies.\n    \"\"\"\n    # Create an empty list to store all the numbers of lemon-flavored candies\n    candies = []\n    \n    # Iterate through each row of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Calculate the number of lemon-flavored candies for each bag\n        for j in range(len(leaf)):\n            candies.append(stem * 10 + leaf[j])\n    \n    # Find the smallest number of lemon-flavored candies\n    smallest_number = min(candies)\n    \n    return smallest_number\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[8], [1, 8], [7, 9], [5, 6, 8]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number(df))","question":"A machine at the candy factory dispensed different numbers of lemon-flavored candies into various bags. What is the smallest number of lemon-flavored candies?","prediction_code":"import pandas as pd\n\ndef find_smallest_number(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of lemon-flavored candies per bag and returns the smallest number of lemon-flavored candies.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of lemon-flavored candies per bag.\n    The DataFrame should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of lemon-flavored candies.\n    \"\"\"\n    # Create an empty list to store all the numbers of lemon-flavored candies\n    candies = []\n    \n    # Iterate through each row of the DataFrame\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        \n        # Calculate the number of lemon-flavored candies for each bag\n        for j in range(len(leaf)):\n            candies.append(stem * 10 + leaf[j])\n    \n    # Find the smallest number of lemon-flavored candies\n    smallest_number = min(candies)\n    \n    return smallest_number","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[8], [1, 8], [7, 9], [5, 6, 8]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number(df))","table":"Name: Lemon-flavored candies per bag\nUnit: lemon-flavored candies\nContent:\nStem | Leaf \n1 | 8\n2 | 1, 8\n3 | 7, 9\n4 | 5, 6, 8"}
{"level":3,"answer":2982.0,"prediction":"import pandas as pd\n\ndef calculate_miles_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of miles flown per month and returns the difference in miles flown between October and September.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the miles flown per month.\n    The dataframe should contain \"Month\" and \"Miles\" columns.\n    Returns:\n    int: The difference in miles flown between October and September.\n    \"\"\"\n    # Filter the DataFrame for October and September rows\n    october_miles = df[df['Month'] == 'October']['Miles'].values[0]\n    september_miles = df[df['Month'] == 'September']['Miles'].values[0]\n    \n    # Calculate the difference in miles flown\n    miles_difference = october_miles - september_miles\n    \n    return miles_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['September', 'October', 'November'],\n    'Miles': [3330, 6312, 8778]\n})\n# Call the tool to solve the problem\nprint(calculate_miles_difference(df))","question":"An airline pilot recorded how many miles she flew each month. How many more miles did the pilot fly in October than in September?","prediction_code":"import pandas as pd\n\ndef calculate_miles_difference(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of miles flown per month and returns the difference in miles flown between October and September.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the miles flown per month.\n    The dataframe should contain \"Month\" and \"Miles\" columns.\n    Returns:\n    int: The difference in miles flown between October and September.\n    \"\"\"\n    # Filter the DataFrame for October and September rows\n    october_miles = df[df['Month'] == 'October']['Miles'].values[0]\n    september_miles = df[df['Month'] == 'September']['Miles'].values[0]\n    \n    # Calculate the difference in miles flown\n    miles_difference = october_miles - september_miles\n    \n    return miles_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Month': ['September', 'October', 'November'],\n    'Miles': [3330, 6312, 8778]\n})\n# Call the tool to solve the problem\nprint(calculate_miles_difference(df))","table":"Name: Miles flown\nUnit: miles\nContent:\nMonth | Miles\nSeptember | 3,330\nOctober | 6,312\nNovember | 8,778"}
{"level":6,"answer":5.0,"prediction":"import pandas as pd\n\ndef count_tanks_with_fewer_fish(df, threshold):\n    \"\"\"\n    This function takes in a pandas dataframe of fish per tank and a threshold, and returns the number of tanks that have fewer than the threshold number of fish.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of fish per tank.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    threshold (int): The threshold number of fish.\n    Returns:\n    int: The number of tanks that have fewer than the threshold number of fish.\n    \"\"\"\n    # prepare a list to calculate the number of fish in each tank\n    fish_counts = []\n    # calculate the total number of fish in each tank\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        count = stem\n        for j in range(len(leaf)):\n            count += leaf[j]\n        fish_counts.append(count)\n    # filter the tanks where the number of fish is less than the threshold\n    filtered = [count for count in fish_counts if count < threshold]\n    # count the number of tanks\n    num_tanks = len(filtered)\n    return num_tanks\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[1], [6, 9], [2, 3], [], [], [5], [3, 6, 8], [0]]\n})\n# Set the threshold\nthreshold = 46\n# Call the tool to solve the problem\nprint(count_tanks_with_fewer_fish(df, threshold))","question":"A pet store owner had her staff count the number of fish in each tank. How many tanks have fewer than 46 fish?","prediction_code":"import pandas as pd\n\ndef count_tanks_with_fewer_fish(df, threshold):\n    \"\"\"\n    This function takes in a pandas dataframe of fish per tank and a threshold, and returns the number of tanks that have fewer than the threshold number of fish.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of fish per tank.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    threshold (int): The threshold number of fish.\n    Returns:\n    int: The number of tanks that have fewer than the threshold number of fish.\n    \"\"\"\n    # prepare a list to calculate the number of fish in each tank\n    fish_counts = []\n    # calculate the total number of fish in each tank\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        count = stem\n        for j in range(len(leaf)):\n            count += leaf[j]\n        fish_counts.append(count)\n    # filter the tanks where the number of fish is less than the threshold\n    filtered = [count for count in fish_counts if count < threshold]\n    # count the number of tanks\n    num_tanks = len(filtered)\n    return num_tanks","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[1], [6, 9], [2, 3], [], [], [5], [3, 6, 8], [0]]\n})\n# Set the threshold\nthreshold = 46\n# Call the tool to solve the problem\nprint(count_tanks_with_fewer_fish(df, threshold))","table":"Name: Fish per tank\nUnit: tanks\nContent:\nStem | Leaf \n1 | 1\n2 | 6, 9\n3 | 2, 3\n4 | \n5 | \n6 | 5\n7 | 3, 6, 8\n8 | 0"}
{"level":8,"answer":6.0,"prediction":"import pandas as pd\n\ndef count_people_with_score(df, score):\n    \"\"\"\n    This function takes in a pandas DataFrame of scores in a trivia game and a specific score, and returns the number of people who scored that specific score.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the scores and their frequencies with columns 'Score' and 'Frequency'.\n    score (int): The specific score to count.\n    Returns:\n    int: The number of people who scored the specific score.\n    \"\"\"\n    # Filter the DataFrame for the specific score\n    score_df = df[df['Score'] == score]\n    \n    # Get the frequency of the specific score\n    frequency = score_df['Frequency'].values[0]\n    \n    return frequency\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Score': [5, 6, 7, 8, 9, 10],\n    'Frequency': [5, 9, 8, 10, 1, 6]\n})\n# Call the tool to solve the problem\nprint(count_people_with_score(df, 10))","question":"The coach of the Academic Bowl recorded the scores in a trivia game to determine who would represent the school at the regional competition. How many people scored 10?","prediction_code":"import pandas as pd\n\ndef count_people_with_score(df, score):\n    \"\"\"\n    This function takes in a pandas DataFrame of scores in a trivia game and a specific score, and returns the number of people who scored that specific score.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the scores and their frequencies with columns 'Score' and 'Frequency'.\n    score (int): The specific score to count.\n    Returns:\n    int: The number of people who scored the specific score.\n    \"\"\"\n    # Filter the DataFrame for the specific score\n    score_df = df[df['Score'] == score]\n    \n    # Get the frequency of the specific score\n    frequency = score_df['Frequency'].values[0]\n    \n    return frequency","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Score': [5, 6, 7, 8, 9, 10],\n    'Frequency': [5, 9, 8, 10, 1, 6]\n})\n# Call the tool to solve the problem\nprint(count_people_with_score(df, 10))","table":"Name: Scores in a trivia game\nUnit: None\nContent:\nScore | Frequency\n5 | 5\n6 | 9\n7 | 8\n8 | 10\n9 | 1\n10 | 6"}
{"level":5,"answer":2.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of goals made and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of goals made each day.\n    The dataframe should contain \"Day\" and \"Number of goals\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    goals = df['Number of goals']\n    \n    # Calculate the median\n    median = goals.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Number of goals': [2, 3, 2, 2, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"Ayana recalled how many goals she had made in soccer practice each day. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of goals made and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of goals made each day.\n    The dataframe should contain \"Day\" and \"Number of goals\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    goals = df['Number of goals']\n    \n    # Calculate the median\n    median = goals.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Number of goals': [2, 3, 2, 2, 8]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Goals made\nUnit: None\nContent:\nDay | Number of goals\nMonday | 2\nTuesday | 3\nWednesday | 2\nThursday | 2\nFriday | 8"}
{"level":8,"answer":35.0,"prediction":"import pandas as pd\n\ndef count_participants_with_more_than_1_pullup(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pull-up data and returns the number of participants who completed more than 1 pull-up.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of pull-ups completed by each participant.\n    The DataFrame should contain \"Number of pull-ups\" and \"Frequency\" columns.\n    Returns:\n    int: The number of participants who completed more than 1 pull-up.\n    \"\"\"\n    # Filter the DataFrame for participants who completed more than 1 pull-up\n    filtered_df = df[df['Number of pull-ups'] > 1]\n    \n    # Calculate the total number of participants\n    num_participants = filtered_df['Frequency'].sum()\n    \n    return num_participants\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of pull-ups': [0, 1, 2, 3, 4, 5],\n    'Frequency': [17, 15, 4, 0, 19, 12]\n})\n# Call the tool to solve the problem\nprint(count_participants_with_more_than_1_pullup(df))","question":"Jackson, a fitness counselor, counted the number of pull-ups completed by each bootcamp participant. How many participants did more than 1 pull-up?","prediction_code":"import pandas as pd\n\ndef count_participants_with_more_than_1_pullup(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of pull-up data and returns the number of participants who completed more than 1 pull-up.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of pull-ups completed by each participant.\n    The DataFrame should contain \"Number of pull-ups\" and \"Frequency\" columns.\n    Returns:\n    int: The number of participants who completed more than 1 pull-up.\n    \"\"\"\n    # Filter the DataFrame for participants who completed more than 1 pull-up\n    filtered_df = df[df['Number of pull-ups'] > 1]\n    \n    # Calculate the total number of participants\n    num_participants = filtered_df['Frequency'].sum()\n    \n    return num_participants","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of pull-ups': [0, 1, 2, 3, 4, 5],\n    'Frequency': [17, 15, 4, 0, 19, 12]\n})\n# Call the tool to solve the problem\nprint(count_participants_with_more_than_1_pullup(df))","table":"Name: Doing pull-ups\nUnit: None\nContent:\nNumber of pull-ups | Frequency\n0 | 17\n1 | 15\n2 | 4\n3 | 0\n4 | 19\n5 | 12"}
{"level":3,"answer":672.0,"prediction":"import pandas as pd\n\ndef count_total_trees(df, organizations):\n    \"\"\"\n    This function takes in a pandas DataFrame of trees planted by different organizations and a list of organizations, and returns the total number of trees planted by the specified organizations.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the organization names and the number of trees planted by each organization.\n    The DataFrame should have columns 'Organization' and 'Number of trees planted'.\n    organizations (list): A list of organization names.\n    Returns:\n    int: The total number of trees planted by the specified organizations.\n    \"\"\"\n    # Filter the DataFrame for the specified organizations\n    filtered_df = df[df['Organization'].isin(organizations)]\n    \n    # Calculate the total number of trees planted by the specified organizations\n    total_trees = filtered_df['Number of trees planted'].sum()\n    \n    return total_trees\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Organization': ['Let it Grow', 'Plant It', 'Dreaming Green'],\n    'Number of trees planted': [522, 150, 296]\n})\n\n# Specify the organizations\norganizations = ['Let it Grow', 'Plant It']\n\n# Call the tool to solve the problem\nprint(count_total_trees(df, organizations))","question":"An environmental agency examined how many trees were planted by different organizations. In all, how many trees were planted by Let it Grow and Plant It?","prediction_code":"import pandas as pd\n\ndef count_total_trees(df, organizations):\n    \"\"\"\n    This function takes in a pandas DataFrame of trees planted by different organizations and a list of organizations, and returns the total number of trees planted by the specified organizations.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the organization names and the number of trees planted by each organization.\n    The DataFrame should have columns 'Organization' and 'Number of trees planted'.\n    organizations (list): A list of organization names.\n    Returns:\n    int: The total number of trees planted by the specified organizations.\n    \"\"\"\n    # Filter the DataFrame for the specified organizations\n    filtered_df = df[df['Organization'].isin(organizations)]\n    \n    # Calculate the total number of trees planted by the specified organizations\n    total_trees = filtered_df['Number of trees planted'].sum()\n    \n    return total_trees","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Organization': ['Let it Grow', 'Plant It', 'Dreaming Green'],\n    'Number of trees planted': [522, 150, 296]\n})\n\n# Specify the organizations\norganizations = ['Let it Grow', 'Plant It']\n\n# Call the tool to solve the problem\nprint(count_total_trees(df, organizations))","table":"Name: Trees planted\nUnit: trees\nContent:\nOrganization | Number of trees planted\nLet it Grow | 522\nPlant It | 150\nDreaming Green | 296"}
{"level":8,"answer":37.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a dictionary of orders,\n    and returns the total cost of the orders.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['macadamia nut butter', 'peanut butter', 'sunflower seed butter', 'almond butter', 'cashew butter'],\n    'Price': [5, 5, 4, 6, 5]\n})\n\n# Initialize the orders dictionary\norders = {\n    'peanut butter': 5,\n    'sunflower seed butter': 3\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","question":"What is the total cost for 5 pounds of peanut butter and 3 pounds of sunflower seed butter?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, orders):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a dictionary of orders,\n    and returns the total cost of the orders.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the items and their prices with columns 'Item' and 'Price'.\n    orders (dict): A dictionary where the keys are item names and the values are the number of orders for each item.\n    Returns:\n    float: The total cost of the orders.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each ordered item\n    for item, quantity in orders.items():\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += quantity * item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['macadamia nut butter', 'peanut butter', 'sunflower seed butter', 'almond butter', 'cashew butter'],\n    'Price': [5, 5, 4, 6, 5]\n})\n\n# Initialize the orders dictionary\norders = {\n    'peanut butter': 5,\n    'sunflower seed butter': 3\n}\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, orders))","table":"Name: None\nUnit: $\nContent:\nmacadamia nut butter | $5 per pound\npeanut butter | $5 per pound\nsunflower seed butter | $4 per pound\nalmond butter | $6 per pound\ncashew butter | $5 per pound"}
{"level":8,"answer":5.0,"prediction":"import pandas as pd\n\ndef count_gardens_with_plants(df):\n    \"\"\"\n    This function takes in a pandas dataframe of plants per garden, and returns the number of gardens that have at least 60 plants but fewer than 70 plants.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of plants per garden.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of gardens that have at least 60 plants but fewer than 70 plants.\n    \"\"\"\n    # prepare a list to calculate the number of plants in each garden\n    plants = []\n    # calculate the total number of plants in each garden\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            plants.append(stem * 10 + leaf[j])\n    # filter the gardens where the total number of plants is greater than or equal to 60 and less than 70\n    filtered = [plant for plant in plants if 60 <= plant < 70]\n    # count the number of gardens\n    num_gardens = len(filtered)\n    return num_gardens\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6],\n    'Leaf': [[2, 2, 5, 6, 6, 7, 8], [0, 5, 7], [0, 0, 6, 7], [1, 3, 5, 8, 9]]\n})\n# Call the tool to solve the problem\nprint(count_gardens_with_plants(df))","question":"The members of the local garden club tallied the number of plants in each person's garden. How many gardens have at least 60 plants but fewer than 70 plants?","prediction_code":"import pandas as pd\n\ndef count_gardens_with_plants(df):\n    \"\"\"\n    This function takes in a pandas dataframe of plants per garden, and returns the number of gardens that have at least 60 plants but fewer than 70 plants.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of plants per garden.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of gardens that have at least 60 plants but fewer than 70 plants.\n    \"\"\"\n    # prepare a list to calculate the number of plants in each garden\n    plants = []\n    # calculate the total number of plants in each garden\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            plants.append(stem * 10 + leaf[j])\n    # filter the gardens where the total number of plants is greater than or equal to 60 and less than 70\n    filtered = [plant for plant in plants if 60 <= plant < 70]\n    # count the number of gardens\n    num_gardens = len(filtered)\n    return num_gardens","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6],\n    'Leaf': [[2, 2, 5, 6, 6, 7, 8], [0, 5, 7], [0, 0, 6, 7], [1, 3, 5, 8, 9]]\n})\n# Call the tool to solve the problem\nprint(count_gardens_with_plants(df))","table":"Name: Plants per garden\nUnit: gardens\nContent:\nStem | Leaf \n3 | 2, 2, 5, 6, 6, 7, 8\n4 | 0, 5, 7\n5 | 0, 0, 6, 7\n6 | 1, 3, 5, 8, 9"}
{"level":8,"answer":3.0,"prediction":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of art contest entries per year and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of art contest entries per year.\n    The dataframe should contain \"Year\" and \"Number of entries\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_entries = df[df['Year'] == start_year]['Number of entries'].values[0]\n    end_entries = df[df['Year'] == end_year]['Number of entries'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_entries - start_entries) \/ start_entries\n    \n    return rate_of_change\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2010, 2011, 2012, 2013, 2014],\n    'Number of entries': [12, 15, 12, 15, 13]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2010, 2011))","question":"Mrs. Callahan hosts an annual art contest for kids, and she keeps a record of the number of entries each year. According to the table, what was the rate of change between 2010 and 2011?","prediction_code":"import pandas as pd\n\ndef calculate_rate_of_change(df, start_year, end_year):\n    \"\"\"\n    This function takes in a pandas DataFrame of art contest entries per year and calculates the rate of change between two given years.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of art contest entries per year.\n    The dataframe should contain \"Year\" and \"Number of entries\" columns.\n    start_year (int): The starting year for calculating the rate of change.\n    end_year (int): The ending year for calculating the rate of change.\n    Returns:\n    float: The rate of change between the two given years.\n    \"\"\"\n    # Filter the DataFrame for the start and end years\n    start_entries = df[df['Year'] == start_year]['Number of entries'].values[0]\n    end_entries = df[df['Year'] == end_year]['Number of entries'].values[0]\n    \n    # Calculate the rate of change\n    rate_of_change = (end_entries - start_entries) \/ start_entries\n    \n    return rate_of_change","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Year': [2010, 2011, 2012, 2013, 2014],\n    'Number of entries': [12, 15, 12, 15, 13]\n})\n# Call the tool to solve the problem\nprint(calculate_rate_of_change(df, 2010, 2011))","table":"Name: Art contest entries\nUnit: entries per year\nContent:\nYear | Number of entries\n2010 | 12\n2011 | 15\n2012 | 12\n2013 | 15\n2014 | 13"}
{"level":7,"answer":22.0,"prediction":"import pandas as pd\n\ndef count_people_with_less_than_68_points(df):\n    \"\"\"\n    This function takes in a pandas dataframe of game show scores and returns the number of people who scored fewer than 68 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the game show scores.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of people who scored fewer than 68 points.\n    \"\"\"\n    # prepare a list to calculate scores of each person\n    scores = []\n    # calculate the total score of each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # filter the people who scored fewer than 68 points\n    filtered = [score for score in scores if score < 68]\n    # count the number of rows\n    num_people = len(filtered)\n    return num_people\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6],\n    'Leaf': [[1, 9], [0, 2, 8, 8, 9], [1, 1, 1, 1, 4, 8, 9], [5, 7, 9, 9], [1, 2, 3, 5]]\n})\n# Call the tool to solve the problem\nprint(count_people_with_less_than_68_points(df))","question":"The staff of a game show tracked the performance of all the contestants during the past season. How many people scored fewer than 68 points?","prediction_code":"import pandas as pd\n\ndef count_people_with_less_than_68_points(df):\n    \"\"\"\n    This function takes in a pandas dataframe of game show scores and returns the number of people who scored fewer than 68 points.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the game show scores.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of people who scored fewer than 68 points.\n    \"\"\"\n    # prepare a list to calculate scores of each person\n    scores = []\n    # calculate the total score of each person\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            scores.append(stem * 10 + leaf[j])\n    # filter the people who scored fewer than 68 points\n    filtered = [score for score in scores if score < 68]\n    # count the number of rows\n    num_people = len(filtered)\n    return num_people","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6],\n    'Leaf': [[1, 9], [0, 2, 8, 8, 9], [1, 1, 1, 1, 4, 8, 9], [5, 7, 9, 9], [1, 2, 3, 5]]\n})\n# Call the tool to solve the problem\nprint(count_people_with_less_than_68_points(df))","table":"Name: Game show scores\nUnit: people\nContent:\nStem | Leaf \n2 | 1, 9\n3 | 0, 2, 8, 8, 9\n4 | 1, 1, 1, 1, 4, 8, 9\n5 | 5, 7, 9, 9\n6 | 1, 2, 3, 5"}
{"level":8,"answer":4.0,"prediction":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of comic strips read and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of comic strips read.\n    The dataframe should contain \"Day\" and \"Number of comic strips\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean using pandas\n    mean = df['Number of comic strips'].mean()\n    \n    return mean\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Number of comic strips': [5, 1, 8, 2, 3, 7, 2]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","question":"Daniel paid attention to how many comic strips he read in the past 7 days. What is the mean of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mean(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of comic strips read and returns the mean of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the number of comic strips read.\n    The dataframe should contain \"Day\" and \"Number of comic strips\" columns.\n    Returns:\n    float: The mean of the numbers.\n    \"\"\"\n    # Calculate the mean using pandas\n    mean = df['Number of comic strips'].mean()\n    \n    return mean","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Number of comic strips': [5, 1, 8, 2, 3, 7, 2]\n})\n# Call the tool to solve the problem\nprint(calculate_mean(df))","table":"Name: Comic strips read\nUnit: None\nContent:\nDay | Number of comic strips\nSaturday | 5\nSunday | 1\nMonday | 8\nTuesday | 2\nWednesday | 3\nThursday | 7\nFriday | 2"}
{"level":8,"answer":30.0,"prediction":"import pandas as pd\n\ndef count_children_with_more_than_one_necklace(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of candy necklaces made by children and returns the number of children who made more than one candy necklace.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of candy necklaces made by each child.\n    The dataframe should contain \"Candy necklaces made\" and \"Frequency\" columns.\n    Returns:\n    int: The number of children who made more than one candy necklace.\n    \"\"\"\n    # Filter the DataFrame for children who made more than one candy necklace\n    filtered_df = df[df['Candy necklaces made'] > 1]\n    \n    # Count the number of rows in the filtered DataFrame\n    num_children = len(filtered_df)\n    \n    return num_children\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Candy necklaces made': [0, 1, 2, 3, 4],\n    'Frequency': [20, 3, 16, 0, 14]\n})\n# Call the tool to solve the problem\nprint(count_children_with_more_than_one_necklace(df))","question":"While working as a summer camp counselor, Florence monitored how many candy necklaces each child made. How many children made more than 1 candy necklace?","prediction_code":"import pandas as pd\n\ndef count_children_with_more_than_one_necklace(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of candy necklaces made by children and returns the number of children who made more than one candy necklace.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of candy necklaces made by each child.\n    The dataframe should contain \"Candy necklaces made\" and \"Frequency\" columns.\n    Returns:\n    int: The number of children who made more than one candy necklace.\n    \"\"\"\n    # Filter the DataFrame for children who made more than one candy necklace\n    filtered_df = df[df['Candy necklaces made'] > 1]\n    \n    # Count the number of rows in the filtered DataFrame\n    num_children = len(filtered_df)\n    \n    return num_children","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Candy necklaces made': [0, 1, 2, 3, 4],\n    'Frequency': [20, 3, 16, 0, 14]\n})\n# Call the tool to solve the problem\nprint(count_children_with_more_than_one_necklace(df))","table":"Name: Making candy necklaces\nUnit: None\nContent:\nCandy necklaces made | Frequency\n0 | 20\n1 | 3\n2 | 16\n3 | 0\n4 | 14"}
{"level":8,"answer":4.0,"prediction":"import pandas as pd\n\ndef find_most_frequent_number(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of rolled numbers and their frequencies, and returns the number that was rolled the most times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the rolled numbers and their frequencies.\n    The dataframe should contain \"Numbers rolled\" and \"Frequency\" columns.\n    Returns:\n    int: The number that was rolled the most times.\n    \"\"\"\n    # Find the index of the row with the maximum frequency\n    max_index = df['Frequency'].idxmax()\n    \n    # Get the number that was rolled the most times\n    most_frequent_number = df.loc[max_index, 'Numbers rolled']\n    \n    return most_frequent_number\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Numbers rolled': [1, 2, 3, 4, 5, 6],\n    'Frequency': [15, 19, 18, 20, 14, 6]\n})\n# Call the tool to solve the problem\nprint(find_most_frequent_number(df))","question":"During a lab exercise, students in Professor Whitaker's class rolled a 6-sided die and recorded the results. Which number was rolled the most times?","prediction_code":"import pandas as pd\n\ndef find_most_frequent_number(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of rolled numbers and their frequencies, and returns the number that was rolled the most times.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the rolled numbers and their frequencies.\n    The dataframe should contain \"Numbers rolled\" and \"Frequency\" columns.\n    Returns:\n    int: The number that was rolled the most times.\n    \"\"\"\n    # Find the index of the row with the maximum frequency\n    max_index = df['Frequency'].idxmax()\n    \n    # Get the number that was rolled the most times\n    most_frequent_number = df.loc[max_index, 'Numbers rolled']\n    \n    return most_frequent_number","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Numbers rolled': [1, 2, 3, 4, 5, 6],\n    'Frequency': [15, 19, 18, 20, 14, 6]\n})\n# Call the tool to solve the problem\nprint(find_most_frequent_number(df))","table":"Name: None\nUnit: None\nContent:\nRolls of a | 6-sided die\nNumbers rolled | Frequency\n1 | 15\n2 | 19\n3 | 18\n4 | 20\n5 | 14\n6 | 6"}
{"level":5,"answer":79.0,"prediction":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of tennis balls hit by students and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names of students and the number of tennis balls hit by each student.\n    The DataFrame should contain \"Name\" and \"Number of tennis balls\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of tennis balls']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Zachary', 'Frank', 'Eduardo', 'Javier', 'Charlotte'],\n    'Number of tennis balls': [72, 82, 87, 74, 79]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","question":"The gym teacher wrote down how many tennis balls his students hit in half an hour. What is the median of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of the number of tennis balls hit by students and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the names of students and the number of tennis balls hit by each student.\n    The DataFrame should contain \"Name\" and \"Number of tennis balls\" columns.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Get the column of numbers\n    numbers = df['Number of tennis balls']\n    \n    # Calculate the median\n    median = numbers.median()\n    \n    return median","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Zachary', 'Frank', 'Eduardo', 'Javier', 'Charlotte'],\n    'Number of tennis balls': [72, 82, 87, 74, 79]\n})\n# Call the tool to solve the problem\nprint(calculate_median(df))","table":"Name: Hitting tennis balls\nUnit: None\nContent:\nName | Number of tennis balls\nZachary | 72\nFrank | 82\nEduardo | 87\nJavier | 74\nCharlotte | 79"}
{"level":7,"answer":4.0,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its price per unit and the quantity purchased.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information for different items.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item purchased.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price per unit of the item\n        price_per_unit = item_df['Unit'].values[0]\n        \n        # Calculate the total cost\n        total_cost = price_per_unit * quantity\n        \n        return total_cost\n    else:\n        return 0.0\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Kalamata olives', 'Spanish olives', 'Greek olives', 'pimento olives', 'green olives'],\n    'Unit': [7, 4, 3, 6, 5]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'Spanish olives', 1))","question":"Brenda went to the store and bought 1 pound of Spanish olives. How much did she spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on its price per unit and the quantity purchased.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information for different items.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item purchased.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if not item_df.empty:\n        # Get the price per unit of the item\n        price_per_unit = item_df['Unit'].values[0]\n        \n        # Calculate the total cost\n        total_cost = price_per_unit * quantity\n        \n        return total_cost\n    else:\n        return 0.0","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Kalamata olives', 'Spanish olives', 'Greek olives', 'pimento olives', 'green olives'],\n    'Unit': [7, 4, 3, 6, 5]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, 'Spanish olives', 1))","table":"Name: None\nUnit: $\nContent:\nKalamata olives | $7\/pound\nSpanish olives | $4\/pound\nGreek olives | $3\/pound\npimento olives | $6\/pound\ngreen olives | $5\/pound"}
{"level":6,"answer":10.4,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on the quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information for each item.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price per pound for the item\n    price_per_pound = item_df['Unit'].values[0]\n    \n    # Calculate the total cost based on the quantity\n    total_cost = price_per_pound * quantity\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['salami', 'liverwurst', 'linguica', 'pepperoni', 'chorizo', 'Italian sausage', 'bratwurst'],\n    'Unit': [2, 4, 4, 5, 2, 6, 6]\n})\n\n# Call the tool to solve the problem\nitem = 'liverwurst'\nquantity = 2.6\ntotal_cost = calculate_total_cost(df, item, quantity)\n\n# Print out the answer\nprint(total_cost)","question":"Reba buys 2.6 pounds of liverwurst. How much does she spend?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, item, quantity):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and calculates the total cost of a specific item based on the quantity.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the price information for each item.\n    item (str): The name of the item.\n    quantity (float): The quantity of the item.\n    Returns:\n    float: The total cost of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = df[df['Name'] == item]\n    \n    # Check if the item exists in the DataFrame\n    if item_df.empty:\n        return 0.0\n    \n    # Get the price per pound for the item\n    price_per_pound = item_df['Unit'].values[0]\n    \n    # Calculate the total cost based on the quantity\n    total_cost = price_per_pound * quantity\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['salami', 'liverwurst', 'linguica', 'pepperoni', 'chorizo', 'Italian sausage', 'bratwurst'],\n    'Unit': [2, 4, 4, 5, 2, 6, 6]\n})\n\n# Call the tool to solve the problem\nitem = 'liverwurst'\nquantity = 2.6\ntotal_cost = calculate_total_cost(df, item, quantity)\n\n# Print out the answer\nprint(total_cost)","table":"Name: None\nUnit: $\nContent:\nsalami | $2 per pound\nliverwurst | $4 per pound\nlinguica | $4 per pound\npepperoni | $5 per pound\nchorizo | $2 per pound\nItalian sausage | $6 per pound\nbratwurst | $6 per pound"}
{"level":2,"answer":10.0,"prediction":"import pandas as pd\n\ndef calculate_total_books(df, num_piles):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of books per pile and the number of piles, and returns the total number of books.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of books per pile with columns 'Number of piles' and 'Number of books'.\n    num_piles (int): The number of piles to consider.\n    Returns:\n    int: The total number of books in the given number of piles.\n    \"\"\"\n    # Filter the DataFrame for the specified number of piles\n    filtered_df = df[df['Number of piles'] <= num_piles]\n    \n    # Calculate the total number of books\n    total_books = filtered_df['Number of books'].sum()\n    \n    return total_books\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of piles': [1, 2, 3, 4, 5],\n    'Number of books': [2, 4, 6, 8, None]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_books(df, 5))","question":"Each pile has 2 books. How many books are in 5 piles?","prediction_code":"import pandas as pd\n\ndef calculate_total_books(df, num_piles):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of books per pile and the number of piles, and returns the total number of books.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of books per pile with columns 'Number of piles' and 'Number of books'.\n    num_piles (int): The number of piles to consider.\n    Returns:\n    int: The total number of books in the given number of piles.\n    \"\"\"\n    # Filter the DataFrame for the specified number of piles\n    filtered_df = df[df['Number of piles'] <= num_piles]\n    \n    # Calculate the total number of books\n    total_books = filtered_df['Number of books'].sum()\n    \n    return total_books","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of piles': [1, 2, 3, 4, 5],\n    'Number of books': [2, 4, 6, 8, None]\n})\n\n# Call the tool to solve the problem\nprint(calculate_total_books(df, 5))","table":"Name: None\nUnit: None\nContent:\nNumber of piles | Number of books\n1 | 2\n2 | 4\n3 | 6\n4 | 8\n5 | ?"}
{"level":5,"answer":6.0,"prediction":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of stop signs per street and returns the mode of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the street names and the number of stop signs on each street.\n    The dataframe should contain \"Street\" and \"Number of stop signs\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column with the number of stop signs\n    stop_signs = df['Number of stop signs']\n    \n    # Calculate the mode using the mode() function from pandas\n    mode = stop_signs.mode().values[0]\n    \n    return mode\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Street': ['Watson Street', 'Peabody Street', 'Marshall Street', 'Jackson Street', 'Irving Street'],\n    'Number of stop signs': [6, 11, 6, 11, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","question":"The town council reported on how many stop signs there are on each street. What is the mode of the numbers?","prediction_code":"import pandas as pd\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame of stop signs per street and returns the mode of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame object containing the street names and the number of stop signs on each street.\n    The dataframe should contain \"Street\" and \"Number of stop signs\" columns.\n    Returns:\n    int: The mode of the numbers.\n    \"\"\"\n    # Get the column with the number of stop signs\n    stop_signs = df['Number of stop signs']\n    \n    # Calculate the mode using the mode() function from pandas\n    mode = stop_signs.mode().values[0]\n    \n    return mode","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Street': ['Watson Street', 'Peabody Street', 'Marshall Street', 'Jackson Street', 'Irving Street'],\n    'Number of stop signs': [6, 11, 6, 11, 6]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))","table":"Name: Stop signs\nUnit: None\nContent:\nStreet | Number of stop signs\nWatson Street | 6\nPeabody Street | 11\nMarshall Street | 6\nJackson Street | 11\nIrving Street | 6"}
{"level":8,"answer":1104.0,"prediction":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame of prices for different items and returns the price difference between two specific items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the prices of different items.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the specific items\n    item1_df = df[df['Name'] == item1]\n    item2_df = df[df['Name'] == item2]\n    \n    # Get the prices for the specific items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['energy-saving desktop', 'wide-screen desktop', 'wide-screen laptop', 'bright blue laptop', 'high-tech desktop'],\n    'Price': [9977.00, 8873.00, 3017.00, 5387.00, 4647.00]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'energy-saving desktop', 'wide-screen desktop'))","question":"How much more does an energy-saving desktop cost than a wide-screen desktop?","prediction_code":"import pandas as pd\n\ndef calculate_price_difference(df, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame of prices for different items and returns the price difference between two specific items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the prices of different items.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    Returns:\n    float: The price difference between the two items.\n    \"\"\"\n    # Filter the DataFrame for the specific items\n    item1_df = df[df['Name'] == item1]\n    item2_df = df[df['Name'] == item2]\n    \n    # Get the prices for the specific items\n    item1_price = item1_df['Price'].values[0]\n    item2_price = item2_df['Price'].values[0]\n    \n    # Calculate the price difference\n    price_difference = item1_price - item2_price\n    \n    return price_difference","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['energy-saving desktop', 'wide-screen desktop', 'wide-screen laptop', 'bright blue laptop', 'high-tech desktop'],\n    'Price': [9977.00, 8873.00, 3017.00, 5387.00, 4647.00]\n})\n# Call the tool to solve the problem\nprint(calculate_price_difference(df, 'energy-saving desktop', 'wide-screen desktop'))","table":"Name: None\nUnit: $\nContent:\nenergy-saving desktop | $9,977.00\nwide-screen desktop | $8,873.00\nwide-screen laptop | $3,017.00\nbright blue laptop | $5,387.00\nhigh-tech desktop | $4,647.00"}
{"level":3,"answer":0.12,"prediction":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['piece of bubble wrap', 'flag stamp', 'rose stamp', 'butterfly stamp', 'airplane stamp'],\n    'Price': [0.05, 0.08, 0.04, 0.03, 0.06]\n})\n\n# Define the items to be purchased\nitems = ['flag stamp', 'rose stamp']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","question":"How much money does Sarah need to buy a flag stamp and a rose stamp?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a price table and a list of items, and returns the total cost of the items.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to be purchased.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_df = df[df['Item'] == item]\n        if not item_df.empty:\n            item_price = item_df['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['piece of bubble wrap', 'flag stamp', 'rose stamp', 'butterfly stamp', 'airplane stamp'],\n    'Price': [0.05, 0.08, 0.04, 0.03, 0.06]\n})\n\n# Define the items to be purchased\nitems = ['flag stamp', 'rose stamp']\n\n# Call the tool to solve the problem\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\npiece of bubble wrap | $0.05\nflag stamp | $0.08\nrose stamp | $0.04\nbutterfly stamp | $0.03\nairplane stamp | $0.06"}
{"level":7,"answer":2.0,"prediction":"import pandas as pd\n\ndef count_buildings_with_56_floors(df):\n    \"\"\"\n    This function takes in a pandas dataframe of floors per building, and returns the number of buildings that have at least 56 floors.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of floors per building.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of buildings that have at least 56 floors.\n    \"\"\"\n    # prepare a list to calculate the number of floors in each building\n    floors = []\n    # calculate the total number of floors in each building\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            floors.append(stem * 10 + leaf[j])\n    # filter the buildings where the total number of floors is greater than or equal to 56\n    filtered = [floor for floor in floors if floor >= 56]\n    # count the number of buildings\n    num_buildings = len(filtered)\n    return num_buildings\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7],\n    'Leaf': [[2], [0, 3], [], [0, 6], [], [0]]\n})\n# Call the tool to solve the problem\nprint(count_buildings_with_56_floors(df))","question":"A city planner counted the number of floors per building in the downtown area. How many buildings have at least 56 floors?","prediction_code":"import pandas as pd\n\ndef count_buildings_with_56_floors(df):\n    \"\"\"\n    This function takes in a pandas dataframe of floors per building, and returns the number of buildings that have at least 56 floors.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of floors per building.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of buildings that have at least 56 floors.\n    \"\"\"\n    # prepare a list to calculate the number of floors in each building\n    floors = []\n    # calculate the total number of floors in each building\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            floors.append(stem * 10 + leaf[j])\n    # filter the buildings where the total number of floors is greater than or equal to 56\n    filtered = [floor for floor in floors if floor >= 56]\n    # count the number of buildings\n    num_buildings = len(filtered)\n    return num_buildings","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7],\n    'Leaf': [[2], [0, 3], [], [0, 6], [], [0]]\n})\n# Call the tool to solve the problem\nprint(count_buildings_with_56_floors(df))","table":"Name: Floors per building\nUnit: buildings\nContent:\nStem | Leaf \n2 | 2\n3 | 0, 3\n4 | \n5 | 0, 6\n6 | \n7 | 0"}
{"level":4,"answer":0.07,"prediction":"import pandas as pd\n\ndef calculate_total_cost(item_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    item_df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_row = item_df[item_df['Item'] == item]\n        if not item_row.empty:\n            item_price = item_row['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost\n########################################\n# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['bright yellow highlighter', 'thin green highlighter', 'green colored pencil', 'mechanical pencil', 'small box of paper clips', 'orange marker'],\n    'Price': [0.01, 0.06, 0.02, 0.06, 0.06, 0.02]\n})\n\n# Call the tool to solve the problem\nitems = ['mechanical pencil', 'bright yellow highlighter']\nprint(calculate_total_cost(df, items))","question":"How much money does Connor need to buy a mechanical pencil and a bright yellow highlighter?","prediction_code":"import pandas as pd\n\ndef calculate_total_cost(item_df, items):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to calculate the total cost.\n    Args:\n    item_df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.\n    items (list): A list of items to calculate the total cost.\n    Returns:\n    float: The total cost of the items.\n    \"\"\"\n    # Initialize the total cost\n    total_cost = 0.0\n    \n    # Iterate through the items and calculate the cost for each item\n    for item in items:\n        # Filter the DataFrame for the specific item\n        item_row = item_df[item_df['Item'] == item]\n        if not item_row.empty:\n            item_price = item_row['Price'].values[0]\n            total_cost += item_price\n    \n    return total_cost","prediction_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Item': ['bright yellow highlighter', 'thin green highlighter', 'green colored pencil', 'mechanical pencil', 'small box of paper clips', 'orange marker'],\n    'Price': [0.01, 0.06, 0.02, 0.06, 0.06, 0.02]\n})\n\n# Call the tool to solve the problem\nitems = ['mechanical pencil', 'bright yellow highlighter']\nprint(calculate_total_cost(df, items))","table":"Name: None\nUnit: $\nContent:\nbright yellow highlighter | $0.01\nthin green highlighter | $0.06\ngreen colored pencil | $0.02\nmechanical pencil | $0.06\nsmall box of paper clips | $0.06\norange marker | $0.02"}
