question,answer,table,level,tool_id,code,api_call,tool,tool_call
Some companies compared how many phone calls they made. How many more phone calls did Tad's Coffee Company make than Northside Cycles?,2933.0,"Company | Number of phone calls
Tad's Coffee Company | 7,202
Northside Cycles | 4,269
Critical Insight Consulting | 2,332
Reardon Corporation | 8,620
Melbourne Medical Devices | 1,293",3,3764,"import pandas as pd

def calculate_difference(df, company1, company2):
    """"""
    This function takes in a pandas DataFrame representing a table of companies and their number of phone calls, and two company names. It returns the difference in the number of phone calls between the two companies.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing company names and their number of phone calls with columns 'Company' and 'Number of phone calls'.
    company1 (str): The name of the first company.
    company2 (str): The name of the second company.
    Returns:
    int: The difference in the number of phone calls between the two companies.
    """"""
    # Filter the DataFrame for the specific companies
    company1_df = df[df['Company'] == company1]
    company2_df = df[df['Company'] == company2]
    
    # Get the number of phone calls for each company
    company1_calls = company1_df['Number of phone calls'].values[0]
    company2_calls = company2_df['Number of phone calls'].values[0]
    
    # Calculate and return the difference
    return abs(company1_calls - company2_calls)","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Company': [""Tad's Coffee Company"", 'Northside Cycles', 'Critical Insight Consulting', 'Reardon Corporation', 'Melbourne Medical Devices'],
    'Number of phone calls': [7202, 4269, 2332, 8620, 1293]
})
# Call the tool to solve the problem
difference = calculate_difference(df, ""Tad's Coffee Company"", 'Northside Cycles')
print(difference)","def calculate_absolute_difference_between_two_entities(df, entity_col, value_col, entity1, entity2):
    """"""
    This function takes in a pandas DataFrame representing a table of entities and their values, and two entity names. It returns the absolute difference in the values between the two entities.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing entity names and their values.
    entity_col (str): The column name for the entity names.
    value_col (str): The column name for the entity values.
    entity1 (str): The name of the first entity.
    entity2 (str): The name of the second entity.
    
    Returns:
    int: The absolute difference in the values between the two entities.
    """"""
    # Filter the DataFrame for the specific entities
    entity1_df = df[df[entity_col] == entity1]
    entity2_df = df[df[entity_col] == entity2]
    
    # Get the value for each entity
    entity1_value = entity1_df[value_col].values[0]
    entity2_value = entity2_df[value_col].values[0]
    
    # Calculate and return the absolute difference
    return abs(entity1_value - entity2_value)","df = pd.DataFrame({
    'Company': [""Tad's Coffee Company"", 'Northside Cycles', 'Critical Insight Consulting', 'Reardon Corporation', 'Melbourne Medical Devices'],
    'Number of phone calls': [7202, 4269, 2332, 8620, 1293]
})
print(calculate_absolute_difference_between_two_entities(df, ""Company"", ""Number of phone calls"", ""Tad's Coffee Company"", 'Northside Cycles'))"
"Roger is cleaning his workbench and organizing his tools. He uses a frequency chart to keep track of the different types of tools he has. If 1/2 of Roger's wrenches are metric, how many metric wrenches does Roger have?",9.0,"Type | Frequency
hammer | 4
pliers | 7
screwdriver | 14
wrench | 18",5,13263,"import pandas as pd

def calculate_metric_wrenches(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency chart of tools, and returns the number of metric wrenches.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing types of tools and their frequencies with columns 'Type' and 'Frequency'.
    Returns:
    int: The number of metric wrenches.
    """"""
    # Filter the DataFrame for wrenches
    wrench_df = df[df['Type'] == 'wrench']
    if not wrench_df.empty:
        # Calculate the number of metric wrenches
        metric_wrenches = wrench_df['Frequency'].values[0] // 2
        return metric_wrenches
    else:
        return 0","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Type': ['hammer', 'pliers', 'screwdriver', 'wrench'],
    'Frequency': [4, 7, 14, 18]
})
# Call the tool to solve the problem
print(calculate_metric_wrenches(df))","def calculate_items_of_type_with_ratio(data_frame, item_col, frequency_col, item_type, item_ratio):
    """"""
    This function takes in a pandas DataFrame representing a frequency chart of items, a specific item type, and a ratio, and returns the number of items of the specific type based on the given ratio.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing types of items and their frequencies.
    item_col (str): The column name for the item types.
    frequency_col (str): The column name for the item frequencies.
    item_type (str): The specific item type to filter and calculate.
    item_ratio (float): The ratio to calculate the number of items of the specific type.
    
    Returns:
    int: The number of items of the specific type based on the given ratio.
    """"""
    # Filter the DataFrame for the specific item type
    item_df = data_frame[data_frame[item_col] == item_type]
    if not item_df.empty:
        # Calculate the number of items based on the given ratio
        items = int(item_df[frequency_col].values[0] * item_ratio)
        return items
    else:
        return 0","data = {
    'Type': ['hammer', 'pliers', 'screwdriver', 'wrench'],
    'Frequency': [4, 7, 14, 18]
}

df = pd.DataFrame(data)
print(calculate_items_of_type_with_ratio(data_frame=df, item_col=""Type"", frequency_col=""Frequency"", item_type=""wrench"", item_ratio=0.5))"
"For a science fair project, Deb tracked the temperature each day. What is the lowest temperature?",10.0,"Stem | Leaf 
1 | 0, 1, 2, 2, 3, 3, 3
2 | 1, 5, 6, 8
3 | 3, 3, 4, 4, 4, 5
4 | 3",6,3081,"import pandas as pd
def find_lowest_temperature(df):
    """"""
    This function takes in a pandas dataframe of temperatures, and returns the lowest temperature.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the temperatures.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The lowest temperature.
    """"""
    # prepare a list to calculate temperature in each day
    temperatures = []
    # calculate the temperature in each day
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            temperatures.append(stem * 10 + leaf[j])
    # find the lowest temperature
    lowest_temperature = min(temperatures)
    return lowest_temperature","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [1, 2, 3, 4],
    'Leaf': [[0, 1, 2, 2, 3, 3, 3], [1, 5, 6, 8], [3, 3, 4, 4, 4, 5], [3]]
})
# Call the tool to solve the problem
print(find_lowest_temperature(df))","def find_lowest_value_in_stem_leaf(data_frame, stem_col, leaf_col):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of items, and returns the lowest value among the items.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    
    Returns:
    int: The lowest value among the items.
    """"""
    # Initialize the list to calculate items in each group
    items = []
    
    # Calculate the value of items in each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Find the lowest value among the items
    lowest_value = min(items)
    
    return lowest_value","data = {
    ""Stem"": [1, 2, 3, 4],
    ""Leaf"": [[0, 1, 2, 2, 3, 3, 3], [1, 5, 6, 8], [3, 3, 4, 4, 4, 5], [3]]
}

df = pd.DataFrame(data)
print(find_lowest_value_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf""))"
Arctic Fox Ski Village has trails on the north and south sides of the mountain. The frequency chart shows the number of trails of each difficulty on the south side. There are another 21 trails on the north side of the mountain. How many ski trails are there on both sides of the mountain combined?,47.0,"Difficulty | Frequency
easy | 7
intermediate | 8
expert | 11",5,16075,"import pandas as pd

def calculate_total_trails(df, north_trails):
    """"""
    This function takes in a pandas DataFrame representing a frequency chart of trails and the number of trails on the north side, and returns the total number of trails on both sides.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing trail difficulties and their frequencies with columns 'Difficulty' and 'Frequency'.
    north_trails (int): The number of trails on the north side.
    Returns:
    int: The total number of trails on both sides.
    """"""
    # Calculate the total number of trails on the south side
    south_trails = df['Frequency'].sum()
    
    # Calculate the total number of trails on both sides
    total_trails = south_trails + north_trails
    
    return total_trails","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Difficulty': ['easy', 'intermediate', 'expert'],
    'Frequency': [7, 8, 11]
})

# Number of trails on the north side
north_trails = 21

# Call the tool to solve the problem
total_trails = calculate_total_trails(df, north_trails)

# Print the answer
print(total_trails)","def calculate_total_from_frequency_and_additional_count(df, frequency_col, additional_count):
    """"""
    This function takes in a pandas DataFrame representing a frequency table and an additional count of items, and returns the total count of items.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing item categories and their frequencies.
    frequency_col (str): The column name for the frequencies.
    additional_count (int): The additional count of items.
    
    Returns:
    int: The total count of items.
    """"""
    # Calculate the total count from the frequency table
    frequency_total = df[frequency_col].sum()
    
    # Calculate the total count of items
    total_count = frequency_total + additional_count
    
    return total_count","df = pd.DataFrame({
    'Difficulty': ['easy', 'intermediate', 'expert'],
    'Frequency': [7, 8, 11]
})

additional_count = 21

print(calculate_total_from_frequency_and_additional_count(df, ""Frequency"", additional_count))"
"Mr. Swift, the band director, counted the number of instruments played by each member of the band. How many more girls than boys play the saxophone?",6.0,"Instrument | Boys | Girls
Saxophone | 10 | 16
Drums | 10 | 20
Clarinet | 14 | 20
Flute | 5 | 7
Trumpet | 16 | 11",5,16182,"import pandas as pd

def calculate_difference_in_instrument(df, instrument):
    """"""
    This function takes in a pandas DataFrame representing the number of instruments played by boys and girls, and returns the difference in the number of girls and boys playing the specified instrument.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of instruments played by boys and girls with columns 'Instrument', 'Boys', and 'Girls'.
    instrument (str): The name of the instrument for which the difference in the number of players is to be calculated.
    Returns:
    int: The difference in the number of girls and boys playing the specified instrument.
    """"""
    # Filter the DataFrame for the specific instrument
    instrument_df = df[df['Instrument'] == instrument]
    
    if not instrument_df.empty:
        boys = instrument_df['Boys'].values[0]
        girls = instrument_df['Girls'].values[0]
        difference = girls - boys
        return difference
    else:
        return 0","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Instrument': ['Saxophone', 'Drums', 'Clarinet', 'Flute', 'Trumpet'],
    'Boys': [10, 10, 14, 5, 16],
    'Girls': [16, 20, 20, 7, 11]
})
# Call the tool to solve the problem
difference = calculate_difference_in_instrument(df, 'Saxophone')
print(difference)","def calculate_difference_between_groups_for_item(data_frame, item_col, group1_col, group2_col, target_item):
    """"""
    This function takes in a pandas DataFrame representing a table with items and two groups, and returns the difference in the number of items between the two groups for a specific item.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing items and their quantities for two groups with columns specified by item_col, group1_col, and group2_col.
    item_col (str): The column name for the item names.
    group1_col (str): The column name for the first group's quantities.
    group2_col (str): The column name for the second group's quantities.
    target_item (str): The name of the item for which the difference in quantities is to be calculated.
    
    Returns:
    int: The difference in the number of items between the two groups for the specified item.
    """"""
    # Filter the DataFrame for the specific item
    item_df = data_frame[data_frame[item_col] == target_item]
    
    if not item_df.empty:
        group1_quantity = item_df[group1_col].values[0]
        group2_quantity = item_df[group2_col].values[0]
        difference = group2_quantity - group1_quantity
        return difference
    else:
        return 0","data = {
    'Instrument': ['Saxophone', 'Drums', 'Clarinet', 'Flute', 'Trumpet'],
    'Boys': [10, 10, 14, 5, 16],
    'Girls': [16, 20, 20, 7, 11]
}

df = pd.DataFrame(data)
print(calculate_difference_between_groups_for_item(data_frame=df, item_col=""Instrument"", group1_col=""Boys"", group2_col=""Girls"", target_item=""Saxophone""))"
Wyatt recalled how many goals he had made in soccer practice each day. What is the mode of the numbers?,6.0,"Day | Number of goals
Friday | 10
Saturday | 6
Sunday | 2
Monday | 2
Tuesday | 10
Wednesday | 6
Thursday | 6",5,3147,"import pandas as pd
from collections import Counter

def calculate_mode(df):
    """"""
    This function takes in a pandas DataFrame representing a table of days and number of goals, and returns the mode of the number of goals.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing days and number of goals with columns 'Day' and 'Number of goals'.
    Returns:
    int: The mode of the number of goals.
    """"""
    # Extract the 'Number of goals' column
    goals = df['Number of goals']
    
    # Calculate the frequency of each number of goals
    freq_dict = Counter(goals)
    
    # Find the number of goals with the highest frequency
    mode = max(freq_dict.keys(), key=(lambda k: freq_dict[k]))
    
    return mode","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],
    'Number of goals': [10, 6, 2, 2, 10, 6, 6]
})
# Call the tool to solve the problem
mode = calculate_mode(df)
print(mode)","def calculate_mode_of_column(data_frame, column_name):
    """"""
    This function takes in a pandas DataFrame and a column name, and returns the mode of the numbers in the specified column.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the data.
    column_name (str): The name of the column for which to calculate the mode.
    
    Returns:
    int: The mode of the numbers in the specified column.
    """"""
    # Extract the specified column
    column_data = data_frame[column_name]
    
    # Calculate the frequency of each number
    freq_dict = Counter(column_data)
    
    # Find the number with the highest frequency
    mode = max(freq_dict.keys(), key=(lambda k: freq_dict[k]))
    
    return mode","df = pd.DataFrame({
    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],
    'Number of goals': [10, 6, 2, 2, 10, 6, 6]
})
print(calculate_mode_of_column(data_frame=df, column_name='Number of goals'))"
"Andrew, a fantasy football fan, carefully studied the number of touchdowns completed by his favorite players last season. How many players scored more than 1 touchdown last season?",54.0,"Touchdowns scored | Frequency
0 | 13
1 | 1
2 | 7
3 | 0
4 | 19
5 | 12
6 | 16",7,15484,"import pandas as pd

def count_players_with_more_than_one_touchdown(df):
    """"""
    This function takes in a pandas DataFrame representing a table of touchdowns scored and their frequencies, and returns the number of players who scored more than 1 touchdown.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of touchdowns scored and their frequencies with columns 'Touchdowns scored' and 'Frequency'.
    Returns:
    int: The number of players who scored more than 1 touchdown.
    """"""
    # Filter the DataFrame for players who scored more than 1 touchdown
    more_than_one_touchdown_df = df[df['Touchdowns scored'] > 1]
    
    # Calculate the total number of players who scored more than 1 touchdown
    num_players = more_than_one_touchdown_df['Frequency'].sum()
    
    return num_players","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Touchdowns scored': [0, 1, 2, 3, 4, 5, 6],
    'Frequency': [13, 1, 7, 0, 19, 12, 16]
})
# Call the tool to solve the problem
print(count_players_with_more_than_one_touchdown(df))","def count_items_with_value_above_threshold(data_frame, value_col, frequency_col, value_threshold):
    """"""
    This function takes in a pandas DataFrame representing a table of item values and their frequencies, and returns the number of items with values greater than the specified threshold.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing item values and their frequencies.
    value_col (str): The column name for the item values.
    frequency_col (str): The column name for the item frequencies.
    value_threshold (int): The threshold value for filtering items.
    
    Returns:
    int: The number of items with values greater than the threshold.
    """"""
    # Filter the DataFrame for items with values greater than the threshold
    above_threshold_df = data_frame[data_frame[value_col] > value_threshold]
    
    # Calculate the total number of items with values greater than the threshold
    num_items = above_threshold_df[frequency_col].sum()
    
    return num_items","data = {
    'Touchdowns scored': [0, 1, 2, 3, 4, 5, 6],
    'Frequency': [13, 1, 7, 0, 19, 12, 16]
}

df = pd.DataFrame(data)
print(count_items_with_value_above_threshold(data_frame=df, value_col=""Touchdowns scored"", frequency_col=""Frequency"", value_threshold=1))"
A fashion magazine poll asks how many winter hats each reader owns. How many readers have exactly 3 winter hats?,17.0,"Number of winter hats | Frequency
0 | 6
1 | 20
2 | 12
3 | 17",8,15461,"import pandas as pd

def count_readers_with_3_hats(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of winter hats owned by readers, and returns the number of readers who own exactly 3 winter hats.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of winter hats and their frequencies with columns 'Number of winter hats' and 'Frequency'.
    Returns:
    int: The number of readers who own exactly 3 winter hats.
    """"""
    # Filter the DataFrame for the row where the number of winter hats is 3
    row = df[df['Number of winter hats'] == 3]
    
    # If the row exists, return the frequency. Otherwise, return 0.
    if not row.empty:
        return row['Frequency'].values[0]
    else:
        return 0","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of winter hats': [0, 1, 2, 3],
    'Frequency': [6, 20, 12, 17]
})
# Call the tool to solve the problem
print(count_readers_with_3_hats(df))","def get_frequency_of_specific_value(df, value_col, frequency_col, specific_value):
    """"""
    This function takes in a pandas DataFrame representing a frequency table, a specific value, and returns the frequency of the specific value in the table.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing values and their frequencies.
    value_col (str): The column name for the values.
    frequency_col (str): The column name for the frequencies.
    specific_value (int): The specific value to retrieve its frequency.
    
    Returns:
    int: The frequency of the specific value. If the value does not exist in the table, return 0.
    """"""
    # Filter the DataFrame for the row where the value is the specific value
    row = df[df[value_col] == specific_value]
    
    # If the row exists, return the frequency. Otherwise, return 0.
    if not row.empty:
        return row[frequency_col].values[0]
    else:
        return 0","df = pd.DataFrame({
    'Number of winter hats': [0, 1, 2, 3],
    'Frequency': [6, 20, 12, 17]
})
print(get_frequency_of_specific_value(df, 'Number of winter hats', 'Frequency', 3))"
A fashion magazine poll asks how many winter hats each reader owns. How many readers have exactly 3 winter hats?,10.0,"Number of winter hats | Frequency
0 | 2
1 | 15
2 | 6
3 | 10
4 | 7
5 | 11
6 | 3",8,10037,"import pandas as pd

def count_readers_with_3_winter_hats(df):
    """"""
    This function takes in a pandas DataFrame representing a table of the number of winter hats and their frequencies, and returns the number of readers who have exactly 3 winter hats.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of winter hats and their frequencies with columns 'Number of winter hats' and 'Frequency'.
    Returns:
    int: The number of readers who have exactly 3 winter hats.
    """"""
    # Filter the DataFrame for the specific number of winter hats
    hat_df = df[df['Number of winter hats'] == 3]
    
    # Get the frequency of readers with 3 winter hats
    if not hat_df.empty:
        frequency = hat_df['Frequency'].values[0]
    else:
        frequency = 0
    
    return frequency","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of winter hats': [0, 1, 2, 3, 4, 5, 6],
    'Frequency': [2, 15, 6, 10, 7, 11, 3]
})
# Call the tool to solve the problem
print(count_readers_with_3_winter_hats(df))","def count_frequency_of_specific_value(df, value_col, frequency_col, specific_value):
    """"""
    This function takes in a pandas DataFrame representing a frequency table, a specific value, and returns the frequency of the specific value in the table.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing values and their frequencies.
    value_col (str): The column name for the values.
    frequency_col (str): The column name for the frequencies.
    specific_value (int): The specific value to count the frequency of.
    
    Returns:
    int: The frequency of the specific value.
    """"""
    # Filter the DataFrame for the specific value
    value_df = df[df[value_col] == specific_value]
    
    # Get the frequency of the specific value
    if not value_df.empty:
        frequency = value_df[frequency_col].values[0]
    else:
        frequency = 0
    
    return frequency","df = pd.DataFrame({
    'Number of winter hats': [0, 1, 2, 3, 4, 5, 6],
    'Frequency': [2, 15, 6, 10, 7, 11, 3]
})
print(count_frequency_of_specific_value(df, 'Number of winter hats', 'Frequency', 3))"
"While working as a summer camp counselor, Simon monitored how many candy necklaces each child made. How many children are there in all?",15.0,"Candy necklaces made | Frequency
0 | 11
1 | 3
2 | 0
3 | 1",8,3610,"import pandas as pd

def calculate_total_children(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of candy necklaces made by children, and returns the total number of children.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of candy necklaces made and the frequency with columns 'Candy necklaces made' and 'Frequency'.
    Returns:
    int: The total number of children.
    """"""
    # Multiply the number of candy necklaces made by the frequency and sum up the results to get the total number of children
    total_children = df['Frequency'].sum()
    
    return total_children","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Candy necklaces made': [0, 1, 2, 3],
    'Frequency': [11, 3, 0, 1]
})
# Call the tool to solve the problem
total_children = calculate_total_children(df)
print(total_children)","def calculate_total_count_from_frequency_table(data_frame, frequency_col):
    """"""
    This function takes in a pandas DataFrame representing a frequency table and returns the total count of entities.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the frequency table.
    frequency_col (str): The column name for the frequencies.
    
    Returns:
    int: The total count of entities.
    """"""
    # Sum up the frequencies to get the total count of entities
    total_count = data_frame[frequency_col].sum()
    
    return total_count","df = pd.DataFrame({
    'Candy necklaces made': [0, 1, 2, 3],
    'Frequency': [11, 3, 0, 1]
})
print(calculate_total_count_from_frequency_table(data_frame=df, frequency_col='Frequency'))"
"At a swim meet, Grayson noted the size of various swim teams. How many teams have at least 37 swimmers?",13.0,"Stem | Leaf 
2 | 0, 2, 2, 4, 6, 7, 7
3 | 5, 6
4 | 3
5 | 2, 3
6 | 6, 8
7 | 2, 3, 9
8 | 0, 1, 6, 9
9 | 0",7,11914,"import pandas as pd
def count_teams_with_37_swimmers(df):
    """"""
    This function takes in a pandas dataframe of swim teams, and returns the number of teams that have at least 37 swimmers.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the size of various swim teams.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of teams that have at least 37 swimmers.
    """"""
    # prepare a list to calculate swimmers in each team
    swimmers = []
    # calculate the total number of swimmers in each team
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            swimmers.append(stem * 10 + leaf[j])
    # filter the teams where the total number of swimmers is greater than or equal to 37
    filtered = [team for team in swimmers if team >= 37]
    # count the number of rows
    num_teams = len(filtered)
    return num_teams","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],
    'Leaf': [[0, 2, 2, 4, 6, 7, 7], [5, 6], [3], [2, 3], [6, 8], [2, 3, 9], [0, 1, 6, 9], [0]]
})
# Call the tool to solve the problem
print(count_teams_with_37_swimmers(df))","def count_groups_above_threshold_in_stem_leaf(data_frame, stem_col, leaf_col, group_threshold):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of groups and a threshold value, and returns the number of groups that have values greater than or equal to the threshold.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    group_threshold (int): The threshold value for filtering groups.
    
    Returns:
    int: The number of groups with values greater than or equal to the threshold.
    """"""
    # Initialize the list to calculate members in each group
    members = []
    
    # Calculate the total value of members in each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            members.append(stem * 10 + leaf[j])
    
    # Filter the groups where the total value is greater than or equal to the threshold
    filtered = [group for group in members if group >= group_threshold]
    
    # Count the number of groups
    num_groups = len(filtered)
    
    return num_groups","data = {
    ""Stem"": [2, 3, 4, 5, 6, 7, 8, 9],
    ""Leaf"": [[0, 2, 2, 4, 6, 7, 7], [5, 6], [3], [2, 3], [6, 8], [2, 3, 9], [0, 1, 6, 9], [0]]
}

df = pd.DataFrame(data)
print(count_groups_above_threshold_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf"", group_threshold=37))"
Manuel measured the length of each scarf in the clothing store where he works. How many scarves are exactly 90 centimeters?,3.0,"Stem | Leaf 
6 | 9
7 | 2, 5, 9, 9
8 | 2
9 | 0, 0, 0",4,11772,"import pandas as pd
def count_scarves_of_length_90(df):
    """"""
    This function takes in a pandas dataframe of scarf lengths, and returns the number of scarves that are exactly 90 centimeters.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the lengths of scarves.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of scarves that are exactly 90 centimeters.
    """"""
    # prepare a list to calculate length of each scarf
    lengths = []
    # calculate the total length of each scarf
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            lengths.append(stem * 10 + leaf[j])
    # filter the scarves where the length is exactly 90 centimeters
    filtered = [length for length in lengths if length == 90]
    # count the number of rows
    num_scarves = len(filtered)
    return num_scarves","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [6, 7, 8, 9],
    'Leaf': [[9], [2, 5, 9, 9], [2], [0, 0, 0]]
})
# Call the tool to solve the problem
print(count_scarves_of_length_90(df))","def count_items_with_specific_value_in_stem_leaf(data_frame, stem_col, leaf_col, specific_value):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of items and a specific value, and returns the number of items that have the specific value.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    specific_value (int): The specific value for filtering items.
    
    Returns:
    int: The number of items with the specific value.
    """"""
    # Initialize the list to calculate items in each group
    items = []
    
    # Calculate the total value of items in each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Filter the items where the total value is equal to the specific value
    filtered = [item for item in items if item == specific_value]
    
    # Count the number of items
    num_items = len(filtered)
    
    return num_items","data = {
    ""Stem"": [6, 7, 8, 9],
    ""Leaf"": [[9], [2, 5, 9, 9], [2], [0, 0, 0]]
}

df = pd.DataFrame(data)
print(count_items_with_specific_value_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf"", specific_value=90))"
Ashley's family went on a road trip and counted the number of cars they saw each day. How many cars in total did they see on Saturday and Sunday?,687.0,"Day | Number of cars
Saturday | 339
Sunday | 348
Monday | 232
Tuesday | 282",3,3816,"import pandas as pd

def calculate_total_cars(df, days):
    """"""
    This function takes in a pandas DataFrame representing a table of the number of cars seen each day and a list of days, and returns the total number of cars seen on those days.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing days and the number of cars seen with columns 'Day' and 'Number of cars'.
    days (list): A list of days to calculate the total number of cars seen.
    Returns:
    int: The total number of cars seen on the specified days.
    """"""
    # Filter the DataFrame for the specified days
    filtered_df = df[df['Day'].isin(days)]
    
    # Calculate the total number of cars seen
    total_cars = filtered_df['Number of cars'].sum()
    
    return total_cars","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday'],
    'Number of cars': [339, 348, 232, 282]
})

# Call the tool to solve the problem
total_cars = calculate_total_cars(df, ['Saturday', 'Sunday'])
print(total_cars)","def calculate_total_count_for_specific_days(df, day_col, count_col, days_list):
    """"""
    This function takes in a pandas DataFrame representing a table of daily counts and a list of specific days, and returns the total count for those days.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing daily counts with columns specified by day_col and count_col.
    day_col (str): The column name for the days.
    count_col (str): The column name for the counts.
    days_list (list): A list of specific days to calculate the total count.
    
    Returns:
    int: The total count for the specified days.
    """"""
    # Filter the DataFrame for the specified days
    filtered_df = df[df[day_col].isin(days_list)]
    
    # Calculate the total count for the specified days
    total_count = filtered_df[count_col].sum()
    
    return total_count","df = pd.DataFrame({
    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday'],
    'Number of cars': [339, 348, 232, 282]
})

print(calculate_total_count_for_specific_days(df, 'Day', 'Number of cars', ['Saturday', 'Sunday']))"
"For a statistics project, Austin observed the number of hits and misses scored by some baseball players during batting practice. How many more misses than hits did the third baseman have?",13.0,"Player | Misses | Hits
First baseman | 8 | 14
Left fielder | 1 | 8
Right fielder | 10 | 13
Third baseman | 16 | 3
Shortstop | 3 | 3",4,4966,"import pandas as pd

def calculate_difference(df, player):
    """"""
    This function takes in a pandas DataFrame representing a baseball statistics table and a player's name, and returns the difference between the number of misses and hits for the specified player.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing player names, number of misses and hits with columns 'Player', 'Misses' and 'Hits'.
    player (str): The name of the player.
    Returns:
    int: The difference between the number of misses and hits for the specified player.
    """"""
    # Filter the DataFrame for the specific player
    player_df = df[df['Player'] == player]
    if not player_df.empty:
        misses = player_df['Misses'].values[0]
        hits = player_df['Hits'].values[0]
        difference = misses - hits
        return difference
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Player': ['First baseman', 'Left fielder', 'Right fielder', 'Third baseman', 'Shortstop'],
    'Misses': [8, 1, 10, 16, 3],
    'Hits': [14, 8, 13, 3, 3]
})
# Call the tool to solve the problem
print(calculate_difference(df, 'Third baseman'))","def calculate_difference_between_two_columns_for_specific_row(df, row_id_col, row_id, col1, col2):
    """"""
    This function takes in a pandas DataFrame, a column name for row identifiers, a specific row identifier, and two column names, and returns the difference between the values in the two columns for the specified row.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame.
    row_id_col (str): The column name for the row identifiers.
    row_id (str): The specific row identifier.
    col1 (str): The first column name.
    col2 (str): The second column name.
    
    Returns:
    float: The difference between the values in col1 and col2 for the row specified by row_id. Returns None if the row identifier is not found in the DataFrame.
    """"""
    # Filter the DataFrame for the specific row identifier
    row_df = df[df[row_id_col] == row_id]
    if not row_df.empty:
        value1 = row_df[col1].values[0]
        value2 = row_df[col2].values[0]
        difference = value1 - value2
        return difference
    else:
        return None","df = pd.DataFrame({
    'Player': ['First baseman', 'Left fielder', 'Right fielder', 'Third baseman', 'Shortstop'],
    'Misses': [8, 1, 10, 16, 3],
    'Hits': [14, 8, 13, 3, 3]
})
print(calculate_difference_between_two_columns_for_specific_row(df, 'Player', 'Third baseman', 'Misses', 'Hits'))"
"At a charity basketball shootout, excited fans counted the baskets and misses made by each of the team mascots. How many misses did Bradley Bear have?",11.0,"Mascot | Baskets | Misses
Bradley Bear | 13 | 11
Rhianna Rhino | 17 | 5
Wendy Wolverine | 3 | 6
Tina Tiger | 1 | 12",4,16913,"import pandas as pd

def get_misses(df, mascot_name):
    """"""
    This function takes in a pandas DataFrame representing a table of mascot basketball shootout results and a mascot name, and returns the number of misses made by the mascot.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing mascot names, baskets made, and misses with columns 'Mascot', 'Baskets', and 'Misses'.
    mascot_name (str): The name of the mascot.
    Returns:
    int: The number of misses made by the mascot.
    """"""
    # Filter the DataFrame for the specific mascot
    mascot_df = df[df['Mascot'] == mascot_name]
    if not mascot_df.empty:
        # Return the number of misses made by the mascot
        return mascot_df['Misses'].values[0]
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Mascot': ['Bradley Bear', 'Rhianna Rhino', 'Wendy Wolverine', 'Tina Tiger'],
    'Baskets': [13, 17, 3, 1],
    'Misses': [11, 5, 6, 12]
})
# Call the tool to solve the problem
misses = get_misses(df, 'Bradley Bear')
print(misses)","def get_value_from_table_by_identifier(data_frame, identifier_col, value_col, identifier_value):
    """"""
    This function takes in a pandas DataFrame, an identifier column, a value column, and an identifier value, and returns the value from the value column corresponding to the given identifier value.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the data.
    identifier_col (str): The column name for the identifier values.
    value_col (str): The column name for the values to be retrieved.
    identifier_value (str): The identifier value to filter the data.
    
    Returns:
    Any: The value from the value column corresponding to the given identifier value, or None if the identifier value is not found.
    """"""
    # Filter the DataFrame for the specific identifier value
    filtered_df = data_frame[data_frame[identifier_col] == identifier_value]
    if not filtered_df.empty:
        # Return the value from the value column corresponding to the identifier value
        return filtered_df[value_col].values[0]
    else:
        return None","data = {
    'Mascot': ['Bradley Bear', 'Rhianna Rhino', 'Wendy Wolverine', 'Tina Tiger'],
    'Baskets': [13, 17, 3, 1],
    'Misses': [11, 5, 6, 12]
}

df = pd.DataFrame(data)
print(get_value_from_table_by_identifier(data_frame=df, identifier_col=""Mascot"", value_col=""Misses"", identifier_value=""Bradley Bear""))"
Each gym locker has 5 volleyballs. How many volleyballs are in 6 gym lockers?,30.0,"Number of gym lockers | Number of volleyballs
1 | 5
2 | 10
3 | 15
4 | 20
5 | 25
6 | ?",2,1607,"import pandas as pd

def calculate_volleyballs_in_lockers(df, num_lockers):
    """"""
    This function takes in a pandas DataFrame representing a table of gym lockers and the number of volleyballs in each locker, and returns the number of volleyballs in the specified number of lockers.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of gym lockers and the number of volleyballs in each locker with columns 'Number of gym lockers' and 'Number of volleyballs'.
    num_lockers (int): The number of gym lockers to calculate the number of volleyballs for.
    Returns:
    int: The number of volleyballs in the specified number of gym lockers.
    """"""
    # Find the number of volleyballs per locker
    volleyballs_per_locker = df['Number of volleyballs'][0] / df['Number of gym lockers'][0]
    
    # Calculate the number of volleyballs in the specified number of lockers
    total_volleyballs = num_lockers * volleyballs_per_locker
    
    return int(total_volleyballs)","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of gym lockers': [1, 2, 3, 4, 5],
    'Number of volleyballs': [5, 10, 15, 20, 25]
})

# Call the tool to solve the problem
num_volleyballs = calculate_volleyballs_in_lockers(df, 6)
print(num_volleyballs)","def calculate_total_items_from_item_quantities_per_group(item_quantities_df, group_col, item_col, num_groups):
    """"""
    This function takes in a pandas DataFrame representing a table of item quantities per group and a given number of groups, and returns the total number of items based on the item quantities per group and the number of groups.
    
    Args:
    item_quantities_df (pd.DataFrame): A pandas DataFrame containing the number of groups and the number of items in each group.
    group_col (str): The column name for the group values.
    item_col (str): The column name for the item quantities.
    num_groups (int): The number of groups to calculate the total number of items for.
    
    Returns:
    int: The total number of items in the specified number of groups.
    """"""
    # Find the number of items per group
    items_per_group = item_quantities_df[item_col][0] / item_quantities_df[group_col][0]
    
    # Calculate the total number of items in the specified number of groups
    total_items = num_groups * items_per_group
    
    return int(total_items)","item_quantities_data = {
    'Number of gym lockers': [1, 2, 3, 4, 5],
    'Number of volleyballs': [5, 10, 15, 20, 25]
}

item_quantities_df = pd.DataFrame(item_quantities_data)

num_groups = 6
print(calculate_total_items_from_item_quantities_per_group(item_quantities_df, ""Number of gym lockers"", ""Number of volleyballs"", num_groups))"
"Marco is playing a computer game in which he builds and manages an amusement park. The types of rides he has in his park are shown in the frequency chart. Marco plans to build 9 more rides. Afterward, how many rides will Marco's park have in all?",41.0,"Type | Frequency
little-kid rides | 10
roller coasters | 7
water rides | 4
spinning rides | 8
free-fall rides | 3",5,6710,"import pandas as pd

def calculate_total_rides(df, additional_rides):
    """"""
    This function takes in a pandas DataFrame representing a frequency chart of ride types and an integer representing the number of additional rides to be built, and returns the total number of rides in the park after the additional rides are built.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing ride types and their frequencies with columns 'Type' and 'Frequency'.
    additional_rides (int): The number of additional rides to be built.
    Returns:
    int: The total number of rides in the park after the additional rides are built.
    """"""
    # Calculate the current total number of rides
    current_total_rides = df['Frequency'].sum()
    
    # Calculate the total number of rides after the additional rides are built
    total_rides = current_total_rides + additional_rides
    
    return total_rides","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Type': ['little-kid rides', 'roller coasters', 'water rides', 'spinning rides', 'free-fall rides'],
    'Frequency': [10, 7, 4, 8, 3]
})

# Call the tool to solve the problem
total_rides = calculate_total_rides(df, 9)
print(total_rides)","def calculate_total_items_after_addition(data_frame, category_col, frequency_col, additional_items):
    """"""
    This function takes in a pandas DataFrame representing a frequency chart of categories and an integer representing the number of additional items to be added, and returns the total number of items after the addition.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing categories and their frequencies.
    category_col (str): The column name for the categories.
    frequency_col (str): The column name for the frequencies.
    additional_items (int): The number of additional items to be added.
    
    Returns:
    int: The total number of items after the addition.
    """"""
    # Calculate the current total number of items
    current_total_items = data_frame[frequency_col].sum()
    
    # Calculate the total number of items after the additional items are added
    total_items = current_total_items + additional_items
    
    return total_items","data = {
    'Type': ['little-kid rides', 'roller coasters', 'water rides', 'spinning rides', 'free-fall rides'],
    'Frequency': [10, 7, 4, 8, 3]
}

df = pd.DataFrame(data)
print(calculate_total_items_after_addition(data_frame=df, category_col=""Type"", frequency_col=""Frequency"", additional_items=9))"
An economics student recorded the amount of per-capita aid that the U.S. gave to various countries during the 1900s. How much aid did Libya receive per capita in 1980?,5.0,"Country | 1980 | 1990
Algeria | $9 | $10
Afghanistan | $2 | $7
Libya | $5 | $5
Pakistan | $14 | $10",5,9215,"import pandas as pd

def get_aid_amount(df, country, year):
    """"""
    This function takes in a pandas DataFrame representing a table of aid amounts, a country name, and a year, and returns the aid amount for the specified country and year.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing aid amounts with columns 'Country', '1980', '1990'.
    country (str): The name of the country.
    year (str): The year.
    Returns:
    float: The aid amount for the specified country and year.
    """"""
    # Filter the DataFrame for the specific country
    country_df = df[df['Country'] == country]
    if not country_df.empty:
        aid_amount = country_df[year].values[0]
        return aid_amount
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Country': ['Algeria', 'Afghanistan', 'Libya', 'Pakistan'],
    '1980': [9, 2, 5, 14],
    '1990': [10, 7, 5, 10]
})

# Call the tool to solve the problem
aid_amount = get_aid_amount(df, 'Libya', '1980')
print(aid_amount)","def get_value_from_table_by_row_and_column(data_frame, row_id_col, row_id, col_id):
    """"""
    This function takes in a pandas DataFrame, a row identifier column, a row identifier, and a column identifier, and returns the value at the intersection of the specified row and column.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing data with columns specified by row_id_col and col_id.
    row_id_col (str): The column name for the row identifier.
    row_id (str): The row identifier.
    col_id (str): The column identifier.
    
    Returns:
    float: The value at the intersection of the specified row and column.
    """"""
    # Filter the DataFrame for the specific row identifier
    row_df = data_frame[data_frame[row_id_col] == row_id]
    if not row_df.empty:
        value = row_df[col_id].values[0]
        return value
    else:
        return None","data = {
    'Country': ['Algeria', 'Afghanistan', 'Libya', 'Pakistan'],
    '1980': [9, 2, 5, 14],
    '1990': [10, 7, 5, 10]
}

df = pd.DataFrame(data)
print(get_value_from_table_by_row_and_column(data_frame=df, row_id_col=""Country"", row_id=""Libya"", col_id=""1980""))"
"In preparation for graduation, some teachers and students volunteered for the various graduation committees. How many people are on the music committee?",35.0,"Committee | Students | Teachers
Program | 5 | 17
Ticket | 20 | 5
Music | 20 | 15
Schedule | 15 | 20
Food | 18 | 2",5,12179,"import pandas as pd

def count_people_on_committee(df, committee_name):
    """"""
    This function takes in a pandas DataFrame representing a committee table and a committee name, and returns the total number of people on the specified committee.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing committee names and the number of students and teachers on each committee. The DataFrame should have columns 'Committee', 'Students', and 'Teachers'.
    committee_name (str): The name of the committee.
    Returns:
    int: The total number of people on the specified committee.
    """"""
    # Filter the DataFrame for the specific committee
    committee_df = df[df['Committee'] == committee_name]
    if not committee_df.empty:
        # Calculate the total number of people on the committee
        total_people = committee_df['Students'].values[0] + committee_df['Teachers'].values[0]
        return total_people
    else:
        return 0","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Committee': ['Program', 'Ticket', 'Music', 'Schedule', 'Food'],
    'Students': [5, 20, 20, 15, 18],
    'Teachers': [17, 5, 15, 20, 2]
})
# Call the tool to solve the problem
print(count_people_on_committee(df, 'Music'))","def count_total_people_in_group_from_subgroups(data_frame, group_col, subgroup1_col, subgroup2_col, group_name):
    """"""
    This function takes in a pandas DataFrame representing a table of group names and the number of people in each subgroup, and returns the total number of people in the specified group.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing group names and the number of people in each subgroup.
    group_col (str): The column name for the group names.
    subgroup1_col (str): The column name for the first subgroup.
    subgroup2_col (str): The column name for the second subgroup.
    group_name (str): The name of the group.
    
    Returns:
    int: The total number of people in the specified group.
    """"""
    # Filter the DataFrame for the specific group name
    group_df = data_frame[data_frame[group_col] == group_name]
    if not group_df.empty:
        # Calculate the total number of people in the group
        total_people = group_df[subgroup1_col].values[0] + group_df[subgroup2_col].values[0]
        return total_people
    else:
        return 0","data = {
    'Committee': ['Program', 'Ticket', 'Music', 'Schedule', 'Food'],
    'Students': [5, 20, 20, 15, 18],
    'Teachers': [17, 5, 15, 20, 2]
}

df = pd.DataFrame(data)
print(count_total_people_in_group_from_subgroups(data_frame=df, group_col=""Committee"", subgroup1_col=""Students"", subgroup2_col=""Teachers"", group_name=""Music""))"
"Dr. Marshall, a zoo director, researched ticket prices at other zoos around the country. How much more does a child ticket cost at the Minnesota Zoo than at the Central Park Zoo?",5.0,"Zoo | Child | Senior
Atlanta | $14 | $15
Central Park | $5 | $7
San Francisco | $9 | $12
Minnesota | $10 | $10
Boise | $3 | $4",4,8611,"import pandas as pd

def calculate_price_difference(df, zoo1, zoo2, ticket_type):
    """"""
    This function takes in a pandas DataFrame representing a table of zoo ticket prices, and calculates the price difference between two zoos for a specific ticket type.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing zoo names and ticket prices with columns 'Zoo', 'Child', and 'Senior'.
    zoo1 (str): The name of the first zoo.
    zoo2 (str): The name of the second zoo.
    ticket_type (str): The type of ticket to compare prices for ('Child' or 'Senior').
    Returns:
    float: The price difference between the two zoos for the specified ticket type.
    """"""
    # Filter the DataFrame for the specific zoos
    zoo1_df = df[df['Zoo'] == zoo1]
    zoo2_df = df[df['Zoo'] == zoo2]
    
    # Get the ticket prices for the specified ticket type
    zoo1_price = zoo1_df[ticket_type].values[0]
    zoo2_price = zoo2_df[ticket_type].values[0]
    
    # Calculate the price difference
    price_difference = zoo1_price - zoo2_price
    
    return price_difference","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Zoo': ['Atlanta', 'Central Park', 'San Francisco', 'Minnesota', 'Boise'],
    'Child': [14, 5, 9, 10, 3],
    'Senior': [15, 7, 12, 10, 4]
})

# Call the tool to solve the problem
price_difference = calculate_price_difference(df, 'Minnesota', 'Central Park', 'Child')
print(price_difference)","def calculate_price_difference_between_entities(data_frame, entity_col, item_col, entity1, entity2, item_type):
    """"""
    This function takes in a pandas DataFrame representing a table of item prices for different entities, and calculates the price difference between two entities for a specific item type.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing entity names and item prices.
    entity_col (str): The column name for the entity names.
    item_col (str): The column name for the item types.
    entity1 (str): The name of the first entity.
    entity2 (str): The name of the second entity.
    item_type (str): The type of item to compare prices for.
    
    Returns:
    float: The price difference between the two entities for the specified item type.
    """"""
    # Filter the DataFrame for the specific entities
    entity1_df = data_frame[data_frame[entity_col] == entity1]
    entity2_df = data_frame[data_frame[entity_col] == entity2]
    
    # Get the item prices for the specified item type
    entity1_price = entity1_df[item_col][item_type].values[0]
    entity2_price = entity2_df[item_col][item_type].values[0]
    
    # Calculate the price difference
    price_difference = entity1_price - entity2_price
    
    return price_difference","data = {
    'Zoo': ['Atlanta', 'Central Park', 'San Francisco', 'Minnesota', 'Boise'],
    'Child': [14, 5, 9, 10, 3],
    'Senior': [15, 7, 12, 10, 4]
}

df = pd.DataFrame(data)
print(calculate_price_difference_between_entities(data_frame=df, entity_col=""Zoo"", item_col=""Child"", entity1=""Minnesota"", entity2=""Central Park"", item_type=""Child""))"
Each gym locker has 5 soccer balls. How many soccer balls are in 6 gym lockers?,30.0,"Number of gym lockers | Number of soccer balls
1 | 5
2 | 10
3 | 15
4 | 20
5 | 25
6 | ?",1,10356,"def calculate_soccer_balls(num_lockers):
    """"""
    This function takes in the number of gym lockers and returns the number of soccer balls based on the given ratio.
    Args:
    num_lockers (int): The number of gym lockers.
    Returns:
    int: The number of soccer balls.
    """"""
    # The ratio of gym lockers to soccer balls is 1:5
    num_balls = num_lockers * 5
    return num_balls","# Call the tool to solve the problem
print(calculate_soccer_balls(6))","def calculate_items_based_on_ratio(num_groups, ratio):
    """"""
    This function takes in the number of groups and a ratio, and returns the total number of items based on the given ratio.
    
    Args:
    num_groups (int): The number of groups.
    ratio (int): The ratio of items per group.
    
    Returns:
    int: The total number of items.
    """"""
    # Calculate the total number of items based on the ratio
    num_items = num_groups * ratio
    return num_items","print(calculate_items_based_on_ratio(num_groups=6, ratio=5))"
"While looking through an almanac at the library, Colin noticed some data showing the population density of various states. How many more people per square mile lived in Idaho in 2000 than in 1990?",3.0,"State | 1990 | 2000
Idaho | 12 | 15
Nevada | 10 | 18
North Dakota | 9 | 9",4,11796,"import pandas as pd

def calculate_population_increase(df, state):
    """"""
    This function takes in a pandas DataFrame representing a population density table and a state name, and returns the increase in population density from 1990 to 2000 for the given state.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing population density data with columns 'State', '1990', and '2000'.
    state (str): The name of the state to calculate the population increase for.
    Returns:
    int: The increase in population density from 1990 to 2000 for the given state.
    """"""
    # Filter the DataFrame for the specific state
    state_df = df[df['State'] == state]
    if not state_df.empty:
        # Calculate the increase in population density
        increase = state_df['2000'].values[0] - state_df['1990'].values[0]
        return increase
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'State': ['Idaho', 'Nevada', 'North Dakota'],
    '1990': [12, 10, 9],
    '2000': [15, 18, 9]
})
# Call the tool to solve the problem
increase = calculate_population_increase(df, 'Idaho')
print(increase)","def calculate_increase_in_value_for_entity_between_years(data_frame, entity_col, year1_col, year2_col, entity_name):
    """"""
    This function takes in a pandas DataFrame representing a table of entities and their values for different years, and returns the increase in value for a specific entity from one year to another.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing entities and their values for different years.
    entity_col (str): The column name for the entities.
    year1_col (str): The column name for the first year.
    year2_col (str): The column name for the second year.
    entity_name (str): The name of the entity to calculate the increase in value for.
    
    Returns:
    float: The increase in value for the entity from year1 to year2. Returns None if the entity is not found in the DataFrame.
    """"""
    # Filter the DataFrame for the specific entity
    entity_df = data_frame[data_frame[entity_col] == entity_name]
    if not entity_df.empty:
        # Calculate the increase in value
        increase = entity_df[year2_col].values[0] - entity_df[year1_col].values[0]
        return increase
    else:
        return None","data = {
    'State': ['Idaho', 'Nevada', 'North Dakota'],
    '1990': [12, 10, 9],
    '2000': [15, 18, 9]
}

df = pd.DataFrame(data)
print(calculate_increase_in_value_for_entity_between_years(data_frame=df, entity_col=""State"", year1_col=""1990"", year2_col=""2000"", entity_name=""Idaho""))"
Joel entered his sister into their town's Smelly Shoe Competition. Joel observed contestants of all ages proudly strutting around wearing different kinds of smelly shoes. What is the probability that a randomly selected contestant is wearing tennis shoes and is under age 12? Simplify any fractions.,0.3125," | Under age 12 | 13 to 30 years old
Tennis shoes | 5 | 1
High heels | 4 | 6",8,5582,"import pandas as pd

def calculate_probability(df):
    """"""
    This function takes in a pandas DataFrame representing a table of contestants and their shoe types and ages, and returns the probability that a randomly selected contestant is wearing tennis shoes and is under age 12.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of contestants wearing different types of shoes and their ages. The DataFrame should have columns 'Under age 12' and '13 to 30 years old'.
    Returns:
    float: The probability that a randomly selected contestant is wearing tennis shoes and is under age 12.
    """"""
    # Calculate the total number of contestants
    total_contestants = df.sum().sum()
    
    # Calculate the number of contestants wearing tennis shoes and under age 12
    tennis_shoes_under_12 = df.loc['Tennis shoes', 'Under age 12']
    
    # Calculate the probability
    probability = tennis_shoes_under_12 / total_contestants
    
    return probability","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Under age 12': [5, 4],
    '13 to 30 years old': [1, 6]
}, index=['Tennis shoes', 'High heels'])

# Call the tool to solve the problem
probability = calculate_probability(df)
print(probability)","def calculate_probability_of_specific_combination(data_frame, category1_col, category2_col, category1_value, category2_value):
    """"""
    This function takes in a pandas DataFrame representing a table of counts for combinations of two categories, and returns the probability of a specific combination of category values.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing counts for combinations of two categories.
    category1_col (str): The column name for the first category.
    category2_col (str): The column name for the second category.
    category1_value (str): The specific value of the first category for the combination.
    category2_value (str): The specific value of the second category for the combination.
    
    Returns:
    float: The probability of the specific combination of category values.
    """"""
    # Calculate the total count of all combinations
    total_count = data_frame.sum().sum()
    
    # Calculate the count of the specific combination of category values
    specific_combination_count = data_frame.loc[category1_value, category2_value]
    
    # Calculate the probability
    probability = specific_combination_count / total_count
    
    return probability","data = {
    'Under age 12': [5, 4],
    '13 to 30 years old': [1, 6]
}

df = pd.DataFrame(data, index=['Tennis shoes', 'High heels'])

print(calculate_probability_of_specific_combination(data_frame=df, category1_col='Under age 12', category2_col='13 to 30 years old', category1_value='Tennis shoes', category2_value='Under age 12'))"
"Hakim, a candy store employee, placed peppermint candies into jars of various sizes. How many jars had exactly 0 peppermint candies?",4.0,"Stem | Leaf 
0 | 0, 0, 0, 0
1 | 2
2 | 4
3 | 
4 | 
5 | 3, 5, 8",5,2809,"import pandas as pd
def count_jars_with_0_peppermint_candies(df):
    """"""
    This function takes in a pandas dataframe of peppermint candies per jar, and returns the number of jars that have exactly 0 peppermint candies.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of peppermint candies per jar.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of jars that have exactly 0 peppermint candies.
    """"""
    # prepare a list to calculate candies in each jar
    candies = []
    # calculate the total number of peppermint candies in each jar
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            candies.append(stem * 10 + leaf[j])
    # filter the jars where the total number of peppermint candies is exactly 0
    filtered = [candy for candy in candies if candy == 0]
    # count the number of rows
    num_jars = len(filtered)
    return num_jars","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [0, 1, 2, 3, 4, 5],
    'Leaf': [[0, 0, 0, 0], [2], [4], [], [], [3, 5, 8]]
})
# Call the tool to solve the problem
print(count_jars_with_0_peppermint_candies(df))","def count_groups_with_exact_item_count_in_stem_leaf(data_frame, stem_col, leaf_col, item_count):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of groups and a specific item count, and returns the number of groups that have exactly the specified number of items.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    item_count (int): The specific count of items for filtering groups.
    
    Returns:
    int: The number of groups with exactly the specified number of items.
    """"""
    # Initialize the list to calculate items in each group
    items = []
    
    # Calculate the total value of items in each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Filter the groups where the total number of items is exactly the specified count
    filtered = [item for item in items if item == item_count]
    
    # Count the number of groups
    num_groups = len(filtered)
    
    return num_groups","data = {
    ""Stem"": [0, 1, 2, 3, 4, 5],
    ""Leaf"": [[0, 0, 0, 0], [2], [4], [], [], [3, 5, 8]]
}

df = pd.DataFrame(data)
print(count_groups_with_exact_item_count_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf"", item_count=0))"
Each gym locker has 2 soccer balls. How many soccer balls are in 6 gym lockers?,12.0,"Number of gym lockers | Number of soccer balls
1 | 2
2 | 4
3 | 6
4 | 8
5 | 10
6 | ?",2,6278,"import pandas as pd

def calculate_soccer_balls(df, num_lockers):
    """"""
    This function takes in a pandas DataFrame representing the number of gym lockers and the number of soccer balls, and returns the number of soccer balls in the given number of gym lockers.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of gym lockers and the number of soccer balls with columns 'Number of gym lockers' and 'Number of soccer balls'.
    num_lockers (int): The number of gym lockers for which the number of soccer balls needs to be calculated.
    Returns:
    int: The number of soccer balls in the given number of gym lockers.
    """"""
    # Find the relationship between gym lockers and soccer balls
    relationship = df['Number of soccer balls'][0] / df['Number of gym lockers'][0]
    
    # Calculate the number of soccer balls for the given number of gym lockers
    num_soccer_balls = num_lockers * relationship
    
    return int(num_soccer_balls)","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of gym lockers': [1, 2, 3, 4, 5],
    'Number of soccer balls': [2, 4, 6, 8, 10]
})

# Call the tool to solve the problem
num_soccer_balls = calculate_soccer_balls(df, 6)
print(num_soccer_balls)","def calculate_items_in_groups(df, group_col, item_col, num_groups):
    """"""
    This function takes in a pandas DataFrame representing a table of item counts per group and a given number of groups, and returns the number of items in the given number of groups.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of groups and the number of items with columns specified by group_col and item_col.
    group_col (str): The column name for the group counts.
    item_col (str): The column name for the item counts.
    num_groups (int): The number of groups for which the number of items needs to be calculated.
    
    Returns:
    int: The number of items in the given number of groups.
    """"""
    # Find the relationship between groups and items
    relationship = df[item_col][0] / df[group_col][0]
    
    # Calculate the number of items for the given number of groups
    num_items = num_groups * relationship
    
    return int(num_items)","df = pd.DataFrame({
    'Number of gym lockers': [1, 2, 3, 4, 5],
    'Number of soccer balls': [2, 4, 6, 8, 10]
})

print(calculate_items_in_groups(df, 'Number of gym lockers', 'Number of soccer balls', 6))"
Each shed has 10 screwdrivers. How many screwdrivers are in 6 sheds?,60.0,"Number of sheds | Number of screwdrivers
1 | 10
2 | 20
3 | 30
4 | 40
5 | 50
6 | ?",2,11736,"def calculate_screwdrivers(num_sheds):
    """"""
    This function takes in the number of sheds and returns the number of screwdrivers based on the fact that each shed has 10 screwdrivers.
    Args:
    num_sheds (int): The number of sheds.
    Returns:
    int: The number of screwdrivers.
    """"""
    return num_sheds * 10","# Call the tool to solve the problem
print(calculate_screwdrivers(6))","def calculate_total_items(num_groups, fixed_quantity_per_group):
    """"""
    This function takes in the number of groups and a fixed quantity per group, and returns the total number of items.
    
    Args:
    num_groups (int): The number of groups.
    fixed_quantity_per_group (int): The fixed quantity of items per group.
    
    Returns:
    int: The total number of items.
    """"""
    return num_groups * fixed_quantity_per_group","print(calculate_total_items(6, 10))"
Greg recalled how many goals he had made in soccer practice each day. What is the median of the numbers?,5.0,"Day | Number of goals
Wednesday | 4
Thursday | 7
Friday | 0
Saturday | 2
Sunday | 8
Monday | 5
Tuesday | 6",6,6088,"import pandas as pd
import numpy as np

def calculate_median(df):
    """"""
    This function takes in a pandas DataFrame containing a column of numbers and returns the median of the numbers.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing a column of numbers.
    Returns:
    float: The median of the numbers.
    """"""
    # Extract the column of numbers
    numbers = df['Number of goals'].values
    
    # Calculate the median using numpy
    median = np.median(numbers)
    
    return median","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],
    'Number of goals': [4, 7, 0, 2, 8, 5, 6]
})

# Call the tool to solve the problem
median_goals = calculate_median(df)
print(median_goals)","def calculate_median_of_column(df, num_col):
    """"""
    This function takes in a pandas DataFrame and a column name, and returns the median of the numbers in the specified column.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing a column of numbers.
    num_col (str): The column name for the numbers.
    
    Returns:
    float: The median of the numbers in the specified column.
    """"""
    # Extract the column of numbers
    numbers = df[num_col].values
    
    # Calculate the median using numpy
    median = np.median(numbers)
    
    return median","df = pd.DataFrame({
    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],
    'Number of goals': [4, 7, 0, 2, 8, 5, 6]
})

print(calculate_median_of_column(df, 'Number of goals'))"
"At a swim meet, Josh noted the size of various swim teams. How many teams have fewer than 70 swimmers?",10.0,"Stem | Leaf 
2 | 5, 9
3 | 0, 9
4 | 9
5 | 3, 5, 5, 7
6 | 3",4,5536,"import pandas as pd
def count_teams_with_fewer_than_70_swimmers(df):
    """"""
    This function takes in a pandas dataframe of swim teams sizes, and returns the number of teams that have fewer than 70 swimmers.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the size of swim teams.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of teams that have fewer than 70 swimmers.
    """"""
    # prepare a list to calculate swimmers in each team
    swimmers = []
    # calculate the total number of swimmers in each team
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            swimmers.append(stem * 10 + leaf[j])
    # filter the teams where the total number of swimmers is less than 70
    filtered = [team for team in swimmers if team < 70]
    # count the number of rows
    num_teams = len(filtered)
    return num_teams","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [2, 3, 4, 5, 6],
    'Leaf': [[5, 9], [0, 9], [9], [3, 5, 5, 7], [3]]
})
# Call the tool to solve the problem
print(count_teams_with_fewer_than_70_swimmers(df))","def count_groups_below_threshold_in_stem_leaf(data_frame, stem_col, leaf_col, item_threshold):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of groups and a threshold value, and returns the number of groups that have values less than the threshold.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    item_threshold (int): The threshold value for filtering items.
    
    Returns:
    int: The number of items with values less than the threshold.
    """"""
    # Initialize the list to calculate items in each group
    items = []
    
    # Calculate the total value of items in each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Filter the items where the total value is less than the threshold
    filtered = [item for item in items if item < item_threshold]
    
    # Count the number of items
    num_items = len(filtered)
    
    return num_items","data = {
    ""Stem"": [2, 3, 4, 5, 6],
    ""Leaf"": [[5, 9], [0, 9], [9], [3, 5, 5, 7], [3]]
}

df = pd.DataFrame(data)
print(count_groups_below_threshold_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf"", item_threshold=70))"
"At a swim meet, Emir noted the size of various swim teams. What is the size of the largest team?",85.0,"Stem | Leaf 
1 | 7, 8
2 | 0, 2, 3
3 | 7, 9
4 | 3, 5, 7
5 | 8
6 | 0, 0
7 | 6, 7, 9
8 | 0, 4, 5",8,10694,"import pandas as pd

def find_largest_team_size(df):
    """"""
    This function takes in a pandas DataFrame representing a stem and leaf plot of swim team sizes and returns the size of the largest team.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the stem and leaf plot with columns 'Stem' and 'Leaf'.
    Returns:
    int: The size of the largest team.
    """"""
    # Prepare a list to store team sizes
    team_sizes = []
    
    # Calculate the size of each team
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            team_sizes.append(stem * 10 + leaf[j])
    
    # Find the largest team size
    largest_team_size = max(team_sizes)
    
    return largest_team_size","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],
    'Leaf': [[7, 8], [0, 2, 3], [7, 9], [3, 5, 7], [8], [0, 0], [6, 7, 9], [0, 4, 5]]
})

# Call the tool to solve the problem
largest_team_size = find_largest_team_size(df)
print(largest_team_size)","def find_max_value_in_stem_leaf(data_frame, stem_col, leaf_col):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of items and returns the maximum value among the items.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    
    Returns:
    int: The maximum value among the items.
    """"""
    # Initialize the list to store item values
    item_values = []
    
    # Calculate the total value of items
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            item_values.append(stem * 10 + leaf[j])
    
    # Find the maximum value
    max_value = max(item_values)
    
    return max_value","data = {
    ""Stem"": [1, 2, 3, 4, 5, 6, 7, 8],
    ""Leaf"": [[7, 8], [0, 2, 3], [7, 9], [3, 5, 7], [8], [0, 0], [6, 7, 9], [0, 4, 5]]
}

df = pd.DataFrame(data)
print(find_max_value_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf""))"
"At the summer carnival, each member of the Dickerson family played a round of bean bag toss. How many more misses than hits did Aunt Lisa have?",9.0,"Person | Hits | Misses
Aunt Sarah | 10 | 3
Uncle Rob | 12 | 3
Cousin Susan | 4 | 6
Aunt Lisa | 2 | 11",4,6947,"import pandas as pd

def calculate_misses_over_hits(df, person):
    """"""
    This function takes in a pandas DataFrame representing a table of hits and misses and a person's name, and returns the difference between the number of misses and hits for that person.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing persons' names, hits and misses with columns 'Person', 'Hits' and 'Misses'.
    person (str): The name of the person.
    Returns:
    int: The difference between the number of misses and hits for the person.
    """"""
    # Filter the DataFrame for the specific person
    person_df = df[df['Person'] == person]
    if not person_df.empty:
        hits = person_df['Hits'].values[0]
        misses = person_df['Misses'].values[0]
        return misses - hits
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Person': ['Aunt Sarah', 'Uncle Rob', 'Cousin Susan', 'Aunt Lisa'],
    'Hits': [10, 12, 4, 2],
    'Misses': [3, 3, 6, 11]
})

# Call the tool to solve the problem
result = calculate_misses_over_hits(df, 'Aunt Lisa')
print(result)","def calculate_difference_between_two_columns_for_entity(data_frame, entity_col, value1_col, value2_col, entity_name):
    """"""
    This function takes in a pandas DataFrame, two column names, and an entity name, and returns the difference between the values of the two columns for the specific entity.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing entities and their values.
    entity_col (str): The column name for the entities.
    value1_col (str): The column name for the first set of values.
    value2_col (str): The column name for the second set of values.
    entity_name (str): The name of the specific entity.
    
    Returns:
    float: The difference between the values of the two columns for the specific entity.
    """"""
    # Filter the DataFrame for the specific entity
    entity_df = data_frame[data_frame[entity_col] == entity_name]
    if not entity_df.empty:
        value1 = entity_df[value1_col].values[0]
        value2 = entity_df[value2_col].values[0]
        return value2 - value1
    else:
        return None","data = {
    'Person': ['Aunt Sarah', 'Uncle Rob', 'Cousin Susan', 'Aunt Lisa'],
    'Hits': [10, 12, 4, 2],
    'Misses': [3, 3, 6, 11]
}

df = pd.DataFrame(data)
print(calculate_difference_between_two_columns_for_entity(data_frame=df, entity_col=""Person"", value1_col=""Hits"", value2_col=""Misses"", entity_name=""Aunt Lisa""))"
Heartfelt Card Company sells cards for many occasions. They use a frequency chart to track how many card designs they have for each occasion. How many more card designs does the Heartfeld Card Company have for birthdays than for graduations?,36.0,"Occasion | Frequency
baby shower | 9
birthday | 44
graduation | 8
retirement | 6
thank you | 22
wedding | 10",5,13304,"import pandas as pd

def calculate_difference(df, occasion1, occasion2):
    """"""
    This function takes in a pandas DataFrame representing a frequency chart and two occasions, and returns the difference in the number of card designs between the two occasions.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing occasions and their frequencies with columns 'Occasion' and 'Frequency'.
    occasion1 (str): The name of the first occasion.
    occasion2 (str): The name of the second occasion.
    Returns:
    int: The difference in the number of card designs between the two occasions.
    """"""
    # Filter the DataFrame for the specific occasions
    occasion1_df = df[df['Occasion'] == occasion1]
    occasion2_df = df[df['Occasion'] == occasion2]
    
    # Check if the occasions exist in the DataFrame
    if not occasion1_df.empty and not occasion2_df.empty:
        # Calculate the difference in the number of card designs
        difference = occasion1_df['Frequency'].values[0] - occasion2_df['Frequency'].values[0]
        return difference
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Occasion': ['baby shower', 'birthday', 'graduation', 'retirement', 'thank you', 'wedding'],
    'Frequency': [9, 44, 8, 6, 22, 10]
})
# Call the tool to solve the problem
difference = calculate_difference(df, 'birthday', 'graduation')
print(difference)","def calculate_frequency_difference(df, category_col, frequency_col, category1, category2):
    """"""
    This function takes in a pandas DataFrame representing a frequency table, two categories, and returns the difference in frequencies between the two categories.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing categories and their frequencies.
    category_col (str): The column name for the categories.
    frequency_col (str): The column name for the frequencies.
    category1 (str): The name of the first category.
    category2 (str): The name of the second category.
    
    Returns:
    int: The difference in frequencies between the two categories.
    """"""
    # Filter the DataFrame for the specific categories
    category1_df = df[df[category_col] == category1]
    category2_df = df[df[category_col] == category2]
    
    # Check if the categories exist in the DataFrame
    if not category1_df.empty and not category2_df.empty:
        # Calculate the difference in frequencies
        difference = category1_df[frequency_col].values[0] - category2_df[frequency_col].values[0]
        return difference
    else:
        return None","df = pd.DataFrame({
    'Occasion': ['baby shower', 'birthday', 'graduation', 'retirement', 'thank you', 'wedding'],
    'Frequency': [9, 44, 8, 6, 22, 10]
})
print(calculate_frequency_difference(df, 'Occasion', 'Frequency', 'birthday', 'graduation'))"
"Dale wants to save up some money to buy a new smartphone, so he babysits on the weekends. There is a proportional relationship between the time Dale spends babysitting (in hours), x, and the amount of money he earns babysitting (in dollars), y. What is the constant of proportionality? Write your answer as a whole number or decimal.",5.0,"1 | $5
2 | $10
3 | $15
4 | $20",7,11011,"import pandas as pd

def calculate_constant_of_proportionality(df):
    """"""
    This function takes in a pandas DataFrame representing a table of hours and earnings, and returns the constant of proportionality.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing hours and earnings with columns 'Hours' and 'Earnings'.
    Returns:
    float: The constant of proportionality.
    """"""
    # Calculate the constant of proportionality by dividing the earnings by the hours for each row
    df['Constant'] = df['Earnings'] / df['Hours']
    
    # Check if the constant of proportionality is the same for all rows
    if df['Constant'].nunique() == 1:
        return df['Constant'].values[0]
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Hours': [1, 2, 3, 4],
    'Earnings': [5, 10, 15, 20]
})
# Call the tool to solve the problem
constant_of_proportionality = calculate_constant_of_proportionality(df)
print(constant_of_proportionality)","def calculate_constant_of_proportionality_between_two_variables(data_frame, variable1_col, variable2_col):
    """"""
    This function takes in a pandas DataFrame representing a table of two variables and their values, and returns the constant of proportionality between the two variables.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing two variables and their values.
    variable1_col (str): The column name for the first variable.
    variable2_col (str): The column name for the second variable.
    
    Returns:
    float: The constant of proportionality between the two variables, or None if the constant is not the same for all rows.
    """"""
    # Calculate the constant of proportionality by dividing the values of the second variable by the first for each row
    data_frame['Constant'] = data_frame[variable2_col] / data_frame[variable1_col]
    
    # Check if the constant of proportionality is the same for all rows
    if data_frame['Constant'].nunique() == 1:
        return data_frame['Constant'].values[0]
    else:
        return None","df = pd.DataFrame({
    'Hours': [1, 2, 3, 4],
    'Earnings': [5, 10, 15, 20]
})
print(calculate_constant_of_proportionality_between_two_variables(data_frame=df, variable1_col='Hours', variable2_col='Earnings'))"
Some companies compared how many phone calls they made. How many more phone calls did Tad's Coffee Company make than Critical Insight Consulting?,5688.0,"Company | Number of phone calls
Reardon Corporation | 2,709
Brave New Day Corporation | 5,726
Tad's Coffee Company | 7,314
Critical Insight Consulting | 1,626
Nature Now | 4,038",3,9738,"import pandas as pd

def calculate_difference_in_calls(df, company1, company2):
    """"""
    This function takes in a pandas DataFrame representing a table of companies and their number of phone calls, and returns the difference in phone calls between two specified companies.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing company names and their number of phone calls with columns 'Company' and 'Number of phone calls'.
    company1 (str): The name of the first company.
    company2 (str): The name of the second company.
    Returns:
    int: The difference in phone calls between the two companies.
    """"""
    # Filter the DataFrame for the specific companies
    company1_df = df[df['Company'] == company1]
    company2_df = df[df['Company'] == company2]
    
    # Get the number of phone calls for each company
    company1_calls = company1_df['Number of phone calls'].values[0]
    company2_calls = company2_df['Number of phone calls'].values[0]
    
    # Calculate the difference in phone calls
    difference = company1_calls - company2_calls
    
    return difference","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Company': ['Reardon Corporation', 'Brave New Day Corporation', ""Tad's Coffee Company"", 'Critical Insight Consulting', 'Nature Now'],
    'Number of phone calls': [2709, 5726, 7314, 1626, 4038]
})

# Call the tool to solve the problem
difference = calculate_difference_in_calls(df, ""Tad's Coffee Company"", 'Critical Insight Consulting')
print(difference)","def calculate_difference_between_two_rows(data_frame, row_id_col, value_col, row_id1, row_id2):
    """"""
    This function takes in a pandas DataFrame and calculates the difference in a specific column's values between two rows based on a specific column value.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the data.
    row_id_col (str): The column name used to identify the rows.
    value_col (str): The column name for the values to calculate the difference.
    row_id1 (str): The identifier for the first row.
    row_id2 (str): The identifier for the second row.
    
    Returns:
    float: The difference in values between the two rows.
    """"""
    # Filter the DataFrame for the specific rows
    row1_df = data_frame[data_frame[row_id_col] == row_id1]
    row2_df = data_frame[data_frame[row_id_col] == row_id2]
    
    # Get the values for each row
    row1_value = row1_df[value_col].values[0]
    row2_value = row2_df[value_col].values[0]
    
    # Calculate the difference in values
    difference = row1_value - row2_value
    
    return difference","data = {
    'Company': ['Reardon Corporation', 'Brave New Day Corporation', ""Tad's Coffee Company"", 'Critical Insight Consulting', 'Nature Now'],
    'Number of phone calls': [2709, 5726, 7314, 1626, 4038]
}

df = pd.DataFrame(data)
print(calculate_difference_between_two_rows(data_frame=df, row_id_col=""Company"", value_col=""Number of phone calls"", row_id1=""Tad's Coffee Company"", row_id2='Critical Insight Consulting'))"
"To get credit for meeting his school's community service requirement, Elijah kept a volunteering log. What is the mean of the numbers?",5.0,"Day | Hours
Friday | 10
Saturday | 7
Sunday | 5
Monday | 4
Tuesday | 2
Wednesday | 4
Thursday | 3",7,12271,"import pandas as pd

def calculate_mean(df, column_name):
    """"""
    This function takes in a pandas DataFrame and a column name, and returns the mean of the values in the specified column.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the data.
    column_name (str): The name of the column for which the mean should be calculated.
    Returns:
    float: The mean of the values in the specified column.
    """"""
    # Calculate the mean of the specified column
    mean_value = df[column_name].mean()
    
    return mean_value","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],
    'Hours': [10, 7, 5, 4, 2, 4, 3]
})
# Call the tool to solve the problem
mean_hours = calculate_mean(df, 'Hours')
print(mean_hours)","def calculate_mean_of_column(data_frame, column_name):
    """"""
    This function takes in a pandas DataFrame and a column name, and returns the mean of the values in the specified column.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the data.
    column_name (str): The name of the column for which the mean should be calculated.
    
    Returns:
    float: The mean of the values in the specified column.
    """"""
    # Calculate the mean of the specified column
    mean_value = data_frame[column_name].mean()
    
    return mean_value","df = pd.DataFrame({
    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],
    'Hours': [10, 7, 5, 4, 2, 4, 3]
})
mean_hours = calculate_mean_of_column(data_frame=df, column_name='Hours')
print(mean_hours)"
Harry found out the sizes of all the clubs at his school. What is the size of the largest club?,89.0,"Stem | Leaf 
3 | 2, 5, 7
4 | 3, 4, 4, 6, 6, 8
5 | 0, 3, 3, 4, 7
6 | 1, 3, 4, 7
7 | 
8 | 5, 9",6,16526,"import pandas as pd

def find_largest_club_size(df):
    """"""
    This function takes in a pandas dataframe of club sizes, and returns the size of the largest club.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the sizes of clubs.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The size of the largest club.
    """"""
    # prepare a list to calculate sizes of each club
    sizes = []
    # calculate the size of each club
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            sizes.append(stem * 10 + leaf[j])
    # find the maximum size
    max_size = max(sizes)
    return max_size","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [3, 4, 5, 6, 7, 8],
    'Leaf': [[2, 5, 7], [3, 4, 4, 6, 6, 8], [0, 3, 3, 4, 7], [1, 3, 4, 7], [], [5, 9]]
})
# Call the tool to solve the problem
largest_club_size = find_largest_club_size(df)
print(largest_club_size)","def find_largest_value_in_stem_leaf(data_frame, stem_col, leaf_col):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of items and returns the largest value in the plot.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    
    Returns:
    int: The largest value in the stem-and-leaf plot.
    """"""
    # Initialize the list to calculate items in each group
    items = []
    
    # Calculate the total value of items in each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Find the maximum value
    max_value = max(items)
    
    return max_value","data = {
    ""Stem"": [3, 4, 5, 6, 7, 8],
    ""Leaf"": [[2, 5, 7], [3, 4, 4, 6, 6, 8], [0, 3, 3, 4, 7], [1, 3, 4, 7], [], [5, 9]]
}

df = pd.DataFrame(data)
print(find_largest_value_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf""))"
How much more does a night's stay at Liberty Bed and Breakfast cost than a night's stay at Grand Vista Hotel?,324.0,"night's stay at Grand Vista Hotel | $132.00
night's stay at Royal Canopy Resort | $175.00
night's stay at Oceanspray Inn | $445.00
night's stay at Cerulean Resort | $321.00
night's stay at Mahogany Lodge | $425.00
night's stay at Liberty Bed and Breakfast | $456.00",8,4277,"import pandas as pd

def calculate_price_difference(hotel_df, hotel1, hotel2):
    """"""
    This function takes in a pandas DataFrame representing a hotel price table and two hotel names, and returns the price difference between the two hotels.
    Args:
    hotel_df (pd.DataFrame): A pandas DataFrame containing hotel names and their prices with columns 'Hotel' and 'Price'.
    hotel1 (str): The name of the first hotel.
    hotel2 (str): The name of the second hotel.
    Returns:
    float: The price difference between the two hotels.
    """"""
    # Filter the DataFrame for the specific hotels
    hotel1_df = hotel_df[hotel_df['Hotel'] == hotel1]
    hotel2_df = hotel_df[hotel_df['Hotel'] == hotel2]
    
    # Check if both hotels are in the DataFrame
    if not hotel1_df.empty and not hotel2_df.empty:
        # Calculate the price difference
        price_difference = hotel2_df['Price'].values[0] - hotel1_df['Price'].values[0]
        return price_difference
    else:
        return None","# Initialize the table into a dataframe
hotel_df = pd.DataFrame({
    'Hotel': [""night's stay at Grand Vista Hotel"", ""night's stay at Royal Canopy Resort"", ""night's stay at Oceanspray Inn"", ""night's stay at Cerulean Resort"", ""night's stay at Mahogany Lodge"", ""night's stay at Liberty Bed and Breakfast""],
    'Price': [132.00, 175.00, 445.00, 321.00, 425.00, 456.00]
})

# Call the tool to solve the problem
price_difference = calculate_price_difference(hotel_df, ""night's stay at Grand Vista Hotel"", ""night's stay at Liberty Bed and Breakfast"")
print(price_difference)","def calculate_price_difference_between_items(item_prices_df, item_col, price_col, item1, item2):
    """"""
    This function takes in a pandas DataFrame representing a table of item prices and two item names, and returns the price difference between the two items.
    
    Args:
    item_prices_df (pd.DataFrame): A pandas DataFrame containing item names and their prices.
    item_col (str): The column name for the item names.
    price_col (str): The column name for the item prices.
    item1 (str): The name of the first item.
    item2 (str): The name of the second item.
    
    Returns:
    float: The price difference between the two items.
    """"""
    # Filter the DataFrame for the specific items
    item1_df = item_prices_df[item_prices_df[item_col] == item1]
    item2_df = item_prices_df[item_prices_df[item_col] == item2]
    
    # Check if both items are in the DataFrame
    if not item1_df.empty and not item2_df.empty:
        # Calculate the price difference
        price_difference = item2_df[price_col].values[0] - item1_df[price_col].values[0]
        return price_difference
    else:
        return None","item_prices_data = {
    'Item': [""night's stay at Grand Vista Hotel"", ""night's stay at Royal Canopy Resort"", ""night's stay at Oceanspray Inn"", ""night's stay at Cerulean Resort"", ""night's stay at Mahogany Lodge"", ""night's stay at Liberty Bed and Breakfast""],
    'Price': [132.00, 175.00, 445.00, 321.00, 425.00, 456.00]
}

item_prices_df = pd.DataFrame(item_prices_data)

price_difference = calculate_price_difference_between_items(item_prices_df, ""Item"", ""Price"", ""night's stay at Grand Vista Hotel"", ""night's stay at Liberty Bed and Breakfast"")
print(price_difference)"
"Mr. Gilmore, the band director, counted the number of instruments played by each member of the band. How many more girls play the drums than the flute?",2.0,"Instrument | Girls | Boys
Trumpet | 6 | 15
Flute | 4 | 20
Drums | 6 | 18",5,8104,"import pandas as pd

def calculate_difference(df, instrument1, instrument2, gender):
    """"""
    This function takes in a pandas DataFrame representing a table of instruments played by each gender, and returns the difference in the number of girls who play two different instruments.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing instruments and the number of each gender who play them. The DataFrame should have columns 'Instrument', 'Girls', and 'Boys'.
    instrument1 (str): The name of the first instrument.
    instrument2 (str): The name of the second instrument.
    gender (str): The gender to compare.
    Returns:
    int: The difference in the number of girls who play the two instruments.
    """"""
    # Filter the DataFrame for the specific instruments
    instrument1_df = df[df['Instrument'] == instrument1]
    instrument2_df = df[df['Instrument'] == instrument2]
    
    # Get the number of girls who play each instrument
    instrument1_count = instrument1_df[gender].values[0]
    instrument2_count = instrument2_df[gender].values[0]
    
    # Calculate and return the difference
    return abs(instrument1_count - instrument2_count)","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Instrument': ['Trumpet', 'Flute', 'Drums'],
    'Girls': [6, 4, 6],
    'Boys': [15, 20, 18]
})
# Call the tool to solve the problem
difference = calculate_difference(df, 'Drums', 'Flute', 'Girls')
print(difference)","def calculate_difference_between_two_categories(df, category_col, count_col, category1, category2, group):
    """"""
    This function takes in a pandas DataFrame representing a table of counts for different categories and a group, and returns the difference in counts between two categories for the specified group.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing categories and counts for different groups.
    category_col (str): The column name for the categories.
    count_col (str): The column name for the counts.
    category1 (str): The name of the first category.
    category2 (str): The name of the second category.
    group (str): The name of the group to compare.
    
    Returns:
    int: The difference in counts between the two categories for the specified group.
    """"""
    # Filter the DataFrame for the specific categories
    category1_df = df[df[category_col] == category1]
    category2_df = df[df[category_col] == category2]
    
    # Get the counts for each category
    category1_count = category1_df[group].values[0]
    category2_count = category2_df[group].values[0]
    
    # Calculate and return the difference
    return abs(category1_count - category2_count)","df = pd.DataFrame({
    'Instrument': ['Trumpet', 'Flute', 'Drums'],
    'Girls': [6, 4, 6],
    'Boys': [15, 20, 18]
})
print(calculate_difference_between_two_categories(df, 'Instrument', 'Girls', 'Drums', 'Flute', 'Girls'))"
"To get credit for meeting his school's community service requirement, Sandeep kept a volunteering log. What is the median of the numbers?",6.0,"Day | Hours
Friday | 10
Saturday | 4
Sunday | 3
Monday | 7
Tuesday | 6",5,6188,"import pandas as pd
import numpy as np

def calculate_median(df):
    """"""
    This function takes in a pandas DataFrame representing a volunteering log and returns the median of the hours.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing days and hours of volunteering with columns 'Day' and 'Hours'.
    Returns:
    float: The median of the hours.
    """"""
    # Extract the 'Hours' column and calculate the median
    median_hours = np.median(df['Hours'])
    
    return median_hours","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],
    'Hours': [10, 4, 3, 7, 6]
})

# Call the tool to solve the problem
median_hours = calculate_median(df)
print(median_hours)","def calculate_median_of_numerical_column(df, num_col):
    """"""
    This function takes in a pandas DataFrame and a numerical column name, and returns the median of the numerical column.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing various columns.
    num_col (str): The column name for the numerical values.
    
    Returns:
    float: The median of the numerical column.
    """"""
    # Extract the numerical column and calculate the median
    median_value = np.median(df[num_col])
    
    return median_value","df = pd.DataFrame({
    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],
    'Hours': [10, 4, 3, 7, 6]
})

print(calculate_median_of_numerical_column(df, 'Hours'))"
Some students at Dayton Middle School signed up to help out with the school play. How many students are on the set design committee?,10.0,"Committee | Boys | Girls
Lighting | 16 | 14
Casting | 9 | 7
Costume | 5 | 13
Sound | 19 | 2
Set design | 8 | 2",5,3253,"import pandas as pd

def count_students_in_committee(df, committee_name):
    """"""
    This function takes in a pandas DataFrame representing a committee table and a committee name, and returns the total number of students in the committee.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing committee names and the number of boys and girls in each committee with columns 'Committee', 'Boys', and 'Girls'.
    committee_name (str): The name of the committee.
    Returns:
    int: The total number of students in the committee.
    """"""
    # Filter the DataFrame for the specific committee
    committee_df = df[df['Committee'] == committee_name]
    if not committee_df.empty:
        # Calculate the total number of students in the committee
        total_students = committee_df['Boys'].values[0] + committee_df['Girls'].values[0]
        return total_students
    else:
        return 0","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Committee': ['Lighting', 'Casting', 'Costume', 'Sound', 'Set design'],
    'Boys': [16, 9, 5, 19, 8],
    'Girls': [14, 7, 13, 2, 2]
})
# Call the tool to solve the problem
students_in_set_design = count_students_in_committee(df, 'Set design')
print(students_in_set_design)","def count_total_members_in_group(group_df, group_col, member_cols, group_name):
    """"""
    This function takes in a pandas DataFrame representing a group table, a list of member count columns, and a group name, and returns the total number of members in the group.
    
    Args:
    group_df (pd.DataFrame): A pandas DataFrame containing group names and the number of members in each group.
    group_col (str): The column name for the group names.
    member_cols (list): A list of column names for the member counts.
    group_name (str): The name of the group.
    
    Returns:
    int: The total number of members in the group.
    """"""
    # Filter the DataFrame for the specific group
    group_data = group_df[group_df[group_col] == group_name]
    if not group_data.empty:
        # Calculate the total number of members in the group
        total_members = sum(group_data[col].values[0] for col in member_cols)
        return total_members
    else:
        return 0","df = pd.DataFrame({
    'Committee': ['Lighting', 'Casting', 'Costume', 'Sound', 'Set design'],
    'Boys': [16, 9, 5, 19, 8],
    'Girls': [14, 7, 13, 2, 2]
})
print(count_total_members_in_group(group_df=df, group_col='Committee', member_cols=['Boys', 'Girls'], group_name='Set design'))"
"Mr. Lowery, the band director, counted the number of instruments played by each member of the band. How many more band members play the drums than the flute?",2.0,"Instrument | Boys | Girls
Clarinet | 17 | 6
Trombone | 11 | 3
Drums | 15 | 4
Flute | 8 | 9",5,14647,"import pandas as pd

def calculate_difference_instruments(df, instrument1, instrument2):
    """"""
    This function takes in a pandas DataFrame representing the number of instruments played by boys and girls, and returns the difference in the number of band members playing the two specified instruments.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of instruments played by boys and girls with columns 'Instrument', 'Boys', and 'Girls'.
    instrument1 (str): The name of the first instrument.
    instrument2 (str): The name of the second instrument.
    Returns:
    int: The difference in the number of band members playing the two specified instruments.
    """"""
    # Filter the DataFrame for the specific instruments
    instrument1_df = df[df['Instrument'] == instrument1]
    instrument2_df = df[df['Instrument'] == instrument2]
    
    # Calculate the total number of band members playing each instrument
    instrument1_total = instrument1_df['Boys'].values[0] + instrument1_df['Girls'].values[0]
    instrument2_total = instrument2_df['Boys'].values[0] + instrument2_df['Girls'].values[0]
    
    # Calculate the difference in the number of band members playing the two instruments
    difference = abs(instrument1_total - instrument2_total)
    
    return difference","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Instrument': ['Clarinet', 'Trombone', 'Drums', 'Flute'],
    'Boys': [17, 11, 15, 8],
    'Girls': [6, 3, 4, 9]
})

# Call the tool to solve the problem
difference = calculate_difference_instruments(df, 'Drums', 'Flute')
print(difference)","def calculate_difference_in_counts_of_two_categories(df, category_col, count_col1, count_col2, category1, category2):
    """"""
    This function takes in a pandas DataFrame representing a table of counts for various categories and two category names, and returns the difference in the total counts of the two categories.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing counts for various categories.
    category_col (str): The column name for the categories.
    count_col1 (str): The column name for the first count.
    count_col2 (str): The column name for the second count.
    category1 (str): The name of the first category.
    category2 (str): The name of the second category.
    
    Returns:
    int: The difference in the total counts of the two categories.
    """"""
    # Filter the DataFrame for the specific categories
    category1_df = df[df[category_col] == category1]
    category2_df = df[df[category_col] == category2]
    
    # Calculate the total count for each category
    category1_total = category1_df[count_col1].values[0] + category1_df[count_col2].values[0]
    category2_total = category2_df[count_col1].values[0] + category2_df[count_col2].values[0]
    
    # Calculate the difference in the total counts of the two categories
    difference = abs(category1_total - category2_total)
    
    return difference","df = pd.DataFrame({
    'Instrument': ['Clarinet', 'Trombone', 'Drums', 'Flute'],
    'Boys': [17, 11, 15, 8],
    'Girls': [6, 3, 4, 9]
})

print(calculate_difference_in_counts_of_two_categories(df, 'Instrument', 'Boys', 'Girls', 'Drums', 'Flute'))"
Each football field has 10 sprinklers. How many sprinklers are on 6 football fields?,60.0,"Number of football fields | Number of sprinklers
1 | 10
2 | 20
3 | 30
4 | 40
5 | 50
6 | ?",1,14924,"import pandas as pd

def calculate_sprinklers_for_fields(df, num_fields):
    """"""
    This function takes in a pandas DataFrame representing a table of football fields and their corresponding number of sprinklers, and returns the number of sprinklers for the given number of football fields.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of football fields and their corresponding number of sprinklers with columns 'Number of football fields' and 'Number of sprinklers'.
    num_fields (int): The number of football fields for which the number of sprinklers is to be calculated.
    Returns:
    int: The number of sprinklers for the given number of football fields.
    """"""
    # Calculate the number of sprinklers per football field
    sprinklers_per_field = df['Number of sprinklers'][0] // df['Number of football fields'][0]
    
    # Calculate the number of sprinklers for the given number of football fields
    total_sprinklers = num_fields * sprinklers_per_field
    
    return total_sprinklers","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of football fields': [1, 2, 3, 4, 5],
    'Number of sprinklers': [10, 20, 30, 40, 50]
})

# Call the tool to solve the problem
num_fields = 6
num_sprinklers = calculate_sprinklers_for_fields(df, num_fields)
print(num_sprinklers)","def calculate_total_items_for_groups(data_frame, group_col, item_col, num_groups):
    """"""
    This function takes in a pandas DataFrame representing a table of group-item relationships and a given number of groups, and returns the total number of items for the given number of groups based on the items per group.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the number of groups and their corresponding number of items with specified columns for group_col and item_col.
    group_col (str): The column name for the group values.
    item_col (str): The column name for the item values.
    num_groups (int): The number of groups for which the total number of items is to be calculated.
    
    Returns:
    int: The total number of items for the given number of groups.
    """"""
    # Calculate the number of items per group
    items_per_group = data_frame[item_col][0] // data_frame[group_col][0]
    
    # Calculate the total number of items for the given number of groups
    total_items = num_groups * items_per_group
    
    return total_items","data = {
    'Number of football fields': [1, 2, 3, 4, 5],
    'Number of sprinklers': [10, 20, 30, 40, 50]
}

df = pd.DataFrame(data)

num_groups = 6
total_sprinklers = calculate_total_items_for_groups(data_frame=df, group_col=""Number of football fields"", item_col=""Number of sprinklers"", num_groups=num_groups)
print(total_sprinklers)"
Jessica found a list of the number of roller coasters at each amusement park in the state. What is the smallest number of roller coasters?,10.0,"Stem | Leaf 
1 | 0, 4, 5, 6
2 | 1, 2, 3, 4, 5, 9
3 | 8, 9, 9
4 | 1, 3, 4, 6, 6, 8, 9",8,5000,"import pandas as pd

def find_smallest_number(df):
    """"""
    This function takes in a pandas dataframe of roller coasters per amusement park, and returns the smallest number of roller coasters.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of roller coasters per amusement park.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The smallest number of roller coasters.
    """"""
    # prepare a list to calculate roller coasters in each park
    roller_coasters = []
    # calculate the total number of roller coasters in each park
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            roller_coasters.append(stem * 10 + leaf[j])
    # find the smallest number of roller coasters
    smallest_number = min(roller_coasters)
    return smallest_number","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [1, 2, 3, 4],
    'Leaf': [[0, 4, 5, 6], [1, 2, 3, 4, 5, 9], [8, 9, 9], [1, 3, 4, 6, 6, 8, 9]]
})
# Call the tool to solve the problem
smallest_number = find_smallest_number(df)
print(smallest_number)","def find_smallest_value_in_stem_leaf(data_frame, stem_col, leaf_col):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of items and returns the smallest value among the items.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    
    Returns:
    int: The smallest value among the items.
    """"""
    # Initialize the list to calculate items in each group
    items = []
    
    # Calculate the total value of items in each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Find the smallest value among the items
    smallest_value = min(items)
    
    return smallest_value","data = {
    ""Stem"": [1, 2, 3, 4],
    ""Leaf"": [[0, 4, 5, 6], [1, 2, 3, 4, 5, 9], [8, 9, 9], [1, 3, 4, 6, 6, 8, 9]]
}

df = pd.DataFrame(data)
print(find_smallest_value_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf""))"
"An Idaho farmer has been monitoring crop prices over time. Per cwt, how much did potatoes cost in 2003?",4.0,"Crop | 2003 | 2004
Lentils | $18 | $14
Canola | $10 | $11
Onions | $11 | $7
Potatoes | $4 | $4",4,3341,"import pandas as pd

def get_crop_price(crop_prices_df, crop, year):
    """"""
    This function takes in a pandas DataFrame representing crop prices over time, a crop name, and a year, and returns the price of the crop in the specified year.
    Args:
    crop_prices_df (pd.DataFrame): A pandas DataFrame containing crop prices over time with columns 'Crop', and years as column names.
    crop (str): The name of the crop to get the price for.
    year (str): The year to get the price for the specified crop.
    Returns:
    float: The price of the specified crop in the specified year.
    """"""
    # Filter the DataFrame for the specific crop
    crop_df = crop_prices_df[crop_prices_df['Crop'] == crop]
    
    # Get the price of the crop in the specified year
    if not crop_df.empty:
        price = crop_df[year].values[0]
        return price
    else:
        return None","# Initialize the table into a dataframe
crop_prices_df = pd.DataFrame({
    'Crop': ['Lentils', 'Canola', 'Onions', 'Potatoes'],
    '2003': [18, 10, 11, 4],
    '2004': [14, 11, 7, 4]
})

# Call the tool to solve the problem
potato_price_2003 = get_crop_price(crop_prices_df, 'Potatoes', '2003')
print(potato_price_2003)","def get_item_value_in_specific_year(item_values_df, item_col, item_name, year):
    """"""
    This function takes in a pandas DataFrame representing a table of item values over time, an item name, and a year, and returns the value of the item in the specified year.
    
    Args:
    item_values_df (pd.DataFrame): A pandas DataFrame containing item values over time with columns specified by item_col, and years as column names.
    item_col (str): The column name for the item names.
    item_name (str): The name of the item to get the value for.
    year (str): The year to get the value for the specified item.
    
    Returns:
    float: The value of the specified item in the specified year.
    """"""
    # Filter the DataFrame for the specific item
    item_df = item_values_df[item_values_df[item_col] == item_name]
    
    # Get the value of the item in the specified year
    if not item_df.empty:
        value = item_df[year].values[0]
        return value
    else:
        return None","item_values_data = {
    'Crop': ['Lentils', 'Canola', 'Onions', 'Potatoes'],
    '2003': [18, 10, 11, 4],
    '2004': [14, 11, 7, 4]
}

item_values_df = pd.DataFrame(item_values_data)

print(get_item_value_in_specific_year(item_values_df, ""Crop"", ""Potatoes"", ""2003""))"
"To get credit for meeting his school's community service requirement, Edmond kept a volunteering log. What is the range of the numbers?",5.0,"Day | Hours
Monday | 6
Tuesday | 6
Wednesday | 6
Thursday | 8
Friday | 3
Saturday | 7",7,4943,"import pandas as pd

def calculate_range(df):
    """"""
    This function takes in a pandas DataFrame representing a volunteering log and returns the range of the hours.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing days and hours with columns 'Day' and 'Hours'.
    Returns:
    int: The range of the hours.
    """"""
    # Calculate the range of the hours
    range_hours = df['Hours'].max() - df['Hours'].min()
    
    return range_hours","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    'Hours': [6, 6, 6, 8, 3, 7]
})
# Call the tool to solve the problem
range_hours = calculate_range(df)
print(range_hours)","def calculate_range_of_column(data_frame, column_name):
    """"""
    This function takes in a pandas DataFrame and a column name, and returns the range of the values in the column.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the data.
    column_name (str): The name of the column to calculate the range.
    
    Returns:
    float: The range of the values in the column.
    """"""
    # Calculate the range of the values in the column
    range_values = data_frame[column_name].max() - data_frame[column_name].min()
    
    return range_values","df = pd.DataFrame({
    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    'Hours': [6, 6, 6, 8, 3, 7]
})
print(calculate_range_of_column(data_frame=df, column_name='Hours'))"
An adventure tour company found out how many whales people saw on its most popular whale tour. How many people are there in all?,43.0,"Whales spotted | Frequency
0 | 0
1 | 3
2 | 20
3 | 5
4 | 7
5 | 8",8,13442,"import pandas as pd

def calculate_total_people(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of whales spotted and returns the total number of people.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of whales spotted and the frequency with columns 'Whales spotted' and 'Frequency'.
    Returns:
    int: The total number of people.
    """"""
    # Multiply the number of whales spotted by the frequency and sum up the results
    total_people = df['Frequency'].sum()
    
    return total_people","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Whales spotted': [0, 1, 2, 3, 4, 5],
    'Frequency': [0, 3, 20, 5, 7, 8]
})

# Call the tool to solve the problem
total_people = calculate_total_people(df)
print(total_people)","def calculate_total_from_frequency_table(data_frame, frequency_col):
    """"""
    This function takes in a pandas DataFrame representing a frequency table and returns the total number of items based on the frequencies.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the frequency table with a column specified by frequency_col.
    frequency_col (str): The column name for the frequencies.
    
    Returns:
    int: The total number of items.
    """"""
    # Sum up the values in the frequency column
    total_items = data_frame[frequency_col].sum()
    
    return total_items","df = pd.DataFrame({
    'Whales spotted': [0, 1, 2, 3, 4, 5],
    'Frequency': [0, 3, 20, 5, 7, 8]
})

total_people = calculate_total_from_frequency_table(data_frame=df, frequency_col='Frequency')
print(total_people)"
An adventure tour company found out how many whales people saw on its most popular whale tour. How many people are there in all?,42.0,"Whales spotted | Frequency
0 | 6
1 | 0
2 | 14
3 | 2
4 | 20",7,3382,"import pandas as pd

def calculate_total_people(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of whales spotted and returns the total number of people.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of whales spotted and the frequency with columns 'Whales spotted' and 'Frequency'.
    Returns:
    int: The total number of people.
    """"""
    # Multiply the number of whales spotted by the frequency and sum up the results
    total_people = df['Frequency'].sum()
    
    return total_people","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Whales spotted': [0, 1, 2, 3, 4],
    'Frequency': [6, 0, 14, 2, 20]
})
# Call the tool to solve the problem
total_people = calculate_total_people(df)
print(total_people)","def calculate_total_count_from_frequency(data_frame, frequency_col):
    """"""
    This function takes in a pandas DataFrame representing a frequency table and returns the total count based on the frequency column.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the frequency table with a column specified by frequency_col.
    frequency_col (str): The column name for the frequency values.
    
    Returns:
    int: The total count based on the frequency column.
    """"""
    # Sum up the frequency column to get the total count
    total_count = data_frame[frequency_col].sum()
    
    return total_count","df = pd.DataFrame({
    'Whales spotted': [0, 1, 2, 3, 4],
    'Frequency': [6, 0, 14, 2, 20]
})
print(calculate_total_count_from_frequency(data_frame=df, frequency_col=""Frequency""))"
"An Idaho farmer has been monitoring crop prices over time. Per cwt, how much more did lentils cost in 2006 than in 2005?",4.0,"Crop | 2005 | 2006
Lentils | $12 | $16
Potatoes | $6 | $6
Canola | $10 | $12
Onions | $8 | $17
Peas | $6 | $8",5,11942,"import pandas as pd

def calculate_price_difference(df, crop):
    """"""
    This function takes in a pandas DataFrame representing a crop price table and a string of crop name, and returns the price difference of the crop between 2006 and 2005.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing crop names and their prices in 2005 and 2006 with columns 'Crop', '2005' and '2006'.
    crop (str): A string representing the name of the crop.
    Returns:
    float: The price difference of the crop between 2006 and 2005.
    """"""
    # Filter the DataFrame for the specific crop
    crop_df = df[df['Crop'] == crop]
    if not crop_df.empty:
        price_2005 = crop_df['2005'].values[0]
        price_2006 = crop_df['2006'].values[0]
        price_difference = price_2006 - price_2005
        return price_difference
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Crop': ['Lentils', 'Potatoes', 'Canola', 'Onions', 'Peas'],
    '2005': [12, 6, 10, 8, 6],
    '2006': [16, 6, 12, 17, 8]
})

# Call the tool to solve the problem
price_difference = calculate_price_difference(df, 'Lentils')
print(price_difference)","def calculate_price_difference_between_years(item_prices_df, item_col, year1_col, year2_col, item_name):
    """"""
    This function takes in a pandas DataFrame representing a table of item prices per year and a string of item name, and returns the price difference of the item between year2 and year1.
    
    Args:
    item_prices_df (pd.DataFrame): A pandas DataFrame containing item names and their prices in year1 and year2.
    item_col (str): The column name for the item names.
    year1_col (str): The column name for the item prices in year1.
    year2_col (str): The column name for the item prices in year2.
    item_name (str): A string representing the name of the item.
    
    Returns:
    float: The price difference of the item between year2 and year1.
    """"""
    # Filter the DataFrame for the specific item name
    item_price_df = item_prices_df[item_prices_df[item_col] == item_name]
    if not item_price_df.empty:
        price_year1 = item_price_df[year1_col].values[0]
        price_year2 = item_price_df[year2_col].values[0]
        price_difference = price_year2 - price_year1
        return price_difference
    else:
        return None","item_prices_data = {
    'Crop': ['Lentils', 'Potatoes', 'Canola', 'Onions', 'Peas'],
    '2005': [12, 6, 10, 8, 6],
    '2006': [16, 6, 12, 17, 8]
}

item_prices_df = pd.DataFrame(item_prices_data)

print(calculate_price_difference_between_years(item_prices_df, ""Crop"", ""2005"", ""2006"", ""Lentils""))"
A Technical Assistance Manager monitored his customers' wait times. How many people waited for exactly 39 minutes?,3.0,"Stem | Leaf 
3 | 1, 1, 7, 9, 9, 9
4 | 0, 3, 5, 5, 6, 7, 8, 9
5 | 0, 6
6 | 7, 9, 9
7 | 3, 7
8 | 0, 2, 7, 9",6,15580,"import pandas as pd

def count_customers_with_wait_time(df, wait_time):
    """"""
    This function takes in a pandas dataframe of customers' wait times, and returns the number of customers who waited for exactly a certain amount of time.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the customers' wait times.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    wait_time (int): The wait time to count.
    Returns:
    int: The number of customers who waited for exactly the specified wait time.
    """"""
    # prepare a list to calculate wait times
    wait_times = []
    # calculate the total wait time for each customer
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            wait_times.append(stem * 10 + leaf[j])
    # filter the customers where the wait time is exactly the specified wait time
    filtered = [time for time in wait_times if time == wait_time]
    # count the number of customers
    num_customers = len(filtered)
    return num_customers","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [3, 4, 5, 6, 7, 8],
    'Leaf': [[1, 1, 7, 9, 9, 9], [0, 3, 5, 5, 6, 7, 8, 9], [0, 6], [7, 9, 9], [3, 7], [0, 2, 7, 9]]
})
# Call the tool to solve the problem
print(count_customers_with_wait_time(df, 39))","def count_instances_with_specified_value_in_stem_leaf(data_frame, stem_col, leaf_col, specified_value):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of instances and a specified value, and returns the number of instances that have values equal to the specified value.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of instances with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    specified_value (int): The specified value for filtering instances.
    
    Returns:
    int: The number of instances with values equal to the specified value.
    """"""
    # Initialize the list to calculate instances
    instances = []
    
    # Calculate the total value of instances
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            instances.append(stem * 10 + leaf[j])
    
    # Filter the instances where the total value is equal to the specified value
    filtered = [instance for instance in instances if instance == specified_value]
    
    # Count the number of instances
    num_instances = len(filtered)
    
    return num_instances","data = {
    ""Stem"": [3, 4, 5, 6, 7, 8],
    ""Leaf"": [[1, 1, 7, 9, 9, 9], [0, 3, 5, 5, 6, 7, 8, 9], [0, 6], [7, 9, 9], [3, 7], [0, 2, 7, 9]]
}

df = pd.DataFrame(data)
print(count_instances_with_specified_value_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf"", specified_value=39))"
