{"question":"Natalie recently emptied her coin jar and counted the coins. What fraction of the coins were copper coins? Simplify your answer.","answer":0.3552123552,"table":"Coin | Number of coins\nCopper coins | 92\nSilver coins | 96\nGold coins | 34\nOther | 37","level":7,"tool_id":14796,"code":"import pandas as pd\n\ndef calculate_fraction_of_copper_coins(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of coins and their counts, and returns the fraction of coins that are copper coins.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing coin types and their counts with columns 'Coin' and 'Number of coins'.\n    Returns:\n    float: The fraction of coins that are copper coins.\n    \"\"\"\n    # Calculate the total number of coins\n    total_coins = df['Number of coins'].sum()\n    \n    # Filter the DataFrame for copper coins\n    copper_coins_df = df[df['Coin'] == 'Copper coins']\n    \n    # Calculate the number of copper coins\n    num_copper_coins = copper_coins_df['Number of coins'].values[0]\n    \n    # Calculate the fraction of coins that are copper coins\n    fraction_copper_coins = num_copper_coins \/ total_coins\n    \n    return fraction_copper_coins","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Coin': ['Copper coins', 'Silver coins', 'Gold coins', 'Other'],\n    'Number of coins': [92, 96, 34, 37]\n})\n# Call the tool to solve the problem\nfraction_copper_coins = calculate_fraction_of_copper_coins(df)\nprint(f\"The fraction of the coins that were copper coins is {fraction_copper_coins}.\")"}
{"question":"Some companies compared how many phone calls they made. How many more phone calls did Tad's Coffee Company make than Northside Cycles?","answer":2933.0,"table":"Company | Number of phone calls\nTad's Coffee Company | 7,202\nNorthside Cycles | 4,269\nCritical Insight Consulting | 2,332\nReardon Corporation | 8,620\nMelbourne Medical Devices | 1,293","level":3,"tool_id":3764,"code":"import pandas as pd\n\ndef calculate_difference(df, company1, company2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of companies and their number of phone calls, and two company names. It returns the difference in the number of phone calls between the two companies.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing company names and their number of phone calls with columns 'Company' and 'Number of phone calls'.\n    company1 (str): The name of the first company.\n    company2 (str): The name of the second company.\n    Returns:\n    int: The difference in the number of phone calls between the two companies.\n    \"\"\"\n    # Filter the DataFrame for the specific companies\n    company1_df = df[df['Company'] == company1]\n    company2_df = df[df['Company'] == company2]\n    \n    # Get the number of phone calls for each company\n    company1_calls = company1_df['Number of phone calls'].values[0]\n    company2_calls = company2_df['Number of phone calls'].values[0]\n    \n    # Calculate and return the difference\n    return abs(company1_calls - company2_calls)","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Company': [\"Tad's Coffee Company\", 'Northside Cycles', 'Critical Insight Consulting', 'Reardon Corporation', 'Melbourne Medical Devices'],\n    'Number of phone calls': [7202, 4269, 2332, 8620, 1293]\n})\n# Call the tool to solve the problem\ndifference = calculate_difference(df, \"Tad's Coffee Company\", 'Northside Cycles')\nprint(difference)"}
{"question":"Roger is cleaning his workbench and organizing his tools. He uses a frequency chart to keep track of the different types of tools he has. If 1\/2 of Roger's wrenches are metric, how many metric wrenches does Roger have?","answer":9.0,"table":"Type | Frequency\nhammer | 4\npliers | 7\nscrewdriver | 14\nwrench | 18","level":5,"tool_id":13263,"code":"import pandas as pd\n\ndef calculate_metric_wrenches(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a frequency chart of tools, and returns the number of metric wrenches.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing types of tools and their frequencies with columns 'Type' and 'Frequency'.\n    Returns:\n    int: The number of metric wrenches.\n    \"\"\"\n    # Filter the DataFrame for wrenches\n    wrench_df = df[df['Type'] == 'wrench']\n    if not wrench_df.empty:\n        # Calculate the number of metric wrenches\n        metric_wrenches = wrench_df['Frequency'].values[0] \/\/ 2\n        return metric_wrenches\n    else:\n        return 0","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Type': ['hammer', 'pliers', 'screwdriver', 'wrench'],\n    'Frequency': [4, 7, 14, 18]\n})\n# Call the tool to solve the problem\nprint(calculate_metric_wrenches(df))"}
{"question":"A store recently released a new line of alarm clocks that emits a smell to wake you up in the morning. The head of sales tracked buyers' ages and which smells they preferred. What is the probability that a randomly selected buyer is a teenager and purchased a clock scented like bacon? Simplify any fractions.","answer":0.2142857143,"table":" | Bacon | Cinnamon\nUnder 13 years old | 2 | 4\nA teenager | 3 | 5","level":8,"tool_id":12135,"code":"import pandas as pd\n\ndef calculate_probability(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of buyers' ages and their preferred smells, and returns the probability that a randomly selected buyer is a teenager and purchased a clock scented like bacon.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing buyers' ages and their preferred smells with columns 'Age' and 'Smell'.\n    Returns:\n    float: The probability that a randomly selected buyer is a teenager and purchased a clock scented like bacon.\n    \"\"\"\n    # Calculate the total number of buyers\n    total_buyers = df.sum().sum()\n    \n    # Filter the DataFrame for teenagers who purchased a bacon-scented clock\n    teenager_bacon_buyers = df.loc['A teenager', 'Bacon']\n    \n    # Calculate the probability\n    probability = teenager_bacon_buyers \/ total_buyers\n    \n    return probability","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bacon': [2, 3],\n    'Cinnamon': [4, 5]\n}, index=['Under 13 years old', 'A teenager'])\n\n# Call the tool to solve the problem\nprobability = calculate_probability(df)\n\n# Print out the answer\nprint(f\"The probability that a randomly selected buyer is a teenager and purchased a clock scented like bacon is {probability}.\")"}
{"question":"A store recently released a new line of alarm clocks that emits a smell to wake you up in the morning. The head of sales tracked buyers' ages and which smells they preferred. What is the probability that a randomly selected buyer is a teenager and purchased a clock scented like bacon? Simplify any fractions.","answer":0.2727272727,"table":" | Bacon | Cinnamon\nUnder 13 years old | 2 | 3\nA teenager | 3 | 3","level":8,"tool_id":3637,"code":"import pandas as pd\n\ndef calculate_probability(df, age_group, scent):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of buyers' ages and their preferred scents, and returns the probability that a randomly selected buyer is from a specific age group and purchased a clock with a specific scent.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of buyers in each age group for each scent. The DataFrame should have age groups as index and scents as columns.\n    age_group (str): The age group to calculate the probability for.\n    scent (str): The scent to calculate the probability for.\n    Returns:\n    float: The probability that a randomly selected buyer is from the specified age group and purchased a clock with the specified scent.\n    \"\"\"\n    # Calculate the total number of buyers\n    total_buyers = df.sum().sum()\n    \n    # Get the number of buyers in the specified age group who purchased a clock with the specified scent\n    buyers_in_group_with_scent = df.loc[age_group, scent]\n    \n    # Calculate the probability\n    probability = buyers_in_group_with_scent \/ total_buyers\n    \n    return probability","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bacon': [2, 3],\n    'Cinnamon': [3, 3]\n}, index=['Under 13 years old', 'A teenager'])\n\n# Call the tool to solve the problem\nprobability = calculate_probability(df, 'A teenager', 'Bacon')\nprint(f\"The probability that a randomly selected buyer is a teenager and purchased a clock scented like bacon is {probability}.\")"}
{"question":"Murphy has a collection of marbles of different sizes and colors. What is the probability that a randomly selected marble is red and big? Simplify any fractions.","answer":0.2307692308,"table":" | Big | Small\nRed | 3 | 4\nGreen | 2 | 4","level":8,"tool_id":16902,"code":"import pandas as pd\n\ndef create_marble_df():\n    data = {'Color': ['Red', 'Green'],\n            'Big': [3, 2],\n            'Small': [4, 4]}\n    df = pd.DataFrame(data)\n    return df\n\ndef calculate_probability(df, color, size):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a marble table, a color, and a size, and returns the probability of selecting a marble with the specified color and size.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing marble counts with columns 'Color', 'Big', and 'Small'.\n    color (str): The color of the marble to calculate the probability for.\n    size (str): The size of the marble to calculate the probability for.\n    Returns:\n    float: The probability of selecting a marble with the specified color and size.\n    \"\"\"\n    # Calculate the total number of marbles\n    total_marbles = df['Big'].sum() + df['Small'].sum()\n    \n    # Filter the DataFrame for the specified color and size\n    color_size_df = df[df['Color'] == color]\n    if not color_size_df.empty:\n        color_size_count = color_size_df[size].values[0]\n        probability = color_size_count \/ total_marbles\n        return probability","api_call":"# Initialize the table into a dataframe\nmarble_df = pd.DataFrame({\n    'Color': ['Red', 'Green'],\n    'Big': [3, 2],\n    'Small': [4, 4]\n})\n\n# Call the tool to solve the problem\nprobability_red_big = calculate_probability(marble_df, 'Red', 'Big')\nprint(probability_red_big)"}
{"question":"For a science fair project, Deb tracked the temperature each day. What is the lowest temperature?","answer":10.0,"table":"Stem | Leaf \n1 | 0, 1, 2, 2, 3, 3, 3\n2 | 1, 5, 6, 8\n3 | 3, 3, 4, 4, 4, 5\n4 | 3","level":6,"tool_id":3081,"code":"import pandas as pd\ndef find_lowest_temperature(df):\n    \"\"\"\n    This function takes in a pandas dataframe of temperatures, and returns the lowest temperature.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the temperatures.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The lowest temperature.\n    \"\"\"\n    # prepare a list to calculate temperature in each day\n    temperatures = []\n    # calculate the temperature in each day\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            temperatures.append(stem * 10 + leaf[j])\n    # find the lowest temperature\n    lowest_temperature = min(temperatures)\n    return lowest_temperature","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[0, 1, 2, 2, 3, 3, 3], [1, 5, 6, 8], [3, 3, 4, 4, 4, 5], [3]]\n})\n# Call the tool to solve the problem\nprint(find_lowest_temperature(df))"}
{"question":"Arctic Fox Ski Village has trails on the north and south sides of the mountain. The frequency chart shows the number of trails of each difficulty on the south side. There are another 21 trails on the north side of the mountain. How many ski trails are there on both sides of the mountain combined?","answer":47.0,"table":"Difficulty | Frequency\neasy | 7\nintermediate | 8\nexpert | 11","level":5,"tool_id":16075,"code":"import pandas as pd\n\ndef calculate_total_trails(df, north_trails):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a frequency chart of trails and the number of trails on the north side, and returns the total number of trails on both sides.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing trail difficulties and their frequencies with columns 'Difficulty' and 'Frequency'.\n    north_trails (int): The number of trails on the north side.\n    Returns:\n    int: The total number of trails on both sides.\n    \"\"\"\n    # Calculate the total number of trails on the south side\n    south_trails = df['Frequency'].sum()\n    \n    # Calculate the total number of trails on both sides\n    total_trails = south_trails + north_trails\n    \n    return total_trails","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Difficulty': ['easy', 'intermediate', 'expert'],\n    'Frequency': [7, 8, 11]\n})\n\n# Number of trails on the north side\nnorth_trails = 21\n\n# Call the tool to solve the problem\ntotal_trails = calculate_total_trails(df, north_trails)\n\n# Print the answer\nprint(total_trails)"}
{"question":"Mr. Swift, the band director, counted the number of instruments played by each member of the band. How many more girls than boys play the saxophone?","answer":6.0,"table":"Instrument | Boys | Girls\nSaxophone | 10 | 16\nDrums | 10 | 20\nClarinet | 14 | 20\nFlute | 5 | 7\nTrumpet | 16 | 11","level":5,"tool_id":16182,"code":"import pandas as pd\n\ndef calculate_difference_in_instrument(df, instrument):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of instruments played by boys and girls, and returns the difference in the number of girls and boys playing the specified instrument.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of instruments played by boys and girls with columns 'Instrument', 'Boys', and 'Girls'.\n    instrument (str): The name of the instrument for which the difference in the number of players is to be calculated.\n    Returns:\n    int: The difference in the number of girls and boys playing the specified instrument.\n    \"\"\"\n    # Filter the DataFrame for the specific instrument\n    instrument_df = df[df['Instrument'] == instrument]\n    \n    if not instrument_df.empty:\n        boys = instrument_df['Boys'].values[0]\n        girls = instrument_df['Girls'].values[0]\n        difference = girls - boys\n        return difference\n    else:\n        return 0","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Instrument': ['Saxophone', 'Drums', 'Clarinet', 'Flute', 'Trumpet'],\n    'Boys': [10, 10, 14, 5, 16],\n    'Girls': [16, 20, 20, 7, 11]\n})\n# Call the tool to solve the problem\ndifference = calculate_difference_in_instrument(df, 'Saxophone')\nprint(difference)"}
{"question":"Wyatt recalled how many goals he had made in soccer practice each day. What is the mode of the numbers?","answer":6.0,"table":"Day | Number of goals\nFriday | 10\nSaturday | 6\nSunday | 2\nMonday | 2\nTuesday | 10\nWednesday | 6\nThursday | 6","level":5,"tool_id":3147,"code":"import pandas as pd\nfrom collections import Counter\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of days and number of goals, and returns the mode of the number of goals.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing days and number of goals with columns 'Day' and 'Number of goals'.\n    Returns:\n    int: The mode of the number of goals.\n    \"\"\"\n    # Extract the 'Number of goals' column\n    goals = df['Number of goals']\n    \n    # Calculate the frequency of each number of goals\n    freq_dict = Counter(goals)\n    \n    # Find the number of goals with the highest frequency\n    mode = max(freq_dict.keys(), key=(lambda k: freq_dict[k]))\n    \n    return mode","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Number of goals': [10, 6, 2, 2, 10, 6, 6]\n})\n# Call the tool to solve the problem\nmode = calculate_mode(df)\nprint(mode)"}
{"question":"Andrew, a fantasy football fan, carefully studied the number of touchdowns completed by his favorite players last season. How many players scored more than 1 touchdown last season?","answer":54.0,"table":"Touchdowns scored | Frequency\n0 | 13\n1 | 1\n2 | 7\n3 | 0\n4 | 19\n5 | 12\n6 | 16","level":7,"tool_id":15484,"code":"import pandas as pd\n\ndef count_players_with_more_than_one_touchdown(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of touchdowns scored and their frequencies, and returns the number of players who scored more than 1 touchdown.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of touchdowns scored and their frequencies with columns 'Touchdowns scored' and 'Frequency'.\n    Returns:\n    int: The number of players who scored more than 1 touchdown.\n    \"\"\"\n    # Filter the DataFrame for players who scored more than 1 touchdown\n    more_than_one_touchdown_df = df[df['Touchdowns scored'] > 1]\n    \n    # Calculate the total number of players who scored more than 1 touchdown\n    num_players = more_than_one_touchdown_df['Frequency'].sum()\n    \n    return num_players","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Touchdowns scored': [0, 1, 2, 3, 4, 5, 6],\n    'Frequency': [13, 1, 7, 0, 19, 12, 16]\n})\n# Call the tool to solve the problem\nprint(count_players_with_more_than_one_touchdown(df))"}
{"question":"A store recently released a new line of alarm clocks that emits a smell to wake you up in the morning. The head of sales tracked buyers' ages and which smells they preferred. What is the probability that a randomly selected buyer purchased a clock scented like bacon and is a teenager? Simplify any fractions.","answer":0.4545454545,"table":" | Under 13 years old | A teenager\nBacon | 2 | 5\nCinnamon | 3 | 1","level":8,"tool_id":2074,"code":"import pandas as pd\n\ndef calculate_probability(df, smell, age_group):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of buyers' ages and their preferred smells, a smell, and an age group, and returns the probability that a randomly selected buyer from the given age group preferred the given smell.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of buyers for each smell and age group.\n    smell (str): The smell of interest.\n    age_group (str): The age group of interest.\n    Returns:\n    float: The probability that a randomly selected buyer from the given age group preferred the given smell.\n    \"\"\"\n    # Calculate the total number of buyers\n    total_buyers = df.sum().sum()\n    \n    # Calculate the number of buyers who preferred the given smell and are from the given age group\n    smell_age_group_buyers = df.loc[smell, age_group]\n    \n    # Calculate the probability\n    probability = smell_age_group_buyers \/ total_buyers\n    \n    return probability","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Under 13 years old': [2, 3],\n    'A teenager': [5, 1]\n}, index=['Bacon', 'Cinnamon'])\n\n# Call the tool to solve the problem\nprobability = calculate_probability(df, 'Bacon', 'A teenager')\nprint(f\"The probability is {probability}\")"}
{"question":"A store recently released a new line of alarm clocks that emits a smell to wake you up in the morning. The head of sales tracked buyers' ages and which smells they preferred. What is the probability that a randomly selected buyer purchased a clock scented like bacon and is a teenager? Simplify any fractions.","answer":0.25,"table":" | Under 13 years old | A teenager\nBacon | 6 | 5\nCinnamon | 6 | 3","level":8,"tool_id":238,"code":"import pandas as pd\n\ndef calculate_probability(df, smell, age_group):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of buyers' ages and their preferred smells, a smell, and an age group, and returns the probability that a randomly selected buyer from the specified age group purchased a clock with the specified smell.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of buyers for each smell and age group.\n    smell (str): The smell of the clock.\n    age_group (str): The age group of the buyer.\n    Returns:\n    float: The probability that a randomly selected buyer from the specified age group purchased a clock with the specified smell.\n    \"\"\"\n    # Calculate the total number of buyers\n    total_buyers = df.sum().sum()\n    \n    # Calculate the number of buyers who purchased a clock with the specified smell and are from the specified age group\n    specific_buyers = df.loc[smell, age_group]\n    \n    # Calculate the probability\n    probability = specific_buyers \/ total_buyers\n    \n    return probability","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Under 13 years old': [6, 6],\n    'A teenager': [5, 3]\n}, index=['Bacon', 'Cinnamon'])\n\n# Call the tool to solve the problem\nprobability = calculate_probability(df, 'Bacon', 'A teenager')\nprint(f\"The probability is {probability}\")"}
{"question":"A store recently released a new line of alarm clocks that emits a smell to wake you up in the morning. The head of sales tracked buyers' ages and which smells they preferred. What is the probability that a randomly selected buyer purchased a clock scented like bacon and is a teenager? Simplify any fractions.","answer":0.2857142857,"table":" | Under 13 years old | A teenager\nBacon | 2 | 4\nCinnamon | 4 | 4","level":8,"tool_id":1903,"code":"import pandas as pd\n\ndef calculate_probability(df, smell, age_group):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of buyers' ages and preferred smells, a smell, and an age group, and returns the probability that a randomly selected buyer from the specified age group preferred the specified smell.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of buyers for each smell and age group. The DataFrame should have smells as the index and age groups as the columns.\n    smell (str): The smell to calculate the probability for.\n    age_group (str): The age group to calculate the probability for.\n    Returns:\n    float: The probability that a randomly selected buyer from the specified age group preferred the specified smell.\n    \"\"\"\n    # Calculate the total number of buyers\n    total_buyers = df.sum().sum()\n    \n    # Calculate the number of buyers for the specified smell and age group\n    buyers_for_smell_and_age_group = df.loc[smell, age_group]\n    \n    # Calculate the probability\n    probability = buyers_for_smell_and_age_group \/ total_buyers\n    \n    return probability","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Under 13 years old': [2, 4],\n    'A teenager': [4, 4]\n}, index=['Bacon', 'Cinnamon'])\n\n# Call the tool to solve the problem\nprobability = calculate_probability(df, 'Bacon', 'A teenager')\nprint(probability)"}
{"question":"A fashion magazine poll asks how many winter hats each reader owns. How many readers have exactly 3 winter hats?","answer":17.0,"table":"Number of winter hats | Frequency\n0 | 6\n1 | 20\n2 | 12\n3 | 17","level":8,"tool_id":15461,"code":"import pandas as pd\n\ndef count_readers_with_3_hats(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a frequency table of winter hats owned by readers, and returns the number of readers who own exactly 3 winter hats.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of winter hats and their frequencies with columns 'Number of winter hats' and 'Frequency'.\n    Returns:\n    int: The number of readers who own exactly 3 winter hats.\n    \"\"\"\n    # Filter the DataFrame for the row where the number of winter hats is 3\n    row = df[df['Number of winter hats'] == 3]\n    \n    # If the row exists, return the frequency. Otherwise, return 0.\n    if not row.empty:\n        return row['Frequency'].values[0]\n    else:\n        return 0","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of winter hats': [0, 1, 2, 3],\n    'Frequency': [6, 20, 12, 17]\n})\n# Call the tool to solve the problem\nprint(count_readers_with_3_hats(df))"}
{"question":"A fashion magazine poll asks how many winter hats each reader owns. How many readers have exactly 3 winter hats?","answer":10.0,"table":"Number of winter hats | Frequency\n0 | 2\n1 | 15\n2 | 6\n3 | 10\n4 | 7\n5 | 11\n6 | 3","level":8,"tool_id":10037,"code":"import pandas as pd\n\ndef count_readers_with_3_winter_hats(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of the number of winter hats and their frequencies, and returns the number of readers who have exactly 3 winter hats.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of winter hats and their frequencies with columns 'Number of winter hats' and 'Frequency'.\n    Returns:\n    int: The number of readers who have exactly 3 winter hats.\n    \"\"\"\n    # Filter the DataFrame for the specific number of winter hats\n    hat_df = df[df['Number of winter hats'] == 3]\n    \n    # Get the frequency of readers with 3 winter hats\n    if not hat_df.empty:\n        frequency = hat_df['Frequency'].values[0]\n    else:\n        frequency = 0\n    \n    return frequency","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of winter hats': [0, 1, 2, 3, 4, 5, 6],\n    'Frequency': [2, 15, 6, 10, 7, 11, 3]\n})\n# Call the tool to solve the problem\nprint(count_readers_with_3_winter_hats(df))"}
{"question":"A fashion magazine poll asks how many winter hats each reader owns. How many readers have exactly 1 winter hat?","answer":10.0,"table":"Number of winter hats | Frequency\n0 | 13\n1 | 10\n2 | 0\n3 | 11\n4 | 2\n5 | 5\n6 | 3","level":7,"tool_id":6499,"code":"import pandas as pd\n\ndef count_readers_with_one_hat(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a frequency table of the number of winter hats each reader owns, and returns the number of readers who own exactly one winter hat.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of winter hats and their frequencies with columns 'Number of winter hats' and 'Frequency'.\n    Returns:\n    int: The number of readers who own exactly one winter hat.\n    \"\"\"\n    # Filter the DataFrame for the row where the number of winter hats is 1\n    one_hat_df = df[df['Number of winter hats'] == 1]\n    \n    # If the DataFrame is not empty, return the frequency of readers who own exactly one winter hat\n    if not one_hat_df.empty:\n        return one_hat_df['Frequency'].values[0]\n    else:\n        return 0","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of winter hats': [0, 1, 2, 3, 4, 5, 6],\n    'Frequency': [13, 10, 0, 11, 2, 5, 3]\n})\n# Call the tool to solve the problem\nprint(count_readers_with_one_hat(df))"}
{"question":"While working as a summer camp counselor, Simon monitored how many candy necklaces each child made. How many children are there in all?","answer":15.0,"table":"Candy necklaces made | Frequency\n0 | 11\n1 | 3\n2 | 0\n3 | 1","level":8,"tool_id":3610,"code":"import pandas as pd\n\ndef calculate_total_children(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a frequency table of candy necklaces made by children, and returns the total number of children.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of candy necklaces made and the frequency with columns 'Candy necklaces made' and 'Frequency'.\n    Returns:\n    int: The total number of children.\n    \"\"\"\n    # Multiply the number of candy necklaces made by the frequency and sum up the results to get the total number of children\n    total_children = df['Frequency'].sum()\n    \n    return total_children","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Candy necklaces made': [0, 1, 2, 3],\n    'Frequency': [11, 3, 0, 1]\n})\n# Call the tool to solve the problem\ntotal_children = calculate_total_children(df)\nprint(total_children)"}
{"question":"Four of the sports teams from Westminster High School decided to raise funds to buy new sports equipment. What fraction of the funds were raised by the tennis team? Simplify your answer.","answer":0.2514792899,"table":"Team | Funds raised ($)\nSoccer | 770\nTennis | 850\nTrack | 940\nWater polo | 820","level":7,"tool_id":732,"code":"import pandas as pd\nfrom fractions import Fraction\n\ndef calculate_fraction_of_funds_raised(df, team_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of funds raised by different teams and a team name, and returns the fraction of funds raised by the specified team.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing team names and the funds raised with columns 'Team' and 'Funds raised ($)'.\n    team_name (str): The name of the team for which the fraction of funds raised is to be calculated.\n    Returns:\n    Fraction: The fraction of funds raised by the specified team.\n    \"\"\"\n    # Get the total funds raised by all teams\n    total_funds = df['Funds raised ($)'].sum()\n    \n    # Get the funds raised by the specified team\n    team_funds = df[df['Team'] == team_name]['Funds raised ($)'].values[0]\n    \n    # Calculate the fraction of funds raised by the specified team\n    fraction = Fraction(team_funds, total_funds)\n    \n    return fraction","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Team': ['Soccer', 'Tennis', 'Track', 'Water polo'],\n    'Funds raised ($)': [770, 850, 940, 820]\n})\n\n# Call the tool to solve the problem\nfraction = calculate_fraction_of_funds_raised(df, 'Tennis')\n\n# Print the answer\nprint(f\"The fraction of the funds raised by the tennis team is {fraction}.\")"}
{"question":"At a swim meet, Grayson noted the size of various swim teams. How many teams have at least 37 swimmers?","answer":13.0,"table":"Stem | Leaf \n2 | 0, 2, 2, 4, 6, 7, 7\n3 | 5, 6\n4 | 3\n5 | 2, 3\n6 | 6, 8\n7 | 2, 3, 9\n8 | 0, 1, 6, 9\n9 | 0","level":7,"tool_id":11914,"code":"import pandas as pd\ndef count_teams_with_37_swimmers(df):\n    \"\"\"\n    This function takes in a pandas dataframe of swim teams, and returns the number of teams that have at least 37 swimmers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the size of various swim teams.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of teams that have at least 37 swimmers.\n    \"\"\"\n    # prepare a list to calculate swimmers in each team\n    swimmers = []\n    # calculate the total number of swimmers in each team\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            swimmers.append(stem * 10 + leaf[j])\n    # filter the teams where the total number of swimmers is greater than or equal to 37\n    filtered = [team for team in swimmers if team >= 37]\n    # count the number of rows\n    num_teams = len(filtered)\n    return num_teams","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[0, 2, 2, 4, 6, 7, 7], [5, 6], [3], [2, 3], [6, 8], [2, 3, 9], [0, 1, 6, 9], [0]]\n})\n# Call the tool to solve the problem\nprint(count_teams_with_37_swimmers(df))"}
{"question":"Patterson has a collection of marbles of different sizes and colors. What is the probability that a randomly selected marble is big and red? Simplify any fractions.","answer":0.1818181818,"table":" | Red | Green\nBig | 2 | 2\nSmall | 4 | 3","level":8,"tool_id":12936,"code":"import pandas as pd\n\ndef calculate_probability(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of marble counts, and returns the probability of selecting a big and red marble.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing marble counts with columns 'Red', 'Green' and index 'Big', 'Small'.\n    Returns:\n    float: The probability of selecting a big and red marble.\n    \"\"\"\n    # Calculate the total number of marbles\n    total_marbles = df.sum().sum()\n    \n    # Get the count of big and red marbles\n    big_red_marbles = df.loc['Big', 'Red']\n    \n    # Calculate the probability\n    probability = big_red_marbles \/ total_marbles\n    \n    return probability","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Red': [2, 4],\n    'Green': [2, 3]\n}, index=['Big', 'Small'])\n\n# Call the tool to solve the problem\nprobability = calculate_probability(df)\n\n# Print the answer\nprint(f\"The probability that a randomly selected marble is big and red is {probability}\")"}
{"question":"Manuel measured the length of each scarf in the clothing store where he works. How many scarves are exactly 90 centimeters?","answer":3.0,"table":"Stem | Leaf \n6 | 9\n7 | 2, 5, 9, 9\n8 | 2\n9 | 0, 0, 0","level":4,"tool_id":11772,"code":"import pandas as pd\ndef count_scarves_of_length_90(df):\n    \"\"\"\n    This function takes in a pandas dataframe of scarf lengths, and returns the number of scarves that are exactly 90 centimeters.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the lengths of scarves.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of scarves that are exactly 90 centimeters.\n    \"\"\"\n    # prepare a list to calculate length of each scarf\n    lengths = []\n    # calculate the total length of each scarf\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            lengths.append(stem * 10 + leaf[j])\n    # filter the scarves where the length is exactly 90 centimeters\n    filtered = [length for length in lengths if length == 90]\n    # count the number of rows\n    num_scarves = len(filtered)\n    return num_scarves","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [6, 7, 8, 9],\n    'Leaf': [[9], [2, 5, 9, 9], [2], [0, 0, 0]]\n})\n# Call the tool to solve the problem\nprint(count_scarves_of_length_90(df))"}
{"question":"Mr. Goodwin, the band director, counted the number of instruments played by each member of the band. How many more boys than girls play the drums?","answer":3.0,"table":"Instrument | Girls | Boys\nDrums | 7 | 10\nFlute | 1 | 19\nTrombone | 20 | 9\nSaxophone | 17 | 11","level":5,"tool_id":11564,"code":"import pandas as pd\n\ndef calculate_difference(df, instrument):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of instruments played by boys and girls, and a string representing the instrument of interest. It returns the difference in the number of boys and girls playing the specified instrument.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of instruments played by boys and girls. The DataFrame should have columns 'Instrument', 'Girls', and 'Boys'.\n    instrument (str): The instrument of interest.\n    Returns:\n    int: The difference in the number of boys and girls playing the specified instrument. If more girls play the instrument, the result will be negative.\n    \"\"\"\n    # Filter the DataFrame for the specific instrument\n    instrument_df = df[df['Instrument'] == instrument]\n    if not instrument_df.empty:\n        # Calculate the difference in the number of boys and girls playing the instrument\n        difference = instrument_df['Boys'].values[0] - instrument_df['Girls'].values[0]\n        return difference\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Instrument': ['Drums', 'Flute', 'Trombone', 'Saxophone'],\n    'Girls': [7, 1, 20, 17],\n    'Boys': [10, 19, 9, 11]\n})\n# Call the tool to solve the problem\ndifference = calculate_difference(df, 'Drums')\nprint(difference)"}
{"question":"A beauty salon in Kensington has three beauticians and keeps track of how often clients request each one specifically. What fraction of requests were for Dillon? Simplify your answer.","answer":0.347826087,"table":"Beautician | Requests\nDillon | 480\nSamir | 540\nWhitney | 360","level":7,"tool_id":12351,"code":"import pandas as pd\n\ndef calculate_fraction(df, name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of beauticians and their requests, and a name of a beautician, and returns the fraction of requests for the specified beautician.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing beauticians and their requests with columns 'Beautician' and 'Requests'.\n    name (str): The name of the beautician.\n    Returns:\n    float: The fraction of requests for the specified beautician.\n    \"\"\"\n    # Calculate the total number of requests\n    total_requests = df['Requests'].sum()\n    \n    # Filter the DataFrame for the specific beautician\n    beautician_df = df[df['Beautician'] == name]\n    if not beautician_df.empty:\n        beautician_requests = beautician_df['Requests'].values[0]\n        # Calculate and return the fraction of requests for the specified beautician\n        return beautician_requests \/ total_requests\n    else:\n        return 0","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Beautician': ['Dillon', 'Samir', 'Whitney'],\n    'Requests': [480, 540, 360]\n})\n# Call the tool to solve the problem\nfraction = calculate_fraction(df, 'Dillon')\nprint(f\"The fraction of requests for Dillon is {fraction}.\")"}
{"question":"To get credit for meeting his school's community service requirement, Terrell kept a volunteering log. What is the mode of the numbers?","answer":10.0,"table":"Day | Hours\nWednesday | 5\nThursday | 10\nFriday | 10\nSaturday | 5\nSunday | 10","level":6,"tool_id":10836,"code":"import pandas as pd\nfrom collections import Counter\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a volunteering log and returns the mode of the hours.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing days and hours with columns 'Day' and 'Hours'.\n    Returns:\n    int: The mode of the hours.\n    \"\"\"\n    # Extract the 'Hours' column from the DataFrame\n    hours = df['Hours'].values\n    \n    # Calculate the frequency of each hour value\n    frequency = Counter(hours)\n    \n    # Find the hour(s) with the highest frequency\n    mode = [hour for hour, freq in frequency.items() if freq == max(frequency.values())]\n    \n    return mode","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n    'Hours': [5, 10, 10, 5, 10]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))"}
{"question":"Ashley's family went on a road trip and counted the number of cars they saw each day. How many cars in total did they see on Saturday and Sunday?","answer":687.0,"table":"Day | Number of cars\nSaturday | 339\nSunday | 348\nMonday | 232\nTuesday | 282","level":3,"tool_id":3816,"code":"import pandas as pd\n\ndef calculate_total_cars(df, days):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of the number of cars seen each day and a list of days, and returns the total number of cars seen on those days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing days and the number of cars seen with columns 'Day' and 'Number of cars'.\n    days (list): A list of days to calculate the total number of cars seen.\n    Returns:\n    int: The total number of cars seen on the specified days.\n    \"\"\"\n    # Filter the DataFrame for the specified days\n    filtered_df = df[df['Day'].isin(days)]\n    \n    # Calculate the total number of cars seen\n    total_cars = filtered_df['Number of cars'].sum()\n    \n    return total_cars","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Number of cars': [339, 348, 232, 282]\n})\n\n# Call the tool to solve the problem\ntotal_cars = calculate_total_cars(df, ['Saturday', 'Sunday'])\nprint(total_cars)"}
{"question":"For a statistics project, Austin observed the number of hits and misses scored by some baseball players during batting practice. How many more misses than hits did the third baseman have?","answer":13.0,"table":"Player | Misses | Hits\nFirst baseman | 8 | 14\nLeft fielder | 1 | 8\nRight fielder | 10 | 13\nThird baseman | 16 | 3\nShortstop | 3 | 3","level":4,"tool_id":4966,"code":"import pandas as pd\n\ndef calculate_difference(df, player):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a baseball statistics table and a player's name, and returns the difference between the number of misses and hits for the specified player.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing player names, number of misses and hits with columns 'Player', 'Misses' and 'Hits'.\n    player (str): The name of the player.\n    Returns:\n    int: The difference between the number of misses and hits for the specified player.\n    \"\"\"\n    # Filter the DataFrame for the specific player\n    player_df = df[df['Player'] == player]\n    if not player_df.empty:\n        misses = player_df['Misses'].values[0]\n        hits = player_df['Hits'].values[0]\n        difference = misses - hits\n        return difference\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Player': ['First baseman', 'Left fielder', 'Right fielder', 'Third baseman', 'Shortstop'],\n    'Misses': [8, 1, 10, 16, 3],\n    'Hits': [14, 8, 13, 3, 3]\n})\n# Call the tool to solve the problem\nprint(calculate_difference(df, 'Third baseman'))"}
{"question":"Keenan makes beautiful pottery and sells it at craft fairs. He made a frequency chart of the pieces of pottery he took to a fair last weekend. How many pieces of pottery did Keenan take altogether?","answer":96.0,"table":"Piece | Frequency\nbowl | 24\ncup | 30\nplate | 24\nvase | 18","level":5,"tool_id":1455,"code":"import pandas as pd\n\ndef calculate_total_pottery(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a frequency table of pottery pieces and returns the total number of pottery pieces.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing pottery pieces and their frequencies with columns 'Piece' and 'Frequency'.\n    Returns:\n    int: The total number of pottery pieces.\n    \"\"\"\n    # Calculate the total number of pottery pieces\n    total_pottery = df['Frequency'].sum()\n    \n    return total_pottery","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Piece': ['bowl', 'cup', 'plate', 'vase'],\n    'Frequency': [24, 30, 24, 18]\n})\n# Call the tool to solve the problem\ntotal_pottery = calculate_total_pottery(df)\nprint(total_pottery)"}
{"question":"A beauty salon in Newberry has three beauticians and keeps track of how often clients request each one specifically. What fraction of requests were for Paul? Simplify your answer.","answer":0.4285714286,"table":"Beautician | Requests\nDakota | 900\nKiera | 220\nPaul | 840","level":7,"tool_id":2566,"code":"import pandas as pd\n\ndef calculate_fraction(df, name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of beauticians and their requests, and a name of a beautician, and returns the fraction of requests for the specified beautician.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing beauticians and their requests with columns 'Beautician' and 'Requests'.\n    name (str): The name of the beautician.\n    Returns:\n    float: The fraction of requests for the specified beautician.\n    \"\"\"\n    # Calculate the total number of requests\n    total_requests = df['Requests'].sum()\n    \n    # Filter the DataFrame for the specific beautician\n    beautician_df = df[df['Beautician'] == name]\n    \n    if not beautician_df.empty:\n        # Calculate the number of requests for the specified beautician\n        beautician_requests = beautician_df['Requests'].values[0]\n        \n        # Calculate and return the fraction of requests for the specified beautician\n        return beautician_requests \/ total_requests\n    \n    return 0","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Beautician': ['Dakota', 'Kiera', 'Paul'],\n    'Requests': [900, 220, 840]\n})\n# Call the tool to solve the problem\nfraction = calculate_fraction(df, 'Paul')\n# Print out the answer\nprint(f\"The fraction of requests for Paul is {fraction}.\")"}
{"question":"At a charity basketball shootout, excited fans counted the baskets and misses made by each of the team mascots. How many misses did Bradley Bear have?","answer":11.0,"table":"Mascot | Baskets | Misses\nBradley Bear | 13 | 11\nRhianna Rhino | 17 | 5\nWendy Wolverine | 3 | 6\nTina Tiger | 1 | 12","level":4,"tool_id":16913,"code":"import pandas as pd\n\ndef get_misses(df, mascot_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of mascot basketball shootout results and a mascot name, and returns the number of misses made by the mascot.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing mascot names, baskets made, and misses with columns 'Mascot', 'Baskets', and 'Misses'.\n    mascot_name (str): The name of the mascot.\n    Returns:\n    int: The number of misses made by the mascot.\n    \"\"\"\n    # Filter the DataFrame for the specific mascot\n    mascot_df = df[df['Mascot'] == mascot_name]\n    if not mascot_df.empty:\n        # Return the number of misses made by the mascot\n        return mascot_df['Misses'].values[0]\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Mascot': ['Bradley Bear', 'Rhianna Rhino', 'Wendy Wolverine', 'Tina Tiger'],\n    'Baskets': [13, 17, 3, 1],\n    'Misses': [11, 5, 6, 12]\n})\n# Call the tool to solve the problem\nmisses = get_misses(df, 'Bradley Bear')\nprint(misses)"}
{"question":"Each gym locker has 5 volleyballs. How many volleyballs are in 6 gym lockers?","answer":30.0,"table":"Number of gym lockers | Number of volleyballs\n1 | 5\n2 | 10\n3 | 15\n4 | 20\n5 | 25\n6 | ?","level":2,"tool_id":1607,"code":"import pandas as pd\n\ndef calculate_volleyballs_in_lockers(df, num_lockers):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of gym lockers and the number of volleyballs in each locker, and returns the number of volleyballs in the specified number of lockers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of gym lockers and the number of volleyballs in each locker with columns 'Number of gym lockers' and 'Number of volleyballs'.\n    num_lockers (int): The number of gym lockers to calculate the number of volleyballs for.\n    Returns:\n    int: The number of volleyballs in the specified number of gym lockers.\n    \"\"\"\n    # Find the number of volleyballs per locker\n    volleyballs_per_locker = df['Number of volleyballs'][0] \/ df['Number of gym lockers'][0]\n    \n    # Calculate the number of volleyballs in the specified number of lockers\n    total_volleyballs = num_lockers * volleyballs_per_locker\n    \n    return int(total_volleyballs)","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of gym lockers': [1, 2, 3, 4, 5],\n    'Number of volleyballs': [5, 10, 15, 20, 25]\n})\n\n# Call the tool to solve the problem\nnum_volleyballs = calculate_volleyballs_in_lockers(df, 6)\nprint(num_volleyballs)"}
{"question":"Melody's Music Store sells different types of instruments. The frequency chart shows the instruments Melody has in stock. Melody wants to clear out some inventory to make room for new instruments. She decides to put half of the drums she has in stock on sale. How many drums will Melody put on sale?","answer":15.0,"table":"Type | Frequency\nguitar | 23\npiano | 6\ntrumpet | 15\nbass drum | 13\nsnare drum | 17","level":5,"tool_id":7622,"code":"import pandas as pd\n\ndef calculate_sale_items(df, item_types):\n    \"\"\"\n    This function takes in a pandas DataFrame representing an inventory table and a list of item types, and returns the total number of items that will be put on sale.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing inventory items and their frequencies with columns 'Type' and 'Frequency'.\n    item_types (list): A list of item types that will be put on sale.\n    Returns:\n    int: The total number of items that will be put on sale.\n    \"\"\"\n    # Initialize the total number of sale items\n    total_sale_items = 0\n    \n    # Iterate through the item types and calculate the number of sale items for each type\n    for item_type in item_types:\n        # Filter the DataFrame for the specific item type\n        item_df = df[df['Type'] == item_type]\n        if not item_df.empty:\n            item_frequency = item_df['Frequency'].values[0]\n            total_sale_items += item_frequency \/\/ 2\n    \n    return total_sale_items","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Type': ['guitar', 'piano', 'trumpet', 'bass drum', 'snare drum'],\n    'Frequency': [23, 6, 15, 13, 17]\n})\n\n# Call the tool to solve the problem\ndrums_on_sale = calculate_sale_items(df, ['bass drum', 'snare drum'])\nprint(drums_on_sale)"}
{"question":"A store recently released a new line of alarm clocks that emits a smell to wake you up in the morning. The head of sales tracked buyers' ages and which smells they preferred. What is the probability that a randomly selected buyer is under 13 years old and purchased a clock scented like bacon? Simplify any fractions.","answer":0.3846153846,"table":" | Bacon | Cinnamon\nUnder 13 years old | 5 | 3\nA teenager | 3 | 2","level":8,"tool_id":17226,"code":"import pandas as pd\n\ndef calculate_probability(df, age_group, scent):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of buyers for each age group and scent, and calculates the probability of a randomly selected buyer being in the specified age group and purchasing the specified scent.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of buyers for each age group and scent.\n    age_group (str): The age group of interest.\n    scent (str): The scent of interest.\n    Returns:\n    float: The probability of a randomly selected buyer being in the specified age group and purchasing the specified scent.\n    \"\"\"\n    # Calculate the total number of buyers\n    total_buyers = df.sum().sum()\n    \n    # Get the number of buyers in the specified age group and scent\n    buyers_in_group_and_scent = df.loc[age_group, scent]\n    \n    # Calculate the probability\n    probability = buyers_in_group_and_scent \/ total_buyers\n    \n    return probability","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bacon': [5, 3],\n    'Cinnamon': [3, 2]\n}, index=['Under 13 years old', 'A teenager'])\n\n# Call the tool to solve the problem\nprobability = calculate_probability(df, 'Under 13 years old', 'Bacon')\nprint(probability)"}
{"question":"For a science fair project, Jessica tracked the temperature each day. What is the lowest temperature?","answer":11.0,"table":"Stem | Leaf \n1 | 1, 1, 2, 3, 3, 4, 6, 7, 7\n2 | 0, 4, 6, 8, 8, 9\n3 | 0, 2, 2, 3, 5, 5, 7, 8\n4 | 1","level":7,"tool_id":12801,"code":"import pandas as pd\n\ndef find_lowest_temperature(df):\n    \"\"\"\n    This function takes in a pandas dataframe of temperatures, and returns the lowest temperature.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the temperatures.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The lowest temperature.\n    \"\"\"\n    # prepare a list to calculate temperature in each day\n    temperatures = []\n    # calculate the temperature in each day\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            temperatures.append(stem * 10 + leaf[j])\n    # find the lowest temperature\n    lowest_temperature = min(temperatures)\n    return lowest_temperature","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[1, 1, 2, 3, 3, 4, 6, 7, 7], [0, 4, 6, 8, 8, 9], [0, 2, 2, 3, 5, 5, 7, 8], [1]]\n})\n# Call the tool to solve the problem\nprint(find_lowest_temperature(df))"}
{"question":"Marco is playing a computer game in which he builds and manages an amusement park. The types of rides he has in his park are shown in the frequency chart. Marco plans to build 9 more rides. Afterward, how many rides will Marco's park have in all?","answer":41.0,"table":"Type | Frequency\nlittle-kid rides | 10\nroller coasters | 7\nwater rides | 4\nspinning rides | 8\nfree-fall rides | 3","level":5,"tool_id":6710,"code":"import pandas as pd\n\ndef calculate_total_rides(df, additional_rides):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a frequency chart of ride types and an integer representing the number of additional rides to be built, and returns the total number of rides in the park after the additional rides are built.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ride types and their frequencies with columns 'Type' and 'Frequency'.\n    additional_rides (int): The number of additional rides to be built.\n    Returns:\n    int: The total number of rides in the park after the additional rides are built.\n    \"\"\"\n    # Calculate the current total number of rides\n    current_total_rides = df['Frequency'].sum()\n    \n    # Calculate the total number of rides after the additional rides are built\n    total_rides = current_total_rides + additional_rides\n    \n    return total_rides","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Type': ['little-kid rides', 'roller coasters', 'water rides', 'spinning rides', 'free-fall rides'],\n    'Frequency': [10, 7, 4, 8, 3]\n})\n\n# Call the tool to solve the problem\ntotal_rides = calculate_total_rides(df, 9)\nprint(total_rides)"}
{"question":"A store recently released a new line of alarm clocks that emits a smell to wake you up in the morning. The head of sales tracked buyers' ages and which smells they preferred. What is the probability that a randomly selected buyer is a teenager and purchased a clock scented like cinnamon? Simplify any fractions.","answer":0.2307692308,"table":" | Bacon | Cinnamon\nUnder 13 years old | 3 | 5\nA teenager | 2 | 3","level":8,"tool_id":17169,"code":"import pandas as pd\n\ndef calculate_probability(df, age_group, scent):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the sales data of alarm clocks with different scents and age groups, and calculates the probability of a randomly selected buyer being in a specific age group and purchasing a specific scent.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the sales data with columns 'Age Group', 'Bacon', and 'Cinnamon'.\n    age_group (str): The age group of interest (e.g., 'Under 13 years old', 'A teenager').\n    scent (str): The scent of interest (e.g., 'Bacon', 'Cinnamon').\n    Returns:\n    float: The probability of a randomly selected buyer being in the specified age group and purchasing the specified scent.\n    \"\"\"\n    # Calculate the total number of buyers\n    total_buyers = df['Bacon'].sum() + df['Cinnamon'].sum()\n    \n    # Filter the DataFrame for the specific age group\n    age_group_df = df[df['Age Group'] == age_group]\n    \n    # Get the number of buyers in the specified age group and scent\n    buyers_in_age_group_and_scent = age_group_df[scent].values[0]\n    \n    # Calculate the probability\n    probability = buyers_in_age_group_and_scent \/ total_buyers\n    \n    return probability","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Age Group': ['Under 13 years old', 'A teenager'],\n    'Bacon': [3, 2],\n    'Cinnamon': [5, 3]\n})\n\n# Call the tool to solve the problem\nprobability = calculate_probability(df, 'A teenager', 'Cinnamon')\nprint(f\"The probability is {probability}\")"}
{"question":"A store recently released a new line of alarm clocks that emits a smell to wake you up in the morning. The head of sales tracked buyers' ages and which smells they preferred. What is the probability that a randomly selected buyer is a teenager and purchased a clock scented like cinnamon? Simplify any fractions.","answer":0.3333333333,"table":" | Bacon | Cinnamon\nUnder 13 years old | 4 | 4\nA teenager | 2 | 5","level":8,"tool_id":2305,"code":"import pandas as pd\n\ndef calculate_probability(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of buyers' ages and their preferred smells, and returns the probability that a randomly selected buyer is a teenager and purchased a clock scented like cinnamon.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing buyers' ages and their preferred smells with columns 'Bacon', 'Cinnamon' and index as age groups.\n    Returns:\n    float: The probability that a randomly selected buyer is a teenager and purchased a clock scented like cinnamon.\n    \"\"\"\n    # Calculate the total number of buyers\n    total_buyers = df['Bacon'].sum() + df['Cinnamon'].sum()\n    \n    # Calculate the number of teenagers who purchased a clock scented like cinnamon\n    teen_cinnamon_buyers = df.loc['A teenager', 'Cinnamon']\n    \n    # Calculate the probability\n    probability = teen_cinnamon_buyers \/ total_buyers\n    \n    return probability","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bacon': [4, 2],\n    'Cinnamon': [4, 5]\n}, index=['Under 13 years old', 'A teenager'])\n\n# Call the tool to solve the problem\nprobability = calculate_probability(df)\nprint(f\"The probability that a randomly selected buyer is a teenager and purchased a clock scented like cinnamon is {probability}\")"}
{"question":"A store recently released a new line of alarm clocks that emits a smell to wake you up in the morning. The head of sales tracked buyers' ages and which smells they preferred. What is the probability that a randomly selected buyer is a teenager and purchased a clock scented like cinnamon? Simplify any fractions.","answer":0.2,"table":" | Bacon | Cinnamon\nUnder 13 years old | 5 | 5\nA teenager | 6 | 4","level":8,"tool_id":5269,"code":"import pandas as pd\n\ndef calculate_probability(df, age_group, scent):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of buyers' ages and their preferred scents, and returns the probability that a randomly selected buyer is from a specific age group and purchased a clock with a specific scent.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of buyers in each age group and their preferred scents.\n    age_group (str): The age group to calculate the probability for.\n    scent (str): The scent to calculate the probability for.\n    Returns:\n    float: The probability that a randomly selected buyer is from the specified age group and purchased a clock with the specified scent.\n    \"\"\"\n    # Calculate the total number of buyers\n    total_buyers = df.sum().sum()\n    \n    # Calculate the number of buyers in the specified age group who purchased a clock with the specified scent\n    specific_buyers = df.loc[age_group, scent]\n    \n    # Calculate and return the probability\n    probability = specific_buyers \/ total_buyers\n    return probability","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bacon': [5, 6],\n    'Cinnamon': [5, 4]\n}, index=['Under 13 years old', 'A teenager'])\n\n# Call the tool to solve the problem\nprobability = calculate_probability(df, 'A teenager', 'Cinnamon')\nprint(f\"The probability that a randomly selected buyer is a teenager and purchased a clock scented like cinnamon is {probability}.\")"}
{"question":"A law firm in Fairfax kept track of how many hours were billed by each partner last year. What fraction of the hours were billed by Grayson? Simplify your answer.","answer":0.2552552553,"table":"Partner | Hours billed\nGavin | 790\nMitchell | 570\nGrayson | 850\nBryant | 520\nAdriana | 600","level":7,"tool_id":7765,"code":"import pandas as pd\n\ndef calculate_fraction(df, partner_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of partners and their billed hours, and a partner's name, and returns the fraction of hours billed by the specified partner.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing partners and their billed hours with columns 'Partner' and 'Hours billed'.\n    partner_name (str): The name of the partner.\n    Returns:\n    float: The fraction of hours billed by the specified partner.\n    \"\"\"\n    # Calculate the total hours billed\n    total_hours = df['Hours billed'].sum()\n    \n    # Filter the DataFrame for the specific partner\n    partner_df = df[df['Partner'] == partner_name]\n    if not partner_df.empty:\n        partner_hours = partner_df['Hours billed'].values[0]\n        # Calculate and return the fraction of hours billed by the partner\n        return partner_hours \/ total_hours\n    else:\n        return 0","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Partner': ['Gavin', 'Mitchell', 'Grayson', 'Bryant', 'Adriana'],\n    'Hours billed': [790, 570, 850, 520, 600]\n})\n# Call the tool to solve the problem\nfraction = calculate_fraction(df, 'Grayson')\nprint(fraction)"}
{"question":"At a swim meet, Roxanne noted the size of various swim teams. How many teams have at least 40 swimmers?","answer":7.0,"table":"Stem | Leaf \n2 | 7, 8\n3 | \n4 | 7\n5 | 9\n6 | 1, 8\n7 | \n8 | 8, 8\n9 | 0","level":4,"tool_id":641,"code":"import pandas as pd\ndef count_teams_with_40_swimmers(df):\n    \"\"\"\n    This function takes in a pandas dataframe of swim teams sizes, and returns the number of teams that have at least 40 swimmers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the size of swim teams.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of teams that have at least 40 swimmers.\n    \"\"\"\n    # prepare a list to calculate swimmers in each team\n    swimmers = []\n    # calculate the total number of swimmers in each team\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            swimmers.append(stem * 10 + leaf[j])\n    # filter the teams where the total number of swimmers is greater than or equal to 40\n    filtered = [team for team in swimmers if team >= 40]\n    # count the number of rows\n    num_teams = len(filtered)\n    return num_teams","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[7, 8], [], [7], [9], [1, 8], [], [8, 8], [0]]\n})\n# Call the tool to solve the problem\nprint(count_teams_with_40_swimmers(df))"}
{"question":"An economics student recorded the amount of per-capita aid that the U.S. gave to various countries during the 1900s. How much aid did Libya receive per capita in 1980?","answer":5.0,"table":"Country | 1980 | 1990\nAlgeria | $9 | $10\nAfghanistan | $2 | $7\nLibya | $5 | $5\nPakistan | $14 | $10","level":5,"tool_id":9215,"code":"import pandas as pd\n\ndef get_aid_amount(df, country, year):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of aid amounts, a country name, and a year, and returns the aid amount for the specified country and year.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing aid amounts with columns 'Country', '1980', '1990'.\n    country (str): The name of the country.\n    year (str): The year.\n    Returns:\n    float: The aid amount for the specified country and year.\n    \"\"\"\n    # Filter the DataFrame for the specific country\n    country_df = df[df['Country'] == country]\n    if not country_df.empty:\n        aid_amount = country_df[year].values[0]\n        return aid_amount\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Country': ['Algeria', 'Afghanistan', 'Libya', 'Pakistan'],\n    '1980': [9, 2, 5, 14],\n    '1990': [10, 7, 5, 10]\n})\n\n# Call the tool to solve the problem\naid_amount = get_aid_amount(df, 'Libya', '1980')\nprint(aid_amount)"}
{"question":"An economics student recorded the amount of per-capita aid that the U.S. gave to various countries during the 1900s. How much aid did Libya receive per capita in 1980?","answer":5.0,"table":"Country | 1970 | 1980\nLibya | $3 | $5\nAlgeria | $9 | $9\nPakistan | $7 | $14","level":4,"tool_id":5244,"code":"import pandas as pd\n\ndef get_aid_amount(df, country, year):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of per-capita aid given by the U.S. to various countries during the 1900s, a country name, and a year, and returns the amount of aid that the country received in that year.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing per-capita aid amounts with columns 'Country', '1970', '1980', etc.\n    country (str): The name of the country.\n    year (str): The year.\n    Returns:\n    float: The amount of aid that the country received in the specified year.\n    \"\"\"\n    # Filter the DataFrame for the specific country\n    country_df = df[df['Country'] == country]\n    if not country_df.empty:\n        # Get the aid amount for the specified year\n        aid_amount = country_df[year].values[0]\n        return aid_amount\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Country': ['Libya', 'Algeria', 'Pakistan'],\n    '1970': [3, 9, 7],\n    '1980': [5, 9, 14]\n})\n# Call the tool to solve the problem\nprint(get_aid_amount(df, 'Libya', '1980'))"}
{"question":"In preparation for graduation, some teachers and students volunteered for the various graduation committees. How many people are on the music committee?","answer":35.0,"table":"Committee | Students | Teachers\nProgram | 5 | 17\nTicket | 20 | 5\nMusic | 20 | 15\nSchedule | 15 | 20\nFood | 18 | 2","level":5,"tool_id":12179,"code":"import pandas as pd\n\ndef count_people_on_committee(df, committee_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a committee table and a committee name, and returns the total number of people on the specified committee.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing committee names and the number of students and teachers on each committee. The DataFrame should have columns 'Committee', 'Students', and 'Teachers'.\n    committee_name (str): The name of the committee.\n    Returns:\n    int: The total number of people on the specified committee.\n    \"\"\"\n    # Filter the DataFrame for the specific committee\n    committee_df = df[df['Committee'] == committee_name]\n    if not committee_df.empty:\n        # Calculate the total number of people on the committee\n        total_people = committee_df['Students'].values[0] + committee_df['Teachers'].values[0]\n        return total_people\n    else:\n        return 0","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Committee': ['Program', 'Ticket', 'Music', 'Schedule', 'Food'],\n    'Students': [5, 20, 20, 15, 18],\n    'Teachers': [17, 5, 15, 20, 2]\n})\n# Call the tool to solve the problem\nprint(count_people_on_committee(df, 'Music'))"}
{"question":"A store recently released a new line of alarm clocks that emits a smell to wake you up in the morning. The head of sales tracked buyers' ages and which smells they preferred. What is the probability that a randomly selected buyer purchased a clock scented like bacon and is under 13 years old? Simplify any fractions.","answer":0.2777777778,"table":" | Under 13 years old | A teenager\nBacon | 5 | 4\nCinnamon | 4 | 5","level":8,"tool_id":12794,"code":"import pandas as pd\n\ndef calculate_probability(df, target_row, target_column):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of counts, a target row, and a target column, and returns the probability of the target cell.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing counts of occurrences.\n    target_row (str): The row label of the target cell.\n    target_column (str): The column label of the target cell.\n    Returns:\n    float: The probability of the target cell.\n    \"\"\"\n    # Get the value of the target cell\n    target_value = df.loc[target_row, target_column]\n    \n    # Calculate the total count of all cells\n    total_count = df.sum().sum()\n    \n    # Calculate the probability\n    probability = target_value \/ total_count\n    \n    return probability","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Under 13 years old': [5, 4],\n    'A teenager': [4, 5]\n}, index=['Bacon', 'Cinnamon'])\n\n# Call the tool to solve the problem\nprobability = calculate_probability(df, 'Bacon', 'Under 13 years old')\n\n# Print out the answer\nprint(f\"The probability that a randomly selected buyer purchased a clock scented like bacon and is under 13 years old is {probability}.\")"}
{"question":"A store recently released a new line of alarm clocks that emits a smell to wake you up in the morning. The head of sales tracked buyers' ages and which smells they preferred. What is the probability that a randomly selected buyer purchased a clock scented like bacon and is under 13 years old? Simplify any fractions.","answer":0.2631578947,"table":" | Under 13 years old | A teenager\nBacon | 5 | 4\nCinnamon | 5 | 5","level":8,"tool_id":9173,"code":"import pandas as pd\n\ndef calculate_probability(df, target_row, target_column):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of counts, a target row, and a target column, and returns the probability of the target cell.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing counts of occurrences.\n    target_row (str): The row label of the target cell.\n    target_column (str): The column label of the target cell.\n    Returns:\n    float: The probability of the target cell.\n    \"\"\"\n    # Get the value in the target cell\n    target_value = df.loc[target_row, target_column]\n    \n    # Calculate the total count of all cells\n    total_count = df.sum().sum()\n    \n    # Calculate the probability\n    probability = target_value \/ total_count\n    \n    return probability","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Under 13 years old': [5, 5],\n    'A teenager': [4, 5]\n}, index=['Bacon', 'Cinnamon'])\n\n# Call the tool to solve the problem\nprobability = calculate_probability(df, 'Bacon', 'Under 13 years old')\n\n# Print out the answer\nprint(f\"The probability that a randomly selected buyer purchased a clock scented like bacon and is under 13 years old is {probability}.\")"}
{"question":"Dr. Marshall, a zoo director, researched ticket prices at other zoos around the country. How much more does a child ticket cost at the Minnesota Zoo than at the Central Park Zoo?","answer":5.0,"table":"Zoo | Child | Senior\nAtlanta | $14 | $15\nCentral Park | $5 | $7\nSan Francisco | $9 | $12\nMinnesota | $10 | $10\nBoise | $3 | $4","level":4,"tool_id":8611,"code":"import pandas as pd\n\ndef calculate_price_difference(df, zoo1, zoo2, ticket_type):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of zoo ticket prices, and calculates the price difference between two zoos for a specific ticket type.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing zoo names and ticket prices with columns 'Zoo', 'Child', and 'Senior'.\n    zoo1 (str): The name of the first zoo.\n    zoo2 (str): The name of the second zoo.\n    ticket_type (str): The type of ticket to compare prices for ('Child' or 'Senior').\n    Returns:\n    float: The price difference between the two zoos for the specified ticket type.\n    \"\"\"\n    # Filter the DataFrame for the specific zoos\n    zoo1_df = df[df['Zoo'] == zoo1]\n    zoo2_df = df[df['Zoo'] == zoo2]\n    \n    # Get the ticket prices for the specified ticket type\n    zoo1_price = zoo1_df[ticket_type].values[0]\n    zoo2_price = zoo2_df[ticket_type].values[0]\n    \n    # Calculate the price difference\n    price_difference = zoo1_price - zoo2_price\n    \n    return price_difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Zoo': ['Atlanta', 'Central Park', 'San Francisco', 'Minnesota', 'Boise'],\n    'Child': [14, 5, 9, 10, 3],\n    'Senior': [15, 7, 12, 10, 4]\n})\n\n# Call the tool to solve the problem\nprice_difference = calculate_price_difference(df, 'Minnesota', 'Central Park', 'Child')\nprint(price_difference)"}
{"question":"Each gym locker has 5 soccer balls. How many soccer balls are in 6 gym lockers?","answer":30.0,"table":"Number of gym lockers | Number of soccer balls\n1 | 5\n2 | 10\n3 | 15\n4 | 20\n5 | 25\n6 | ?","level":1,"tool_id":10356,"code":"def calculate_soccer_balls(num_lockers):\n    \"\"\"\n    This function takes in the number of gym lockers and returns the number of soccer balls based on the given ratio.\n    Args:\n    num_lockers (int): The number of gym lockers.\n    Returns:\n    int: The number of soccer balls.\n    \"\"\"\n    # The ratio of gym lockers to soccer balls is 1:5\n    num_balls = num_lockers * 5\n    return num_balls","api_call":"# Call the tool to solve the problem\nprint(calculate_soccer_balls(6))"}
{"question":"While looking through an almanac at the library, Colin noticed some data showing the population density of various states. How many more people per square mile lived in Idaho in 2000 than in 1990?","answer":3.0,"table":"State | 1990 | 2000\nIdaho | 12 | 15\nNevada | 10 | 18\nNorth Dakota | 9 | 9","level":4,"tool_id":11796,"code":"import pandas as pd\n\ndef calculate_population_increase(df, state):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a population density table and a state name, and returns the increase in population density from 1990 to 2000 for the given state.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing population density data with columns 'State', '1990', and '2000'.\n    state (str): The name of the state to calculate the population increase for.\n    Returns:\n    int: The increase in population density from 1990 to 2000 for the given state.\n    \"\"\"\n    # Filter the DataFrame for the specific state\n    state_df = df[df['State'] == state]\n    if not state_df.empty:\n        # Calculate the increase in population density\n        increase = state_df['2000'].values[0] - state_df['1990'].values[0]\n        return increase\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'State': ['Idaho', 'Nevada', 'North Dakota'],\n    '1990': [12, 10, 9],\n    '2000': [15, 18, 9]\n})\n# Call the tool to solve the problem\nincrease = calculate_population_increase(df, 'Idaho')\nprint(increase)"}
{"question":"Joel entered his sister into their town's Smelly Shoe Competition. Joel observed contestants of all ages proudly strutting around wearing different kinds of smelly shoes. What is the probability that a randomly selected contestant is wearing tennis shoes and is under age 12? Simplify any fractions.","answer":0.3125,"table":" | Under age 12 | 13 to 30 years old\nTennis shoes | 5 | 1\nHigh heels | 4 | 6","level":8,"tool_id":5582,"code":"import pandas as pd\n\ndef calculate_probability(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of contestants and their shoe types and ages, and returns the probability that a randomly selected contestant is wearing tennis shoes and is under age 12.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of contestants wearing different types of shoes and their ages. The DataFrame should have columns 'Under age 12' and '13 to 30 years old'.\n    Returns:\n    float: The probability that a randomly selected contestant is wearing tennis shoes and is under age 12.\n    \"\"\"\n    # Calculate the total number of contestants\n    total_contestants = df.sum().sum()\n    \n    # Calculate the number of contestants wearing tennis shoes and under age 12\n    tennis_shoes_under_12 = df.loc['Tennis shoes', 'Under age 12']\n    \n    # Calculate the probability\n    probability = tennis_shoes_under_12 \/ total_contestants\n    \n    return probability","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Under age 12': [5, 4],\n    '13 to 30 years old': [1, 6]\n}, index=['Tennis shoes', 'High heels'])\n\n# Call the tool to solve the problem\nprobability = calculate_probability(df)\nprint(probability)"}
{"question":"Hakim, a candy store employee, placed peppermint candies into jars of various sizes. How many jars had exactly 0 peppermint candies?","answer":4.0,"table":"Stem | Leaf \n0 | 0, 0, 0, 0\n1 | 2\n2 | 4\n3 | \n4 | \n5 | 3, 5, 8","level":5,"tool_id":2809,"code":"import pandas as pd\ndef count_jars_with_0_peppermint_candies(df):\n    \"\"\"\n    This function takes in a pandas dataframe of peppermint candies per jar, and returns the number of jars that have exactly 0 peppermint candies.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of peppermint candies per jar.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of jars that have exactly 0 peppermint candies.\n    \"\"\"\n    # prepare a list to calculate candies in each jar\n    candies = []\n    # calculate the total number of peppermint candies in each jar\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            candies.append(stem * 10 + leaf[j])\n    # filter the jars where the total number of peppermint candies is exactly 0\n    filtered = [candy for candy in candies if candy == 0]\n    # count the number of rows\n    num_jars = len(filtered)\n    return num_jars","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [0, 1, 2, 3, 4, 5],\n    'Leaf': [[0, 0, 0, 0], [2], [4], [], [], [3, 5, 8]]\n})\n# Call the tool to solve the problem\nprint(count_jars_with_0_peppermint_candies(df))"}
{"question":"Each gym locker has 2 soccer balls. How many soccer balls are in 6 gym lockers?","answer":12.0,"table":"Number of gym lockers | Number of soccer balls\n1 | 2\n2 | 4\n3 | 6\n4 | 8\n5 | 10\n6 | ?","level":2,"tool_id":6278,"code":"import pandas as pd\n\ndef calculate_soccer_balls(df, num_lockers):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of gym lockers and the number of soccer balls, and returns the number of soccer balls in the given number of gym lockers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of gym lockers and the number of soccer balls with columns 'Number of gym lockers' and 'Number of soccer balls'.\n    num_lockers (int): The number of gym lockers for which the number of soccer balls needs to be calculated.\n    Returns:\n    int: The number of soccer balls in the given number of gym lockers.\n    \"\"\"\n    # Find the relationship between gym lockers and soccer balls\n    relationship = df['Number of soccer balls'][0] \/ df['Number of gym lockers'][0]\n    \n    # Calculate the number of soccer balls for the given number of gym lockers\n    num_soccer_balls = num_lockers * relationship\n    \n    return int(num_soccer_balls)","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of gym lockers': [1, 2, 3, 4, 5],\n    'Number of soccer balls': [2, 4, 6, 8, 10]\n})\n\n# Call the tool to solve the problem\nnum_soccer_balls = calculate_soccer_balls(df, 6)\nprint(num_soccer_balls)"}
{"question":"While looking through an almanac at the library, Frank noticed some data showing the population density of various states. How many more people per square mile lived in Idaho in 2000 than in 1990?","answer":3.0,"table":"State | 1990 | 2000\nNevada | 10 | 18\nIdaho | 12 | 15\nSouth Dakota | 9 | 10\nWyoming | 4 | 5\nMontana | 5 | 6","level":5,"tool_id":4111,"code":"import pandas as pd\n\ndef calculate_population_increase(df, state):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a population density table and a state name, and returns the increase in population density from 1990 to 2000 for the given state.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing population density data with columns 'State', '1990', and '2000'.\n    state (str): The name of the state to calculate the population increase for.\n    Returns:\n    int: The increase in population density from 1990 to 2000 for the given state.\n    \"\"\"\n    # Filter the DataFrame for the specific state\n    state_df = df[df['State'] == state]\n    if not state_df.empty:\n        # Calculate the increase in population density\n        population_increase = state_df['2000'].values[0] - state_df['1990'].values[0]\n        return population_increase\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'State': ['Nevada', 'Idaho', 'South Dakota', 'Wyoming', 'Montana'],\n    '1990': [10, 12, 9, 4, 5],\n    '2000': [18, 15, 10, 5, 6]\n})\n# Call the tool to solve the problem\npopulation_increase = calculate_population_increase(df, 'Idaho')\nprint(population_increase)"}
{"question":"Each shed has 10 screwdrivers. How many screwdrivers are in 6 sheds?","answer":60.0,"table":"Number of sheds | Number of screwdrivers\n1 | 10\n2 | 20\n3 | 30\n4 | 40\n5 | 50\n6 | ?","level":2,"tool_id":11736,"code":"def calculate_screwdrivers(num_sheds):\n    \"\"\"\n    This function takes in the number of sheds and returns the number of screwdrivers based on the fact that each shed has 10 screwdrivers.\n    Args:\n    num_sheds (int): The number of sheds.\n    Returns:\n    int: The number of screwdrivers.\n    \"\"\"\n    return num_sheds * 10","api_call":"# Call the tool to solve the problem\nprint(calculate_screwdrivers(6))"}
{"question":"Greg recalled how many goals he had made in soccer practice each day. What is the median of the numbers?","answer":5.0,"table":"Day | Number of goals\nWednesday | 4\nThursday | 7\nFriday | 0\nSaturday | 2\nSunday | 8\nMonday | 5\nTuesday | 6","level":6,"tool_id":6088,"code":"import pandas as pd\nimport numpy as np\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame containing a column of numbers and returns the median of the numbers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing a column of numbers.\n    Returns:\n    float: The median of the numbers.\n    \"\"\"\n    # Extract the column of numbers\n    numbers = df['Number of goals'].values\n    \n    # Calculate the median using numpy\n    median = np.median(numbers)\n    \n    return median","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Number of goals': [4, 7, 0, 2, 8, 5, 6]\n})\n\n# Call the tool to solve the problem\nmedian_goals = calculate_median(df)\nprint(median_goals)"}
{"question":"A band from Greenpoint went on tour over the summer, and each member chipped in for the cost of gas. What fraction of the gas money came from Nancy? Simplify your answer.","answer":0.25,"table":"Band member | Contribution ($)\nNancy | 440\nGrace | 870\nEva | 450","level":7,"tool_id":3036,"code":"import pandas as pd\n\ndef calculate_fraction(df, member_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of band members and their contributions, and a member's name, and returns the fraction of the total contribution that came from the specified member.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing band members and their contributions with columns 'Band member' and 'Contribution ($)'.\n    member_name (str): The name of the band member.\n    Returns:\n    float: The fraction of the total contribution that came from the specified member.\n    \"\"\"\n    # Calculate the total contribution\n    total_contribution = df['Contribution ($)'].sum()\n    \n    # Filter the DataFrame for the specified member\n    member_df = df[df['Band member'] == member_name]\n    if not member_df.empty:\n        member_contribution = member_df['Contribution ($)'].values[0]\n        # Calculate and return the fraction of the total contribution that came from the specified member\n        return member_contribution \/ total_contribution\n    else:\n        return 0","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Band member': ['Nancy', 'Grace', 'Eva'],\n    'Contribution ($)': [440, 870, 450]\n})\n# Call the tool to solve the problem\nfraction = calculate_fraction(df, 'Nancy')\nprint(f\"The fraction of the gas money that came from Nancy is {fraction}.\")"}
{"question":"At a swim meet, Josh noted the size of various swim teams. How many teams have fewer than 70 swimmers?","answer":10.0,"table":"Stem | Leaf \n2 | 5, 9\n3 | 0, 9\n4 | 9\n5 | 3, 5, 5, 7\n6 | 3","level":4,"tool_id":5536,"code":"import pandas as pd\ndef count_teams_with_fewer_than_70_swimmers(df):\n    \"\"\"\n    This function takes in a pandas dataframe of swim teams sizes, and returns the number of teams that have fewer than 70 swimmers.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the size of swim teams.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of teams that have fewer than 70 swimmers.\n    \"\"\"\n    # prepare a list to calculate swimmers in each team\n    swimmers = []\n    # calculate the total number of swimmers in each team\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            swimmers.append(stem * 10 + leaf[j])\n    # filter the teams where the total number of swimmers is less than 70\n    filtered = [team for team in swimmers if team < 70]\n    # count the number of rows\n    num_teams = len(filtered)\n    return num_teams","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6],\n    'Leaf': [[5, 9], [0, 9], [9], [3, 5, 5, 7], [3]]\n})\n# Call the tool to solve the problem\nprint(count_teams_with_fewer_than_70_swimmers(df))"}
{"question":"At a swim meet, Emir noted the size of various swim teams. What is the size of the largest team?","answer":85.0,"table":"Stem | Leaf \n1 | 7, 8\n2 | 0, 2, 3\n3 | 7, 9\n4 | 3, 5, 7\n5 | 8\n6 | 0, 0\n7 | 6, 7, 9\n8 | 0, 4, 5","level":8,"tool_id":10694,"code":"import pandas as pd\n\ndef find_largest_team_size(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a stem and leaf plot of swim team sizes and returns the size of the largest team.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the stem and leaf plot with columns 'Stem' and 'Leaf'.\n    Returns:\n    int: The size of the largest team.\n    \"\"\"\n    # Prepare a list to store team sizes\n    team_sizes = []\n    \n    # Calculate the size of each team\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            team_sizes.append(stem * 10 + leaf[j])\n    \n    # Find the largest team size\n    largest_team_size = max(team_sizes)\n    \n    return largest_team_size","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[7, 8], [0, 2, 3], [7, 9], [3, 5, 7], [8], [0, 0], [6, 7, 9], [0, 4, 5]]\n})\n\n# Call the tool to solve the problem\nlargest_team_size = find_largest_team_size(df)\nprint(largest_team_size)"}
{"question":"Huffman has a collection of marbles of different sizes and colors. What is the probability that a randomly selected marble is red and big? Simplify any fractions.","answer":0.2222222222,"table":" | Big | Small\nRed | 4 | 8\nGreen | 2 | 4","level":8,"tool_id":12038,"code":"import pandas as pd\n\ndef calculate_probability(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of marble counts, and returns the probability that a randomly selected marble is red and big.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing marble counts with columns 'Big' and 'Small' and index as colors.\n    Returns:\n    float: The probability that a randomly selected marble is red and big.\n    \"\"\"\n    # Calculate the total number of marbles\n    total_marbles = df['Big'].sum() + df['Small'].sum()\n    \n    # Calculate the number of red and big marbles\n    red_big_marbles = df.loc['Red', 'Big']\n    \n    # Calculate the probability\n    probability = red_big_marbles \/ total_marbles\n    \n    return probability","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Big': [4, 2],\n    'Small': [8, 4]\n}, index=['Red', 'Green'])\n\n# Call the tool to solve the problem\nprobability = calculate_probability(df)\n\n# Print the answer\nprint(f\"The probability that a randomly selected marble is red and big is {probability:.2f}\")"}
{"question":"At the summer carnival, each member of the Dickerson family played a round of bean bag toss. How many more misses than hits did Aunt Lisa have?","answer":9.0,"table":"Person | Hits | Misses\nAunt Sarah | 10 | 3\nUncle Rob | 12 | 3\nCousin Susan | 4 | 6\nAunt Lisa | 2 | 11","level":4,"tool_id":6947,"code":"import pandas as pd\n\ndef calculate_misses_over_hits(df, person):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of hits and misses and a person's name, and returns the difference between the number of misses and hits for that person.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing persons' names, hits and misses with columns 'Person', 'Hits' and 'Misses'.\n    person (str): The name of the person.\n    Returns:\n    int: The difference between the number of misses and hits for the person.\n    \"\"\"\n    # Filter the DataFrame for the specific person\n    person_df = df[df['Person'] == person]\n    if not person_df.empty:\n        hits = person_df['Hits'].values[0]\n        misses = person_df['Misses'].values[0]\n        return misses - hits\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Person': ['Aunt Sarah', 'Uncle Rob', 'Cousin Susan', 'Aunt Lisa'],\n    'Hits': [10, 12, 4, 2],\n    'Misses': [3, 3, 6, 11]\n})\n\n# Call the tool to solve the problem\nresult = calculate_misses_over_hits(df, 'Aunt Lisa')\nprint(result)"}
{"question":"Heartfelt Card Company sells cards for many occasions. They use a frequency chart to track how many card designs they have for each occasion. How many more card designs does the Heartfeld Card Company have for birthdays than for graduations?","answer":36.0,"table":"Occasion | Frequency\nbaby shower | 9\nbirthday | 44\ngraduation | 8\nretirement | 6\nthank you | 22\nwedding | 10","level":5,"tool_id":13304,"code":"import pandas as pd\n\ndef calculate_difference(df, occasion1, occasion2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a frequency chart and two occasions, and returns the difference in the number of card designs between the two occasions.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing occasions and their frequencies with columns 'Occasion' and 'Frequency'.\n    occasion1 (str): The name of the first occasion.\n    occasion2 (str): The name of the second occasion.\n    Returns:\n    int: The difference in the number of card designs between the two occasions.\n    \"\"\"\n    # Filter the DataFrame for the specific occasions\n    occasion1_df = df[df['Occasion'] == occasion1]\n    occasion2_df = df[df['Occasion'] == occasion2]\n    \n    # Check if the occasions exist in the DataFrame\n    if not occasion1_df.empty and not occasion2_df.empty:\n        # Calculate the difference in the number of card designs\n        difference = occasion1_df['Frequency'].values[0] - occasion2_df['Frequency'].values[0]\n        return difference\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Occasion': ['baby shower', 'birthday', 'graduation', 'retirement', 'thank you', 'wedding'],\n    'Frequency': [9, 44, 8, 6, 22, 10]\n})\n# Call the tool to solve the problem\ndifference = calculate_difference(df, 'birthday', 'graduation')\nprint(difference)"}
{"question":"Dale wants to save up some money to buy a new smartphone, so he babysits on the weekends. There is a proportional relationship between the time Dale spends babysitting (in hours), x, and the amount of money he earns babysitting (in dollars), y. What is the constant of proportionality? Write your answer as a whole number or decimal.","answer":5.0,"table":"1 | $5\n2 | $10\n3 | $15\n4 | $20","level":7,"tool_id":11011,"code":"import pandas as pd\n\ndef calculate_constant_of_proportionality(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of hours and earnings, and returns the constant of proportionality.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing hours and earnings with columns 'Hours' and 'Earnings'.\n    Returns:\n    float: The constant of proportionality.\n    \"\"\"\n    # Calculate the constant of proportionality by dividing the earnings by the hours for each row\n    df['Constant'] = df['Earnings'] \/ df['Hours']\n    \n    # Check if the constant of proportionality is the same for all rows\n    if df['Constant'].nunique() == 1:\n        return df['Constant'].values[0]\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Hours': [1, 2, 3, 4],\n    'Earnings': [5, 10, 15, 20]\n})\n# Call the tool to solve the problem\nconstant_of_proportionality = calculate_constant_of_proportionality(df)\nprint(constant_of_proportionality)"}
{"question":"Some companies compared how many phone calls they made. How many more phone calls did Tad's Coffee Company make than Critical Insight Consulting?","answer":5688.0,"table":"Company | Number of phone calls\nReardon Corporation | 2,709\nBrave New Day Corporation | 5,726\nTad's Coffee Company | 7,314\nCritical Insight Consulting | 1,626\nNature Now | 4,038","level":3,"tool_id":9738,"code":"import pandas as pd\n\ndef calculate_difference_in_calls(df, company1, company2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of companies and their number of phone calls, and returns the difference in phone calls between two specified companies.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing company names and their number of phone calls with columns 'Company' and 'Number of phone calls'.\n    company1 (str): The name of the first company.\n    company2 (str): The name of the second company.\n    Returns:\n    int: The difference in phone calls between the two companies.\n    \"\"\"\n    # Filter the DataFrame for the specific companies\n    company1_df = df[df['Company'] == company1]\n    company2_df = df[df['Company'] == company2]\n    \n    # Get the number of phone calls for each company\n    company1_calls = company1_df['Number of phone calls'].values[0]\n    company2_calls = company2_df['Number of phone calls'].values[0]\n    \n    # Calculate the difference in phone calls\n    difference = company1_calls - company2_calls\n    \n    return difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Company': ['Reardon Corporation', 'Brave New Day Corporation', \"Tad's Coffee Company\", 'Critical Insight Consulting', 'Nature Now'],\n    'Number of phone calls': [2709, 5726, 7314, 1626, 4038]\n})\n\n# Call the tool to solve the problem\ndifference = calculate_difference_in_calls(df, \"Tad's Coffee Company\", 'Critical Insight Consulting')\nprint(difference)"}
{"question":"To get credit for meeting his school's community service requirement, Elijah kept a volunteering log. What is the mean of the numbers?","answer":5.0,"table":"Day | Hours\nFriday | 10\nSaturday | 7\nSunday | 5\nMonday | 4\nTuesday | 2\nWednesday | 4\nThursday | 3","level":7,"tool_id":12271,"code":"import pandas as pd\n\ndef calculate_mean(df, column_name):\n    \"\"\"\n    This function takes in a pandas DataFrame and a column name, and returns the mean of the values in the specified column.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the data.\n    column_name (str): The name of the column for which the mean should be calculated.\n    Returns:\n    float: The mean of the values in the specified column.\n    \"\"\"\n    # Calculate the mean of the specified column\n    mean_value = df[column_name].mean()\n    \n    return mean_value","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Hours': [10, 7, 5, 4, 2, 4, 3]\n})\n# Call the tool to solve the problem\nmean_hours = calculate_mean(df, 'Hours')\nprint(mean_hours)"}
{"question":"Rick counted the number of words per page in his new book. What is the largest number of words?","answer":90.0,"table":"Stem | Leaf \n5 | 2, 4\n6 | 1, 1, 9, 9, 9\n7 | 0, 1, 3, 6, 6\n8 | 7, 8, 9\n9 | 0","level":8,"tool_id":12272,"code":"import pandas as pd\n\ndef find_max_words(df):\n    \"\"\"\n    This function takes in a pandas dataframe of words per page, and returns the largest number of words on a page.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of words per page.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The largest number of words on a page.\n    \"\"\"\n    # prepare a list to calculate words in each page\n    words = []\n    # calculate the total number of words in each page\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            words.append(stem * 10 + leaf[j])\n    # find the maximum number of words\n    max_words = max(words)\n    return max_words","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [5, 6, 7, 8, 9],\n    'Leaf': [[2, 4], [1, 1, 9, 9, 9], [0, 1, 3, 6, 6], [7, 8, 9], [0]]\n})\n# Call the tool to solve the problem\nprint(find_max_words(df))"}
{"question":"A store recently released a new line of alarm clocks that emits a smell to wake you up in the morning. The head of sales tracked buyers' ages and which smells they preferred. What is the probability that a randomly selected buyer purchased a clock scented like cinnamon and is a teenager? Simplify any fractions.","answer":0.3157894737,"table":" | Under 13 years old | A teenager\nBacon | 7 | 4\nCinnamon | 2 | 6","level":8,"tool_id":14342,"code":"import pandas as pd\n\ndef calculate_probability(df, smell, age_group):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of buyers' ages and preferred smells, a smell, and an age group, and returns the probability that a randomly selected buyer purchased a clock scented like the specified smell and is in the specified age group.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of buyers for each smell and age group.\n    smell (str): The smell of the clock.\n    age_group (str): The age group of the buyer.\n    Returns:\n    float: The probability that a randomly selected buyer purchased a clock scented like the specified smell and is in the specified age group.\n    \"\"\"\n    # Calculate the total number of buyers\n    total_buyers = df.sum().sum()\n    \n    # Get the number of buyers who purchased a clock scented like the specified smell and are in the specified age group\n    buyers_with_smell_and_age_group = df.loc[smell, age_group]\n    \n    # Calculate the probability\n    probability = buyers_with_smell_and_age_group \/ total_buyers\n    \n    return probability","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Under 13 years old': [7, 2],\n    'A teenager': [4, 6]\n}, index=['Bacon', 'Cinnamon'])\n\n# Call the tool to solve the problem\nprobability = calculate_probability(df, 'Cinnamon', 'A teenager')\nprint(probability)"}
{"question":"Harry found out the sizes of all the clubs at his school. What is the size of the largest club?","answer":89.0,"table":"Stem | Leaf \n3 | 2, 5, 7\n4 | 3, 4, 4, 6, 6, 8\n5 | 0, 3, 3, 4, 7\n6 | 1, 3, 4, 7\n7 | \n8 | 5, 9","level":6,"tool_id":16526,"code":"import pandas as pd\n\ndef find_largest_club_size(df):\n    \"\"\"\n    This function takes in a pandas dataframe of club sizes, and returns the size of the largest club.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the sizes of clubs.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The size of the largest club.\n    \"\"\"\n    # prepare a list to calculate sizes of each club\n    sizes = []\n    # calculate the size of each club\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            sizes.append(stem * 10 + leaf[j])\n    # find the maximum size\n    max_size = max(sizes)\n    return max_size","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7, 8],\n    'Leaf': [[2, 5, 7], [3, 4, 4, 6, 6, 8], [0, 3, 3, 4, 7], [1, 3, 4, 7], [], [5, 9]]\n})\n# Call the tool to solve the problem\nlargest_club_size = find_largest_club_size(df)\nprint(largest_club_size)"}
{"question":"At a swim meet, Jaylen noted the size of various swim teams. What is the size of the largest team?","answer":76.0,"table":"Stem | Leaf \n2 | 5\n3 | 1\n4 | 0, 8\n5 | 3\n6 | 0, 3, 5, 5\n7 | 1, 6","level":5,"tool_id":17156,"code":"import pandas as pd\n\ndef largest_team_size(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of swim team sizes and returns the size of the largest team.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing swim team sizes with columns 'Stem' and 'Leaf'.\n    Returns:\n    int: The size of the largest team.\n    \"\"\"\n    # Prepare a list to store team sizes\n    team_sizes = []\n    \n    # Calculate the size of each team\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            team_sizes.append(stem * 10 + leaf[j])\n    \n    # Find the largest team size\n    largest_size = max(team_sizes)\n    \n    return largest_size","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7],\n    'Leaf': [[5], [1], [0, 8], [3], [0, 3, 5, 5], [1, 6]]\n})\n\n# Call the tool to solve the problem\nprint(largest_team_size(df))"}
{"question":"Each horse pasture has 10 sprinklers. How many sprinklers are in 3 horse pastures?","answer":30.0,"table":"Number of horse pastures | Number of sprinklers\n1 | 10\n2 | 20\n3 | ?","level":2,"tool_id":4337,"code":"def calculate_sprinklers(pastures_df, num_pastures):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of horse pastures and their corresponding number of sprinklers, and a number of pastures, and returns the number of sprinklers in the given number of pastures.\n    Args:\n    pastures_df (pd.DataFrame): A pandas DataFrame containing the number of horse pastures and their corresponding number of sprinklers with columns 'Number of horse pastures' and 'Number of sprinklers'.\n    num_pastures (int): The number of horse pastures.\n    Returns:\n    int: The number of sprinklers in the given number of pastures.\n    \"\"\"\n    # Get the number of sprinklers per pasture\n    sprinklers_per_pasture = pastures_df['Number of sprinklers'].values[0] \/ pastures_df['Number of horse pastures'].values[0]\n    \n    # Calculate the number of sprinklers in the given number of pastures\n    num_sprinklers = int(sprinklers_per_pasture * num_pastures)\n    \n    return num_sprinklers","api_call":"# Initialize the table into a dataframe\npastures_df = pd.DataFrame({\n    'Number of horse pastures': [1, 2, 3],\n    'Number of sprinklers': [10, 20, None]\n})\n\n# Call the tool to solve the problem\nnum_pastures = 3\nnum_sprinklers = calculate_sprinklers(pastures_df, num_pastures)\n\n# Print the answer\nprint(f\"There are {num_sprinklers} sprinklers in {num_pastures} horse pastures.\")"}
{"question":"How much more does a night's stay at Liberty Bed and Breakfast cost than a night's stay at Grand Vista Hotel?","answer":324.0,"table":"night's stay at Grand Vista Hotel | $132.00\nnight's stay at Royal Canopy Resort | $175.00\nnight's stay at Oceanspray Inn | $445.00\nnight's stay at Cerulean Resort | $321.00\nnight's stay at Mahogany Lodge | $425.00\nnight's stay at Liberty Bed and Breakfast | $456.00","level":8,"tool_id":4277,"code":"import pandas as pd\n\ndef calculate_price_difference(hotel_df, hotel1, hotel2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a hotel price table and two hotel names, and returns the price difference between the two hotels.\n    Args:\n    hotel_df (pd.DataFrame): A pandas DataFrame containing hotel names and their prices with columns 'Hotel' and 'Price'.\n    hotel1 (str): The name of the first hotel.\n    hotel2 (str): The name of the second hotel.\n    Returns:\n    float: The price difference between the two hotels.\n    \"\"\"\n    # Filter the DataFrame for the specific hotels\n    hotel1_df = hotel_df[hotel_df['Hotel'] == hotel1]\n    hotel2_df = hotel_df[hotel_df['Hotel'] == hotel2]\n    \n    # Check if both hotels are in the DataFrame\n    if not hotel1_df.empty and not hotel2_df.empty:\n        # Calculate the price difference\n        price_difference = hotel2_df['Price'].values[0] - hotel1_df['Price'].values[0]\n        return price_difference\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\nhotel_df = pd.DataFrame({\n    'Hotel': [\"night's stay at Grand Vista Hotel\", \"night's stay at Royal Canopy Resort\", \"night's stay at Oceanspray Inn\", \"night's stay at Cerulean Resort\", \"night's stay at Mahogany Lodge\", \"night's stay at Liberty Bed and Breakfast\"],\n    'Price': [132.00, 175.00, 445.00, 321.00, 425.00, 456.00]\n})\n\n# Call the tool to solve the problem\nprice_difference = calculate_price_difference(hotel_df, \"night's stay at Grand Vista Hotel\", \"night's stay at Liberty Bed and Breakfast\")\nprint(price_difference)"}
{"question":"Mr. Gilmore, the band director, counted the number of instruments played by each member of the band. How many more girls play the drums than the flute?","answer":2.0,"table":"Instrument | Girls | Boys\nTrumpet | 6 | 15\nFlute | 4 | 20\nDrums | 6 | 18","level":5,"tool_id":8104,"code":"import pandas as pd\n\ndef calculate_difference(df, instrument1, instrument2, gender):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of instruments played by each gender, and returns the difference in the number of girls who play two different instruments.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing instruments and the number of each gender who play them. The DataFrame should have columns 'Instrument', 'Girls', and 'Boys'.\n    instrument1 (str): The name of the first instrument.\n    instrument2 (str): The name of the second instrument.\n    gender (str): The gender to compare.\n    Returns:\n    int: The difference in the number of girls who play the two instruments.\n    \"\"\"\n    # Filter the DataFrame for the specific instruments\n    instrument1_df = df[df['Instrument'] == instrument1]\n    instrument2_df = df[df['Instrument'] == instrument2]\n    \n    # Get the number of girls who play each instrument\n    instrument1_count = instrument1_df[gender].values[0]\n    instrument2_count = instrument2_df[gender].values[0]\n    \n    # Calculate and return the difference\n    return abs(instrument1_count - instrument2_count)","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Instrument': ['Trumpet', 'Flute', 'Drums'],\n    'Girls': [6, 4, 6],\n    'Boys': [15, 20, 18]\n})\n# Call the tool to solve the problem\ndifference = calculate_difference(df, 'Drums', 'Flute', 'Girls')\nprint(difference)"}
{"question":"To get credit for meeting his school's community service requirement, Sandeep kept a volunteering log. What is the median of the numbers?","answer":6.0,"table":"Day | Hours\nFriday | 10\nSaturday | 4\nSunday | 3\nMonday | 7\nTuesday | 6","level":5,"tool_id":6188,"code":"import pandas as pd\nimport numpy as np\n\ndef calculate_median(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a volunteering log and returns the median of the hours.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing days and hours of volunteering with columns 'Day' and 'Hours'.\n    Returns:\n    float: The median of the hours.\n    \"\"\"\n    # Extract the 'Hours' column and calculate the median\n    median_hours = np.median(df['Hours'])\n    \n    return median_hours","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],\n    'Hours': [10, 4, 3, 7, 6]\n})\n\n# Call the tool to solve the problem\nmedian_hours = calculate_median(df)\nprint(median_hours)"}
{"question":"Some students at Dayton Middle School signed up to help out with the school play. How many students are on the set design committee?","answer":10.0,"table":"Committee | Boys | Girls\nLighting | 16 | 14\nCasting | 9 | 7\nCostume | 5 | 13\nSound | 19 | 2\nSet design | 8 | 2","level":5,"tool_id":3253,"code":"import pandas as pd\n\ndef count_students_in_committee(df, committee_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a committee table and a committee name, and returns the total number of students in the committee.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing committee names and the number of boys and girls in each committee with columns 'Committee', 'Boys', and 'Girls'.\n    committee_name (str): The name of the committee.\n    Returns:\n    int: The total number of students in the committee.\n    \"\"\"\n    # Filter the DataFrame for the specific committee\n    committee_df = df[df['Committee'] == committee_name]\n    if not committee_df.empty:\n        # Calculate the total number of students in the committee\n        total_students = committee_df['Boys'].values[0] + committee_df['Girls'].values[0]\n        return total_students\n    else:\n        return 0","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Committee': ['Lighting', 'Casting', 'Costume', 'Sound', 'Set design'],\n    'Boys': [16, 9, 5, 19, 8],\n    'Girls': [14, 7, 13, 2, 2]\n})\n# Call the tool to solve the problem\nstudents_in_set_design = count_students_in_committee(df, 'Set design')\nprint(students_in_set_design)"}
{"question":"Jordan conducted a blind taste test on some of his friends in order to determine if organic fruits tasted different than non-organic fruits. Each friend ate one type of fruit. What is the probability that a randomly selected friend tasted peaches and preferred organic? Simplify any fractions.","answer":0.2307692308,"table":" | Organic | Non-organic\nApples | 4 | 2\nPeaches | 3 | 4","level":8,"tool_id":1266,"code":"import pandas as pd\n\ndef calculate_probability(df, fruit, type):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a taste test table, a fruit, and a type (organic or non-organic), and returns the probability that a randomly selected friend tasted the specified fruit and preferred the specified type.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the taste test results with columns 'Organic' and 'Non-organic' and index as fruit names.\n    fruit (str): The name of the fruit.\n    type (str): The type of the fruit ('Organic' or 'Non-organic').\n    Returns:\n    float: The probability that a randomly selected friend tasted the specified fruit and preferred the specified type.\n    \"\"\"\n    # Calculate the total number of friends\n    total_friends = df['Organic'].sum() + df['Non-organic'].sum()\n    \n    # Calculate the number of friends who tasted the specified fruit and preferred the specified type\n    num_friends = df.loc[fruit, type]\n    \n    # Calculate the probability\n    probability = num_friends \/ total_friends\n    \n    return probability","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Organic': [4, 3],\n    'Non-organic': [2, 4]\n}, index=['Apples', 'Peaches'])\n\n# Call the tool to solve the problem\nprobability = calculate_probability(df, 'Peaches', 'Organic')\nprint(f\"The probability that a randomly selected friend tasted peaches and preferred organic is {probability}\")"}
{"question":"Each apartment has 10 lamps. How many lamps are in 3 apartments?","answer":30.0,"table":"Number of apartments | Number of lamps\n1 | 10\n2 | 20\n3 | ?","level":2,"tool_id":2595,"code":"def calculate_lamps_in_apartments(df, num_apartments):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of the number of lamps in each apartment and the number of apartments, and returns the number of lamps in the specified number of apartments.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of apartments and the corresponding number of lamps with columns 'Number of apartments' and 'Number of lamps'.\n    num_apartments (int): The number of apartments for which the number of lamps is to be calculated.\n    Returns:\n    int: The number of lamps in the specified number of apartments.\n    \"\"\"\n    # Calculate the number of lamps per apartment\n    lamps_per_apartment = df['Number of lamps'][0] \/ df['Number of apartments'][0]\n    \n    # Calculate the number of lamps in the specified number of apartments\n    num_lamps = num_apartments * lamps_per_apartment\n    \n    return num_lamps","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of apartments': [1, 2, 3],\n    'Number of lamps': [10, 20, None]\n})\n\n# Call the tool to solve the problem\nnum_lamps = calculate_lamps_in_apartments(df, 3)\nprint(f'There are {num_lamps} lamps in 3 apartments.')"}
{"question":"Mr. Lowery, the band director, counted the number of instruments played by each member of the band. How many more band members play the drums than the flute?","answer":2.0,"table":"Instrument | Boys | Girls\nClarinet | 17 | 6\nTrombone | 11 | 3\nDrums | 15 | 4\nFlute | 8 | 9","level":5,"tool_id":14647,"code":"import pandas as pd\n\ndef calculate_difference_instruments(df, instrument1, instrument2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of instruments played by boys and girls, and returns the difference in the number of band members playing the two specified instruments.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of instruments played by boys and girls with columns 'Instrument', 'Boys', and 'Girls'.\n    instrument1 (str): The name of the first instrument.\n    instrument2 (str): The name of the second instrument.\n    Returns:\n    int: The difference in the number of band members playing the two specified instruments.\n    \"\"\"\n    # Filter the DataFrame for the specific instruments\n    instrument1_df = df[df['Instrument'] == instrument1]\n    instrument2_df = df[df['Instrument'] == instrument2]\n    \n    # Calculate the total number of band members playing each instrument\n    instrument1_total = instrument1_df['Boys'].values[0] + instrument1_df['Girls'].values[0]\n    instrument2_total = instrument2_df['Boys'].values[0] + instrument2_df['Girls'].values[0]\n    \n    # Calculate the difference in the number of band members playing the two instruments\n    difference = abs(instrument1_total - instrument2_total)\n    \n    return difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Instrument': ['Clarinet', 'Trombone', 'Drums', 'Flute'],\n    'Boys': [17, 11, 15, 8],\n    'Girls': [6, 3, 4, 9]\n})\n\n# Call the tool to solve the problem\ndifference = calculate_difference_instruments(df, 'Drums', 'Flute')\nprint(difference)"}
{"question":"A beauty salon in Lanberry has three beauticians and keeps track of how often clients request each one specifically. What fraction of requests were for Joseph? Simplify your answer.","answer":0.512195122,"table":"Beautician | Requests\nRob | 270\nShane | 130\nJoseph | 420","level":7,"tool_id":5897,"code":"import pandas as pd\n\ndef calculate_fraction_of_requests(df, beautician_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of beauticians and their requests, and returns the fraction of requests for a specific beautician.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing beauticians and their requests with columns 'Beautician' and 'Requests'.\n    beautician_name (str): The name of the beautician for which the fraction of requests is to be calculated.\n    Returns:\n    float: The fraction of requests for the specified beautician.\n    \"\"\"\n    # Filter the DataFrame for the specific beautician\n    beautician_df = df[df['Beautician'] == beautician_name]\n    if not beautician_df.empty:\n        beautician_requests = beautician_df['Requests'].values[0]\n        total_requests = df['Requests'].sum()\n        fraction_of_requests = beautician_requests \/ total_requests\n        return fraction_of_requests\n    else:\n        return 0","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Beautician': ['Rob', 'Shane', 'Joseph'],\n    'Requests': [270, 130, 420]\n})\n\n# Call the tool to solve the problem\nfraction_of_requests = calculate_fraction_of_requests(df, 'Joseph')\n\n# Print the answer\nprint(fraction_of_requests)"}
{"question":"Curious about people's recycling behaviors, Latrell put on some gloves and sifted through some recycling and trash bins. He kept count of the plastic type of each bottle and which bottles are properly dispensed. What is the probability that a randomly selected bottle is correctly placed and is made of plastic #4? Simplify any fractions.","answer":0.2857142857,"table":" | Plastic #2 | Plastic #4\nCorrectly placed | 4 | 4\nIncorrectly placed | 3 | 3","level":8,"tool_id":9201,"code":"import pandas as pd\n\ndef calculate_probability(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of plastic types and their placement, and returns the probability that a randomly selected bottle is correctly placed and is made of plastic #4.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing plastic types and their placement with columns 'Plastic #2', 'Plastic #4' and rows 'Correctly placed', 'Incorrectly placed'.\n    Returns:\n    float: The probability that a randomly selected bottle is correctly placed and is made of plastic #4.\n    \"\"\"\n    # Calculate the total number of bottles\n    total_bottles = df['Plastic #2'].sum() + df['Plastic #4'].sum()\n    \n    # Calculate the number of correctly placed bottles made of plastic #4\n    correctly_placed_plastic_4 = df.loc['Correctly placed', 'Plastic #4']\n    \n    # Calculate the probability\n    probability = correctly_placed_plastic_4 \/ total_bottles\n    \n    return probability","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Plastic #2': [4, 3],\n    'Plastic #4': [4, 3]\n}, index=['Correctly placed', 'Incorrectly placed'])\n\n# Call the tool to solve the problem\nprobability = calculate_probability(df)\n\n# Print the answer\nprint(f\"The probability that a randomly selected bottle is correctly placed and is made of plastic #4 is {probability}.\")"}
{"question":"To get credit for meeting his school's community service requirement, Wayne kept a volunteering log. What is the mode of the numbers?","answer":5.0,"table":"Day | Hours\nWednesday | 5\nThursday | 5\nFriday | 2\nSaturday | 5\nSunday | 2","level":7,"tool_id":14778,"code":"import pandas as pd\nfrom collections import Counter\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a volunteering log and returns the mode of the hours.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing days and hours with columns 'Day' and 'Hours'.\n    Returns:\n    int: The mode of the hours.\n    \"\"\"\n    # Extract the 'Hours' column from the DataFrame\n    hours = df['Hours'].values\n    \n    # Calculate the frequency of each number in the 'Hours' column\n    counter = Counter(hours)\n    \n    # Find the number with the highest frequency\n    mode = counter.most_common(1)[0][0]\n    \n    return mode","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n    'Hours': [5, 5, 2, 5, 2]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))"}
{"question":"Each football field has 10 sprinklers. How many sprinklers are on 6 football fields?","answer":60.0,"table":"Number of football fields | Number of sprinklers\n1 | 10\n2 | 20\n3 | 30\n4 | 40\n5 | 50\n6 | ?","level":1,"tool_id":14924,"code":"import pandas as pd\n\ndef calculate_sprinklers_for_fields(df, num_fields):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of football fields and their corresponding number of sprinklers, and returns the number of sprinklers for the given number of football fields.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of football fields and their corresponding number of sprinklers with columns 'Number of football fields' and 'Number of sprinklers'.\n    num_fields (int): The number of football fields for which the number of sprinklers is to be calculated.\n    Returns:\n    int: The number of sprinklers for the given number of football fields.\n    \"\"\"\n    # Calculate the number of sprinklers per football field\n    sprinklers_per_field = df['Number of sprinklers'][0] \/\/ df['Number of football fields'][0]\n    \n    # Calculate the number of sprinklers for the given number of football fields\n    total_sprinklers = num_fields * sprinklers_per_field\n    \n    return total_sprinklers","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of football fields': [1, 2, 3, 4, 5],\n    'Number of sprinklers': [10, 20, 30, 40, 50]\n})\n\n# Call the tool to solve the problem\nnum_fields = 6\nnum_sprinklers = calculate_sprinklers_for_fields(df, num_fields)\nprint(num_sprinklers)"}
{"question":"Five of the sports teams from Westminster High School decided to raise funds to buy new sports equipment. What fraction of the funds were raised by the water polo team? Simplify your answer.","answer":0.1947483589,"table":"Team | Funds raised ($)\nTennis | 920\nBaseball | 990\nBasketball | 940\nWater polo | 890\nFootball | 830","level":7,"tool_id":17244,"code":"import pandas as pd\n\ndef calculate_fraction(df, team_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of funds raised by different teams and a team name, and returns the fraction of the total funds raised by the specified team.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing team names and the funds they raised with columns 'Team' and 'Funds raised ($)'.\n    team_name (str): The name of the team for which to calculate the fraction of funds raised.\n    Returns:\n    float: The fraction of the total funds raised by the specified team.\n    \"\"\"\n    # Calculate the total funds raised\n    total_funds = df['Funds raised ($)'].sum()\n    \n    # Filter the DataFrame for the specified team\n    team_df = df[df['Team'] == team_name]\n    if not team_df.empty:\n        team_funds = team_df['Funds raised ($)'].values[0]\n        # Calculate and return the fraction of funds raised by the team\n        return team_funds \/ total_funds\n    else:\n        return 0","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Team': ['Tennis', 'Baseball', 'Basketball', 'Water polo', 'Football'],\n    'Funds raised ($)': [920, 990, 940, 890, 830]\n})\n# Call the tool to solve the problem\nfraction = calculate_fraction(df, 'Water polo')\nprint(f\"The fraction of the funds raised by the water polo team is {fraction}.\")"}
{"question":"Jessica found a list of the number of roller coasters at each amusement park in the state. What is the smallest number of roller coasters?","answer":10.0,"table":"Stem | Leaf \n1 | 0, 4, 5, 6\n2 | 1, 2, 3, 4, 5, 9\n3 | 8, 9, 9\n4 | 1, 3, 4, 6, 6, 8, 9","level":8,"tool_id":5000,"code":"import pandas as pd\n\ndef find_smallest_number(df):\n    \"\"\"\n    This function takes in a pandas dataframe of roller coasters per amusement park, and returns the smallest number of roller coasters.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of roller coasters per amusement park.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of roller coasters.\n    \"\"\"\n    # prepare a list to calculate roller coasters in each park\n    roller_coasters = []\n    # calculate the total number of roller coasters in each park\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            roller_coasters.append(stem * 10 + leaf[j])\n    # find the smallest number of roller coasters\n    smallest_number = min(roller_coasters)\n    return smallest_number","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4],\n    'Leaf': [[0, 4, 5, 6], [1, 2, 3, 4, 5, 9], [8, 9, 9], [1, 3, 4, 6, 6, 8, 9]]\n})\n# Call the tool to solve the problem\nsmallest_number = find_smallest_number(df)\nprint(smallest_number)"}
{"question":"A beauty salon in Newberry has three beauticians and keeps track of how often clients request each one specifically. What fraction of requests were for Roxanne? Simplify your answer.","answer":0.4782608696,"table":"Beautician | Requests\nRoxanne | 770\nZach | 140\nMaddie | 700","level":7,"tool_id":10811,"code":"import pandas as pd\n\ndef calculate_fraction(df, name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of beauticians and their requests, and a name of a beautician, and returns the fraction of requests for the specified beautician.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing beauticians and their requests with columns 'Beautician' and 'Requests'.\n    name (str): The name of the beautician.\n    Returns:\n    float: The fraction of requests for the specified beautician.\n    \"\"\"\n    # Filter the DataFrame for the specific beautician\n    beautician_df = df[df['Beautician'] == name]\n    if not beautician_df.empty:\n        # Calculate the total number of requests\n        total_requests = df['Requests'].sum()\n        # Calculate the number of requests for the specified beautician\n        beautician_requests = beautician_df['Requests'].values[0]\n        # Calculate and return the fraction of requests for the specified beautician\n        return beautician_requests \/ total_requests\n    else:\n        return 0","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Beautician': ['Roxanne', 'Zach', 'Maddie'],\n    'Requests': [770, 140, 700]\n})\n# Call the tool to solve the problem\nfraction = calculate_fraction(df, 'Roxanne')\nprint(f\"The fraction of requests for Roxanne is {fraction}\")"}
{"question":"At a swim meet, Quincy noted the size of various swim teams. What is the size of the largest team?","answer":87.0,"table":"Stem | Leaf \n4 | 1, 3, 4, 9\n5 | 0, 0, 1\n6 | 2, 4, 4, 5, 7, 9\n7 | 2, 4, 5\n8 | 3, 4, 5, 7","level":6,"tool_id":13013,"code":"import pandas as pd\n\ndef find_largest_team_size(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of swim team sizes and returns the size of the largest team.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing swim team sizes with columns 'Stem' and 'Leaf'.\n    Returns:\n    int: The size of the largest team.\n    \"\"\"\n    # Prepare a list to store team sizes\n    team_sizes = []\n    \n    # Calculate the size of each team\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            team_sizes.append(stem * 10 + leaf[j])\n    \n    # Find the largest team size\n    largest_team_size = max(team_sizes)\n    \n    return largest_team_size","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7, 8],\n    'Leaf': [[1, 3, 4, 9], [0, 0, 1], [2, 4, 4, 5, 7, 9], [2, 4, 5], [3, 4, 5, 7]]\n})\n\n# Call the tool to solve the problem\nlargest_team_size = find_largest_team_size(df)\nprint(largest_team_size)"}
{"question":"An Idaho farmer has been monitoring crop prices over time. Per cwt, how much did potatoes cost in 2003?","answer":4.0,"table":"Crop | 2003 | 2004\nLentils | $18 | $14\nCanola | $10 | $11\nOnions | $11 | $7\nPotatoes | $4 | $4","level":4,"tool_id":3341,"code":"import pandas as pd\n\ndef get_crop_price(crop_prices_df, crop, year):\n    \"\"\"\n    This function takes in a pandas DataFrame representing crop prices over time, a crop name, and a year, and returns the price of the crop in the specified year.\n    Args:\n    crop_prices_df (pd.DataFrame): A pandas DataFrame containing crop prices over time with columns 'Crop', and years as column names.\n    crop (str): The name of the crop to get the price for.\n    year (str): The year to get the price for the specified crop.\n    Returns:\n    float: The price of the specified crop in the specified year.\n    \"\"\"\n    # Filter the DataFrame for the specific crop\n    crop_df = crop_prices_df[crop_prices_df['Crop'] == crop]\n    \n    # Get the price of the crop in the specified year\n    if not crop_df.empty:\n        price = crop_df[year].values[0]\n        return price\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ncrop_prices_df = pd.DataFrame({\n    'Crop': ['Lentils', 'Canola', 'Onions', 'Potatoes'],\n    '2003': [18, 10, 11, 4],\n    '2004': [14, 11, 7, 4]\n})\n\n# Call the tool to solve the problem\npotato_price_2003 = get_crop_price(crop_prices_df, 'Potatoes', '2003')\nprint(potato_price_2003)"}
{"question":"To get credit for meeting his school's community service requirement, Sandeep kept a volunteering log. What is the mode of the numbers?","answer":2.0,"table":"Day | Hours\nSunday | 3\nMonday | 3\nTuesday | 2\nWednesday | 2\nThursday | 2","level":5,"tool_id":8850,"code":"import pandas as pd\nfrom collections import Counter\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a volunteering log and returns the mode of the hours.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing days and hours with columns 'Day' and 'Hours'.\n    Returns:\n    int: The mode of the hours.\n    \"\"\"\n    # Extract the 'Hours' column from the DataFrame\n    hours = df['Hours'].values\n    \n    # Calculate the frequency of each hour value\n    frequency = Counter(hours)\n    \n    # Find the hour(s) with the highest frequency\n    mode = [hour for hour, freq in frequency.items() if freq == max(frequency.values())]\n    \n    return mode","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],\n    'Hours': [3, 3, 2, 2, 2]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))"}
{"question":"To get credit for meeting his school's community service requirement, Edmond kept a volunteering log. What is the range of the numbers?","answer":5.0,"table":"Day | Hours\nMonday | 6\nTuesday | 6\nWednesday | 6\nThursday | 8\nFriday | 3\nSaturday | 7","level":7,"tool_id":4943,"code":"import pandas as pd\n\ndef calculate_range(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a volunteering log and returns the range of the hours.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing days and hours with columns 'Day' and 'Hours'.\n    Returns:\n    int: The range of the hours.\n    \"\"\"\n    # Calculate the range of the hours\n    range_hours = df['Hours'].max() - df['Hours'].min()\n    \n    return range_hours","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'Hours': [6, 6, 6, 8, 3, 7]\n})\n# Call the tool to solve the problem\nrange_hours = calculate_range(df)\nprint(range_hours)"}
{"question":"Four of the sports teams from Lancaster High School decided to raise funds to buy new sports equipment. What fraction of the funds were raised by the football team? Simplify your answer.","answer":0.1506024096,"table":"Team | Funds raised ($)\nBasketball | 880\nTrack | 960\nWater polo | 980\nFootball | 500","level":7,"tool_id":417,"code":"import pandas as pd\nfrom fractions import Fraction\n\ndef calculate_fraction_of_funds_raised(df, team_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of funds raised by different teams and a team name, and returns the fraction of funds raised by the specified team.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing team names and the funds they raised with columns 'Team' and 'Funds raised ($)'.\n    team_name (str): The name of the team for which the fraction of funds raised should be calculated.\n    Returns:\n    Fraction: The fraction of funds raised by the specified team.\n    \"\"\"\n    # Get the total funds raised by all teams\n    total_funds = df['Funds raised ($)'].sum()\n    \n    # Get the funds raised by the specified team\n    team_funds = df[df['Team'] == team_name]['Funds raised ($)'].values[0]\n    \n    # Calculate the fraction of funds raised by the specified team\n    fraction = Fraction(team_funds, total_funds)\n    \n    return fraction","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Team': ['Basketball', 'Track', 'Water polo', 'Football'],\n    'Funds raised ($)': [880, 960, 980, 500]\n})\n\n# Call the tool to solve the problem\nfraction = calculate_fraction_of_funds_raised(df, 'Football')\n\n# Print the answer\nprint(fraction)"}
{"question":"A beauty salon in Westminster has four beauticians and keeps track of how often clients request each one specifically. What fraction of requests were for Jennifer? Simplify your answer.","answer":0.2051282051,"table":"Beautician | Requests\nEdwin | 60\nJennifer | 400\nSasha | 900\nCameron | 590","level":7,"tool_id":7151,"code":"import pandas as pd\n\ndef calculate_fraction(df, name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of beauticians and their requests, and a name of a beautician, and returns the fraction of requests for the specified beautician.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing beauticians and their requests with columns 'Beautician' and 'Requests'.\n    name (str): The name of the beautician.\n    Returns:\n    float: The fraction of requests for the specified beautician.\n    \"\"\"\n    # Filter the DataFrame for the specific beautician\n    beautician_df = df[df['Beautician'] == name]\n    if not beautician_df.empty:\n        # Calculate the total number of requests\n        total_requests = df['Requests'].sum()\n        # Calculate the number of requests for the specified beautician\n        beautician_requests = beautician_df['Requests'].values[0]\n        # Calculate and return the fraction of requests for the specified beautician\n        return beautician_requests \/ total_requests\n    else:\n        return 0","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Beautician': ['Edwin', 'Jennifer', 'Sasha', 'Cameron'],\n    'Requests': [60, 400, 900, 590]\n})\n# Call the tool to solve the problem\nfraction = calculate_fraction(df, 'Jennifer')\nprint(f\"The fraction of requests for Jennifer is {fraction}.\")"}
{"question":"An adventure tour company found out how many whales people saw on its most popular whale tour. How many people are there in all?","answer":43.0,"table":"Whales spotted | Frequency\n0 | 0\n1 | 3\n2 | 20\n3 | 5\n4 | 7\n5 | 8","level":8,"tool_id":13442,"code":"import pandas as pd\n\ndef calculate_total_people(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a frequency table of whales spotted and returns the total number of people.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of whales spotted and the frequency with columns 'Whales spotted' and 'Frequency'.\n    Returns:\n    int: The total number of people.\n    \"\"\"\n    # Multiply the number of whales spotted by the frequency and sum up the results\n    total_people = df['Frequency'].sum()\n    \n    return total_people","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Whales spotted': [0, 1, 2, 3, 4, 5],\n    'Frequency': [0, 3, 20, 5, 7, 8]\n})\n\n# Call the tool to solve the problem\ntotal_people = calculate_total_people(df)\nprint(total_people)"}
{"question":"An adventure tour company found out how many whales people saw on its most popular whale tour. How many people are there in all?","answer":42.0,"table":"Whales spotted | Frequency\n0 | 6\n1 | 0\n2 | 14\n3 | 2\n4 | 20","level":7,"tool_id":3382,"code":"import pandas as pd\n\ndef calculate_total_people(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a frequency table of whales spotted and returns the total number of people.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of whales spotted and the frequency with columns 'Whales spotted' and 'Frequency'.\n    Returns:\n    int: The total number of people.\n    \"\"\"\n    # Multiply the number of whales spotted by the frequency and sum up the results\n    total_people = df['Frequency'].sum()\n    \n    return total_people","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Whales spotted': [0, 1, 2, 3, 4],\n    'Frequency': [6, 0, 14, 2, 20]\n})\n# Call the tool to solve the problem\ntotal_people = calculate_total_people(df)\nprint(total_people)"}
{"question":"An adventure tour company found out how many whales people saw on its most popular whale tour. How many people are there in all?","answer":44.0,"table":"Whales spotted | Frequency\n0 | 12\n1 | 20\n2 | 8\n3 | 4","level":7,"tool_id":15702,"code":"import pandas as pd\n\ndef calculate_total_people(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a frequency table of whales spotted and returns the total number of people.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of whales spotted and the frequency with columns 'Whales spotted' and 'Frequency'.\n    Returns:\n    int: The total number of people.\n    \"\"\"\n    # Multiply the number of whales spotted by the frequency and sum up the results\n    total_people = (df['Whales spotted'] * df['Frequency']).sum()\n    \n    return total_people","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Whales spotted': [0, 1, 2, 3],\n    'Frequency': [12, 20, 8, 4]\n})\n\n# Call the tool to solve the problem\ntotal_people = calculate_total_people(df)\nprint(total_people)"}
{"question":"Spencer found out the sizes of all the clubs at his school. What is the size of the smallest club?","answer":11.0,"table":"Stem | Leaf \n1 | 1, 1, 5, 6, 9, 9\n2 | 1, 5\n3 | 0, 4, 4\n4 | 2, 3, 6\n5 | 2, 5, 5\n6 | 3\n7 | 0, 9","level":6,"tool_id":3470,"code":"import pandas as pd\n\ndef find_smallest_club(df):\n    \"\"\"\n    This function takes in a pandas dataframe of club sizes, and returns the size of the smallest club.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the sizes of clubs.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The size of the smallest club.\n    \"\"\"\n    # prepare a list to calculate sizes of each club\n    sizes = []\n    # calculate the size of each club\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            sizes.append(stem * 10 + leaf[j])\n    # find the smallest size\n    smallest_size = min(sizes)\n    return smallest_size","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7],\n    'Leaf': [[1, 1, 5, 6, 9, 9], [1, 5], [0, 4, 4], [2, 3, 6], [2, 5, 5], [3], [0, 9]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_club(df))"}
{"question":"An Idaho farmer has been monitoring crop prices over time. Per cwt, how much more did lentils cost in 2006 than in 2005?","answer":4.0,"table":"Crop | 2005 | 2006\nLentils | $12 | $16\nPotatoes | $6 | $6\nCanola | $10 | $12\nOnions | $8 | $17\nPeas | $6 | $8","level":5,"tool_id":11942,"code":"import pandas as pd\n\ndef calculate_price_difference(df, crop):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a crop price table and a string of crop name, and returns the price difference of the crop between 2006 and 2005.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing crop names and their prices in 2005 and 2006 with columns 'Crop', '2005' and '2006'.\n    crop (str): A string representing the name of the crop.\n    Returns:\n    float: The price difference of the crop between 2006 and 2005.\n    \"\"\"\n    # Filter the DataFrame for the specific crop\n    crop_df = df[df['Crop'] == crop]\n    if not crop_df.empty:\n        price_2005 = crop_df['2005'].values[0]\n        price_2006 = crop_df['2006'].values[0]\n        price_difference = price_2006 - price_2005\n        return price_difference\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Crop': ['Lentils', 'Potatoes', 'Canola', 'Onions', 'Peas'],\n    '2005': [12, 6, 10, 8, 6],\n    '2006': [16, 6, 12, 17, 8]\n})\n\n# Call the tool to solve the problem\nprice_difference = calculate_price_difference(df, 'Lentils')\nprint(price_difference)"}
{"question":"An Idaho farmer has been monitoring crop prices over time. Per cwt, how much more did lentils cost in 2006 than in 2005?","answer":4.0,"table":"Crop | 2005 | 2006\nCanola | $10 | $12\nOnions | $8 | $17\nApples | $18 | $19\nPeas | $6 | $8\nLentils | $12 | $16","level":4,"tool_id":6380,"code":"import pandas as pd\n\ndef calculate_price_difference(df, crop):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a crop price table and a crop name, and returns the price difference of the crop between 2006 and 2005.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing crop names and their prices in 2005 and 2006 with columns 'Crop', '2005' and '2006'.\n    crop (str): The name of the crop.\n    Returns:\n    float: The price difference of the crop between 2006 and 2005.\n    \"\"\"\n    # Filter the DataFrame for the specific crop\n    crop_df = df[df['Crop'] == crop]\n    if not crop_df.empty:\n        price_2005 = crop_df['2005'].values[0]\n        price_2006 = crop_df['2006'].values[0]\n        price_difference = price_2006 - price_2005\n        return price_difference\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Crop': ['Canola', 'Onions', 'Apples', 'Peas', 'Lentils'],\n    '2005': [10, 8, 18, 6, 12],\n    '2006': [12, 17, 19, 8, 16]\n})\n\n# Call the tool to solve the problem\nprice_difference = calculate_price_difference(df, 'Lentils')\nprint(price_difference)"}
{"question":"The soccer coach is preparing for the upcoming season by seeing how many goals his team members scored last season. How many team members scored exactly 3 goals last season?","answer":14.0,"table":"Goals scored | Frequency\n0 | 8\n1 | 4\n2 | 6\n3 | 14\n4 | 11\n5 | 2\n6 | 3","level":7,"tool_id":6895,"code":"import pandas as pd\n\ndef count_players_with_goals(df, goals):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a frequency table of goals scored by team members and a specific number of goals, and returns the frequency of team members who scored exactly that number of goals.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of goals scored and their frequencies with columns 'Goals scored' and 'Frequency'.\n    goals (int): The specific number of goals to look for.\n    Returns:\n    int: The frequency of team members who scored exactly the specified number of goals.\n    \"\"\"\n    # Filter the DataFrame for the specific number of goals\n    goals_df = df[df['Goals scored'] == goals]\n    if not goals_df.empty:\n        frequency = goals_df['Frequency'].values[0]\n        return frequency\n    else:\n        return 0","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Goals scored': [0, 1, 2, 3, 4, 5, 6],\n    'Frequency': [8, 4, 6, 14, 11, 2, 3]\n})\n# Call the tool to solve the problem\nprint(count_players_with_goals(df, 3))"}
{"question":"To get credit for meeting his school's community service requirement, Levi kept a volunteering log. What is the mode of the numbers?","answer":12.0,"table":"Day | Hours\nMonday | 8\nTuesday | 7\nWednesday | 8\nThursday | 12\nFriday | 12\nSaturday | 7\nSunday | 12","level":5,"tool_id":16290,"code":"import pandas as pd\nfrom collections import Counter\n\ndef calculate_mode(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a volunteering log and returns the mode of the hours.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing days and hours with columns 'Day' and 'Hours'.\n    Returns:\n    int: The mode of the hours.\n    \"\"\"\n    # Extract the 'Hours' column from the DataFrame\n    hours = df['Hours'].values\n    \n    # Calculate the frequency of each hour value\n    freq_dict = Counter(hours)\n    \n    # Find the hour(s) with the highest frequency\n    mode = [k for k, v in freq_dict.items() if v == max(list(freq_dict.values()))]\n    \n    return mode","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n    'Hours': [8, 7, 8, 12, 12, 7, 12]\n})\n# Call the tool to solve the problem\nprint(calculate_mode(df))"}
{"question":"A beauty salon in Vindale has three beauticians and keeps track of how often clients request each one specifically. What fraction of requests were for Bruce? Simplify your answer.","answer":0.1340782123,"table":"Beautician | Requests\nBruce | 240\nRuth | 740\nGavin | 810","level":7,"tool_id":78,"code":"import pandas as pd\n\ndef calculate_fraction_of_requests(df, beautician_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of beauticians and their requests, and returns the fraction of requests for a specific beautician.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing beauticians and their requests with columns 'Beautician' and 'Requests'.\n    beautician_name (str): The name of the beautician for which the fraction of requests is to be calculated.\n    Returns:\n    float: The fraction of requests for the specified beautician.\n    \"\"\"\n    # Filter the DataFrame for the specific beautician\n    beautician_df = df[df['Beautician'] == beautician_name]\n    if not beautician_df.empty:\n        beautician_requests = beautician_df['Requests'].values[0]\n        total_requests = df['Requests'].sum()\n        fraction_of_requests = beautician_requests \/ total_requests\n        return fraction_of_requests\n    else:\n        return 0.0","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Beautician': ['Bruce', 'Ruth', 'Gavin'],\n    'Requests': [240, 740, 810]\n})\n# Call the tool to solve the problem\nfraction = calculate_fraction_of_requests(df, 'Bruce')\nprint(f\"The fraction of requests for Bruce is {fraction}\")"}
{"question":"Dr. Brady, a zoo director, researched ticket prices at other zoos around the country. How much does an adult ticket to the Los Angeles Zoo cost?","answer":13.0,"table":"Zoo | Adult | Child\nBrookfield | $12 | $8\nLos Angeles | $13 | $8\nCleveland | $10 | $7\nBronx | $15 | $11\nCentral Florida | $11 | $7","level":5,"tool_id":4092,"code":"import pandas as pd\n\ndef get_adult_ticket_price(df, zoo_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a zoo ticket price table and a zoo name, and returns the adult ticket price for the specified zoo.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing zoo names and their ticket prices with columns 'Zoo', 'Adult', and 'Child'.\n    zoo_name (str): The name of the zoo.\n    Returns:\n    float: The adult ticket price for the specified zoo.\n    \"\"\"\n    # Filter the DataFrame for the specific zoo\n    zoo_df = df[df['Zoo'] == zoo_name]\n    if not zoo_df.empty:\n        adult_ticket_price = zoo_df['Adult'].values[0]\n        return adult_ticket_price\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Zoo': ['Brookfield', 'Los Angeles', 'Cleveland', 'Bronx', 'Central Florida'],\n    'Adult': [12, 13, 10, 15, 11],\n    'Child': [8, 8, 7, 11, 7]\n})\n# Call the tool to solve the problem\nadult_ticket_price = get_adult_ticket_price(df, 'Los Angeles')\nprint(adult_ticket_price)"}
{"question":"Each bowl has 2 cherries. How many cherries are in 6 bowls?","answer":12.0,"table":"Number of bowls | Number of cherries\n1 | 2\n2 | 4\n3 | 6\n4 | 8\n5 | 10\n6 | ?","level":1,"tool_id":10032,"code":"def calculate_cherries_in_bowls(num_bowls):\n    \"\"\"\n    This function takes in the number of bowls and returns the number of cherries in those bowls.\n    Args:\n    num_bowls (int): The number of bowls.\n    Returns:\n    int: The number of cherries in the bowls.\n    \"\"\"\n    # Each bowl has 2 cherries\n    num_cherries = num_bowls * 2\n    return num_cherries","api_call":"# Call the tool to solve the problem\nprint(calculate_cherries_in_bowls(6))"}
{"question":"A Technical Assistance Manager monitored his customers' wait times. How many people waited for exactly 39 minutes?","answer":3.0,"table":"Stem | Leaf \n3 | 1, 1, 7, 9, 9, 9\n4 | 0, 3, 5, 5, 6, 7, 8, 9\n5 | 0, 6\n6 | 7, 9, 9\n7 | 3, 7\n8 | 0, 2, 7, 9","level":6,"tool_id":15580,"code":"import pandas as pd\n\ndef count_customers_with_wait_time(df, wait_time):\n    \"\"\"\n    This function takes in a pandas dataframe of customers' wait times, and returns the number of customers who waited for exactly a certain amount of time.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the customers' wait times.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    wait_time (int): The wait time to count.\n    Returns:\n    int: The number of customers who waited for exactly the specified wait time.\n    \"\"\"\n    # prepare a list to calculate wait times\n    wait_times = []\n    # calculate the total wait time for each customer\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            wait_times.append(stem * 10 + leaf[j])\n    # filter the customers where the wait time is exactly the specified wait time\n    filtered = [time for time in wait_times if time == wait_time]\n    # count the number of customers\n    num_customers = len(filtered)\n    return num_customers","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7, 8],\n    'Leaf': [[1, 1, 7, 9, 9, 9], [0, 3, 5, 5, 6, 7, 8, 9], [0, 6], [7, 9, 9], [3, 7], [0, 2, 7, 9]]\n})\n# Call the tool to solve the problem\nprint(count_customers_with_wait_time(df, 39))"}
