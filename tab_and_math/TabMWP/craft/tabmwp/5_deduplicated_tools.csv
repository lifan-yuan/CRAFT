question,answer,table,level,tool_id,code,api_call,tool,tool_call
"While hanging Christmas lights for neighbors, Jen counted the number of broken lights on each string. How many strings had exactly 74 broken lights?",0,"Stem | Leaf 
5 | 1, 2, 2, 6, 7
6 | 4, 7, 7
7 | 1
8 | 4, 8",4,13872,"import pandas as pd
def count_strings_with_74_broken_lights(df):
    """"""
    This function takes in a pandas dataframe of broken lights per string, and returns the number of strings that have exactly 74 broken lights.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken lights per string.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of strings that have exactly 74 broken lights.
    """"""
    # prepare a list to calculate broken lights in each string
    broken_lights = []
    # calculate the total number of broken lights in each string
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            broken_lights.append(stem * 10 + leaf[j])
    # filter the strings where the total number of broken lights is exactly 74
    filtered = [light for light in broken_lights if light == 74]
    # count the number of rows
    num_strings = len(filtered)
    return num_strings","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [5, 6, 7, 8],
    'Leaf': [[1, 2, 2, 6, 7], [4, 7, 7], [1], [4, 8]]
})
# Call the tool to solve the problem
count_strings_with_74_broken_lights(df)
```","def count_groups_with_exact_value_in_stem_leaf(data_frame, stem_col, leaf_col, item_exact_value):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of groups and an exact value, and returns the number of groups that have values exactly equal to the given value.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    item_exact_value (int): The exact value for filtering items.
    
    Returns:
    int: The number of items with values exactly equal to the given value.
    """"""
    # Initialize the list to calculate items in each group
    items = []
    
    # Calculate the total value of items in each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Filter the items where the total value is exactly equal to the given value
    filtered = [item for item in items if item == item_exact_value]
    
    # Count the number of items
    num_items = len(filtered)
    
    return num_items","data = {
    ""Stem"": [5, 6, 7, 8],
    ""Leaf"": [[1, 2, 2, 6, 7], [4, 7, 7], [1], [4, 8]]
}

df = pd.DataFrame(data)
print(count_groups_with_exact_value_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf"", item_exact_value=74))"
A game show program recorded the scores of its contestants. How many contestants scored more than 8?,21,"Score | Frequency
5 | 3
6 | 19
7 | 8
8 | 6
9 | 11
10 | 10",7,15416,"import pandas as pd

def count_contestants_with_score_above(df, score):
    """"""
    This function takes in a pandas DataFrame representing a score frequency table and a score, and returns the number of contestants who scored above the given score.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing scores and their frequencies with columns 'Score' and 'Frequency'.
    score (int): The score to compare against.
    Returns:
    int: The number of contestants who scored above the given score.
    """"""
    # Filter the DataFrame for scores above the given score
    filtered_df = df[df['Score'] > score]
    
    # Sum the frequencies of the filtered scores
    num_contestants = filtered_df['Frequency'].sum()
    
    return num_contestants","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Score': [5, 6, 7, 8, 9, 10],
    'Frequency': [3, 19, 8, 6, 11, 10]
})
# Call the tool to solve the problem
count_contestants_with_score_above(df, 8)
```","def count_instances_above_threshold_in_frequency_table(data_frame, value_col, frequency_col, threshold_value):
    """"""
    This function takes in a pandas DataFrame representing a frequency table, a value column, a frequency column, and a threshold value, and returns the number of instances with values above the threshold.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the frequency table with columns specified by value_col and frequency_col.
    value_col (str): The column name for the values.
    frequency_col (str): The column name for the frequencies.
    threshold_value (int): The threshold value for filtering instances.
    
    Returns:
    int: The number of instances with values above the threshold.
    """"""
    # Filter the DataFrame for values above the threshold
    filtered_df = data_frame[data_frame[value_col] > threshold_value]
    
    # Sum the frequencies of the filtered values
    num_instances = filtered_df[frequency_col].sum()
    
    return num_instances","data = {
    'Score': [5, 6, 7, 8, 9, 10],
    'Frequency': [3, 19, 8, 6, 11, 10]
}

df = pd.DataFrame(data)
print(count_instances_above_threshold_in_frequency_table(data_frame=df, value_col=""Score"", frequency_col=""Frequency"", threshold_value=8))"
"A dog show enthusiast recorded the weight of the winning dog at recent dog shows. According to the table, what was the rate of change between 2015 and 2016?",-1,"Year | Weight (kg)
2014 | 40
2015 | 46
2016 | 45
2017 | 43
2018 | 42",7,16668,"import pandas as pd

def calculate_rate_of_change(df, year1, year2):
    """"""
    This function takes in a pandas DataFrame representing a table of years and weights, and calculates the rate of change between two given years.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing years and weights with columns 'Year' and 'Weight (kg)'.
    year1 (int): The first year to calculate the rate of change.
    year2 (int): The second year to calculate the rate of change.
    Returns:
    float: The rate of change between the two years.
    """"""
    # Filter the DataFrame for the specific years
    year1_df = df[df['Year'] == year1]
    year2_df = df[df['Year'] == year2]
    
    # Check if both years are present in the DataFrame
    if not year1_df.empty and not year2_df.empty:
        weight1 = year1_df['Weight (kg)'].values[0]
        weight2 = year2_df['Weight (kg)'].values[0]
        
        # Calculate the rate of change
        rate_of_change = (weight2 - weight1) / (year2 - year1)
        return rate_of_change
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Year': [2014, 2015, 2016, 2017, 2018],
    'Weight (kg)': [40, 46, 45, 43, 42]
})

# Call the tool to solve the problem
rate_of_change = calculate_rate_of_change(df, 2015, 2016)
print(rate_of_change)
```","def calculate_rate_of_change_in_time_series(df, time_col, value_col, time1, time2):
    """"""
    This function takes in a pandas DataFrame representing a time series and calculates the rate of change between two given points in time.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing a time series with columns specified by time_col and value_col.
    time_col (str): The column name for the time values.
    value_col (str): The column name for the value at each point in time.
    time1 (int or str): The first point in time to calculate the rate of change.
    time2 (int or str): The second point in time to calculate the rate of change.
    
    Returns:
    float: The rate of change between the two points in time, or None if either point in time is not present in the DataFrame.
    """"""
    # Filter the DataFrame for the specific points in time
    time1_df = df[df[time_col] == time1]
    time2_df = df[df[time_col] == time2]
    
    # Check if both points in time are present in the DataFrame
    if not time1_df.empty and not time2_df.empty:
        value1 = time1_df[value_col].values[0]
        value2 = time2_df[value_col].values[0]
        
        # Calculate the rate of change
        rate_of_change = (value2 - value1) / (time2 - time1)
        return rate_of_change
    else:
        return None","df = pd.DataFrame({
    'Year': [2014, 2015, 2016, 2017, 2018],
    'Weight (kg)': [40, 46, 45, 43, 42]
})

print(calculate_rate_of_change_in_time_series(df, 'Year', 'Weight (kg)', 2015, 2016))"
Greg recalled how many goals he had made in soccer practice each day. What is the median of the numbers?,5,"Day | Number of goals
Wednesday | 4
Thursday | 7
Friday | 0
Saturday | 2
Sunday | 8
Monday | 5
Tuesday | 6",6,6088,"import pandas as pd
import numpy as np

def calculate_median(df):
    """"""
    This function takes in a pandas DataFrame containing a column of numbers and returns the median of the numbers.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing a column of numbers.
    Returns:
    float: The median of the numbers.
    """"""
    # Extract the column of numbers
    numbers = df['Number of goals'].values
    
    # Calculate the median using numpy
    median = np.median(numbers)
    
    return median","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],
    'Number of goals': [4, 7, 0, 2, 8, 5, 6]
})

# Call the tool to solve the problem
median_goals = calculate_median(df)
print(median_goals)","def calculate_median_of_column(df, num_col):
    """"""
    This function takes in a pandas DataFrame and a column name, and returns the median of the numbers in the specified column.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing a column of numbers.
    num_col (str): The column name for the numbers.
    
    Returns:
    float: The median of the numbers in the specified column.
    """"""
    # Extract the column of numbers
    numbers = df[num_col].values
    
    # Calculate the median using numpy
    median = np.median(numbers)
    
    return median","df = pd.DataFrame({
    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],
    'Number of goals': [4, 7, 0, 2, 8, 5, 6]
})

print(calculate_median_of_column(df, 'Number of goals'))"
"Mrs. Davis told students how many rounds to expect in the spelling bee based on previous years. According to the table, what was the rate of change between 2017 and 2018?",5,"Year | Rounds
2015 | 14
2016 | 12
2017 | 9
2018 | 14
2019 | 13",7,3738,"import pandas as pd

def calculate_rate_of_change(df, start_year, end_year):
    """"""
    This function takes in a pandas DataFrame representing a table of years and rounds, and two years, and returns the rate of change between the two years.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing years and rounds with columns 'Year' and 'Rounds'.
    start_year (int): The start year for the rate of change calculation.
    end_year (int): The end year for the rate of change calculation.
    Returns:
    float: The rate of change between the two years.
    """"""
    # Filter the DataFrame for the start year and end year
    start_year_df = df[df['Year'] == start_year]
    end_year_df = df[df['Year'] == end_year]
    
    # Check if the start year and end year exist in the DataFrame
    if not start_year_df.empty and not end_year_df.empty:
        # Calculate the rate of change
        rate_of_change = end_year_df['Rounds'].values[0] - start_year_df['Rounds'].values[0]
        return rate_of_change
    else:
        return None","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Year': [2015, 2016, 2017, 2018, 2019],
    'Rounds': [14, 12, 9, 14, 13]
})

# Call the tool to solve the problem
rate_of_change = calculate_rate_of_change(df, 2017, 2018)
print(rate_of_change)
```","def calculate_rate_of_change_between_two_points(data_frame, year_col, value_col, start_point, end_point):
    """"""
    This function takes in a pandas DataFrame representing a table of values and two points, and returns the rate of change between the two points.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing years and values with columns specified by year_col and value_col.
    year_col (str): The column name for the year values.
    value_col (str): The column name for the value values.
    start_point (int): The start point for the rate of change calculation.
    end_point (int): The end point for the rate of change calculation.
    
    Returns:
    float: The rate of change between the two points.
    """"""
    # Filter the DataFrame for the start point and end point
    start_point_df = data_frame[data_frame[year_col] == start_point]
    end_point_df = data_frame[data_frame[year_col] == end_point]
    
    # Check if the start point and end point exist in the DataFrame
    if not start_point_df.empty and not end_point_df.empty:
        # Calculate the rate of change
        rate_of_change = end_point_df[value_col].values[0] - start_point_df[value_col].values[0]
        return rate_of_change
    else:
        return None","data = {
    'Year': [2015, 2016, 2017, 2018, 2019],
    'Rounds': [14, 12, 9, 14, 13]
}

df = pd.DataFrame(data)
print(calculate_rate_of_change_between_two_points(data_frame=df, year_col=""Year"", value_col=""Rounds"", start_point=2017, end_point=2018))"
Nora buys 3/4 of a kilogram of coriander. What is the total cost?,3,"cumin | $3/kg
pepper | $2/kg
turmeric | $3/kg
coriander | $4/kg",6,3606,"import pandas as pd

def calculate_spice_cost(spice_df, spice, quantity):
    """"""
    This function takes in a pandas DataFrame representing a spice table, the name of a spice, and a quantity, and returns the total cost of the spice using pandas.
    Args:
    spice_df (pd.DataFrame): A pandas DataFrame containing spices and their prices with columns 'Spice' and 'Price'.
    spice (str): The name of the spice.
    quantity (float): The quantity of the spice in kilograms.
    Returns:
    float: The total cost of the spice.
    """"""
    # Filter the DataFrame for the specific spice
    spice_df = spice_df[spice_df['Spice'] == spice]
    if not spice_df.empty:
        spice_price = spice_df['Price'].values[0]
        total_cost = quantity * spice_price
    else:
        total_cost = 0.0
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
spice_df = pd.DataFrame({
    'Spice': ['cumin', 'pepper', 'turmeric', 'coriander'],
    'Price': [3, 2, 3, 4]
})

# Call the tool to solve the problem
total_cost = calculate_spice_cost(spice_df, 'coriander', 0.75)
print(total_cost)
```","def calculate_total_cost_from_unit_price_and_quantity(item_prices_df, item_col, unit_price_col, item_name, quantity):
    """"""
    This function takes in a pandas DataFrame representing a table of item prices, the name of an item, and a quantity, and returns the total cost of the item based on the price and quantity.
    
    Args:
    item_prices_df (pd.DataFrame): A pandas DataFrame containing item names and their prices.
    item_col (str): The column name for the item names.
    unit_price_col (str): The column name for the item prices.
    item_name (str): The name of the item.
    quantity (float): The quantity of the item.
    
    Returns:
    float: The total cost of the item.
    """"""
    # Filter the DataFrame for the specific item name
    item_price_df = item_prices_df[item_prices_df[item_col] == item_name]
    if not item_price_df.empty:
        item_price = item_price_df[unit_price_col].values[0]
        total_cost = quantity * item_price
    else:
        total_cost = 0.0
    
    return total_cost","item_prices_data = {
    'Item': ['cumin', 'pepper', 'turmeric', 'coriander'],
    'Price': [3, 2, 3, 4]
}

item_prices_df = pd.DataFrame(item_prices_data)

print(calculate_total_cost_from_unit_price_and_quantity(item_prices_df, ""Item"", ""Price"", ""coriander"", 0.75))"
A customer at a sushi restaurant was examining the types of sushi rolls offered on the menu. Rolls vary by type of fish and level of spiciness. Rolls only contain one type of fish. What is the probability that a randomly selected sushi roll contains salmon and is labeled a little spicy? Simplify any fractions.,0.3," | Not spicy | A little spicy
Yellowtail | 2 | 3
Salmon | 2 | 3",8,5681,"import pandas as pd

def calculate_probability(df, fish_type, spiciness):
    """"""
    This function takes in a pandas DataFrame representing a sushi menu table, a fish type, and a spiciness level, and returns the probability of a randomly selected sushi roll containing the specified fish type and spiciness level.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing sushi roll types and their quantities.
    fish_type (str): The type of fish.
    spiciness (str): The level of spiciness.
    Returns:
    float: The probability of a randomly selected sushi roll containing the specified fish type and spiciness level.
    """"""
    # Calculate the total number of sushi rolls
    total_rolls = df.sum().sum()
    
    # Get the number of rolls with the specified fish type and spiciness level
    specific_rolls = df.loc[fish_type, spiciness]
    
    # Calculate and return the probability
    probability = specific_rolls / total_rolls
    return probability","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Not spicy': [2, 2],
    'A little spicy': [3, 3]
}, index=['Yellowtail', 'Salmon'])

# Call the tool to solve the problem
probability = calculate_probability(df, 'Salmon', 'A little spicy')
print(probability)
```","def calculate_probability_of_specific_event(event_frequency_df, specific_event):
    """"""
    This function takes in a pandas DataFrame representing a table of events and their frequencies, and a specific event, and returns the probability of the specific event.
    
    Args:
    event_frequency_df (pd.DataFrame): A pandas DataFrame containing events and their frequencies.
    specific_event (tuple): A tuple containing the specific event. The first element is the index name and the second element is the column name.
    
    Returns:
    float: The probability of the specific event.
    """"""
    # Calculate the total number of events
    total_events = event_frequency_df.sum().sum()
    
    # Get the frequency of the specific event
    specific_event_frequency = event_frequency_df.loc[specific_event[0], specific_event[1]]
    
    # Calculate and return the probability
    probability = specific_event_frequency / total_events
    return probability","event_frequency_data = {
    'Not spicy': [2, 2],
    'A little spicy': [3, 3]
}

event_frequency_df = pd.DataFrame(event_frequency_data, index=['Yellowtail', 'Salmon'])

specific_event = ('Salmon', 'A little spicy')
print(calculate_probability_of_specific_event(event_frequency_df, specific_event))"
How much money does Samantha need to buy an African safari vacation package and a Hawaiian vacation package?,1728,"African safari vacation package | $787.00
Caribbean vacation package | $927.00
Hawaiian vacation package | $941.00
Australian vacation package | $553.00",4,10504,"import pandas as pd

def calculate_total_cost_vacation(vacation_df, packages):
    """"""
    This function takes in a pandas DataFrame representing a vacation packages table and a list of packages, and returns the total cost of the packages using pandas.
    Args:
    vacation_df (pd.DataFrame): A pandas DataFrame containing vacation packages and their prices with columns 'Package' and 'Price'.
    packages (list): A list where the elements are vacation package names.
    Returns:
    float: The total cost of the packages.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the vacation packages and calculate the cost for each selected package
    for package in packages:
        # Filter the DataFrame for the specific package
        package_df = vacation_df[vacation_df['Package'] == package]
        if not package_df.empty:
            package_price = package_df['Price'].values[0]
            total_cost += package_price
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Package': ['African safari vacation package', 'Caribbean vacation package', 'Hawaiian vacation package', 'Australian vacation package'],
    'Price': [787.00, 927.00, 941.00, 553.00]
})
# Call the tool to solve the problem
total_cost = calculate_total_cost_vacation(df, ['African safari vacation package', 'Hawaiian vacation package'])
print(total_cost)
```","def calculate_total_cost_from_package_prices(package_prices_df, package_col, price_col, selected_packages):
    """"""
    This function takes in a pandas DataFrame representing a table of package prices and a list of selected packages, and returns the total cost of the packages based on the prices.
    
    Args:
    package_prices_df (pd.DataFrame): A pandas DataFrame containing package names and their prices.
    package_col (str): The column name for the package names.
    price_col (str): The column name for the package prices.
    selected_packages (list): A list where the elements are selected package names.
    
    Returns:
    float: The total cost of the packages.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the package names and add the price for each selected package
    for package_name in selected_packages:
        # Filter the DataFrame for the specific package name
        package_price_df = package_prices_df[package_prices_df[package_col] == package_name]
        if not package_price_df.empty:
            package_price = package_price_df[price_col].values[0]
            total_cost += package_price
    
    return total_cost","package_prices_data = {
    'Package': ['African safari vacation package', 'Caribbean vacation package', 'Hawaiian vacation package', 'Australian vacation package'],
    'Price': [787.00, 927.00, 941.00, 553.00]
}

package_prices_df = pd.DataFrame(package_prices_data)

selected_packages = ['African safari vacation package', 'Hawaiian vacation package']
print(calculate_total_cost_from_package_prices(package_prices_df, ""Package"", ""Price"", selected_packages))"
"Lila's Crafts is interested in offering a scarf knitting class, so the store considers how many scarves people already own. How many people have more than 2 scarves?",29,"Number of scarves | Frequency
0 | 7
1 | 12
2 | 4
3 | 3
4 | 10
5 | 16",7,4816,"import pandas as pd

def count_people_with_more_than_2_scarves(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of the number of scarves people own, and returns the number of people who own more than 2 scarves.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of scarves and their frequencies with columns 'Number of scarves' and 'Frequency'.
    Returns:
    int: The number of people who own more than 2 scarves.
    """"""
    # Filter the DataFrame for the rows where the number of scarves is more than 2
    filtered_df = df[df['Number of scarves'] > 2]
    
    # Sum the frequencies of these rows to get the total number of people who own more than 2 scarves
    num_people = filtered_df['Frequency'].sum()
    
    return num_people","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of scarves': [0, 1, 2, 3, 4, 5],
    'Frequency': [7, 12, 4, 3, 10, 16]
})
# Call the tool to solve the problem
count_people_with_more_than_2_scarves(df)
```","def count_frequency_above_threshold(data_frame, item_col, frequency_col, item_threshold):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of items and a threshold value, and returns the total frequency of items that are greater than the threshold.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the items and their frequencies with columns specified by item_col and frequency_col.
    item_col (str): The column name for the items.
    frequency_col (str): The column name for the frequencies.
    item_threshold (int): The threshold value for filtering items.
    
    Returns:
    int: The total frequency of items that are greater than the threshold.
    """"""
    # Filter the DataFrame for the rows where the number of items is more than the threshold
    filtered_df = data_frame[data_frame[item_col] > item_threshold]
    
    # Sum the frequencies of these rows to get the total frequency of items that are greater than the threshold
    total_frequency = filtered_df[frequency_col].sum()
    
    return total_frequency","df = pd.DataFrame({
    'Number of scarves': [0, 1, 2, 3, 4, 5],
    'Frequency': [7, 12, 4, 3, 10, 16]
})
print(count_frequency_above_threshold(data_frame=df, item_col='Number of scarves', frequency_col='Frequency', item_threshold=2))"
"Every year Georgetown has a citywide relay and reports the winning times. According to the table, what was the rate of change between 2012 and 2013?",17,"Year | Winning time (minutes)
2009 | 23
2010 | 39
2011 | 32
2012 | 21
2013 | 38",8,2082,"import pandas as pd

def calculate_rate_of_change(df, start_year, end_year):
    """"""
    This function takes in a pandas DataFrame representing a table of winning times for each year and two years, and returns the rate of change of winning times between the two years.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing years and winning times with columns 'Year' and 'Winning time (minutes)'.
    start_year (int): The start year for calculating the rate of change.
    end_year (int): The end year for calculating the rate of change.
    Returns:
    float: The rate of change of winning times between the two years.
    """"""
    # Filter the DataFrame for the start year and end year
    start_year_df = df[df['Year'] == start_year]
    end_year_df = df[df['Year'] == end_year]
    
    # Check if the DataFrame for the start year and end year is not empty
    if not start_year_df.empty and not end_year_df.empty:
        # Calculate the rate of change
        rate_of_change = (end_year_df['Winning time (minutes)'].values[0] - start_year_df['Winning time (minutes)'].values[0]) / (end_year - start_year)
        return rate_of_change
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Year': [2009, 2010, 2011, 2012, 2013],
    'Winning time (minutes)': [23, 39, 32, 21, 38]
})
# Call the tool to solve the problem
rate_of_change = calculate_rate_of_change(df, 2012, 2013)
print(rate_of_change)
```","def calculate_rate_of_change_between_years(df, year_col, value_col, start_year, end_year):
    """"""
    This function takes in a pandas DataFrame representing a table of values for each year and two years, and returns the rate of change of the values between the two years.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing years and values with columns specified by year_col and value_col.
    year_col (str): The column name for the years.
    value_col (str): The column name for the values.
    start_year (int): The start year for calculating the rate of change.
    end_year (int): The end year for calculating the rate of change.
    
    Returns:
    float: The rate of change of the values between the two years.
    """"""
    # Filter the DataFrame for the start year and end year
    start_year_df = df[df[year_col] == start_year]
    end_year_df = df[df[year_col] == end_year]
    
    # Check if the DataFrame for the start year and end year is not empty
    if not start_year_df.empty and not end_year_df.empty:
        # Calculate the rate of change
        rate_of_change = (end_year_df[value_col].values[0] - start_year_df[value_col].values[0]) / (end_year - start_year)
        return rate_of_change
    else:
        return None","df = pd.DataFrame({
    'Year': [2009, 2010, 2011, 2012, 2013],
    'Winning time (minutes)': [23, 39, 32, 21, 38]
})
print(calculate_rate_of_change_between_years(df, 'Year', 'Winning time (minutes)', 2012, 2013))"
The members of the track team compared how many miles they ran last week. What is the mode of the numbers?,8,"Name | Miles
Samuel | 8
Emmett | 8
Lola | 6
Bob | 8
Deb | 5
Camille | 10
Jonah | 5
Oliver | 6",8,8608,"import pandas as pd
from collections import Counter

def calculate_mode(df):
    """"""
    This function takes in a pandas DataFrame containing names and miles, and returns the mode of the miles.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing names and miles with columns 'Name' and 'Miles'.
    Returns:
    int: The mode of the miles.
    """"""
    # Extract the miles column from the DataFrame
    miles = df['Miles'].tolist()
    
    # Calculate the frequency of each mile value
    counter = Counter(miles)
    
    # Find the mode
    mode = counter.most_common(1)[0][0]
    
    return mode","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Name': ['Samuel', 'Emmett', 'Lola', 'Bob', 'Deb', 'Camille', 'Jonah', 'Oliver'],
    'Miles': [8, 8, 6, 8, 5, 10, 5, 6]
})
# Call the tool to solve the problem
print(calculate_mode(df))
```","def calculate_mode_of_numerical_column(data_frame, num_col):
    """"""
    This function takes in a pandas DataFrame and a numerical column name, and returns the mode of the numerical column.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the numerical column.
    num_col (str): The column name for the numerical values.
    
    Returns:
    int: The mode of the numerical column.
    """"""
    # Extract the numerical column from the DataFrame
    num_values = data_frame[num_col].tolist()
    
    # Calculate the frequency of each numerical value
    counter = Counter(num_values)
    
    # Find the mode
    mode = counter.most_common(1)[0][0]
    
    return mode","df = pd.DataFrame({
    'Name': ['Samuel', 'Emmett', 'Lola', 'Bob', 'Deb', 'Camille', 'Jonah', 'Oliver'],
    'Miles': [8, 8, 6, 8, 5, 10, 5, 6]
})
print(calculate_mode_of_numerical_column(data_frame=df, num_col=""Miles""))"
A newspaper researched how many grocery stores there are in each town. What is the range of the numbers?,5,"Town | Number of stores
Marion | 9
Greenwood | 8
Springfield | 10
Salem | 8
Riverside | 5
Ashland | 5
Richmond | 8
Columbia | 10",7,14595,"import pandas as pd

def calculate_range(df):
    """"""
    This function takes in a pandas DataFrame representing a table of towns and their number of stores, and returns the range of the number of stores.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing towns and their number of stores with columns 'Town' and 'Number of stores'.
    Returns:
    int: The range of the number of stores.
    """"""
    # Calculate the range of the number of stores
    range_stores = df['Number of stores'].max() - df['Number of stores'].min()
    
    return range_stores","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Town': ['Marion', 'Greenwood', 'Springfield', 'Salem', 'Riverside', 'Ashland', 'Richmond', 'Columbia'],
    'Number of stores': [9, 8, 10, 8, 5, 5, 8, 10]
})

# Call the tool to solve the problem
range_stores = calculate_range(df)

# Print the answer
print(range_stores)
```","def calculate_range_of_values_in_column(data_frame, column_name):
    """"""
    This function takes in a pandas DataFrame and a column name, and returns the range of values in the specified column.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing various columns.
    column_name (str): The name of the column for which the range of values is to be calculated.
    
    Returns:
    float: The range of values in the specified column.
    """"""
    # Calculate the range of values in the specified column
    range_values = data_frame[column_name].max() - data_frame[column_name].min()
    
    return range_values","df = pd.DataFrame({
    'Town': ['Marion', 'Greenwood', 'Springfield', 'Salem', 'Riverside', 'Ashland', 'Richmond', 'Columbia'],
    'Number of stores': [9, 8, 10, 8, 5, 5, 8, 10]
})

print(calculate_range_of_values_in_column(data_frame=df, column_name='Number of stores'))"
An architecture student measured the heights of all the buildings downtown. How many buildings are exactly 23 meters tall?,0,"Stem | Leaf 
2 | 4
3 | 1, 2, 5
4 | 0, 4
5 | 
6 | 0, 4
7 | 3",5,16588,"import pandas as pd

def count_buildings_with_exact_height(df, target_height):
    """"""
    This function takes in a pandas dataframe of building heights and a target height, and returns the number of buildings with the exact target height.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the building heights in stem and leaf format.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    target_height (int): The target height to count the number of buildings.
    Returns:
    int: The number of buildings with the exact target height.
    """"""
    # prepare a list to store building heights
    heights = []
    # calculate the height of each building
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            heights.append(stem * 10 + leaf[j])
    # filter the buildings with the exact target height
    filtered = [height for height in heights if height == target_height]
    # count the number of buildings
    num_buildings = len(filtered)
    return num_buildings","We should first create a pandas dataframe with the data from the table. Note that some elements are empty, so we need to fill them with empty lists. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [2, 3, 4, 5, 6, 7],
    'Leaf': [[4], [1, 2, 5], [0, 4], [], [0, 4], [3]]
})
# Call the tool to solve the problem
count_buildings_with_exact_height(df, 23)
```","def count_items_with_exact_value_in_stem_leaf(data_frame, stem_col, leaf_col, target_value):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of items and a target value, and returns the number of items with the exact target value.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    target_value (int): The target value for filtering items.
    
    Returns:
    int: The number of items with the exact target value.
    """"""
    # Initialize the list to calculate items in each group
    items = []
    
    # Calculate the total value of items in each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Filter the items where the total value is equal to the target value
    filtered = [item for item in items if item == target_value]
    
    # Count the number of items
    num_items = len(filtered)
    
    return num_items","data = {
    ""Stem"": [2, 3, 4, 5, 6, 7],
    ""Leaf"": [[4], [1, 2, 5], [0, 4], [], [0, 4], [3]]
}

df = pd.DataFrame(data)
print(count_items_with_exact_value_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf"", target_value=23))"
"For a study on numerical psychology, people were polled about which number between 1 and 5 they like most, and why. How many people said 2?",20,"Favorite number | Frequency
1 | 5
2 | 20
3 | 17
4 | 14
5 | 15",8,7581,"import pandas as pd

def get_frequency(df, number):
    """"""
    This function takes in a pandas DataFrame representing a frequency table and a number, and returns the frequency of the number using pandas.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing favorite numbers and their frequencies with columns 'Favorite number' and 'Frequency'.
    number (int): The number to get the frequency for.
    Returns:
    int: The frequency of the number.
    """"""
    # Filter the DataFrame for the specific number
    number_df = df[df['Favorite number'] == number]
    if not number_df.empty:
        frequency = number_df['Frequency'].values[0]
        return frequency
    else:
        return 0","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Favorite number': [1, 2, 3, 4, 5],
    'Frequency': [5, 20, 17, 14, 15]
})

# Call the tool to solve the problem
number_of_people = get_frequency(df, 2)
print(number_of_people)
```","def get_frequency_of_specific_value(df, value_col, frequency_col, specific_value):
    """"""
    This function takes in a pandas DataFrame representing a frequency table, a specific value, and returns the frequency of the specific value.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing values and their frequencies.
    value_col (str): The column name for the values.
    frequency_col (str): The column name for the frequencies.
    specific_value (int or str): The specific value to get the frequency for.
    
    Returns:
    int: The frequency of the specific value.
    """"""
    # Filter the DataFrame for the specific value
    value_df = df[df[value_col] == specific_value]
    if not value_df.empty:
        frequency = value_df[frequency_col].values[0]
        return frequency
    else:
        return 0","df = pd.DataFrame({
    'Favorite number': [1, 2, 3, 4, 5],
    'Frequency': [5, 20, 17, 14, 15]
})

print(get_frequency_of_specific_value(df, 'Favorite number', 'Frequency', 2))"
What is the total cost for 1+3/10 kilograms of chocolate chip cookie dough?,2.6,"double chocolate cookie dough | $2/kilogram
chocolate chip cookie dough | $2/kilogram
peanut butter cookie dough | $3/kilogram
oatmeal raisin cookie dough | $3/kilogram
snickerdoodle cookie dough | $2/kilogram
gingersnap cookie dough | $3/kilogram",6,1943,"import pandas as pd

def calculate_cost_for_weight(df, item, weight):
    """"""
    This function takes in a pandas DataFrame representing a table of cookie dough types and their prices per kilogram, an item name, and a weight in kilograms, and returns the cost for that weight of the item.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing cookie dough types and their prices per kilogram with columns 'Item' and 'Price_per_kg'.
    item (str): The name of the cookie dough type.
    weight (float): The weight in kilograms.
    Returns:
    float: The cost for the specified weight of the item.
    """"""
    # Filter the DataFrame for the specific item
    item_df = df[df['Item'] == item]
    if not item_df.empty:
        item_price_per_kg = item_df['Price_per_kg'].values[0]
        cost = weight * item_price_per_kg
        return cost
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Item': ['double chocolate cookie dough', 'chocolate chip cookie dough', 'peanut butter cookie dough', 'oatmeal raisin cookie dough', 'snickerdoodle cookie dough', 'gingersnap cookie dough'],
    'Price_per_kg': [2, 2, 3, 3, 2, 3]
})

# Call the tool to solve the problem
item = 'chocolate chip cookie dough'
weight = 1 + 3/10
cost = calculate_cost_for_weight(df, item, weight)
print(cost)
```","def calculate_total_cost_from_unit_price_and_weight(item_prices_df, item_col, unit_price_col, item_name, item_weight):
    """"""
    This function takes in a pandas DataFrame representing a table of item unit prices and a given weight, and returns the total cost of the item based on the unit price and weight.
    
    Args:
    item_prices_df (pd.DataFrame): A pandas DataFrame containing item names and their unit prices.
    item_col (str): The column name for the item names.
    unit_price_col (str): The column name for the item unit prices.
    item_name (str): The name of the item.
    item_weight (float): The weight of the item.
    
    Returns:
    float: The total cost of the item based on the unit price and weight.
    """"""
    # Filter the DataFrame for the specific item name
    item_price_df = item_prices_df[item_prices_df[item_col] == item_name]
    if not item_price_df.empty:
        item_unit_price = item_price_df[unit_price_col].values[0]
        total_cost = item_weight * item_unit_price
        return total_cost
    else:
        return None","item_prices_data = {
    'Item': ['double chocolate cookie dough', 'chocolate chip cookie dough', 'peanut butter cookie dough', 'oatmeal raisin cookie dough', 'snickerdoodle cookie dough', 'gingersnap cookie dough'],
    'Price_per_kg': [2, 2, 3, 3, 2, 3]
}

item_prices_df = pd.DataFrame(item_prices_data)

item_name = 'chocolate chip cookie dough'
item_weight = 1 + 3/10
print(calculate_total_cost_from_unit_price_and_weight(item_prices_df, ""Item"", ""Price_per_kg"", item_name, item_weight))"
How much money does Harold need to buy a watering can and a rake?,40.83,"wrench | $14.14
hammer | $22.84
rake | $21.58
watering can | $19.25
lawn mower | $51.26
broom | $15.02",8,1623,"import pandas as pd

def calculate_total_cost(menu_df, orders):
    """"""
    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.
    Args:
    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.
    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.
    Returns:
    float: The total cost of the orders.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the menu items and calculate the cost for each ordered item
    for item, quantity in orders.items():
        # Filter the DataFrame for the specific item
        item_df = menu_df[menu_df['Item'] == item]
        if not item_df.empty:
            item_price = item_df['Price'].values[0]
            total_cost += quantity * item_price
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we create a dictionary with the items Harold wants to buy and the quantity of each item. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Item': ['wrench', 'hammer', 'rake', 'watering can', 'lawn mower', 'broom'],
    'Price': [14.14, 22.84, 21.58, 19.25, 51.26, 15.02]
})

# Initialize the orders
orders = {'watering can': 1, 'rake': 1}

# Call the tool to solve the problem
total_cost = calculate_total_cost(df, orders)
print(total_cost)
```","def calculate_total_cost_from_unit_prices_and_quantities(item_prices_df, item_col, unit_price_col, item_quantities):
    """"""
    This function takes in a pandas DataFrame representing a table of item prices and a dictionary of item quantities, and returns the total cost of the items based on the prices and quantities.
    
    Args:
    item_prices_df (pd.DataFrame): A pandas DataFrame containing item names and their prices.
    item_col (str): The column name for the item names.
    unit_price_col (str): The column name for the item prices.
    item_quantities (dict): A dictionary where the keys are item names and the values are the quantities of each item.
    
    Returns:
    float: The total cost of the items.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the item names and calculate the quantity for each item based on quantities
    for item_name, quantity in item_quantities.items():
        # Filter the DataFrame for the specific item name
        item_price_df = item_prices_df[item_prices_df[item_col] == item_name]
        if not item_price_df.empty:
            item_price = item_price_df[unit_price_col].values[0]
            total_cost += quantity * item_price
    
    return total_cost","item_prices_data = {
    'Item': ['wrench', 'hammer', 'rake', 'watering can', 'lawn mower', 'broom'],
    'Price': [14.14, 22.84, 21.58, 19.25, 51.26, 15.02]
}

item_prices_df = pd.DataFrame(item_prices_data)

item_quantities = {'watering can': 1, 'rake': 1}
print(calculate_total_cost_from_unit_prices_and_quantities(item_prices_df, ""Item"", ""Price"", item_quantities))"
A toy store employee counted the number of toys in each bin in the sale section. What is the smallest number of toys?,44,"Stem | Leaf 
4 | 4, 8
5 | 
6 | 0, 1, 2, 7, 9, 9
7 | 2, 4, 4, 8
8 | 0, 6, 7, 7
9 | 0",4,13336,"import pandas as pd
def find_smallest_number_of_toys(df):
    """"""
    This function takes in a pandas dataframe of the number of toys in each bin, and returns the smallest number of toys.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of toys in each bin.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The smallest number of toys.
    """"""
    # prepare a list to calculate toys in each bin
    toys = []
    # calculate the total number of toys in each bin
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            toys.append(stem * 10 + leaf[j])
    # find the smallest number of toys
    smallest = min(toys)
    return smallest","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [4, 5, 6, 7, 8, 9],
    'Leaf': [[4, 8], [], [0, 1, 2, 7, 9, 9], [2, 4, 4, 8], [0, 6, 7, 7], [0]]
})
# Call the tool to solve the problem
find_smallest_number_of_toys(df)
```","def find_smallest_value_in_stem_leaf(data_frame, stem_col, leaf_col):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of groups, and returns the smallest value among the groups.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    
    Returns:
    int: The smallest value among the groups.
    """"""
    # Initialize the list to calculate items in each group
    items = []
    
    # Calculate the total value of items in each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Find the smallest value among the items
    smallest = min(items)
    
    return smallest","data = {
    ""Stem"": [4, 5, 6, 7, 8, 9],
    ""Leaf"": [[4, 8], [], [0, 1, 2, 7, 9, 9], [2, 4, 4, 8], [0, 6, 7, 7], [0]]
}

df = pd.DataFrame(data)
print(find_smallest_value_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf""))"
How much more does a book about dogs cost than a book about trains?,9,"book about the Olympics | $13.00
book about music | $13.00
book about dogs | $19.00
book about hiking | $23.00
book about trains | $10.00
book about dinosaurs | $19.00",8,8695,"import pandas as pd

def calculate_price_difference(df, item1, item2):
    """"""
    This function takes in a pandas DataFrame representing a book price table and two book titles, and returns the price difference between the two books.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing book titles and their prices with columns 'Title' and 'Price'.
    item1 (str): The title of the first book.
    item2 (str): The title of the second book.
    Returns:
    float: The price difference between the two books.
    """"""
    # Filter the DataFrame for the specific items
    item1_df = df[df['Title'] == item1]
    item2_df = df[df['Title'] == item2]
    
    # Check if both items exist in the DataFrame
    if not item1_df.empty and not item2_df.empty:
        item1_price = item1_df['Price'].values[0]
        item2_price = item2_df['Price'].values[0]
        
        # Calculate and return the price difference
        return abs(item1_price - item2_price)
    else:
        return None","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Title': ['book about the Olympics', 'book about music', 'book about dogs', 'book about hiking', 'book about trains', 'book about dinosaurs'],
    'Price': [13.00, 13.00, 19.00, 23.00, 10.00, 19.00]
})

# Call the tool to solve the problem
price_difference = calculate_price_difference(df, 'book about dogs', 'book about trains')
print(price_difference)
```","def calculate_price_difference_between_two_items(item_prices_df, item_col, price_col, item1, item2):
    """"""
    This function takes in a pandas DataFrame representing a table of item prices and two item names, and returns the price difference between the two items.
    
    Args:
    item_prices_df (pd.DataFrame): A pandas DataFrame containing item names and their prices.
    item_col (str): The column name for the item names.
    price_col (str): The column name for the item prices.
    item1 (str): The name of the first item.
    item2 (str): The name of the second item.
    
    Returns:
    float: The price difference between the two items, or None if either item does not exist in the DataFrame.
    """"""
    # Filter the DataFrame for the specific items
    item1_df = item_prices_df[item_prices_df[item_col] == item1]
    item2_df = item_prices_df[item_prices_df[item_col] == item2]
    
    # Check if both items exist in the DataFrame
    if not item1_df.empty and not item2_df.empty:
        item1_price = item1_df[price_col].values[0]
        item2_price = item2_df[price_col].values[0]
        
        # Calculate and return the price difference
        return abs(item1_price - item2_price)
    else:
        return None","item_prices_data = {
    'Title': ['book about the Olympics', 'book about music', 'book about dogs', 'book about hiking', 'book about trains', 'book about dinosaurs'],
    'Price': [13.00, 13.00, 19.00, 23.00, 10.00, 19.00]
}

item_prices_df = pd.DataFrame(item_prices_data)

price_difference = calculate_price_difference_between_two_items(item_prices_df, ""Title"", ""Price"", 'book about dogs', 'book about trains')
print(price_difference)"
How much money does Emilia need to buy a Hawaiian vacation package and a European vacation package?,8383,"African safari vacation package | $1,031
Hawaiian vacation package | $3,200
European vacation package | $5,183
Australian vacation package | $4,098
Jamaican vacation package | $6,532
Caribbean vacation package | $2,150",4,2141,"import pandas as pd

def calculate_vacation_cost(vacation_df, packages):
    """"""
    This function takes in a pandas DataFrame representing a vacation packages table and a list of packages, and returns the total cost of the packages using pandas.
    Args:
    vacation_df (pd.DataFrame): A pandas DataFrame containing vacation packages and their prices with columns 'Package' and 'Price'.
    packages (list): A list where the elements are vacation package names.
    Returns:
    float: The total cost of the packages.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the vacation packages and calculate the cost for each selected package
    for package in packages:
        # Filter the DataFrame for the specific package
        package_df = vacation_df[vacation_df['Package'] == package]
        if not package_df.empty:
            package_price = package_df['Price'].values[0]
            total_cost += package_price
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Package': ['African safari vacation package', 'Hawaiian vacation package', 'European vacation package', 'Australian vacation package', 'Jamaican vacation package', 'Caribbean vacation package'],
    'Price': [1031, 3200, 5183, 4098, 6532, 2150]
})

# Call the tool to solve the problem
total_cost = calculate_vacation_cost(df, ['Hawaiian vacation package', 'European vacation package'])
print(total_cost)
```","def calculate_total_cost_from_unit_prices_and_items(item_prices_df, item_col, unit_price_col, item_list):
    """"""
    This function takes in a pandas DataFrame representing a table of item prices and a list of item names, and returns the total cost of the items based on the prices.
    
    Args:
    item_prices_df (pd.DataFrame): A pandas DataFrame containing item names and their prices.
    item_col (str): The column name for the item names.
    unit_price_col (str): The column name for the item prices.
    item_list (list): A list where the elements are item names.
    
    Returns:
    float: The total cost of the items.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the item names and calculate the cost for each item
    for item_name in item_list:
        # Filter the DataFrame for the specific item name
        item_price_df = item_prices_df[item_prices_df[item_col] == item_name]
        if not item_price_df.empty:
            item_price = item_price_df[unit_price_col].values[0]
            total_cost += item_price
    
    return total_cost","item_prices_data = {
    'Package': ['African safari vacation package', 'Hawaiian vacation package', 'European vacation package', 'Australian vacation package', 'Jamaican vacation package', 'Caribbean vacation package'],
    'Price': [1031, 3200, 5183, 4098, 6532, 2150]
}

item_prices_df = pd.DataFrame(item_prices_data)

item_list = ['Hawaiian vacation package', 'European vacation package']
print(calculate_total_cost_from_unit_prices_and_items(item_prices_df, ""Package"", ""Price"", item_list))"
Look at Thad's pay stub. Thad lives in a state that has state income tax. How much did Thad make after taxes?,763.28,"Employee | Pay period |
Thad James | June 12-18 |
Total earnings | | $1,100.00
Federal income tax | $172.02 |
State income tax | $80.70 |
Other taxes | $84.00 |
Total taxes | | ?
Pay after taxes | | ?",5,15059,"import pandas as pd

def calculate_pay_after_taxes(pay_stub_df):
    """"""
    This function takes in a pandas DataFrame representing a pay stub table and calculates the pay after taxes.
    Args:
    pay_stub_df (pd.DataFrame): A pandas DataFrame containing pay stub information with columns 'Item' and 'Amount'.
    Returns:
    float: The pay after taxes.
    """"""
    # Extract the total earnings, federal income tax, state income tax, and other taxes
    total_earnings = pay_stub_df.loc[pay_stub_df['Item'] == 'Total earnings', 'Amount'].values[0]
    federal_income_tax = pay_stub_df.loc[pay_stub_df['Item'] == 'Federal income tax', 'Amount'].values[0]
    state_income_tax = pay_stub_df.loc[pay_stub_df['Item'] == 'State income tax', 'Amount'].values[0]
    other_taxes = pay_stub_df.loc[pay_stub_df['Item'] == 'Other taxes', 'Amount'].values[0]
    
    # Calculate the total taxes
    total_taxes = federal_income_tax + state_income_tax + other_taxes
    
    # Calculate the pay after taxes
    pay_after_taxes = total_earnings - total_taxes
    
    return pay_after_taxes","```python
# Initialize the table into a dataframe
pay_stub_df = pd.DataFrame({
    'Item': ['Total earnings', 'Federal income tax', 'State income tax', 'Other taxes'],
    'Amount': [1100.00, 172.02, 80.70, 84.00]
})

# Call the tool to solve the problem
pay_after_taxes = calculate_pay_after_taxes(pay_stub_df)

# Print the answer
print(pay_after_taxes)
```","def calculate_net_pay_after_taxes(pay_stub_df, item_col, amount_col, earnings_item, tax_items):
    """"""
    This function takes in a pandas DataFrame representing a pay stub table and calculates the pay after taxes.
    
    Args:
    pay_stub_df (pd.DataFrame): A pandas DataFrame containing pay stub information.
    item_col (str): The column name for the item names.
    amount_col (str): The column name for the amounts.
    earnings_item (str): The item name for the total earnings.
    tax_items (list): A list of item names for the taxes.
    
    Returns:
    float: The pay after taxes.
    """"""
    # Extract the total earnings
    total_earnings = pay_stub_df.loc[pay_stub_df[item_col] == earnings_item, amount_col].values[0]
    
    # Initialize the total taxes
    total_taxes = 0.0
    
    # Add up all the taxes
    for tax_item in tax_items:
        tax_amount = pay_stub_df.loc[pay_stub_df[item_col] == tax_item, amount_col].values[0]
        total_taxes += tax_amount
    
    # Calculate the pay after taxes
    pay_after_taxes = total_earnings - total_taxes
    
    return pay_after_taxes","pay_stub_data = {
    'Item': ['Total earnings', 'Federal income tax', 'State income tax', 'Other taxes'],
    'Amount': [1100.00, 172.02, 80.70, 84.00]
}

pay_stub_df = pd.DataFrame(pay_stub_data)

earnings_item = ""Total earnings""
tax_items = [""Federal income tax"", ""State income tax"", ""Other taxes""]
print(calculate_net_pay_after_taxes(pay_stub_df, ""Item"", ""Amount"", earnings_item, tax_items))"
How much money does Erin need to buy 6 cockatoos?,466.26,"finch | $21.44
rabbit | $83.66
cockatoo | $77.71
chameleon | $63.24",7,3095,"import pandas as pd

def calculate_cost_for_animal(df, animal, quantity):
    """"""
    This function takes in a pandas DataFrame representing a table of animals and their prices, the name of an animal, and a quantity, and returns the total cost for the specified quantity of the animal.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing animals and their prices with columns 'Animal' and 'Price'.
    animal (str): The name of the animal.
    quantity (int): The quantity of the animal.
    Returns:
    float: The total cost for the specified quantity of the animal.
    """"""
    # Filter the DataFrame for the specific animal
    animal_df = df[df['Animal'] == animal]
    if not animal_df.empty:
        animal_price = animal_df['Price'].values[0]
        total_cost = quantity * animal_price
        return total_cost
    else:
        return ""Animal not found in the list.""","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Animal': ['finch', 'rabbit', 'cockatoo', 'chameleon'],
    'Price': [21.44, 83.66, 77.71, 63.24]
})
# Call the tool to solve the problem
total_cost = calculate_cost_for_animal(df, 'cockatoo', 6)
print(total_cost)
```","def calculate_total_cost_for_item(item_prices_df, item_col, unit_price_col, item_name, quantity):
    """"""
    This function takes in a pandas DataFrame representing a table of item prices, the name of an item, and a quantity, and returns the total cost for the specified quantity of the item.
    
    Args:
    item_prices_df (pd.DataFrame): A pandas DataFrame containing item names and their prices.
    item_col (str): The column name for the item names.
    unit_price_col (str): The column name for the item prices.
    item_name (str): The name of the item.
    quantity (int): The quantity of the item.
    
    Returns:
    float: The total cost for the specified quantity of the item.
    """"""
    # Filter the DataFrame for the specific item name
    item_price_df = item_prices_df[item_prices_df[item_col] == item_name]
    if not item_price_df.empty:
        item_price = item_price_df[unit_price_col].values[0]
        total_cost = quantity * item_price
        return total_cost
    else:
        return ""Item not found in the list.""","item_prices_data = {
    'Animal': ['finch', 'rabbit', 'cockatoo', 'chameleon'],
    'Price': [21.44, 83.66, 77.71, 63.24]
}

item_prices_df = pd.DataFrame(item_prices_data)

total_cost = calculate_total_cost_for_item(item_prices_df, ""Animal"", ""Price"", ""cockatoo"", 6)
print(total_cost)"
"This morning, Mr. Beasley released the scores from last week's spelling test. How many students scored at least 40 points but fewer than 70 points?",14,"Stem | Leaf 
4 | 0, 2, 5, 7, 8, 9
5 | 9
6 | 0, 0, 3, 4, 5, 7, 7
7 | 6, 7, 7
8 | 0, 3, 5, 6, 9",7,6677,"import pandas as pd
def count_students_with_scores_between_40_and_70(df):
    """"""
    This function takes in a pandas dataframe of students' scores, and returns the number of students that scored at least 40 points but fewer than 70 points.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the students' scores.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of students that scored at least 40 points but fewer than 70 points.
    """"""
    # prepare a list to calculate scores of each student
    scores = []
    # calculate the score of each student
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            scores.append(stem * 10 + leaf[j])
    # filter the students where the score is greater than or equal to 40 and less than 70
    filtered = [score for score in scores if score >= 40 and score < 70]
    # count the number of students
    num_students = len(filtered)
    return num_students","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [4, 5, 6, 7, 8],
    'Leaf': [[0, 2, 5, 7, 8, 9], [9], [0, 0, 3, 4, 5, 7, 7], [6, 7, 7], [0, 3, 5, 6, 9]]
})
# Call the tool to solve the problem
count_students_with_scores_between_40_and_70(df)
```","def count_items_in_range_in_stem_leaf(data_frame, stem_col, leaf_col, lower_bound, upper_bound):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of items and a range, and returns the number of items that have values within the range.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    lower_bound (int): The lower bound of the range.
    upper_bound (int): The upper bound of the range.
    
    Returns:
    int: The number of items with values within the range.
    """"""
    # Initialize the list to calculate items in each group
    items = []
    
    # Calculate the total value of items in each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Filter the items where the total value is within the range
    filtered = [item for item in items if item >= lower_bound and item < upper_bound]
    
    # Count the number of items
    num_items = len(filtered)
    
    return num_items","data = {
    ""Stem"": [4, 5, 6, 7, 8],
    ""Leaf"": [[0, 2, 5, 7, 8, 9], [9], [0, 0, 3, 4, 5, 7, 7], [6, 7, 7], [0, 3, 5, 6, 9]]
}

df = pd.DataFrame(data)
print(count_items_in_range_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf"", lower_bound=40, upper_bound=70))"
The Kingwood Soup Company recorded the number of rotten tomatoes in each barrel it received. How many barrels had at least 17 rotten tomatoes?,7,"Stem | Leaf 
1 | 7
2 | 
3 | 7, 8
4 | 4
5 | 7
6 | 6
7 | 
8 | 3",5,11265,"import pandas as pd

def count_barrels_with_17_rotten_tomatoes(df):
    """"""
    This function takes in a pandas dataframe of rotten tomatoes per barrel, and returns the number of barrels that have at least 17 rotten tomatoes.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of rotten tomatoes per barrel.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of barrels that have at least 17 rotten tomatoes.
    """"""
    # prepare a list to calculate rotten tomatoes in each barrel
    rotten_tomatoes = []
    # calculate the total number of rotten tomatoes in each barrel
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            rotten_tomatoes.append(stem * 10 + leaf[j])
    # filter the barrels where the total number of rotten tomatoes is greater than or equal to 17
    filtered = [tomato for tomato in rotten_tomatoes if tomato >= 17]
    # count the number of rows
    num_barrels = len(filtered)
    return num_barrels","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],
    'Leaf': [[7], [], [7, 8], [4], [7], [6], [], [3]]
})
# Call the tool to solve the problem
count_barrels_with_17_rotten_tomatoes(df)
```","def count_groups_above_threshold_in_stem_leaf(data_frame, stem_col, leaf_col, item_threshold):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of groups and a threshold value, and returns the number of groups that have values greater than or equal to the threshold.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    item_threshold (int): The threshold value for filtering items.
    
    Returns:
    int: The number of items with values greater than or equal to the threshold.
    """"""
    # Initialize the list to calculate items in each group
    items = []
    
    # Calculate the total value of items in each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Filter the items where the total value is greater than or equal to the threshold
    filtered = [item for item in items if item >= item_threshold]
    
    # Count the number of items
    num_items = len(filtered)
    
    return num_items","data = {
    ""Stem"": [1, 2, 3, 4, 5, 6, 7, 8],
    ""Leaf"": [[7], [], [7, 8], [4], [7], [6], [], [3]]
}

df = pd.DataFrame(data)
print(count_groups_above_threshold_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf"", item_threshold=17))"
A bagel wholesaler examined the bagel sales of each of the retail stores that it served. How many more everything bagels than cinnamon-raisin bagels did Westside Bagels sell?,5,"Shop | Cinnamon-raisin bagels | Everything bagels
Downtown Bagels | 8 | 12
Bagel City | 20 | 11
Westside Bagels | 8 | 13
Jimmy's Bagels | 3 | 16",5,17078,"import pandas as pd

def calculate_bagel_difference(df, shop_name):
    """"""
    This function takes in a pandas DataFrame representing a bagel sales table and a shop name, and returns the difference in sales between everything bagels and cinnamon-raisin bagels for the specified shop.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing bagel sales data with columns 'Shop', 'Cinnamon-raisin bagels', and 'Everything bagels'.
    shop_name (str): The name of the shop for which to calculate the bagel sales difference.
    Returns:
    int: The difference in sales between everything bagels and cinnamon-raisin bagels for the specified shop.
    """"""
    # Filter the DataFrame for the specific shop
    shop_df = df[df['Shop'] == shop_name]
    if not shop_df.empty:
        # Calculate the difference in sales
        difference = shop_df['Everything bagels'].values[0] - shop_df['Cinnamon-raisin bagels'].values[0]
        return difference
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Shop': ['Downtown Bagels', 'Bagel City', 'Westside Bagels', 'Jimmy\'s Bagels'],
    'Cinnamon-raisin bagels': [8, 20, 8, 3],
    'Everything bagels': [12, 11, 13, 16]
})
# Call the tool to solve the problem
print(calculate_bagel_difference(df, 'Westside Bagels'))
```","def calculate_item_sales_difference_for_entity(data_frame, entity_col, item1_col, item2_col, entity_name):
    """"""
    This function takes in a pandas DataFrame representing a table of item sales for entities and calculates the difference in sales between two item types for a specified entity.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing item sales data with columns specified by entity_col, item1_col, and item2_col.
    entity_col (str): The column name for the entity names.
    item1_col (str): The column name for the first item type sales.
    item2_col (str): The column name for the second item type sales.
    entity_name (str): The name of the entity for which to calculate the item sales difference.
    
    Returns:
    int: The difference in sales between the two item types for the specified entity.
    """"""
    # Filter the DataFrame for the specific entity
    entity_df = data_frame[data_frame[entity_col] == entity_name]
    if not entity_df.empty:
        # Calculate the difference in sales
        difference = entity_df[item2_col].values[0] - entity_df[item1_col].values[0]
        return difference
    else:
        return None","data = {
    'Shop': ['Downtown Bagels', 'Bagel City', 'Westside Bagels', 'Jimmy\'s Bagels'],
    'Cinnamon-raisin bagels': [8, 20, 8, 3],
    'Everything bagels': [12, 11, 13, 16]
}

df = pd.DataFrame(data)
print(calculate_item_sales_difference_for_entity(data_frame=df, entity_col=""Shop"", item1_col=""Cinnamon-raisin bagels"", item2_col=""Everything bagels"", entity_name=""Westside Bagels""))"
Each pile has 10 magazines. How many magazines are in 3 piles?,30,"Number of piles | Number of magazines
1 | 10
2 | 20
3 | ?",1,10935,"import pandas as pd

def calculate_magazines(df, piles):
    """"""
    This function takes in a pandas DataFrame representing a table of piles and magazines, and a number of piles, and returns the number of magazines in the given number of piles.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of piles and the corresponding number of magazines with columns 'Number of piles' and 'Number of magazines'.
    piles (int): The number of piles for which to calculate the number of magazines.
    Returns:
    int: The number of magazines in the given number of piles.
    """"""
    # Get the number of magazines per pile from the DataFrame
    magazines_per_pile = df['Number of magazines'][0] / df['Number of piles'][0]
    
    # Calculate the number of magazines in the given number of piles
    magazines = piles * magazines_per_pile
    
    return int(magazines)","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of piles': [1, 2],
    'Number of magazines': [10, 20]
})

# Call the tool to solve the problem
magazines_in_3_piles = calculate_magazines(df, 3)
print(magazines_in_3_piles)
```","def calculate_total_items_from_group_item_relationship(data_frame, group_col, item_col, num_groups):
    """"""
    This function takes in a pandas DataFrame representing a table of group-item relationships and a given number of groups, and returns the total number of items in the given number of groups.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the group-item relationships with columns specified by group_col and item_col.
    group_col (str): The column name for the group values.
    item_col (str): The column name for the item values.
    num_groups (int): The number of groups for which to calculate the total number of items.
    
    Returns:
    int: The total number of items in the given number of groups.
    """"""
    # Get the number of items per group from the DataFrame
    items_per_group = data_frame[item_col][0] / data_frame[group_col][0]
    
    # Calculate the total number of items in the given number of groups
    total_items = num_groups * items_per_group
    
    return int(total_items)","data = {
    'Number of piles': [1, 2],
    'Number of magazines': [10, 20]
}

df = pd.DataFrame(data)
print(calculate_total_items_from_group_item_relationship(data_frame=df, group_col=""Number of piles"", item_col=""Number of magazines"", num_groups=3))"
A cookie factory monitored the number of broken cookies per pack yesterday. How many packs had exactly 38 broken cookies?,4,"Stem | Leaf 
2 | 0, 2, 2, 4
3 | 4, 8, 8, 8, 8
4 | 6, 6
5 | 0, 8
6 | 0, 0, 1, 9
7 | 1, 2, 3, 3, 4, 7",8,12956,"import pandas as pd
def count_packs_with_38_broken_cookies(df):
    """"""
    This function takes in a pandas dataframe of broken cookies per pack, and returns the number of packs that have exactly 38 broken cookies.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken cookies per pack.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of packs that have exactly 38 broken cookies.
    """"""
    # prepare a list to calculate cookies in each pack
    cookies = []
    # calculate the total number of broken cookies in each pack
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            cookies.append(stem * 10 + leaf[j])
    # filter the packs where the total number of broken cookies is exactly 38
    filtered = [cookie for cookie in cookies if cookie == 38]
    # count the number of rows
    num_packs = len(filtered)
    return num_packs","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [2, 3, 4, 5, 6, 7],
    'Leaf': [[0, 2, 2, 4], [4, 8, 8, 8, 8], [6, 6], [0, 8], [0, 0, 1, 9], [1, 2, 3, 3, 4, 7]]
})
# Call the tool to solve the problem
count_packs_with_38_broken_cookies(df)
```","def count_groups_with_exact_number_in_stem_leaf(data_frame, stem_col, leaf_col, item_number):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of groups and a specific item number, and returns the number of groups that have exactly the given number of items.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    item_number (int): The specific number of items for filtering groups.
    
    Returns:
    int: The number of groups with exactly the given number of items.
    """"""
    # Initialize the list to calculate items in each group
    items = []
    
    # Calculate the total number of items in each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Filter the groups where the total number of items is exactly the given number
    filtered = [item for item in items if item == item_number]
    
    # Count the number of groups
    num_groups = len(filtered)
    
    return num_groups","data = {
    ""Stem"": [2, 3, 4, 5, 6, 7],
    ""Leaf"": [[0, 2, 2, 4], [4, 8, 8, 8, 8], [6, 6], [0, 8], [0, 0, 1, 9], [1, 2, 3, 3, 4, 7]]
}

df = pd.DataFrame(data)
print(count_groups_with_exact_number_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf"", item_number=38))"
"For an assignment, Marshall looked at which countries got the most Nobel Prizes in various decades. How many more Nobel Prize winners did Canada have in the 1990s than in the 1980s?",5,"Country | 1980s | 1990s
Italy | 3 | 1
Japan | 2 | 1
Germany | 11 | 7
Canada | 3 | 8",5,13842,"import pandas as pd

def calculate_difference(df, country, column1, column2):
    """"""
    This function takes in a pandas DataFrame, a country name, and two column names, and returns the difference in the number of Nobel Prize winners between the two columns for the specified country.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of Nobel Prize winners for different countries in different decades.
    country (str): The name of the country.
    column1 (str): The name of the first column.
    column2 (str): The name of the second column.
    Returns:
    int: The difference in the number of Nobel Prize winners between the two columns for the specified country.
    """"""
    # Filter the DataFrame for the specific country
    country_df = df[df['Country'] == country]
    if not country_df.empty:
        # Calculate the difference in the number of Nobel Prize winners between the two columns
        difference = country_df[column2].values[0] - country_df[column1].values[0]
        return difference
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Country': ['Italy', 'Japan', 'Germany', 'Canada'],
    '1980s': [3, 2, 11, 3],
    '1990s': [1, 1, 7, 8]
})
# Call the tool to solve the problem
difference = calculate_difference(df, 'Canada', '1980s', '1990s')
print(difference)
```","def calculate_difference_between_columns_for_row(df, id_col, row_id, col1, col2):
    """"""
    This function takes in a pandas DataFrame, a row identifier, and two column names, and returns the difference in values between the two columns for the specified row.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing various data.
    id_col (str): The column name for the row identifiers.
    row_id (str): The identifier for the row.
    col1 (str): The name of the first column.
    col2 (str): The name of the second column.
    
    Returns:
    int: The difference in values between the two columns for the specified row.
    """"""
    # Filter the DataFrame for the specific row
    row_df = df[df[id_col] == row_id]
    if not row_df.empty:
        # Calculate the difference in values between the two columns
        difference = row_df[col2].values[0] - row_df[col1].values[0]
        return difference
    else:
        return None","df = pd.DataFrame({
    'Country': ['Italy', 'Japan', 'Germany', 'Canada'],
    '1980s': [3, 2, 11, 3],
    '1990s': [1, 1, 7, 8]
})
print(calculate_difference_between_columns_for_row(df, 'Country', 'Canada', '1980s', '1990s'))"
The county released data about how many schools there are in each town. What is the mean of the numbers?,6,"Town | Number of schools
Greenwood | 2
Richmond | 7
Mayfield | 4
Salem | 9
Ashland | 7
Chesterton | 7",6,12987,"import pandas as pd
import numpy as np

def calculate_mean(df):
    """"""
    This function takes in a pandas DataFrame representing a table of towns and their number of schools, and returns the mean number of schools.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing town names and their number of schools with columns 'Town' and 'Number of schools'.
    Returns:
    float: The mean number of schools.
    """"""
    # Calculate the mean of the 'Number of schools' column
    mean = np.mean(df['Number of schools'])
    
    return mean","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Town': ['Greenwood', 'Richmond', 'Mayfield', 'Salem', 'Ashland', 'Chesterton'],
    'Number of schools': [2, 7, 4, 9, 7, 7]
})

# Call the tool to solve the problem
mean = calculate_mean(df)
print(mean)
```","def calculate_mean_of_column(data_frame, column_name):
    """"""
    This function takes in a pandas DataFrame and a column name, and returns the mean of the specified column.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the data.
    column_name (str): The name of the column for which the mean should be calculated.
    
    Returns:
    float: The mean of the specified column.
    """"""
    # Calculate the mean of the specified column
    mean = np.mean(data_frame[column_name])
    
    return mean","df = pd.DataFrame({
    'Town': ['Greenwood', 'Richmond', 'Mayfield', 'Salem', 'Ashland', 'Chesterton'],
    'Number of schools': [2, 7, 4, 9, 7, 7]
})

mean = calculate_mean_of_column(data_frame=df, column_name='Number of schools')
print(mean)"
"As part of a statistics project, a math class weighed all the children who were willing to participate. What is the weight of the lightest child?",21,"Stem | Leaf 
2 | 1
3 | 
4 | 2, 3, 5, 6
5 | 7, 9, 9
6 | 1",8,12012,"import pandas as pd

def find_lightest_child(df):
    """"""
    This function takes in a pandas dataframe of children's weights, and returns the weight of the lightest child.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the weights of children.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The weight of the lightest child.
    """"""
    # prepare a list to calculate weight of each child
    weights = []
    # calculate the weight of each child
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            weights.append(stem * 10 + leaf[j])
    # find the minimum weight
    min_weight = min(weights)
    return min_weight","We should first create a pandas dataframe with the data from the table. Note that some elements are empty, so we need to fill them with empty lists. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [2, 3, 4, 5, 6],
    'Leaf': [[1], [], [2, 3, 5, 6], [7, 9, 9], [1]]
})
# Call the tool to solve the problem
print(find_lightest_child(df))
```","def find_minimum_value_in_stem_leaf(data_frame, stem_col, leaf_col):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of items, and returns the minimum value among the items.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    
    Returns:
    int: The minimum value among the items.
    """"""
    # Initialize the list to calculate items
    items = []
    
    # Calculate the total value of items
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Find the minimum value
    min_value = min(items)
    
    return min_value","data = {
    ""Stem"": [2, 3, 4, 5, 6],
    ""Leaf"": [[1], [], [2, 3, 5, 6], [7, 9, 9], [1]]
}

df = pd.DataFrame(data)
print(find_minimum_value_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf""))"
Mr. Clarke recorded the scores of his students on the most recent math quiz. How many students are there in all?,53,"Score | Frequency
5 | 13
6 | 2
7 | 8
8 | 11
9 | 4
10 | 15",8,2878,"import pandas as pd

def calculate_total_students(score_frequency_df):
    """"""
    This function takes in a pandas DataFrame representing a score frequency table and returns the total number of students.
    Args:
    score_frequency_df (pd.DataFrame): A pandas DataFrame containing scores and their frequencies with columns 'Score' and 'Frequency'.
    Returns:
    int: The total number of students.
    """"""
    # Calculate the total number of students by summing the frequencies
    total_students = score_frequency_df['Frequency'].sum()
    
    return total_students","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Score': [5, 6, 7, 8, 9, 10],
    'Frequency': [13, 2, 8, 11, 4, 15]
})
# Call the tool to solve the problem
total_students = calculate_total_students(df)
print(total_students)
```","def calculate_total_elements_from_frequency_table(frequency_table_df, value_col, frequency_col):
    """"""
    This function takes in a pandas DataFrame representing a frequency table and returns the total number of elements based on the frequencies.
    
    Args:
    frequency_table_df (pd.DataFrame): A pandas DataFrame containing values and their frequencies with columns specified by value_col and frequency_col.
    value_col (str): The column name for the values.
    frequency_col (str): The column name for the frequencies.
    
    Returns:
    int: The total number of elements.
    """"""
    # Calculate the total number of elements by summing the frequencies
    total_elements = frequency_table_df[frequency_col].sum()
    
    return total_elements","data = {
    'Score': [5, 6, 7, 8, 9, 10],
    'Frequency': [13, 2, 8, 11, 4, 15]
}

df = pd.DataFrame(data)
print(calculate_total_elements_from_frequency_table(frequency_table_df=df, value_col=""Score"", frequency_col=""Frequency""))"
Norwood Property Management reviewed the number of vacant apartments at each its apartment complexes over time. How many more vacant apartments did University Apartments have in August than in September?,3,"Apartment complex | August | September
Shadyside Apartments | 2 | 5
Creekside Apartments | 1 | 9
University Apartments | 19 | 16",4,5497,"import pandas as pd

def calculate_difference_vacant_apartments(df, complex_name, month1, month2):
    """"""
    This function takes in a pandas DataFrame representing a table of vacant apartments, the name of the apartment complex, and two months, and returns the difference in the number of vacant apartments between the two months.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of vacant apartments per complex and month with columns 'Apartment complex', 'August', 'September'.
    complex_name (str): The name of the apartment complex to calculate the difference for.
    month1 (str): The first month to compare.
    month2 (str): The second month to compare.
    Returns:
    int: The difference in the number of vacant apartments between the two months for the specified apartment complex.
    """"""
    # Filter the DataFrame for the specific apartment complex
    complex_df = df[df['Apartment complex'] == complex_name]
    
    if not complex_df.empty:
        # Get the number of vacant apartments for each month
        vacant_month1 = complex_df[month1].values[0]
        vacant_month2 = complex_df[month2].values[0]
        
        # Calculate the difference in the number of vacant apartments
        difference = vacant_month1 - vacant_month2
        
        return difference
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Apartment complex': ['Shadyside Apartments', 'Creekside Apartments', 'University Apartments'],
    'August': [2, 1, 19],
    'September': [5, 9, 16]
})

# Call the tool to solve the problem
difference = calculate_difference_vacant_apartments(df, 'University Apartments', 'August', 'September')
print(difference)
```","def calculate_difference_between_periods_for_entity(df, entity_col, period1_col, period2_col, entity_name):
    """"""
    This function takes in a pandas DataFrame representing a table of entities and their values over different periods, the name of the entity, and two periods, and returns the difference in values between the two periods for the specified entity.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the values of entities over different periods.
    entity_col (str): The column name for the entities.
    period1_col (str): The column name for the first period.
    period2_col (str): The column name for the second period.
    entity_name (str): The name of the entity to calculate the difference for.
    
    Returns:
    int: The difference in values between the two periods for the specified entity.
    """"""
    # Filter the DataFrame for the specific entity
    entity_df = df[df[entity_col] == entity_name]
    
    if not entity_df.empty:
        # Get the values for each period
        value_period1 = entity_df[period1_col].values[0]
        value_period2 = entity_df[period2_col].values[0]
        
        # Calculate the difference in values
        difference = value_period1 - value_period2
        
        return difference
    else:
        return None","df = pd.DataFrame({
    'Apartment complex': ['Shadyside Apartments', 'Creekside Apartments', 'University Apartments'],
    'August': [2, 1, 19],
    'September': [5, 9, 16]
})

print(calculate_difference_between_periods_for_entity(df, 'Apartment complex', 'August', 'September', 'University Apartments'))"
A cookie factory monitored the number of broken cookies per pack yesterday. How many packs had at least 20 broken cookies but less than 40 broken cookies?,6,"Stem | Leaf 
1 | 1, 3, 4, 5, 8, 9
2 | 0, 1, 1
3 | 1, 5, 7
4 | 8",6,8092,"import pandas as pd
def count_bags_with_20_to_40_broken_cookies(df):
    """"""
    This function takes in a pandas dataframe of broken cookies per pack, and returns the number of packs that have at least 20 but less than 40 broken cookies.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken cookies per pack.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of packs that have at least 20 but less than 40 broken cookies.
    """"""
    # prepare a list to calculate cookies in each pack
    cookies = []
    # calculate the total number of broken cookies in each pack
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            cookies.append(stem * 10 + leaf[j])
    # filter the packs where the total number of broken cookies is greater than or equal to 20 but less than 40
    filtered = [cookie for cookie in cookies if cookie >= 20 and cookie < 40]
    # count the number of rows
    num_packs = len(filtered)
    return num_packs","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [1, 2, 3, 4],
    'Leaf': [[1, 3, 4, 5, 8, 9], [0, 1, 1], [1, 5, 7], [8]]
})
# Call the tool to solve the problem
count_bags_with_20_to_40_broken_cookies(df)
```","def count_groups_within_range_in_stem_leaf(data_frame, stem_col, leaf_col, min_threshold, max_threshold):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of groups and a range of values, and returns the number of groups that have values within the specified range.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    min_threshold (int): The minimum threshold value for filtering items.
    max_threshold (int): The maximum threshold value for filtering items.
    
    Returns:
    int: The number of items with values within the specified range.
    """"""
    # Initialize the list to calculate items in each group
    items = []
    
    # Calculate the total value of items in each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Filter the items where the total value is within the specified range
    filtered = [item for item in items if item >= min_threshold and item < max_threshold]
    
    # Count the number of items
    num_items = len(filtered)
    
    return num_items","data = {
    ""Stem"": [1, 2, 3, 4],
    ""Leaf"": [[1, 3, 4, 5, 8, 9], [0, 1, 1], [1, 5, 7], [8]]
}

df = pd.DataFrame(data)
print(count_groups_within_range_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf"", min_threshold=20, max_threshold=40))"
What is the total cost for 1+1/4 pounds of farfalle pasta?,8.75,"penne pasta | $5 per pound
spirali pasta | $4 per pound
farfalle pasta | $7 per pound
rotini pasta | $6 per pound
fusilli pasta | $4 per pound
rigatoni pasta | $5 per pound",6,7519,"import pandas as pd

def calculate_cost_for_weight(df, item, weight):
    """"""
    This function takes in a pandas DataFrame representing a price table, an item name, and a weight, and returns the total cost of the item for the given weight.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing items and their prices per pound with columns 'Item' and 'Price per pound'.
    item (str): The name of the item.
    weight (float): The weight of the item.
    Returns:
    float: The total cost of the item for the given weight.
    """"""
    # Filter the DataFrame for the specific item
    item_df = df[df['Item'] == item]
    if not item_df.empty:
        # Extract the price per pound for the item
        price_per_pound = item_df['Price per pound'].values[0]
        # Calculate the total cost for the given weight
        total_cost = weight * price_per_pound
        return total_cost
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Item': ['penne pasta', 'spirali pasta', 'farfalle pasta', 'rotini pasta', 'fusilli pasta', 'rigatoni pasta'],
    'Price per pound': [5, 4, 7, 6, 4, 5]
})

# Call the tool to solve the problem
weight = 1 + 1/4
item = 'farfalle pasta'
total_cost = calculate_cost_for_weight(df, item, weight)
print(total_cost)
```","def calculate_total_cost_from_unit_prices_and_weight(item_prices_df, item_col, unit_price_col, item_name, item_weight):
    """"""
    This function takes in a pandas DataFrame representing a table of item prices and a given weight, and returns the total cost of the item based on the prices and weight.
    
    Args:
    item_prices_df (pd.DataFrame): A pandas DataFrame containing item names and their prices.
    item_col (str): The column name for the item names.
    unit_price_col (str): The column name for the item prices.
    item_name (str): The name of the item.
    item_weight (float): The weight of the item.
    
    Returns:
    float: The total cost of the item for the given weight.
    """"""
    # Filter the DataFrame for the specific item name
    item_price_df = item_prices_df[item_prices_df[item_col] == item_name]
    if not item_price_df.empty:
        # Extract the price per unit for the item
        price_per_unit = item_price_df[unit_price_col].values[0]
        # Calculate the total cost for the given weight
        total_cost = item_weight * price_per_unit
        return total_cost
    else:
        return None","item_prices_data = {
    'Item': ['penne pasta', 'spirali pasta', 'farfalle pasta', 'rotini pasta', 'fusilli pasta', 'rigatoni pasta'],
    'Price per pound': [5, 4, 7, 6, 4, 5]
}

item_prices_df = pd.DataFrame(item_prices_data)

item_name = ""farfalle pasta""
item_weight = 1 + 1/4
print(calculate_total_cost_from_unit_prices_and_weight(item_prices_df, ""Item"", ""Price per pound"", item_name, item_weight))"
An insurance company compiled the number of doctor visits made by some patients last year. How many patients did not go to the doctor last year?,14,"Number of trips | Frequency
0 | 14
1 | 4
2 | 15
3 | 5
4 | 10
5 | 19",7,16818,"import pandas as pd

def count_patients_with_no_visits(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of doctor visits and returns the number of patients who did not go to the doctor last year.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of doctor visits and their frequencies with columns 'Number of trips' and 'Frequency'.
    Returns:
    int: The number of patients who did not go to the doctor last year.
    """"""
    # Filter the DataFrame for the patients who did not go to the doctor
    no_visit_df = df[df['Number of trips'] == 0]
    
    # If there are no such patients, return 0
    if no_visit_df.empty:
        return 0
    
    # Otherwise, return the frequency of patients who did not go to the doctor
    return no_visit_df['Frequency'].values[0]","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of trips': [0, 1, 2, 3, 4, 5],
    'Frequency': [14, 4, 15, 5, 10, 19]
})

# Call the tool to solve the problem
print(count_patients_with_no_visits(df))
```","def count_frequency_of_specific_value(data_frame, value_col, frequency_col, specific_value):
    """"""
    This function takes in a pandas DataFrame representing a frequency table, a specific value, and returns the frequency of the specific value in the table.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing values and their frequencies.
    value_col (str): The column name for the values.
    frequency_col (str): The column name for the frequencies.
    specific_value (int): The specific value to count the frequency of.
    
    Returns:
    int: The frequency of the specific value in the table.
    """"""
    # Filter the DataFrame for the specific value
    specific_value_df = data_frame[data_frame[value_col] == specific_value]
    
    # If there are no such values, return 0
    if specific_value_df.empty:
        return 0
    
    # Otherwise, return the frequency of the specific value
    return specific_value_df[frequency_col].values[0]","data = {
    'Number of trips': [0, 1, 2, 3, 4, 5],
    'Frequency': [14, 4, 15, 5, 10, 19]
}

df = pd.DataFrame(data)
print(count_frequency_of_specific_value(data_frame=df, value_col=""Number of trips"", frequency_col=""Frequency"", specific_value=0))"
Scarlett's class recorded how many states each student has visited. What is the range of the numbers?,8,"Name | Number of states
Scarlett | 46
Nancy | 42
Dillon | 46
Wyatt | 42
Luca | 38
Cara | 42
Kenneth | 46",5,1823,"import pandas as pd

def calculate_range(df):
    """"""
    This function takes in a pandas DataFrame representing a table of students and the number of states they have visited, and returns the range of the numbers using pandas.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing student names and the number of states they have visited with columns 'Name' and 'Number of states'.
    Returns:
    int: The range of the numbers of states visited.
    """"""
    # Calculate the maximum and minimum number of states visited
    max_states = df['Number of states'].max()
    min_states = df['Number of states'].min()
    
    # Calculate the range
    range_states = max_states - min_states
    
    return range_states","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Name': ['Scarlett', 'Nancy', 'Dillon', 'Wyatt', 'Luca', 'Cara', 'Kenneth'],
    'Number of states': [46, 42, 46, 42, 38, 42, 46]
})

# Call the tool to solve the problem
range_states = calculate_range(df)

# Print the answer
print(range_states)
```","def calculate_range_of_column_values(data_frame, column_name):
    """"""
    This function takes in a pandas DataFrame and a column name, and returns the range of the values in the specified column.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the data.
    column_name (str): The name of the column for which the range of values is to be calculated.
    
    Returns:
    float: The range of the values in the specified column.
    """"""
    # Calculate the maximum and minimum values in the column
    max_value = data_frame[column_name].max()
    min_value = data_frame[column_name].min()
    
    # Calculate the range
    value_range = max_value - min_value
    
    return value_range","data = {
    'Name': ['Scarlett', 'Nancy', 'Dillon', 'Wyatt', 'Luca', 'Cara', 'Kenneth'],
    'Number of states': [46, 42, 46, 42, 38, 42, 46]
}

df = pd.DataFrame(data)
print(calculate_range_of_column_values(data_frame=df, column_name='Number of states'))"
Each twig has 5 grasshoppers. How many grasshoppers are on 4 twigs?,20,"Number of twigs | Number of grasshoppers
1 | 5
2 | 10
3 | 15
4 | ?",2,2965,"def calculate_grasshoppers_on_twigs(twigs):
    """"""
    This function takes in the number of twigs and returns the number of grasshoppers on the twigs, given that each twig has 5 grasshoppers.
    Args:
    twigs (int): The number of twigs.
    Returns:
    int: The number of grasshoppers on the twigs.
    """"""
    grasshoppers = twigs * 5
    return grasshoppers","```python
# Call the tool to solve the problem
calculate_grasshoppers_on_twigs(4)
```","def calculate_total_items_from_ratio(num_groups, ratio_per_group):
    """"""
    This function takes in the number of groups and a ratio, and returns the total number of items based on the ratio.
    
    Args:
    num_groups (int): The number of groups.
    ratio_per_group (int): The ratio of items per group.
    
    Returns:
    int: The total number of items.
    """"""
    # Calculate the total number of items
    total_items = num_groups * ratio_per_group
    
    return total_items","print(calculate_total_items_from_ratio(num_groups=4, ratio_per_group=5))"
An architecture student measured the heights of all the buildings downtown. How many buildings are less than 30 meters tall?,3,"Stem | Leaf 
1 | 5
2 | 1, 2
3 | 1, 2, 3, 4, 5, 7
4 | 0, 3, 3, 4, 5, 6, 6
5 | 1, 2, 4, 4",6,3922,"import pandas as pd
def count_buildings_less_than_30_meters(df):
    """"""
    This function takes in a pandas dataframe of building heights, and returns the number of buildings that are less than 30 meters tall.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the heights of buildings.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of buildings that are less than 30 meters tall.
    """"""
    # prepare a list to calculate height of each building
    heights = []
    # calculate the height of each building
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            heights.append(stem * 10 + leaf[j])
    # filter the buildings where the height is less than 30 meters
    filtered = [height for height in heights if height < 30]
    # count the number of rows
    num_buildings = len(filtered)
    return num_buildings","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [1, 2, 3, 4, 5],
    'Leaf': [[5], [1, 2], [1, 2, 3, 4, 5, 7], [0, 3, 3, 4, 5, 6, 6], [1, 2, 4, 4]]
})
# Call the tool to solve the problem
count_buildings_less_than_30_meters(df)
```","def count_groups_below_threshold_in_stem_leaf(data_frame, stem_col, leaf_col, item_threshold):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of groups and a threshold value, and returns the number of groups that have values less than the threshold.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    item_threshold (int): The threshold value for filtering items.
    
    Returns:
    int: The number of items with values less than the threshold.
    """"""
    # Initialize the list to calculate items in each group
    items = []
    
    # Calculate the total value of items in each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Filter the items where the total value is less than the threshold
    filtered = [item for item in items if item < item_threshold]
    
    # Count the number of items
    num_items = len(filtered)
    
    return num_items","data = {
    ""Stem"": [1, 2, 3, 4, 5],
    ""Leaf"": [[5], [1, 2], [1, 2, 3, 4, 5, 7], [0, 3, 3, 4, 5, 6, 6], [1, 2, 4, 4]]
}

df = pd.DataFrame(data)
print(count_groups_below_threshold_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf"", item_threshold=30))"
Mary looked at her e-mail outbox to see how many e-mails she sent each day. What is the mode of the numbers?,67,"Day | Number of e-mails
Wednesday | 84
Thursday | 67
Friday | 71
Saturday | 71
Sunday | 67
Monday | 67
Tuesday | 84",5,10944,"import pandas as pd
from collections import Counter

def calculate_mode(df):
    """"""
    This function takes in a pandas DataFrame representing a table of days and number of emails, and returns the mode of the number of emails.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing days and number of emails with columns 'Day' and 'Number of e-mails'.
    Returns:
    int: The mode of the number of emails.
    """"""
    # Extract the 'Number of e-mails' column
    emails = df['Number of e-mails']
    
    # Calculate the frequency of each number of emails
    counter = Counter(emails)
    
    # Find the number of emails with the highest frequency
    mode = counter.most_common(1)[0][0]
    
    return mode","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],
    'Number of e-mails': [84, 67, 71, 71, 67, 67, 84]
})
# Call the tool to solve the problem
calculate_mode(df)
```","from collections import Counter

def calculate_mode_of_column(df, column_name):
    """"""
    This function takes in a pandas DataFrame and a column name, and returns the mode of the column.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame.
    column_name (str): The name of the column to calculate the mode of.
    
    Returns:
    int: The mode of the column.
    """"""
    # Extract the column
    column = df[column_name]
    
    # Calculate the frequency of each value in the column
    counter = Counter(column)
    
    # Find the value with the highest frequency
    mode = counter.most_common(1)[0][0]
    
    return mode","df = pd.DataFrame({
    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],
    'Number of e-mails': [84, 67, 71, 71, 67, 67, 84]
})
print(calculate_mode_of_column(df, 'Number of e-mails'))"
An archer recalled how many times he hit the bull's-eye in the past 7 days. What is the mode of the numbers?,9,"Day | Number of bull's-eyes
Wednesday | 9
Thursday | 8
Friday | 9
Saturday | 8
Sunday | 9
Monday | 11
Tuesday | 11",5,2620,"import pandas as pd
from collections import Counter

def calculate_mode(df):
    """"""
    This function takes in a pandas DataFrame containing the number of bull's-eyes per day and returns the mode of the numbers.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of bull's-eyes per day with columns 'Day' and 'Number of bull's-eyes'.
    Returns:
    int: The mode of the numbers.
    """"""
    # Extract the number of bull's-eyes column
    bullseyes = df[""Number of bull's-eyes""].tolist()
    
    # Calculate the frequency of each number
    counter = Counter(bullseyes)
    
    # Find the mode
    mode = counter.most_common(1)[0][0]
    
    return mode","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],
    'Number of bull\'s-eyes': [9, 8, 9, 8, 9, 11, 11]
})
# Call the tool to solve the problem
mode = calculate_mode(df)
print(mode)
```","def calculate_mode_from_dataframe_column(data_frame, number_col):
    """"""
    This function takes in a pandas DataFrame and a column name containing numbers, and returns the mode of the numbers in that column.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing a column with numbers.
    number_col (str): The column name for the numbers.
    
    Returns:
    int: The mode of the numbers in the specified column.
    """"""
    # Extract the numbers from the specified column
    numbers = data_frame[number_col].tolist()
    
    # Calculate the frequency of each number
    counter = Counter(numbers)
    
    # Find the mode
    mode = counter.most_common(1)[0][0]
    
    return mode","df = pd.DataFrame({
    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],
    'Number of bull\'s-eyes': [9, 8, 9, 8, 9, 11, 11]
})

print(calculate_mode_from_dataframe_column(data_frame=df, number_col=""Number of bull's-eyes""))"
A front desk clerk looked up how many guests the hotel had each day. What is the range of the numbers?,22,"Day | Number of guests
Friday | 50
Saturday | 34
Sunday | 38
Monday | 56
Tuesday | 38
Wednesday | 46
Thursday | 53",5,8161,"import pandas as pd

def calculate_range(df):
    """"""
    This function takes in a pandas DataFrame containing a column of numbers and returns the range of the numbers.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing a column of numbers.
    Returns:
    int: The range of the numbers in the DataFrame.
    """"""
    # Find the minimum and maximum values in the DataFrame
    min_value = df['Number of guests'].min()
    max_value = df['Number of guests'].max()
    
    # Calculate the range
    range_value = max_value - min_value
    
    return range_value","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],
    'Number of guests': [50, 34, 38, 56, 38, 46, 53]
})

# Call the tool to solve the problem
range_value = calculate_range(df)
print(range_value)
```","def calculate_range_of_numbers_in_column(df, num_col):
    """"""
    This function takes in a pandas DataFrame containing a column of numbers and returns the range of the numbers in the specified column.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing a column of numbers.
    num_col (str): The column name for the numbers.
    
    Returns:
    int: The range of the numbers in the specified column.
    """"""
    # Find the minimum and maximum values in the DataFrame
    min_value = df[num_col].min()
    max_value = df[num_col].max()
    
    # Calculate the range
    range_value = max_value - min_value
    
    return range_value","df = pd.DataFrame({
    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],
    'Number of guests': [50, 34, 38, 56, 38, 46, 53]
})

range_value = calculate_range_of_numbers_in_column(df, 'Number of guests')
print(range_value)"
An art instructor kept track of how many total pictures were painted by each of the people enrolled in his class. How many people painted fewer than 2 pictures?,29,"Pictures painted | Frequency
0 | 10
1 | 19
2 | 12
3 | 8",8,12125,"import pandas as pd

def count_people_painted_fewer_than_2(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of pictures painted and returns the number of people who painted fewer than 2 pictures.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of pictures painted and their frequencies with columns 'Pictures painted' and 'Frequency'.
    Returns:
    int: The number of people who painted fewer than 2 pictures.
    """"""
    # Filter the DataFrame for the rows where the number of pictures painted is less than 2
    filtered_df = df[df['Pictures painted'] < 2]
    
    # Sum the frequencies of these rows to get the total number of people who painted fewer than 2 pictures
    num_people = filtered_df['Frequency'].sum()
    
    return num_people","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Pictures painted': [0, 1, 2, 3],
    'Frequency': [10, 19, 12, 8]
})
# Call the tool to solve the problem
count_people_painted_fewer_than_2(df)
```","def count_entities_below_threshold_in_frequency_table(data_frame, entity_col, frequency_col, threshold):
    """"""
    This function takes in a pandas DataFrame representing a frequency table and a threshold value, and returns the number of entities with a frequency less than the threshold.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the frequency table with columns specified by entity_col and frequency_col.
    entity_col (str): The column name for the entities.
    frequency_col (str): The column name for the frequencies.
    threshold (int): The threshold value for filtering entities.
    
    Returns:
    int: The number of entities with a frequency less than the threshold.
    """"""
    # Filter the DataFrame for the rows where the frequency is less than the threshold
    filtered_df = data_frame[data_frame[entity_col] < threshold]
    
    # Sum the frequencies of these rows to get the total number of entities
    num_entities = filtered_df[frequency_col].sum()
    
    return num_entities","data = {
    'Pictures painted': [0, 1, 2, 3],
    'Frequency': [10, 19, 12, 8]
}

df = pd.DataFrame(data)
print(count_entities_below_threshold_in_frequency_table(data_frame=df, entity_col=""Pictures painted"", frequency_col=""Frequency"", threshold=2))"
Will has $158. How much money will Will have left if he buys a wedding cake and a pecan pie?,74,"apple tart | $19
wedding cake | $71
peach pie | $12
key lime pie | $12
pecan pie | $13
apple pie | $14",5,12497,"import pandas as pd

def calculate_remaining_money(menu_df, budget, items):
    """"""
    This function takes in a pandas DataFrame representing a menu table, a budget, and a list of items to buy, and returns the remaining money after buying the items using pandas.
    Args:
    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.
    budget (float): The initial budget.
    items (list): A list of menu item names to buy.
    Returns:
    float: The remaining money after buying the items.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the items and calculate the cost for each item
    for item in items:
        # Filter the DataFrame for the specific item
        item_df = menu_df[menu_df['Item'] == item]
        if not item_df.empty:
            item_price = item_df['Price'].values[0]
            total_cost += item_price
    
    # Calculate the remaining money
    remaining_money = budget - total_cost
    
    return remaining_money","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
menu_df = pd.DataFrame({
    'Item': ['apple tart', 'wedding cake', 'peach pie', 'key lime pie', 'pecan pie', 'apple pie'],
    'Price': [19, 71, 12, 12, 13, 14]
})

# Call the tool to solve the problem
remaining_money = calculate_remaining_money(menu_df, 158, ['wedding cake', 'pecan pie'])
print(remaining_money)
```","def calculate_remaining_budget_after_purchases(item_prices_df, item_col, price_col, initial_budget, items_to_buy):
    """"""
    This function takes in a pandas DataFrame representing a table of item prices, an initial budget, and a list of items to buy, and returns the remaining budget after buying the items.
    
    Args:
    item_prices_df (pd.DataFrame): A pandas DataFrame containing item names and their prices.
    item_col (str): The column name for the item names.
    price_col (str): The column name for the item prices.
    initial_budget (float): The initial budget.
    items_to_buy (list): A list of item names to buy.
    
    Returns:
    float: The remaining budget after buying the items.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the item names and calculate the cost for each item
    for item_name in items_to_buy:
        # Filter the DataFrame for the specific item name
        item_price_df = item_prices_df[item_prices_df[item_col] == item_name]
        if not item_price_df.empty:
            item_price = item_price_df[price_col].values[0]
            total_cost += item_price
    
    # Calculate the remaining budget
    remaining_budget = initial_budget - total_cost
    
    return remaining_budget","item_prices_data = {
    'Item': ['apple tart', 'wedding cake', 'peach pie', 'key lime pie', 'pecan pie', 'apple pie'],
    'Price': [19, 71, 12, 12, 13, 14]
}

item_prices_df = pd.DataFrame(item_prices_data)

items_to_buy = ['wedding cake', 'pecan pie']
print(calculate_remaining_budget_after_purchases(item_prices_df, ""Item"", ""Price"", 158, items_to_buy))"
How much money does Nina need to buy 7 bottles of mouthwash?,25.76,"bottle of hand lotion | $2.99
hairbrush | $4.63
bottle of mouthwash | $3.68
bottle of sunscreen | $3.59
box of bandages | $2.34",7,8231,"import pandas as pd

def calculate_total_cost_single_item(menu_df, item_name, quantity):
    """"""
    This function takes in a pandas DataFrame representing a menu table, an item name, and a quantity, and returns the total cost of the orders using pandas.
    Args:
    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.
    item_name (str): The name of the item to be ordered.
    quantity (int): The number of items to be ordered.
    Returns:
    float: The total cost of the orders.
    """"""
    # Filter the DataFrame for the specific item
    item_df = menu_df[menu_df['Item'] == item_name]
    if not item_df.empty:
        item_price = item_df['Price'].values[0]
        total_cost = quantity * item_price
    else:
        total_cost = 0.0
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
menu_df = pd.DataFrame({
    'Item': ['bottle of hand lotion', 'hairbrush', 'bottle of mouthwash', 'bottle of sunscreen', 'box of bandages'],
    'Price': [2.99, 4.63, 3.68, 3.59, 2.34]
})

# Call the tool to solve the problem
total_cost = calculate_total_cost_single_item(menu_df, 'bottle of mouthwash', 7)
print(total_cost)
```","def calculate_total_cost_for_single_item(item_prices_df, item_col, unit_price_col, item_name, quantity):
    """"""
    This function takes in a pandas DataFrame representing a table of item prices, an item name, and a quantity, and returns the total cost of the item based on the price and quantity.
    
    Args:
    item_prices_df (pd.DataFrame): A pandas DataFrame containing item names and their prices.
    item_col (str): The column name for the item names.
    unit_price_col (str): The column name for the item prices.
    item_name (str): The name of the item.
    quantity (int): The quantity of the item.
    
    Returns:
    float: The total cost of the item.
    """"""
    # Filter the DataFrame for the specific item name
    item_price_df = item_prices_df[item_prices_df[item_col] == item_name]
    if not item_price_df.empty:
        item_price = item_price_df[unit_price_col].values[0]
        total_cost = quantity * item_price
    else:
        total_cost = 0.0
    
    return total_cost","item_prices_data = {
    'Item': ['bottle of hand lotion', 'hairbrush', 'bottle of mouthwash', 'bottle of sunscreen', 'box of bandages'],
    'Price': [2.99, 4.63, 3.68, 3.59, 2.34]
}

item_prices_df = pd.DataFrame(item_prices_data)

print(calculate_total_cost_for_single_item(item_prices_df, ""Item"", ""Price"", 'bottle of mouthwash', 7))"
Akira buys 3+7/10 kilograms of dock washers. What is the total cost?,14.8,"lock washers | $3 per kilogram
square washers | $3 per kilogram
dock washers | $4 per kilogram
fender washers | $3 per kilogram
star washers | $3 per kilogram",6,10718,"import pandas as pd

def calculate_cost(df, item, weight):
    """"""
    This function takes in a pandas DataFrame representing a table of items and their prices per kilogram, the name of an item, and the weight of the item in kilograms, and returns the total cost of the item.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing items and their prices per kilogram with columns 'Item' and 'Price per kilogram'.
    item (str): The name of the item.
    weight (float): The weight of the item in kilograms.
    Returns:
    float: The total cost of the item.
    """"""
    # Filter the DataFrame for the specific item
    item_df = df[df['Item'] == item]
    if not item_df.empty:
        # Extract the price per kilogram
        price_per_kg = item_df['Price per kilogram'].values[0]
        # Calculate the total cost
        total_cost = weight * price_per_kg
        return total_cost
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Item': ['lock washers', 'square washers', 'dock washers', 'fender washers', 'star washers'],
    'Price per kilogram': [3, 3, 4, 3, 3]
})
# Call the tool to solve the problem
total_cost = calculate_cost(df, 'dock washers', 3+7/10)
print(total_cost)
```","def calculate_total_cost_from_unit_weight_prices_and_weight(item_prices_df, item_col, unit_price_col, item_name, item_weight):
    """"""
    This function takes in a pandas DataFrame representing a table of item prices per unit weight, the name of an item, and the weight of the item, and returns the total cost of the item based on the prices and weight.
    
    Args:
    item_prices_df (pd.DataFrame): A pandas DataFrame containing item names and their prices per unit weight.
    item_col (str): The column name for the item names.
    unit_price_col (str): The column name for the item prices per unit weight.
    item_name (str): The name of the item.
    item_weight (float): The weight of the item.
    
    Returns:
    float: The total cost of the item.
    """"""
    # Filter the DataFrame for the specific item name
    item_price_df = item_prices_df[item_prices_df[item_col] == item_name]
    if not item_price_df.empty:
        # Extract the price per unit weight
        price_per_unit_weight = item_price_df[unit_price_col].values[0]
        # Calculate the total cost
        total_cost = item_weight * price_per_unit_weight
        return total_cost
    else:
        return None","item_prices_data = {
    'Item': ['lock washers', 'square washers', 'dock washers', 'fender washers', 'star washers'],
    'Price per kilogram': [3, 3, 4, 3, 3]
}

item_prices_df = pd.DataFrame(item_prices_data)

item_name = ""dock washers""
item_weight = 3 + 7/10
print(calculate_total_cost_from_unit_weight_prices_and_weight(item_prices_df, ""Item"", ""Price per kilogram"", item_name, item_weight))"
The members of the track team compared how many miles they ran last week. What is the mode of the numbers?,4,"Name | Miles
Sophie | 7
Jacob | 3
Alana | 4
Trevor | 4
Edwin | 7
Nolan | 4",7,3400,"import pandas as pd
from collections import Counter

def calculate_mode(df):
    """"""
    This function takes in a pandas DataFrame representing a table of names and miles run, and returns the mode of the miles run.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing names and miles run with columns 'Name' and 'Miles'.
    Returns:
    int: The mode of the miles run.
    """"""
    # Extract the 'Miles' column from the DataFrame
    miles = df['Miles']
    
    # Use the Counter class from the collections module to count the frequency of each number of miles run
    counter = Counter(miles)
    
    # Find the number of miles run that has the highest frequency
    mode = counter.most_common(1)[0][0]
    
    return mode","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Name': ['Sophie', 'Jacob', 'Alana', 'Trevor', 'Edwin', 'Nolan'],
    'Miles': [7, 3, 4, 4, 7, 4]
})
# Call the tool to solve the problem
calculate_mode(df)
```","def calculate_mode_of_column(data_frame, column_name):
    """"""
    This function takes in a pandas DataFrame and a column name, and returns the mode of the specified column.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the data.
    column_name (str): The name of the column for which the mode should be calculated.
    
    Returns:
    int: The mode of the specified column.
    """"""
    # Extract the specified column from the DataFrame
    column_data = data_frame[column_name]
    
    # Use the Counter class from the collections module to count the frequency of each value in the column
    counter = Counter(column_data)
    
    # Find the value in the column that has the highest frequency
    mode = counter.most_common(1)[0][0]
    
    return mode","data = {
    'Name': ['Sophie', 'Jacob', 'Alana', 'Trevor', 'Edwin', 'Nolan'],
    'Miles': [7, 3, 4, 4, 7, 4]
}

df = pd.DataFrame(data)
print(calculate_mode_of_column(data_frame=df, column_name=""Miles""))"
Each laundry hamper has 5 pairs of jeans. How many pairs of jeans are in 3 laundry hampers?,15,"Number of laundry hampers | Number of pairs of jeans
1 | 5
2 | 10
3 | ?",1,8937,"def calculate_jeans_in_hampers(df, hamper_count):
    """"""
    This function takes in a pandas DataFrame representing a table of laundry hampers and the number of jeans in each, and a count of hampers, and returns the number of jeans in the given number of hampers.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of laundry hampers and the number of jeans in each with columns 'Number of laundry hampers' and 'Number of pairs of jeans'.
    hamper_count (int): The number of laundry hampers.
    Returns:
    int: The number of jeans in the given number of hampers.
    """"""
    # Get the number of jeans in one hamper
    jeans_per_hamper = df[df['Number of laundry hampers'] == 1]['Number of pairs of jeans'].values[0]
    
    # Calculate the number of jeans in the given number of hampers
    total_jeans = jeans_per_hamper * hamper_count
    
    return total_jeans","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of laundry hampers': [1, 2],
    'Number of pairs of jeans': [5, 10]
})

# Call the tool to solve the problem
calculate_jeans_in_hampers(df, 3)
```","def calculate_items_in_groups(df, group_col, item_col, group_count):
    """"""
    This function takes in a pandas DataFrame representing a table of group-item counts, a column name for groups, a column name for items, and a count of groups, and returns the number of items in the given number of groups.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of groups and the number of items in each with columns specified by group_col and item_col.
    group_col (str): The column name for the groups.
    item_col (str): The column name for the items.
    group_count (int): The number of groups.
    
    Returns:
    int: The number of items in the given number of groups.
    """"""
    # Get the number of items in one group
    items_per_group = df[df[group_col] == 1][item_col].values[0]
    
    # Calculate the number of items in the given number of groups
    total_items = items_per_group * group_count
    
    return total_items","df = pd.DataFrame({
    'Number of laundry hampers': [1, 2],
    'Number of pairs of jeans': [5, 10]
})

print(calculate_items_in_groups(df, 'Number of laundry hampers', 'Number of pairs of jeans', 3))"
A farm equipment company kept a record of the number of tractors made each month. How many tractors did the company make in total in July and August?,643,"Month | Number of tractors
July | 158
August | 485
September | 357",3,6938,"import pandas as pd

def calculate_total_tractors(df, months):
    """"""
    This function takes in a pandas DataFrame representing a record of tractors made each month and a list of months, and returns the total number of tractors made in these months.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing months and the number of tractors made with columns 'Month' and 'Number of tractors'.
    months (list): A list of months for which the total number of tractors is to be calculated.
    Returns:
    int: The total number of tractors made in the given months.
    """"""
    # Filter the DataFrame for the specific months
    df_filtered = df[df['Month'].isin(months)]
    
    # Calculate the total number of tractors
    total_tractors = df_filtered['Number of tractors'].sum()
    
    return total_tractors","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Month': ['July', 'August', 'September'],
    'Number of tractors': [158, 485, 357]
})

# Call the tool to solve the problem
total_tractors = calculate_total_tractors(df, ['July', 'August'])
print(total_tractors)
```","def calculate_total_items_in_periods(df, period_col, item_count_col, periods_list):
    """"""
    This function takes in a pandas DataFrame representing a table of item counts per period and a list of periods, and returns the total number of items produced in these periods.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing periods and the number of items produced with columns specified by period_col and item_count_col.
    period_col (str): The column name for the periods.
    item_count_col (str): The column name for the item counts.
    periods_list (list): A list of periods for which the total number of items is to be calculated.
    
    Returns:
    int: The total number of items produced in the given periods.
    """"""
    # Filter the DataFrame for the specific periods
    df_filtered = df[df[period_col].isin(periods_list)]
    
    # Calculate the total number of items
    total_items = df_filtered[item_count_col].sum()
    
    return total_items","df = pd.DataFrame({
    'Month': ['July', 'August', 'September'],
    'Number of tractors': [158, 485, 357]
})

print(calculate_total_items_in_periods(df, 'Month', 'Number of tractors', ['July', 'August']))"
"A Girl Scout troop recorded how many boxes of cookies they sold each day for a week. According to the table, what was the rate of change between Thursday and Friday?",3,"Day | Boxes of cookies
Tuesday | 31
Wednesday | 29
Thursday | 29
Friday | 32
Saturday | 31",7,12831,"import pandas as pd

def calculate_rate_of_change(df, day1, day2):
    """"""
    This function takes in a pandas DataFrame representing a table of daily cookie sales and two days, and returns the rate of change between the two days.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing daily cookie sales with columns 'Day' and 'Boxes of cookies'.
    day1 (str): The first day to compare.
    day2 (str): The second day to compare.
    Returns:
    float: The rate of change between the two days.
    """"""
    # Filter the DataFrame for the specific days
    day1_df = df[df['Day'] == day1]
    day2_df = df[df['Day'] == day2]
    
    # Check if both days are in the DataFrame
    if not day1_df.empty and not day2_df.empty:
        # Calculate the rate of change
        day1_sales = day1_df['Boxes of cookies'].values[0]
        day2_sales = day2_df['Boxes of cookies'].values[0]
        rate_of_change = day2_sales - day1_sales
        return rate_of_change
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    'Boxes of cookies': [31, 29, 29, 32, 31]
})
# Call the tool to solve the problem
rate_of_change = calculate_rate_of_change(df, 'Thursday', 'Friday')
print(rate_of_change)
```","def calculate_rate_of_change_between_data_points(data_frame, index_col, value_col, data_point1, data_point2):
    """"""
    This function takes in a pandas DataFrame representing a table with a column of values and two data points, and returns the rate of change between the two data points based on the value column.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing a column of values and an index column.
    index_col (str): The column name for the index column.
    value_col (str): The column name for the value column.
    data_point1 (str): The first data point to compare.
    data_point2 (str): The second data point to compare.
    
    Returns:
    float: The rate of change between the two data points.
    """"""
    # Filter the DataFrame for the specific data points
    data_point1_df = data_frame[data_frame[index_col] == data_point1]
    data_point2_df = data_frame[data_frame[index_col] == data_point2]
    
    # Check if both data points are in the DataFrame
    if not data_point1_df.empty and not data_point2_df.empty:
        # Calculate the rate of change
        value1 = data_point1_df[value_col].values[0]
        value2 = data_point2_df[value_col].values[0]
        rate_of_change = value2 - value1
        return rate_of_change
    else:
        return None","data = {
    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    'Boxes of cookies': [31, 29, 29, 32, 31]
}

df = pd.DataFrame(data)
print(calculate_rate_of_change_between_data_points(data_frame=df, index_col=""Day"", value_col=""Boxes of cookies"", data_point1=""Thursday"", data_point2=""Friday""))"
Shawn figured out the scores at the end of a card game. Which score did the greatest number of people receive?,4,"Score | Frequency
4 | 19
5 | 14
6 | 18
7 | 6
8 | 16
9 | 12
10 | 0",8,3495,"import pandas as pd

def find_most_common_score(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of scores and returns the score with the greatest frequency.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing scores and their frequencies with columns 'Score' and 'Frequency'.
    Returns:
    int: The score with the greatest frequency.
    """"""
    # Find the row with the maximum frequency
    max_frequency_row = df[df['Frequency'] == df['Frequency'].max()]
    
    # Get the score from the row
    most_common_score = max_frequency_row['Score'].values[0]
    
    return most_common_score","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Score': [4, 5, 6, 7, 8, 9, 10],
    'Frequency': [19, 14, 18, 6, 16, 12, 0]
})
# Call the tool to solve the problem
most_common_score = find_most_common_score(df)
print(most_common_score)
```","def find_most_common_value_in_frequency_table(frequency_table_df, value_col, frequency_col):
    """"""
    This function takes in a pandas DataFrame representing a frequency table and returns the value with the greatest frequency.
    
    Args:
    frequency_table_df (pd.DataFrame): A pandas DataFrame containing values and their frequencies.
    value_col (str): The column name for the values.
    frequency_col (str): The column name for the frequencies.
    
    Returns:
    int/float/str: The value with the greatest frequency.
    """"""
    # Find the row with the maximum frequency
    max_frequency_row = frequency_table_df[frequency_table_df[frequency_col] == frequency_table_df[frequency_col].max()]
    
    # Get the value from the row
    most_common_value = max_frequency_row[value_col].values[0]
    
    return most_common_value","frequency_table_data = {
    'Score': [4, 5, 6, 7, 8, 9, 10],
    'Frequency': [19, 14, 18, 6, 16, 12, 0]
}

frequency_table_df = pd.DataFrame(frequency_table_data)

print(find_most_common_value_in_frequency_table(frequency_table_df, ""Score"", ""Frequency""))"
Destiny's classmates recorded how many books they read last year. What is the median of the numbers?,71,"Name | Number of books
Destiny | 70
Jenny | 74
Leah | 74
Anita | 70
Wyatt | 71
Tommy | 72
Nate | 71",5,10051,"import pandas as pd
import numpy as np

def calculate_median(df):
    """"""
    This function takes in a pandas DataFrame representing a table of names and the number of books read, and returns the median number of books read using numpy.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing names and the number of books read with columns 'Name' and 'Number of books'.
    Returns:
    float: The median number of books read.
    """"""
    # Extract the 'Number of books' column and convert it to a numpy array
    books_array = df['Number of books'].to_numpy()
    
    # Calculate and return the median
    median_books = np.median(books_array)
    
    return median_books","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Name': ['Destiny', 'Jenny', 'Leah', 'Anita', 'Wyatt', 'Tommy', 'Nate'],
    'Number of books': [70, 74, 74, 70, 71, 72, 71]
})

# Call the tool to solve the problem
median_books = calculate_median(df)
print(median_books)
```","def calculate_median_of_numerical_column(df, num_col):
    """"""
    This function takes in a pandas DataFrame and a numerical column name, and returns the median of the numerical column using numpy.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing at least one numerical column.
    num_col (str): The column name for the numerical values.
    
    Returns:
    float: The median of the numerical column.
    """"""
    # Extract the numerical column and convert it to a numpy array
    num_array = df[num_col].to_numpy()
    
    # Calculate and return the median
    median_num = np.median(num_array)
    
    return median_num","df = pd.DataFrame({
    'Name': ['Destiny', 'Jenny', 'Leah', 'Anita', 'Wyatt', 'Tommy', 'Nate'],
    'Number of books': [70, 74, 74, 70, 71, 72, 71]
})

print(calculate_median_of_numerical_column(df, 'Number of books'))"
Sue works at Scoops ice cream shop. The frequency chart shows how many times each topping was ordered during two of her shifts. How many more times were rainbow sprinkles ordered than chocolate chips?,2,"Topping | Frequency
caramel sauce | 4
chocolate chips | 7
gummy candies | 3
rainbow sprinkles | 9",5,4564,"import pandas as pd

def calculate_difference(df, topping1, topping2):
    """"""
    This function takes in a pandas DataFrame representing a frequency chart of toppings and two topping names, and returns the difference in the number of times the two toppings were ordered.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing topping names and their frequencies with columns 'Topping' and 'Frequency'.
    topping1 (str): The name of the first topping.
    topping2 (str): The name of the second topping.
    Returns:
    int: The difference in the number of times the two toppings were ordered.
    """"""
    # Get the frequency of the first topping
    topping1_frequency = df[df['Topping'] == topping1]['Frequency'].values[0]
    
    # Get the frequency of the second topping
    topping2_frequency = df[df['Topping'] == topping2]['Frequency'].values[0]
    
    # Calculate and return the difference
    return abs(topping1_frequency - topping2_frequency)","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Topping': ['caramel sauce', 'chocolate chips', 'gummy candies', 'rainbow sprinkles'],
    'Frequency': [4, 7, 3, 9]
})

# Call the tool to solve the problem
difference = calculate_difference(df, 'rainbow sprinkles', 'chocolate chips')
print(difference)
```","def calculate_frequency_difference(data_frame, item_col, frequency_col, item1, item2):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of items and two item names, and returns the difference in the number of times the two items were ordered.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing item names and their frequencies.
    item_col (str): The column name for the item names.
    frequency_col (str): The column name for the item frequencies.
    item1 (str): The name of the first item.
    item2 (str): The name of the second item.
    
    Returns:
    int: The difference in the number of times the two items were ordered.
    """"""
    # Get the frequency of the first item
    item1_frequency = data_frame[data_frame[item_col] == item1][frequency_col].values[0]
    
    # Get the frequency of the second item
    item2_frequency = data_frame[data_frame[item_col] == item2][frequency_col].values[0]
    
    # Calculate and return the difference
    return abs(item1_frequency - item2_frequency)","data = {
    'Topping': ['caramel sauce', 'chocolate chips', 'gummy candies', 'rainbow sprinkles'],
    'Frequency': [4, 7, 3, 9]
}

df = pd.DataFrame(data)
print(calculate_frequency_difference(data_frame=df, item_col=""Topping"", frequency_col=""Frequency"", item1=""rainbow sprinkles"", item2=""chocolate chips""))"
Bernard counted the total number of shells collected by his friends during a walk on the beach. How many people found at least 4 seashells?,26,"Seashells found | Frequency
0 | 9
1 | 12
2 | 6
3 | 11
4 | 10
5 | 16",7,4964,"import pandas as pd

def count_people_with_at_least_4_seashells(df):
    """"""
    This function takes in a pandas DataFrame representing a table of seashells found and their frequencies, and returns the number of people who found at least 4 seashells.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of seashells found and their frequencies with columns 'Seashells found' and 'Frequency'.
    Returns:
    int: The number of people who found at least 4 seashells.
    """"""
    # Filter the DataFrame for rows where the number of seashells found is greater than or equal to 4
    filtered_df = df[df['Seashells found'] >= 4]
    
    # Calculate the total number of people who found at least 4 seashells
    total_people = filtered_df['Frequency'].sum()
    
    return total_people","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Seashells found': [0, 1, 2, 3, 4, 5],
    'Frequency': [9, 12, 6, 11, 10, 16]
})
# Call the tool to solve the problem
count_people_with_at_least_4_seashells(df)
```","def count_people_with_at_least_threshold_items(data_frame, item_col, frequency_col, item_threshold):
    """"""
    This function takes in a pandas DataFrame representing a table of items found and their frequencies, and returns the number of people who found at least a certain threshold of items.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the number of items found and their frequencies with columns specified by item_col and frequency_col.
    item_col (str): The column name for the item counts.
    frequency_col (str): The column name for the frequencies.
    item_threshold (int): The threshold value for filtering items.
    
    Returns:
    int: The number of people who found at least the threshold number of items.
    """"""
    # Filter the DataFrame for rows where the number of items found is greater than or equal to the threshold
    filtered_df = data_frame[data_frame[item_col] >= item_threshold]
    
    # Calculate the total number of people who found at least the threshold number of items
    total_people = filtered_df[frequency_col].sum()
    
    return total_people","data = {
    'Seashells found': [0, 1, 2, 3, 4, 5],
    'Frequency': [9, 12, 6, 11, 10, 16]
}

df = pd.DataFrame(data)
print(count_people_with_at_least_threshold_items(data_frame=df, item_col=""Seashells found"", frequency_col=""Frequency"", item_threshold=4))"
The Newberry Ski Resort asked its guests how many times they went sledding last winter. How many guests went sledding exactly 5 times last winter?,20,"Number of times | Frequency
0 | 14
1 | 9
2 | 1
3 | 5
4 | 4
5 | 20
6 | 2",7,16285,"import pandas as pd

def get_frequency(df, target_value):
    """"""
    This function takes in a pandas DataFrame representing a frequency table and a target value, and returns the frequency of the target value.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing a frequency table with columns 'Number of times' and 'Frequency'.
    target_value (int): The target value for which the frequency is to be found.
    Returns:
    int: The frequency of the target value.
    """"""
    # Filter the DataFrame for the specific target value
    target_df = df[df['Number of times'] == target_value]
    if not target_df.empty:
        frequency = target_df['Frequency'].values[0]
        return frequency
    else:
        return 0","```python
# Create a pandas DataFrame for the frequency table
data = {'Number of times': [0, 1, 2, 3, 4, 5, 6],
        'Frequency': [14, 9, 1, 5, 4, 20, 2]}
frequency_df = pd.DataFrame(data)

# Find the frequency of guests who went sledding exactly 5 times
target_value = 5
frequency = get_frequency(frequency_df, target_value)
print(frequency)
```","def get_frequency_from_table(df, value_col, frequency_col, target_value):
    """"""
    This function takes in a pandas DataFrame representing a frequency table, column names for values and frequencies, and a target value, and returns the frequency of the target value.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing a frequency table.
    value_col (str): The column name for the values.
    frequency_col (str): The column name for the frequencies.
    target_value (int): The target value for which the frequency is to be found.
    
    Returns:
    int: The frequency of the target value.
    """"""
    # Filter the DataFrame for the specific target value
    target_df = df[df[value_col] == target_value]
    if not target_df.empty:
        frequency = target_df[frequency_col].values[0]
        return frequency
    else:
        return 0","data = {'Number of times': [0, 1, 2, 3, 4, 5, 6],
        'Frequency': [14, 9, 1, 5, 4, 20, 2]}
frequency_df = pd.DataFrame(data)

target_value = 5
print(get_frequency_from_table(df=frequency_df, value_col='Number of times', frequency_col='Frequency', target_value=target_value))"
A game show viewer monitors how often a wheel numbered 1 through 5 stops at each number. Which number was spun the most times?,2,"Number spun | Frequency
1 | 13
2 | 18
3 | 2
4 | 10
5 | 11",8,14407,"import pandas as pd

def find_most_spun_number(df):
    """"""
    This function takes in a pandas DataFrame representing a table of spun numbers and their frequencies, and returns the number that was spun the most times.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing spun numbers and their frequencies with columns 'Number spun' and 'Frequency'.
    Returns:
    int: The number that was spun the most times.
    """"""
    # Find the row with the maximum frequency
    max_frequency_row = df[df['Frequency'] == df['Frequency'].max()]
    
    # Get the number spun from the row
    most_spun_number = max_frequency_row['Number spun'].values[0]
    
    return most_spun_number","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number spun': [1, 2, 3, 4, 5],
    'Frequency': [13, 18, 2, 10, 11]
})

# Call the tool to solve the problem
most_spun_number = find_most_spun_number(df)
print(most_spun_number)
```","def find_item_with_highest_frequency(data_frame, item_col, frequency_col):
    """"""
    This function takes in a pandas DataFrame representing a table of items and their frequencies, and returns the item with the highest frequency.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing items and their frequencies.
    item_col (str): The column name for the items.
    frequency_col (str): The column name for the frequencies.
    
    Returns:
    object: The item with the highest frequency.
    """"""
    # Find the row with the maximum frequency
    max_frequency_row = data_frame[data_frame[frequency_col] == data_frame[frequency_col].max()]
    
    # Get the item from the row
    highest_frequency_item = max_frequency_row[item_col].values[0]
    
    return highest_frequency_item","data = {
    'Number spun': [1, 2, 3, 4, 5],
    'Frequency': [13, 18, 2, 10, 11]
}

df = pd.DataFrame(data)
print(find_item_with_highest_frequency(data_frame=df, item_col=""Number spun"", frequency_col=""Frequency""))"
Some students in a biology class compared how many times they went to the park last week to work on their plant research projects. How many students went to the park fewer than 2 times?,25,"Number of trips | Frequency
0 | 7
1 | 18
2 | 17
3 | 19
4 | 9",8,15779,"import pandas as pd

def count_students_with_fewer_than_2_trips(df):
    """"""
    This function takes in a pandas DataFrame representing the number of trips and their frequency, and returns the number of students who went to the park fewer than 2 times.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of trips and their frequency with columns 'Number of trips' and 'Frequency'.
    Returns:
    int: The number of students who went to the park fewer than 2 times.
    """"""
    # Filter the DataFrame for the rows with fewer than 2 trips
    filtered_df = df[df['Number of trips'] < 2]
    
    # Calculate the total number of students who went to the park fewer than 2 times
    total_students = filtered_df['Frequency'].sum()
    
    return total_students","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of trips': [0, 1, 2, 3, 4],
    'Frequency': [7, 18, 17, 19, 9]
})

# Call the tool to solve the problem
count_students_with_fewer_than_2_trips(df)
```","def count_items_below_threshold(data_frame, trip_col, frequency_col, trip_threshold):
    """"""
    This function takes in a pandas DataFrame representing a table of trip frequencies and a threshold value, and returns the number of items with trip values below the threshold.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the trip frequencies with columns specified by trip_col and frequency_col.
    trip_col (str): The column name for the trip values.
    frequency_col (str): The column name for the frequency values.
    trip_threshold (int): The threshold value for filtering trips.
    
    Returns:
    int: The number of items with trip values below the threshold.
    """"""
    # Filter the DataFrame for the rows with trip values below the threshold
    filtered_df = data_frame[data_frame[trip_col] < trip_threshold]
    
    # Calculate the total number of items with trip values below the threshold
    total_items = filtered_df[frequency_col].sum()
    
    return total_items","data = {
    'Number of trips': [0, 1, 2, 3, 4],
    'Frequency': [7, 18, 17, 19, 9]
}

df = pd.DataFrame(data)
print(count_items_below_threshold(data_frame=df, trip_col=""Number of trips"", frequency_col=""Frequency"", trip_threshold=2))"
A grocery store monitored how many paper bags were used in the past 5 days. How many more paper bags did the grocery store use on Friday than on Sunday?,415,"Day | Number of paper bags
Friday | 774
Saturday | 520
Sunday | 359
Monday | 653
Tuesday | 231",3,1538,"import pandas as pd

def calculate_difference(df, day1, day2):
    """"""
    This function takes in a pandas DataFrame representing a table of paper bags used per day and two days, and returns the difference in the number of paper bags used between the two days.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing days and the number of paper bags used with columns 'Day' and 'Number of paper bags'.
    day1 (str): The first day.
    day2 (str): The second day.
    Returns:
    int: The difference in the number of paper bags used between the two days.
    """"""
    # Filter the DataFrame for the specific days
    day1_df = df[df['Day'] == day1]
    day2_df = df[df['Day'] == day2]
    
    # Calculate the difference in the number of paper bags used
    difference = day1_df['Number of paper bags'].values[0] - day2_df['Number of paper bags'].values[0]
    
    return difference","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],
    'Number of paper bags': [774, 520, 359, 653, 231]
})

# Call the tool to solve the problem
difference = calculate_difference(df, 'Friday', 'Sunday')
print(difference)
```","def calculate_difference_between_rows(data_frame, common_col, value_col, row1, row2):
    """"""
    This function takes in a pandas DataFrame, a common column, a value column, and two rows to compare, and returns the difference in values between the two rows based on the common column.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the data.
    common_col (str): The column name for the common column.
    value_col (str): The column name for the value column.
    row1 (str): The first row to compare.
    row2 (str): The second row to compare.
    
    Returns:
    float: The difference in values between the two rows based on the common column.
    """"""
    # Filter the DataFrame for the specific rows
    row1_df = data_frame[data_frame[common_col] == row1]
    row2_df = data_frame[data_frame[common_col] == row2]
    
    # Calculate the difference in values
    difference = row1_df[value_col].values[0] - row2_df[value_col].values[0]
    
    return difference","data = {
    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],
    'Number of paper bags': [774, 520, 359, 653, 231]
}

df = pd.DataFrame(data)
print(calculate_difference_between_rows(data_frame=df, common_col=""Day"", value_col=""Number of paper bags"", row1=""Friday"", row2=""Sunday""))"
A business magazine surveyed its readers about their commute times. How many commutes are exactly 43 minutes?,1,"Stem | Leaf 
2 | 0, 0, 3, 5, 7
3 | 8
4 | 3, 4, 8
5 | 2, 6, 7, 7, 8, 8
6 | 5
7 | 1, 2, 3, 3, 4, 8
8 | 3
9 | 0",4,94,"import pandas as pd
def count_commutes_of_43_minutes(df):
    """"""
    This function takes in a pandas dataframe of commute times, and returns the number of commutes that are exactly 43 minutes.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the commute times.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of commutes that are exactly 43 minutes.
    """"""
    # prepare a list to calculate commute times
    commute_times = []
    # calculate the total commute time in each row
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            commute_times.append(stem * 10 + leaf[j])
    # filter the commutes where the total commute time is exactly 43 minutes
    filtered = [time for time in commute_times if time == 43]
    # count the number of rows
    num_commutes = len(filtered)
    return num_commutes","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],
    'Leaf': [[0, 0, 3, 5, 7], [8], [3, 4, 8], [2, 6, 7, 7, 8, 8], [5], [1, 2, 3, 3, 4, 8], [3], [0]]
})
# Call the tool to solve the problem
count_commutes_of_43_minutes(df)
```","def count_instances_with_specific_value_in_stem_leaf(data_frame, stem_col, leaf_col, specific_value):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of instances and a specific value, and returns the number of instances that have values equal to the specific value.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    specific_value (int): The specific value for filtering items.
    
    Returns:
    int: The number of items with values equal to the specific value.
    """"""
    # Initialize the list to calculate items in each group
    items = []
    
    # Calculate the total value of items in each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Filter the items where the total value is equal to the specific value
    filtered = [item for item in items if item == specific_value]
    
    # Count the number of items
    num_items = len(filtered)
    
    return num_items","data = {
    ""Stem"": [2, 3, 4, 5, 6, 7, 8, 9],
    ""Leaf"": [[0, 0, 3, 5, 7], [8], [3, 4, 8], [2, 6, 7, 7, 8, 8], [5], [1, 2, 3, 3, 4, 8], [3], [0]]
}

df = pd.DataFrame(data)
print(count_instances_with_specific_value_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf"", specific_value=43))"
"During Fitness Day at school, Jen and her classmates took part in a pull-up competition, keeping track of the results. How many people did exactly 67 pull-ups?",0,"Stem | Leaf 
4 | 9
5 | 2, 4, 7
6 | 0, 3, 4, 5
7 | 3, 3, 4, 9
8 | 
9 | 0",7,10261,"import pandas as pd

def count_people_with_67_pullups(df):
    """"""
    This function takes in a pandas dataframe of pull-up results, and returns the number of people who did exactly 67 pull-ups.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the pull-up results.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of people who did exactly 67 pull-ups.
    """"""
    # prepare a list to calculate pull-ups for each person
    pullups = []
    # calculate the total number of pull-ups for each person
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            pullups.append(stem * 10 + leaf[j])
    # filter the people who did exactly 67 pull-ups
    filtered = [pullup for pullup in pullups if pullup == 67]
    # count the number of people
    num_people = len(filtered)
    return num_people","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [4, 5, 6, 7, 8, 9],
    'Leaf': [[9], [2, 4, 7], [0, 3, 4, 5], [3, 3, 4, 9], [], [0]]
})
# Call the tool to solve the problem
count_people_with_67_pullups(df)
```","def count_groups_with_specific_value_in_stem_leaf(data_frame, stem_col, leaf_col, specific_score):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of groups and a specific score, and returns the number of groups that have exactly the specific score.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of scores with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    specific_score (int): The specific score for filtering groups.
    
    Returns:
    int: The number of groups with exactly the specific score.
    """"""
    # Initialize the list to calculate scores in each group
    scores = []
    
    # Calculate the total score for each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            scores.append(stem * 10 + leaf[j])
    
    # Filter the groups where the total score is exactly the specific score
    filtered = [score for score in scores if score == specific_score]
    
    # Count the number of groups
    num_groups = len(filtered)
    
    return num_groups","data = {
    ""Stem"": [4, 5, 6, 7, 8, 9],
    ""Leaf"": [[9], [2, 4, 7], [0, 3, 4, 5], [3, 3, 4, 9], [], [0]]
}

df = pd.DataFrame(data)
print(count_groups_with_specific_value_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf"", specific_score=67))"
"An environmental agency examined how many trees were planted by different organizations. In all, how many trees were planted by Let it Grow and Heal the Earth?",890,"Organization | Number of trees planted
Let it Grow | 410
Heal the Earth | 480
Dreaming Green | 296
Acorns to Oaks | 179
Make it Green | 391",3,6300,"import pandas as pd

def calculate_total_trees_planted(df, organizations):
    """"""
    This function takes in a pandas DataFrame representing a table of organizations and the number of trees they planted, and a list of organizations, and returns the total number of trees planted by the organizations in the list.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing organizations and the number of trees they planted with columns 'Organization' and 'Number of trees planted'.
    organizations (list): A list of organization names.
    Returns:
    int: The total number of trees planted by the organizations in the list.
    """"""
    # Initialize the total number of trees
    total_trees = 0
    
    # Iterate through the organizations and calculate the total number of trees planted
    for organization in organizations:
        # Filter the DataFrame for the specific organization
        organization_df = df[df['Organization'] == organization]
        if not organization_df.empty:
            number_of_trees = organization_df['Number of trees planted'].values[0]
            total_trees += number_of_trees
    
    return total_trees","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Organization': ['Let it Grow', 'Heal the Earth', 'Dreaming Green', 'Acorns to Oaks', 'Make it Green'],
    'Number of trees planted': [410, 480, 296, 179, 391]
})

# Define the organizations
organizations = ['Let it Grow', 'Heal the Earth']

# Call the tool to solve the problem
total_trees = calculate_total_trees_planted(df, organizations)

# Print the result
print(total_trees)
```","def calculate_total_items_for_organizations(df, organization_col, item_count_col, organization_list):
    """"""
    This function takes in a pandas DataFrame representing a table of organizations and their item counts, and a list of organizations, and returns the total number of items for the organizations in the list.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing organizations and their item counts.
    organization_col (str): The column name for the organizations.
    item_count_col (str): The column name for the item counts.
    organization_list (list): A list of organization names.
    
    Returns:
    int: The total number of items for the organizations in the list.
    """"""
    # Initialize the total number of items
    total_items = 0
    
    # Iterate through the organizations and calculate the total number of items
    for organization in organization_list:
        # Filter the DataFrame for the specific organization
        organization_df = df[df[organization_col] == organization]
        if not organization_df.empty:
            number_of_items = organization_df[item_count_col].values[0]
            total_items += number_of_items
    
    return total_items","df = pd.DataFrame({
    'Organization': ['Let it Grow', 'Heal the Earth', 'Dreaming Green', 'Acorns to Oaks', 'Make it Green'],
    'Number of trees planted': [410, 480, 296, 179, 391]
})

organization_list = ['Let it Grow', 'Heal the Earth']
print(calculate_total_items_for_organizations(df, 'Organization', 'Number of trees planted', organization_list))"
Each necklace has 2 rubies. How many rubies are on 3 necklaces?,6,"Number of necklaces | Number of rubies
1 | 2
2 | 4
3 | ?",2,13731,"def calculate_rubies(necklaces):
    """"""
    This function takes in the number of necklaces and returns the number of rubies on them.
    Args:
    necklaces (int): The number of necklaces.
    Returns:
    int: The number of rubies on the necklaces.
    """"""
    # Each necklace has 2 rubies
    rubies_per_necklace = 2
    # Calculate the total number of rubies
    total_rubies = necklaces * rubies_per_necklace
    return total_rubies","```python
# Call the tool to solve the problem
calculate_rubies(3)
```","def calculate_total_items(num_groups, items_per_group):
    """"""
    This function takes in the number of groups and a fixed ratio of items per group, and returns the total number of items.
    
    Args:
    num_groups (int): The number of groups.
    items_per_group (int): The fixed ratio of items per group.
    
    Returns:
    int: The total number of items.
    """"""
    # Calculate the total number of items
    total_items = num_groups * items_per_group
    
    return total_items","print(calculate_total_items(num_groups=3, items_per_group=2))"
Nina kept track of the number of characters in each book she read. How many books had at least 30 characters but fewer than 50 characters?,10,"Stem | Leaf 
1 | 0, 6, 7, 8
2 | 1, 2, 7, 9
3 | 6, 7, 8, 8, 9
4 | 5, 5, 5, 6, 9
5 | 0, 1, 5, 7, 7",8,11197,"import pandas as pd
def count_books_with_30_to_50_characters(df):
    """"""
    This function takes in a pandas dataframe of books and their character counts, and returns the number of books that have at least 30 characters but fewer than 50 characters.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of characters per book.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of books that have at least 30 characters but fewer than 50 characters.
    """"""
    # prepare a list to calculate characters in each book
    characters = []
    # calculate the total number of characters in each book
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            characters.append(stem * 10 + leaf[j])
    # filter the books where the total number of characters is greater than or equal to 30 and less than 50
    filtered = [character for character in characters if character >= 30 and character < 50]
    # count the number of rows
    num_books = len(filtered)
    return num_books","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [1, 2, 3, 4, 5],
    'Leaf': [[0, 6, 7, 8], [1, 2, 7, 9], [6, 7, 8, 8, 9], [5, 5, 5, 6, 9], [0, 1, 5, 7, 7]]
})
# Call the tool to solve the problem
count_books_with_30_to_50_characters(df)
```","def count_groups_within_thresholds_in_stem_leaf(data_frame, stem_col, leaf_col, lower_threshold, upper_threshold):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of groups and lower and upper threshold values, and returns the number of groups that have values greater than or equal to the lower threshold and less than the upper threshold.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    lower_threshold (int): The lower threshold value for filtering items.
    upper_threshold (int): The upper threshold value for filtering items.
    
    Returns:
    int: The number of items with values within the thresholds.
    """"""
    # Initialize the list to calculate items in each group
    items = []
    
    # Calculate the total value of items in each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Filter the items where the total value is within the thresholds
    filtered = [item for item in items if item >= lower_threshold and item < upper_threshold]
    
    # Count the number of items
    num_items = len(filtered)
    
    return num_items","data = {
    ""Stem"": [1, 2, 3, 4, 5],
    ""Leaf"": [[0, 6, 7, 8], [1, 2, 7, 9], [6, 7, 8, 8, 9], [5, 5, 5, 6, 9], [0, 1, 5, 7, 7]]
}

df = pd.DataFrame(data)
print(count_groups_within_thresholds_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf"", lower_threshold=30, upper_threshold=50))"
Professor Marshall informed his students of their scores on the midterm exam. How many students scored at least 40 points but fewer than 90 points?,9,"Stem | Leaf 
1 | 1, 7, 7, 7
2 | 3, 4, 6, 7, 9
3 | 1, 2, 3, 6
4 | 1, 8
5 | 4, 8
6 | 0, 7, 7
7 | 
8 | 8, 8
9 | 0",8,7223,"import pandas as pd

def count_students_in_range(df, min_score, max_score):
    """"""
    This function takes in a pandas dataframe of student scores, a minimum score, and a maximum score, and returns the number of students who scored within the specified range.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing student scores in stem and leaf format.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    min_score (int): The minimum score (inclusive) for the range.
    max_score (int): The maximum score (exclusive) for the range.
    Returns:
    int: The number of students who scored within the specified range.
    """"""
    # prepare a list to store scores
    scores = []
    # calculate the score for each student
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            scores.append(stem * 10 + leaf[j])
    # filter the scores within the specified range
    filtered = [score for score in scores if min_score <= score < max_score]
    # count the number of students
    num_students = len(filtered)
    return num_students","We should first create a pandas dataframe with the data from the table. Note that some elements are empty, so we need to fill them with empty lists. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],
    'Leaf': [[1, 7, 7, 7], [3, 4, 6, 7, 9], [1, 2, 3, 6], [1, 8], [4, 8], [0, 7, 7], [], [8, 8], [0]]
})
# Call the tool to solve the problem
count_students_in_range(df, 40, 90)
```","def count_items_in_range_from_stem_leaf(data_frame, stem_col, leaf_col, min_value, max_value):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of items and a range of values, and returns the number of items that have values within the specified range.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    min_value (int): The minimum value (inclusive) for the range.
    max_value (int): The maximum value (exclusive) for the range.
    
    Returns:
    int: The number of items with values within the specified range.
    """"""
    # Initialize the list to calculate items in each group
    items = []
    
    # Calculate the total value of items in each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Filter the items where the total value is within the specified range
    filtered = [item for item in items if min_value <= item < max_value]
    
    # Count the number of items
    num_items = len(filtered)
    
    return num_items","data = {
    ""Stem"": [1, 2, 3, 4, 5, 6, 7, 8, 9],
    ""Leaf"": [[1, 7, 7, 7], [3, 4, 6, 7, 9], [1, 2, 3, 6], [1, 8], [4, 8], [0, 7, 7], [], [8, 8], [0]]
}

df = pd.DataFrame(data)
print(count_items_in_range_from_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf"", min_value=40, max_value=90))"
"As part of a stuffed animal drive for the local children's hospital, the students at Wells Elementary School record how many stuffed animals they have collected. How many students have fewer than 2 stuffed animals?",12,"Number of stuffed animals | Frequency
0 | 7
1 | 5
2 | 4
3 | 11
4 | 10
5 | 0",7,5705,"import pandas as pd

def count_students_with_fewer_than_2_stuffed_animals(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of the number of stuffed animals collected by students, and returns the number of students who have collected fewer than 2 stuffed animals.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of stuffed animals and their frequencies with columns 'Number of stuffed animals' and 'Frequency'.
    Returns:
    int: The number of students who have collected fewer than 2 stuffed animals.
    """"""
    # Filter the DataFrame for the rows where the number of stuffed animals is less than 2
    filtered_df = df[df['Number of stuffed animals'] < 2]
    
    # Sum the frequencies of these rows to get the total number of students
    num_students = filtered_df['Frequency'].sum()
    
    return num_students","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of stuffed animals': [0, 1, 2, 3, 4, 5],
    'Frequency': [7, 5, 4, 11, 10, 0]
})
# Call the tool to solve the problem
count_students_with_fewer_than_2_stuffed_animals(df)
```","def count_occurrences_below_threshold_in_frequency_table(data_frame, item_col, frequency_col, item_threshold):
    """"""
    This function takes in a pandas DataFrame representing a frequency table and a threshold value, and returns the total number of occurrences where the item count is less than the threshold.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the frequency table with columns specified by item_col and frequency_col.
    item_col (str): The column name for the item counts.
    frequency_col (str): The column name for the frequencies.
    item_threshold (int): The threshold value for filtering item counts.
    
    Returns:
    int: The total number of occurrences where the item count is less than the threshold.
    """"""
    # Filter the DataFrame for the rows where the item count is less than the threshold
    filtered_df = data_frame[data_frame[item_col] < item_threshold]
    
    # Sum the frequencies of these rows to get the total number of occurrences
    num_occurrences = filtered_df[frequency_col].sum()
    
    return num_occurrences","df = pd.DataFrame({
    'Number of stuffed animals': [0, 1, 2, 3, 4, 5],
    'Frequency': [7, 5, 4, 11, 10, 0]
})
print(count_occurrences_below_threshold_in_frequency_table(data_frame=df, item_col='Number of stuffed animals', frequency_col='Frequency', item_threshold=2))"
"Nolan is selling candy bars to raise money for his baseball team. The frequency chart shows the types of candy bars he has already sold. Nolan sold half of the chocolate raspberry bars and all of the white chocolate bars to his history teacher, Ms. Gomez. How many candy bars did she buy?",19,"Type | Frequency
dark chocolate | 25
chocolate raspberry | 22
chocolate caramel | 15
white chocolate | 8",5,13492,"import pandas as pd

def calculate_candy_bars_sold(df, sold_dict):
    """"""
    This function takes in a pandas DataFrame representing a frequency chart of candy bars and a dictionary of sold candy bars, and returns the total number of candy bars sold.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing types of candy bars and their frequencies with columns 'Type' and 'Frequency'.
    sold_dict (dict): A dictionary where the keys are candy bar types and the values are the proportion of each type sold.
    Returns:
    int: The total number of candy bars sold.
    """"""
    # Initialize the total number of candy bars sold
    total_sold = 0
    
    # Iterate through the candy bar types and calculate the number sold for each type
    for type, proportion in sold_dict.items():
        # Filter the DataFrame for the specific type
        type_df = df[df['Type'] == type]
        if not type_df.empty:
            type_frequency = type_df['Frequency'].values[0]
            total_sold += proportion * type_frequency
    
    return total_sold","We should first create a pandas dataframe with the data from the table. Then we create a dictionary with the proportion of each type of candy bars sold to Ms. Gomez. Finally, we call the tool to solve the problem and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Type': ['dark chocolate', 'chocolate raspberry', 'chocolate caramel', 'white chocolate'],
    'Frequency': [25, 22, 15, 8]
})

# Create a dictionary with the proportion of each type of candy bars sold to Ms. Gomez
sold_dict = {'chocolate raspberry': 0.5, 'white chocolate': 1}

# Call the tool to solve the problem
candy_bars_sold = calculate_candy_bars_sold(df, sold_dict)
print(candy_bars_sold)
```","def calculate_total_items_sold_from_frequency_and_proportions(frequency_df, item_col, frequency_col, sold_proportions):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of items and a dictionary of proportions of each item sold, and returns the total number of items sold.
    
    Args:
    frequency_df (pd.DataFrame): A pandas DataFrame containing item types and their frequencies.
    item_col (str): The column name for the item types.
    frequency_col (str): The column name for the item frequencies.
    sold_proportions (dict): A dictionary where the keys are item types and the values are the proportions of each type sold.
    
    Returns:
    int: The total number of items sold.
    """"""
    # Initialize the total number of items sold
    total_sold = 0
    
    # Iterate through the item types and calculate the number sold for each type
    for item_type, proportion in sold_proportions.items():
        # Filter the DataFrame for the specific item type
        item_df = frequency_df[frequency_df[item_col] == item_type]
        if not item_df.empty:
            item_frequency = item_df[frequency_col].values[0]
            total_sold += proportion * item_frequency
    
    return total_sold","frequency_data = {
    'Type': ['dark chocolate', 'chocolate raspberry', 'chocolate caramel', 'white chocolate'],
    'Frequency': [25, 22, 15, 8]
}

frequency_df = pd.DataFrame(frequency_data)

sold_proportions = {'chocolate raspberry': 0.5, 'white chocolate': 1}
print(calculate_total_items_sold_from_frequency_and_proportions(frequency_df, ""Type"", ""Frequency"", sold_proportions))"
Jack counted the number of cookies eaten by each customer at last week's bake sale. How many customers ate at least 2 cookies last week?,35,"Cookies eaten | Frequency
1 | 14
2 | 8
3 | 10
4 | 11
5 | 6",7,7396,"import pandas as pd

def count_customers(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of cookies eaten by customers, and returns the number of customers who ate at least 2 cookies.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of cookies eaten and the frequency with columns 'Cookies eaten' and 'Frequency'.
    Returns:
    int: The number of customers who ate at least 2 cookies.
    """"""
    # Filter the DataFrame for the customers who ate at least 2 cookies
    filtered_df = df[df['Cookies eaten'] >= 2]
    
    # Sum the frequency column to get the total number of customers
    total_customers = filtered_df['Frequency'].sum()
    
    return total_customers","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Cookies eaten': [1, 2, 3, 4, 5],
    'Frequency': [14, 8, 10, 11, 6]
})

# Call the tool to solve the problem
count_customers(df)
```","def count_entities_above_threshold_in_frequency_table(data_frame, entity_col, frequency_col, threshold):
    """"""
    This function takes in a pandas DataFrame representing a frequency table and a threshold value, and returns the number of entities that have values greater than or equal to the threshold.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the frequency table with columns specified by entity_col and frequency_col.
    entity_col (str): The column name for the entity values.
    frequency_col (str): The column name for the frequency values.
    threshold (int): The threshold value for filtering entities.
    
    Returns:
    int: The number of entities with values greater than or equal to the threshold.
    """"""
    # Filter the DataFrame for the entities that meet or exceed the threshold
    filtered_df = data_frame[data_frame[entity_col] >= threshold]
    
    # Sum the frequency column to get the total number of entities
    total_entities = filtered_df[frequency_col].sum()
    
    return total_entities","df = pd.DataFrame({
    'Cookies eaten': [1, 2, 3, 4, 5],
    'Frequency': [14, 8, 10, 11, 6]
})

print(count_entities_above_threshold_in_frequency_table(data_frame=df, entity_col='Cookies eaten', frequency_col='Frequency', threshold=2))"
The parents running this year's craft sale counted the number of key chains made by volunteers. How many people made fewer than 3 key chains?,26,"Key chains made | Frequency
1 | 7
2 | 19
3 | 16
4 | 18
5 | 2
6 | 9",7,331,"import pandas as pd

def count_people_made_fewer_than_3_key_chains(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of key chains made by volunteers, and returns the number of people who made fewer than 3 key chains.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of key chains made and their frequencies with columns 'Key chains made' and 'Frequency'.
    Returns:
    int: The number of people who made fewer than 3 key chains.
    """"""
    # Filter the DataFrame for the rows where the number of key chains made is less than 3
    filtered_df = df[df['Key chains made'] < 3]
    
    # Sum the frequencies of these rows to get the total number of people who made fewer than 3 key chains
    num_people = filtered_df['Frequency'].sum()
    
    return num_people","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Key chains made': [1, 2, 3, 4, 5, 6],
    'Frequency': [7, 19, 16, 18, 2, 9]
})
# Call the tool to solve the problem
count_people_made_fewer_than_3_key_chains(df)
```","def count_frequency_below_threshold(data_frame, item_col, frequency_col, item_threshold):
    """"""
    This function takes in a pandas DataFrame representing a frequency table and a threshold value, and returns the total frequency of items with values less than the threshold.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the frequency table with columns specified by item_col and frequency_col.
    item_col (str): The column name for the item values.
    frequency_col (str): The column name for the frequencies.
    item_threshold (int): The threshold value for filtering items.
    
    Returns:
    int: The total frequency of items with values less than the threshold.
    """"""
    # Filter the DataFrame for the rows where the item value is less than the threshold
    filtered_df = data_frame[data_frame[item_col] < item_threshold]
    
    # Sum the frequencies of these rows to get the total frequency
    total_frequency = filtered_df[frequency_col].sum()
    
    return total_frequency","df = pd.DataFrame({
    'Key chains made': [1, 2, 3, 4, 5, 6],
    'Frequency': [7, 19, 16, 18, 2, 9]
})
print(count_frequency_below_threshold(data_frame=df, item_col='Key chains made', frequency_col='Frequency', item_threshold=3))"
A business magazine surveyed its readers about their commute times. How many commutes are exactly 50 minutes?,1,"Stem | Leaf 
1 | 5, 9
2 | 
3 | 2
4 | 
5 | 0
6 | 0, 4, 7, 8
7 | 
8 | 
9 | 0",4,2494,"import pandas as pd
def count_commutes_of_50_minutes(df):
    """"""
    This function takes in a pandas dataframe of commute times, and returns the number of commutes that are exactly 50 minutes.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the commute times.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of commutes that are exactly 50 minutes.
    """"""
    # prepare a list to calculate commute times
    commute_times = []
    # calculate the total commute time in each row
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            commute_times.append(stem * 10 + leaf[j])
    # filter the commutes where the total commute time is exactly 50 minutes
    filtered = [time for time in commute_times if time == 50]
    # count the number of rows
    num_commutes = len(filtered)
    return num_commutes","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],
    'Leaf': [[5, 9], [], [2], [], [0], [0, 4, 7, 8], [], [], [0]]
})
# Call the tool to solve the problem
count_commutes_of_50_minutes(df)
```","def count_items_with_specific_value_in_stem_leaf(data_frame, stem_col, leaf_col, specific_value):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of items and a specific value, and returns the number of items that have values equal to the specific value.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    specific_value (int): The specific value for filtering items.
    
    Returns:
    int: The number of items with values equal to the specific value.
    """"""
    # Initialize the list to calculate items in each group
    items = []
    
    # Calculate the total value of items in each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Filter the items where the total value is equal to the specific value
    filtered = [item for item in items if item == specific_value]
    
    # Count the number of items
    num_items = len(filtered)
    
    return num_items","data = {
    ""Stem"": [1, 2, 3, 4, 5, 6, 7, 8, 9],
    ""Leaf"": [[5, 9], [], [2], [], [0], [0, 4, 7, 8], [], [], [0]]
}

df = pd.DataFrame(data)
print(count_items_with_specific_value_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf"", specific_value=50))"
Each branch has 10 apples. How many apples are on 3 branches?,30,"Number of branches | Number of apples
1 | 10
2 | 20
3 | ?",1,5198,"def calculate_apples_on_branches(df, target_branches):
    """"""
    This function takes in a pandas DataFrame representing a table of branches and apples, and calculates the number of apples on the target number of branches.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of branches and the corresponding number of apples with columns 'Number of branches' and 'Number of apples'.
    target_branches (int): The target number of branches to calculate the number of apples for.
    Returns:
    int: The number of apples on the target number of branches.
    """"""
    # Calculate the number of apples per branch
    apples_per_branch = df['Number of apples'][0] / df['Number of branches'][0]
    
    # Calculate the number of apples on the target number of branches
    apples_on_target_branches = target_branches * apples_per_branch
    
    return int(apples_on_target_branches)","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of branches': [1, 2],
    'Number of apples': [10, 20]
})

# Call the tool to solve the problem
apples_on_3_branches = calculate_apples_on_branches(df, 3)
print(apples_on_3_branches)
```","def calculate_items_on_target_groups(data_frame, group_col, item_col, target_groups):
    """"""
    This function takes in a pandas DataFrame representing a table of groups and items, and calculates the number of items on the target number of groups.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the number of groups and the corresponding number of items with columns specified by group_col and item_col.
    group_col (str): The column name for the group values.
    item_col (str): The column name for the item values.
    target_groups (int): The target number of groups to calculate the number of items for.
    
    Returns:
    int: The number of items on the target number of groups.
    """"""
    # Calculate the number of items per group
    items_per_group = data_frame[item_col][0] / data_frame[group_col][0]
    
    # Calculate the number of items on the target number of groups
    items_on_target_groups = target_groups * items_per_group
    
    return int(items_on_target_groups)","data = {
    'Number of branches': [1, 2],
    'Number of apples': [10, 20]
}

df = pd.DataFrame(data)
print(calculate_items_on_target_groups(data_frame=df, group_col=""Number of branches"", item_col=""Number of apples"", target_groups=3))"
Each bin has 2 blue blocks. How many blue blocks are in 3 bins?,6,"Number of bins | Number of blue blocks
1 | 2
2 | 4
3 | ?",2,14292,"def calculate_blue_blocks(df, num_bins):
    """"""
    This function takes in a pandas DataFrame representing a table of the number of bins and the corresponding number of blue blocks, and a number of bins, and returns the number of blue blocks in the given number of bins.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of bins and the corresponding number of blue blocks with columns 'Number of bins' and 'Number of blue blocks'.
    num_bins (int): The number of bins.
    Returns:
    int: The number of blue blocks in the given number of bins.
    """"""
    # Calculate the number of blue blocks per bin
    blocks_per_bin = df['Number of blue blocks'][0] / df['Number of bins'][0]
    
    # Calculate the number of blue blocks in the given number of bins
    num_blocks = blocks_per_bin * num_bins
    
    return int(num_blocks)","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of bins': [1, 2],
    'Number of blue blocks': [2, 4]
})

# Call the tool to solve the problem
num_blocks = calculate_blue_blocks(df, 3)
print(num_blocks)
```","def calculate_total_items_from_group_counts(data_frame, group_col, item_col, num_groups):
    """"""
    This function takes in a pandas DataFrame representing a table of item counts per group, a column name for the groups, a column name for the items, and a number of groups, and returns the total number of items in the given number of groups.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the number of groups and the corresponding number of items.
    group_col (str): The column name for the groups.
    item_col (str): The column name for the items.
    num_groups (int): The number of groups.
    
    Returns:
    int: The total number of items in the given number of groups.
    """"""
    # Calculate the number of items per group
    items_per_group = data_frame[item_col][0] / data_frame[group_col][0]
    
    # Calculate the number of items in the given number of groups
    num_items = items_per_group * num_groups
    
    return int(num_items)","data_frame = pd.DataFrame({
    'Number of bins': [1, 2],
    'Number of blue blocks': [2, 4]
})

print(calculate_total_items_from_group_counts(data_frame, 'Number of bins', 'Number of blue blocks', 3))"
"While hanging Christmas lights for neighbors, Darnell counted the number of broken lights on each string. What is the smallest number of broken lights?",10,"Stem | Leaf 
1 | 0, 0, 3, 6
2 | 2, 7, 8, 8
3 | 0, 9, 9
4 | 5, 7, 9
5 | 0, 1, 5, 7, 9
6 | 0, 4, 9
7 | 
8 | 8, 8
9 | 0",8,15069,"import pandas as pd

def find_smallest_number(df):
    """"""
    This function takes in a pandas dataframe of broken lights per string, and returns the smallest number of broken lights.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken lights per string.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The smallest number of broken lights.
    """"""
    # prepare a list to calculate broken lights in each string
    broken_lights = []
    # calculate the total number of broken lights in each string
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            broken_lights.append(stem * 10 + leaf[j])
    # find the smallest number of broken lights
    smallest_number = min(broken_lights)
    return smallest_number","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],
    'Leaf': [[0, 0, 3, 6], [2, 7, 8, 8], [0, 9, 9], [5, 7, 9], [0, 1, 5, 7, 9], [0, 4, 9], [], [8, 8], [0]]
})
# Call the tool to solve the problem
find_smallest_number(df)
```","def find_smallest_number_in_stem_leaf(data_frame, stem_col, leaf_col):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of items and returns the smallest number in the plot.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    
    Returns:
    int: The smallest number in the stem-and-leaf plot.
    """"""
    # Initialize the list to calculate items in each group
    items = []
    
    # Calculate the total value of items in each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Find the smallest number in the items
    smallest_number = min(items)
    
    return smallest_number","data = {
    ""Stem"": [1, 2, 3, 4, 5, 6, 7, 8, 9],
    ""Leaf"": [[0, 0, 3, 6], [2, 7, 8, 8], [0, 9, 9], [5, 7, 9], [0, 1, 5, 7, 9], [0, 4, 9], [], [8, 8], [0]]
}

df = pd.DataFrame(data)
print(find_smallest_number_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf""))"
A stock broker followed the stock prices of a certain set of companies. How much did Watson and Partners's stock cost on Thursday?,4,"Company | Wednesday | Thursday
Watson and Partners | $1 | $4
Thompson Corporation | $12 | $3
Computer Data Company | $15 | $20",5,6861,"import pandas as pd

def get_stock_price(df, company, day):
    """"""
    This function takes in a pandas DataFrame representing a stock price table, a company name, and a day, and returns the stock price of the company on the given day.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing stock prices with columns 'Company', 'Wednesday', 'Thursday', etc.
    company (str): The name of the company.
    day (str): The day of the week.
    Returns:
    float: The stock price of the company on the given day.
    """"""
    # Filter the DataFrame for the specific company
    company_df = df[df['Company'] == company]
    if not company_df.empty:
        # Get the stock price on the given day
        stock_price = company_df[day].values[0]
        return stock_price
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Company': ['Watson and Partners', 'Thompson Corporation', 'Computer Data Company'],
    'Wednesday': [1, 12, 15],
    'Thursday': [4, 3, 20]
})
# Call the tool to solve the problem
print(get_stock_price(df, 'Watson and Partners', 'Thursday'))
```","def get_cell_value_by_row_and_column_criteria(data_frame, row_col, col_name, row_value, col_value):
    """"""
    This function takes in a pandas DataFrame, row and column criteria, and returns the value of the cell that matches the criteria.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing data with columns specified by row_col and col_name.
    row_col (str): The column name for the row criteria.
    col_name (str): The column name for the column criteria.
    row_value (str): The value of the row criteria.
    col_value (str): The value of the column criteria.
    
    Returns:
    float: The value of the cell that matches the row and column criteria.
    """"""
    # Filter the DataFrame for the specific row criteria
    row_filtered_df = data_frame[data_frame[row_col] == row_value]
    if not row_filtered_df.empty:
        # Get the cell value based on the column criteria
        cell_value = row_filtered_df[col_value].values[0]
        return cell_value
    else:
        return None","data = {
    'Company': ['Watson and Partners', 'Thompson Corporation', 'Computer Data Company'],
    'Wednesday': [1, 12, 15],
    'Thursday': [4, 3, 20]
}

df = pd.DataFrame(data)
print(get_cell_value_by_row_and_column_criteria(data_frame=df, row_col=""Company"", col_name=""Thursday"", row_value=""Watson and Partners"", col_value=""Thursday""))"
"While planning a class party, the students voted for their favorite cookies. How many more girls voted for chocolate chip than sugar?",8,"Cookie | Boys | Girls
Chocolate chip | 7 | 10
Cinnamon | 12 | 20
Sugar | 13 | 2
Oatmeal | 12 | 18
Lemon | 20 | 12",4,10395,"import pandas as pd

def calculate_cookie_difference(df, cookie1, cookie2, gender):
    """"""
    This function takes in a pandas DataFrame representing a cookie voting table, and calculates the difference in votes between two cookies for a specific gender.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing cookie voting data with columns 'Cookie', 'Boys', and 'Girls'.
    cookie1 (str): The name of the first cookie.
    cookie2 (str): The name of the second cookie.
    gender (str): The gender for which the difference in votes should be calculated ('Boys' or 'Girls').
    Returns:
    int: The difference in votes between the two cookies for the specified gender.
    """"""
    # Filter the DataFrame for the specific cookies
    cookie1_df = df[df['Cookie'] == cookie1]
    cookie2_df = df[df['Cookie'] == cookie2]
    
    # Get the number of votes for each cookie for the specified gender
    cookie1_votes = cookie1_df[gender].values[0]
    cookie2_votes = cookie2_df[gender].values[0]
    
    # Calculate the difference in votes
    vote_difference = abs(cookie1_votes - cookie2_votes)
    
    return vote_difference","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Cookie': ['Chocolate chip', 'Cinnamon', 'Sugar', 'Oatmeal', 'Lemon'],
    'Boys': [7, 12, 13, 12, 20],
    'Girls': [10, 20, 2, 18, 12]
})

# Call the tool to solve the problem
difference = calculate_cookie_difference(df, 'Chocolate chip', 'Sugar', 'Girls')
print(difference)
```","def calculate_vote_difference_between_two_items_for_group(votes_df, item_col, group_col, item1, item2):
    """"""
    This function takes in a pandas DataFrame representing a voting table, and calculates the difference in votes between two items for a specific group.
    
    Args:
    votes_df (pd.DataFrame): A pandas DataFrame containing voting data with columns specified by item_col and group_col.
    item_col (str): The column name for the item names.
    group_col (str): The column name for the group names.
    item1 (str): The name of the first item.
    item2 (str): The name of the second item.
    
    Returns:
    int: The difference in votes between the two items for the specified group.
    """"""
    # Filter the DataFrame for the specific items
    item1_df = votes_df[votes_df[item_col] == item1]
    item2_df = votes_df[votes_df[item_col] == item2]
    
    # Get the number of votes for each item for the specified group
    item1_votes = item1_df[group_col].values[0]
    item2_votes = item2_df[group_col].values[0]
    
    # Calculate the difference in votes
    vote_difference = abs(item1_votes - item2_votes)
    
    return vote_difference","votes_data = {
    'Cookie': ['Chocolate chip', 'Cinnamon', 'Sugar', 'Oatmeal', 'Lemon'],
    'Boys': [7, 12, 13, 12, 20],
    'Girls': [10, 20, 2, 18, 12]
}

votes_df = pd.DataFrame(votes_data)

print(calculate_vote_difference_between_two_items_for_group(votes_df, ""Cookie"", ""Girls"", ""Chocolate chip"", ""Sugar""))"
"On the first day of music class, students submitted a survey. One survey question asked students to report which music genre they prefer. Another question asked students how frequently they sing in the shower. What is the probability that a randomly selected student sings in the shower 1-2 times a week and prefers rock? Simplify any fractions.",0.125," | Country | Rock
0 times a week | 2 | 6
1-2 times a week | 6 | 2",8,11002,"import pandas as pd

def calculate_probability(df, shower_frequency, music_genre):
    """"""
    This function takes in a pandas DataFrame representing a survey table, a shower frequency, and a music genre, and returns the probability that a randomly selected student sings in the shower with the given frequency and prefers the given music genre.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing survey results with columns 'Shower Frequency', 'Country', 'Rock'.
    shower_frequency (str): A string representing the shower frequency.
    music_genre (str): A string representing the music genre.
    Returns:
    float: The probability that a randomly selected student sings in the shower with the given frequency and prefers the given music genre.
    """"""
    # Calculate the total number of students
    total_students = df['Country'].sum() + df['Rock'].sum()
    
    # Filter the DataFrame for the specific shower frequency
    frequency_df = df[df['Shower Frequency'] == shower_frequency]
    
    # Get the number of students who sing in the shower with the given frequency and prefer the given music genre
    genre_students = frequency_df[music_genre].values[0]
    
    # Calculate the probability
    probability = genre_students / total_students
    
    return probability","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Shower Frequency': ['0 times a week', '1-2 times a week'],
    'Country': [2, 6],
    'Rock': [6, 2]
})

# Call the tool to solve the problem
probability = calculate_probability(df, '1-2 times a week', 'Rock')
print(probability)
```","def calculate_probability_of_event(frequency_df, frequency_col, event_cols, event_frequency, event_name):
    """"""
    This function takes in a pandas DataFrame representing a frequency table, a frequency column, event columns, an event frequency, and an event name, and returns the probability of the event.
    
    Args:
    frequency_df (pd.DataFrame): A pandas DataFrame containing frequencies with columns specified by frequency_col and event_cols.
    frequency_col (str): The column name for the frequencies.
    event_cols (list): A list of column names for the events.
    event_frequency (str): The frequency of the event.
    event_name (str): The name of the event.
    
    Returns:
    float: The probability of the event.
    """"""
    # Calculate the total number of events
    total_events = sum([frequency_df[event_col].sum() for event_col in event_cols])
    
    # Filter the DataFrame for the specific event frequency
    event_frequency_df = frequency_df[frequency_df[frequency_col] == event_frequency]
    
    # Get the number of events with the given frequency and name
    event_count = event_frequency_df[event_name].values[0]
    
    # Calculate the probability
    probability = event_count / total_events
    
    return probability","frequency_data = {
    'Shower Frequency': ['0 times a week', '1-2 times a week'],
    'Country': [2, 6],
    'Rock': [6, 2]
}

frequency_df = pd.DataFrame(frequency_data)

print(calculate_probability_of_event(frequency_df, 'Shower Frequency', ['Country', 'Rock'], '1-2 times a week', 'Rock'))"
"Mrs. Williamson told students how many rounds to expect in the spelling bee based on previous years. According to the table, what was the rate of change between 2018 and 2019?",3,"Year | Rounds
2015 | 9
2016 | 14
2017 | 6
2018 | 12
2019 | 15",7,12450,"import pandas as pd

def calculate_rate_of_change(df, year1, year2):
    """"""
    This function takes in a pandas DataFrame representing a table of years and rounds, and calculates the rate of change between two given years.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing years and rounds with columns 'Year' and 'Rounds'.
    year1 (int): The first year to compare.
    year2 (int): The second year to compare.
    Returns:
    float: The rate of change between the two years.
    """"""
    # Filter the DataFrame for the specific years
    year1_df = df[df['Year'] == year1]
    year2_df = df[df['Year'] == year2]
    
    if not year1_df.empty and not year2_df.empty:
        rounds1 = year1_df['Rounds'].values[0]
        rounds2 = year2_df['Rounds'].values[0]
        
        # Calculate the rate of change
        rate_of_change = rounds2 - rounds1
        return rate_of_change
    else:
        return None","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Year': [2015, 2016, 2017, 2018, 2019],
    'Rounds': [9, 14, 6, 12, 15]
})

# Call the tool to solve the problem
rate_of_change = calculate_rate_of_change(df, 2018, 2019)
print(rate_of_change)
```","def calculate_rate_of_change_between_two_attributes(df, attribute_col, value_col, attribute1, attribute2):
    """"""
    This function takes in a pandas DataFrame representing a table of attributes and values, and calculates the rate of change between the values of two given attributes.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing attributes and values.
    attribute_col (str): The column name for the attributes.
    value_col (str): The column name for the values.
    attribute1 (int or str): The first attribute to compare.
    attribute2 (int or str): The second attribute to compare.
    
    Returns:
    float: The rate of change between the values of the two attributes, or None if either attribute is not found in the DataFrame.
    """"""
    # Filter the DataFrame for the specific attributes
    attribute1_df = df[df[attribute_col] == attribute1]
    attribute2_df = df[df[attribute_col] == attribute2]
    
    if not attribute1_df.empty and not attribute2_df.empty:
        value1 = attribute1_df[value_col].values[0]
        value2 = attribute2_df[value_col].values[0]
        
        # Calculate the rate of change
        rate_of_change = value2 - value1
        return rate_of_change
    else:
        return None","df = pd.DataFrame({
    'Year': [2015, 2016, 2017, 2018, 2019],
    'Rounds': [9, 14, 6, 12, 15]
})

print(calculate_rate_of_change_between_two_attributes(df, 'Year', 'Rounds', 2018, 2019))"
Each plate has 10 bagels. How many bagels are on 6 plates?,60,"Number of plates | Number of bagels
1 | 10
2 | 20
3 | 30
4 | 40
5 | 50
6 | ?",1,14144,"def calculate_bagels(plates):
    """"""
    This function takes in the number of plates and returns the number of bagels based on the given ratio.
    Args:
    plates (int): The number of plates.
    Returns:
    int: The number of bagels.
    """"""
    # The ratio of plates to bagels is 1:10
    bagels = plates * 10
    return bagels","```python
# Call the tool to solve the problem
calculate_bagels(6)
```","def calculate_items_from_ratio(groups, ratio):
    """"""
    This function takes in the number of groups and a ratio, and returns the total number of items based on the given ratio.
    
    Args:
    groups (int): The number of groups.
    ratio (int): The ratio of items per group.
    
    Returns:
    int: The total number of items.
    """"""
    # Calculate the total number of items based on the ratio
    items = groups * ratio
    return items","print(calculate_items_from_ratio(groups=6, ratio=10))"
Trent counted the number of pieces of pepperoni on each pizza he made. What is the largest number of pieces of pepperoni?,49,"Stem | Leaf 
1 | 2, 4, 5, 7, 7
2 | 1, 7
3 | 3, 8
4 | 0, 2, 2, 2, 3, 3, 4, 7, 9",7,6086,"import pandas as pd

def find_max_pepperoni(df):
    """"""
    This function takes in a pandas dataframe of pepperoni per pizza, and returns the maximum number of pepperoni on a pizza.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of pepperoni per pizza.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The maximum number of pepperoni on a pizza.
    """"""
    # prepare a list to calculate pepperoni on each pizza
    pepperoni = []
    # calculate the total number of pepperoni on each pizza
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            pepperoni.append(stem * 10 + leaf[j])
    # find the maximum number of pepperoni
    max_pepperoni = max(pepperoni)
    return max_pepperoni","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [1, 2, 3, 4],
    'Leaf': [[2, 4, 5, 7, 7], [1, 7], [3, 8], [0, 2, 2, 2, 3, 3, 4, 7, 9]]
})
# Call the tool to solve the problem
print(find_max_pepperoni(df))
```","def find_max_value_in_stem_leaf(data_frame, stem_col, leaf_col):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of items, and returns the maximum value among the items.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    
    Returns:
    int: The maximum value among the items.
    """"""
    # Initialize the list to calculate items
    items = []
    
    # Calculate the total value of items
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Find the maximum value among the items
    max_value = max(items)
    
    return max_value","data = {
    ""Stem"": [1, 2, 3, 4],
    ""Leaf"": [[2, 4, 5, 7, 7], [1, 7], [3, 8], [0, 2, 2, 2, 3, 3, 4, 7, 9]]
}

df = pd.DataFrame(data)
print(find_max_value_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf""))"
A researcher working for a cereal company surveyed people about their cereal consumption habits. How many people ate cereal more than 2 times?,11,"Times eaten | Frequency
0 | 11
1 | 18
2 | 13
3 | 1
4 | 10",7,11267,"import pandas as pd

def count_people_eating_cereal_more_than_2_times(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of cereal consumption habits, and returns the number of people who ate cereal more than 2 times.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the times eaten and their frequencies with columns 'Times eaten' and 'Frequency'.
    Returns:
    int: The number of people who ate cereal more than 2 times.
    """"""
    # Filter the DataFrame for the times eaten more than 2
    filtered_df = df[df['Times eaten'] > 2]
    
    # Sum up the frequencies
    total_people = filtered_df['Frequency'].sum()
    
    return total_people","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Times eaten': [0, 1, 2, 3, 4],
    'Frequency': [11, 18, 13, 1, 10]
})
# Call the tool to solve the problem
count_people_eating_cereal_more_than_2_times(df)
```","def count_items_with_condition_in_frequency_table(data_frame, value_col, frequency_col, condition_func):
    """"""
    This function takes in a pandas DataFrame representing a frequency table, a value column, a frequency column, and a condition function, and returns the number of items that meet the condition based on the frequencies.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the value column and the frequency column.
    value_col (str): The column name for the values.
    frequency_col (str): The column name for the frequencies.
    condition_func (function): A function that takes a value and returns a boolean indicating whether the condition is met.
    
    Returns:
    int: The number of items that meet the condition based on the frequencies.
    """"""
    # Filter the DataFrame for the values that meet the condition
    filtered_df = data_frame[data_frame[value_col].apply(condition_func)]
    
    # Sum up the frequencies
    total_items = filtered_df[frequency_col].sum()
    
    return total_items","data = {
    'Times eaten': [0, 1, 2, 3, 4],
    'Frequency': [11, 18, 13, 1, 10]
}

df = pd.DataFrame(data)

# Define the condition function
def more_than_2_times(value):
    return value > 2

print(count_items_with_condition_in_frequency_table(data_frame=df, value_col=""Times eaten"", frequency_col=""Frequency"", condition_func=more_than_2_times))"
Reagan's basketball team ordered new jerseys. She recorded the sizes they needed in a frequency chart. How many jerseys did they order?,14,"Size | Frequency
small | 4
medium | 7
large | 3",5,11005,"import pandas as pd

def calculate_total_jerseys(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency chart of jersey sizes, and returns the total number of jerseys ordered.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing jersey sizes and their frequencies with columns 'Size' and 'Frequency'.
    Returns:
    int: The total number of jerseys ordered.
    """"""
    # Sum up the frequencies to get the total number of jerseys
    total_jerseys = df['Frequency'].sum()
    
    return total_jerseys","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Size': ['small', 'medium', 'large'],
    'Frequency': [4, 7, 3]
})

# Call the tool to solve the problem
total_jerseys = calculate_total_jerseys(df)

# Print the answer
print(total_jerseys)","def calculate_total_count_from_frequency_table(data_frame, item_col, frequency_col):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of items, and returns the total count of items based on the frequencies.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing item names and their frequencies.
    item_col (str): The column name for the item names.
    frequency_col (str): The column name for the item frequencies.
    
    Returns:
    int: The total count of items.
    """"""
    # Sum up the frequencies to get the total count of items
    total_count = data_frame[frequency_col].sum()
    
    return total_count","data = {
    'Size': ['small', 'medium', 'large'],
    'Frequency': [4, 7, 3]
}

df = pd.DataFrame(data)
print(calculate_total_count_from_frequency_table(data_frame=df, item_col=""Size"", frequency_col=""Frequency""))"
Hillsdale Elementary School polled its students about their favorite vegetables in order to decide which ones to plant in the new school garden. How many students voted for broccoli?,6,"Vegetable | Upper elementary students | Lower elementary students
Broccoli | 1 | 5
Spinach | 17 | 2
Peas | 19 | 7",4,1562,"import pandas as pd

def count_votes_for_vegetable(df, vegetable):
    """"""
    This function takes in a pandas DataFrame representing a poll table and a string of vegetable name, and returns the total votes for the vegetable.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing vegetables and votes from upper and lower elementary students with columns 'Vegetable', 'Upper elementary students', and 'Lower elementary students'.
    vegetable (str): A string of the vegetable name.
    Returns:
    int: The total votes for the vegetable.
    """"""
    # Filter the DataFrame for the specific vegetable
    vegetable_df = df[df['Vegetable'] == vegetable]
    if not vegetable_df.empty:
        # Sum the votes from upper and lower elementary students
        total_votes = vegetable_df['Upper elementary students'].values[0] + vegetable_df['Lower elementary students'].values[0]
        return total_votes
    else:
        return 0","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Vegetable': ['Broccoli', 'Spinach', 'Peas'],
    'Upper elementary students': [1, 17, 19],
    'Lower elementary students': [5, 2, 7]
})
# Call the tool to solve the problem
votes_for_broccoli = count_votes_for_vegetable(df, 'Broccoli')
print(votes_for_broccoli)
```","def count_votes_for_item_from_groups(votes_df, item_col, group_cols, item_name):
    """"""
    This function takes in a pandas DataFrame representing a table of votes from different groups and a string of item name, and returns the total votes for the item.
    
    Args:
    votes_df (pd.DataFrame): A pandas DataFrame containing item names and votes from different groups.
    item_col (str): The column name for the item names.
    group_cols (list): A list of column names for the groups.
    item_name (str): A string of the item name.
    
    Returns:
    int: The total votes for the item.
    """"""
    # Filter the DataFrame for the specific item name
    item_votes_df = votes_df[votes_df[item_col] == item_name]
    if not item_votes_df.empty:
        # Sum the votes from all groups
        total_votes = sum(item_votes_df[group].values[0] for group in group_cols)
        return total_votes
    else:
        return 0","votes_data = {
    'Vegetable': ['Broccoli', 'Spinach', 'Peas'],
    'Upper elementary students': [1, 17, 19],
    'Lower elementary students': [5, 2, 7]
}

votes_df = pd.DataFrame(votes_data)

print(count_votes_for_item_from_groups(votes_df, ""Vegetable"", [""Upper elementary students"", ""Lower elementary students""], ""Broccoli""))"
Each laundry basket has 10 shirts. How many shirts are in 4 laundry baskets?,40,"Number of laundry baskets | Number of shirts
1 | 10
2 | 20
3 | 30
4 | ?",1,11697,"def calculate_shirts_in_baskets(basket_count):
    """"""
    This function takes in the number of laundry baskets and returns the number of shirts in those baskets.
    Args:
    basket_count (int): The number of laundry baskets.
    Returns:
    int: The number of shirts in the given number of laundry baskets.
    """"""
    # Each basket contains 10 shirts
    shirts_per_basket = 10
    # Calculate the total number of shirts
    total_shirts = basket_count * shirts_per_basket
    return total_shirts","We should first initialize the number of laundry baskets, then call the tool to solve the problem, and print out the answer.
```python
# Initialize the number of laundry baskets
basket_count = 4
# Call the tool to solve the problem
calculate_shirts_in_baskets(basket_count)
```","def calculate_total_items_in_groups(group_count, items_per_group):
    """"""
    This function takes in the number of groups and the number of items per group, and returns the total number of items.
    
    Args:
    group_count (int): The number of groups.
    items_per_group (int): The number of items in each group.
    
    Returns:
    int: The total number of items.
    """"""
    # Calculate the total number of items
    total_items = group_count * items_per_group
    return total_items","group_count = 4
items_per_group = 10
print(calculate_total_items_in_groups(group_count, items_per_group))"
A sports fan decided to examine the pattern of medals won by certain countries at several Olympic games. How many medals did Finland win in 2004?,2,"Country | 2004 | 2008
Finland | 2 | 4
Brazil | 10 | 15
Romania | 19 | 8",5,12077,"import pandas as pd

def get_medals_won(df, country, year):
    """"""
    This function takes in a pandas DataFrame representing a table of medals won by countries at several Olympic games, a country name, and a year, and returns the number of medals won by the specified country in the specified year.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing countries and the number of medals they won in different years. The DataFrame should have 'Country' as one of the columns and the rest of the columns should be years.
    country (str): The name of the country.
    year (str): The year.
    Returns:
    int: The number of medals won by the specified country in the specified year.
    """"""
    # Filter the DataFrame for the specific country
    country_df = df[df['Country'] == country]
    
    # If the country is found in the DataFrame, return the number of medals won in the specified year
    if not country_df.empty:
        return country_df[year].values[0]
    
    # If the country is not found in the DataFrame, return 0
    return 0","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Country': ['Finland', 'Brazil', 'Romania'],
    '2004': [2, 10, 19],
    '2008': [4, 15, 8]
})

# Call the tool to solve the problem
medals = get_medals_won(df, 'Finland', '2004')
print(medals)
```","def get_value_by_row_and_column_labels(df, row_label_col, row_label, col_label):
    """"""
    This function takes in a pandas DataFrame, a column name for row labels, a row label, and a column label, and returns the value in the cell specified by the row and column labels.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame.
    row_label_col (str): The column name for the row labels.
    row_label (str): The row label.
    col_label (str): The column label.
    
    Returns:
    object: The value in the cell specified by the row and column labels. If the row label is not found in the DataFrame, returns None.
    """"""
    # Filter the DataFrame for the specific row label
    row_df = df[df[row_label_col] == row_label]
    
    # If the row label is found in the DataFrame, return the value in the specified column
    if not row_df.empty:
        return row_df[col_label].values[0]
    
    # If the row label is not found in the DataFrame, return None
    return None","df = pd.DataFrame({
    'Country': ['Finland', 'Brazil', 'Romania'],
    '2004': [2, 10, 19],
    '2008': [4, 15, 8]
})

print(get_value_by_row_and_column_labels(df, 'Country', 'Finland', '2004'))"
Trisha baked cookies each day for a bake sale. How many more cookies did Trisha bake on Monday than on Tuesday?,134,"Day | Number of cookies
Saturday | 232
Sunday | 120
Monday | 269
Tuesday | 135",3,3241,"import pandas as pd

def calculate_cookie_difference(df, day1, day2):
    """"""
    This function takes in a pandas DataFrame representing a table of cookies baked per day and two days, and returns the difference in the number of cookies baked between the two days.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing days and the number of cookies baked with columns 'Day' and 'Number of cookies'.
    day1 (str): The first day to compare.
    day2 (str): The second day to compare.
    Returns:
    int: The difference in the number of cookies baked between the two days.
    """"""
    # Filter the DataFrame for the specific days
    day1_df = df[df['Day'] == day1]
    day2_df = df[df['Day'] == day2]
    
    # Get the number of cookies for each day
    day1_cookies = day1_df['Number of cookies'].values[0]
    day2_cookies = day2_df['Number of cookies'].values[0]
    
    # Calculate the difference in the number of cookies
    cookie_difference = day1_cookies - day2_cookies
    
    return cookie_difference","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday'],
    'Number of cookies': [232, 120, 269, 135]
})
# Call the tool to solve the problem
print(calculate_cookie_difference(df, 'Monday', 'Tuesday'))
```","def calculate_difference_between_two_categories(df, category_col, value_col, category1, category2):
    """"""
    This function takes in a pandas DataFrame representing a table of categories and values, and two categories, and returns the difference in values between the two categories.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing categories and their values.
    category_col (str): The column name for the categories.
    value_col (str): The column name for the values.
    category1 (str): The first category to compare.
    category2 (str): The second category to compare.
    
    Returns:
    int: The difference in values between the two categories.
    """"""
    # Filter the DataFrame for the specific categories
    category1_df = df[df[category_col] == category1]
    category2_df = df[df[category_col] == category2]
    
    # Get the value for each category
    category1_value = category1_df[value_col].values[0]
    category2_value = category2_df[value_col].values[0]
    
    # Calculate the difference in values
    value_difference = category1_value - category2_value
    
    return value_difference","df = pd.DataFrame({
    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday'],
    'Number of cookies': [232, 120, 269, 135]
})
print(calculate_difference_between_two_categories(df, 'Day', 'Number of cookies', 'Monday', 'Tuesday'))"
Hunter taught kids how to play the guitar last summer at the local community center. His job as a guitar instructor was his only source of income. Here are Hunter's finances for the summer. What was Hunter's net income last summer?,7622,"Earnings from job as a guitar instructor | $9,319
Income tax and other payroll taxes | $1,697",5,3998,"import pandas as pd

def calculate_net_income(finances_df):
    """"""
    This function takes in a pandas DataFrame representing a finances table and returns the net income.
    Args:
    finances_df (pd.DataFrame): A pandas DataFrame containing finance items and their amounts with columns 'Item' and 'Amount'.
    Returns:
    float: The net income.
    """"""
    # Initialize the net income
    net_income = 0.0
    
    # Iterate through the finance items and calculate the net income
    for index, row in finances_df.iterrows():
        if 'Earnings' in row['Item']:
            net_income += row['Amount']
        elif 'tax' in row['Item']:
            net_income -= row['Amount']
    
    return net_income","# Initialize the table into a dataframe
finances_df = pd.DataFrame({
    'Item': ['Earnings from job as a guitar instructor', 'Income tax and other payroll taxes'],
    'Amount': [9319, 1697]
})

# Call the tool to solve the problem
net_income = calculate_net_income(finances_df)

# Print the answer
print(net_income)","def calculate_net_amount_from_income_and_expenses(finances_df, item_col, amount_col, income_keywords, expense_keywords):
    """"""
    This function takes in a pandas DataFrame representing a table of income and expense items, and returns the net amount.
    
    Args:
    finances_df (pd.DataFrame): A pandas DataFrame containing finance items and their amounts.
    item_col (str): The column name for the finance items.
    amount_col (str): The column name for the amounts.
    income_keywords (list): A list of keywords to identify income items.
    expense_keywords (list): A list of keywords to identify expense items.
    
    Returns:
    float: The net amount.
    """"""
    # Initialize the net amount
    net_amount = 0.0
    
    # Iterate through the finance items and calculate the net amount
    for index, row in finances_df.iterrows():
        for keyword in income_keywords:
            if keyword in row[item_col]:
                net_amount += row[amount_col]
        for keyword in expense_keywords:
            if keyword in row[item_col]:
                net_amount -= row[amount_col]
    
    return net_amount","finances_data = {
    'Item': ['Earnings from job as a guitar instructor', 'Income tax and other payroll taxes'],
    'Amount': [9319, 1697]
}

finances_df = pd.DataFrame(finances_data)

income_keywords = ['Earnings']
expense_keywords = ['tax']
print(calculate_net_amount_from_income_and_expenses(finances_df, ""Item"", ""Amount"", income_keywords, expense_keywords))"
"At their family reunion, the Everett family recorded everyone's age. How many people are exactly 54 years old?",4,"Stem | Leaf 
3 | 2, 7
4 | 0, 8, 8
5 | 4, 4, 4, 4
6 | 1, 7
7 | 
8 | 
9 | 0, 0",6,11133,"import pandas as pd

def count_people_of_specific_age(df, age):
    """"""
    This function takes in a pandas dataframe of ages, and returns the number of people of a specific age.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the ages. The dataframe should contain ""Stem"" and ""Leaf"" columns.
    age (int): The specific age to count.
    Returns:
    int: The number of people of the specific age.
    """"""
    # Split the age into stem and leaf
    stem = age // 10
    leaf = age % 10
    
    # Filter the DataFrame for the specific stem
    stem_df = df[df['Stem'] == stem]
    if not stem_df.empty:
        # Count the number of occurrences of the leaf in the leaf list
        num_people = stem_df['Leaf'].apply(lambda x: x.count(leaf)).sum()
    else:
        num_people = 0
    
    return num_people","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [3, 4, 5, 6, 7, 8, 9],
    'Leaf': [[2, 7], [0, 8, 8], [4, 4, 4, 4], [1, 7], [], [], [0, 0]]
})

# Call the tool to solve the problem
print(count_people_of_specific_age(df, 54))","def count_specific_value_in_stem_leaf(data_frame, stem_col, leaf_col, specific_value):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot and a specific value, and returns the number of occurrences of the specific value in the stem-and-leaf plot.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    specific_value (int): The specific value to count.
    
    Returns:
    int: The number of occurrences of the specific value in the stem-and-leaf plot.
    """"""
    # Split the specific value into stem and leaf
    stem = specific_value // 10
    leaf = specific_value % 10
    
    # Filter the DataFrame for the specific stem
    stem_df = data_frame[data_frame[stem_col] == stem]
    if not stem_df.empty:
        # Count the number of occurrences of the leaf in the leaf list
        num_occurrences = stem_df[leaf_col].apply(lambda x: x.count(leaf)).sum()
    else:
        num_occurrences = 0
    
    return num_occurrences","df = pd.DataFrame({
    'Stem': [3, 4, 5, 6, 7, 8, 9],
    'Leaf': [[2, 7], [0, 8, 8], [4, 4, 4, 4], [1, 7], [], [], [0, 0]]
})

print(count_specific_value_in_stem_leaf(data_frame=df, stem_col='Stem', leaf_col='Leaf', specific_value=54))"
"Mr. Yu directs the band at Highdale High School. He is getting ready to order new instruments for next year. The frequency chart shows the instruments the school already has. Several of tubas and oboes are too old to repair, so Mr. Yu plans to replace them. He wants to replace one-third of the tubas and all of the oboes. How many instruments will Mr. Yu order?",6,"Type | Frequency
tuba | 6
bass drum | 5
french horn | 10
oboe | 4",5,13099,"import pandas as pd

def calculate_instruments_to_order(instruments_df):
    """"""
    This function takes in a pandas DataFrame representing a frequency chart of instruments and calculates the number of instruments to be ordered.
    Args:
    instruments_df (pd.DataFrame): A pandas DataFrame containing instrument types and their frequencies with columns 'Type' and 'Frequency'.
    Returns:
    int: The total number of instruments to be ordered.
    """"""
    # Initialize the total number of instruments to order
    total_instruments = 0
    
    # Calculate the number of tubas to order
    tubas_df = instruments_df[instruments_df['Type'] == 'tuba']
    if not tubas_df.empty:
        tubas_frequency = tubas_df['Frequency'].values[0]
        total_instruments += tubas_frequency // 3
    
    # Calculate the number of oboes to order
    oboes_df = instruments_df[instruments_df['Type'] == 'oboe']
    if not oboes_df.empty:
        oboes_frequency = oboes_df['Frequency'].values[0]
        total_instruments += oboes_frequency
    
    return total_instruments","# Initialize the table into a dataframe
instruments_df = pd.DataFrame({
    'Type': ['tuba', 'bass drum', 'french horn', 'oboe'],
    'Frequency': [6, 5, 10, 4]
})

# Call the tool to solve the problem
instruments_to_order = calculate_instruments_to_order(instruments_df)

# Print the answer
print(instruments_to_order)","def calculate_total_items_to_order_based_on_replacement_ratios(item_frequencies_df, item_col, frequency_col, item_replacement_ratios):
    """"""
    This function takes in a pandas DataFrame representing a table of item frequencies and a dictionary of item replacement ratios, and returns the total number of items to be ordered based on the frequencies and replacement ratios.
    
    Args:
    item_frequencies_df (pd.DataFrame): A pandas DataFrame containing item names and their frequencies.
    item_col (str): The column name for the item names.
    frequency_col (str): The column name for the item frequencies.
    item_replacement_ratios (dict): A dictionary where the keys are item names and the values are the replacement ratios for each item.
    
    Returns:
    int: The total number of items to be ordered.
    """"""
    # Initialize the total number of items to order
    total_items = 0
    
    # Iterate through the item names and calculate the number of items to be ordered based on replacement ratios
    for item_name, replacement_ratio in item_replacement_ratios.items():
        # Filter the DataFrame for the specific item name
        item_frequency_df = item_frequencies_df[item_frequencies_df[item_col] == item_name]
        if not item_frequency_df.empty:
            item_frequency = item_frequency_df[frequency_col].values[0]
            total_items += int(item_frequency * replacement_ratio)
    
    return total_items","item_frequencies_data = {
    'Type': ['tuba', 'bass drum', 'french horn', 'oboe'],
    'Frequency': [6, 5, 10, 4]
}

item_frequencies_df = pd.DataFrame(item_frequencies_data)

item_replacement_ratios = {""tuba"": 1/3, ""oboe"": 1}
print(calculate_total_items_to_order_based_on_replacement_ratios(item_frequencies_df, ""Type"", ""Frequency"", item_replacement_ratios))"
This is Ernest's complete financial record for January. How much money did Ernest get for shoveling snow for his mom?,20,"Date | Description | Received | Expenses | Available Funds
 | Balance: end of December | | | $102.60
1/3 | concert ticket | | $82.40 | $20.20
1/15 | shoveling snow for Mom | $20.00 | | $40.20
1/29 | movie rental | | $4.25 | $35.95",5,3597,"import pandas as pd

def find_received_amount(df, description):
    """"""
    This function takes in a pandas DataFrame representing a financial record and a description, and returns the received amount for the given description.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing financial records with columns 'Date', 'Description', 'Received', 'Expenses', and 'Available Funds'.
    description (str): A string representing the description of the transaction.
    Returns:
    float: The received amount for the given description.
    """"""
    # Filter the DataFrame for the specific description
    transaction_df = df[df['Description'] == description]
    
    # If the transaction exists, return the received amount
    if not transaction_df.empty:
        received_amount = transaction_df['Received'].values[0]
        return received_amount
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Date': ['', '1/3', '1/15', '1/29'],
    'Description': ['Balance: end of December', 'concert ticket', 'shoveling snow for Mom', 'movie rental'],
    'Received': [None, None, 20.00, None],
    'Expenses': [None, 82.40, None, 4.25],
    'Available Funds': [102.60, 20.20, 40.20, 35.95]
})

# Call the tool to solve the problem
amount_received = find_received_amount(df, 'shoveling snow for Mom')
print(amount_received)","def find_received_amount_for_transaction(financial_record_df, description_col, received_col, transaction_description):
    """"""
    This function takes in a pandas DataFrame representing a financial record, column names for the transaction description and received amount, and a transaction description, and returns the received amount for the given transaction description.
    
    Args:
    financial_record_df (pd.DataFrame): A pandas DataFrame containing financial records.
    description_col (str): The column name for the transaction descriptions.
    received_col (str): The column name for the received amounts.
    transaction_description (str): A string representing the description of the transaction.
    
    Returns:
    float: The received amount for the given transaction description, or None if the transaction does not exist.
    """"""
    # Filter the DataFrame for the specific transaction description
    transaction_df = financial_record_df[financial_record_df[description_col] == transaction_description]
    
    # If the transaction exists, return the received amount
    if not transaction_df.empty:
        received_amount = transaction_df[received_col].values[0]
        return received_amount
    else:
        return None","financial_record_data = {
    'Date': ['', '1/3', '1/15', '1/29'],
    'Description': ['Balance: end of December', 'concert ticket', 'shoveling snow for Mom', 'movie rental'],
    'Received': [None, None, 20.00, None],
    'Expenses': [None, 82.40, None, 4.25],
    'Available Funds': [102.60, 20.20, 40.20, 35.95]
}

financial_record_df = pd.DataFrame(financial_record_data)

print(find_received_amount_for_transaction(financial_record_df, 'Description', 'Received', 'shoveling snow for Mom'))"
"After growing tired of squinting while driving, Aaron went shopping for a pair of sunglasses. He tried on glasses with different frames and lenses. What is the probability that a randomly selected pair of sunglasses has browline frames and regular lenses? Simplify any fractions.",0.1875," | Polarized lenses | Regular lenses
Cat eye frames | 7 | 4
Browline frames | 2 | 3",8,362,"import pandas as pd

def calculate_probability(df):
    """"""
    This function takes in a pandas DataFrame representing a table of sunglasses with different frames and lenses, and returns the probability that a randomly selected pair of sunglasses has browline frames and regular lenses.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of sunglasses with different frames and lenses.
    Returns:
    float: The probability that a randomly selected pair of sunglasses has browline frames and regular lenses.
    """"""
    # Calculate the total number of sunglasses
    total_sunglasses = df.sum().sum()
    
    # Get the number of sunglasses with browline frames and regular lenses
    browline_regular = df.loc['Browline frames', 'Regular lenses']
    
    # Calculate the probability
    probability = browline_regular / total_sunglasses
    
    return probability","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Polarized lenses': {'Cat eye frames': 7, 'Browline frames': 2},
    'Regular lenses': {'Cat eye frames': 4, 'Browline frames': 3}
})

# Call the tool to solve the problem
probability = calculate_probability(df)

# Print the answer
print(probability)","def calculate_probability_of_combination(counts_df, category1, category2):
    """"""
    This function takes in a pandas DataFrame representing a table of counts for combinations of two categories, and returns the probability of a specific combination.
    
    Args:
    counts_df (pd.DataFrame): A pandas DataFrame containing counts for combinations of two categories.
    category1 (str): The name of the first category in the specific combination.
    category2 (str): The name of the second category in the specific combination.
    
    Returns:
    float: The probability of the specific combination.
    """"""
    # Calculate the total count
    total_count = counts_df.sum().sum()
    
    # Get the count of the specific combination
    specific_count = counts_df.loc[category1, category2]
    
    # Calculate the probability
    probability = specific_count / total_count
    
    return probability","counts_data = {
    'Polarized lenses': {'Cat eye frames': 7, 'Browline frames': 2},
    'Regular lenses': {'Cat eye frames': 4, 'Browline frames': 3}
}

counts_df = pd.DataFrame(counts_data)

print(calculate_probability_of_combination(counts_df, 'Browline frames', 'Regular lenses'))"
"At their family reunion, the Levin family recorded everyone's age. How many people are exactly 84 years old?",2,"Stem | Leaf 
2 | 0, 2, 3
3 | 0, 2
4 | 5
5 | 0, 7
6 | 2, 3, 3, 7
7 | 4
8 | 1, 2, 3, 4, 4, 6
9 | 0",8,6332,"import pandas as pd

def count_people_of_specific_age(df, age):
    """"""
    This function takes in a pandas dataframe of ages, and returns the number of people of a specific age.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the ages. The dataframe should contain ""Stem"" and ""Leaf"" columns.
    age (int): The specific age to count.
    Returns:
    int: The number of people of the specific age.
    """"""
    # Split the age into stem and leaf
    stem = age // 10
    leaf = age % 10
    
    # Filter the DataFrame for the specific stem
    stem_df = df[df['Stem'] == stem]
    if not stem_df.empty:
        # Count the number of occurrences of the leaf in the leaf list
        num_people = stem_df['Leaf'].apply(lambda x: x.count(leaf)).sum()
    else:
        num_people = 0
    
    return num_people","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],
    'Leaf': [[0, 2, 3], [0, 2], [5], [0, 7], [2, 3, 3, 7], [4], [1, 2, 3, 4, 4, 6], [0]]
})

# Call the tool to solve the problem
print(count_people_of_specific_age(df, 84))","def count_occurrences_of_value_in_stem_leaf(data_frame, stem_col, leaf_col, target_value):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot and a target value, and returns the number of occurrences of the target value in the plot.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    target_value (int): The target value to count occurrences of.
    
    Returns:
    int: The number of occurrences of the target value in the stem-and-leaf plot.
    """"""
    # Split the target value into stem and leaf
    stem = target_value // 10
    leaf = target_value % 10
    
    # Filter the DataFrame for the specific stem
    stem_df = data_frame[data_frame[stem_col] == stem]
    if not stem_df.empty:
        # Count the number of occurrences of the leaf in the leaf list
        num_occurrences = stem_df[leaf_col].apply(lambda x: x.count(leaf)).sum()
    else:
        num_occurrences = 0
    
    return num_occurrences","data = {
    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],
    'Leaf': [[0, 2, 3], [0, 2], [5], [0, 7], [2, 3, 3, 7], [4], [1, 2, 3, 4, 4, 6], [0]]
}

df = pd.DataFrame(data)
print(count_occurrences_of_value_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf"", target_value=84))"
"Steve loves to play the piano but doesn't like practicing the exercises his piano teacher assigns. Steve knows the exercises will help him play better though, so he tries to motivate himself using his favorite treat—chocolate chip cookies. There is a proportional relationship between the amount of time (in hours) that Steve practices the piano, x, and how many cookies he gives himself, y. What is the constant of proportionality? Write your answer as a whole number or decimal.",2,"2 | 4
3 | 6
4 | 8
5 | 10",7,14254,"import pandas as pd

def find_constant_of_proportionality(df):
    """"""
    This function takes in a pandas DataFrame representing the relationship between the amount of time (in hours) that Steve practices the piano (x) and how many cookies he gives himself (y), and returns the constant of proportionality.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the relationship between x and y with columns 'x' and 'y'.
    Returns:
    float: The constant of proportionality.
    """"""
    # Calculate the constant of proportionality for each row
    df['constant'] = df['y'] / df['x']
    
    # Find the mean of the constants
    constant_of_proportionality = df['constant'].mean()
    
    return constant_of_proportionality","# Initialize the table into a dataframe
df = pd.DataFrame({
    'x': [2, 3, 4, 5],
    'y': [4, 6, 8, 10]
})
# Call the tool to solve the problem
constant_of_proportionality = find_constant_of_proportionality(df)
print(constant_of_proportionality)","def calculate_mean_constant_of_proportionality(data_frame, variable1_col, variable2_col):
    """"""
    This function takes in a pandas DataFrame representing a table of two variables and their values, and returns the mean constant of proportionality between the two variables.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing two variables and their values.
    variable1_col (str): The column name for the first variable.
    variable2_col (str): The column name for the second variable.
    
    Returns:
    float: The mean constant of proportionality between the two variables.
    """"""
    # Calculate the constant of proportionality for each row
    data_frame['constant'] = data_frame[variable2_col] / data_frame[variable1_col]
    
    # Find the mean of the constants
    mean_constant_of_proportionality = data_frame['constant'].mean()
    
    return mean_constant_of_proportionality","data = {
    'x': [2, 3, 4, 5],
    'y': [4, 6, 8, 10]
}

df = pd.DataFrame(data)
print(calculate_mean_constant_of_proportionality(data_frame=df, variable1_col='x', variable2_col='y'))"
This is Jaden's complete financial record for July. How much money did Jaden spend on an app download?,4.95,"Date | Description | Received | Expenses | Available Funds
 | Balance: end of June | | | $235.00
7/11 | washing Mom's car | $10.00 | | $245.00
7/14 | app download | | $4.95 | $240.05
7/25 | box of popsicles | | $4.45 | $235.60",5,9356,"import pandas as pd

def find_expense_by_description(df, description):
    """"""
    This function takes in a pandas DataFrame representing a financial record table and a description, and returns the expense amount for the given description.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing financial records with columns 'Date', 'Description', 'Received', 'Expenses', and 'Available Funds'.
    description (str): The description of the expense to find.
    Returns:
    float: The expense amount for the given description.
    """"""
    # Filter the DataFrame for the specific description
    expense_df = df[df['Description'] == description]
    
    # Check if the filtered DataFrame is not empty
    if not expense_df.empty:
        expense_amount = expense_df['Expenses'].values[0]
        return expense_amount
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Date': ['', '7/11', '7/14', '7/25'],
    'Description': ['Balance: end of June', 'washing Mom\'s car', 'app download', 'box of popsicles'],
    'Received': ['', '$10.00', '', ''],
    'Expenses': ['', '', '$4.95', '$4.45'],
    'Available Funds': ['$235.00', '$245.00', '$240.05', '$235.60']
})

# Call the tool to solve the problem
expense = find_expense_by_description(df, 'app download')

# Print out the answer
print(expense)","def find_value_by_description_in_table(data_frame, description_col, value_col, target_description):
    """"""
    This function takes in a pandas DataFrame representing a table with descriptions and corresponding values, and returns the value for the given target description.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing descriptions and corresponding values.
    description_col (str): The column name for the descriptions.
    value_col (str): The column name for the values.
    target_description (str): The target description to find the corresponding value.
    
    Returns:
    float: The value corresponding to the target description.
    """"""
    # Filter the DataFrame for the specific target description
    filtered_df = data_frame[data_frame[description_col] == target_description]
    
    # Check if the filtered DataFrame is not empty
    if not filtered_df.empty:
        value = filtered_df[value_col].values[0]
        return value
    else:
        return None","data = {
    'Date': ['', '7/11', '7/14', '7/25'],
    'Description': ['Balance: end of June', 'washing Mom\'s car', 'app download', 'box of popsicles'],
    'Received': ['', '$10.00', '', ''],
    'Expenses': ['', '', '$4.95', '$4.45'],
    'Available Funds': ['$235.00', '$245.00', '$240.05', '$235.60']
}

df = pd.DataFrame(data)
print(find_value_by_description_in_table(data_frame=df, description_col=""Description"", value_col=""Expenses"", target_description=""app download""))"
"Ever since Carson was a small child, his favorite food has always been carrots. He likes them so much he wants to plant a garden in his backyard just to grow carrots. There is a proportional relationship between the size of Carson's garden (in square feet), x, and the number of carrots he can grow at a time, y. What is the constant of proportionality? Write your answer as a whole number or decimal.",4,"1 | 4
3 | 12
4 | 16
5 | 20",7,8085,"import pandas as pd

def find_constant_of_proportionality(df):
    """"""
    This function takes in a pandas DataFrame representing the relationship between the size of Carson's garden (in square feet) and the number of carrots he can grow at a time.
    It returns the constant of proportionality as a float.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the relationship between the size of Carson's garden (in square feet) and the number of carrots he can grow at a time with columns 'x' and 'y'.
    Returns:
    float: The constant of proportionality.
    """"""
    # Calculate the constant of proportionality for each row in the DataFrame
    df['constant'] = df['y'] / df['x']
    
    # Find the mean of the constants
    constant_of_proportionality = df['constant'].mean()
    
    return constant_of_proportionality","# Initialize the table into a dataframe
df = pd.DataFrame({
    'x': [1, 3, 4, 5],
    'y': [4, 12, 16, 20]
})
# Call the tool to solve the problem
constant_of_proportionality = find_constant_of_proportionality(df)
print(constant_of_proportionality)","def calculate_constant_of_proportionality(data_frame, variable1_col, variable2_col):
    """"""
    This function takes in a pandas DataFrame representing a table of two variables and their values, and returns the constant of proportionality between the two variables.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing two variables and their values.
    variable1_col (str): The column name for the first variable.
    variable2_col (str): The column name for the second variable.
    
    Returns:
    float: The constant of proportionality between the two variables.
    """"""
    # Calculate the constant of proportionality for each row in the DataFrame
    data_frame['constant'] = data_frame[variable2_col] / data_frame[variable1_col]
    
    # Find the mean of the constants
    constant_of_proportionality = data_frame['constant'].mean()
    
    return constant_of_proportionality","data = {
    'x': [1, 3, 4, 5],
    'y': [4, 12, 16, 20]
}

df = pd.DataFrame(data)
print(calculate_constant_of_proportionality(data_frame=df, variable1_col='x', variable2_col='y'))"
Each coat rack has 2 coats. How many coats are on 4 coat racks?,8,"Number of coat racks | Number of coats
1 | 2
2 | 4
3 | 6
4 | ?",2,15320,"def calculate_coats_on_racks(df):
    """"""
    This function takes in a pandas DataFrame representing a table of coat racks and the number of coats on each, and returns the number of coats on 4 coat racks.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of coat racks and the number of coats on each with columns 'Number of coat racks' and 'Number of coats'.
    Returns:
    int: The number of coats on 4 coat racks.
    """"""
    # Find the number of coats per rack
    coats_per_rack = df['Number of coats'][0] / df['Number of coat racks'][0]
    
    # Calculate the number of coats on 4 racks
    coats_on_4_racks = coats_per_rack * 4
    
    return int(coats_on_4_racks)","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of coat racks': [1, 2, 3, 4],
    'Number of coats': [2, 4, 6, '?']
})
# Call the tool to solve the problem
print(calculate_coats_on_racks(df))","def calculate_items_on_racks(data_frame, rack_col, item_col, rack_number):
    """"""
    This function takes in a pandas DataFrame representing a table of rack numbers and item numbers, and returns the number of items on a certain number of racks.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the rack numbers and the number of items on each with columns specified by rack_col and item_col.
    rack_col (str): The column name for the rack numbers.
    item_col (str): The column name for the item numbers.
    rack_number (int): The number of racks for which to calculate the number of items.
    
    Returns:
    int: The number of items on the specified number of racks.
    """"""
    # Find the number of items per rack
    items_per_rack = data_frame[item_col][0] / data_frame[rack_col][0]
    
    # Calculate the number of items on the specified number of racks
    items_on_racks = items_per_rack * rack_number
    
    return int(items_on_racks)","data = {
    'Number of coat racks': [1, 2, 3],
    'Number of coats': [2, 4, 6]
}

df = pd.DataFrame(data)
print(calculate_items_on_racks(data_frame=df, rack_col='Number of coat racks', item_col='Number of coats', rack_number=4))"
"This is Bill's complete financial record for January. On January 10, how much money did Bill spend?",5.5,"Date | Description | Received | Expenses | Available Funds
 | Balance: end of December | | | $355.60
1/10 | ice skating | | $5.50 | $350.10
1/16 | birthday money | $25.00 | | $375.10
1/18 | hockey stick | | $14.95 | $360.15",5,7584,"import pandas as pd

def calculate_spent_money(df, date):
    """"""
    This function takes in a pandas DataFrame representing a financial record and a date, and returns the amount of money spent on that date.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing financial records with columns 'Date', 'Description', 'Received', 'Expenses', 'Available Funds'.
    date (str): A string representing the date in the format 'm/dd'.
    Returns:
    float: The amount of money spent on the specified date.
    """"""
    # Filter the DataFrame for the specific date
    date_df = df[df['Date'] == date]
    if not date_df.empty:
        # If there are expenses on the specified date, return the amount
        if pd.notnull(date_df['Expenses'].values[0]):
            return date_df['Expenses'].values[0]
        else:
            return 0.0
    else:
        return 0.0","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Date': ['', '1/10', '1/16', '1/18'],
    'Description': ['Balance: end of December', 'ice skating', 'birthday money', 'hockey stick'],
    'Received': [None, None, 25.00, None],
    'Expenses': [None, 5.50, None, 14.95],
    'Available Funds': [355.60, 350.10, 375.10, 360.15]
})
# Call the tool to solve the problem
print(calculate_spent_money(df, '1/10'))","def calculate_expenses_on_date(financial_records_df, date_col, expenses_col, target_date):
    """"""
    This function takes in a pandas DataFrame representing a table of financial records and a target date, and returns the amount of money spent on the target date.
    
    Args:
    financial_records_df (pd.DataFrame): A pandas DataFrame containing financial records with columns specified by date_col and expenses_col.
    date_col (str): The column name for the date values.
    expenses_col (str): The column name for the expenses values.
    target_date (str): A string representing the target date in the format 'm/dd'.
    
    Returns:
    float: The amount of money spent on the target date.
    """"""
    # Filter the DataFrame for the specific target date
    date_df = financial_records_df[financial_records_df[date_col] == target_date]
    if not date_df.empty:
        # If there are expenses on the specified target date, return the amount
        if pd.notnull(date_df[expenses_col].values[0]):
            return date_df[expenses_col].values[0]
        else:
            return 0.0
    else:
        return 0.0","financial_records_data = {
    'Date': ['', '1/10', '1/16', '1/18'],
    'Description': ['Balance: end of December', 'ice skating', 'birthday money', 'hockey stick'],
    'Received': [None, None, 25.00, None],
    'Expenses': [None, 5.50, None, 14.95],
    'Available Funds': [355.60, 350.10, 375.10, 360.15]
}

financial_records_df = pd.DataFrame(financial_records_data)

print(calculate_expenses_on_date(financial_records_df, ""Date"", ""Expenses"", ""1/10""))"
Some friends discussed the sizes of their coin collections. How many more coins does Diane have than Mateo?,247,"Name | Number of coins
Mateo | 285
Diane | 532
Edgar | 788",3,9031,"import pandas as pd

def calculate_difference(df, person1, person2):
    """"""
    This function takes in a pandas DataFrame representing a table of people and their coin collections, and two person names, and returns the difference in the number of coins between the two people.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing people's names and their number of coins with columns 'Name' and 'Number of coins'.
    person1 (str): The name of the first person.
    person2 (str): The name of the second person.
    Returns:
    int: The difference in the number of coins between the two people.
    """"""
    # Get the number of coins for the first person
    person1_coins = df[df['Name'] == person1]['Number of coins'].values[0]
    
    # Get the number of coins for the second person
    person2_coins = df[df['Name'] == person2]['Number of coins'].values[0]
    
    # Calculate the difference
    difference = person2_coins - person1_coins
    
    return difference","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Name': ['Mateo', 'Diane', 'Edgar'],
    'Number of coins': [285, 532, 788]
})

# Call the tool to solve the problem
difference = calculate_difference(df, 'Mateo', 'Diane')
print(difference)","def calculate_difference_between_two_entities(df, entity_col, quantity_col, entity1, entity2):
    """"""
    This function takes in a pandas DataFrame representing a table of entities and their quantities, and two entity names, and returns the difference in the quantities between the two entities.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing entities and their quantities.
    entity_col (str): The column name for the entities.
    quantity_col (str): The column name for the quantities.
    entity1 (str): The name of the first entity.
    entity2 (str): The name of the second entity.
    
    Returns:
    int: The difference in the quantities between the two entities.
    """"""
    # Get the quantity for the first entity
    entity1_quantity = df[df[entity_col] == entity1][quantity_col].values[0]
    
    # Get the quantity for the second entity
    entity2_quantity = df[df[entity_col] == entity2][quantity_col].values[0]
    
    # Calculate the difference
    difference = entity2_quantity - entity1_quantity
    
    return difference","df = pd.DataFrame({
    'Name': ['Mateo', 'Diane', 'Edgar'],
    'Number of coins': [285, 532, 788]
})

print(calculate_difference_between_two_entities(df, 'Name', 'Number of coins', 'Mateo', 'Diane'))"
"At their family reunion, the Kemp family recorded everyone's age. How many people are exactly 31 years old?",4,"Stem | Leaf 
0 | 0, 6
1 | 0
2 | 7
3 | 1, 1, 1, 1
4 | 
5 | 2
6 | 0, 2, 2, 6
7 | 
8 | 8",5,10487,"import pandas as pd

def count_exact_age(df, age):
    """"""
    This function takes in a pandas dataframe of ages in stem and leaf format, and returns the number of people with the exact given age.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing ages in stem and leaf format.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    age (int): The age to count the number of people with.
    Returns:
    int: The number of people with the exact given age.
    """"""
    # prepare a list to store ages
    ages = []
    # calculate the age of each person
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            ages.append(stem * 10 + leaf[j])
    # filter the ages where the age is equal to the given age
    filtered = [a for a in ages if a == age]
    # count the number of people with the given age
    num_people = len(filtered)
    return num_people","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [0, 1, 2, 3, 4, 5, 6, 7, 8],
    'Leaf': [[0, 6], [0], [7], [1, 1, 1, 1], [], [2], [0, 2, 2, 6], [], [8]]
})
# Call the tool to solve the problem
print(count_exact_age(df, 31))","def count_instances_with_exact_value_in_stem_leaf(data_frame, stem_col, leaf_col, given_value):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of instances and a given value, and returns the number of instances that have values exactly equal to the given value.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    given_value (int): The given value for filtering items.
    
    Returns:
    int: The number of items with values exactly equal to the given value.
    """"""
    # Initialize the list to calculate items in each group
    items = []
    
    # Calculate the total value of items in each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Filter the items where the total value is exactly equal to the given value
    filtered = [item for item in items if item == given_value]
    
    # Count the number of items
    num_items = len(filtered)
    
    return num_items","data = {
    ""Stem"": [0, 1, 2, 3, 4, 5, 6, 7, 8],
    ""Leaf"": [[0, 6], [0], [7], [1, 1, 1, 1], [], [2], [0, 2, 2, 6], [], [8]]
}

df = pd.DataFrame(data)
print(count_instances_with_exact_value_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf"", given_value=31))"
Sebastian is a physical therapist who specializes in leg injuries. His patients differ in age and type of injury. What is the probability that a randomly selected patient is 13-19 years old and suffers from ankle pain? Simplify any fractions.,0.25," | Knee pain | Ankle pain
0-12 years old | 5 | 4
13-19 years old | 3 | 4",8,9956,"import pandas as pd

def calculate_probability(df, age_group, injury_type):
    """"""
    This function takes in a pandas DataFrame representing a table of patients' age groups and injury types, and returns the probability of a patient being in a specific age group and suffering from a specific injury type.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing age groups and injury types with columns 'Age Group', 'Knee pain', 'Ankle pain'.
    age_group (str): The age group to calculate the probability for.
    injury_type (str): The injury type to calculate the probability for.
    Returns:
    float: The probability of a patient being in the specified age group and suffering from the specified injury type.
    """"""
    # Calculate the total number of patients
    total_patients = df['Knee pain'].sum() + df['Ankle pain'].sum()
    
    # Filter the DataFrame for the specific age group and injury type
    age_group_df = df[df.index == age_group]
    if not age_group_df.empty:
        num_patients = age_group_df[injury_type].values[0]
    
    # Calculate the probability
    probability = num_patients / total_patients
    
    return probability","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Knee pain': [5, 3],
    'Ankle pain': [4, 4]
}, index=['0-12 years old', '13-19 years old'])

# Call the tool to solve the problem
probability = calculate_probability(df, '13-19 years old', 'Ankle pain')
print(probability)","def calculate_probability_for_category(df, category, count_cols):
    """"""
    This function takes in a pandas DataFrame representing a table of counts for different categories, and returns the probability of a specific category.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing counts for different categories.
    category (str): The category to calculate the probability for.
    count_cols (list): A list of column names for the counts.
    
    Returns:
    float: The probability of the specified category.
    """"""
    # Calculate the total count
    total_count = sum(df[col].sum() for col in count_cols)
    
    # Filter the DataFrame for the specific category
    category_df = df[df.index == category]
    if not category_df.empty:
        category_count = sum(category_df[col].values[0] for col in count_cols)
    
    # Calculate the probability
    probability = category_count / total_count
    
    return probability","df = pd.DataFrame({
    'Knee pain': [5, 3],
    'Ankle pain': [4, 4]
}, index=['0-12 years old', '13-19 years old'])

print(calculate_probability_for_category(df, '13-19 years old', ['Knee pain', 'Ankle pain']))"
"After growing tired of squinting while driving, Tim went shopping for a pair of sunglasses. He tried on glasses with different frames and lenses. What is the probability that a randomly selected pair of sunglasses has cat eye frames and polarized lenses? Simplify any fractions.",0.125," | Polarized lenses | Regular lenses
Cat eye frames | 2 | 3
Browline frames | 6 | 5",8,14525,"import pandas as pd

def calculate_probability(df, target_row, target_col):
    """"""
    This function takes in a pandas DataFrame representing a table of sunglasses with different frames and lenses, and returns the probability of selecting a pair with the specified target_row and target_col.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of sunglasses with different frames and lenses.
    target_row (str): The target row name (frame type) for the sunglasses.
    target_col (str): The target column name (lens type) for the sunglasses.
    Returns:
    float: The probability of selecting a pair of sunglasses with the specified target_row and target_col.
    """"""
    # Calculate the total number of sunglasses
    total_sunglasses = df.sum().sum()
    
    # Calculate the number of sunglasses with the target_row and target_col
    target_sunglasses = df.loc[target_row, target_col]
    
    # Calculate the probability
    probability = target_sunglasses / total_sunglasses
    
    return probability","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Polarized lenses': [2, 6],
    'Regular lenses': [3, 5]
}, index=['Cat eye frames', 'Browline frames'])

# Call the tool to solve the problem
probability = calculate_probability(df, 'Cat eye frames', 'Polarized lenses')
print(probability)","def calculate_probability_from_count_table(count_table, target_row, target_col):
    """"""
    This function takes in a pandas DataFrame representing a table of counts and returns the probability of the event specified by the target_row and target_col.
    
    Args:
    count_table (pd.DataFrame): A pandas DataFrame containing counts of different events.
    target_row (str): The row name for the target event.
    target_col (str): The column name for the target event.
    
    Returns:
    float: The probability of the target event.
    """"""
    # Calculate the total count
    total_count = count_table.sum().sum()
    
    # Calculate the count of the target event
    target_count = count_table.loc[target_row, target_col]
    
    # Calculate the probability
    probability = target_count / total_count
    
    return probability","df = pd.DataFrame({
    'Polarized lenses': [2, 6],
    'Regular lenses': [3, 5]
}, index=['Cat eye frames', 'Browline frames'])

print(calculate_probability_from_count_table(count_table=df, target_row='Cat eye frames', target_col='Polarized lenses'))"
A philanthropic organization compared the amounts of money that its members donated to certain causes. How much more did Jerry donate to clean water than to arts education?,5,"Person | Clean water | Arts education
Winston | $12 | $19
Nate | $4 | $15
Jerry | $6 | $1",5,9146,"import pandas as pd

def calculate_donation_difference(df, person, cause1, cause2):
    """"""
    This function takes in a pandas DataFrame representing a donation table, a person's name, and two causes, and returns the difference in the amounts of money that the person donated to the two causes.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing donation information with columns 'Person' and the names of the causes.
    person (str): The name of the person.
    cause1 (str): The name of the first cause.
    cause2 (str): The name of the second cause.
    Returns:
    float: The difference in the amounts of money that the person donated to the two causes.
    """"""
    # Filter the DataFrame for the specific person
    person_df = df[df['Person'] == person]
    if not person_df.empty:
        donation_cause1 = person_df[cause1].values[0]
        donation_cause2 = person_df[cause2].values[0]
        donation_difference = donation_cause1 - donation_cause2
        return donation_difference
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Person': ['Winston', 'Nate', 'Jerry'],
    'Clean water': [12, 4, 6],
    'Arts education': [19, 15, 1]
})

# Call the tool to solve the problem
donation_difference = calculate_donation_difference(df, 'Jerry', 'Clean water', 'Arts education')
print(donation_difference)","def calculate_donation_difference_for_person_and_causes(donations_df, person_col, person_name, cause1_col, cause2_col):
    """"""
    This function takes in a pandas DataFrame representing a table of donations, a column name for persons, a person's name, and column names for two causes, and returns the difference in the amounts of money that the person donated to the two causes.
    
    Args:
    donations_df (pd.DataFrame): A pandas DataFrame containing donation information with columns specified by person_col, cause1_col, and cause2_col.
    person_col (str): The column name for the persons.
    person_name (str): The name of the person.
    cause1_col (str): The column name for the first cause.
    cause2_col (str): The column name for the second cause.
    
    Returns:
    float: The difference in the amounts of money that the person donated to the two causes.
    """"""
    # Filter the DataFrame for the specific person
    person_donations_df = donations_df[donations_df[person_col] == person_name]
    if not person_donations_df.empty:
        donation_cause1 = person_donations_df[cause1_col].values[0]
        donation_cause2 = person_donations_df[cause2_col].values[0]
        donation_difference = donation_cause1 - donation_cause2
        return donation_difference
    else:
        return None","donations_data = {
    'Person': ['Winston', 'Nate', 'Jerry'],
    'Clean water': [12, 4, 6],
    'Arts education': [19, 15, 1]
}

donations_df = pd.DataFrame(donations_data)

print(calculate_donation_difference_for_person_and_causes(donations_df, 'Person', 'Jerry', 'Clean water', 'Arts education'))"
"A transportation analyst compared various bridges' tolls. On the George Washington bridge, how much more is the toll for a car than for a carpool?",6,"Bridge | Car | Carpool
Fort Madison | $1 | $1
Tacoma Narrows | $3 | $3
George Washington | $8 | $2
Hatem | $5 | $5",5,4436,"import pandas as pd

def calculate_toll_difference(df, bridge_name):
    """"""
    This function takes in a pandas DataFrame representing a bridge toll table and a bridge name, and returns the difference in toll between a car and a carpool for the specified bridge.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing bridge names and their tolls for cars and carpools with columns 'Bridge', 'Car', and 'Carpool'.
    bridge_name (str): The name of the bridge to calculate the toll difference for.
    Returns:
    float: The difference in toll between a car and a carpool for the specified bridge.
    """"""
    # Filter the DataFrame for the specific bridge
    bridge_df = df[df['Bridge'] == bridge_name]
    if not bridge_df.empty:
        car_toll = bridge_df['Car'].values[0]
        carpool_toll = bridge_df['Carpool'].values[0]
        toll_difference = car_toll - carpool_toll
        return toll_difference
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Bridge': ['Fort Madison', 'Tacoma Narrows', 'George Washington', 'Hatem'],
    'Car': [1, 3, 8, 5],
    'Carpool': [1, 3, 2, 5]
})
# Call the tool to solve the problem
toll_difference = calculate_toll_difference(df, 'George Washington')
print(toll_difference)","def calculate_difference_between_two_columns_for_specific_row(table_df, row_name_col, row_name, column1, column2):
    """"""
    This function takes in a pandas DataFrame, a row name, and two column names, and returns the difference between the values of the two columns for the specified row.
    
    Args:
    table_df (pd.DataFrame): A pandas DataFrame containing various rows and columns.
    row_name_col (str): The column name for the row names.
    row_name (str): The name of the row to calculate the difference for.
    column1 (str): The name of the first column.
    column2 (str): The name of the second column.
    
    Returns:
    float: The difference between the values of column1 and column2 for the specified row.
    """"""
    # Filter the DataFrame for the specific row
    row_df = table_df[table_df[row_name_col] == row_name]
    if not row_df.empty:
        column1_value = row_df[column1].values[0]
        column2_value = row_df[column2].values[0]
        value_difference = column1_value - column2_value
        return value_difference
    else:
        return None","df = pd.DataFrame({
    'Bridge': ['Fort Madison', 'Tacoma Narrows', 'George Washington', 'Hatem'],
    'Car': [1, 3, 8, 5],
    'Carpool': [1, 3, 2, 5]
})
print(calculate_difference_between_two_columns_for_specific_row(table_df=df, row_name_col='Bridge', row_name='George Washington', column1='Car', column2='Carpool'))"
"At family beach day, the Stafford Recreation Department offered a range of activities. How many more children than parents are swimming?",10,"Activity | Children | Parents
Eating lunch | 6 | 20
Collecting shells | 11 | 14
Making sand castles | 14 | 20
Swimming | 13 | 3",4,8800,"import pandas as pd

def calculate_difference(df, activity):
    """"""
    This function takes in a pandas DataFrame representing a table of activities and the number of children and parents participating in each, and a string representing the activity of interest. It returns the difference in the number of children and parents participating in the specified activity.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing activities and the number of children and parents participating in each. The DataFrame should have columns 'Activity', 'Children', and 'Parents'.
    activity (str): A string representing the activity of interest.
    Returns:
    int: The difference in the number of children and parents participating in the specified activity.
    """"""
    # Filter the DataFrame for the specific activity
    activity_df = df[df['Activity'] == activity]
    if not activity_df.empty:
        # Calculate the difference in the number of children and parents
        difference = activity_df['Children'].values[0] - activity_df['Parents'].values[0]
        return difference
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Activity': ['Eating lunch', 'Collecting shells', 'Making sand castles', 'Swimming'],
    'Children': [6, 11, 14, 13],
    'Parents': [20, 14, 20, 3]
})
# Call the tool to solve the problem
difference = calculate_difference(df, 'Swimming')
print(difference)","def calculate_difference_between_columns_based_on_filter_value(data_frame, filter_col, value_col1, value_col2, filter_value):
    """"""
    This function takes in a pandas DataFrame, two column names to compare, a column name to filter, and a filter value. It returns the difference between the values in the two columns based on the filter value in the filter column.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the data to be filtered and compared.
    filter_col (str): The column name for the filter column.
    value_col1 (str): The column name for the first value column.
    value_col2 (str): The column name for the second value column.
    filter_value (str): The value in the filter column to filter the data.
    
    Returns:
    int: The difference between the values in the two columns based on the filter value in the filter column.
    """"""
    # Filter the DataFrame for the specific filter value
    filtered_df = data_frame[data_frame[filter_col] == filter_value]
    if not filtered_df.empty:
        # Calculate the difference between the values in the two columns
        difference = filtered_df[value_col1].values[0] - filtered_df[value_col2].values[0]
        return difference
    else:
        return None","data = {
    'Activity': ['Eating lunch', 'Collecting shells', 'Making sand castles', 'Swimming'],
    'Children': [6, 11, 14, 13],
    'Parents': [20, 14, 20, 3]
}

df = pd.DataFrame(data)
print(calculate_difference_between_columns_based_on_filter_value(data_frame=df, filter_col=""Activity"", value_col1=""Children"", value_col2=""Parents"", filter_value=""Swimming""))"
Each bus has 10 empty seats. How many empty seats are on 3 buses?,30,"Number of buses | Number of empty seats
1 | 10
2 | 20
3 | ?",2,9257,"def calculate_empty_seats(df, num_buses):
    """"""
    This function takes in a pandas DataFrame representing a table of the number of buses and the corresponding number of empty seats, and a number representing the number of buses. It returns the number of empty seats on the specified number of buses.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of buses and the corresponding number of empty seats with columns 'Number of buses' and 'Number of empty seats'.
    num_buses (int): The number of buses.
    Returns:
    int: The number of empty seats on the specified number of buses.
    """"""
    # Filter the DataFrame for the row with 1 bus
    one_bus_df = df[df['Number of buses'] == 1]
    if not one_bus_df.empty:
        # Get the number of empty seats on 1 bus
        empty_seats_on_one_bus = one_bus_df['Number of empty seats'].values[0]
        # Calculate the number of empty seats on the specified number of buses
        empty_seats = num_buses * empty_seats_on_one_bus
        return empty_seats
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of buses': [1, 2, 3],
    'Number of empty seats': [10, 20, None]
})
# Call the tool to solve the problem
print(calculate_empty_seats(df, 3))","def calculate_total_from_unit_and_quantity(df, quantity_col, total_col, num_items):
    """"""
    This function takes in a pandas DataFrame representing a table of quantities and corresponding totals, and a number representing the number of items. It returns the total for the specified number of items.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the quantities and the corresponding totals.
    quantity_col (str): The column name for the quantities.
    total_col (str): The column name for the totals.
    num_items (int): The number of items.
    
    Returns:
    int: The total for the specified number of items.
    """"""
    # Filter the DataFrame for the row with 1 item
    one_item_df = df[df[quantity_col] == 1]
    if not one_item_df.empty:
        # Get the total for 1 item
        total_for_one_item = one_item_df[total_col].values[0]
        # Calculate the total for the specified number of items
        total = num_items * total_for_one_item
        return total
    else:
        return None","df = pd.DataFrame({
    'Number of buses': [1, 2, 3],
    'Number of empty seats': [10, 20, None]
})
print(calculate_total_from_unit_and_quantity(df, 'Number of buses', 'Number of empty seats', 3))"
A machine dispensed red gumdrops into bags of various sizes. What is the largest number of red gumdrops?,69,"Stem | Leaf 
3 | 0, 0, 4, 4
4 | 0, 0, 1, 7, 7
5 | 0, 3
6 | 1, 2, 9",4,16849,"import pandas as pd

def find_largest_number(df):
    """"""
    This function takes in a pandas dataframe of red gumdrops per bag, and returns the largest number of red gumdrops in a bag.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of red gumdrops per bag.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The largest number of red gumdrops in a bag.
    """"""
    # prepare a list to calculate gumdrops in each bag
    gumdrops = []
    # calculate the total number of red gumdrops in each bag
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            gumdrops.append(stem * 10 + leaf[j])
    # find the maximum number of gumdrops
    max_gumdrops = max(gumdrops)
    return max_gumdrops","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [3, 4, 5, 6],
    'Leaf': [[0, 0, 4, 4], [0, 0, 1, 7, 7], [0, 3], [1, 2, 9]]
})
# Call the tool to solve the problem
print(find_largest_number(df))","def find_largest_value_in_stem_leaf(data_frame, stem_col, leaf_col):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of items and returns the largest value among the items.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    
    Returns:
    int: The largest value among the items.
    """"""
    # Initialize the list to calculate items in each group
    items = []
    
    # Calculate the total value of items in each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Find the maximum value among the items
    max_value = max(items)
    
    return max_value","data = {
    ""Stem"": [3, 4, 5, 6],
    ""Leaf"": [[0, 0, 4, 4], [0, 0, 1, 7, 7], [0, 3], [1, 2, 9]]
}

df = pd.DataFrame(data)
print(find_largest_value_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf""))"
A machine dispensed red gumdrops into bags of various sizes. What is the largest number of red gumdrops?,90,"Stem | Leaf 
1 | 0, 5
2 | 7
3 | 1, 9
4 | 2
5 | 0, 4, 5
6 | 1, 1, 7, 7, 9
7 | 1, 4
8 | 3, 9
9 | 0",4,9203,"import pandas as pd

def find_largest_number_of_gumdrops(df):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of the number of gumdrops in each bag, and returns the largest number of gumdrops.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot with columns 'Stem' and 'Leaf'.
    Returns:
    int: The largest number of gumdrops.
    """"""
    # Initialize the largest number of gumdrops
    largest_number = 0
    
    # Iterate through the stem-and-leaf plot and find the largest number
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            number = stem * 10 + leaf[j]
            if number > largest_number:
                largest_number = number
    
    return largest_number","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],
    'Leaf': [[0, 5], [7], [1, 9], [2], [0, 4, 5], [1, 1, 7, 7, 9], [1, 4], [3, 9], [0]]
})

# Call the tool to solve the problem
print(find_largest_number_of_gumdrops(df))","def find_largest_number_in_stem_leaf(data_frame, stem_col, leaf_col):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot and returns the largest number in the plot.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    
    Returns:
    int: The largest number in the stem-and-leaf plot.
    """"""
    # Initialize the largest number
    largest_number = 0
    
    # Iterate through the stem-and-leaf plot and find the largest number
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            number = stem * 10 + leaf[j]
            if number > largest_number:
                largest_number = number
    
    return largest_number","df = pd.DataFrame({
    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],
    'Leaf': [[0, 5], [7], [1, 9], [2], [0, 4, 5], [1, 1, 7, 7, 9], [1, 4], [3, 9], [0]]
})

print(find_largest_number_in_stem_leaf(data_frame=df, stem_col='Stem', leaf_col='Leaf'))"
A philanthropic organization compared the amounts of money that its members donated to certain causes. How much more did Quinn donate to clean water than to hunger prevention?,15,"Person | Hunger prevention | Clean water
Keenan | $2 | $10
Quinn | $1 | $16
Pablo | $10 | $11",4,9765,"import pandas as pd

def calculate_difference_donations(df, person, cause1, cause2):
    """"""
    This function takes in a pandas DataFrame representing a donation table, a person's name, and two causes, and returns the difference in donations between the two causes for the given person.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing donation information with columns 'Person', 'Hunger prevention', and 'Clean water'.
    person (str): The name of the person whose donations we want to compare.
    cause1 (str): The name of the first cause.
    cause2 (str): The name of the second cause.
    Returns:
    float: The difference in donations between the two causes for the given person.
    """"""
    # Filter the DataFrame for the specific person
    person_df = df[df['Person'] == person]
    if not person_df.empty:
        donation_cause1 = person_df[cause1].values[0]
        donation_cause2 = person_df[cause2].values[0]
        difference = donation_cause2 - donation_cause1
        return difference
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Person': ['Keenan', 'Quinn', 'Pablo'],
    'Hunger prevention': [2, 1, 10],
    'Clean water': [10, 16, 11]
})

# Call the tool to solve the problem
difference = calculate_difference_donations(df, 'Quinn', 'Hunger prevention', 'Clean water')
print(difference)","def calculate_difference_in_donations_for_person_between_causes(donations_df, person_col, cause1_col, cause2_col, person_name):
    """"""
    This function takes in a pandas DataFrame representing a table of donations, a column name for persons, two column names for causes, and a person's name, and returns the difference in donations between the two causes for the given person.
    
    Args:
    donations_df (pd.DataFrame): A pandas DataFrame containing donation information.
    person_col (str): The column name for the persons.
    cause1_col (str): The column name for the first cause.
    cause2_col (str): The column name for the second cause.
    person_name (str): The name of the person whose donations we want to compare.
    
    Returns:
    float: The difference in donations between the two causes for the given person.
    """"""
    # Filter the DataFrame for the specific person
    person_donations_df = donations_df[donations_df[person_col] == person_name]
    if not person_donations_df.empty:
        donation_cause1 = person_donations_df[cause1_col].values[0]
        donation_cause2 = person_donations_df[cause2_col].values[0]
        difference = donation_cause2 - donation_cause1
        return difference
    else:
        return None","donations_data = {
    'Person': ['Keenan', 'Quinn', 'Pablo'],
    'Hunger prevention': [2, 1, 10],
    'Clean water': [10, 16, 11]
}

donations_df = pd.DataFrame(donations_data)

print(calculate_difference_in_donations_for_person_between_causes(donations_df, 'Person', 'Hunger prevention', 'Clean water', 'Quinn'))"
"At Tommy's birthday party, children and parents celebrated by participating in some activities. How many more people are swimming than jumping rope?",2,"Activity | Children | Parents
Jumping rope | 9 | 2
Swimming | 10 | 3
Making sundaes | 11 | 2",5,16333,"import pandas as pd

def calculate_difference_in_participants(activity_df, activity1, activity2):
    """"""
    This function takes in a pandas DataFrame representing an activity table and two activity names, and returns the difference in the number of participants between the two activities.
    Args:
    activity_df (pd.DataFrame): A pandas DataFrame containing activities and the number of participants (children and parents) with columns 'Activity', 'Children', and 'Parents'.
    activity1 (str): The name of the first activity.
    activity2 (str): The name of the second activity.
    Returns:
    int: The difference in the number of participants between the two activities.
    """"""
    # Filter the DataFrame for the specific activities
    activity1_df = activity_df[activity_df['Activity'] == activity1]
    activity2_df = activity_df[activity_df['Activity'] == activity2]
    
    # Calculate the total number of participants for each activity
    activity1_participants = activity1_df['Children'].values[0] + activity1_df['Parents'].values[0]
    activity2_participants = activity2_df['Children'].values[0] + activity2_df['Parents'].values[0]
    
    # Calculate the difference in the number of participants
    difference = activity2_participants - activity1_participants
    
    return difference","# Initialize the table into a dataframe
activity_df = pd.DataFrame({
    'Activity': ['Jumping rope', 'Swimming', 'Making sundaes'],
    'Children': [9, 10, 11],
    'Parents': [2, 3, 2]
})

# Call the tool to solve the problem
difference = calculate_difference_in_participants(activity_df, 'Jumping rope', 'Swimming')
print(difference)","def calculate_difference_in_participants_between_activities(activity_df, activity_col, participant1_col, participant2_col, activity1, activity2):
    """"""
    This function takes in a pandas DataFrame representing an activity table, two column names for participant counts, and two activity names, and returns the difference in the number of participants between the two activities.
    
    Args:
    activity_df (pd.DataFrame): A pandas DataFrame containing activities and the number of participants.
    activity_col (str): The column name for the activity names.
    participant1_col (str): The column name for the first participant count.
    participant2_col (str): The column name for the second participant count.
    activity1 (str): The name of the first activity.
    activity2 (str): The name of the second activity.
    
    Returns:
    int: The difference in the number of participants between the two activities.
    """"""
    # Filter the DataFrame for the specific activities
    activity1_df = activity_df[activity_df[activity_col] == activity1]
    activity2_df = activity_df[activity_df[activity_col] == activity2]
    
    # Calculate the total number of participants for each activity
    activity1_participants = activity1_df[participant1_col].values[0] + activity1_df[participant2_col].values[0]
    activity2_participants = activity2_df[participant1_col].values[0] + activity2_df[participant2_col].values[0]
    
    # Calculate the difference in the number of participants
    difference = activity2_participants - activity1_participants
    
    return difference","activity_data = {
    'Activity': ['Jumping rope', 'Swimming', 'Making sundaes'],
    'Children': [9, 10, 11],
    'Parents': [2, 3, 2]
}

activity_df = pd.DataFrame(activity_data)

print(calculate_difference_in_participants_between_activities(activity_df, 'Activity', 'Children', 'Parents', 'Jumping rope', 'Swimming'))"
A philanthropic organization compared the amounts of money that its members donated to certain causes. How much more did Jordan donate to hunger prevention than to clean water?,6,"Person | Clean water | Hunger prevention
Xavier | $13 | $2
Jordan | $11 | $17
Tucker | $8 | $17",4,10210,"import pandas as pd

def calculate_donation_difference(df, person, cause1, cause2):
    """"""
    This function takes in a pandas DataFrame representing a donation table, a person's name, and two causes, and returns the difference in the amounts of money that the person donated to the two causes.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing donation information with columns 'Person', 'Clean water', 'Hunger prevention'.
    person (str): The name of the person.
    cause1 (str): The name of the first cause.
    cause2 (str): The name of the second cause.
    Returns:
    float: The difference in the amounts of money that the person donated to the two causes.
    """"""
    # Filter the DataFrame for the specific person
    person_df = df[df['Person'] == person]
    if not person_df.empty:
        donation_cause1 = person_df[cause1].values[0]
        donation_cause2 = person_df[cause2].values[0]
        donation_difference = donation_cause2 - donation_cause1
        return donation_difference
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Person': ['Xavier', 'Jordan', 'Tucker'],
    'Clean water': [13, 11, 8],
    'Hunger prevention': [2, 17, 17]
})
# Call the tool to solve the problem
donation_difference = calculate_donation_difference(df, 'Jordan', 'Clean water', 'Hunger prevention')
print(donation_difference)","def calculate_donation_difference_for_person(donations_df, person_col, cause1_col, cause2_col, person_name):
    """"""
    This function takes in a pandas DataFrame representing a table of donations, a column name for persons, two column names for causes, and a person's name, and returns the difference in the amounts of money that the person donated to the two causes.
    
    Args:
    donations_df (pd.DataFrame): A pandas DataFrame containing donation information.
    person_col (str): The column name for the persons.
    cause1_col (str): The column name for the first cause.
    cause2_col (str): The column name for the second cause.
    person_name (str): The name of the person.
    
    Returns:
    float: The difference in the amounts of money that the person donated to the two causes.
    """"""
    # Filter the DataFrame for the specific person
    person_donations_df = donations_df[donations_df[person_col] == person_name]
    if not person_donations_df.empty:
        donation_cause1 = person_donations_df[cause1_col].values[0]
        donation_cause2 = person_donations_df[cause2_col].values[0]
        donation_difference = donation_cause2 - donation_cause1
        return donation_difference
    else:
        return None","donations_data = {
    'Person': ['Xavier', 'Jordan', 'Tucker'],
    'Clean water': [13, 11, 8],
    'Hunger prevention': [2, 17, 17]
}

donations_df = pd.DataFrame(donations_data)

print(calculate_donation_difference_for_person(donations_df, ""Person"", ""Clean water"", ""Hunger prevention"", ""Jordan""))"
Ian decided to record the temperature every morning when he woke up. What is the lowest temperature?,2,"Stem | Leaf 
0 | 2
1 | 3
2 | 3, 4, 4
3 | 1, 8",5,5088,"import pandas as pd

def find_lowest_temperature(df):
    """"""
    This function takes in a pandas dataframe of temperatures, and returns the lowest temperature.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the temperatures.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The lowest temperature.
    """"""
    # prepare a list to calculate temperature in each day
    temperatures = []
    # calculate the temperature in each day
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            temperatures.append(stem * 10 + leaf[j])
    # find the lowest temperature
    lowest_temperature = min(temperatures)
    return lowest_temperature","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [0, 1, 2, 3],
    'Leaf': [[2], [3], [3, 4, 4], [1, 8]]
})
# Call the tool to solve the problem
print(find_lowest_temperature(df))","def find_lowest_value_in_stem_leaf(data_frame, stem_col, leaf_col):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of values and returns the lowest value in the plot.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of values with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    
    Returns:
    int: The lowest value in the stem-and-leaf plot.
    """"""
    # Initialize the list to calculate values in each entry
    values = []
    
    # Calculate the value for each entry
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            values.append(stem * 10 + leaf[j])
    
    # Find the lowest value
    lowest_value = min(values)
    
    return lowest_value","data = {
    ""Stem"": [0, 1, 2, 3],
    ""Leaf"": [[2], [3], [3, 4, 4], [1, 8]]
}

df = pd.DataFrame(data)
print(find_lowest_value_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf""))"
Some friends met in New York City for vacation and compared how far they had traveled. How many more miles did Emilio travel than Javier?,3452,"Name | Miles
Javier | 3,518
Emilio | 6,970
Kristen | 1,955
Danielle | 5,543",3,9046,"import pandas as pd

def calculate_difference_in_miles(df, person1, person2):
    """"""
    This function takes in a pandas DataFrame representing a table of names and miles traveled, and two names, and returns the difference in miles traveled between the two people.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing names and miles traveled with columns 'Name' and 'Miles'.
    person1 (str): The name of the first person.
    person2 (str): The name of the second person.
    Returns:
    int: The difference in miles traveled between the two people.
    """"""
    # Filter the DataFrame for the specific names
    person1_df = df[df['Name'] == person1]
    person2_df = df[df['Name'] == person2]
    
    # Check if both names are in the DataFrame
    if not person1_df.empty and not person2_df.empty:
        # Calculate the difference in miles
        difference = person2_df['Miles'].values[0] - person1_df['Miles'].values[0]
        return difference
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Name': ['Javier', 'Emilio', 'Kristen', 'Danielle'],
    'Miles': [3518, 6970, 1955, 5543]
})

# Call the tool to solve the problem
difference = calculate_difference_in_miles(df, 'Javier', 'Emilio')
print(difference)","def calculate_difference_between_entities(data_frame, entity_col, value_col, entity1, entity2):
    """"""
    This function takes in a pandas DataFrame representing a table of entities and their values, and two entity names, and returns the difference in values between the two entities.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing entity names and their values.
    entity_col (str): The column name for the entity names.
    value_col (str): The column name for the entity values.
    entity1 (str): The name of the first entity.
    entity2 (str): The name of the second entity.
    
    Returns:
    float: The difference in values between the two entities.
    """"""
    # Filter the DataFrame for the specific entity names
    entity1_df = data_frame[data_frame[entity_col] == entity1]
    entity2_df = data_frame[data_frame[entity_col] == entity2]
    
    # Check if both entity names are in the DataFrame
    if not entity1_df.empty and not entity2_df.empty:
        # Calculate the difference in values
        difference = entity2_df[value_col].values[0] - entity1_df[value_col].values[0]
        return difference
    else:
        return None","data = {
    'Name': ['Javier', 'Emilio', 'Kristen', 'Danielle'],
    'Miles': [3518, 6970, 1955, 5543]
}

df = pd.DataFrame(data)
print(calculate_difference_between_entities(data_frame=df, entity_col=""Name"", value_col=""Miles"", entity1=""Javier"", entity2=""Emilio""))"
A philanthropic organization compared the amounts of money that its members donated to certain causes. How much more money did Cara donate to hunger prevention than Cameron?,8,"Person | Hunger prevention | Job training
Cameron | $3 | $3
Daniel | $15 | $4
Cara | $11 | $16
Malik | $12 | $2",4,17046,"import pandas as pd

def calculate_donation_difference(df, person1, person2, cause):
    """"""
    This function takes in a pandas DataFrame representing a donation table, two person names, and a cause, and returns the difference in the amounts of money that the two persons donated to the cause.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing donation information with columns 'Person', 'Hunger prevention', 'Job training'.
    person1 (str): The name of the first person.
    person2 (str): The name of the second person.
    cause (str): The name of the cause.
    Returns:
    float: The difference in the amounts of money that the two persons donated to the cause.
    """"""
    # Filter the DataFrame for the specific persons and cause
    person1_df = df[df['Person'] == person1]
    person2_df = df[df['Person'] == person2]
    
    # Get the donation amounts
    person1_donation = person1_df[cause].values[0]
    person2_donation = person2_df[cause].values[0]
    
    # Calculate the difference
    donation_difference = person1_donation - person2_donation
    
    return donation_difference","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Person': ['Cameron', 'Daniel', 'Cara', 'Malik'],
    'Hunger prevention': [3, 15, 11, 12],
    'Job training': [3, 4, 16, 2]
})
# Call the tool to solve the problem
difference = calculate_donation_difference(df, 'Cara', 'Cameron', 'Hunger prevention')
print(difference)","def calculate_difference_between_entities_for_category(df, entity_col, amount_cols, entity1, entity2, category):
    """"""
    This function takes in a pandas DataFrame representing a table of entities and amounts for various categories, two entity names, and a category, and returns the difference in the amounts for the two entities for the specific category.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing entity names and their amounts for various categories.
    entity_col (str): The column name for the entity names.
    amount_cols (list): The column names for the amounts.
    entity1 (str): The name of the first entity.
    entity2 (str): The name of the second entity.
    category (str): The name of the category.
    
    Returns:
    float: The difference in the amounts for the two entities for the specific category.
    """"""
    # Filter the DataFrame for the specific entities and category
    entity1_df = df[df[entity_col] == entity1]
    entity2_df = df[df[entity_col] == entity2]
    
    # Get the amounts
    entity1_amount = entity1_df[category].values[0]
    entity2_amount = entity2_df[category].values[0]
    
    # Calculate the difference
    amount_difference = entity1_amount - entity2_amount
    
    return amount_difference","df = pd.DataFrame({
    'Person': ['Cameron', 'Daniel', 'Cara', 'Malik'],
    'Hunger prevention': [3, 15, 11, 12],
    'Job training': [3, 4, 16, 2]
})
print(calculate_difference_between_entities_for_category(df, 'Person', ['Hunger prevention', 'Job training'], 'Cara', 'Cameron', 'Hunger prevention'))"
A philanthropic organization compared the amounts of money that its members donated to certain causes. How much did Stanley donate to animal rights?,12,"Person | Arts education | Animal rights
Julian | $2 | $3
Stanley | $1 | $12
Darius | $13 | $7
Riley | $5 | $6
Reagan | $14 | $6",4,3383,"import pandas as pd

def get_donation_amount(df, person, cause):
    """"""
    This function takes in a pandas DataFrame representing a donation table, a person's name, and a cause, and returns the amount of money that the person donated to the cause.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing donation information with columns 'Person' and the names of the causes.
    person (str): The name of the person.
    cause (str): The name of the cause.
    Returns:
    float: The amount of money that the person donated to the cause.
    """"""
    # Filter the DataFrame for the specific person
    person_df = df[df['Person'] == person]
    if not person_df.empty:
        donation_amount = person_df[cause].values[0]
        return donation_amount
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Person': ['Julian', 'Stanley', 'Darius', 'Riley', 'Reagan'],
    'Arts education': [2, 1, 13, 5, 14],
    'Animal rights': [3, 12, 7, 6, 6]
})

# Call the tool to solve the problem
donation_amount = get_donation_amount(df, 'Stanley', 'Animal rights')
print(donation_amount)","def get_table_cell_value(data_frame, row_id_col, row_id, col_id):
    """"""
    This function takes in a pandas DataFrame, a row identifier column, a row identifier, and a column identifier, and returns the value of the cell at the intersection of the row and column.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame.
    row_id_col (str): The column name for the row identifiers.
    row_id (str): The row identifier.
    col_id (str): The column identifier.
    
    Returns:
    float: The value of the cell at the intersection of the row and column.
    """"""
    # Filter the DataFrame for the specific row identifier
    row_df = data_frame[data_frame[row_id_col] == row_id]
    if not row_df.empty:
        cell_value = row_df[col_id].values[0]
        return cell_value
    else:
        return None","df = pd.DataFrame({
    'Person': ['Julian', 'Stanley', 'Darius', 'Riley', 'Reagan'],
    'Arts education': [2, 1, 13, 5, 14],
    'Animal rights': [3, 12, 7, 6, 6]
})

print(get_table_cell_value(data_frame=df, row_id_col='Person', row_id='Stanley', col_id='Animal rights'))"
A philanthropic organization compared the amounts of money that its members donated to certain causes. How much more did Megan donate to job training than to hunger prevention?,16,"Person | Job training | Hunger prevention
Amelia | $3 | $19
Megan | $18 | $2
Emma | $4 | $11
Larry | $7 | $7",4,8751,"import pandas as pd

def calculate_difference_in_donations(df, person):
    """"""
    This function takes in a pandas DataFrame representing a donation table and a person's name, and returns the difference in the amounts of money that the person donated to job training and hunger prevention.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing donation information with columns 'Person', 'Job training', and 'Hunger prevention'.
    person (str): The name of the person.
    Returns:
    float: The difference in the amounts of money that the person donated to job training and hunger prevention.
    """"""
    # Filter the DataFrame for the specific person
    person_df = df[df['Person'] == person]
    if not person_df.empty:
        job_training_donation = person_df['Job training'].values[0]
        hunger_prevention_donation = person_df['Hunger prevention'].values[0]
        difference = job_training_donation - hunger_prevention_donation
        return difference
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Person': ['Amelia', 'Megan', 'Emma', 'Larry'],
    'Job training': [3, 18, 4, 7],
    'Hunger prevention': [19, 2, 11, 7]
})

# Call the tool to solve the problem
difference = calculate_difference_in_donations(df, 'Megan')
print(difference)","def calculate_difference_in_donations_for_person(donations_df, person_col, cause1_col, cause2_col, person_name):
    """"""
    This function takes in a pandas DataFrame representing a table of donations, column names for two causes, and a person's name, and returns the difference in the amounts of money that the person donated to the two causes.
    
    Args:
    donations_df (pd.DataFrame): A pandas DataFrame containing donation information.
    person_col (str): The column name for the person names.
    cause1_col (str): The column name for the first cause.
    cause2_col (str): The column name for the second cause.
    person_name (str): The name of the person.
    
    Returns:
    float: The difference in the amounts of money that the person donated to the two causes. If the person's name is not found in the DataFrame, returns None.
    """"""
    # Filter the DataFrame for the specific person
    person_df = donations_df[donations_df[person_col] == person_name]
    if not person_df.empty:
        cause1_donation = person_df[cause1_col].values[0]
        cause2_donation = person_df[cause2_col].values[0]
        difference = cause1_donation - cause2_donation
        return difference
    else:
        return None","donations_data = {
    'Person': ['Amelia', 'Megan', 'Emma', 'Larry'],
    'Job training': [3, 18, 4, 7],
    'Hunger prevention': [19, 2, 11, 7]
}

donations_df = pd.DataFrame(donations_data)

print(calculate_difference_in_donations_for_person(donations_df, ""Person"", ""Job training"", ""Hunger prevention"", ""Megan""))"
A philanthropic organization compared the amounts of money that its members donated to certain causes. How much more money did Tammy donate to arts education than Christina?,12,"Person | Arts education | Hunger prevention
Christina | $2 | $17
Stanley | $5 | $1
Tammy | $14 | $5",4,12037,"import pandas as pd

def calculate_donation_difference(df, person1, person2, cause):
    """"""
    This function takes in a pandas DataFrame representing a donation table, two person names, and a cause, and returns the difference in the amounts of money that the two persons donated to the cause.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing donation information with columns 'Person', 'Arts education', 'Hunger prevention'.
    person1 (str): The name of the first person.
    person2 (str): The name of the second person.
    cause (str): The cause to which the donations were made.
    Returns:
    float: The difference in the amounts of money that the two persons donated to the cause.
    """"""
    # Filter the DataFrame for the specific persons and cause
    person1_donation = df[df['Person'] == person1][cause].values[0]
    person2_donation = df[df['Person'] == person2][cause].values[0]
    
    # Calculate the difference in donations
    donation_difference = person1_donation - person2_donation
    
    return donation_difference","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Person': ['Christina', 'Stanley', 'Tammy'],
    'Arts education': [2, 5, 14],
    'Hunger prevention': [17, 1, 5]
})

# Call the tool to solve the problem
donation_difference = calculate_donation_difference(df, 'Tammy', 'Christina', 'Arts education')
print(donation_difference)","def calculate_difference_in_category_between_entities(data_frame, entity_col, category_col, entity1, entity2):
    """"""
    This function takes in a pandas DataFrame representing a table of entities and categories, two entity names, and a category name, and returns the difference in amounts for the category between the two entities.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing entities and categories.
    entity_col (str): The column name for the entities.
    category_col (str): The column name for the category.
    entity1 (str): The name of the first entity.
    entity2 (str): The name of the second entity.
    
    Returns:
    float: The difference in amounts for the category between the two entities.
    """"""
    # Filter the DataFrame for the specific entities and category
    entity1_amount = data_frame[data_frame[entity_col] == entity1][category_col].values[0]
    entity2_amount = data_frame[data_frame[entity_col] == entity2][category_col].values[0]
    
    # Calculate the difference in amounts
    amount_difference = entity1_amount - entity2_amount
    
    return amount_difference","data = {
    'Person': ['Christina', 'Stanley', 'Tammy'],
    'Arts education': [2, 5, 14],
    'Hunger prevention': [17, 1, 5]
}

df = pd.DataFrame(data)
print(calculate_difference_in_category_between_entities(data_frame=df, entity_col=""Person"", category_col=""Arts education"", entity1=""Tammy"", entity2=""Christina""))"
"At their family reunion, the Johnson family recorded everyone's age. How many people are exactly 50 years old?",3,"Stem | Leaf 
5 | 0, 0, 0, 1
6 | 
7 | 1
8 | 0, 1
9 | 0",6,1243,"import pandas as pd

def count_exact_age(df, age):
    """"""
    This function takes in a pandas dataframe of ages in stem and leaf format, and returns the number of people with the exact given age.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the ages in stem and leaf format.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    age (int): The age to count the number of people with.
    Returns:
    int: The number of people with the exact given age.
    """"""
    # prepare a list to store ages
    ages = []
    # calculate the age of each person
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            ages.append(stem * 10 + leaf[j])
    # filter the ages where the age is equal to the given age
    filtered = [a for a in ages if a == age]
    # count the number of people with the given age
    num_people = len(filtered)
    return num_people","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [5, 6, 7, 8, 9],
    'Leaf': [[0, 0, 0, 1], [], [1], [0, 1], [0]]
})
# Call the tool to solve the problem
print(count_exact_age(df, 50))","def count_occurrences_of_specific_value_in_stem_leaf(data_frame, stem_col, leaf_col, specific_value):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of items and a specific value, and returns the number of occurrences of the specific value in the plot.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    specific_value (int): The specific value to count occurrences of.
    
    Returns:
    int: The number of occurrences of the specific value in the stem-and-leaf plot.
    """"""
    # Initialize the list to store item values
    item_values = []
    
    # Calculate the value of each item in the stem-and-leaf plot
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            item_values.append(stem * 10 + leaf[j])
    
    # Filter the items where the value is equal to the specific value
    filtered = [item for item in item_values if item == specific_value]
    
    # Count the number of occurrences of the specific value
    num_occurrences = len(filtered)
    
    return num_occurrences","data = {
    ""Stem"": [5, 6, 7, 8, 9],
    ""Leaf"": [[0, 0, 0, 1], [], [1], [0, 1], [0]]
}

df = pd.DataFrame(data)
print(count_occurrences_of_specific_value_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf"", specific_value=50))"
This is Zoe's complete financial record for December. How much money did Zoe's grandpa give her?,40,"Date | Description | Received | Expenses | Available Funds
 | Balance: end of November | | | $289.15
12/4 | snowman kit | | $9.90 | $279.25
12/14 | money from Grandpa | $40.00 | | $319.25
12/16 | gift for teacher | | $12.45 | $306.80",5,3686,"import pandas as pd

def get_received_amount(df, description):
    """"""
    This function takes in a pandas DataFrame representing a financial record table and a description, and returns the received amount for the given description.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing financial records with columns 'Date', 'Description', 'Received', 'Expenses', and 'Available Funds'.
    description (str): The description of the transaction for which the received amount is to be found.
    Returns:
    float: The received amount for the given description.
    """"""
    # Filter the DataFrame for the specific description
    transaction_df = df[df['Description'] == description]
    if not transaction_df.empty:
        received_amount = transaction_df['Received'].values[0]
        return received_amount
    else:
        return 0.0","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Date': ['', '12/4', '12/14', '12/16'],
    'Description': ['Balance: end of November', 'snowman kit', 'money from Grandpa', 'gift for teacher'],
    'Received': ['', '', '$40.00', ''],
    'Expenses': ['', '$9.90', '', '$12.45'],
    'Available Funds': ['$289.15', '$279.25', '$319.25', '$306.80']
})

# Call the tool to solve the problem
amount = get_received_amount(df, 'money from Grandpa')
print(amount)","def get_transaction_amount_from_financial_records(financial_records_df, description_col, received_col, transaction_description):
    """"""
    This function takes in a pandas DataFrame representing a financial record table, a transaction description, and returns the received amount for the given transaction description.
    
    Args:
    financial_records_df (pd.DataFrame): A pandas DataFrame containing financial records.
    description_col (str): The column name for the transaction descriptions.
    received_col (str): The column name for the received amounts.
    transaction_description (str): The description of the transaction for which the received amount is to be found.
    
    Returns:
    float: The received amount for the given transaction description.
    """"""
    # Filter the DataFrame for the specific transaction description
    transaction_df = financial_records_df[financial_records_df[description_col] == transaction_description]
    if not transaction_df.empty:
        received_amount = transaction_df[received_col].values[0]
        return received_amount
    else:
        return 0.0","financial_records_data = {
    'Date': ['', '12/4', '12/14', '12/16'],
    'Description': ['Balance: end of November', 'snowman kit', 'money from Grandpa', 'gift for teacher'],
    'Received': ['', '', '$40.00', ''],
    'Expenses': ['', '$9.90', '', '$12.45'],
    'Available Funds': ['$289.15', '$279.25', '$319.25', '$306.80']
}

financial_records_df = pd.DataFrame(financial_records_data)

transaction_description = 'money from Grandpa'
print(get_transaction_amount_from_financial_records(financial_records_df, 'Description', 'Received', transaction_description))"
A philanthropic organization compared the amounts of money that its members donated to certain causes. How much more money did Johnny donate to clean water than Mitch?,5,"Person | Cancer research | Clean water
Kira | $9 | $7
Mitch | $18 | $8
Johnny | $13 | $13",4,8578,"import pandas as pd

def calculate_difference_in_donations(df, person1, person2, cause):
    """"""
    This function takes in a pandas DataFrame representing a donation table, two person names, and a cause, and returns the difference in the amount of money donated by the two persons for the given cause.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing donation information with columns 'Person', 'Cancer research', 'Clean water', etc.
    person1 (str): The name of the first person.
    person2 (str): The name of the second person.
    cause (str): The name of the cause for which the difference in donations is to be calculated.
    Returns:
    float: The difference in the amount of money donated by the two persons for the given cause.
    """"""
    # Filter the DataFrame for the specific persons
    person1_df = df[df['Person'] == person1]
    person2_df = df[df['Person'] == person2]
    
    # Get the donation amounts for the given cause
    person1_donation = person1_df[cause].values[0]
    person2_donation = person2_df[cause].values[0]
    
    # Calculate the difference in donations
    donation_difference = person1_donation - person2_donation
    
    return donation_difference","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Person': ['Kira', 'Mitch', 'Johnny'],
    'Cancer research': [9, 18, 13],
    'Clean water': [7, 8, 13]
})

# Call the tool to solve the problem
difference = calculate_difference_in_donations(df, 'Johnny', 'Mitch', 'Clean water')
print(difference)","def calculate_difference_in_amounts(data_frame, entity_col, entity1, entity2, category):
    """"""
    This function takes in a pandas DataFrame representing a table of entities and amounts for various categories, two entity names, and a category, and returns the difference in amounts for the given category between the two entities.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing entity names and amounts for various categories.
    entity_col (str): The column name for the entity names.
    entity1 (str): The name of the first entity.
    entity2 (str): The name of the second entity.
    category (str): The name of the category for which the difference in amounts is to be calculated.
    
    Returns:
    float: The difference in amounts for the given category between the two entities.
    """"""
    # Filter the DataFrame for the specific entities
    entity1_df = data_frame[data_frame[entity_col] == entity1]
    entity2_df = data_frame[data_frame[entity_col] == entity2]
    
    # Get the amounts for the given category
    entity1_amount = entity1_df[category].values[0]
    entity2_amount = entity2_df[category].values[0]
    
    # Calculate the difference in amounts
    amount_difference = entity1_amount - entity2_amount
    
    return amount_difference","data = {
    'Person': ['Kira', 'Mitch', 'Johnny'],
    'Cancer research': [9, 18, 13],
    'Clean water': [7, 8, 13]
}

df = pd.DataFrame(data)
print(calculate_difference_in_amounts(data_frame=df, entity_col=""Person"", entity1=""Johnny"", entity2=""Mitch"", category=""Clean water""))"
A philanthropic organization compared the amounts of money that its members donated to certain causes. How much more did Kenji donate to arts education than to clean water?,4,"Person | Arts education | Clean water
Kenji | $18 | $14
Lexi | $3 | $12
Sofia | $6 | $1
Zane | $2 | $2
Lillian | $1 | $5",4,9096,"import pandas as pd

def calculate_donation_difference(df, person, cause1, cause2):
    """"""
    This function takes in a pandas DataFrame representing a donation table, a person's name, and two causes, and returns the difference in the amounts of money that the person donated to the two causes.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing donation information with columns 'Person' and the names of the causes.
    person (str): The name of the person.
    cause1 (str): The name of the first cause.
    cause2 (str): The name of the second cause.
    Returns:
    float: The difference in the amounts of money that the person donated to the two causes.
    """"""
    # Filter the DataFrame for the specific person
    person_df = df[df['Person'] == person]
    if not person_df.empty:
        donation_cause1 = person_df[cause1].values[0]
        donation_cause2 = person_df[cause2].values[0]
        donation_difference = donation_cause1 - donation_cause2
        return donation_difference
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Person': ['Kenji', 'Lexi', 'Sofia', 'Zane', 'Lillian'],
    'Arts education': [18, 3, 6, 2, 1],
    'Clean water': [14, 12, 1, 2, 5]
})
# Call the tool to solve the problem
donation_difference = calculate_donation_difference(df, 'Kenji', 'Arts education', 'Clean water')
print(donation_difference)","def calculate_donation_difference_between_causes(donations_df, person_col, cause1_col, cause2_col, person_name):
    """"""
    This function takes in a pandas DataFrame representing a donation table, a person's name, and two cause columns, and returns the difference in the amounts of money that the person donated to the two causes.
    
    Args:
    donations_df (pd.DataFrame): A pandas DataFrame containing donation information with columns specified by person_col, cause1_col, and cause2_col.
    person_col (str): The column name for the person names.
    cause1_col (str): The column name for the first cause.
    cause2_col (str): The column name for the second cause.
    person_name (str): The name of the person.
    
    Returns:
    float: The difference in the amounts of money that the person donated to the two causes.
    """"""
    # Filter the DataFrame for the specific person
    person_df = donations_df[donations_df[person_col] == person_name]
    if not person_df.empty:
        donation_cause1 = person_df[cause1_col].values[0]
        donation_cause2 = person_df[cause2_col].values[0]
        donation_difference = donation_cause1 - donation_cause2
        return donation_difference
    else:
        return None","donations_data = {
    'Person': ['Kenji', 'Lexi', 'Sofia', 'Zane', 'Lillian'],
    'Arts education': [18, 3, 6, 2, 1],
    'Clean water': [14, 12, 1, 2, 5]
}

donations_df = pd.DataFrame(donations_data)
print(calculate_donation_difference_between_causes(donations_df, ""Person"", ""Arts education"", ""Clean water"", ""Kenji""))"
"This holiday weekend, Sue is going to Chicago to shop and to see a baseball game. To avoid traffic, Sue decides to take the train. There is a proportional relationship between the time (in minutes) Sue spends riding the train, x, and the distance she travels (in miles), y. What is the constant of proportionality? Write your answer as a whole number or decimal.",1,"2 | 2
4 | 4
9 | 9
20 | 20",7,15268,"import pandas as pd

def calculate_constant_of_proportionality(df):
    """"""
    This function takes in a pandas DataFrame representing a table of time spent riding the train and the distance travelled, and returns the constant of proportionality.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing time spent riding the train and the distance travelled with columns 'Time' and 'Distance'.
    Returns:
    float: The constant of proportionality.
    """"""
    # Calculate the constant of proportionality by dividing the distance by the time for each row
    df['Constant'] = df['Distance'] / df['Time']
    
    # Check if the constant of proportionality is the same for all rows
    if df['Constant'].nunique() == 1:
        return df['Constant'].values[0]
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Time': [2, 4, 9, 20],
    'Distance': [2, 4, 9, 20]
})
# Call the tool to solve the problem
constant_of_proportionality = calculate_constant_of_proportionality(df)
print(constant_of_proportionality)","def calculate_constant_of_proportionality_between_two_variables(data_frame, variable1_col, variable2_col):
    """"""
    This function takes in a pandas DataFrame representing a table of two variables and returns the constant of proportionality between them.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing two variables with columns specified by variable1_col and variable2_col.
    variable1_col (str): The column name for the first variable.
    variable2_col (str): The column name for the second variable.
    
    Returns:
    float: The constant of proportionality between the two variables if it's the same for all rows, otherwise None.
    """"""
    # Calculate the constant of proportionality by dividing variable2 by variable1 for each row
    data_frame['Constant'] = data_frame[variable2_col] / data_frame[variable1_col]
    
    # Check if the constant of proportionality is the same for all rows
    if data_frame['Constant'].nunique() == 1:
        return data_frame['Constant'].values[0]
    else:
        return None","data = {
    'Time': [2, 4, 9, 20],
    'Distance': [2, 4, 9, 20]
}

df = pd.DataFrame(data)
print(calculate_constant_of_proportionality_between_two_variables(data_frame=df, variable1_col=""Time"", variable2_col=""Distance""))"
"Danny is the proud owner of an eclectic bow tie collection. He keeps track of how many bow ties he has, and organizes them by pattern and material. What is the probability that a randomly selected bow tie is designed with swirls and is made of cotton? Simplify any fractions.",0.15," | Velvet | Cotton
Zigzags | 7 | 5
Swirls | 5 | 3",8,5406,"import pandas as pd

def calculate_probability(df, pattern, material):
    """"""
    This function takes in a pandas DataFrame representing a bow tie collection table, a pattern, and a material, and returns the probability of selecting a bow tie with the given pattern and material.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of bow ties organized by pattern and material.
    pattern (str): The pattern of the bow tie to calculate the probability for.
    material (str): The material of the bow tie to calculate the probability for.
    Returns:
    float: The probability of selecting a bow tie with the given pattern and material.
    """"""
    # Calculate the total number of bow ties
    total_bow_ties = df.sum().sum()
    
    # Get the number of bow ties with the given pattern and material
    selected_bow_ties = df.loc[pattern, material]
    
    # Calculate the probability
    probability = selected_bow_ties / total_bow_ties
    
    return probability","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Velvet': [7, 5],
    'Cotton': [5, 3]
}, index=['Zigzags', 'Swirls'])

# Call the tool to solve the problem
probability = calculate_probability(df, 'Swirls', 'Cotton')

# Print the answer
print(probability)","def calculate_probability_of_category_combination(data_frame, category1, category2):
    """"""
    This function takes in a pandas DataFrame representing a table of categorical counts and two categories, and returns the probability of the specific combination of the two categories.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing counts of combinations of two categories.
    category1 (str): The first category of the combination.
    category2 (str): The second category of the combination.
    
    Returns:
    float: The probability of the specific combination of the two categories.
    """"""
    # Calculate the total count of all categories
    total_count = data_frame.sum().sum()
    
    # Get the count of the specific combination of categories
    specific_count = data_frame.loc[category1, category2]
    
    # Calculate the probability
    probability = specific_count / total_count
    
    return probability","df = pd.DataFrame({
    'Velvet': [7, 5],
    'Cotton': [5, 3]
}, index=['Zigzags', 'Swirls'])

print(calculate_probability_of_category_combination(data_frame=df, category1='Swirls', category2='Cotton'))"
Martha is a physical therapist who specializes in leg injuries. Her patients differ in age and type of injury. What is the probability that a randomly selected patient suffers from ankle pain and is 0-12 years old? Simplify any fractions.,0.375," | 0-12 years old | 13-19 years old
Knee pain | 3 | 1
Ankle pain | 6 | 6",8,13903,"import pandas as pd

def create_probability_table(df):
    """"""
    This function takes in a pandas DataFrame representing a table of leg injuries and their frequencies, and returns a DataFrame with the probabilities of each injury and age group.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing leg injuries and their frequencies with columns 'Injury', '0-12 years old', and '13-19 years old'.
    Returns:
    pd.DataFrame: A DataFrame with the probabilities of each injury and age group.
    """"""
    # Calculate the total number of patients
    total_patients = df['0-12 years old'].sum() + df['13-19 years old'].sum()
    
    # Calculate the probabilities for each injury and age group
    df['0-12 years old'] = df['0-12 years old'] / total_patients
    df['13-19 years old'] = df['13-19 years old'] / total_patients
    
    return df

def find_probability(df, injury, age_group):
    """"""
    This function takes in a pandas DataFrame representing a probability table of leg injuries and their age groups, and returns the probability of a specific injury and age group.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing leg injuries and their probabilities with columns 'Injury', '0-12 years old', and '13-19 years old'.
    injury (str): The injury to find the probability for.
    age_group (str): The age group to find the probability for.
    Returns:
    float: The probability of the specific injury and age group.
    """"""
    # Filter the DataFrame for the specific injury
    injury_df = df[df['Injury'] == injury]
    
    # Get the probability for the specific age group
    probability = injury_df[age_group].values[0]
    
    return probability","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Injury': ['Knee pain', 'Ankle pain'],
    '0-12 years old': [3, 6],
    '13-19 years old': [1, 6]
})

# Create the probability table
probability_table = create_probability_table(df)

# Find the probability of a randomly selected patient suffering from ankle pain and being 0-12 years old
probability = find_probability(probability_table, 'Ankle pain', '0-12 years old')

# Print the answer
print(probability)","def calculate_probability_of_event_from_frequency_table(frequency_df, event_col, category_cols, event_name, category_name):
    """"""
    This function takes in a pandas DataFrame representing a table of event frequencies and calculates the probability of a specific event and category.
    
    Args:
    frequency_df (pd.DataFrame): A pandas DataFrame containing event names and their frequencies in different categories.
    event_col (str): The column name for the event names.
    category_cols (list): A list of column names for the categories.
    event_name (str): The name of the event to find the probability for.
    category_name (str): The name of the category to find the probability for.
    
    Returns:
    float: The probability of the specific event and category.
    """"""
    # Calculate the total frequency of all events
    total_frequency = frequency_df[category_cols].sum().sum()
    
    # Filter the DataFrame for the specific event
    event_df = frequency_df[frequency_df[event_col] == event_name]
    
    # Get the frequency for the specific category
    event_frequency = event_df[category_name].values[0]
    
    # Calculate the probability
    probability = event_frequency / total_frequency
    
    return probability","frequency_data = {
    'Injury': ['Knee pain', 'Ankle pain'],
    '0-12 years old': [3, 6],
    '13-19 years old': [1, 6]
}

frequency_df = pd.DataFrame(frequency_data)

print(calculate_probability_of_event_from_frequency_table(frequency_df, 'Injury', ['0-12 years old', '13-19 years old'], 'Ankle pain', '0-12 years old'))"
"Some friends discussed the sizes of their coin collections. If you combine their collections, how many coins do Reagan and Felipe have?",2784,"Name | Number of coins
Derek | 6,325
Reagan | 1,380
Felipe | 1,404
Patrick | 2,500",3,6885,"import pandas as pd

def calculate_total_coins(df, names):
    """"""
    This function takes in a pandas DataFrame representing a table of names and their coin collections, and a list of names, and returns the total number of coins for the given names.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing names and their coin collections with columns 'Name' and 'Number of coins'.
    names (list): A list of names for which the total number of coins is to be calculated.
    Returns:
    int: The total number of coins for the given names.
    """"""
    # Initialize the total number of coins
    total_coins = 0
    
    # Iterate through the names and calculate the total number of coins
    for name in names:
        # Filter the DataFrame for the specific name
        name_df = df[df['Name'] == name]
        if not name_df.empty:
            num_coins = name_df['Number of coins'].values[0]
            total_coins += num_coins
    
    return total_coins","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Name': ['Derek', 'Reagan', 'Felipe', 'Patrick'],
    'Number of coins': [6325, 1380, 1404, 2500]
})
# Call the tool to solve the problem
total_coins = calculate_total_coins(df, ['Reagan', 'Felipe'])
print(total_coins)","def calculate_total_attribute_value_for_entities(data_frame, entity_col, attribute_col, entity_list):
    """"""
    This function takes in a pandas DataFrame representing a table of entity names and their attribute values, and a list of entity names, and returns the total value of the attribute for the given entities.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing entity names and their attribute values.
    entity_col (str): The column name for the entity names.
    attribute_col (str): The column name for the attribute values.
    entity_list (list): A list of entity names for which the total value of the attribute is to be calculated.
    
    Returns:
    int: The total value of the attribute for the given entities.
    """"""
    # Initialize the total value of the attribute
    total_value = 0
    
    # Iterate through the entity names and calculate the total value of the attribute
    for entity_name in entity_list:
        # Filter the DataFrame for the specific entity name
        entity_df = data_frame[data_frame[entity_col] == entity_name]
        if not entity_df.empty:
            attribute_value = entity_df[attribute_col].values[0]
            total_value += attribute_value
    
    return total_value","data = {
    'Name': ['Derek', 'Reagan', 'Felipe', 'Patrick'],
    'Number of coins': [6325, 1380, 1404, 2500]
}

df = pd.DataFrame(data)
entity_list = ['Reagan', 'Felipe']
print(calculate_total_attribute_value_for_entities(data_frame=df, entity_col=""Name"", attribute_col=""Number of coins"", entity_list=entity_list))"
"For an economics project, Denise determined the cost of ferry rides for bicycles and cars. How much does it cost to take a bicycle on the Ocracoke ferry?",3,"Ferry | Bicycle | Car
Ocracoke | $3 | $15
Fauntleroy-Vashon | $5 | $15
Seattle-Bremerton | $8 | $12
Mukilteu-Clinton | $5 | $7",5,9734,"import pandas as pd

def get_bicycle_cost_on_ferry(ferry_df, ferry_name):
    """"""
    This function takes in a pandas DataFrame representing a ferry table and a ferry name, and returns the cost of taking a bicycle on the specified ferry.
    Args:
    ferry_df (pd.DataFrame): A pandas DataFrame containing ferry names and their costs for bicycles and cars with columns 'Ferry', 'Bicycle', and 'Car'.
    ferry_name (str): The name of the ferry.
    Returns:
    float: The cost of taking a bicycle on the specified ferry.
    """"""
    # Filter the DataFrame for the specific ferry
    ferry_df = ferry_df[ferry_df['Ferry'] == ferry_name]
    if not ferry_df.empty:
        bicycle_cost = ferry_df['Bicycle'].values[0]
        return bicycle_cost
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Ferry': ['Ocracoke', 'Fauntleroy-Vashon', 'Seattle-Bremerton', 'Mukilteu-Clinton'],
    'Bicycle': [3, 5, 8, 5],
    'Car': [15, 15, 12, 7]
})
# Call the tool to solve the problem
bicycle_cost = get_bicycle_cost_on_ferry(df, 'Ocracoke')
print(bicycle_cost)","def get_item_cost_for_entity(cost_df, entity_col, item_col, entity_name):
    """"""
    This function takes in a pandas DataFrame representing a table of entities and items and their costs, and returns the cost of the specified item for the specified entity.
    
    Args:
    cost_df (pd.DataFrame): A pandas DataFrame containing entity names and their costs for various items.
    entity_col (str): The column name for the entity names.
    item_col (str): The column name for the item costs.
    entity_name (str): The name of the entity.
    
    Returns:
    float: The cost of the item for the specified entity.
    """"""
    # Filter the DataFrame for the specific entity
    entity_df = cost_df[cost_df[entity_col] == entity_name]
    if not entity_df.empty:
        item_cost = entity_df[item_col].values[0]
        return item_cost
    else:
        return None","df = pd.DataFrame({
    'Ferry': ['Ocracoke', 'Fauntleroy-Vashon', 'Seattle-Bremerton', 'Mukilteu-Clinton'],
    'Bicycle': [3, 5, 8, 5],
    'Car': [15, 15, 12, 7]
})
print(get_item_cost_for_entity(cost_df=df, entity_col='Ferry', item_col='Bicycle', entity_name='Ocracoke'))"
"For an economics project, Eduardo determined the cost of ferry rides for bicycles and cars. How much higher is the fare for a car on the Mukilteu-Clinton ferry than on the Southport-Fort Fisher ferry?",2,"Ferry | Bicycle | Car
Fauntleroy-Vashon | $5 | $15
Ocracoke | $3 | $15
Southport-Fort Fisher | $2 | $5
Seattle-Bremerton | $8 | $12
Mukilteu-Clinton | $5 | $7",5,16135,"import pandas as pd

def calculate_fare_difference(df, ferry1, ferry2, vehicle_type):
    """"""
    This function takes in a pandas DataFrame representing a ferry fare table, two ferry names, and a vehicle type, and returns the fare difference between the two ferries for the specified vehicle type.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing ferry names and fares for bicycles and cars with columns 'Ferry', 'Bicycle', and 'Car'.
    ferry1 (str): The name of the first ferry.
    ferry2 (str): The name of the second ferry.
    vehicle_type (str): The type of vehicle for which to calculate the fare difference ('Bicycle' or 'Car').
    Returns:
    float: The fare difference between the two ferries for the specified vehicle type.
    """"""
    # Filter the DataFrame for the specified ferries
    ferry1_df = df[df['Ferry'] == ferry1]
    ferry2_df = df[df['Ferry'] == ferry2]
    
    # Check if both ferries are in the DataFrame
    if not ferry1_df.empty and not ferry2_df.empty:
        # Calculate the fare difference for the specified vehicle type
        fare_difference = abs(ferry1_df[vehicle_type].values[0] - ferry2_df[vehicle_type].values[0])
        return fare_difference
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Ferry': ['Fauntleroy-Vashon', 'Ocracoke', 'Southport-Fort Fisher', 'Seattle-Bremerton', 'Mukilteu-Clinton'],
    'Bicycle': [5, 3, 2, 8, 5],
    'Car': [15, 15, 5, 12, 7]
})

# Call the tool to solve the problem
fare_difference = calculate_fare_difference(df, 'Mukilteu-Clinton', 'Southport-Fort Fisher', 'Car')
print(fare_difference)","def calculate_difference_between_two_entities_in_category(fare_table, entity_col, category_col, entity1, entity2):
    """"""
    This function takes in a pandas DataFrame representing a fare table, two entity names, and a category, and returns the fare difference between the two entities for the specified category.
    
    Args:
    fare_table (pd.DataFrame): A pandas DataFrame containing entity names and fares for different categories.
    entity_col (str): The column name for the entity names.
    category_col (str): The column name for the category.
    entity1 (str): The name of the first entity.
    entity2 (str): The name of the second entity.
    
    Returns:
    float: The fare difference between the two entities for the specified category.
    """"""
    # Filter the DataFrame for the specified entities
    entity1_df = fare_table[fare_table[entity_col] == entity1]
    entity2_df = fare_table[fare_table[entity_col] == entity2]
    
    # Check if both entities are in the DataFrame
    if not entity1_df.empty and not entity2_df.empty:
        # Calculate the fare difference for the specified category
        fare_difference = abs(entity1_df[category_col].values[0] - entity2_df[category_col].values[0])
        return fare_difference
    else:
        return None","fare_table = pd.DataFrame({
    'Ferry': ['Fauntleroy-Vashon', 'Ocracoke', 'Southport-Fort Fisher', 'Seattle-Bremerton', 'Mukilteu-Clinton'],
    'Bicycle': [5, 3, 2, 8, 5],
    'Car': [15, 15, 5, 12, 7]
})

print(calculate_difference_between_two_entities_in_category(fare_table, 'Ferry', 'Car', 'Mukilteu-Clinton', 'Southport-Fort Fisher'))"
A transportation analyst compared various bridges' tolls. How much higher is the toll for a truck on the Golden Gate bridge than on the Fort Madison bridge?,3,"Bridge | Truck | Car
Golden Gate | $7 | $6
Fort Madison | $4 | $1
Oakland Bay | $6 | $4",4,6103,"import pandas as pd

def calculate_toll_difference(df, bridge1, bridge2, vehicle_type):
    """"""
    This function takes in a pandas DataFrame representing a toll table, two bridge names, and a vehicle type, and returns the difference in tolls between the two bridges for the specified vehicle type.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing bridge names and their tolls for different vehicle types.
    bridge1 (str): The name of the first bridge.
    bridge2 (str): The name of the second bridge.
    vehicle_type (str): The type of vehicle.
    Returns:
    float: The difference in tolls between the two bridges for the specified vehicle type.
    """"""
    # Filter the DataFrame for the specific bridges and vehicle type
    bridge1_df = df[df['Bridge'] == bridge1]
    bridge2_df = df[df['Bridge'] == bridge2]
    
    # Get the tolls for the specified vehicle type on the two bridges
    bridge1_toll = bridge1_df[vehicle_type].values[0]
    bridge2_toll = bridge2_df[vehicle_type].values[0]
    
    # Calculate the difference in tolls
    toll_difference = bridge1_toll - bridge2_toll
    
    return toll_difference","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Bridge': ['Golden Gate', 'Fort Madison', 'Oakland Bay'],
    'Truck': [7, 4, 6],
    'Car': [6, 1, 4]
})
# Call the tool to solve the problem
toll_difference = calculate_toll_difference(df, 'Golden Gate', 'Fort Madison', 'Truck')
print(toll_difference)","def calculate_difference_between_two_rows_for_column(df, row_id_col, value_col, row_id1, row_id2):
    """"""
    This function takes in a pandas DataFrame, a column for row identifiers, a column for values, and two row identifiers, and returns the difference in values between the two rows for the specified column.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing various rows and columns.
    row_id_col (str): The column name for the row identifiers.
    value_col (str): The column name for the values.
    row_id1 (str): The identifier for the first row.
    row_id2 (str): The identifier for the second row.
    
    Returns:
    float: The difference in values between the two rows for the specified column.
    """"""
    # Filter the DataFrame for the specific rows
    row1_df = df[df[row_id_col] == row_id1]
    row2_df = df[df[row_id_col] == row_id2]
    
    # Get the values for the specified column on the two rows
    row1_value = row1_df[value_col].values[0]
    row2_value = row2_df[value_col].values[0]
    
    # Calculate the difference in values
    value_difference = row1_value - row2_value
    
    return value_difference","df = pd.DataFrame({
    'Bridge': ['Golden Gate', 'Fort Madison', 'Oakland Bay'],
    'Truck': [7, 4, 6],
    'Car': [6, 1, 4]
})
print(calculate_difference_between_two_rows_for_column(df, 'Bridge', 'Truck', 'Golden Gate', 'Fort Madison'))"
Each pen has 2 cows. How many cows are in 4 pens?,8,"Number of pens | Number of cows
1 | 2
2 | 4
3 | 6
4 | ?",1,13541,"import pandas as pd

def find_cows_in_pens(df, target_pens):
    """"""
    This function takes in a pandas DataFrame representing the number of cows in pens and a target number of pens, and returns the number of cows in the target number of pens.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of pens and the corresponding number of cows with columns 'Number of pens' and 'Number of cows'.
    target_pens (int): The target number of pens for which the number of cows needs to be found.
    Returns:
    int: The number of cows in the target number of pens.
    """"""
    # Find the number of cows per pen
    cows_per_pen = df['Number of cows'][0] / df['Number of pens'][0]
    
    # Calculate the number of cows in the target number of pens
    cows_in_target_pens = target_pens * cows_per_pen
    
    return int(cows_in_target_pens)","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of pens': [1, 2, 3],
    'Number of cows': [2, 4, 6]
})

# Call the tool to solve the problem
print(find_cows_in_pens(df, 4))","def calculate_items_in_target_groups(df, group_col, item_col, target_groups):
    """"""
    This function takes in a pandas DataFrame representing a table of item counts per group and a target number of groups, and returns the number of items in the target number of groups.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of groups and the corresponding number of items with columns specified by group_col and item_col.
    group_col (str): The column name for the group counts.
    item_col (str): The column name for the item counts.
    target_groups (int): The target number of groups for which the number of items needs to be found.
    
    Returns:
    int: The number of items in the target number of groups.
    """"""
    # Find the number of items per group
    items_per_group = df[item_col][0] / df[group_col][0]
    
    # Calculate the number of items in the target number of groups
    items_in_target_groups = target_groups * items_per_group
    
    return int(items_in_target_groups)","df = pd.DataFrame({
    'Number of pens': [1, 2, 3],
    'Number of cows': [2, 4, 6]
})

print(calculate_items_in_target_groups(df, 'Number of pens', 'Number of cows', 4))"
"For an economics project, Josiah determined the cost of ferry rides for bicycles and cars. How much does it cost to take a car on the Southport-Fort Fisher ferry?",5,"Ferry | Bicycle | Car
Fauntleroy-Vashon | $5 | $15
Ocracoke | $3 | $15
Mukilteu-Clinton | $5 | $7
Southport-Fort Fisher | $2 | $5",5,16138,"import pandas as pd

def get_ferry_cost(ferry_df, ferry_name, vehicle_type):
    """"""
    This function takes in a pandas DataFrame representing a ferry cost table, a ferry name, and a vehicle type, and returns the cost of the ferry ride for the specified vehicle type.
    Args:
    ferry_df (pd.DataFrame): A pandas DataFrame containing ferry names and their costs for different vehicle types with columns 'Ferry', 'Bicycle', and 'Car'.
    ferry_name (str): The name of the ferry.
    vehicle_type (str): The type of the vehicle.
    Returns:
    float: The cost of the ferry ride for the specified vehicle type.
    """"""
    # Filter the DataFrame for the specific ferry
    ferry_df = ferry_df[ferry_df['Ferry'] == ferry_name]
    
    # If the ferry is found in the DataFrame, return the cost for the specified vehicle type
    if not ferry_df.empty:
        return ferry_df[vehicle_type].values[0]
    
    # If the ferry is not found in the DataFrame, return None
    return None","# Initialize the table into a dataframe
ferry_df = pd.DataFrame({
    'Ferry': ['Fauntleroy-Vashon', 'Ocracoke', 'Mukilteu-Clinton', 'Southport-Fort Fisher'],
    'Bicycle': [5, 3, 5, 2],
    'Car': [15, 15, 7, 5]
})

# Call the tool to solve the problem
cost = get_ferry_cost(ferry_df, 'Southport-Fort Fisher', 'Car')
print(cost)","def get_service_cost_for_item(service_costs_df, service_col, item_col, service_name, item_name):
    """"""
    This function takes in a pandas DataFrame representing a table of service costs for various items, a service name, and an item name, and returns the cost of the service for the specified item.
    
    Args:
    service_costs_df (pd.DataFrame): A pandas DataFrame containing service names and their costs for different items.
    service_col (str): The column name for the service names.
    item_col (str): The column name for the item names.
    service_name (str): The name of the service.
    item_name (str): The name of the item.
    
    Returns:
    float: The cost of the service for the specified item, or None if the service is not found in the DataFrame.
    """"""
    # Filter the DataFrame for the specific service
    service_df = service_costs_df[service_costs_df[service_col] == service_name]
    
    # If the service is found in the DataFrame, return the cost for the specified item
    if not service_df.empty:
        return service_df[item_name].values[0]
    
    # If the service is not found in the DataFrame, return None
    return None","service_costs_data = {
    'Ferry': ['Fauntleroy-Vashon', 'Ocracoke', 'Mukilteu-Clinton', 'Southport-Fort Fisher'],
    'Bicycle': [5, 3, 5, 2],
    'Car': [15, 15, 7, 5]
}

service_costs_df = pd.DataFrame(service_costs_data)

print(get_service_cost_for_item(service_costs_df, ""Ferry"", ""Car"", 'Southport-Fort Fisher', 'Car'))"
"For an economics project, Wesley determined the cost of ferry rides for bicycles and cars. How much does it cost to take a car on the Ocracoke ferry?",15,"Ferry | Bicycle | Car
Seattle-Bremerton | $8 | $12
Southport-Fort Fisher | $2 | $5
Ocracoke | $3 | $15",4,16299,"import pandas as pd

def get_ferry_cost(df, ferry_name, vehicle_type):
    """"""
    This function takes in a pandas DataFrame representing a ferry cost table, a ferry name, and a vehicle type, and returns the cost of the ferry ride for the specified vehicle type.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing ferry names, and costs for bicycles and cars with columns 'Ferry', 'Bicycle', and 'Car'.
    ferry_name (str): The name of the ferry.
    vehicle_type (str): The type of vehicle ('Bicycle' or 'Car').
    Returns:
    float: The cost of the ferry ride for the specified vehicle type.
    """"""
    # Filter the DataFrame for the specific ferry
    ferry_df = df[df['Ferry'] == ferry_name]
    
    # Get the cost for the specified vehicle type
    if not ferry_df.empty:
        cost = ferry_df[vehicle_type].values[0]
        return cost
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Ferry': ['Seattle-Bremerton', 'Southport-Fort Fisher', 'Ocracoke'],
    'Bicycle': [8, 2, 3],
    'Car': [12, 5, 15]
})
# Call the tool to solve the problem
print(get_ferry_cost(df, 'Ocracoke', 'Car'))","def get_cost_for_item_and_service(costs_df, item_col, service_col, item_name, service_type):
    """"""
    This function takes in a pandas DataFrame representing a table of costs for different items and services, and returns the cost for a specific item and service.
    
    Args:
    costs_df (pd.DataFrame): A pandas DataFrame containing item names and costs for different services.
    item_col (str): The column name for the item names.
    service_col (str): The column name for the service types.
    item_name (str): The name of the item.
    service_type (str): The type of service.
    
    Returns:
    float: The cost for the specified item and service.
    """"""
    # Filter the DataFrame for the specific item
    item_df = costs_df[costs_df[item_col] == item_name]
    
    # Get the cost for the specified service type
    if not item_df.empty:
        cost = item_df[service_type].values[0]
        return cost
    else:
        return None","costs_data = {
    'Ferry': ['Seattle-Bremerton', 'Southport-Fort Fisher', 'Ocracoke'],
    'Bicycle': [8, 2, 3],
    'Car': [12, 5, 15]
}

costs_df = pd.DataFrame(costs_data)

print(get_cost_for_item_and_service(costs_df, ""Ferry"", [""Bicycle"", ""Car""], ""Ocracoke"", ""Car""))"
The Mountain Moose Lodge has many customer reviews online. The number of reviews is shown in the frequency chart. Paula visits the Mountain Moose Lodge with her friends and has a great time. Paula and her friends leave 4 reviews that are all 5 stars. How many reviews does the Mountain Moose Lodge have now?,155,"Rating | Frequency
5 stars | 81
4 stars | 54
3 stars | 5
2 stars | 2
1 star | 9",5,12148,"import pandas as pd

def calculate_total_reviews(df, new_reviews):
    """"""
    This function takes in a pandas DataFrame representing a review table and a dictionary of new reviews, and returns the total number of reviews after adding the new reviews.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing review ratings and their frequencies with columns 'Rating' and 'Frequency'.
    new_reviews (dict): A dictionary where the keys are review ratings and the values are the number of new reviews for each rating.
    Returns:
    int: The total number of reviews after adding the new reviews.
    """"""
    # Iterate through the new reviews and add them to the corresponding rating in the DataFrame
    for rating, quantity in new_reviews.items():
        # Filter the DataFrame for the specific rating
        rating_df = df[df['Rating'] == rating]
        if not rating_df.empty:
            df.loc[df['Rating'] == rating, 'Frequency'] += quantity
    
    # Calculate the total number of reviews
    total_reviews = df['Frequency'].sum()
    
    return total_reviews","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Rating': ['5 stars', '4 stars', '3 stars', '2 stars', '1 star'],
    'Frequency': [81, 54, 5, 2, 9]
})

# Initialize the new reviews
new_reviews = {'5 stars': 4}

# Call the tool to solve the problem
total_reviews = calculate_total_reviews(df, new_reviews)
print(total_reviews)","def update_total_items_from_frequencies_and_new_quantities(item_freq_df, item_col, frequency_col, new_item_quantities):
    """"""
    This function takes in a pandas DataFrame representing a table of item frequencies and a dictionary of new item quantities, and returns the total number of items after adding the new quantities based on the frequencies and new quantities.
    
    Args:
    item_freq_df (pd.DataFrame): A pandas DataFrame containing item names and their frequencies.
    item_col (str): The column name for the item names.
    frequency_col (str): The column name for the item frequencies.
    new_item_quantities (dict): A dictionary where the keys are item names and the values are the new quantities of each item.
    
    Returns:
    int: The total number of items after adding the new quantities.
    """"""
    # Iterate through the new item quantities and add them to the corresponding item in the DataFrame
    for item_name, new_quantity in new_item_quantities.items():
        # Filter the DataFrame for the specific item name
        item_freq_df_filtered = item_freq_df[item_freq_df[item_col] == item_name]
        if not item_freq_df_filtered.empty:
            item_freq_df.loc[item_freq_df[item_col] == item_name, frequency_col] += new_quantity
    
    # Calculate the total number of items
    total_items = item_freq_df[frequency_col].sum()
    
    return total_items","item_freq_data = {
    'Rating': ['5 stars', '4 stars', '3 stars', '2 stars', '1 star'],
    'Frequency': [81, 54, 5, 2, 9]
}

item_freq_df = pd.DataFrame(item_freq_data)

new_item_quantities = {""5 stars"": 4}
print(update_total_items_from_frequencies_and_new_quantities(item_freq_df, ""Rating"", ""Frequency"", new_item_quantities))"
"For an economics project, Victor determined the cost of ferry rides for bicycles and cars. How much higher is the fare for a bicycle on the Mukilteu-Clinton ferry than on the Southport-Fort Fisher ferry?",3,"Ferry | Bicycle | Car
Seattle-Bremerton | $8 | $12
Southport-Fort Fisher | $2 | $5
Mukilteu-Clinton | $5 | $7",4,1304,"import pandas as pd

def calculate_fare_difference(df, ferry1, ferry2):
    """"""
    This function takes in a pandas DataFrame representing a ferry fare table, and two ferry names, and returns the difference in bicycle fare between the two ferries.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing ferry names and their fares for bicycles and cars with columns 'Ferry', 'Bicycle', 'Car'.
    ferry1 (str): The name of the first ferry.
    ferry2 (str): The name of the second ferry.
    Returns:
    float: The difference in bicycle fare between the two ferries.
    """"""
    # Filter the DataFrame for the specific ferries
    ferry1_df = df[df['Ferry'] == ferry1]
    ferry2_df = df[df['Ferry'] == ferry2]
    
    # Get the bicycle fare for each ferry
    ferry1_bicycle_fare = ferry1_df['Bicycle'].values[0]
    ferry2_bicycle_fare = ferry2_df['Bicycle'].values[0]
    
    # Calculate the difference in fare
    fare_difference = ferry1_bicycle_fare - ferry2_bicycle_fare
    
    return fare_difference","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Ferry': ['Seattle-Bremerton', 'Southport-Fort Fisher', 'Mukilteo-Clinton'],
    'Bicycle': [8, 2, 5],
    'Car': [12, 5, 7]
})

# Call the tool to solve the problem
fare_difference = calculate_fare_difference(df, 'Mukilteo-Clinton', 'Southport-Fort Fisher')

# Print the answer
print(fare_difference)","def calculate_cost_difference_between_two_entities(cost_df, entity_col, item_col, entity1, entity2):
    """"""
    This function takes in a pandas DataFrame representing a table of costs for different entities and items, and two entity names, and returns the difference in cost for a specific item between the two entities.
    
    Args:
    cost_df (pd.DataFrame): A pandas DataFrame containing entity names and their costs for different items.
    entity_col (str): The column name for the entity names.
    item_col (str): The column name for the item costs.
    entity1 (str): The name of the first entity.
    entity2 (str): The name of the second entity.
    
    Returns:
    float: The difference in cost for the specific item between the two entities.
    """"""
    # Filter the DataFrame for the specific entities
    entity1_df = cost_df[cost_df[entity_col] == entity1]
    entity2_df = cost_df[cost_df[entity_col] == entity2]
    
    # Get the cost for the item for each entity
    entity1_item_cost = entity1_df[item_col].values[0]
    entity2_item_cost = entity2_df[item_col].values[0]
    
    # Calculate the difference in cost
    cost_difference = entity1_item_cost - entity2_item_cost
    
    return cost_difference","cost_data = {
    'Ferry': ['Seattle-Bremerton', 'Southport-Fort Fisher', 'Mukilteo-Clinton'],
    'Bicycle': [8, 2, 5],
    'Car': [12, 5, 7]
}

cost_df = pd.DataFrame(cost_data)

print(calculate_cost_difference_between_two_entities(cost_df, ""Ferry"", ""Bicycle"", 'Mukilteo-Clinton', 'Southport-Fort Fisher'))"
Millersburg will decide whether to extend its public pool's hours by looking at the number of times its residents visited the pool last month. How many people went swimming exactly once last month?,4,"Number of times | Frequency
1 | 4
2 | 12
3 | 16
4 | 19",8,4405,"import pandas as pd

def count_people_with_exact_visits(df, target_visits):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of visits to a public pool and a target number of visits, and returns the number of people who visited the pool exactly the target number of times.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of times people visited the pool and the frequency of those visits with columns 'Number of times' and 'Frequency'.
    target_visits (int): The target number of visits to filter the DataFrame.
    Returns:
    int: The number of people who visited the pool exactly the target number of times.
    """"""
    # Filter the DataFrame for the target number of visits
    target_df = df[df['Number of times'] == target_visits]
    
    # If the target number of visits is found in the DataFrame, return the corresponding frequency
    if not target_df.empty:
        return target_df['Frequency'].values[0]
    else:
        return 0","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of times': [1, 2, 3, 4],
    'Frequency': [4, 12, 16, 19]
})
# Call the tool to solve the problem
print(count_people_with_exact_visits(df, 1))","def count_frequency_of_target_value(frequency_df, value_col, frequency_col, target_value):
    """"""
    This function takes in a pandas DataFrame representing a frequency table, a target value, and returns the frequency of the target value.
    
    Args:
    frequency_df (pd.DataFrame): A pandas DataFrame containing values and their frequencies.
    value_col (str): The column name for the values.
    frequency_col (str): The column name for the frequencies.
    target_value (int): The target value to filter the DataFrame.
    
    Returns:
    int: The frequency of the target value.
    """"""
    # Filter the DataFrame for the target value
    target_df = frequency_df[frequency_df[value_col] == target_value]
    
    # If the target value is found in the DataFrame, return the corresponding frequency
    if not target_df.empty:
        return target_df[frequency_col].values[0]
    else:
        return 0","frequency_data = {
    'Number of times': [1, 2, 3, 4],
    'Frequency': [4, 12, 16, 19]
}

frequency_df = pd.DataFrame(frequency_data)

print(count_frequency_of_target_value(frequency_df, 'Number of times', 'Frequency', 1))"
"For an economics project, Rob determined the cost of ferry rides for bicycles and cars. How much does it cost to take a bicycle on the Southport-Fort Fisher ferry?",2,"Ferry | Bicycle | Car
Mukilteu-Clinton | $5 | $7
Southport-Fort Fisher | $2 | $5
Seattle-Bremerton | $8 | $12
Ocracoke | $3 | $15",5,5738,"import pandas as pd

def get_ferry_cost(ferry_df, ferry_name, vehicle_type):
    """"""
    This function takes in a pandas DataFrame representing a ferry cost table, a ferry name, and a vehicle type, and returns the cost of the ferry ride for the specified vehicle type.
    Args:
    ferry_df (pd.DataFrame): A pandas DataFrame containing ferry names and their costs for bicycles and cars with columns 'Ferry', 'Bicycle', and 'Car'.
    ferry_name (str): The name of the ferry.
    vehicle_type (str): The type of vehicle ('Bicycle' or 'Car').
    Returns:
    float: The cost of the ferry ride for the specified vehicle type.
    """"""
    # Filter the DataFrame for the specific ferry
    ferry_row = ferry_df[ferry_df['Ferry'] == ferry_name]
    
    if not ferry_row.empty:
        return ferry_row[vehicle_type].values[0]
    else:
        return None","# Initialize the table into a dataframe
ferry_df = pd.DataFrame({
    'Ferry': ['Mukilteu-Clinton', 'Southport-Fort Fisher', 'Seattle-Bremerton', 'Ocracoke'],
    'Bicycle': [5, 2, 8, 3],
    'Car': [7, 5, 12, 15]
})

# Call the tool to solve the problem
cost = get_ferry_cost(ferry_df, 'Southport-Fort Fisher', 'Bicycle')
print(cost)","def get_cost_for_service(data_frame, item_col, service_col, item_name):
    """"""
    This function takes in a pandas DataFrame representing a table of item costs for various services, an item name, and a service type, and returns the cost of the service for the specified item.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing item names and their costs for various services.
    item_col (str): The column name for the item names.
    service_col (str): The column name for the service types.
    item_name (str): The name of the item.
    
    Returns:
    float: The cost of the service for the specified item.
    """"""
    # Filter the DataFrame for the specific item
    item_row = data_frame[data_frame[item_col] == item_name]
    
    if not item_row.empty:
        return item_row[service_col].values[0]
    else:
        return None","data = {
    'Ferry': ['Mukilteu-Clinton', 'Southport-Fort Fisher', 'Seattle-Bremerton', 'Ocracoke'],
    'Bicycle': [5, 2, 8, 3],
    'Car': [7, 5, 12, 15]
}

df = pd.DataFrame(data)
print(get_cost_for_service(data_frame=df, item_col='Ferry', service_col='Bicycle', item_name='Southport-Fort Fisher'))"
A transportation analyst compared various bridges' tolls. How much higher is the toll for a carpool on the Hatem bridge than on the Tacoma Narrows bridge?,2,"Bridge | Car | Carpool
Fort Madison | $1 | $1
Hatem | $5 | $5
Tacoma Narrows | $3 | $3
George Washington | $8 | $2",4,9030,"import pandas as pd

def calculate_toll_difference(df, bridge1, bridge2):
    """"""
    This function takes in a pandas DataFrame representing a bridge toll table and two bridge names, and returns the difference in carpool tolls between the two bridges.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing bridge names and their tolls with columns 'Bridge', 'Car', and 'Carpool'.
    bridge1 (str): The name of the first bridge.
    bridge2 (str): The name of the second bridge.
    Returns:
    float: The difference in carpool tolls between the two bridges.
    """"""
    # Filter the DataFrame for the specific bridges
    bridge1_df = df[df['Bridge'] == bridge1]
    bridge2_df = df[df['Bridge'] == bridge2]
    
    # Get the carpool tolls for the two bridges
    bridge1_toll = bridge1_df['Carpool'].values[0]
    bridge2_toll = bridge2_df['Carpool'].values[0]
    
    # Calculate the difference in tolls
    toll_difference = bridge1_toll - bridge2_toll
    
    return toll_difference","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Bridge': ['Fort Madison', 'Hatem', 'Tacoma Narrows', 'George Washington'],
    'Car': [1, 5, 3, 8],
    'Carpool': [1, 5, 3, 2]
})

# Call the tool to solve the problem
toll_difference = calculate_toll_difference(df, 'Hatem', 'Tacoma Narrows')

# Print the answer
print(toll_difference)","def calculate_attribute_difference_between_two_entities(df, entity_col, attribute_col, entity1, entity2):
    """"""
    This function takes in a pandas DataFrame representing a table of entities and their attributes, two entity names, and an attribute name, and returns the difference in the attribute values between the two entities.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing entity names and their attributes.
    entity_col (str): The column name for the entity names.
    attribute_col (str): The column name for the attribute values.
    entity1 (str): The name of the first entity.
    entity2 (str): The name of the second entity.
    
    Returns:
    float: The difference in attribute values between the two entities.
    """"""
    # Filter the DataFrame for the specific entities
    entity1_df = df[df[entity_col] == entity1]
    entity2_df = df[df[entity_col] == entity2]
    
    # Get the attribute values for the two entities
    entity1_value = entity1_df[attribute_col].values[0]
    entity2_value = entity2_df[attribute_col].values[0]
    
    # Calculate the difference in attribute values
    attribute_difference = entity1_value - entity2_value
    
    return attribute_difference","df = pd.DataFrame({
    'Bridge': ['Fort Madison', 'Hatem', 'Tacoma Narrows', 'George Washington'],
    'Car': [1, 5, 3, 8],
    'Carpool': [1, 5, 3, 2]
})

print(calculate_attribute_difference_between_two_entities(df, 'Bridge', 'Carpool', 'Hatem', 'Tacoma Narrows'))"
"A transportation analyst compared various bridges' tolls. On the Hatem bridge, how much more is the toll for a truck than for a car?",5,"Bridge | Truck | Car
Hatem | $10 | $5
Golden Gate | $7 | $6
George Washington | $16 | $8",4,1021,"import pandas as pd

def calculate_toll_difference(df, bridge_name):
    """"""
    This function takes in a pandas DataFrame representing a table of bridge tolls and a bridge name, and returns the difference in tolls between a truck and a car for the specified bridge.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing bridge tolls with columns 'Bridge', 'Truck', and 'Car'.
    bridge_name (str): The name of the bridge for which the toll difference is to be calculated.
    Returns:
    float: The difference in tolls between a truck and a car for the specified bridge.
    """"""
    # Filter the DataFrame for the specified bridge
    bridge_df = df[df['Bridge'] == bridge_name]
    
    if not bridge_df.empty:
        truck_toll = bridge_df['Truck'].values[0]
        car_toll = bridge_df['Car'].values[0]
        toll_difference = truck_toll - car_toll
        return toll_difference
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Bridge': ['Hatem', 'Golden Gate', 'George Washington'],
    'Truck': [10, 7, 16],
    'Car': [5, 6, 8]
})
# Call the tool to solve the problem
toll_difference = calculate_toll_difference(df, 'Hatem')
print(toll_difference)","def calculate_difference_between_columns_for_specific_row(data_frame, key_col, value_col1, value_col2, key_value):
    """"""
    This function takes in a pandas DataFrame, a key column, two value columns, and a key value, and returns the difference between the values of the two value columns for the row with the specified key value.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the data.
    key_col (str): The column name for the key values.
    value_col1 (str): The column name for the first value column.
    value_col2 (str): The column name for the second value column.
    key_value (str): The key value for which the difference is to be calculated.
    
    Returns:
    float: The difference between the values of the two value columns for the row with the specified key value.
    """"""
    # Filter the DataFrame for the specified key value
    row_df = data_frame[data_frame[key_col] == key_value]
    
    if not row_df.empty:
        value1 = row_df[value_col1].values[0]
        value2 = row_df[value_col2].values[0]
        difference = value1 - value2
        return difference
    else:
        return None","data = {
    'Bridge': ['Hatem', 'Golden Gate', 'George Washington'],
    'Truck': [10, 7, 16],
    'Car': [5, 6, 8]
}

df = pd.DataFrame(data)
print(calculate_difference_between_columns_for_specific_row(data_frame=df, key_col=""Bridge"", value_col1=""Truck"", value_col2=""Car"", key_value=""Hatem""))"
A transportation analyst compared various bridges' tolls. How much is the toll for a truck on the Golden Gate bridge?,7,"Bridge | Truck | Car
George Washington | $16 | $8
Golden Gate | $7 | $6
Oakland Bay | $6 | $4",5,14702,"import pandas as pd

def get_toll(df, bridge_name, vehicle_type):
    """"""
    This function takes in a pandas DataFrame representing a toll table, a bridge name, and a vehicle type, and returns the toll for the specified vehicle on the specified bridge.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing bridge names and tolls for different vehicle types.
    bridge_name (str): The name of the bridge.
    vehicle_type (str): The type of vehicle.
    Returns:
    float: The toll for the specified vehicle on the specified bridge.
    """"""
    # Filter the DataFrame for the specific bridge
    bridge_df = df[df['Bridge'] == bridge_name]
    if not bridge_df.empty:
        # Get the toll for the specified vehicle type
        toll = bridge_df[vehicle_type].values[0]
        return toll
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Bridge': ['George Washington', 'Golden Gate', 'Oakland Bay'],
    'Truck': [16, 7, 6],
    'Car': [8, 6, 4]
})
# Call the tool to solve the problem
toll = get_toll(df, 'Golden Gate', 'Truck')
print(toll)","def get_value_based_on_row_and_column_criteria(table_df, row_criterion_col, row_criterion_value, column_criterion):
    """"""
    This function takes in a pandas DataFrame, a column name for row criterion, a value for row criterion, and a column criterion, and returns the value in the table that meets both the row and column criteria.
    
    Args:
    table_df (pd.DataFrame): A pandas DataFrame containing various data.
    row_criterion_col (str): The column name for the row criterion.
    row_criterion_value (str): The value for the row criterion.
    column_criterion (str): The column criterion.
    
    Returns:
    float: The value in the table that meets both the row and column criteria.
    """"""
    # Filter the DataFrame for the specific row criterion
    row_criterion_df = table_df[table_df[row_criterion_col] == row_criterion_value]
    if not row_criterion_df.empty:
        # Get the value for the specified column criterion
        value = row_criterion_df[column_criterion].values[0]
        return value
    else:
        return None","df = pd.DataFrame({
    'Bridge': ['George Washington', 'Golden Gate', 'Oakland Bay'],
    'Truck': [16, 7, 6],
    'Car': [8, 6, 4]
})
print(get_value_based_on_row_and_column_criteria(table_df=df, row_criterion_col='Bridge', row_criterion_value='Golden Gate', column_criterion='Truck'))"
A transportation analyst compared various bridges' tolls. How much higher is the toll for a car on the Golden Gate bridge than on the Oakland Bay bridge?,2,"Bridge | Truck | Car
Oakland Bay | $6 | $4
Fort Madison | $4 | $1
Hatem | $10 | $5
Golden Gate | $7 | $6",4,6522,"import pandas as pd

def calculate_toll_difference(df, bridge1, bridge2, vehicle_type):
    """"""
    This function takes in a pandas DataFrame representing a table of bridge tolls, and calculates the difference in tolls for a specific vehicle type between two bridges.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing bridge names and their tolls for different vehicle types with columns 'Bridge', 'Truck', and 'Car'.
    bridge1 (str): The name of the first bridge.
    bridge2 (str): The name of the second bridge.
    vehicle_type (str): The type of vehicle for which the toll difference is to be calculated. It should be either 'Truck' or 'Car'.
    Returns:
    float: The difference in tolls for the specified vehicle type between the two bridges.
    """"""
    # Filter the DataFrame for the specific bridges
    bridge1_df = df[df['Bridge'] == bridge1]
    bridge2_df = df[df['Bridge'] == bridge2]
    
    # Get the tolls for the specified vehicle type on both bridges
    bridge1_toll = bridge1_df[vehicle_type].values[0]
    bridge2_toll = bridge2_df[vehicle_type].values[0]
    
    # Calculate the difference in tolls
    toll_difference = abs(bridge1_toll - bridge2_toll)
    
    return toll_difference","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Bridge': ['Oakland Bay', 'Fort Madison', 'Hatem', 'Golden Gate'],
    'Truck': [6, 4, 10, 7],
    'Car': [4, 1, 5, 6]
})
# Call the tool to solve the problem
toll_difference = calculate_toll_difference(df, 'Golden Gate', 'Oakland Bay', 'Car')
print(toll_difference)","def calculate_value_difference_between_entities(data_frame, entity_col, category_col, entity1, entity2, category_name):
    """"""
    This function takes in a pandas DataFrame representing a table with entities and their values for different categories, and calculates the difference in values for a specific category between two entities.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing entity names and their values for different categories.
    entity_col (str): The column name for the entity names.
    category_col (str): The column name for the category values.
    entity1 (str): The name of the first entity.
    entity2 (str): The name of the second entity.
    category_name (str): The name of the category for which the value difference is to be calculated.
    
    Returns:
    float: The difference in values for the specified category between the two entities.
    """"""
    # Filter the DataFrame for the specific entities
    entity1_df = data_frame[data_frame[entity_col] == entity1]
    entity2_df = data_frame[data_frame[entity_col] == entity2]
    
    # Get the values for the specified category for both entities
    entity1_value = entity1_df[category_col].values[0]
    entity2_value = entity2_df[category_col].values[0]
    
    # Calculate the difference in values
    value_difference = abs(entity1_value - entity2_value)
    
    return value_difference","data = {
    'Bridge': ['Oakland Bay', 'Fort Madison', 'Hatem', 'Golden Gate'],
    'Truck': [6, 4, 10, 7],
    'Car': [4, 1, 5, 6]
}

df = pd.DataFrame(data)
print(calculate_value_difference_between_entities(data_frame=df, entity_col=""Bridge"", category_col=""Car"", entity1=""Golden Gate"", entity2=""Oakland Bay"", category_name=""Car""))"
"For an economics project, Justin determined the cost of ferry rides for bicycles and cars. How much higher is the fare for a bicycle on the Seattle-Bremerton ferry than on the Fauntleroy-Vashon ferry?",3,"Ferry | Bicycle | Car
Ocracoke | $3 | $15
Fauntleroy-Vashon | $5 | $15
Mukilteu-Clinton | $5 | $7
Seattle-Bremerton | $8 | $12",4,10104,"import pandas as pd

def calculate_fare_difference(df, ferry1, ferry2):
    """"""
    This function takes in a pandas DataFrame representing a ferry fare table, and two ferry names, and returns the fare difference for a bicycle between the two ferries.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing ferry names and their fares for bicycles and cars with columns 'Ferry', 'Bicycle', 'Car'.
    ferry1 (str): The name of the first ferry.
    ferry2 (str): The name of the second ferry.
    Returns:
    float: The fare difference for a bicycle between the two ferries.
    """"""
    # Filter the DataFrame for the specific ferries
    ferry1_df = df[df['Ferry'] == ferry1]
    ferry2_df = df[df['Ferry'] == ferry2]
    
    # Check if the ferries exist in the DataFrame
    if not ferry1_df.empty and not ferry2_df.empty:
        # Calculate the fare difference
        fare_difference = ferry1_df['Bicycle'].values[0] - ferry2_df['Bicycle'].values[0]
        return fare_difference
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Ferry': ['Ocracoke', 'Fauntleroy-Vashon', 'Mukilteo-Clinton', 'Seattle-Bremerton'],
    'Bicycle': [3, 5, 5, 8],
    'Car': [15, 15, 7, 12]
})

# Call the tool to solve the problem
fare_difference = calculate_fare_difference(df, 'Seattle-Bremerton', 'Fauntleroy-Vashon')

# Print the answer
print(fare_difference)","def calculate_fare_difference_for_vehicle_type(fares_df, ferry_col, vehicle_type_col, ferry1, ferry2):
    """"""
    This function takes in a pandas DataFrame representing a table of ferry fares and two ferry names, and returns the fare difference for a specific vehicle type between the two ferries.
    
    Args:
    fares_df (pd.DataFrame): A pandas DataFrame containing ferry names and their fares for various vehicle types.
    ferry_col (str): The column name for the ferry names.
    vehicle_type_col (str): The column name for the vehicle type fares.
    ferry1 (str): The name of the first ferry.
    ferry2 (str): The name of the second ferry.
    
    Returns:
    float: The fare difference for the specific vehicle type between the two ferries.
    """"""
    # Filter the DataFrame for the specific ferries
    ferry1_df = fares_df[fares_df[ferry_col] == ferry1]
    ferry2_df = fares_df[fares_df[ferry_col] == ferry2]
    
    # Check if the ferries exist in the DataFrame
    if not ferry1_df.empty and not ferry2_df.empty:
        # Calculate the fare difference
        fare_difference = ferry1_df[vehicle_type_col].values[0] - ferry2_df[vehicle_type_col].values[0]
        return fare_difference
    else:
        return None","fares_data = {
    'Ferry': ['Ocracoke', 'Fauntleroy-Vashon', 'Mukilteo-Clinton', 'Seattle-Bremerton'],
    'Bicycle': [3, 5, 5, 8],
    'Car': [15, 15, 7, 12]
}

fares_df = pd.DataFrame(fares_data)

print(calculate_fare_difference_for_vehicle_type(fares_df, ""Ferry"", ""Bicycle"", 'Seattle-Bremerton', 'Fauntleroy-Vashon'))"
Each block has 10 traffic cones. How many traffic cones are on 3 blocks?,30,"Number of blocks | Number of traffic cones
1 | 10
2 | 20
3 | ?",2,14398,"import pandas as pd

def calculate_traffic_cones(df, blocks):
    """"""
    This function takes in a pandas DataFrame representing a table of blocks and traffic cones, and a number of blocks, and returns the number of traffic cones on the given number of blocks.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of blocks and the corresponding number of traffic cones with columns 'Number of blocks' and 'Number of traffic cones'.
    blocks (int): The number of blocks.
    Returns:
    int: The number of traffic cones on the given number of blocks.
    """"""
    # Find the number of traffic cones per block
    cones_per_block = df['Number of traffic cones'][0] / df['Number of blocks'][0]
    
    # Calculate the number of traffic cones on the given number of blocks
    cones = cones_per_block * blocks
    
    return cones","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of blocks': [1, 2],
    'Number of traffic cones': [10, 20]
})

# Call the tool to solve the problem
cones_on_3_blocks = calculate_traffic_cones(df, 3)
print(cones_on_3_blocks)","def calculate_total_items_from_items_per_group_and_number_of_groups(df, group_col, item_col, number_of_groups):
    """"""
    This function takes in a pandas DataFrame representing a table of item counts per unit group and a given number of groups, and returns the total number of items in the groups.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of groups and the corresponding number of items with columns specified by group_col and item_col.
    group_col (str): The column name for the group counts.
    item_col (str): The column name for the item counts.
    number_of_groups (int): The number of groups.
    
    Returns:
    float: The total number of items in the groups.
    """"""
    # Find the number of items per group
    items_per_group = df[item_col][0] / df[group_col][0]
    
    # Calculate the number of items in the given number of groups
    total_items = items_per_group * number_of_groups
    
    return total_items","df = pd.DataFrame({
    'Number of blocks': [1, 2],
    'Number of traffic cones': [10, 20]
})

print(calculate_total_items_from_items_per_group_and_number_of_groups(df, 'Number of blocks', 'Number of traffic cones', 3))"
"For an economics project, Franklin determined the cost of ferry rides for bicycles and cars. How much higher is the fare for a bicycle on the Seattle-Bremerton ferry than on the Ocracoke ferry?",5,"Ferry | Car | Bicycle
Ocracoke | $15 | $3
Fauntleroy-Vashon | $15 | $5
Seattle-Bremerton | $12 | $8
Southport-Fort Fisher | $5 | $2",5,2987,"import pandas as pd

def calculate_fare_difference(df, ferry1, ferry2, vehicle_type):
    """"""
    This function takes in a pandas DataFrame representing a ferry fare table, two ferry names, and a vehicle type, and returns the fare difference between the two ferries for the specified vehicle type.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing ferry names, car fares, and bicycle fares with columns 'Ferry', 'Car', and 'Bicycle'.
    ferry1 (str): The name of the first ferry.
    ferry2 (str): The name of the second ferry.
    vehicle_type (str): The type of vehicle for which the fare difference is to be calculated. It should be either 'Car' or 'Bicycle'.
    Returns:
    float: The fare difference between the two ferries for the specified vehicle type.
    """"""
    # Filter the DataFrame for the specific ferries
    ferry1_df = df[df['Ferry'] == ferry1]
    ferry2_df = df[df['Ferry'] == ferry2]
    
    # Check if both ferries are in the DataFrame
    if not ferry1_df.empty and not ferry2_df.empty:
        # Calculate the fare difference
        fare_difference = abs(ferry1_df[vehicle_type].values[0] - ferry2_df[vehicle_type].values[0])
        return fare_difference
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Ferry': ['Ocracoke', 'Fauntleroy-Vashon', 'Seattle-Bremerton', 'Southport-Fort Fisher'],
    'Car': [15, 15, 12, 5],
    'Bicycle': [3, 5, 8, 2]
})
# Call the tool to solve the problem
fare_difference = calculate_fare_difference(df, 'Seattle-Bremerton', 'Ocracoke', 'Bicycle')
print(fare_difference)","def calculate_fare_difference_between_entities(fares_df, entity_col, entity1, entity2, vehicle_type_col):
    """"""
    This function takes in a pandas DataFrame representing a table of fares, two entity names, and a vehicle type column, and returns the fare difference between the two entities for the specified vehicle type.
    
    Args:
    fares_df (pd.DataFrame): A pandas DataFrame containing entity names and fares for different vehicle types.
    entity_col (str): The column name for the entity names.
    entity1 (str): The name of the first entity.
    entity2 (str): The name of the second entity.
    vehicle_type_col (str): The column name for the vehicle type for which the fare difference is to be calculated.
    
    Returns:
    float: The fare difference between the two entities for the specified vehicle type.
    """"""
    # Filter the DataFrame for the specific entities
    entity1_df = fares_df[fares_df[entity_col] == entity1]
    entity2_df = fares_df[fares_df[entity_col] == entity2]
    
    # Check if both entities are in the DataFrame
    if not entity1_df.empty and not entity2_df.empty:
        # Calculate the fare difference
        fare_difference = abs(entity1_df[vehicle_type_col].values[0] - entity2_df[vehicle_type_col].values[0])
        return fare_difference
    else:
        return None","fares_data = {
    'Ferry': ['Ocracoke', 'Fauntleroy-Vashon', 'Seattle-Bremerton', 'Southport-Fort Fisher'],
    'Car': [15, 15, 12, 5],
    'Bicycle': [3, 5, 8, 2]
}

fares_df = pd.DataFrame(fares_data)

print(calculate_fare_difference_between_entities(fares_df, ""Ferry"", ""Seattle-Bremerton"", ""Ocracoke"", ""Bicycle""))"
An ecologist interested in the nesting patterns of birds counted the number of ducks at local lakes. How many pintail ducks live in Crescent Lake?,2,"Lake | Mallard ducks | Pintail ducks
Crescent Lake | 10 | 2
Ripple Lake | 18 | 12
Aspen Lake | 2 | 2",5,1390,"import pandas as pd

def count_pintail_ducks(df, lake_name):
    """"""
    This function takes in a pandas DataFrame representing a table of duck counts at local lakes and a lake name, and returns the number of pintail ducks at the specified lake.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing lake names and duck counts with columns 'Lake', 'Mallard ducks', and 'Pintail ducks'.
    lake_name (str): The name of the lake.
    Returns:
    int: The number of pintail ducks at the specified lake.
    """"""
    # Filter the DataFrame for the specific lake
    lake_df = df[df['Lake'] == lake_name]
    if not lake_df.empty:
        # Return the number of pintail ducks at the specified lake
        return lake_df['Pintail ducks'].values[0]
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Lake': ['Crescent Lake', 'Ripple Lake', 'Aspen Lake'],
    'Mallard ducks': [10, 18, 2],
    'Pintail ducks': [2, 12, 2]
})
# Call the tool to solve the problem
print(count_pintail_ducks(df, 'Crescent Lake'))","def get_item_count_in_specific_location(data_frame, location_col, item_col, specific_location):
    """"""
    This function takes in a pandas DataFrame representing a table of item counts in various locations, a location column name, an item column name, and a specific location, and returns the count of the item in the specific location.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing item counts in various locations.
    location_col (str): The column name for the location values.
    item_col (str): The column name for the item counts.
    specific_location (str): The specific location to retrieve the item count from.
    
    Returns:
    int: The count of the item in the specific location.
    """"""
    # Filter the DataFrame for the specific location
    specific_location_df = data_frame[data_frame[location_col] == specific_location]
    if not specific_location_df.empty:
        # Return the count of the item in the specific location
        return specific_location_df[item_col].values[0]
    else:
        return None","data = {
    'Lake': ['Crescent Lake', 'Ripple Lake', 'Aspen Lake'],
    'Mallard ducks': [10, 18, 2],
    'Pintail ducks': [2, 12, 2]
}

df = pd.DataFrame(data)
print(get_item_count_in_specific_location(data_frame=df, location_col=""Lake"", item_col=""Pintail ducks"", specific_location=""Crescent Lake""))"
An ecologist interested in the nesting patterns of birds counted the number of ducks at local lakes. How many pintail ducks live in Midnight Lake?,19,"Lake | Pintail ducks | Wood ducks
Aspen Lake | 8 | 3
Meadow Lake | 8 | 9
Midnight Lake | 19 | 17",5,11645,"import pandas as pd

def count_ducks(df, lake, duck_type):
    """"""
    This function takes in a pandas DataFrame representing a table of duck counts at different lakes, the name of a lake, and the type of duck, and returns the number of that type of duck at the specified lake.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of different types of ducks at different lakes. The DataFrame should have columns 'Lake', 'Pintail ducks', and 'Wood ducks'.
    lake (str): The name of the lake.
    duck_type (str): The type of duck.
    Returns:
    int: The number of the specified type of duck at the specified lake.
    """"""
    # Filter the DataFrame for the specified lake
    lake_df = df[df['Lake'] == lake]
    
    # If the lake is not in the DataFrame, return 0
    if lake_df.empty:
        return 0
    
    # Return the number of the specified type of duck at the specified lake
    return lake_df[duck_type].values[0]","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Lake': ['Aspen Lake', 'Meadow Lake', 'Midnight Lake'],
    'Pintail ducks': [8, 8, 19],
    'Wood ducks': [3, 9, 17]
})
# Call the tool to solve the problem
print(count_ducks(df, 'Midnight Lake', 'Pintail ducks'))","def get_item_count_in_group(data_frame, group_col, item_col, group_name, item_type):
    """"""
    This function takes in a pandas DataFrame representing a table of item counts in different groups, the name of a group, and the type of item, and returns the count of that type of item in the specified group.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the number of different types of items in different groups.
    group_col (str): The column name for the group names.
    item_col (str): The column name for the item types.
    group_name (str): The name of the group.
    item_type (str): The type of item.
    
    Returns:
    int: The count of the specified type of item in the specified group.
    """"""
    # Filter the DataFrame for the specified group
    group_df = data_frame[data_frame[group_col] == group_name]
    
    # If the group is not in the DataFrame, return 0
    if group_df.empty:
        return 0
    
    # Return the count of the specified type of item in the specified group
    return group_df[item_col][item_type].values[0]","data = {
    'Lake': ['Aspen Lake', 'Meadow Lake', 'Midnight Lake'],
    'Pintail ducks': [8, 8, 19],
    'Wood ducks': [3, 9, 17]
}

df = pd.DataFrame(data)
print(get_item_count_in_group(data_frame=df, group_col=""Lake"", item_col=""Pintail ducks"", group_name=""Midnight Lake"", item_type=""Pintail ducks""))"
"For an economics project, Joy determined the cost of ferry rides for bicycles and cars. How much higher is the fare for a bicycle on the Seattle-Bremerton ferry than on the Fauntleroy-Vashon ferry?",3,"Ferry | Bicycle | Car
Seattle-Bremerton | $8 | $12
Southport-Fort Fisher | $2 | $5
Fauntleroy-Vashon | $5 | $15
Ocracoke | $3 | $15
Mukilteu-Clinton | $5 | $7",5,7326,"import pandas as pd

def calculate_fare_difference(df, ferry1, ferry2):
    """"""
    This function takes in a pandas DataFrame representing a ferry fare table and two ferry names, and returns the difference in bicycle fare between the two ferries.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing ferry names and their fares for bicycles and cars with columns 'Ferry', 'Bicycle', and 'Car'.
    ferry1 (str): The name of the first ferry.
    ferry2 (str): The name of the second ferry.
    Returns:
    float: The difference in bicycle fare between the two ferries.
    """"""
    # Filter the DataFrame for the specific ferries
    ferry1_df = df[df['Ferry'] == ferry1]
    ferry2_df = df[df['Ferry'] == ferry2]
    
    # Check if the ferries exist in the DataFrame
    if not ferry1_df.empty and not ferry2_df.empty:
        # Calculate the difference in bicycle fare
        fare_difference = ferry1_df['Bicycle'].values[0] - ferry2_df['Bicycle'].values[0]
        return fare_difference
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Ferry': ['Seattle-Bremerton', 'Southport-Fort Fisher', 'Fauntleroy-Vashon', 'Ocracoke', 'Mukilteo-Clinton'],
    'Bicycle': [8, 2, 5, 3, 5],
    'Car': [12, 5, 15, 15, 7]
})

# Call the tool to solve the problem
fare_difference = calculate_fare_difference(df, 'Seattle-Bremerton', 'Fauntleroy-Vashon')

# Print the answer
print(fare_difference)","def calculate_fare_difference_between_items(df, item_col, fare_col, item1, item2):
    """"""
    This function takes in a pandas DataFrame representing a table of items with different fare columns, and returns the difference in fare between two items for a specific fare column.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing item names and their fares for different columns.
    item_col (str): The column name for the item names.
    fare_col (str): The column name for the fare values.
    item1 (str): The name of the first item.
    item2 (str): The name of the second item.
    
    Returns:
    float: The difference in fare between the two items for the specified fare column.
    """"""
    # Filter the DataFrame for the specific items
    item1_df = df[df[item_col] == item1]
    item2_df = df[df[item_col] == item2]
    
    # Check if the items exist in the DataFrame
    if not item1_df.empty and not item2_df.empty:
        # Calculate the difference in fare
        fare_difference = item1_df[fare_col].values[0] - item2_df[fare_col].values[0]
        return fare_difference
    else:
        return None","df = pd.DataFrame({
    'Ferry': ['Seattle-Bremerton', 'Southport-Fort Fisher', 'Fauntleroy-Vashon', 'Ocracoke', 'Mukilteo-Clinton'],
    'Bicycle': [8, 2, 5, 3, 5],
    'Car': [12, 5, 15, 15, 7]
})

fare_difference = calculate_fare_difference_between_items(df, 'Ferry', 'Bicycle', 'Seattle-Bremerton', 'Fauntleroy-Vashon')
print(fare_difference)"
"For an economics project, Layla determined the cost of ferry rides for bicycles and cars. How much does it cost to take a bicycle on the Southport-Fort Fisher ferry?",2,"Ferry | Car | Bicycle
Seattle-Bremerton | $12 | $8
Mukilteu-Clinton | $7 | $5
Southport-Fort Fisher | $5 | $2
Fauntleroy-Vashon | $15 | $5
Ocracoke | $15 | $3",4,1902,"import pandas as pd

def get_bicycle_ferry_cost(df, ferry_name):
    """"""
    This function takes in a pandas DataFrame representing a ferry cost table and a ferry name, and returns the cost for a bicycle on the specified ferry.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing ferry names and their costs for cars and bicycles with columns 'Ferry', 'Car', and 'Bicycle'.
    ferry_name (str): The name of the ferry.
    Returns:
    float: The cost for a bicycle on the specified ferry.
    """"""
    # Filter the DataFrame for the specific ferry
    ferry_df = df[df['Ferry'] == ferry_name]
    if not ferry_df.empty:
        bicycle_cost = ferry_df['Bicycle'].values[0]
        return bicycle_cost
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Ferry': ['Seattle-Bremerton', 'Mukilteu-Clinton', 'Southport-Fort Fisher', 'Fauntleroy-Vashon', 'Ocracoke'],
    'Car': [12, 7, 5, 15, 15],
    'Bicycle': [8, 5, 2, 5, 3]
})
# Call the tool to solve the problem
bicycle_cost = get_bicycle_ferry_cost(df, 'Southport-Fort Fisher')
print(bicycle_cost)","def get_item_cost_for_specific_entity(df, entity_col, item_col, entity_name):
    """"""
    This function takes in a pandas DataFrame representing a table of entities and their item costs, and returns the cost for a specific item for a specific entity.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing entities and their item costs.
    entity_col (str): The column name for the entities.
    item_col (str): The column name for the item costs.
    entity_name (str): The name of the specific entity.
    
    Returns:
    float: The cost for the specific item for the specific entity.
    """"""
    # Filter the DataFrame for the specific entity
    entity_df = df[df[entity_col] == entity_name]
    if not entity_df.empty:
        item_cost = entity_df[item_col].values[0]
        return item_cost
    else:
        return None","df = pd.DataFrame({
    'Ferry': ['Seattle-Bremerton', 'Mukilteo-Clinton', 'Southport-Fort Fisher', 'Fauntleroy-Vashon', 'Ocracoke'],
    'Car': [12, 7, 5, 15, 15],
    'Bicycle': [8, 5, 2, 5, 3]
})
print(get_item_cost_for_specific_entity(df, 'Ferry', 'Bicycle', 'Southport-Fort Fisher'))"
A reporter counted the number of masks local artists made for this year's masquerade ball. How many artists made exactly 6 masks?,0,"Masks made | Frequency
1 | 17
2 | 18
3 | 9
4 | 15
5 | 2
6 | 0",7,11192,"import pandas as pd

def count_artists(df, masks):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of masks made by artists and a number of masks, and returns the number of artists who made exactly that number of masks.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of masks made and the frequency of artists who made that number of masks. The DataFrame should have columns 'Masks made' and 'Frequency'.
    masks (int): The number of masks to check.
    Returns:
    int: The number of artists who made exactly the specified number of masks.
    """"""
    # Filter the DataFrame for the specified number of masks
    masks_df = df[df['Masks made'] == masks]
    if not masks_df.empty:
        # Return the frequency of artists who made the specified number of masks
        return masks_df['Frequency'].values[0]
    else:
        # If no artists made the specified number of masks, return 0
        return 0","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Masks made': [1, 2, 3, 4, 5, 6],
    'Frequency': [17, 18, 9, 15, 2, 0]
})
# Call the tool to solve the problem
print(count_artists(df, 6))","def count_frequency_of_value_in_frequency_table(df, value_col, frequency_col, target_value):
    """"""
    This function takes in a pandas DataFrame representing a frequency table, a target value, and returns the frequency of the target value in the table.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing a frequency table with columns specified by value_col and frequency_col.
    value_col (str): The column name for the values.
    frequency_col (str): The column name for the frequencies.
    target_value (int): The target value to check the frequency.
    
    Returns:
    int: The frequency of the target value in the table. If the target value is not found in the table, it returns 0.
    """"""
    # Filter the DataFrame for the target value
    target_df = df[df[value_col] == target_value]
    if not target_df.empty:
        # Return the frequency of the target value
        return target_df[frequency_col].values[0]
    else:
        # If the target value is not found in the table, return 0
        return 0","df = pd.DataFrame({
    'Masks made': [1, 2, 3, 4, 5, 6],
    'Frequency': [17, 18, 9, 15, 2, 0]
})
print(count_frequency_of_value_in_frequency_table(df, 'Masks made', 'Frequency', 6))"
"For an economics project, Luca determined the cost of ferry rides for bicycles and cars. On the Fauntleroy-Vashon ferry, how much higher is the fare for a car than for a bicycle?",10,"Ferry | Bicycle | Car
Mukilteu-Clinton | $5 | $7
Seattle-Bremerton | $8 | $12
Fauntleroy-Vashon | $5 | $15
Southport-Fort Fisher | $2 | $5
Ocracoke | $3 | $15",4,7333,"import pandas as pd

def calculate_fare_difference(df, ferry_name):
    """"""
    This function takes in a pandas DataFrame representing a ferry fare table and a ferry name, and returns the fare difference between a car and a bicycle for the given ferry.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing ferry names and their fares for bicycles and cars with columns 'Ferry', 'Bicycle', and 'Car'.
    ferry_name (str): The name of the ferry.
    Returns:
    float: The fare difference between a car and a bicycle for the given ferry.
    """"""
    # Filter the DataFrame for the specific ferry
    ferry_df = df[df['Ferry'] == ferry_name]
    if not ferry_df.empty:
        # Calculate the fare difference
        fare_difference = ferry_df['Car'].values[0] - ferry_df['Bicycle'].values[0]
        return fare_difference
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Ferry': ['Mukilteo-Clinton', 'Seattle-Bremerton', 'Fauntleroy-Vashon', 'Southport-Fort Fisher', 'Ocracoke'],
    'Bicycle': [5, 8, 5, 2, 3],
    'Car': [7, 12, 15, 5, 15]
})

# Call the tool to solve the problem
fare_difference = calculate_fare_difference(df, 'Fauntleroy-Vashon')
print(fare_difference)","def calculate_fare_difference_for_vehicles(fare_df, ferry_col, vehicle1_col, vehicle2_col, ferry_name):
    """"""
    This function takes in a pandas DataFrame representing a fare table and a ferry name, and returns the fare difference between two types of vehicles for the given ferry.
    
    Args:
    fare_df (pd.DataFrame): A pandas DataFrame containing ferry names and their fares for two types of vehicles.
    ferry_col (str): The column name for the ferry names.
    vehicle1_col (str): The column name for the first type of vehicle.
    vehicle2_col (str): The column name for the second type of vehicle.
    ferry_name (str): The name of the ferry.
    
    Returns:
    float: The fare difference between the two types of vehicles for the given ferry.
    """"""
    # Filter the DataFrame for the specific ferry
    ferry_df = fare_df[fare_df[ferry_col] == ferry_name]
    if not ferry_df.empty:
        # Calculate the fare difference
        fare_difference = ferry_df[vehicle2_col].values[0] - ferry_df[vehicle1_col].values[0]
        return fare_difference
    else:
        return None","fare_data = {
    'Ferry': ['Mukilteo-Clinton', 'Seattle-Bremerton', 'Fauntleroy-Vashon', 'Southport-Fort Fisher', 'Ocracoke'],
    'Bicycle': [5, 8, 5, 2, 3],
    'Car': [7, 12, 15, 5, 15]
}

fare_df = pd.DataFrame(fare_data)

print(calculate_fare_difference_for_vehicles(fare_df, ""Ferry"", ""Bicycle"", ""Car"", ""Fauntleroy-Vashon""))"
A transportation analyst compared various bridges' tolls. How much is the toll for a carpool on the Fort Madison bridge?,1,"Bridge | Car | Carpool
Hatem | $5 | $5
George Washington | $8 | $2
Fort Madison | $1 | $1",4,5185,"import pandas as pd

def get_toll_for_carpool(df, bridge_name):
    """"""
    This function takes in a pandas DataFrame representing a table of bridge tolls and a bridge name, and returns the toll for a carpool on the specified bridge.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing bridge names and their tolls for cars and carpools with columns 'Bridge', 'Car', and 'Carpool'.
    bridge_name (str): The name of the bridge.
    Returns:
    float: The toll for a carpool on the specified bridge.
    """"""
    # Filter the DataFrame for the specific bridge
    bridge_df = df[df['Bridge'] == bridge_name]
    if not bridge_df.empty:
        carpool_toll = bridge_df['Carpool'].values[0]
        return carpool_toll
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Bridge': ['Hatem', 'George Washington', 'Fort Madison'],
    'Car': [5, 8, 1],
    'Carpool': [5, 2, 1]
})
# Call the tool to solve the problem
toll = get_toll_for_carpool(df, 'Fort Madison')
print(toll)","def get_value_from_category_and_item(data_frame, category_col, item_col, item_name):
    """"""
    This function takes in a pandas DataFrame, a category column, an item column, and an item name, and returns the value in the category column for the specified item.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing various categories and items.
    category_col (str): The column name for the categories.
    item_col (str): The column name for the items.
    item_name (str): The name of the item.
    
    Returns:
    float: The value in the category column for the specified item.
    """"""
    # Filter the DataFrame for the specific item
    item_df = data_frame[data_frame[item_col] == item_name]
    if not item_df.empty:
        category_value = item_df[category_col].values[0]
        return category_value
    else:
        return None","df = pd.DataFrame({
    'Bridge': ['Hatem', 'George Washington', 'Fort Madison'],
    'Car': [5, 8, 1],
    'Carpool': [5, 2, 1]
})
print(get_value_from_category_and_item(data_frame=df, category_col='Carpool', item_col='Bridge', item_name='Fort Madison'))"
A transportation analyst compared various bridges' tolls. How much is the toll for a carpool on the Fort Madison bridge?,1,"Bridge | Car | Carpool
Fort Madison | $1 | $1
Hatem | $5 | $5
George Washington | $8 | $2
Tacoma Narrows | $3 | $3",5,15198,"import pandas as pd

def get_toll_for_carpool(df, bridge_name):
    """"""
    This function takes in a pandas DataFrame representing a bridge toll table and a bridge name, and returns the toll for a carpool on the specified bridge.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing bridge names and their tolls with columns 'Bridge', 'Car', and 'Carpool'.
    bridge_name (str): The name of the bridge.
    Returns:
    float: The toll for a carpool on the specified bridge.
    """"""
    # Filter the DataFrame for the specific bridge
    bridge_df = df[df['Bridge'] == bridge_name]
    if not bridge_df.empty:
        carpool_toll = bridge_df['Carpool'].values[0]
        return carpool_toll
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Bridge': ['Fort Madison', 'Hatem', 'George Washington', 'Tacoma Narrows'],
    'Car': [1, 5, 8, 3],
    'Carpool': [1, 5, 2, 3]
})
# Call the tool to solve the problem
toll = get_toll_for_carpool(df, 'Fort Madison')
print(toll)","def get_value_from_table_by_row_and_column(data_frame, row_col, value_col, row_name):
    """"""
    This function takes in a pandas DataFrame, a row column name, a value column name, and a row name, and returns the value from the specified row and column.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing various rows and columns.
    row_col (str): The column name for the row names.
    value_col (str): The column name for the values.
    row_name (str): The name of the row.
    
    Returns:
    float: The value from the specified row and column.
    """"""
    # Filter the DataFrame for the specific row
    row_df = data_frame[data_frame[row_col] == row_name]
    if not row_df.empty:
        value = row_df[value_col].values[0]
        return value
    else:
        return None","data_frame = pd.DataFrame({
    'Bridge': ['Fort Madison', 'Hatem', 'George Washington', 'Tacoma Narrows'],
    'Car': [1, 5, 8, 3],
    'Carpool': [1, 5, 2, 3]
})
print(get_value_from_table_by_row_and_column(data_frame, 'Bridge', 'Carpool', 'Fort Madison'))"
Each hamburger place has 2 waiters. How many waiters are in 3 hamburger places?,6,"Number of hamburger places | Number of waiters
1 | 2
2 | 4
3 | ?",2,8069,"def calculate_waiters(hamburger_places, waiters_per_place):
    """"""
    This function takes in the number of hamburger places and the number of waiters per place, and returns the total number of waiters.
    Args:
    hamburger_places (int): The number of hamburger places.
    waiters_per_place (int): The number of waiters per hamburger place.
    Returns:
    int: The total number of waiters.
    """"""
    return hamburger_places * waiters_per_place","# Call the tool to solve the problem
print(calculate_waiters(3, 2))","def calculate_total_workers_from_places_and_workers_per_place(places, workers_per_place):
    """"""
    This function takes in the number of places and the number of workers per place, and returns the total number of workers.
    
    Args:
    places (int): The number of places.
    workers_per_place (int): The number of workers per place.
    
    Returns:
    int: The total number of workers.
    """"""
    return places * workers_per_place","print(calculate_total_workers_from_places_and_workers_per_place(3, 2))"
Several people compared how many Web pages they had visited. How many more Web pages did Philip visit than Steven?,544,"Person | Number of Web pages
Javier | 3,778
Hayley | 1,121
Philip | 2,752
Maura | 4,955
Steven | 2,208",3,7290,"import pandas as pd

def calculate_difference(df, person1, person2):
    """"""
    This function takes in a pandas DataFrame representing a table of people and the number of web pages they visited, and returns the difference in the number of web pages visited by two specified people.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing people's names and the number of web pages they visited with columns 'Person' and 'Number of Web pages'.
    person1 (str): The name of the first person.
    person2 (str): The name of the second person.
    Returns:
    int: The difference in the number of web pages visited by the two people.
    """"""
    # Filter the DataFrame for the specific people
    person1_df = df[df['Person'] == person1]
    person2_df = df[df['Person'] == person2]
    
    # Get the number of web pages visited by each person
    person1_pages = person1_df['Number of Web pages'].values[0]
    person2_pages = person2_df['Number of Web pages'].values[0]
    
    # Calculate and return the difference
    return abs(person1_pages - person2_pages)","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Person': ['Javier', 'Hayley', 'Philip', 'Maura', 'Steven'],
    'Number of Web pages': [3778, 1121, 2752, 4955, 2208]
})

# Call the tool to solve the problem
difference = calculate_difference(df, 'Philip', 'Steven')
print(difference)","def calculate_absolute_difference_between_two_entities(df, entity_col, value_col, entity1, entity2):
    """"""
    This function takes in a pandas DataFrame representing a table of entities and their values, and returns the absolute difference in values between two specified entities.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing entities and their values.
    entity_col (str): The column name for the entities.
    value_col (str): The column name for the values.
    entity1 (str): The name of the first entity.
    entity2 (str): The name of the second entity.
    
    Returns:
    int: The absolute difference in values between the two entities.
    """"""
    # Filter the DataFrame for the specific entities
    entity1_df = df[df[entity_col] == entity1]
    entity2_df = df[df[entity_col] == entity2]
    
    # Get the value for each entity
    entity1_value = entity1_df[value_col].values[0]
    entity2_value = entity2_df[value_col].values[0]
    
    # Calculate and return the absolute difference
    return abs(entity1_value - entity2_value)","df = pd.DataFrame({
    'Person': ['Javier', 'Hayley', 'Philip', 'Maura', 'Steven'],
    'Number of Web pages': [3778, 1121, 2752, 4955, 2208]
})

print(calculate_absolute_difference_between_two_entities(df, 'Person', 'Number of Web pages', 'Philip', 'Steven'))"
Each restaurant table has 2 pepper shakers. How many pepper shakers are on 3 restaurant tables?,6,"Number of restaurant tables | Number of pepper shakers
1 | 2
2 | 4
3 | ?",2,13860,"def calculate_pepper_shakers(num_tables):
    """"""
    This function takes in the number of restaurant tables and returns the number of pepper shakers based on the fact that each table has 2 pepper shakers.
    Args:
    num_tables (int): The number of restaurant tables.
    Returns:
    int: The number of pepper shakers.
    """"""
    # Calculate the number of pepper shakers
    num_pepper_shakers = num_tables * 2
    return num_pepper_shakers","# Call the tool to solve the problem
print(calculate_pepper_shakers(3))","def calculate_total_items_from_groups_and_items_per_group(num_groups, items_per_group):
    """"""
    This function takes in the number of groups and the number of items per group, and returns the total number of items.
    
    Args:
    num_groups (int): The number of groups.
    items_per_group (int): The number of items per group.
    
    Returns:
    int: The total number of items.
    """"""
    # Calculate the total number of items
    total_items = num_groups * items_per_group
    return total_items","num_tables = 3
pepper_shakers_per_table = 2
print(calculate_total_items_from_groups_and_items_per_group(num_tables, pepper_shakers_per_table))"
"A transportation analyst compared various bridges' tolls. On the George Washington bridge, how much more is the toll for a car than for a carpool?",6,"Bridge | Car | Carpool
George Washington | $8 | $2
Hatem | $5 | $5
Fort Madison | $1 | $1
Tacoma Narrows | $3 | $3",5,6847,"import pandas as pd

def calculate_toll_difference(df, bridge_name):
    """"""
    This function takes in a pandas DataFrame representing a bridge toll table and a bridge name, and returns the difference in toll between a car and a carpool for the specified bridge.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing bridge names and their tolls for cars and carpools with columns 'Bridge', 'Car', and 'Carpool'.
    bridge_name (str): The name of the bridge to calculate the toll difference for.
    Returns:
    float: The difference in toll between a car and a carpool for the specified bridge.
    """"""
    # Filter the DataFrame for the specific bridge
    bridge_df = df[df['Bridge'] == bridge_name]
    if not bridge_df.empty:
        car_toll = bridge_df['Car'].values[0]
        carpool_toll = bridge_df['Carpool'].values[0]
        toll_difference = car_toll - carpool_toll
        return toll_difference
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Bridge': ['George Washington', 'Hatem', 'Fort Madison', 'Tacoma Narrows'],
    'Car': [8, 5, 1, 3],
    'Carpool': [2, 5, 1, 3]
})
# Call the tool to solve the problem
toll_difference = calculate_toll_difference(df, 'George Washington')
print(toll_difference)","def calculate_difference_between_columns_for_item(data_frame, item_col, value_col1, value_col2, item_name):
    """"""
    This function takes in a pandas DataFrame, two column names, and an item name, and returns the difference between the values in the two columns for the specified item.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing items and their values in two columns.
    item_col (str): The column name for the item names.
    value_col1 (str): The column name for the first set of values.
    value_col2 (str): The column name for the second set of values.
    item_name (str): The name of the item to calculate the difference for.
    
    Returns:
    float: The difference between the values in the two columns for the specified item.
    """"""
    # Filter the DataFrame for the specific item
    item_df = data_frame[data_frame[item_col] == item_name]
    if not item_df.empty:
        value1 = item_df[value_col1].values[0]
        value2 = item_df[value_col2].values[0]
        difference = value1 - value2
        return difference
    else:
        return None","data = {
    'Bridge': ['George Washington', 'Hatem', 'Fort Madison', 'Tacoma Narrows'],
    'Car': [8, 5, 1, 3],
    'Carpool': [2, 5, 1, 3]
}

df = pd.DataFrame(data)
print(calculate_difference_between_columns_for_item(data_frame=df, item_col=""Bridge"", value_col1=""Car"", value_col2=""Carpool"", item_name=""George Washington""))"
"An agricultural agency is researching how much cheese people have been eating in different parts of the world. In 2006, how much more cheese did Germany consume per capita than Argentina?",9,"Country | 1996 | 2006
Austria | 10 | 17
Great Britain | 9 | 10
Australia | 10 | 10
Argentina | 11 | 11
Germany | 12 | 20",4,10249,"import pandas as pd

def calculate_cheese_difference(df, country1, country2, year):
    """"""
    This function takes in a pandas DataFrame representing a table of cheese consumption per capita in different countries and years, and returns the difference in cheese consumption between two countries in a specific year.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing cheese consumption per capita in different countries and years. The DataFrame should have 'Country' as one of the columns and years as the other columns.
    country1 (str): The name of the first country.
    country2 (str): The name of the second country.
    year (str): The year to compare the cheese consumption.
    Returns:
    float: The difference in cheese consumption per capita between the two countries in the specified year.
    """"""
    # Filter the DataFrame for the specific countries and year
    country1_df = df[df['Country'] == country1]
    country2_df = df[df['Country'] == country2]
    
    # Get the cheese consumption for the two countries in the specified year
    country1_cheese = country1_df[year].values[0]
    country2_cheese = country2_df[year].values[0]
    
    # Calculate the difference in cheese consumption
    cheese_difference = country1_cheese - country2_cheese
    
    return cheese_difference","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Country': ['Austria', 'Great Britain', 'Australia', 'Argentina', 'Germany'],
    '1996': [10, 9, 10, 11, 12],
    '2006': [17, 10, 10, 11, 20]
})

# Call the tool to solve the problem
cheese_difference = calculate_cheese_difference(df, 'Germany', 'Argentina', '2006')
print(cheese_difference)","def calculate_attribute_difference_between_entities_in_year(df, entity_col, entity1, entity2, attribute_year):
    """"""
    This function takes in a pandas DataFrame representing a table of attributes for different entities in different years, and returns the difference in the attribute between two entities in a specific year.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing attributes for different entities in different years. The DataFrame should have the entity names as one of the columns and years as the other columns.
    entity_col (str): The column name for the entity names.
    entity1 (str): The name of the first entity.
    entity2 (str): The name of the second entity.
    attribute_year (str): The year to compare the attribute.
    
    Returns:
    float: The difference in the attribute between the two entities in the specified year.
    """"""
    # Filter the DataFrame for the specific entities and year
    entity1_df = df[df[entity_col] == entity1]
    entity2_df = df[df[entity_col] == entity2]
    
    # Get the attribute for the two entities in the specified year
    entity1_attribute = entity1_df[attribute_year].values[0]
    entity2_attribute = entity2_df[attribute_year].values[0]
    
    # Calculate the difference in the attribute
    attribute_difference = entity1_attribute - entity2_attribute
    
    return attribute_difference","df = pd.DataFrame({
    'Country': ['Austria', 'Great Britain', 'Australia', 'Argentina', 'Germany'],
    '1996': [10, 9, 10, 11, 12],
    '2006': [17, 10, 10, 11, 20]
})

print(calculate_attribute_difference_between_entities_in_year(df, 'Country', 'Germany', 'Argentina', '2006'))"
"An agricultural agency is researching how much cheese people have been eating in different parts of the world. In 2006, how much more cheese did Germany consume per capita than Argentina?",9,"Country | 1996 | 2006
Great Britain | 9 | 10
Argentina | 11 | 11
Germany | 12 | 20",4,4942,"import pandas as pd

def cheese_consumption_difference(df, country1, country2, year):
    """"""
    This function takes in a pandas DataFrame representing a table of cheese consumption per capita, and returns the difference in cheese consumption between two countries in a specific year.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing cheese consumption per capita data with columns 'Country', '1996', '2006'.
    country1 (str): The name of the first country.
    country2 (str): The name of the second country.
    year (str): The year to compare cheese consumption.
    Returns:
    float: The difference in cheese consumption per capita between the two countries in the specified year.
    """"""
    # Filter the DataFrame for the specific countries
    country1_df = df[df['Country'] == country1]
    country2_df = df[df['Country'] == country2]
    
    # Get the cheese consumption per capita for each country in the specified year
    country1_cheese = country1_df[year].values[0]
    country2_cheese = country2_df[year].values[0]
    
    # Calculate the difference in cheese consumption per capita
    difference = country1_cheese - country2_cheese
    
    return difference","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Country': ['Great Britain', 'Argentina', 'Germany'],
    '1996': [9, 11, 12],
    '2006': [10, 11, 20]
})

# Call the tool to solve the problem
difference = cheese_consumption_difference(df, 'Germany', 'Argentina', '2006')
print(difference)","def calculate_difference_in_attribute_between_entities(df, entity_col, entity1, entity2, attribute_year_col):
    """"""
    This function takes in a pandas DataFrame representing a table of entity attributes, and returns the difference in the attribute between two entities in a specific year.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing entity attributes with columns specified by entity_col and attribute_year_col.
    entity_col (str): The column name for the entities.
    entity1 (str): The name of the first entity.
    entity2 (str): The name of the second entity.
    attribute_year_col (str): The column name for the attribute values in the specified year.
    
    Returns:
    float: The difference in the attribute between the two entities in the specified year.
    """"""
    # Filter the DataFrame for the specific entities
    entity1_df = df[df[entity_col] == entity1]
    entity2_df = df[df[entity_col] == entity2]
    
    # Get the attribute value for each entity in the specified year
    entity1_attribute = entity1_df[attribute_year_col].values[0]
    entity2_attribute = entity2_df[attribute_year_col].values[0]
    
    # Calculate the difference in the attribute
    difference = entity1_attribute - entity2_attribute
    
    return difference","df = pd.DataFrame({
    'Country': ['Great Britain', 'Argentina', 'Germany'],
    '1996': [9, 11, 12],
    '2006': [10, 11, 20]
})

print(calculate_difference_in_attribute_between_entities(df, 'Country', 'Germany', 'Argentina', '2006'))"
A biologist recorded the number of birds at lakes in Newport. How many more geese live in Moon Lake than Spring Lake?,2,"Lake | Swans | Geese
Blue Lake | 5 | 3
Spring Lake | 2 | 17
Moon Lake | 8 | 19
Long Lake | 10 | 16",5,16865,"import pandas as pd

def calculate_difference(df, column, location1, location2):
    """"""
    This function takes in a pandas DataFrame, a column name, and two location names, and returns the difference in the number of birds between the two locations.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of birds at different locations.
    column (str): The column name of the bird type.
    location1 (str): The name of the first location.
    location2 (str): The name of the second location.
    Returns:
    int: The difference in the number of birds between the two locations.
    """"""
    # Filter the DataFrame for the specific locations
    location1_df = df[df['Lake'] == location1]
    location2_df = df[df['Lake'] == location2]
    
    # Get the number of birds at each location
    location1_birds = location1_df[column].values[0]
    location2_birds = location2_df[column].values[0]
    
    # Calculate the difference in the number of birds
    difference = location1_birds - location2_birds
    
    return difference","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Lake': ['Blue Lake', 'Spring Lake', 'Moon Lake', 'Long Lake'],
    'Swans': [5, 2, 8, 10],
    'Geese': [3, 17, 19, 16]
})
# Call the tool to solve the problem
difference = calculate_difference(df, 'Geese', 'Moon Lake', 'Spring Lake')
print(difference)","def calculate_difference_in_category_between_two_locations(df, location_col, category_col, location1, location2):
    """"""
    This function takes in a pandas DataFrame, a location column name, a category column name, and two location names, and returns the difference in the count of the category between the two locations.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing counts of categories at different locations.
    location_col (str): The column name for the locations.
    category_col (str): The column name for the category.
    location1 (str): The name of the first location.
    location2 (str): The name of the second location.
    
    Returns:
    int: The difference in the count of the category between the two locations.
    """"""
    # Filter the DataFrame for the specific locations
    location1_df = df[df[location_col] == location1]
    location2_df = df[df[location_col] == location2]
    
    # Get the count of the category at each location
    location1_count = location1_df[category_col].values[0]
    location2_count = location2_df[category_col].values[0]
    
    # Calculate the difference in the count of the category
    difference = location1_count - location2_count
    
    return difference","df = pd.DataFrame({
    'Lake': ['Blue Lake', 'Spring Lake', 'Moon Lake', 'Long Lake'],
    'Swans': [5, 2, 8, 10],
    'Geese': [3, 17, 19, 16]
})
print(calculate_difference_in_category_between_two_locations(df, 'Lake', 'Geese', 'Moon Lake', 'Spring Lake'))"
"Owen volunteered to bring hot dog toppings to the neighborhood barbecue. He asked his neighbors for the toppings they like and recorded their answers in a frequency chart. If 1/5 of the people who like mustard prefer spicy mustard, how many people prefer spicy mustard?",3,"Topping | Frequency
ketchup | 3
mustard | 15
chili | 7",5,6672,"import pandas as pd

def calculate_spicy_mustard_lovers(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency chart of hot dog toppings and calculates the number of people who prefer spicy mustard.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing hot dog toppings and their frequencies with columns 'Topping' and 'Frequency'.
    Returns:
    int: The number of people who prefer spicy mustard.
    """"""
    # Filter the DataFrame for mustard
    mustard_df = df[df['Topping'] == 'mustard']
    
    # If mustard is in the DataFrame, calculate the number of people who prefer spicy mustard
    if not mustard_df.empty:
        mustard_lovers = mustard_df['Frequency'].values[0]
        spicy_mustard_lovers = mustard_lovers / 5
        return spicy_mustard_lovers
    
    # If mustard is not in the DataFrame, return 0
    return 0","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Topping': ['ketchup', 'mustard', 'chili'],
    'Frequency': [3, 15, 7]
})
# Call the tool to solve the problem
spicy_mustard_lovers = calculate_spicy_mustard_lovers(df)
print(spicy_mustard_lovers)","def calculate_variant_preference(data_frame, item_col, frequency_col, item_name, variant_ratio):
    """"""
    This function takes in a pandas DataFrame representing a frequency chart of items, an item name, and a variant ratio, and calculates the number of people who prefer a variant of the item based on the given ratio.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing item names and their frequencies.
    item_col (str): The column name for the item names.
    frequency_col (str): The column name for the item frequencies.
    item_name (str): The name of the item to filter the DataFrame.
    variant_ratio (float): The ratio of people who prefer the variant of the item.
    
    Returns:
    float: The number of people who prefer the variant of the item.
    """"""
    # Filter the DataFrame for the specific item name
    item_df = data_frame[data_frame[item_col] == item_name]
    
    # If the item is in the DataFrame, calculate the number of people who prefer the variant
    if not item_df.empty:
        item_frequency = item_df[frequency_col].values[0]
        variant_frequency = item_frequency * variant_ratio
        return variant_frequency
    
    # If the item is not in the DataFrame, return 0
    return 0","data = {
    'Topping': ['ketchup', 'mustard', 'chili'],
    'Frequency': [3, 15, 7]
}

df = pd.DataFrame(data)
print(calculate_variant_preference(data_frame=df, item_col=""Topping"", frequency_col=""Frequency"", item_name=""mustard"", variant_ratio=1/5))"
Ellis Furniture Exports is shipping pieces of furniture made out of different types of wood. How many more pieces of maple furniture are there than pieces of oak furniture?,14,"Type of Wood | Beds | Bookcases
Maple | 14 | 19
Oak | 15 | 4
Walnut | 7 | 4
Pine | 4 | 5",4,4380,"import pandas as pd

def calculate_difference(df, wood_type1, wood_type2):
    """"""
    This function takes in a pandas DataFrame representing a table of furniture made out of different types of wood, and two types of wood. It returns the difference in the total number of pieces of furniture made from the two types of wood.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing types of wood and the number of pieces of furniture made from each type with columns 'Type of Wood', 'Beds', and 'Bookcases'.
    wood_type1 (str): The first type of wood.
    wood_type2 (str): The second type of wood.
    Returns:
    int: The difference in the total number of pieces of furniture made from the two types of wood.
    """"""
    # Filter the DataFrame for the specific types of wood
    wood_type1_df = df[df['Type of Wood'] == wood_type1]
    wood_type2_df = df[df['Type of Wood'] == wood_type2]
    
    # Calculate the total number of pieces of furniture made from each type of wood
    wood_type1_total = wood_type1_df['Beds'].values[0] + wood_type1_df['Bookcases'].values[0]
    wood_type2_total = wood_type2_df['Beds'].values[0] + wood_type2_df['Bookcases'].values[0]
    
    # Calculate the difference in the total number of pieces of furniture made from the two types of wood
    difference = wood_type1_total - wood_type2_total
    
    return difference","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Type of Wood': ['Maple', 'Oak', 'Walnut', 'Pine'],
    'Beds': [14, 15, 7, 4],
    'Bookcases': [19, 4, 4, 5]
})

# Call the tool to solve the problem
difference = calculate_difference(df, 'Maple', 'Oak')
print(difference)","def calculate_difference_between_categories(data_frame, category_col, item_col1, item_col2, category1, category2):
    """"""
    This function takes in a pandas DataFrame representing a table of item counts per category, and two categories. It returns the difference in the total number of items made from the two categories.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing categories and the number of items made from each category with columns specified by category_col, item_col1, and item_col2.
    category_col (str): The column name for the categories.
    item_col1 (str): The column name for the first item count.
    item_col2 (str): The column name for the second item count.
    category1 (str): The first category.
    category2 (str): The second category.
    
    Returns:
    int: The difference in the total number of items made from the two categories.
    """"""
    # Filter the DataFrame for the specific categories
    category1_df = data_frame[data_frame[category_col] == category1]
    category2_df = data_frame[data_frame[category_col] == category2]
    
    # Calculate the total number of items made from each category
    category1_total = category1_df[item_col1].values[0] + category1_df[item_col2].values[0]
    category2_total = category2_df[item_col1].values[0] + category2_df[item_col2].values[0]
    
    # Calculate the difference in the total number of items made from the two categories
    difference = category1_total - category2_total
    
    return difference","data = {
    'Type of Wood': ['Maple', 'Oak', 'Walnut', 'Pine'],
    'Beds': [14, 15, 7, 4],
    'Bookcases': [19, 4, 4, 5]
}

df = pd.DataFrame(data)
print(calculate_difference_between_categories(data_frame=df, category_col=""Type of Wood"", item_col1=""Beds"", item_col2=""Bookcases"", category1=""Maple"", category2=""Oak""))"
"Roger is cleaning his workbench and organizing his tools. He uses a frequency chart to keep track of the different types of tools he has. If 1/2 of Roger's wrenches are metric, how many metric wrenches does Roger have?",9,"Type | Frequency
hammer | 4
pliers | 7
screwdriver | 14
wrench | 18",5,13263,"import pandas as pd

def calculate_metric_wrenches(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency chart of tools, and returns the number of metric wrenches.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing types of tools and their frequencies with columns 'Type' and 'Frequency'.
    Returns:
    int: The number of metric wrenches.
    """"""
    # Filter the DataFrame for wrenches
    wrench_df = df[df['Type'] == 'wrench']
    if not wrench_df.empty:
        # Calculate the number of metric wrenches
        metric_wrenches = wrench_df['Frequency'].values[0] // 2
        return metric_wrenches
    else:
        return 0","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Type': ['hammer', 'pliers', 'screwdriver', 'wrench'],
    'Frequency': [4, 7, 14, 18]
})
# Call the tool to solve the problem
print(calculate_metric_wrenches(df))","def calculate_items_of_type_with_ratio(data_frame, item_col, frequency_col, item_type, item_ratio):
    """"""
    This function takes in a pandas DataFrame representing a frequency chart of items, a specific item type, and a ratio, and returns the number of items of the specific type based on the given ratio.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing types of items and their frequencies.
    item_col (str): The column name for the item types.
    frequency_col (str): The column name for the item frequencies.
    item_type (str): The specific item type to filter and calculate.
    item_ratio (float): The ratio to calculate the number of items of the specific type.
    
    Returns:
    int: The number of items of the specific type based on the given ratio.
    """"""
    # Filter the DataFrame for the specific item type
    item_df = data_frame[data_frame[item_col] == item_type]
    if not item_df.empty:
        # Calculate the number of items based on the given ratio
        items = int(item_df[frequency_col].values[0] * item_ratio)
        return items
    else:
        return 0","data = {
    'Type': ['hammer', 'pliers', 'screwdriver', 'wrench'],
    'Frequency': [4, 7, 14, 18]
}

df = pd.DataFrame(data)
print(calculate_items_of_type_with_ratio(data_frame=df, item_col=""Type"", frequency_col=""Frequency"", item_type=""wrench"", item_ratio=0.5))"
Arctic Fox Ski Village has trails on the north and south sides of the mountain. The frequency chart shows the number of trails of each difficulty on the south side. There are another 21 trails on the north side of the mountain. How many ski trails are there on both sides of the mountain combined?,47,"Difficulty | Frequency
easy | 7
intermediate | 8
expert | 11",5,16075,"import pandas as pd

def calculate_total_trails(df, north_trails):
    """"""
    This function takes in a pandas DataFrame representing a frequency chart of trails and the number of trails on the north side, and returns the total number of trails on both sides.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing trail difficulties and their frequencies with columns 'Difficulty' and 'Frequency'.
    north_trails (int): The number of trails on the north side.
    Returns:
    int: The total number of trails on both sides.
    """"""
    # Calculate the total number of trails on the south side
    south_trails = df['Frequency'].sum()
    
    # Calculate the total number of trails on both sides
    total_trails = south_trails + north_trails
    
    return total_trails","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Difficulty': ['easy', 'intermediate', 'expert'],
    'Frequency': [7, 8, 11]
})

# Number of trails on the north side
north_trails = 21

# Call the tool to solve the problem
total_trails = calculate_total_trails(df, north_trails)

# Print the answer
print(total_trails)","def calculate_total_from_frequency_and_additional_count(df, frequency_col, additional_count):
    """"""
    This function takes in a pandas DataFrame representing a frequency table and an additional count of items, and returns the total count of items.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing item categories and their frequencies.
    frequency_col (str): The column name for the frequencies.
    additional_count (int): The additional count of items.
    
    Returns:
    int: The total count of items.
    """"""
    # Calculate the total count from the frequency table
    frequency_total = df[frequency_col].sum()
    
    # Calculate the total count of items
    total_count = frequency_total + additional_count
    
    return total_count","df = pd.DataFrame({
    'Difficulty': ['easy', 'intermediate', 'expert'],
    'Frequency': [7, 8, 11]
})

additional_count = 21

print(calculate_total_from_frequency_and_additional_count(df, ""Frequency"", additional_count))"
"Mr. Swift, the band director, counted the number of instruments played by each member of the band. How many more girls than boys play the saxophone?",6,"Instrument | Boys | Girls
Saxophone | 10 | 16
Drums | 10 | 20
Clarinet | 14 | 20
Flute | 5 | 7
Trumpet | 16 | 11",5,16182,"import pandas as pd

def calculate_difference_in_instrument(df, instrument):
    """"""
    This function takes in a pandas DataFrame representing the number of instruments played by boys and girls, and returns the difference in the number of girls and boys playing the specified instrument.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of instruments played by boys and girls with columns 'Instrument', 'Boys', and 'Girls'.
    instrument (str): The name of the instrument for which the difference in the number of players is to be calculated.
    Returns:
    int: The difference in the number of girls and boys playing the specified instrument.
    """"""
    # Filter the DataFrame for the specific instrument
    instrument_df = df[df['Instrument'] == instrument]
    
    if not instrument_df.empty:
        boys = instrument_df['Boys'].values[0]
        girls = instrument_df['Girls'].values[0]
        difference = girls - boys
        return difference
    else:
        return 0","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Instrument': ['Saxophone', 'Drums', 'Clarinet', 'Flute', 'Trumpet'],
    'Boys': [10, 10, 14, 5, 16],
    'Girls': [16, 20, 20, 7, 11]
})
# Call the tool to solve the problem
difference = calculate_difference_in_instrument(df, 'Saxophone')
print(difference)","def calculate_difference_between_groups_for_item(data_frame, item_col, group1_col, group2_col, target_item):
    """"""
    This function takes in a pandas DataFrame representing a table with items and two groups, and returns the difference in the number of items between the two groups for a specific item.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing items and their quantities for two groups with columns specified by item_col, group1_col, and group2_col.
    item_col (str): The column name for the item names.
    group1_col (str): The column name for the first group's quantities.
    group2_col (str): The column name for the second group's quantities.
    target_item (str): The name of the item for which the difference in quantities is to be calculated.
    
    Returns:
    int: The difference in the number of items between the two groups for the specified item.
    """"""
    # Filter the DataFrame for the specific item
    item_df = data_frame[data_frame[item_col] == target_item]
    
    if not item_df.empty:
        group1_quantity = item_df[group1_col].values[0]
        group2_quantity = item_df[group2_col].values[0]
        difference = group2_quantity - group1_quantity
        return difference
    else:
        return 0","data = {
    'Instrument': ['Saxophone', 'Drums', 'Clarinet', 'Flute', 'Trumpet'],
    'Boys': [10, 10, 14, 5, 16],
    'Girls': [16, 20, 20, 7, 11]
}

df = pd.DataFrame(data)
print(calculate_difference_between_groups_for_item(data_frame=df, item_col=""Instrument"", group1_col=""Boys"", group2_col=""Girls"", target_item=""Saxophone""))"
"Andrew, a fantasy football fan, carefully studied the number of touchdowns completed by his favorite players last season. How many players scored more than 1 touchdown last season?",54,"Touchdowns scored | Frequency
0 | 13
1 | 1
2 | 7
3 | 0
4 | 19
5 | 12
6 | 16",7,15484,"import pandas as pd

def count_players_with_more_than_one_touchdown(df):
    """"""
    This function takes in a pandas DataFrame representing a table of touchdowns scored and their frequencies, and returns the number of players who scored more than 1 touchdown.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of touchdowns scored and their frequencies with columns 'Touchdowns scored' and 'Frequency'.
    Returns:
    int: The number of players who scored more than 1 touchdown.
    """"""
    # Filter the DataFrame for players who scored more than 1 touchdown
    more_than_one_touchdown_df = df[df['Touchdowns scored'] > 1]
    
    # Calculate the total number of players who scored more than 1 touchdown
    num_players = more_than_one_touchdown_df['Frequency'].sum()
    
    return num_players","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Touchdowns scored': [0, 1, 2, 3, 4, 5, 6],
    'Frequency': [13, 1, 7, 0, 19, 12, 16]
})
# Call the tool to solve the problem
print(count_players_with_more_than_one_touchdown(df))","def count_items_with_value_above_threshold(data_frame, value_col, frequency_col, value_threshold):
    """"""
    This function takes in a pandas DataFrame representing a table of item values and their frequencies, and returns the number of items with values greater than the specified threshold.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing item values and their frequencies.
    value_col (str): The column name for the item values.
    frequency_col (str): The column name for the item frequencies.
    value_threshold (int): The threshold value for filtering items.
    
    Returns:
    int: The number of items with values greater than the threshold.
    """"""
    # Filter the DataFrame for items with values greater than the threshold
    above_threshold_df = data_frame[data_frame[value_col] > value_threshold]
    
    # Calculate the total number of items with values greater than the threshold
    num_items = above_threshold_df[frequency_col].sum()
    
    return num_items","data = {
    'Touchdowns scored': [0, 1, 2, 3, 4, 5, 6],
    'Frequency': [13, 1, 7, 0, 19, 12, 16]
}

df = pd.DataFrame(data)
print(count_items_with_value_above_threshold(data_frame=df, value_col=""Touchdowns scored"", frequency_col=""Frequency"", value_threshold=1))"
Ashley's family went on a road trip and counted the number of cars they saw each day. How many cars in total did they see on Saturday and Sunday?,687,"Day | Number of cars
Saturday | 339
Sunday | 348
Monday | 232
Tuesday | 282",3,3816,"import pandas as pd

def calculate_total_cars(df, days):
    """"""
    This function takes in a pandas DataFrame representing a table of the number of cars seen each day and a list of days, and returns the total number of cars seen on those days.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing days and the number of cars seen with columns 'Day' and 'Number of cars'.
    days (list): A list of days to calculate the total number of cars seen.
    Returns:
    int: The total number of cars seen on the specified days.
    """"""
    # Filter the DataFrame for the specified days
    filtered_df = df[df['Day'].isin(days)]
    
    # Calculate the total number of cars seen
    total_cars = filtered_df['Number of cars'].sum()
    
    return total_cars","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday'],
    'Number of cars': [339, 348, 232, 282]
})

# Call the tool to solve the problem
total_cars = calculate_total_cars(df, ['Saturday', 'Sunday'])
print(total_cars)","def calculate_total_count_for_specific_days(df, day_col, count_col, days_list):
    """"""
    This function takes in a pandas DataFrame representing a table of daily counts and a list of specific days, and returns the total count for those days.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing daily counts with columns specified by day_col and count_col.
    day_col (str): The column name for the days.
    count_col (str): The column name for the counts.
    days_list (list): A list of specific days to calculate the total count.
    
    Returns:
    int: The total count for the specified days.
    """"""
    # Filter the DataFrame for the specified days
    filtered_df = df[df[day_col].isin(days_list)]
    
    # Calculate the total count for the specified days
    total_count = filtered_df[count_col].sum()
    
    return total_count","df = pd.DataFrame({
    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday'],
    'Number of cars': [339, 348, 232, 282]
})

print(calculate_total_count_for_specific_days(df, 'Day', 'Number of cars', ['Saturday', 'Sunday']))"
"At a charity basketball shootout, excited fans counted the baskets and misses made by each of the team mascots. How many misses did Bradley Bear have?",11,"Mascot | Baskets | Misses
Bradley Bear | 13 | 11
Rhianna Rhino | 17 | 5
Wendy Wolverine | 3 | 6
Tina Tiger | 1 | 12",4,16913,"import pandas as pd

def get_misses(df, mascot_name):
    """"""
    This function takes in a pandas DataFrame representing a table of mascot basketball shootout results and a mascot name, and returns the number of misses made by the mascot.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing mascot names, baskets made, and misses with columns 'Mascot', 'Baskets', and 'Misses'.
    mascot_name (str): The name of the mascot.
    Returns:
    int: The number of misses made by the mascot.
    """"""
    # Filter the DataFrame for the specific mascot
    mascot_df = df[df['Mascot'] == mascot_name]
    if not mascot_df.empty:
        # Return the number of misses made by the mascot
        return mascot_df['Misses'].values[0]
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Mascot': ['Bradley Bear', 'Rhianna Rhino', 'Wendy Wolverine', 'Tina Tiger'],
    'Baskets': [13, 17, 3, 1],
    'Misses': [11, 5, 6, 12]
})
# Call the tool to solve the problem
misses = get_misses(df, 'Bradley Bear')
print(misses)","def get_value_from_table_by_identifier(data_frame, identifier_col, value_col, identifier_value):
    """"""
    This function takes in a pandas DataFrame, an identifier column, a value column, and an identifier value, and returns the value from the value column corresponding to the given identifier value.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the data.
    identifier_col (str): The column name for the identifier values.
    value_col (str): The column name for the values to be retrieved.
    identifier_value (str): The identifier value to filter the data.
    
    Returns:
    Any: The value from the value column corresponding to the given identifier value, or None if the identifier value is not found.
    """"""
    # Filter the DataFrame for the specific identifier value
    filtered_df = data_frame[data_frame[identifier_col] == identifier_value]
    if not filtered_df.empty:
        # Return the value from the value column corresponding to the identifier value
        return filtered_df[value_col].values[0]
    else:
        return None","data = {
    'Mascot': ['Bradley Bear', 'Rhianna Rhino', 'Wendy Wolverine', 'Tina Tiger'],
    'Baskets': [13, 17, 3, 1],
    'Misses': [11, 5, 6, 12]
}

df = pd.DataFrame(data)
print(get_value_from_table_by_identifier(data_frame=df, identifier_col=""Mascot"", value_col=""Misses"", identifier_value=""Bradley Bear""))"
Each gym locker has 5 volleyballs. How many volleyballs are in 6 gym lockers?,30,"Number of gym lockers | Number of volleyballs
1 | 5
2 | 10
3 | 15
4 | 20
5 | 25
6 | ?",2,1607,"import pandas as pd

def calculate_volleyballs_in_lockers(df, num_lockers):
    """"""
    This function takes in a pandas DataFrame representing a table of gym lockers and the number of volleyballs in each locker, and returns the number of volleyballs in the specified number of lockers.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of gym lockers and the number of volleyballs in each locker with columns 'Number of gym lockers' and 'Number of volleyballs'.
    num_lockers (int): The number of gym lockers to calculate the number of volleyballs for.
    Returns:
    int: The number of volleyballs in the specified number of gym lockers.
    """"""
    # Find the number of volleyballs per locker
    volleyballs_per_locker = df['Number of volleyballs'][0] / df['Number of gym lockers'][0]
    
    # Calculate the number of volleyballs in the specified number of lockers
    total_volleyballs = num_lockers * volleyballs_per_locker
    
    return int(total_volleyballs)","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of gym lockers': [1, 2, 3, 4, 5],
    'Number of volleyballs': [5, 10, 15, 20, 25]
})

# Call the tool to solve the problem
num_volleyballs = calculate_volleyballs_in_lockers(df, 6)
print(num_volleyballs)","def calculate_total_items_from_item_quantities_per_group(item_quantities_df, group_col, item_col, num_groups):
    """"""
    This function takes in a pandas DataFrame representing a table of item quantities per group and a given number of groups, and returns the total number of items based on the item quantities per group and the number of groups.
    
    Args:
    item_quantities_df (pd.DataFrame): A pandas DataFrame containing the number of groups and the number of items in each group.
    group_col (str): The column name for the group values.
    item_col (str): The column name for the item quantities.
    num_groups (int): The number of groups to calculate the total number of items for.
    
    Returns:
    int: The total number of items in the specified number of groups.
    """"""
    # Find the number of items per group
    items_per_group = item_quantities_df[item_col][0] / item_quantities_df[group_col][0]
    
    # Calculate the total number of items in the specified number of groups
    total_items = num_groups * items_per_group
    
    return int(total_items)","item_quantities_data = {
    'Number of gym lockers': [1, 2, 3, 4, 5],
    'Number of volleyballs': [5, 10, 15, 20, 25]
}

item_quantities_df = pd.DataFrame(item_quantities_data)

num_groups = 6
print(calculate_total_items_from_item_quantities_per_group(item_quantities_df, ""Number of gym lockers"", ""Number of volleyballs"", num_groups))"
"Marco is playing a computer game in which he builds and manages an amusement park. The types of rides he has in his park are shown in the frequency chart. Marco plans to build 9 more rides. Afterward, how many rides will Marco's park have in all?",41,"Type | Frequency
little-kid rides | 10
roller coasters | 7
water rides | 4
spinning rides | 8
free-fall rides | 3",5,6710,"import pandas as pd

def calculate_total_rides(df, additional_rides):
    """"""
    This function takes in a pandas DataFrame representing a frequency chart of ride types and an integer representing the number of additional rides to be built, and returns the total number of rides in the park after the additional rides are built.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing ride types and their frequencies with columns 'Type' and 'Frequency'.
    additional_rides (int): The number of additional rides to be built.
    Returns:
    int: The total number of rides in the park after the additional rides are built.
    """"""
    # Calculate the current total number of rides
    current_total_rides = df['Frequency'].sum()
    
    # Calculate the total number of rides after the additional rides are built
    total_rides = current_total_rides + additional_rides
    
    return total_rides","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Type': ['little-kid rides', 'roller coasters', 'water rides', 'spinning rides', 'free-fall rides'],
    'Frequency': [10, 7, 4, 8, 3]
})

# Call the tool to solve the problem
total_rides = calculate_total_rides(df, 9)
print(total_rides)","def calculate_total_items_after_addition(data_frame, category_col, frequency_col, additional_items):
    """"""
    This function takes in a pandas DataFrame representing a frequency chart of categories and an integer representing the number of additional items to be added, and returns the total number of items after the addition.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing categories and their frequencies.
    category_col (str): The column name for the categories.
    frequency_col (str): The column name for the frequencies.
    additional_items (int): The number of additional items to be added.
    
    Returns:
    int: The total number of items after the addition.
    """"""
    # Calculate the current total number of items
    current_total_items = data_frame[frequency_col].sum()
    
    # Calculate the total number of items after the additional items are added
    total_items = current_total_items + additional_items
    
    return total_items","data = {
    'Type': ['little-kid rides', 'roller coasters', 'water rides', 'spinning rides', 'free-fall rides'],
    'Frequency': [10, 7, 4, 8, 3]
}

df = pd.DataFrame(data)
print(calculate_total_items_after_addition(data_frame=df, category_col=""Type"", frequency_col=""Frequency"", additional_items=9))"
"In preparation for graduation, some teachers and students volunteered for the various graduation committees. How many people are on the music committee?",35,"Committee | Students | Teachers
Program | 5 | 17
Ticket | 20 | 5
Music | 20 | 15
Schedule | 15 | 20
Food | 18 | 2",5,12179,"import pandas as pd

def count_people_on_committee(df, committee_name):
    """"""
    This function takes in a pandas DataFrame representing a committee table and a committee name, and returns the total number of people on the specified committee.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing committee names and the number of students and teachers on each committee. The DataFrame should have columns 'Committee', 'Students', and 'Teachers'.
    committee_name (str): The name of the committee.
    Returns:
    int: The total number of people on the specified committee.
    """"""
    # Filter the DataFrame for the specific committee
    committee_df = df[df['Committee'] == committee_name]
    if not committee_df.empty:
        # Calculate the total number of people on the committee
        total_people = committee_df['Students'].values[0] + committee_df['Teachers'].values[0]
        return total_people
    else:
        return 0","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Committee': ['Program', 'Ticket', 'Music', 'Schedule', 'Food'],
    'Students': [5, 20, 20, 15, 18],
    'Teachers': [17, 5, 15, 20, 2]
})
# Call the tool to solve the problem
print(count_people_on_committee(df, 'Music'))","def count_total_people_in_group_from_subgroups(data_frame, group_col, subgroup1_col, subgroup2_col, group_name):
    """"""
    This function takes in a pandas DataFrame representing a table of group names and the number of people in each subgroup, and returns the total number of people in the specified group.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing group names and the number of people in each subgroup.
    group_col (str): The column name for the group names.
    subgroup1_col (str): The column name for the first subgroup.
    subgroup2_col (str): The column name for the second subgroup.
    group_name (str): The name of the group.
    
    Returns:
    int: The total number of people in the specified group.
    """"""
    # Filter the DataFrame for the specific group name
    group_df = data_frame[data_frame[group_col] == group_name]
    if not group_df.empty:
        # Calculate the total number of people in the group
        total_people = group_df[subgroup1_col].values[0] + group_df[subgroup2_col].values[0]
        return total_people
    else:
        return 0","data = {
    'Committee': ['Program', 'Ticket', 'Music', 'Schedule', 'Food'],
    'Students': [5, 20, 20, 15, 18],
    'Teachers': [17, 5, 15, 20, 2]
}

df = pd.DataFrame(data)
print(count_total_people_in_group_from_subgroups(data_frame=df, group_col=""Committee"", subgroup1_col=""Students"", subgroup2_col=""Teachers"", group_name=""Music""))"
"Dr. Marshall, a zoo director, researched ticket prices at other zoos around the country. How much more does a child ticket cost at the Minnesota Zoo than at the Central Park Zoo?",5,"Zoo | Child | Senior
Atlanta | $14 | $15
Central Park | $5 | $7
San Francisco | $9 | $12
Minnesota | $10 | $10
Boise | $3 | $4",4,8611,"import pandas as pd

def calculate_price_difference(df, zoo1, zoo2, ticket_type):
    """"""
    This function takes in a pandas DataFrame representing a table of zoo ticket prices, and calculates the price difference between two zoos for a specific ticket type.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing zoo names and ticket prices with columns 'Zoo', 'Child', and 'Senior'.
    zoo1 (str): The name of the first zoo.
    zoo2 (str): The name of the second zoo.
    ticket_type (str): The type of ticket to compare prices for ('Child' or 'Senior').
    Returns:
    float: The price difference between the two zoos for the specified ticket type.
    """"""
    # Filter the DataFrame for the specific zoos
    zoo1_df = df[df['Zoo'] == zoo1]
    zoo2_df = df[df['Zoo'] == zoo2]
    
    # Get the ticket prices for the specified ticket type
    zoo1_price = zoo1_df[ticket_type].values[0]
    zoo2_price = zoo2_df[ticket_type].values[0]
    
    # Calculate the price difference
    price_difference = zoo1_price - zoo2_price
    
    return price_difference","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Zoo': ['Atlanta', 'Central Park', 'San Francisco', 'Minnesota', 'Boise'],
    'Child': [14, 5, 9, 10, 3],
    'Senior': [15, 7, 12, 10, 4]
})

# Call the tool to solve the problem
price_difference = calculate_price_difference(df, 'Minnesota', 'Central Park', 'Child')
print(price_difference)","def calculate_price_difference_between_entities(data_frame, entity_col, item_col, entity1, entity2, item_type):
    """"""
    This function takes in a pandas DataFrame representing a table of item prices for different entities, and calculates the price difference between two entities for a specific item type.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing entity names and item prices.
    entity_col (str): The column name for the entity names.
    item_col (str): The column name for the item types.
    entity1 (str): The name of the first entity.
    entity2 (str): The name of the second entity.
    item_type (str): The type of item to compare prices for.
    
    Returns:
    float: The price difference between the two entities for the specified item type.
    """"""
    # Filter the DataFrame for the specific entities
    entity1_df = data_frame[data_frame[entity_col] == entity1]
    entity2_df = data_frame[data_frame[entity_col] == entity2]
    
    # Get the item prices for the specified item type
    entity1_price = entity1_df[item_col][item_type].values[0]
    entity2_price = entity2_df[item_col][item_type].values[0]
    
    # Calculate the price difference
    price_difference = abs(entity1_price - entity2_price)
    
    return price_difference","data = {
    'Zoo': ['Atlanta', 'Central Park', 'San Francisco', 'Minnesota', 'Boise'],
    'Child': [14, 5, 9, 10, 3],
    'Senior': [15, 7, 12, 10, 4]
}

df = pd.DataFrame(data)
print(calculate_price_difference_between_entities(data_frame=df, entity_col=""Zoo"", item_col=""Child"", entity1=""Minnesota"", entity2=""Central Park"", item_type=""Child""))"
Each gym locker has 5 soccer balls. How many soccer balls are in 6 gym lockers?,30,"Number of gym lockers | Number of soccer balls
1 | 5
2 | 10
3 | 15
4 | 20
5 | 25
6 | ?",1,10356,"def calculate_soccer_balls(num_lockers):
    """"""
    This function takes in the number of gym lockers and returns the number of soccer balls based on the given ratio.
    Args:
    num_lockers (int): The number of gym lockers.
    Returns:
    int: The number of soccer balls.
    """"""
    # The ratio of gym lockers to soccer balls is 1:5
    num_balls = num_lockers * 5
    return num_balls","# Call the tool to solve the problem
print(calculate_soccer_balls(6))","def calculate_items_based_on_ratio(num_groups, ratio):
    """"""
    This function takes in the number of groups and a ratio, and returns the total number of items based on the given ratio.
    
    Args:
    num_groups (int): The number of groups.
    ratio (int): The ratio of items per group.
    
    Returns:
    int: The total number of items.
    """"""
    # Calculate the total number of items based on the ratio
    num_items = num_groups * ratio
    return num_items","print(calculate_items_based_on_ratio(num_groups=6, ratio=5))"
"While looking through an almanac at the library, Colin noticed some data showing the population density of various states. How many more people per square mile lived in Idaho in 2000 than in 1990?",3,"State | 1990 | 2000
Idaho | 12 | 15
Nevada | 10 | 18
North Dakota | 9 | 9",4,11796,"import pandas as pd

def calculate_population_increase(df, state):
    """"""
    This function takes in a pandas DataFrame representing a population density table and a state name, and returns the increase in population density from 1990 to 2000 for the given state.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing population density data with columns 'State', '1990', and '2000'.
    state (str): The name of the state to calculate the population increase for.
    Returns:
    int: The increase in population density from 1990 to 2000 for the given state.
    """"""
    # Filter the DataFrame for the specific state
    state_df = df[df['State'] == state]
    if not state_df.empty:
        # Calculate the increase in population density
        increase = state_df['2000'].values[0] - state_df['1990'].values[0]
        return increase
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'State': ['Idaho', 'Nevada', 'North Dakota'],
    '1990': [12, 10, 9],
    '2000': [15, 18, 9]
})
# Call the tool to solve the problem
increase = calculate_population_increase(df, 'Idaho')
print(increase)","def calculate_increase_in_value_for_entity_between_years(data_frame, entity_col, year1_col, year2_col, entity_name):
    """"""
    This function takes in a pandas DataFrame representing a table of entities and their values for different years, and returns the increase in value for a specific entity from one year to another.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing entities and their values for different years.
    entity_col (str): The column name for the entities.
    year1_col (str): The column name for the first year.
    year2_col (str): The column name for the second year.
    entity_name (str): The name of the entity to calculate the increase in value for.
    
    Returns:
    float: The increase in value for the entity from year1 to year2. Returns None if the entity is not found in the DataFrame.
    """"""
    # Filter the DataFrame for the specific entity
    entity_df = data_frame[data_frame[entity_col] == entity_name]
    if not entity_df.empty:
        # Calculate the increase in value
        increase = entity_df[year2_col].values[0] - entity_df[year1_col].values[0]
        return increase
    else:
        return None","data = {
    'State': ['Idaho', 'Nevada', 'North Dakota'],
    '1990': [12, 10, 9],
    '2000': [15, 18, 9]
}

df = pd.DataFrame(data)
print(calculate_increase_in_value_for_entity_between_years(data_frame=df, entity_col=""State"", year1_col=""1990"", year2_col=""2000"", entity_name=""Idaho""))"
Joel entered his sister into their town's Smelly Shoe Competition. Joel observed contestants of all ages proudly strutting around wearing different kinds of smelly shoes. What is the probability that a randomly selected contestant is wearing tennis shoes and is under age 12? Simplify any fractions.,0.3125," | Under age 12 | 13 to 30 years old
Tennis shoes | 5 | 1
High heels | 4 | 6",8,5582,"import pandas as pd

def calculate_probability(df):
    """"""
    This function takes in a pandas DataFrame representing a table of contestants and their shoe types and ages, and returns the probability that a randomly selected contestant is wearing tennis shoes and is under age 12.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of contestants wearing different types of shoes and their ages. The DataFrame should have columns 'Under age 12' and '13 to 30 years old'.
    Returns:
    float: The probability that a randomly selected contestant is wearing tennis shoes and is under age 12.
    """"""
    # Calculate the total number of contestants
    total_contestants = df.sum().sum()
    
    # Calculate the number of contestants wearing tennis shoes and under age 12
    tennis_shoes_under_12 = df.loc['Tennis shoes', 'Under age 12']
    
    # Calculate the probability
    probability = tennis_shoes_under_12 / total_contestants
    
    return probability","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Under age 12': [5, 4],
    '13 to 30 years old': [1, 6]
}, index=['Tennis shoes', 'High heels'])

# Call the tool to solve the problem
probability = calculate_probability(df)
print(probability)","def calculate_probability_of_specific_combination(data_frame, category1_col, category2_col, category1_value, category2_value):
    """"""
    This function takes in a pandas DataFrame representing a table of counts for combinations of two categories, and returns the probability of a specific combination of category values.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing counts for combinations of two categories.
    category1_col (str): The column name for the first category.
    category2_col (str): The column name for the second category.
    category1_value (str): The specific value of the first category for the combination.
    category2_value (str): The specific value of the second category for the combination.
    
    Returns:
    float: The probability of the specific combination of category values.
    """"""
    # Calculate the total count of all combinations
    total_count = data_frame.sum().sum()
    
    # Calculate the count of the specific combination of category values
    specific_combination_count = data_frame.loc[category1_value, category2_value]
    
    # Calculate the probability
    probability = specific_combination_count / total_count
    
    return probability","data = {
    'Under age 12': [5, 4],
    '13 to 30 years old': [1, 6]
}

df = pd.DataFrame(data, index=['Tennis shoes', 'High heels'])

print(calculate_probability_of_specific_combination(data_frame=df, category1_col='Under age 12', category2_col='13 to 30 years old', category1_value='Tennis shoes', category2_value='Under age 12'))"
"Hakim, a candy store employee, placed peppermint candies into jars of various sizes. How many jars had exactly 0 peppermint candies?",4,"Stem | Leaf 
0 | 0, 0, 0, 0
1 | 2
2 | 4
3 | 
4 | 
5 | 3, 5, 8",5,2809,"import pandas as pd
def count_jars_with_0_peppermint_candies(df):
    """"""
    This function takes in a pandas dataframe of peppermint candies per jar, and returns the number of jars that have exactly 0 peppermint candies.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of peppermint candies per jar.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of jars that have exactly 0 peppermint candies.
    """"""
    # prepare a list to calculate candies in each jar
    candies = []
    # calculate the total number of peppermint candies in each jar
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            candies.append(stem * 10 + leaf[j])
    # filter the jars where the total number of peppermint candies is exactly 0
    filtered = [candy for candy in candies if candy == 0]
    # count the number of rows
    num_jars = len(filtered)
    return num_jars","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [0, 1, 2, 3, 4, 5],
    'Leaf': [[0, 0, 0, 0], [2], [4], [], [], [3, 5, 8]]
})
# Call the tool to solve the problem
print(count_jars_with_0_peppermint_candies(df))","def count_groups_with_exact_item_count_in_stem_leaf(data_frame, stem_col, leaf_col, item_count):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of groups and a specific item count, and returns the number of groups that have exactly the specified number of items.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    item_count (int): The specific count of items for filtering groups.
    
    Returns:
    int: The number of groups with exactly the specified number of items.
    """"""
    # Initialize the list to calculate items in each group
    items = []
    
    # Calculate the total value of items in each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Filter the groups where the total number of items is exactly the specified count
    filtered = [item for item in items if item == item_count]
    
    # Count the number of groups
    num_groups = len(filtered)
    
    return num_groups","data = {
    ""Stem"": [0, 1, 2, 3, 4, 5],
    ""Leaf"": [[0, 0, 0, 0], [2], [4], [], [], [3, 5, 8]]
}

df = pd.DataFrame(data)
print(count_groups_with_exact_item_count_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf"", item_count=0))"
"At the summer carnival, each member of the Dickerson family played a round of bean bag toss. How many more misses than hits did Aunt Lisa have?",9,"Person | Hits | Misses
Aunt Sarah | 10 | 3
Uncle Rob | 12 | 3
Cousin Susan | 4 | 6
Aunt Lisa | 2 | 11",4,6947,"import pandas as pd

def calculate_misses_over_hits(df, person):
    """"""
    This function takes in a pandas DataFrame representing a table of hits and misses and a person's name, and returns the difference between the number of misses and hits for that person.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing persons' names, hits and misses with columns 'Person', 'Hits' and 'Misses'.
    person (str): The name of the person.
    Returns:
    int: The difference between the number of misses and hits for the person.
    """"""
    # Filter the DataFrame for the specific person
    person_df = df[df['Person'] == person]
    if not person_df.empty:
        hits = person_df['Hits'].values[0]
        misses = person_df['Misses'].values[0]
        return misses - hits
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Person': ['Aunt Sarah', 'Uncle Rob', 'Cousin Susan', 'Aunt Lisa'],
    'Hits': [10, 12, 4, 2],
    'Misses': [3, 3, 6, 11]
})

# Call the tool to solve the problem
result = calculate_misses_over_hits(df, 'Aunt Lisa')
print(result)","def calculate_difference_between_two_columns_for_entity(data_frame, entity_col, value1_col, value2_col, entity_name):
    """"""
    This function takes in a pandas DataFrame, two column names, and an entity name, and returns the difference between the values of the two columns for the specific entity.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing entities and their values.
    entity_col (str): The column name for the entities.
    value1_col (str): The column name for the first set of values.
    value2_col (str): The column name for the second set of values.
    entity_name (str): The name of the specific entity.
    
    Returns:
    float: The difference between the values of the two columns for the specific entity.
    """"""
    # Filter the DataFrame for the specific entity
    entity_df = data_frame[data_frame[entity_col] == entity_name]
    if not entity_df.empty:
        value1 = entity_df[value1_col].values[0]
        value2 = entity_df[value2_col].values[0]
        return value2 - value1
    else:
        return None","data = {
    'Person': ['Aunt Sarah', 'Uncle Rob', 'Cousin Susan', 'Aunt Lisa'],
    'Hits': [10, 12, 4, 2],
    'Misses': [3, 3, 6, 11]
}

df = pd.DataFrame(data)
print(calculate_difference_between_two_columns_for_entity(data_frame=df, entity_col=""Person"", value1_col=""Hits"", value2_col=""Misses"", entity_name=""Aunt Lisa""))"
Some companies compared how many phone calls they made. How many more phone calls did Tad's Coffee Company make than Critical Insight Consulting?,5688,"Company | Number of phone calls
Reardon Corporation | 2,709
Brave New Day Corporation | 5,726
Tad's Coffee Company | 7,314
Critical Insight Consulting | 1,626
Nature Now | 4,038",3,9738,"import pandas as pd

def calculate_difference_in_calls(df, company1, company2):
    """"""
    This function takes in a pandas DataFrame representing a table of companies and their number of phone calls, and returns the difference in phone calls between two specified companies.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing company names and their number of phone calls with columns 'Company' and 'Number of phone calls'.
    company1 (str): The name of the first company.
    company2 (str): The name of the second company.
    Returns:
    int: The difference in phone calls between the two companies.
    """"""
    # Filter the DataFrame for the specific companies
    company1_df = df[df['Company'] == company1]
    company2_df = df[df['Company'] == company2]
    
    # Get the number of phone calls for each company
    company1_calls = company1_df['Number of phone calls'].values[0]
    company2_calls = company2_df['Number of phone calls'].values[0]
    
    # Calculate the difference in phone calls
    difference = company1_calls - company2_calls
    
    return difference","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Company': ['Reardon Corporation', 'Brave New Day Corporation', ""Tad's Coffee Company"", 'Critical Insight Consulting', 'Nature Now'],
    'Number of phone calls': [2709, 5726, 7314, 1626, 4038]
})

# Call the tool to solve the problem
difference = calculate_difference_in_calls(df, ""Tad's Coffee Company"", 'Critical Insight Consulting')
print(difference)","def calculate_difference_between_two_rows(data_frame, row_id_col, value_col, row_id1, row_id2):
    """"""
    This function takes in a pandas DataFrame and calculates the difference in a specific column's values between two rows based on a specific column value.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the data.
    row_id_col (str): The column name used to identify the rows.
    value_col (str): The column name for the values to calculate the difference.
    row_id1 (str): The identifier for the first row.
    row_id2 (str): The identifier for the second row.
    
    Returns:
    float: The difference in values between the two rows.
    """"""
    # Filter the DataFrame for the specific rows
    row1_df = data_frame[data_frame[row_id_col] == row_id1]
    row2_df = data_frame[data_frame[row_id_col] == row_id2]
    
    # Get the values for each row
    row1_value = row1_df[value_col].values[0]
    row2_value = row2_df[value_col].values[0]
    
    # Calculate the difference in values
    difference = row1_value - row2_value
    
    return difference","data = {
    'Company': ['Reardon Corporation', 'Brave New Day Corporation', ""Tad's Coffee Company"", 'Critical Insight Consulting', 'Nature Now'],
    'Number of phone calls': [2709, 5726, 7314, 1626, 4038]
}

df = pd.DataFrame(data)
print(calculate_difference_between_two_rows(data_frame=df, row_id_col=""Company"", value_col=""Number of phone calls"", row_id1=""Tad's Coffee Company"", row_id2='Critical Insight Consulting'))"
How much more does a night's stay at Liberty Bed and Breakfast cost than a night's stay at Grand Vista Hotel?,324,"night's stay at Grand Vista Hotel | $132.00
night's stay at Royal Canopy Resort | $175.00
night's stay at Oceanspray Inn | $445.00
night's stay at Cerulean Resort | $321.00
night's stay at Mahogany Lodge | $425.00
night's stay at Liberty Bed and Breakfast | $456.00",8,4277,"import pandas as pd

def calculate_price_difference(hotel_df, hotel1, hotel2):
    """"""
    This function takes in a pandas DataFrame representing a hotel price table and two hotel names, and returns the price difference between the two hotels.
    Args:
    hotel_df (pd.DataFrame): A pandas DataFrame containing hotel names and their prices with columns 'Hotel' and 'Price'.
    hotel1 (str): The name of the first hotel.
    hotel2 (str): The name of the second hotel.
    Returns:
    float: The price difference between the two hotels.
    """"""
    # Filter the DataFrame for the specific hotels
    hotel1_df = hotel_df[hotel_df['Hotel'] == hotel1]
    hotel2_df = hotel_df[hotel_df['Hotel'] == hotel2]
    
    # Check if both hotels are in the DataFrame
    if not hotel1_df.empty and not hotel2_df.empty:
        # Calculate the price difference
        price_difference = hotel2_df['Price'].values[0] - hotel1_df['Price'].values[0]
        return price_difference
    else:
        return None","# Initialize the table into a dataframe
hotel_df = pd.DataFrame({
    'Hotel': [""night's stay at Grand Vista Hotel"", ""night's stay at Royal Canopy Resort"", ""night's stay at Oceanspray Inn"", ""night's stay at Cerulean Resort"", ""night's stay at Mahogany Lodge"", ""night's stay at Liberty Bed and Breakfast""],
    'Price': [132.00, 175.00, 445.00, 321.00, 425.00, 456.00]
})

# Call the tool to solve the problem
price_difference = calculate_price_difference(hotel_df, ""night's stay at Grand Vista Hotel"", ""night's stay at Liberty Bed and Breakfast"")
print(price_difference)","def calculate_price_difference_between_items(item_prices_df, item_col, price_col, item1, item2):
    """"""
    This function takes in a pandas DataFrame representing a table of item prices and two item names, and returns the price difference between the two items.
    
    Args:
    item_prices_df (pd.DataFrame): A pandas DataFrame containing item names and their prices.
    item_col (str): The column name for the item names.
    price_col (str): The column name for the item prices.
    item1 (str): The name of the first item.
    item2 (str): The name of the second item.
    
    Returns:
    float: The price difference between the two items.
    """"""
    # Filter the DataFrame for the specific items
    item1_df = item_prices_df[item_prices_df[item_col] == item1]
    item2_df = item_prices_df[item_prices_df[item_col] == item2]
    
    # Check if both items are in the DataFrame
    if not item1_df.empty and not item2_df.empty:
        # Calculate the price difference
        price_difference = item2_df[price_col].values[0] - item1_df[price_col].values[0]
        return price_difference
    else:
        return None","item_prices_data = {
    'Item': [""night's stay at Grand Vista Hotel"", ""night's stay at Royal Canopy Resort"", ""night's stay at Oceanspray Inn"", ""night's stay at Cerulean Resort"", ""night's stay at Mahogany Lodge"", ""night's stay at Liberty Bed and Breakfast""],
    'Price': [132.00, 175.00, 445.00, 321.00, 425.00, 456.00]
}

item_prices_df = pd.DataFrame(item_prices_data)

price_difference = calculate_price_difference_between_items(item_prices_df, ""Item"", ""Price"", ""night's stay at Grand Vista Hotel"", ""night's stay at Liberty Bed and Breakfast"")
print(price_difference)"
Some students at Dayton Middle School signed up to help out with the school play. How many students are on the set design committee?,10,"Committee | Boys | Girls
Lighting | 16 | 14
Casting | 9 | 7
Costume | 5 | 13
Sound | 19 | 2
Set design | 8 | 2",5,3253,"import pandas as pd

def count_students_in_committee(df, committee_name):
    """"""
    This function takes in a pandas DataFrame representing a committee table and a committee name, and returns the total number of students in the committee.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing committee names and the number of boys and girls in each committee with columns 'Committee', 'Boys', and 'Girls'.
    committee_name (str): The name of the committee.
    Returns:
    int: The total number of students in the committee.
    """"""
    # Filter the DataFrame for the specific committee
    committee_df = df[df['Committee'] == committee_name]
    if not committee_df.empty:
        # Calculate the total number of students in the committee
        total_students = committee_df['Boys'].values[0] + committee_df['Girls'].values[0]
        return total_students
    else:
        return 0","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Committee': ['Lighting', 'Casting', 'Costume', 'Sound', 'Set design'],
    'Boys': [16, 9, 5, 19, 8],
    'Girls': [14, 7, 13, 2, 2]
})
# Call the tool to solve the problem
students_in_set_design = count_students_in_committee(df, 'Set design')
print(students_in_set_design)","def count_total_members_in_group(group_df, group_col, member_cols, group_name):
    """"""
    This function takes in a pandas DataFrame representing a group table, a list of member count columns, and a group name, and returns the total number of members in the group.
    
    Args:
    group_df (pd.DataFrame): A pandas DataFrame containing group names and the number of members in each group.
    group_col (str): The column name for the group names.
    member_cols (list): A list of column names for the member counts.
    group_name (str): The name of the group.
    
    Returns:
    int: The total number of members in the group.
    """"""
    # Filter the DataFrame for the specific group
    group_data = group_df[group_df[group_col] == group_name]
    if not group_data.empty:
        # Calculate the total number of members in the group
        total_members = sum(group_data[col].values[0] for col in member_cols)
        return total_members
    else:
        return 0","df = pd.DataFrame({
    'Committee': ['Lighting', 'Casting', 'Costume', 'Sound', 'Set design'],
    'Boys': [16, 9, 5, 19, 8],
    'Girls': [14, 7, 13, 2, 2]
})
print(count_total_members_in_group(group_df=df, group_col='Committee', member_cols=['Boys', 'Girls'], group_name='Set design'))"
"Mr. Lowery, the band director, counted the number of instruments played by each member of the band. How many more band members play the drums than the flute?",2,"Instrument | Boys | Girls
Clarinet | 17 | 6
Trombone | 11 | 3
Drums | 15 | 4
Flute | 8 | 9",5,14647,"import pandas as pd

def calculate_difference_instruments(df, instrument1, instrument2):
    """"""
    This function takes in a pandas DataFrame representing the number of instruments played by boys and girls, and returns the difference in the number of band members playing the two specified instruments.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of instruments played by boys and girls with columns 'Instrument', 'Boys', and 'Girls'.
    instrument1 (str): The name of the first instrument.
    instrument2 (str): The name of the second instrument.
    Returns:
    int: The difference in the number of band members playing the two specified instruments.
    """"""
    # Filter the DataFrame for the specific instruments
    instrument1_df = df[df['Instrument'] == instrument1]
    instrument2_df = df[df['Instrument'] == instrument2]
    
    # Calculate the total number of band members playing each instrument
    instrument1_total = instrument1_df['Boys'].values[0] + instrument1_df['Girls'].values[0]
    instrument2_total = instrument2_df['Boys'].values[0] + instrument2_df['Girls'].values[0]
    
    # Calculate the difference in the number of band members playing the two instruments
    difference = abs(instrument1_total - instrument2_total)
    
    return difference","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Instrument': ['Clarinet', 'Trombone', 'Drums', 'Flute'],
    'Boys': [17, 11, 15, 8],
    'Girls': [6, 3, 4, 9]
})

# Call the tool to solve the problem
difference = calculate_difference_instruments(df, 'Drums', 'Flute')
print(difference)","def calculate_difference_in_counts_of_two_categories(df, category_col, count_col1, count_col2, category1, category2):
    """"""
    This function takes in a pandas DataFrame representing a table of counts for various categories and two category names, and returns the difference in the total counts of the two categories.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing counts for various categories.
    category_col (str): The column name for the categories.
    count_col1 (str): The column name for the first count.
    count_col2 (str): The column name for the second count.
    category1 (str): The name of the first category.
    category2 (str): The name of the second category.
    
    Returns:
    int: The difference in the total counts of the two categories.
    """"""
    # Filter the DataFrame for the specific categories
    category1_df = df[df[category_col] == category1]
    category2_df = df[df[category_col] == category2]
    
    # Calculate the total count for each category
    category1_total = category1_df[count_col1].values[0] + category1_df[count_col2].values[0]
    category2_total = category2_df[count_col1].values[0] + category2_df[count_col2].values[0]
    
    # Calculate the difference in the total counts of the two categories
    difference = abs(category1_total - category2_total)
    
    return difference","df = pd.DataFrame({
    'Instrument': ['Clarinet', 'Trombone', 'Drums', 'Flute'],
    'Boys': [17, 11, 15, 8],
    'Girls': [6, 3, 4, 9]
})

print(calculate_difference_in_counts_of_two_categories(df, 'Instrument', 'Boys', 'Girls', 'Drums', 'Flute'))"
Each football field has 10 sprinklers. How many sprinklers are on 6 football fields?,60,"Number of football fields | Number of sprinklers
1 | 10
2 | 20
3 | 30
4 | 40
5 | 50
6 | ?",1,14924,"import pandas as pd

def calculate_sprinklers_for_fields(df, num_fields):
    """"""
    This function takes in a pandas DataFrame representing a table of football fields and their corresponding number of sprinklers, and returns the number of sprinklers for the given number of football fields.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of football fields and their corresponding number of sprinklers with columns 'Number of football fields' and 'Number of sprinklers'.
    num_fields (int): The number of football fields for which the number of sprinklers is to be calculated.
    Returns:
    int: The number of sprinklers for the given number of football fields.
    """"""
    # Calculate the number of sprinklers per football field
    sprinklers_per_field = df['Number of sprinklers'][0] // df['Number of football fields'][0]
    
    # Calculate the number of sprinklers for the given number of football fields
    total_sprinklers = num_fields * sprinklers_per_field
    
    return total_sprinklers","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of football fields': [1, 2, 3, 4, 5],
    'Number of sprinklers': [10, 20, 30, 40, 50]
})

# Call the tool to solve the problem
num_fields = 6
num_sprinklers = calculate_sprinklers_for_fields(df, num_fields)
print(num_sprinklers)","def calculate_total_items_for_groups(data_frame, group_col, item_col, num_groups):
    """"""
    This function takes in a pandas DataFrame representing a table of group-item relationships and a given number of groups, and returns the total number of items for the given number of groups based on the items per group.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the number of groups and their corresponding number of items with specified columns for group_col and item_col.
    group_col (str): The column name for the group values.
    item_col (str): The column name for the item values.
    num_groups (int): The number of groups for which the total number of items is to be calculated.
    
    Returns:
    int: The total number of items for the given number of groups.
    """"""
    # Calculate the number of items per group
    items_per_group = data_frame[item_col][0] // data_frame[group_col][0]
    
    # Calculate the total number of items for the given number of groups
    total_items = num_groups * items_per_group
    
    return total_items","data = {
    'Number of football fields': [1, 2, 3, 4, 5],
    'Number of sprinklers': [10, 20, 30, 40, 50]
}

df = pd.DataFrame(data)

num_groups = 6
total_sprinklers = calculate_total_items_for_groups(data_frame=df, group_col=""Number of football fields"", item_col=""Number of sprinklers"", num_groups=num_groups)
print(total_sprinklers)"
"An Idaho farmer has been monitoring crop prices over time. Per cwt, how much did potatoes cost in 2003?",4,"Crop | 2003 | 2004
Lentils | $18 | $14
Canola | $10 | $11
Onions | $11 | $7
Potatoes | $4 | $4",4,3341,"import pandas as pd

def get_crop_price(crop_prices_df, crop, year):
    """"""
    This function takes in a pandas DataFrame representing crop prices over time, a crop name, and a year, and returns the price of the crop in the specified year.
    Args:
    crop_prices_df (pd.DataFrame): A pandas DataFrame containing crop prices over time with columns 'Crop', and years as column names.
    crop (str): The name of the crop to get the price for.
    year (str): The year to get the price for the specified crop.
    Returns:
    float: The price of the specified crop in the specified year.
    """"""
    # Filter the DataFrame for the specific crop
    crop_df = crop_prices_df[crop_prices_df['Crop'] == crop]
    
    # Get the price of the crop in the specified year
    if not crop_df.empty:
        price = crop_df[year].values[0]
        return price
    else:
        return None","# Initialize the table into a dataframe
crop_prices_df = pd.DataFrame({
    'Crop': ['Lentils', 'Canola', 'Onions', 'Potatoes'],
    '2003': [18, 10, 11, 4],
    '2004': [14, 11, 7, 4]
})

# Call the tool to solve the problem
potato_price_2003 = get_crop_price(crop_prices_df, 'Potatoes', '2003')
print(potato_price_2003)","def get_item_value_in_specific_year(item_values_df, item_col, item_name, year):
    """"""
    This function takes in a pandas DataFrame representing a table of item values over time, an item name, and a year, and returns the value of the item in the specified year.
    
    Args:
    item_values_df (pd.DataFrame): A pandas DataFrame containing item values over time with columns specified by item_col, and years as column names.
    item_col (str): The column name for the item names.
    item_name (str): The name of the item to get the value for.
    year (str): The year to get the value for the specified item.
    
    Returns:
    float: The value of the specified item in the specified year.
    """"""
    # Filter the DataFrame for the specific item
    item_df = item_values_df[item_values_df[item_col] == item_name]
    
    # Get the value of the item in the specified year
    if not item_df.empty:
        value = item_df[year].values[0]
        return value
    else:
        return None","item_values_data = {
    'Crop': ['Lentils', 'Canola', 'Onions', 'Potatoes'],
    '2003': [18, 10, 11, 4],
    '2004': [14, 11, 7, 4]
}

item_values_df = pd.DataFrame(item_values_data)

print(get_item_value_in_specific_year(item_values_df, ""Crop"", ""Potatoes"", ""2003""))"
"To get credit for meeting his school's community service requirement, Edmond kept a volunteering log. What is the range of the numbers?",5,"Day | Hours
Monday | 6
Tuesday | 6
Wednesday | 6
Thursday | 8
Friday | 3
Saturday | 7",7,4943,"import pandas as pd

def calculate_range(df):
    """"""
    This function takes in a pandas DataFrame representing a volunteering log and returns the range of the hours.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing days and hours with columns 'Day' and 'Hours'.
    Returns:
    int: The range of the hours.
    """"""
    # Calculate the range of the hours
    range_hours = df['Hours'].max() - df['Hours'].min()
    
    return range_hours","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    'Hours': [6, 6, 6, 8, 3, 7]
})
# Call the tool to solve the problem
range_hours = calculate_range(df)
print(range_hours)","def calculate_range_of_column(data_frame, column_name):
    """"""
    This function takes in a pandas DataFrame and a column name, and returns the range of the values in the column.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the data.
    column_name (str): The name of the column to calculate the range.
    
    Returns:
    float: The range of the values in the column.
    """"""
    # Calculate the range of the values in the column
    range_values = data_frame[column_name].max() - data_frame[column_name].min()
    
    return range_values","df = pd.DataFrame({
    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    'Hours': [6, 6, 6, 8, 3, 7]
})
print(calculate_range_of_column(data_frame=df, column_name='Hours'))"
An adventure tour company found out how many whales people saw on its most popular whale tour. How many people are there in all?,43,"Whales spotted | Frequency
0 | 0
1 | 3
2 | 20
3 | 5
4 | 7
5 | 8",8,13442,"import pandas as pd

def calculate_total_people(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of whales spotted and returns the total number of people.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of whales spotted and the frequency with columns 'Whales spotted' and 'Frequency'.
    Returns:
    int: The total number of people.
    """"""
    # Multiply the number of whales spotted by the frequency and sum up the results
    total_people = df['Frequency'].sum()
    
    return total_people","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Whales spotted': [0, 1, 2, 3, 4, 5],
    'Frequency': [0, 3, 20, 5, 7, 8]
})

# Call the tool to solve the problem
total_people = calculate_total_people(df)
print(total_people)","def calculate_total_from_frequency_table(data_frame, frequency_col):
    """"""
    This function takes in a pandas DataFrame representing a frequency table and returns the total number of items based on the frequencies.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the frequency table with a column specified by frequency_col.
    frequency_col (str): The column name for the frequencies.
    
    Returns:
    int: The total number of items.
    """"""
    # Sum up the values in the frequency column
    total_items = data_frame[frequency_col].sum()
    
    return total_items","df = pd.DataFrame({
    'Whales spotted': [0, 1, 2, 3, 4, 5],
    'Frequency': [0, 3, 20, 5, 7, 8]
})

total_people = calculate_total_from_frequency_table(data_frame=df, frequency_col='Frequency')
print(total_people)"
An adventure tour company found out how many whales people saw on its most popular whale tour. How many people are there in all?,42,"Whales spotted | Frequency
0 | 6
1 | 0
2 | 14
3 | 2
4 | 20",7,3382,"import pandas as pd

def calculate_total_people(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of whales spotted and returns the total number of people.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of whales spotted and the frequency with columns 'Whales spotted' and 'Frequency'.
    Returns:
    int: The total number of people.
    """"""
    # Multiply the number of whales spotted by the frequency and sum up the results
    total_people = df['Frequency'].sum()
    
    return total_people","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Whales spotted': [0, 1, 2, 3, 4],
    'Frequency': [6, 0, 14, 2, 20]
})
# Call the tool to solve the problem
total_people = calculate_total_people(df)
print(total_people)","def calculate_total_count_from_frequency(data_frame, frequency_col):
    """"""
    This function takes in a pandas DataFrame representing a frequency table and returns the total count based on the frequency column.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the frequency table with a column specified by frequency_col.
    frequency_col (str): The column name for the frequency values.
    
    Returns:
    int: The total count based on the frequency column.
    """"""
    # Sum up the frequency column to get the total count
    total_count = data_frame[frequency_col].sum()
    
    return total_count","df = pd.DataFrame({
    'Whales spotted': [0, 1, 2, 3, 4],
    'Frequency': [6, 0, 14, 2, 20]
})
print(calculate_total_count_from_frequency(data_frame=df, frequency_col=""Frequency""))"
"An Idaho farmer has been monitoring crop prices over time. Per cwt, how much more did lentils cost in 2006 than in 2005?",4,"Crop | 2005 | 2006
Lentils | $12 | $16
Potatoes | $6 | $6
Canola | $10 | $12
Onions | $8 | $17
Peas | $6 | $8",5,11942,"import pandas as pd

def calculate_price_difference(df, crop):
    """"""
    This function takes in a pandas DataFrame representing a crop price table and a string of crop name, and returns the price difference of the crop between 2006 and 2005.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing crop names and their prices in 2005 and 2006 with columns 'Crop', '2005' and '2006'.
    crop (str): A string representing the name of the crop.
    Returns:
    float: The price difference of the crop between 2006 and 2005.
    """"""
    # Filter the DataFrame for the specific crop
    crop_df = df[df['Crop'] == crop]
    if not crop_df.empty:
        price_2005 = crop_df['2005'].values[0]
        price_2006 = crop_df['2006'].values[0]
        price_difference = price_2006 - price_2005
        return price_difference
    else:
        return None","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Crop': ['Lentils', 'Potatoes', 'Canola', 'Onions', 'Peas'],
    '2005': [12, 6, 10, 8, 6],
    '2006': [16, 6, 12, 17, 8]
})

# Call the tool to solve the problem
price_difference = calculate_price_difference(df, 'Lentils')
print(price_difference)","def calculate_price_difference_between_years(item_prices_df, item_col, year1_col, year2_col, item_name):
    """"""
    This function takes in a pandas DataFrame representing a table of item prices per year and a string of item name, and returns the price difference of the item between year2 and year1.
    
    Args:
    item_prices_df (pd.DataFrame): A pandas DataFrame containing item names and their prices in year1 and year2.
    item_col (str): The column name for the item names.
    year1_col (str): The column name for the item prices in year1.
    year2_col (str): The column name for the item prices in year2.
    item_name (str): A string representing the name of the item.
    
    Returns:
    float: The price difference of the item between year2 and year1.
    """"""
    # Filter the DataFrame for the specific item name
    item_price_df = item_prices_df[item_prices_df[item_col] == item_name]
    if not item_price_df.empty:
        price_year1 = item_price_df[year1_col].values[0]
        price_year2 = item_price_df[year2_col].values[0]
        price_difference = price_year2 - price_year1
        return price_difference
    else:
        return None","item_prices_data = {
    'Crop': ['Lentils', 'Potatoes', 'Canola', 'Onions', 'Peas'],
    '2005': [12, 6, 10, 8, 6],
    '2006': [16, 6, 12, 17, 8]
}

item_prices_df = pd.DataFrame(item_prices_data)

print(calculate_price_difference_between_years(item_prices_df, ""Crop"", ""2005"", ""2006"", ""Lentils""))"
A Technical Assistance Manager monitored his customers' wait times. How many people waited for exactly 39 minutes?,3,"Stem | Leaf 
3 | 1, 1, 7, 9, 9, 9
4 | 0, 3, 5, 5, 6, 7, 8, 9
5 | 0, 6
6 | 7, 9, 9
7 | 3, 7
8 | 0, 2, 7, 9",6,15580,"import pandas as pd

def count_customers_with_wait_time(df, wait_time):
    """"""
    This function takes in a pandas dataframe of customers' wait times, and returns the number of customers who waited for exactly a certain amount of time.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the customers' wait times.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    wait_time (int): The wait time to count.
    Returns:
    int: The number of customers who waited for exactly the specified wait time.
    """"""
    # prepare a list to calculate wait times
    wait_times = []
    # calculate the total wait time for each customer
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            wait_times.append(stem * 10 + leaf[j])
    # filter the customers where the wait time is exactly the specified wait time
    filtered = [time for time in wait_times if time == wait_time]
    # count the number of customers
    num_customers = len(filtered)
    return num_customers","# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [3, 4, 5, 6, 7, 8],
    'Leaf': [[1, 1, 7, 9, 9, 9], [0, 3, 5, 5, 6, 7, 8, 9], [0, 6], [7, 9, 9], [3, 7], [0, 2, 7, 9]]
})
# Call the tool to solve the problem
print(count_customers_with_wait_time(df, 39))","def count_instances_with_specified_value_in_stem_leaf(data_frame, stem_col, leaf_col, specified_value):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of instances and a specified value, and returns the number of instances that have values equal to the specified value.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of instances with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    specified_value (int): The specified value for filtering instances.
    
    Returns:
    int: The number of instances with values equal to the specified value.
    """"""
    # Initialize the list to calculate instances
    instances = []
    
    # Calculate the total value of instances
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            instances.append(stem * 10 + leaf[j])
    
    # Filter the instances where the total value is equal to the specified value
    filtered = [instance for instance in instances if instance == specified_value]
    
    # Count the number of instances
    num_instances = len(filtered)
    
    return num_instances","data = {
    ""Stem"": [3, 4, 5, 6, 7, 8],
    ""Leaf"": [[1, 1, 7, 9, 9, 9], [0, 3, 5, 5, 6, 7, 8, 9], [0, 6], [7, 9, 9], [3, 7], [0, 2, 7, 9]]
}

df = pd.DataFrame(data)
print(count_instances_with_specified_value_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf"", specified_value=39))"
