question,answer,table,level,tool_id,code,api_call,tool,tool_call
"While hanging Christmas lights for neighbors, Jen counted the number of broken lights on each string. How many strings had exactly 74 broken lights?",0.0,"Stem | Leaf 
5 | 1, 2, 2, 6, 7
6 | 4, 7, 7
7 | 1
8 | 4, 8",4,13872,"import pandas as pd
def count_strings_with_74_broken_lights(df):
    """"""
    This function takes in a pandas dataframe of broken lights per string, and returns the number of strings that have exactly 74 broken lights.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken lights per string.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of strings that have exactly 74 broken lights.
    """"""
    # prepare a list to calculate broken lights in each string
    broken_lights = []
    # calculate the total number of broken lights in each string
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            broken_lights.append(stem * 10 + leaf[j])
    # filter the strings where the total number of broken lights is exactly 74
    filtered = [light for light in broken_lights if light == 74]
    # count the number of rows
    num_strings = len(filtered)
    return num_strings","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [5, 6, 7, 8],
    'Leaf': [[1, 2, 2, 6, 7], [4, 7, 7], [1], [4, 8]]
})
# Call the tool to solve the problem
count_strings_with_74_broken_lights(df)
```","def count_groups_with_exact_value_in_stem_leaf(data_frame, stem_col, leaf_col, item_exact_value):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of groups and an exact value, and returns the number of groups that have values exactly equal to the given value.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    item_exact_value (int): The exact value for filtering items.
    
    Returns:
    int: The number of items with values exactly equal to the given value.
    """"""
    # Initialize the list to calculate items in each group
    items = []
    
    # Calculate the total value of items in each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Filter the items where the total value is exactly equal to the given value
    filtered = [item for item in items if item == item_exact_value]
    
    # Count the number of items
    num_items = len(filtered)
    
    return num_items","data = {
    ""Stem"": [5, 6, 7, 8],
    ""Leaf"": [[1, 2, 2, 6, 7], [4, 7, 7], [1], [4, 8]]
}

df = pd.DataFrame(data)
print(count_groups_with_exact_value_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf"", item_exact_value=74))"
A game show program recorded the scores of its contestants. How many contestants scored more than 8?,21.0,"Score | Frequency
5 | 3
6 | 19
7 | 8
8 | 6
9 | 11
10 | 10",7,15416,"import pandas as pd

def count_contestants_with_score_above(df, score):
    """"""
    This function takes in a pandas DataFrame representing a score frequency table and a score, and returns the number of contestants who scored above the given score.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing scores and their frequencies with columns 'Score' and 'Frequency'.
    score (int): The score to compare against.
    Returns:
    int: The number of contestants who scored above the given score.
    """"""
    # Filter the DataFrame for scores above the given score
    filtered_df = df[df['Score'] > score]
    
    # Sum the frequencies of the filtered scores
    num_contestants = filtered_df['Frequency'].sum()
    
    return num_contestants","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Score': [5, 6, 7, 8, 9, 10],
    'Frequency': [3, 19, 8, 6, 11, 10]
})
# Call the tool to solve the problem
count_contestants_with_score_above(df, 8)
```","def count_instances_above_threshold_in_frequency_table(data_frame, value_col, frequency_col, threshold_value):
    """"""
    This function takes in a pandas DataFrame representing a frequency table, a value column, a frequency column, and a threshold value, and returns the number of instances with values above the threshold.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the frequency table with columns specified by value_col and frequency_col.
    value_col (str): The column name for the values.
    frequency_col (str): The column name for the frequencies.
    threshold_value (int): The threshold value for filtering instances.
    
    Returns:
    int: The number of instances with values above the threshold.
    """"""
    # Filter the DataFrame for values above the threshold
    filtered_df = data_frame[data_frame[value_col] > threshold_value]
    
    # Sum the frequencies of the filtered values
    num_instances = filtered_df[frequency_col].sum()
    
    return num_instances","data = {
    'Score': [5, 6, 7, 8, 9, 10],
    'Frequency': [3, 19, 8, 6, 11, 10]
}

df = pd.DataFrame(data)
print(count_instances_above_threshold_in_frequency_table(data_frame=df, value_col=""Score"", frequency_col=""Frequency"", threshold_value=8))"
"A dog show enthusiast recorded the weight of the winning dog at recent dog shows. According to the table, what was the rate of change between 2015 and 2016?",-1.0,"Year | Weight (kg)
2014 | 40
2015 | 46
2016 | 45
2017 | 43
2018 | 42",7,16668,"import pandas as pd

def calculate_rate_of_change(df, year1, year2):
    """"""
    This function takes in a pandas DataFrame representing a table of years and weights, and calculates the rate of change between two given years.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing years and weights with columns 'Year' and 'Weight (kg)'.
    year1 (int): The first year to calculate the rate of change.
    year2 (int): The second year to calculate the rate of change.
    Returns:
    float: The rate of change between the two years.
    """"""
    # Filter the DataFrame for the specific years
    year1_df = df[df['Year'] == year1]
    year2_df = df[df['Year'] == year2]
    
    # Check if both years are present in the DataFrame
    if not year1_df.empty and not year2_df.empty:
        weight1 = year1_df['Weight (kg)'].values[0]
        weight2 = year2_df['Weight (kg)'].values[0]
        
        # Calculate the rate of change
        rate_of_change = (weight2 - weight1) / (year2 - year1)
        return rate_of_change
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Year': [2014, 2015, 2016, 2017, 2018],
    'Weight (kg)': [40, 46, 45, 43, 42]
})

# Call the tool to solve the problem
rate_of_change = calculate_rate_of_change(df, 2015, 2016)
print(rate_of_change)
```","def calculate_rate_of_change_in_time_series(df, time_col, value_col, time1, time2):
    """"""
    This function takes in a pandas DataFrame representing a time series and calculates the rate of change between two given points in time.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing a time series with columns specified by time_col and value_col.
    time_col (str): The column name for the time values.
    value_col (str): The column name for the value at each point in time.
    time1 (int or str): The first point in time to calculate the rate of change.
    time2 (int or str): The second point in time to calculate the rate of change.
    
    Returns:
    float: The rate of change between the two points in time, or None if either point in time is not present in the DataFrame.
    """"""
    # Filter the DataFrame for the specific points in time
    time1_df = df[df[time_col] == time1]
    time2_df = df[df[time_col] == time2]
    
    # Check if both points in time are present in the DataFrame
    if not time1_df.empty and not time2_df.empty:
        value1 = time1_df[value_col].values[0]
        value2 = time2_df[value_col].values[0]
        
        # Calculate the rate of change
        rate_of_change = (value2 - value1) / (time2 - time1)
        return rate_of_change
    else:
        return None","df = pd.DataFrame({
    'Year': [2014, 2015, 2016, 2017, 2018],
    'Weight (kg)': [40, 46, 45, 43, 42]
})

print(calculate_rate_of_change_in_time_series(df, 'Year', 'Weight (kg)', 2015, 2016))"
A juice shop tracked how many smoothies it sold in the past 5 days. What is the median of the numbers?,63.0,"Day | Number of smoothies
Tuesday | 66
Wednesday | 59
Thursday | 63
Friday | 71
Saturday | 62",5,9679,"import pandas as pd

def calculate_median(df, column_name):
    """"""
    This function takes in a pandas DataFrame and a column name, and returns the median of the values in that column.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the data.
    column_name (str): The name of the column containing the values to calculate the median.
    Returns:
    float: The median of the values in the specified column.
    """"""
    # Sort the values in the specified column
    sorted_values = df[column_name].sort_values().reset_index(drop=True)
    
    # Calculate the median
    n = len(sorted_values)
    if n % 2 == 0:
        median = (sorted_values[n // 2 - 1] + sorted_values[n // 2]) / 2
    else:
        median = sorted_values[n // 2]
    
    return median","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    'Number of smoothies': [66, 59, 63, 71, 62]
})
# Call the tool to solve the problem
median_smoothies = calculate_median(df, 'Number of smoothies')
print(median_smoothies)
```","def calculate_median_of_column(data_frame, column_name):
    """"""
    This function takes in a pandas DataFrame and a column name, and returns the median of the values in that column.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the data.
    column_name (str): The name of the column containing the values to calculate the median.
    
    Returns:
    float: The median of the values in the specified column.
    """"""
    # Sort the values in the specified column
    sorted_values = data_frame[column_name].sort_values().reset_index(drop=True)
    
    # Calculate the median
    n = len(sorted_values)
    if n % 2 == 0:
        median = (sorted_values[n // 2 - 1] + sorted_values[n // 2]) / 2
    else:
        median = sorted_values[n // 2]
    
    return median","df = pd.DataFrame({
    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    'Number of smoothies': [66, 59, 63, 71, 62]
})
print(calculate_median_of_column(data_frame=df, column_name='Number of smoothies'))"
"Mrs. Davis told students how many rounds to expect in the spelling bee based on previous years. According to the table, what was the rate of change between 2017 and 2018?",5.0,"Year | Rounds
2015 | 14
2016 | 12
2017 | 9
2018 | 14
2019 | 13",7,3738,"import pandas as pd

def calculate_rate_of_change(df, start_year, end_year):
    """"""
    This function takes in a pandas DataFrame representing a table of years and rounds, and two years, and returns the rate of change between the two years.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing years and rounds with columns 'Year' and 'Rounds'.
    start_year (int): The start year for the rate of change calculation.
    end_year (int): The end year for the rate of change calculation.
    Returns:
    float: The rate of change between the two years.
    """"""
    # Filter the DataFrame for the start year and end year
    start_year_df = df[df['Year'] == start_year]
    end_year_df = df[df['Year'] == end_year]
    
    # Check if the start year and end year exist in the DataFrame
    if not start_year_df.empty and not end_year_df.empty:
        # Calculate the rate of change
        rate_of_change = end_year_df['Rounds'].values[0] - start_year_df['Rounds'].values[0]
        return rate_of_change
    else:
        return None","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Year': [2015, 2016, 2017, 2018, 2019],
    'Rounds': [14, 12, 9, 14, 13]
})

# Call the tool to solve the problem
rate_of_change = calculate_rate_of_change(df, 2017, 2018)
print(rate_of_change)
```","def calculate_rate_of_change_between_two_points(data_frame, year_col, value_col, start_point, end_point):
    """"""
    This function takes in a pandas DataFrame representing a table of values and two points, and returns the rate of change between the two points.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing years and values with columns specified by year_col and value_col.
    year_col (str): The column name for the year values.
    value_col (str): The column name for the value values.
    start_point (int): The start point for the rate of change calculation.
    end_point (int): The end point for the rate of change calculation.
    
    Returns:
    float: The rate of change between the two points.
    """"""
    # Filter the DataFrame for the start point and end point
    start_point_df = data_frame[data_frame[year_col] == start_point]
    end_point_df = data_frame[data_frame[year_col] == end_point]
    
    # Check if the start point and end point exist in the DataFrame
    if not start_point_df.empty and not end_point_df.empty:
        # Calculate the rate of change
        rate_of_change = end_point_df[value_col].values[0] - start_point_df[value_col].values[0]
        return rate_of_change
    else:
        return None","data = {
    'Year': [2015, 2016, 2017, 2018, 2019],
    'Rounds': [14, 12, 9, 14, 13]
}

df = pd.DataFrame(data)
print(calculate_rate_of_change_between_two_points(data_frame=df, year_col=""Year"", value_col=""Rounds"", start_point=2017, end_point=2018))"
Nora buys 3/4 of a kilogram of coriander. What is the total cost?,3.0,"cumin | $3/kg
pepper | $2/kg
turmeric | $3/kg
coriander | $4/kg",6,3606,"import pandas as pd

def calculate_spice_cost(spice_df, spice, quantity):
    """"""
    This function takes in a pandas DataFrame representing a spice table, the name of a spice, and a quantity, and returns the total cost of the spice using pandas.
    Args:
    spice_df (pd.DataFrame): A pandas DataFrame containing spices and their prices with columns 'Spice' and 'Price'.
    spice (str): The name of the spice.
    quantity (float): The quantity of the spice in kilograms.
    Returns:
    float: The total cost of the spice.
    """"""
    # Filter the DataFrame for the specific spice
    spice_df = spice_df[spice_df['Spice'] == spice]
    if not spice_df.empty:
        spice_price = spice_df['Price'].values[0]
        total_cost = quantity * spice_price
    else:
        total_cost = 0.0
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
spice_df = pd.DataFrame({
    'Spice': ['cumin', 'pepper', 'turmeric', 'coriander'],
    'Price': [3, 2, 3, 4]
})

# Call the tool to solve the problem
total_cost = calculate_spice_cost(spice_df, 'coriander', 0.75)
print(total_cost)
```","def calculate_total_cost_from_unit_price_and_quantity(item_prices_df, item_col, unit_price_col, item_name, quantity):
    """"""
    This function takes in a pandas DataFrame representing a table of item prices, the name of an item, and a quantity, and returns the total cost of the item based on the price and quantity.
    
    Args:
    item_prices_df (pd.DataFrame): A pandas DataFrame containing item names and their prices.
    item_col (str): The column name for the item names.
    unit_price_col (str): The column name for the item prices.
    item_name (str): The name of the item.
    quantity (float): The quantity of the item.
    
    Returns:
    float: The total cost of the item.
    """"""
    # Filter the DataFrame for the specific item name
    item_price_df = item_prices_df[item_prices_df[item_col] == item_name]
    if not item_price_df.empty:
        item_price = item_price_df[unit_price_col].values[0]
        total_cost = quantity * item_price
    else:
        total_cost = 0.0
    
    return total_cost","item_prices_data = {
    'Item': ['cumin', 'pepper', 'turmeric', 'coriander'],
    'Price': [3, 2, 3, 4]
}

item_prices_df = pd.DataFrame(item_prices_data)

print(calculate_total_cost_from_unit_price_and_quantity(item_prices_df, ""Item"", ""Price"", ""coriander"", 0.75))"
A customer at a sushi restaurant was examining the types of sushi rolls offered on the menu. Rolls vary by type of fish and level of spiciness. Rolls only contain one type of fish. What is the probability that a randomly selected sushi roll contains salmon and is labeled a little spicy? Simplify any fractions.,0.3," | Not spicy | A little spicy
Yellowtail | 2 | 3
Salmon | 2 | 3",8,5681,"import pandas as pd

def calculate_probability(df, fish_type, spiciness):
    """"""
    This function takes in a pandas DataFrame representing a sushi menu table, a fish type, and a spiciness level, and returns the probability of a randomly selected sushi roll containing the specified fish type and spiciness level.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing sushi roll types and their quantities.
    fish_type (str): The type of fish.
    spiciness (str): The level of spiciness.
    Returns:
    float: The probability of a randomly selected sushi roll containing the specified fish type and spiciness level.
    """"""
    # Calculate the total number of sushi rolls
    total_rolls = df.sum().sum()
    
    # Get the number of rolls with the specified fish type and spiciness level
    specific_rolls = df.loc[fish_type, spiciness]
    
    # Calculate and return the probability
    probability = specific_rolls / total_rolls
    return probability","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Not spicy': [2, 2],
    'A little spicy': [3, 3]
}, index=['Yellowtail', 'Salmon'])

# Call the tool to solve the problem
probability = calculate_probability(df, 'Salmon', 'A little spicy')
print(probability)
```","def calculate_probability_of_specific_event(event_frequency_df, specific_event):
    """"""
    This function takes in a pandas DataFrame representing a table of events and their frequencies, and a specific event, and returns the probability of the specific event.
    
    Args:
    event_frequency_df (pd.DataFrame): A pandas DataFrame containing events and their frequencies.
    specific_event (tuple): A tuple containing the specific event. The first element is the index name and the second element is the column name.
    
    Returns:
    float: The probability of the specific event.
    """"""
    # Calculate the total number of events
    total_events = event_frequency_df.sum().sum()
    
    # Get the frequency of the specific event
    specific_event_frequency = event_frequency_df.loc[specific_event[0], specific_event[1]]
    
    # Calculate and return the probability
    probability = specific_event_frequency / total_events
    return probability","event_frequency_data = {
    'Not spicy': [2, 2],
    'A little spicy': [3, 3]
}

event_frequency_df = pd.DataFrame(event_frequency_data, index=['Yellowtail', 'Salmon'])

specific_event = ('Salmon', 'A little spicy')
print(calculate_probability_of_specific_event(event_frequency_df, specific_event))"
How much money does Samantha need to buy an African safari vacation package and a Hawaiian vacation package?,1728.0,"African safari vacation package | $787.00
Caribbean vacation package | $927.00
Hawaiian vacation package | $941.00
Australian vacation package | $553.00",4,10504,"import pandas as pd

def calculate_total_cost_vacation(vacation_df, packages):
    """"""
    This function takes in a pandas DataFrame representing a vacation packages table and a list of packages, and returns the total cost of the packages using pandas.
    Args:
    vacation_df (pd.DataFrame): A pandas DataFrame containing vacation packages and their prices with columns 'Package' and 'Price'.
    packages (list): A list where the elements are vacation package names.
    Returns:
    float: The total cost of the packages.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the vacation packages and calculate the cost for each selected package
    for package in packages:
        # Filter the DataFrame for the specific package
        package_df = vacation_df[vacation_df['Package'] == package]
        if not package_df.empty:
            package_price = package_df['Price'].values[0]
            total_cost += package_price
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Package': ['African safari vacation package', 'Caribbean vacation package', 'Hawaiian vacation package', 'Australian vacation package'],
    'Price': [787.00, 927.00, 941.00, 553.00]
})
# Call the tool to solve the problem
total_cost = calculate_total_cost_vacation(df, ['African safari vacation package', 'Hawaiian vacation package'])
print(total_cost)
```","def calculate_total_cost_from_package_prices(package_prices_df, package_col, price_col, selected_packages):
    """"""
    This function takes in a pandas DataFrame representing a table of package prices and a list of selected packages, and returns the total cost of the packages based on the prices.
    
    Args:
    package_prices_df (pd.DataFrame): A pandas DataFrame containing package names and their prices.
    package_col (str): The column name for the package names.
    price_col (str): The column name for the package prices.
    selected_packages (list): A list where the elements are selected package names.
    
    Returns:
    float: The total cost of the packages.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the package names and add the price for each selected package
    for package_name in selected_packages:
        # Filter the DataFrame for the specific package name
        package_price_df = package_prices_df[package_prices_df[package_col] == package_name]
        if not package_price_df.empty:
            package_price = package_price_df[price_col].values[0]
            total_cost += package_price
    
    return total_cost","package_prices_data = {
    'Package': ['African safari vacation package', 'Caribbean vacation package', 'Hawaiian vacation package', 'Australian vacation package'],
    'Price': [787.00, 927.00, 941.00, 553.00]
}

package_prices_df = pd.DataFrame(package_prices_data)

selected_packages = ['African safari vacation package', 'Hawaiian vacation package']
print(calculate_total_cost_from_package_prices(package_prices_df, ""Package"", ""Price"", selected_packages))"
"Lila's Crafts is interested in offering a scarf knitting class, so the store considers how many scarves people already own. How many people have more than 2 scarves?",29.0,"Number of scarves | Frequency
0 | 7
1 | 12
2 | 4
3 | 3
4 | 10
5 | 16",7,4816,"import pandas as pd

def count_people_with_more_than_2_scarves(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of the number of scarves people own, and returns the number of people who own more than 2 scarves.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of scarves and their frequencies with columns 'Number of scarves' and 'Frequency'.
    Returns:
    int: The number of people who own more than 2 scarves.
    """"""
    # Filter the DataFrame for the rows where the number of scarves is more than 2
    filtered_df = df[df['Number of scarves'] > 2]
    
    # Sum the frequencies of these rows to get the total number of people who own more than 2 scarves
    num_people = filtered_df['Frequency'].sum()
    
    return num_people","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of scarves': [0, 1, 2, 3, 4, 5],
    'Frequency': [7, 12, 4, 3, 10, 16]
})
# Call the tool to solve the problem
count_people_with_more_than_2_scarves(df)
```","def count_frequency_above_threshold(data_frame, item_col, frequency_col, item_threshold):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of items and a threshold value, and returns the total frequency of items that are greater than the threshold.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the items and their frequencies with columns specified by item_col and frequency_col.
    item_col (str): The column name for the items.
    frequency_col (str): The column name for the frequencies.
    item_threshold (int): The threshold value for filtering items.
    
    Returns:
    int: The total frequency of items that are greater than the threshold.
    """"""
    # Filter the DataFrame for the rows where the number of items is more than the threshold
    filtered_df = data_frame[data_frame[item_col] > item_threshold]
    
    # Sum the frequencies of these rows to get the total frequency of items that are greater than the threshold
    total_frequency = filtered_df[frequency_col].sum()
    
    return total_frequency","df = pd.DataFrame({
    'Number of scarves': [0, 1, 2, 3, 4, 5],
    'Frequency': [7, 12, 4, 3, 10, 16]
})
print(count_frequency_above_threshold(data_frame=df, item_col='Number of scarves', frequency_col='Frequency', item_threshold=2))"
"Every year Georgetown has a citywide relay and reports the winning times. According to the table, what was the rate of change between 2012 and 2013?",17.0,"Year | Winning time (minutes)
2009 | 23
2010 | 39
2011 | 32
2012 | 21
2013 | 38",8,2082,"import pandas as pd

def calculate_rate_of_change(df, start_year, end_year):
    """"""
    This function takes in a pandas DataFrame representing a table of winning times for each year and two years, and returns the rate of change of winning times between the two years.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing years and winning times with columns 'Year' and 'Winning time (minutes)'.
    start_year (int): The start year for calculating the rate of change.
    end_year (int): The end year for calculating the rate of change.
    Returns:
    float: The rate of change of winning times between the two years.
    """"""
    # Filter the DataFrame for the start year and end year
    start_year_df = df[df['Year'] == start_year]
    end_year_df = df[df['Year'] == end_year]
    
    # Check if the DataFrame for the start year and end year is not empty
    if not start_year_df.empty and not end_year_df.empty:
        # Calculate the rate of change
        rate_of_change = (end_year_df['Winning time (minutes)'].values[0] - start_year_df['Winning time (minutes)'].values[0]) / (end_year - start_year)
        return rate_of_change
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Year': [2009, 2010, 2011, 2012, 2013],
    'Winning time (minutes)': [23, 39, 32, 21, 38]
})
# Call the tool to solve the problem
rate_of_change = calculate_rate_of_change(df, 2012, 2013)
print(rate_of_change)
```","def calculate_rate_of_change_between_years(df, year_col, value_col, start_year, end_year):
    """"""
    This function takes in a pandas DataFrame representing a table of values for each year and two years, and returns the rate of change of the values between the two years.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing years and values with columns specified by year_col and value_col.
    year_col (str): The column name for the years.
    value_col (str): The column name for the values.
    start_year (int): The start year for calculating the rate of change.
    end_year (int): The end year for calculating the rate of change.
    
    Returns:
    float: The rate of change of the values between the two years.
    """"""
    # Filter the DataFrame for the start year and end year
    start_year_df = df[df[year_col] == start_year]
    end_year_df = df[df[year_col] == end_year]
    
    # Check if the DataFrame for the start year and end year is not empty
    if not start_year_df.empty and not end_year_df.empty:
        # Calculate the rate of change
        rate_of_change = (end_year_df[value_col].values[0] - start_year_df[value_col].values[0]) / (end_year - start_year)
        return rate_of_change
    else:
        return None","df = pd.DataFrame({
    'Year': [2009, 2010, 2011, 2012, 2013],
    'Winning time (minutes)': [23, 39, 32, 21, 38]
})
print(calculate_rate_of_change_between_years(df, 'Year', 'Winning time (minutes)', 2012, 2013))"
The members of the track team compared how many miles they ran last week. What is the mode of the numbers?,8.0,"Name | Miles
Samuel | 8
Emmett | 8
Lola | 6
Bob | 8
Deb | 5
Camille | 10
Jonah | 5
Oliver | 6",8,8608,"import pandas as pd
from collections import Counter

def calculate_mode(df):
    """"""
    This function takes in a pandas DataFrame containing names and miles, and returns the mode of the miles.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing names and miles with columns 'Name' and 'Miles'.
    Returns:
    int: The mode of the miles.
    """"""
    # Extract the miles column from the DataFrame
    miles = df['Miles'].tolist()
    
    # Calculate the frequency of each mile value
    counter = Counter(miles)
    
    # Find the mode
    mode = counter.most_common(1)[0][0]
    
    return mode","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Name': ['Samuel', 'Emmett', 'Lola', 'Bob', 'Deb', 'Camille', 'Jonah', 'Oliver'],
    'Miles': [8, 8, 6, 8, 5, 10, 5, 6]
})
# Call the tool to solve the problem
print(calculate_mode(df))
```","def calculate_mode_of_numerical_column(data_frame, num_col):
    """"""
    This function takes in a pandas DataFrame and a numerical column name, and returns the mode of the numerical column.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the numerical column.
    num_col (str): The column name for the numerical values.
    
    Returns:
    int: The mode of the numerical column.
    """"""
    # Extract the numerical column from the DataFrame
    num_values = data_frame[num_col].tolist()
    
    # Calculate the frequency of each numerical value
    counter = Counter(num_values)
    
    # Find the mode
    mode = counter.most_common(1)[0][0]
    
    return mode","df = pd.DataFrame({
    'Name': ['Samuel', 'Emmett', 'Lola', 'Bob', 'Deb', 'Camille', 'Jonah', 'Oliver'],
    'Miles': [8, 8, 6, 8, 5, 10, 5, 6]
})
print(calculate_mode_of_numerical_column(data_frame=df, num_col=""Miles""))"
A newspaper researched how many grocery stores there are in each town. What is the range of the numbers?,5.0,"Town | Number of stores
Marion | 9
Greenwood | 8
Springfield | 10
Salem | 8
Riverside | 5
Ashland | 5
Richmond | 8
Columbia | 10",7,14595,"import pandas as pd

def calculate_range(df):
    """"""
    This function takes in a pandas DataFrame representing a table of towns and their number of stores, and returns the range of the number of stores.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing towns and their number of stores with columns 'Town' and 'Number of stores'.
    Returns:
    int: The range of the number of stores.
    """"""
    # Calculate the range of the number of stores
    range_stores = df['Number of stores'].max() - df['Number of stores'].min()
    
    return range_stores","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Town': ['Marion', 'Greenwood', 'Springfield', 'Salem', 'Riverside', 'Ashland', 'Richmond', 'Columbia'],
    'Number of stores': [9, 8, 10, 8, 5, 5, 8, 10]
})

# Call the tool to solve the problem
range_stores = calculate_range(df)

# Print the answer
print(range_stores)
```","def calculate_range_of_values_in_column(data_frame, column_name):
    """"""
    This function takes in a pandas DataFrame and a column name, and returns the range of values in the specified column.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing various columns.
    column_name (str): The name of the column for which the range of values is to be calculated.
    
    Returns:
    float: The range of values in the specified column.
    """"""
    # Calculate the range of values in the specified column
    range_values = data_frame[column_name].max() - data_frame[column_name].min()
    
    return range_values","df = pd.DataFrame({
    'Town': ['Marion', 'Greenwood', 'Springfield', 'Salem', 'Riverside', 'Ashland', 'Richmond', 'Columbia'],
    'Number of stores': [9, 8, 10, 8, 5, 5, 8, 10]
})

print(calculate_range_of_values_in_column(data_frame=df, column_name='Number of stores'))"
An architecture student measured the heights of all the buildings downtown. How many buildings are exactly 23 meters tall?,0.0,"Stem | Leaf 
2 | 4
3 | 1, 2, 5
4 | 0, 4
5 | 
6 | 0, 4
7 | 3",5,16588,"import pandas as pd

def count_buildings_with_exact_height(df, target_height):
    """"""
    This function takes in a pandas dataframe of building heights and a target height, and returns the number of buildings with the exact target height.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the building heights in stem and leaf format.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    target_height (int): The target height to count the number of buildings.
    Returns:
    int: The number of buildings with the exact target height.
    """"""
    # prepare a list to store building heights
    heights = []
    # calculate the height of each building
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            heights.append(stem * 10 + leaf[j])
    # filter the buildings with the exact target height
    filtered = [height for height in heights if height == target_height]
    # count the number of buildings
    num_buildings = len(filtered)
    return num_buildings","We should first create a pandas dataframe with the data from the table. Note that some elements are empty, so we need to fill them with empty lists. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [2, 3, 4, 5, 6, 7],
    'Leaf': [[4], [1, 2, 5], [0, 4], [], [0, 4], [3]]
})
# Call the tool to solve the problem
count_buildings_with_exact_height(df, 23)
```","def count_items_with_exact_value_in_stem_leaf(data_frame, stem_col, leaf_col, target_value):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of items and a target value, and returns the number of items with the exact target value.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    target_value (int): The target value for filtering items.
    
    Returns:
    int: The number of items with the exact target value.
    """"""
    # Initialize the list to calculate items in each group
    items = []
    
    # Calculate the total value of items in each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Filter the items where the total value is equal to the target value
    filtered = [item for item in items if item == target_value]
    
    # Count the number of items
    num_items = len(filtered)
    
    return num_items","data = {
    ""Stem"": [2, 3, 4, 5, 6, 7],
    ""Leaf"": [[4], [1, 2, 5], [0, 4], [], [0, 4], [3]]
}

df = pd.DataFrame(data)
print(count_items_with_exact_value_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf"", target_value=23))"
"For a study on numerical psychology, people were polled about which number between 1 and 5 they like most, and why. How many people said 2?",20.0,"Favorite number | Frequency
1 | 5
2 | 20
3 | 17
4 | 14
5 | 15",8,7581,"import pandas as pd

def get_frequency(df, number):
    """"""
    This function takes in a pandas DataFrame representing a frequency table and a number, and returns the frequency of the number using pandas.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing favorite numbers and their frequencies with columns 'Favorite number' and 'Frequency'.
    number (int): The number to get the frequency for.
    Returns:
    int: The frequency of the number.
    """"""
    # Filter the DataFrame for the specific number
    number_df = df[df['Favorite number'] == number]
    if not number_df.empty:
        frequency = number_df['Frequency'].values[0]
        return frequency
    else:
        return 0","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Favorite number': [1, 2, 3, 4, 5],
    'Frequency': [5, 20, 17, 14, 15]
})

# Call the tool to solve the problem
number_of_people = get_frequency(df, 2)
print(number_of_people)
```","def get_frequency_of_specific_value(df, value_col, frequency_col, specific_value):
    """"""
    This function takes in a pandas DataFrame representing a frequency table, a specific value, and returns the frequency of the specific value.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing values and their frequencies.
    value_col (str): The column name for the values.
    frequency_col (str): The column name for the frequencies.
    specific_value (int or str): The specific value to get the frequency for.
    
    Returns:
    int: The frequency of the specific value.
    """"""
    # Filter the DataFrame for the specific value
    value_df = df[df[value_col] == specific_value]
    if not value_df.empty:
        frequency = value_df[frequency_col].values[0]
        return frequency
    else:
        return 0","df = pd.DataFrame({
    'Favorite number': [1, 2, 3, 4, 5],
    'Frequency': [5, 20, 17, 14, 15]
})

print(get_frequency_of_specific_value(df, 'Favorite number', 'Frequency', 2))"
What is the total cost for 1+3/10 kilograms of chocolate chip cookie dough?,2.6,"double chocolate cookie dough | $2/kilogram
chocolate chip cookie dough | $2/kilogram
peanut butter cookie dough | $3/kilogram
oatmeal raisin cookie dough | $3/kilogram
snickerdoodle cookie dough | $2/kilogram
gingersnap cookie dough | $3/kilogram",6,1943,"import pandas as pd

def calculate_cost_for_weight(df, item, weight):
    """"""
    This function takes in a pandas DataFrame representing a table of cookie dough types and their prices per kilogram, an item name, and a weight in kilograms, and returns the cost for that weight of the item.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing cookie dough types and their prices per kilogram with columns 'Item' and 'Price_per_kg'.
    item (str): The name of the cookie dough type.
    weight (float): The weight in kilograms.
    Returns:
    float: The cost for the specified weight of the item.
    """"""
    # Filter the DataFrame for the specific item
    item_df = df[df['Item'] == item]
    if not item_df.empty:
        item_price_per_kg = item_df['Price_per_kg'].values[0]
        cost = weight * item_price_per_kg
        return cost
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Item': ['double chocolate cookie dough', 'chocolate chip cookie dough', 'peanut butter cookie dough', 'oatmeal raisin cookie dough', 'snickerdoodle cookie dough', 'gingersnap cookie dough'],
    'Price_per_kg': [2, 2, 3, 3, 2, 3]
})

# Call the tool to solve the problem
item = 'chocolate chip cookie dough'
weight = 1 + 3/10
cost = calculate_cost_for_weight(df, item, weight)
print(cost)
```","def calculate_total_cost_from_unit_price_and_weight(item_prices_df, item_col, unit_price_col, item_name, item_weight):
    """"""
    This function takes in a pandas DataFrame representing a table of item unit prices and a given weight, and returns the total cost of the item based on the unit price and weight.
    
    Args:
    item_prices_df (pd.DataFrame): A pandas DataFrame containing item names and their unit prices.
    item_col (str): The column name for the item names.
    unit_price_col (str): The column name for the item unit prices.
    item_name (str): The name of the item.
    item_weight (float): The weight of the item.
    
    Returns:
    float: The total cost of the item based on the unit price and weight.
    """"""
    # Filter the DataFrame for the specific item name
    item_price_df = item_prices_df[item_prices_df[item_col] == item_name]
    if not item_price_df.empty:
        item_unit_price = item_price_df[unit_price_col].values[0]
        total_cost = item_weight * item_unit_price
        return total_cost
    else:
        return None","item_prices_data = {
    'Item': ['double chocolate cookie dough', 'chocolate chip cookie dough', 'peanut butter cookie dough', 'oatmeal raisin cookie dough', 'snickerdoodle cookie dough', 'gingersnap cookie dough'],
    'Price_per_kg': [2, 2, 3, 3, 2, 3]
}

item_prices_df = pd.DataFrame(item_prices_data)

item_name = 'chocolate chip cookie dough'
item_weight = 1 + 3/10
print(calculate_total_cost_from_unit_price_and_weight(item_prices_df, ""Item"", ""Price_per_kg"", item_name, item_weight))"
How much money does Harold need to buy a watering can and a rake?,40.83,"wrench | $14.14
hammer | $22.84
rake | $21.58
watering can | $19.25
lawn mower | $51.26
broom | $15.02",8,1623,"import pandas as pd

def calculate_total_cost(menu_df, orders):
    """"""
    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.
    Args:
    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.
    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.
    Returns:
    float: The total cost of the orders.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the menu items and calculate the cost for each ordered item
    for item, quantity in orders.items():
        # Filter the DataFrame for the specific item
        item_df = menu_df[menu_df['Item'] == item]
        if not item_df.empty:
            item_price = item_df['Price'].values[0]
            total_cost += quantity * item_price
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we create a dictionary with the items Harold wants to buy and the quantity of each item. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Item': ['wrench', 'hammer', 'rake', 'watering can', 'lawn mower', 'broom'],
    'Price': [14.14, 22.84, 21.58, 19.25, 51.26, 15.02]
})

# Initialize the orders
orders = {'watering can': 1, 'rake': 1}

# Call the tool to solve the problem
total_cost = calculate_total_cost(df, orders)
print(total_cost)
```","def calculate_total_cost_from_unit_prices_and_quantities(item_prices_df, item_col, unit_price_col, item_quantities):
    """"""
    This function takes in a pandas DataFrame representing a table of item prices and a dictionary of item quantities, and returns the total cost of the items based on the prices and quantities.
    
    Args:
    item_prices_df (pd.DataFrame): A pandas DataFrame containing item names and their prices.
    item_col (str): The column name for the item names.
    unit_price_col (str): The column name for the item prices.
    item_quantities (dict): A dictionary where the keys are item names and the values are the quantities of each item.
    
    Returns:
    float: The total cost of the items.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the item names and calculate the quantity for each item based on quantities
    for item_name, quantity in item_quantities.items():
        # Filter the DataFrame for the specific item name
        item_price_df = item_prices_df[item_prices_df[item_col] == item_name]
        if not item_price_df.empty:
            item_price = item_price_df[unit_price_col].values[0]
            total_cost += quantity * item_price
    
    return total_cost","item_prices_data = {
    'Item': ['wrench', 'hammer', 'rake', 'watering can', 'lawn mower', 'broom'],
    'Price': [14.14, 22.84, 21.58, 19.25, 51.26, 15.02]
}

item_prices_df = pd.DataFrame(item_prices_data)

item_quantities = {'watering can': 1, 'rake': 1}
print(calculate_total_cost_from_unit_prices_and_quantities(item_prices_df, ""Item"", ""Price"", item_quantities))"
A toy store employee counted the number of toys in each bin in the sale section. What is the smallest number of toys?,44.0,"Stem | Leaf 
4 | 4, 8
5 | 
6 | 0, 1, 2, 7, 9, 9
7 | 2, 4, 4, 8
8 | 0, 6, 7, 7
9 | 0",4,13336,"import pandas as pd
def find_smallest_number_of_toys(df):
    """"""
    This function takes in a pandas dataframe of the number of toys in each bin, and returns the smallest number of toys.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of toys in each bin.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The smallest number of toys.
    """"""
    # prepare a list to calculate toys in each bin
    toys = []
    # calculate the total number of toys in each bin
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            toys.append(stem * 10 + leaf[j])
    # find the smallest number of toys
    smallest = min(toys)
    return smallest","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [4, 5, 6, 7, 8, 9],
    'Leaf': [[4, 8], [], [0, 1, 2, 7, 9, 9], [2, 4, 4, 8], [0, 6, 7, 7], [0]]
})
# Call the tool to solve the problem
find_smallest_number_of_toys(df)
```","def find_smallest_value_in_stem_leaf(data_frame, stem_col, leaf_col):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of groups, and returns the smallest value among the groups.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    
    Returns:
    int: The smallest value among the groups.
    """"""
    # Initialize the list to calculate items in each group
    items = []
    
    # Calculate the total value of items in each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Find the smallest value among the items
    smallest = min(items)
    
    return smallest","data = {
    ""Stem"": [4, 5, 6, 7, 8, 9],
    ""Leaf"": [[4, 8], [], [0, 1, 2, 7, 9, 9], [2, 4, 4, 8], [0, 6, 7, 7], [0]]
}

df = pd.DataFrame(data)
print(find_smallest_value_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf""))"
How much more does a book about dogs cost than a book about trains?,9.0,"book about the Olympics | $13.00
book about music | $13.00
book about dogs | $19.00
book about hiking | $23.00
book about trains | $10.00
book about dinosaurs | $19.00",8,8695,"import pandas as pd

def calculate_price_difference(df, item1, item2):
    """"""
    This function takes in a pandas DataFrame representing a book price table and two book titles, and returns the price difference between the two books.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing book titles and their prices with columns 'Title' and 'Price'.
    item1 (str): The title of the first book.
    item2 (str): The title of the second book.
    Returns:
    float: The price difference between the two books.
    """"""
    # Filter the DataFrame for the specific items
    item1_df = df[df['Title'] == item1]
    item2_df = df[df['Title'] == item2]
    
    # Check if both items exist in the DataFrame
    if not item1_df.empty and not item2_df.empty:
        item1_price = item1_df['Price'].values[0]
        item2_price = item2_df['Price'].values[0]
        
        # Calculate and return the price difference
        return abs(item1_price - item2_price)
    else:
        return None","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Title': ['book about the Olympics', 'book about music', 'book about dogs', 'book about hiking', 'book about trains', 'book about dinosaurs'],
    'Price': [13.00, 13.00, 19.00, 23.00, 10.00, 19.00]
})

# Call the tool to solve the problem
price_difference = calculate_price_difference(df, 'book about dogs', 'book about trains')
print(price_difference)
```","def calculate_price_difference_between_two_items(item_prices_df, item_col, price_col, item1, item2):
    """"""
    This function takes in a pandas DataFrame representing a table of item prices and two item names, and returns the price difference between the two items.
    
    Args:
    item_prices_df (pd.DataFrame): A pandas DataFrame containing item names and their prices.
    item_col (str): The column name for the item names.
    price_col (str): The column name for the item prices.
    item1 (str): The name of the first item.
    item2 (str): The name of the second item.
    
    Returns:
    float: The price difference between the two items, or None if either item does not exist in the DataFrame.
    """"""
    # Filter the DataFrame for the specific items
    item1_df = item_prices_df[item_prices_df[item_col] == item1]
    item2_df = item_prices_df[item_prices_df[item_col] == item2]
    
    # Check if both items exist in the DataFrame
    if not item1_df.empty and not item2_df.empty:
        item1_price = item1_df[price_col].values[0]
        item2_price = item2_df[price_col].values[0]
        
        # Calculate and return the price difference
        return abs(item1_price - item2_price)
    else:
        return None","item_prices_data = {
    'Title': ['book about the Olympics', 'book about music', 'book about dogs', 'book about hiking', 'book about trains', 'book about dinosaurs'],
    'Price': [13.00, 13.00, 19.00, 23.00, 10.00, 19.00]
}

item_prices_df = pd.DataFrame(item_prices_data)

price_difference = calculate_price_difference_between_two_items(item_prices_df, ""Title"", ""Price"", 'book about dogs', 'book about trains')
print(price_difference)"
How much money does Emilia need to buy a Hawaiian vacation package and a European vacation package?,8383.0,"African safari vacation package | $1,031
Hawaiian vacation package | $3,200
European vacation package | $5,183
Australian vacation package | $4,098
Jamaican vacation package | $6,532
Caribbean vacation package | $2,150",4,2141,"import pandas as pd

def calculate_vacation_cost(vacation_df, packages):
    """"""
    This function takes in a pandas DataFrame representing a vacation packages table and a list of packages, and returns the total cost of the packages using pandas.
    Args:
    vacation_df (pd.DataFrame): A pandas DataFrame containing vacation packages and their prices with columns 'Package' and 'Price'.
    packages (list): A list where the elements are vacation package names.
    Returns:
    float: The total cost of the packages.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the vacation packages and calculate the cost for each selected package
    for package in packages:
        # Filter the DataFrame for the specific package
        package_df = vacation_df[vacation_df['Package'] == package]
        if not package_df.empty:
            package_price = package_df['Price'].values[0]
            total_cost += package_price
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Package': ['African safari vacation package', 'Hawaiian vacation package', 'European vacation package', 'Australian vacation package', 'Jamaican vacation package', 'Caribbean vacation package'],
    'Price': [1031, 3200, 5183, 4098, 6532, 2150]
})

# Call the tool to solve the problem
total_cost = calculate_vacation_cost(df, ['Hawaiian vacation package', 'European vacation package'])
print(total_cost)
```","def calculate_total_cost_from_unit_prices_and_items(item_prices_df, item_col, unit_price_col, item_list):
    """"""
    This function takes in a pandas DataFrame representing a table of item prices and a list of item names, and returns the total cost of the items based on the prices.
    
    Args:
    item_prices_df (pd.DataFrame): A pandas DataFrame containing item names and their prices.
    item_col (str): The column name for the item names.
    unit_price_col (str): The column name for the item prices.
    item_list (list): A list where the elements are item names.
    
    Returns:
    float: The total cost of the items.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the item names and calculate the cost for each item
    for item_name in item_list:
        # Filter the DataFrame for the specific item name
        item_price_df = item_prices_df[item_prices_df[item_col] == item_name]
        if not item_price_df.empty:
            item_price = item_price_df[unit_price_col].values[0]
            total_cost += item_price
    
    return total_cost","item_prices_data = {
    'Package': ['African safari vacation package', 'Hawaiian vacation package', 'European vacation package', 'Australian vacation package', 'Jamaican vacation package', 'Caribbean vacation package'],
    'Price': [1031, 3200, 5183, 4098, 6532, 2150]
}

item_prices_df = pd.DataFrame(item_prices_data)

item_list = ['Hawaiian vacation package', 'European vacation package']
print(calculate_total_cost_from_unit_prices_and_items(item_prices_df, ""Package"", ""Price"", item_list))"
Look at Thad's pay stub. Thad lives in a state that has state income tax. How much did Thad make after taxes?,763.28,"Employee | Pay period |
Thad James | June 12-18 |
Total earnings | | $1,100.00
Federal income tax | $172.02 |
State income tax | $80.70 |
Other taxes | $84.00 |
Total taxes | | ?
Pay after taxes | | ?",5,15059,"import pandas as pd

def calculate_pay_after_taxes(pay_stub_df):
    """"""
    This function takes in a pandas DataFrame representing a pay stub table and calculates the pay after taxes.
    Args:
    pay_stub_df (pd.DataFrame): A pandas DataFrame containing pay stub information with columns 'Item' and 'Amount'.
    Returns:
    float: The pay after taxes.
    """"""
    # Extract the total earnings, federal income tax, state income tax, and other taxes
    total_earnings = pay_stub_df.loc[pay_stub_df['Item'] == 'Total earnings', 'Amount'].values[0]
    federal_income_tax = pay_stub_df.loc[pay_stub_df['Item'] == 'Federal income tax', 'Amount'].values[0]
    state_income_tax = pay_stub_df.loc[pay_stub_df['Item'] == 'State income tax', 'Amount'].values[0]
    other_taxes = pay_stub_df.loc[pay_stub_df['Item'] == 'Other taxes', 'Amount'].values[0]
    
    # Calculate the total taxes
    total_taxes = federal_income_tax + state_income_tax + other_taxes
    
    # Calculate the pay after taxes
    pay_after_taxes = total_earnings - total_taxes
    
    return pay_after_taxes","```python
# Initialize the table into a dataframe
pay_stub_df = pd.DataFrame({
    'Item': ['Total earnings', 'Federal income tax', 'State income tax', 'Other taxes'],
    'Amount': [1100.00, 172.02, 80.70, 84.00]
})

# Call the tool to solve the problem
pay_after_taxes = calculate_pay_after_taxes(pay_stub_df)

# Print the answer
print(pay_after_taxes)
```","def calculate_net_pay_after_taxes(pay_stub_df, item_col, amount_col, earnings_item, tax_items):
    """"""
    This function takes in a pandas DataFrame representing a pay stub table and calculates the pay after taxes.
    
    Args:
    pay_stub_df (pd.DataFrame): A pandas DataFrame containing pay stub information.
    item_col (str): The column name for the item names.
    amount_col (str): The column name for the amounts.
    earnings_item (str): The item name for the total earnings.
    tax_items (list): A list of item names for the taxes.
    
    Returns:
    float: The pay after taxes.
    """"""
    # Extract the total earnings
    total_earnings = pay_stub_df.loc[pay_stub_df[item_col] == earnings_item, amount_col].values[0]
    
    # Initialize the total taxes
    total_taxes = 0.0
    
    # Add up all the taxes
    for tax_item in tax_items:
        tax_amount = pay_stub_df.loc[pay_stub_df[item_col] == tax_item, amount_col].values[0]
        total_taxes += tax_amount
    
    # Calculate the pay after taxes
    pay_after_taxes = total_earnings - total_taxes
    
    return pay_after_taxes","pay_stub_data = {
    'Item': ['Total earnings', 'Federal income tax', 'State income tax', 'Other taxes'],
    'Amount': [1100.00, 172.02, 80.70, 84.00]
}

pay_stub_df = pd.DataFrame(pay_stub_data)

earnings_item = ""Total earnings""
tax_items = [""Federal income tax"", ""State income tax"", ""Other taxes""]
print(calculate_net_pay_after_taxes(pay_stub_df, ""Item"", ""Amount"", earnings_item, tax_items))"
How much money does Erin need to buy 6 cockatoos?,466.26,"finch | $21.44
rabbit | $83.66
cockatoo | $77.71
chameleon | $63.24",7,3095,"import pandas as pd

def calculate_cost_for_animal(df, animal, quantity):
    """"""
    This function takes in a pandas DataFrame representing a table of animals and their prices, the name of an animal, and a quantity, and returns the total cost for the specified quantity of the animal.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing animals and their prices with columns 'Animal' and 'Price'.
    animal (str): The name of the animal.
    quantity (int): The quantity of the animal.
    Returns:
    float: The total cost for the specified quantity of the animal.
    """"""
    # Filter the DataFrame for the specific animal
    animal_df = df[df['Animal'] == animal]
    if not animal_df.empty:
        animal_price = animal_df['Price'].values[0]
        total_cost = quantity * animal_price
        return total_cost
    else:
        return ""Animal not found in the list.""","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Animal': ['finch', 'rabbit', 'cockatoo', 'chameleon'],
    'Price': [21.44, 83.66, 77.71, 63.24]
})
# Call the tool to solve the problem
total_cost = calculate_cost_for_animal(df, 'cockatoo', 6)
print(total_cost)
```","def calculate_total_cost_for_item(item_prices_df, item_col, unit_price_col, item_name, quantity):
    """"""
    This function takes in a pandas DataFrame representing a table of item prices, the name of an item, and a quantity, and returns the total cost for the specified quantity of the item.
    
    Args:
    item_prices_df (pd.DataFrame): A pandas DataFrame containing item names and their prices.
    item_col (str): The column name for the item names.
    unit_price_col (str): The column name for the item prices.
    item_name (str): The name of the item.
    quantity (int): The quantity of the item.
    
    Returns:
    float: The total cost for the specified quantity of the item.
    """"""
    # Filter the DataFrame for the specific item name
    item_price_df = item_prices_df[item_prices_df[item_col] == item_name]
    if not item_price_df.empty:
        item_price = item_price_df[unit_price_col].values[0]
        total_cost = quantity * item_price
        return total_cost
    else:
        return ""Item not found in the list.""","item_prices_data = {
    'Animal': ['finch', 'rabbit', 'cockatoo', 'chameleon'],
    'Price': [21.44, 83.66, 77.71, 63.24]
}

item_prices_df = pd.DataFrame(item_prices_data)

total_cost = calculate_total_cost_for_item(item_prices_df, ""Animal"", ""Price"", ""cockatoo"", 6)
print(total_cost)"
"This morning, Mr. Beasley released the scores from last week's spelling test. How many students scored at least 40 points but fewer than 70 points?",14.0,"Stem | Leaf 
4 | 0, 2, 5, 7, 8, 9
5 | 9
6 | 0, 0, 3, 4, 5, 7, 7
7 | 6, 7, 7
8 | 0, 3, 5, 6, 9",7,6677,"import pandas as pd
def count_students_with_scores_between_40_and_70(df):
    """"""
    This function takes in a pandas dataframe of students' scores, and returns the number of students that scored at least 40 points but fewer than 70 points.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the students' scores.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of students that scored at least 40 points but fewer than 70 points.
    """"""
    # prepare a list to calculate scores of each student
    scores = []
    # calculate the score of each student
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            scores.append(stem * 10 + leaf[j])
    # filter the students where the score is greater than or equal to 40 and less than 70
    filtered = [score for score in scores if score >= 40 and score < 70]
    # count the number of students
    num_students = len(filtered)
    return num_students","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [4, 5, 6, 7, 8],
    'Leaf': [[0, 2, 5, 7, 8, 9], [9], [0, 0, 3, 4, 5, 7, 7], [6, 7, 7], [0, 3, 5, 6, 9]]
})
# Call the tool to solve the problem
count_students_with_scores_between_40_and_70(df)
```","def count_items_in_range_in_stem_leaf(data_frame, stem_col, leaf_col, lower_bound, upper_bound):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of items and a range, and returns the number of items that have values within the range.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    lower_bound (int): The lower bound of the range.
    upper_bound (int): The upper bound of the range.
    
    Returns:
    int: The number of items with values within the range.
    """"""
    # Initialize the list to calculate items in each group
    items = []
    
    # Calculate the total value of items in each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Filter the items where the total value is within the range
    filtered = [item for item in items if item >= lower_bound and item < upper_bound]
    
    # Count the number of items
    num_items = len(filtered)
    
    return num_items","data = {
    ""Stem"": [4, 5, 6, 7, 8],
    ""Leaf"": [[0, 2, 5, 7, 8, 9], [9], [0, 0, 3, 4, 5, 7, 7], [6, 7, 7], [0, 3, 5, 6, 9]]
}

df = pd.DataFrame(data)
print(count_items_in_range_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf"", lower_bound=40, upper_bound=70))"
The Kingwood Soup Company recorded the number of rotten tomatoes in each barrel it received. How many barrels had at least 17 rotten tomatoes?,7.0,"Stem | Leaf 
1 | 7
2 | 
3 | 7, 8
4 | 4
5 | 7
6 | 6
7 | 
8 | 3",5,11265,"import pandas as pd

def count_barrels_with_17_rotten_tomatoes(df):
    """"""
    This function takes in a pandas dataframe of rotten tomatoes per barrel, and returns the number of barrels that have at least 17 rotten tomatoes.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of rotten tomatoes per barrel.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of barrels that have at least 17 rotten tomatoes.
    """"""
    # prepare a list to calculate rotten tomatoes in each barrel
    rotten_tomatoes = []
    # calculate the total number of rotten tomatoes in each barrel
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            rotten_tomatoes.append(stem * 10 + leaf[j])
    # filter the barrels where the total number of rotten tomatoes is greater than or equal to 17
    filtered = [tomato for tomato in rotten_tomatoes if tomato >= 17]
    # count the number of rows
    num_barrels = len(filtered)
    return num_barrels","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],
    'Leaf': [[7], [], [7, 8], [4], [7], [6], [], [3]]
})
# Call the tool to solve the problem
count_barrels_with_17_rotten_tomatoes(df)
```","def count_groups_above_threshold_in_stem_leaf(data_frame, stem_col, leaf_col, item_threshold):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of groups and a threshold value, and returns the number of groups that have values greater than or equal to the threshold.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    item_threshold (int): The threshold value for filtering items.
    
    Returns:
    int: The number of items with values greater than or equal to the threshold.
    """"""
    # Initialize the list to calculate items in each group
    items = []
    
    # Calculate the total value of items in each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Filter the items where the total value is greater than or equal to the threshold
    filtered = [item for item in items if item >= item_threshold]
    
    # Count the number of items
    num_items = len(filtered)
    
    return num_items","data = {
    ""Stem"": [1, 2, 3, 4, 5, 6, 7, 8],
    ""Leaf"": [[7], [], [7, 8], [4], [7], [6], [], [3]]
}

df = pd.DataFrame(data)
print(count_groups_above_threshold_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf"", item_threshold=17))"
A bagel wholesaler examined the bagel sales of each of the retail stores that it served. How many more everything bagels than cinnamon-raisin bagels did Westside Bagels sell?,5.0,"Shop | Cinnamon-raisin bagels | Everything bagels
Downtown Bagels | 8 | 12
Bagel City | 20 | 11
Westside Bagels | 8 | 13
Jimmy's Bagels | 3 | 16",5,17078,"import pandas as pd

def calculate_bagel_difference(df, shop_name):
    """"""
    This function takes in a pandas DataFrame representing a bagel sales table and a shop name, and returns the difference in sales between everything bagels and cinnamon-raisin bagels for the specified shop.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing bagel sales data with columns 'Shop', 'Cinnamon-raisin bagels', and 'Everything bagels'.
    shop_name (str): The name of the shop for which to calculate the bagel sales difference.
    Returns:
    int: The difference in sales between everything bagels and cinnamon-raisin bagels for the specified shop.
    """"""
    # Filter the DataFrame for the specific shop
    shop_df = df[df['Shop'] == shop_name]
    if not shop_df.empty:
        # Calculate the difference in sales
        difference = shop_df['Everything bagels'].values[0] - shop_df['Cinnamon-raisin bagels'].values[0]
        return difference
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Shop': ['Downtown Bagels', 'Bagel City', 'Westside Bagels', 'Jimmy\'s Bagels'],
    'Cinnamon-raisin bagels': [8, 20, 8, 3],
    'Everything bagels': [12, 11, 13, 16]
})
# Call the tool to solve the problem
print(calculate_bagel_difference(df, 'Westside Bagels'))
```","def calculate_item_sales_difference_for_entity(data_frame, entity_col, item1_col, item2_col, entity_name):
    """"""
    This function takes in a pandas DataFrame representing a table of item sales for entities and calculates the difference in sales between two item types for a specified entity.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing item sales data with columns specified by entity_col, item1_col, and item2_col.
    entity_col (str): The column name for the entity names.
    item1_col (str): The column name for the first item type sales.
    item2_col (str): The column name for the second item type sales.
    entity_name (str): The name of the entity for which to calculate the item sales difference.
    
    Returns:
    int: The difference in sales between the two item types for the specified entity.
    """"""
    # Filter the DataFrame for the specific entity
    entity_df = data_frame[data_frame[entity_col] == entity_name]
    if not entity_df.empty:
        # Calculate the difference in sales
        difference = entity_df[item2_col].values[0] - entity_df[item1_col].values[0]
        return difference
    else:
        return None","data = {
    'Shop': ['Downtown Bagels', 'Bagel City', 'Westside Bagels', 'Jimmy\'s Bagels'],
    'Cinnamon-raisin bagels': [8, 20, 8, 3],
    'Everything bagels': [12, 11, 13, 16]
}

df = pd.DataFrame(data)
print(calculate_item_sales_difference_for_entity(data_frame=df, entity_col=""Shop"", item1_col=""Cinnamon-raisin bagels"", item2_col=""Everything bagels"", entity_name=""Westside Bagels""))"
Each pile has 10 magazines. How many magazines are in 3 piles?,30.0,"Number of piles | Number of magazines
1 | 10
2 | 20
3 | ?",1,10935,"import pandas as pd

def calculate_magazines(df, piles):
    """"""
    This function takes in a pandas DataFrame representing a table of piles and magazines, and a number of piles, and returns the number of magazines in the given number of piles.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of piles and the corresponding number of magazines with columns 'Number of piles' and 'Number of magazines'.
    piles (int): The number of piles for which to calculate the number of magazines.
    Returns:
    int: The number of magazines in the given number of piles.
    """"""
    # Get the number of magazines per pile from the DataFrame
    magazines_per_pile = df['Number of magazines'][0] / df['Number of piles'][0]
    
    # Calculate the number of magazines in the given number of piles
    magazines = piles * magazines_per_pile
    
    return int(magazines)","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of piles': [1, 2],
    'Number of magazines': [10, 20]
})

# Call the tool to solve the problem
magazines_in_3_piles = calculate_magazines(df, 3)
print(magazines_in_3_piles)
```","def calculate_total_items_from_group_item_relationship(data_frame, group_col, item_col, num_groups):
    """"""
    This function takes in a pandas DataFrame representing a table of group-item relationships and a given number of groups, and returns the total number of items in the given number of groups.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the group-item relationships with columns specified by group_col and item_col.
    group_col (str): The column name for the group values.
    item_col (str): The column name for the item values.
    num_groups (int): The number of groups for which to calculate the total number of items.
    
    Returns:
    int: The total number of items in the given number of groups.
    """"""
    # Get the number of items per group from the DataFrame
    items_per_group = data_frame[item_col][0] / data_frame[group_col][0]
    
    # Calculate the total number of items in the given number of groups
    total_items = num_groups * items_per_group
    
    return int(total_items)","data = {
    'Number of piles': [1, 2],
    'Number of magazines': [10, 20]
}

df = pd.DataFrame(data)
print(calculate_total_items_from_group_item_relationship(data_frame=df, group_col=""Number of piles"", item_col=""Number of magazines"", num_groups=3))"
A cookie factory monitored the number of broken cookies per pack yesterday. How many packs had exactly 38 broken cookies?,4.0,"Stem | Leaf 
2 | 0, 2, 2, 4
3 | 4, 8, 8, 8, 8
4 | 6, 6
5 | 0, 8
6 | 0, 0, 1, 9
7 | 1, 2, 3, 3, 4, 7",8,12956,"import pandas as pd
def count_packs_with_38_broken_cookies(df):
    """"""
    This function takes in a pandas dataframe of broken cookies per pack, and returns the number of packs that have exactly 38 broken cookies.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken cookies per pack.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of packs that have exactly 38 broken cookies.
    """"""
    # prepare a list to calculate cookies in each pack
    cookies = []
    # calculate the total number of broken cookies in each pack
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            cookies.append(stem * 10 + leaf[j])
    # filter the packs where the total number of broken cookies is exactly 38
    filtered = [cookie for cookie in cookies if cookie == 38]
    # count the number of rows
    num_packs = len(filtered)
    return num_packs","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [2, 3, 4, 5, 6, 7],
    'Leaf': [[0, 2, 2, 4], [4, 8, 8, 8, 8], [6, 6], [0, 8], [0, 0, 1, 9], [1, 2, 3, 3, 4, 7]]
})
# Call the tool to solve the problem
count_packs_with_38_broken_cookies(df)
```","def count_groups_with_exact_number_in_stem_leaf(data_frame, stem_col, leaf_col, item_number):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of groups and a specific item number, and returns the number of groups that have exactly the given number of items.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    item_number (int): The specific number of items for filtering groups.
    
    Returns:
    int: The number of groups with exactly the given number of items.
    """"""
    # Initialize the list to calculate items in each group
    items = []
    
    # Calculate the total number of items in each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Filter the groups where the total number of items is exactly the given number
    filtered = [item for item in items if item == item_number]
    
    # Count the number of groups
    num_groups = len(filtered)
    
    return num_groups","data = {
    ""Stem"": [2, 3, 4, 5, 6, 7],
    ""Leaf"": [[0, 2, 2, 4], [4, 8, 8, 8, 8], [6, 6], [0, 8], [0, 0, 1, 9], [1, 2, 3, 3, 4, 7]]
}

df = pd.DataFrame(data)
print(count_groups_with_exact_number_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf"", item_number=38))"
"For an assignment, Marshall looked at which countries got the most Nobel Prizes in various decades. How many more Nobel Prize winners did Canada have in the 1990s than in the 1980s?",5.0,"Country | 1980s | 1990s
Italy | 3 | 1
Japan | 2 | 1
Germany | 11 | 7
Canada | 3 | 8",5,13842,"import pandas as pd

def calculate_difference(df, country, column1, column2):
    """"""
    This function takes in a pandas DataFrame, a country name, and two column names, and returns the difference in the number of Nobel Prize winners between the two columns for the specified country.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of Nobel Prize winners for different countries in different decades.
    country (str): The name of the country.
    column1 (str): The name of the first column.
    column2 (str): The name of the second column.
    Returns:
    int: The difference in the number of Nobel Prize winners between the two columns for the specified country.
    """"""
    # Filter the DataFrame for the specific country
    country_df = df[df['Country'] == country]
    if not country_df.empty:
        # Calculate the difference in the number of Nobel Prize winners between the two columns
        difference = country_df[column2].values[0] - country_df[column1].values[0]
        return difference
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Country': ['Italy', 'Japan', 'Germany', 'Canada'],
    '1980s': [3, 2, 11, 3],
    '1990s': [1, 1, 7, 8]
})
# Call the tool to solve the problem
difference = calculate_difference(df, 'Canada', '1980s', '1990s')
print(difference)
```","def calculate_difference_between_columns_for_row(df, id_col, row_id, col1, col2):
    """"""
    This function takes in a pandas DataFrame, a row identifier, and two column names, and returns the difference in values between the two columns for the specified row.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing various data.
    id_col (str): The column name for the row identifiers.
    row_id (str): The identifier for the row.
    col1 (str): The name of the first column.
    col2 (str): The name of the second column.
    
    Returns:
    int: The difference in values between the two columns for the specified row.
    """"""
    # Filter the DataFrame for the specific row
    row_df = df[df[id_col] == row_id]
    if not row_df.empty:
        # Calculate the difference in values between the two columns
        difference = row_df[col2].values[0] - row_df[col1].values[0]
        return difference
    else:
        return None","df = pd.DataFrame({
    'Country': ['Italy', 'Japan', 'Germany', 'Canada'],
    '1980s': [3, 2, 11, 3],
    '1990s': [1, 1, 7, 8]
})
print(calculate_difference_between_columns_for_row(df, 'Country', 'Canada', '1980s', '1990s'))"
The county released data about how many schools there are in each town. What is the mean of the numbers?,6.0,"Town | Number of schools
Greenwood | 2
Richmond | 7
Mayfield | 4
Salem | 9
Ashland | 7
Chesterton | 7",6,12987,"import pandas as pd
import numpy as np

def calculate_mean(df):
    """"""
    This function takes in a pandas DataFrame representing a table of towns and their number of schools, and returns the mean number of schools.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing town names and their number of schools with columns 'Town' and 'Number of schools'.
    Returns:
    float: The mean number of schools.
    """"""
    # Calculate the mean of the 'Number of schools' column
    mean = np.mean(df['Number of schools'])
    
    return mean","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Town': ['Greenwood', 'Richmond', 'Mayfield', 'Salem', 'Ashland', 'Chesterton'],
    'Number of schools': [2, 7, 4, 9, 7, 7]
})

# Call the tool to solve the problem
mean = calculate_mean(df)
print(mean)
```","def calculate_mean_of_column(data_frame, column_name):
    """"""
    This function takes in a pandas DataFrame and a column name, and returns the mean of the specified column.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the data.
    column_name (str): The name of the column for which the mean should be calculated.
    
    Returns:
    float: The mean of the specified column.
    """"""
    # Calculate the mean of the specified column
    mean = np.mean(data_frame[column_name])
    
    return mean","df = pd.DataFrame({
    'Town': ['Greenwood', 'Richmond', 'Mayfield', 'Salem', 'Ashland', 'Chesterton'],
    'Number of schools': [2, 7, 4, 9, 7, 7]
})

mean = calculate_mean_of_column(data_frame=df, column_name='Number of schools')
print(mean)"
"As part of a statistics project, a math class weighed all the children who were willing to participate. What is the weight of the lightest child?",21.0,"Stem | Leaf 
2 | 1
3 | 
4 | 2, 3, 5, 6
5 | 7, 9, 9
6 | 1",8,12012,"import pandas as pd

def find_lightest_child(df):
    """"""
    This function takes in a pandas dataframe of children's weights, and returns the weight of the lightest child.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the weights of children.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The weight of the lightest child.
    """"""
    # prepare a list to calculate weight of each child
    weights = []
    # calculate the weight of each child
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            weights.append(stem * 10 + leaf[j])
    # find the minimum weight
    min_weight = min(weights)
    return min_weight","We should first create a pandas dataframe with the data from the table. Note that some elements are empty, so we need to fill them with empty lists. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [2, 3, 4, 5, 6],
    'Leaf': [[1], [], [2, 3, 5, 6], [7, 9, 9], [1]]
})
# Call the tool to solve the problem
print(find_lightest_child(df))
```","def find_minimum_value_in_stem_leaf(data_frame, stem_col, leaf_col):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of items, and returns the minimum value among the items.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    
    Returns:
    int: The minimum value among the items.
    """"""
    # Initialize the list to calculate items
    items = []
    
    # Calculate the total value of items
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Find the minimum value
    min_value = min(items)
    
    return min_value","data = {
    ""Stem"": [2, 3, 4, 5, 6],
    ""Leaf"": [[1], [], [2, 3, 5, 6], [7, 9, 9], [1]]
}

df = pd.DataFrame(data)
print(find_minimum_value_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf""))"
Mr. Clarke recorded the scores of his students on the most recent math quiz. How many students are there in all?,53.0,"Score | Frequency
5 | 13
6 | 2
7 | 8
8 | 11
9 | 4
10 | 15",8,2878,"import pandas as pd

def calculate_total_students(score_frequency_df):
    """"""
    This function takes in a pandas DataFrame representing a score frequency table and returns the total number of students.
    Args:
    score_frequency_df (pd.DataFrame): A pandas DataFrame containing scores and their frequencies with columns 'Score' and 'Frequency'.
    Returns:
    int: The total number of students.
    """"""
    # Calculate the total number of students by summing the frequencies
    total_students = score_frequency_df['Frequency'].sum()
    
    return total_students","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Score': [5, 6, 7, 8, 9, 10],
    'Frequency': [13, 2, 8, 11, 4, 15]
})
# Call the tool to solve the problem
total_students = calculate_total_students(df)
print(total_students)
```","def calculate_total_elements_from_frequency_table(frequency_table_df, value_col, frequency_col):
    """"""
    This function takes in a pandas DataFrame representing a frequency table and returns the total number of elements based on the frequencies.
    
    Args:
    frequency_table_df (pd.DataFrame): A pandas DataFrame containing values and their frequencies with columns specified by value_col and frequency_col.
    value_col (str): The column name for the values.
    frequency_col (str): The column name for the frequencies.
    
    Returns:
    int: The total number of elements.
    """"""
    # Calculate the total number of elements by summing the frequencies
    total_elements = frequency_table_df[frequency_col].sum()
    
    return total_elements","data = {
    'Score': [5, 6, 7, 8, 9, 10],
    'Frequency': [13, 2, 8, 11, 4, 15]
}

df = pd.DataFrame(data)
print(calculate_total_elements_from_frequency_table(frequency_table_df=df, value_col=""Score"", frequency_col=""Frequency""))"
Norwood Property Management reviewed the number of vacant apartments at each its apartment complexes over time. How many more vacant apartments did University Apartments have in August than in September?,3.0,"Apartment complex | August | September
Shadyside Apartments | 2 | 5
Creekside Apartments | 1 | 9
University Apartments | 19 | 16",4,5497,"import pandas as pd

def calculate_difference_vacant_apartments(df, complex_name, month1, month2):
    """"""
    This function takes in a pandas DataFrame representing a table of vacant apartments, the name of the apartment complex, and two months, and returns the difference in the number of vacant apartments between the two months.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of vacant apartments per complex and month with columns 'Apartment complex', 'August', 'September'.
    complex_name (str): The name of the apartment complex to calculate the difference for.
    month1 (str): The first month to compare.
    month2 (str): The second month to compare.
    Returns:
    int: The difference in the number of vacant apartments between the two months for the specified apartment complex.
    """"""
    # Filter the DataFrame for the specific apartment complex
    complex_df = df[df['Apartment complex'] == complex_name]
    
    if not complex_df.empty:
        # Get the number of vacant apartments for each month
        vacant_month1 = complex_df[month1].values[0]
        vacant_month2 = complex_df[month2].values[0]
        
        # Calculate the difference in the number of vacant apartments
        difference = vacant_month1 - vacant_month2
        
        return difference
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Apartment complex': ['Shadyside Apartments', 'Creekside Apartments', 'University Apartments'],
    'August': [2, 1, 19],
    'September': [5, 9, 16]
})

# Call the tool to solve the problem
difference = calculate_difference_vacant_apartments(df, 'University Apartments', 'August', 'September')
print(difference)
```","def calculate_difference_between_periods_for_entity(df, entity_col, period1_col, period2_col, entity_name):
    """"""
    This function takes in a pandas DataFrame representing a table of entities and their values over different periods, the name of the entity, and two periods, and returns the difference in values between the two periods for the specified entity.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the values of entities over different periods.
    entity_col (str): The column name for the entities.
    period1_col (str): The column name for the first period.
    period2_col (str): The column name for the second period.
    entity_name (str): The name of the entity to calculate the difference for.
    
    Returns:
    int: The difference in values between the two periods for the specified entity.
    """"""
    # Filter the DataFrame for the specific entity
    entity_df = df[df[entity_col] == entity_name]
    
    if not entity_df.empty:
        # Get the values for each period
        value_period1 = entity_df[period1_col].values[0]
        value_period2 = entity_df[period2_col].values[0]
        
        # Calculate the difference in values
        difference = value_period1 - value_period2
        
        return difference
    else:
        return None","df = pd.DataFrame({
    'Apartment complex': ['Shadyside Apartments', 'Creekside Apartments', 'University Apartments'],
    'August': [2, 1, 19],
    'September': [5, 9, 16]
})

print(calculate_difference_between_periods_for_entity(df, 'Apartment complex', 'August', 'September', 'University Apartments'))"
A cookie factory monitored the number of broken cookies per pack yesterday. How many packs had at least 20 broken cookies but less than 40 broken cookies?,6.0,"Stem | Leaf 
1 | 1, 3, 4, 5, 8, 9
2 | 0, 1, 1
3 | 1, 5, 7
4 | 8",6,8092,"import pandas as pd
def count_bags_with_20_to_40_broken_cookies(df):
    """"""
    This function takes in a pandas dataframe of broken cookies per pack, and returns the number of packs that have at least 20 but less than 40 broken cookies.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken cookies per pack.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of packs that have at least 20 but less than 40 broken cookies.
    """"""
    # prepare a list to calculate cookies in each pack
    cookies = []
    # calculate the total number of broken cookies in each pack
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            cookies.append(stem * 10 + leaf[j])
    # filter the packs where the total number of broken cookies is greater than or equal to 20 but less than 40
    filtered = [cookie for cookie in cookies if cookie >= 20 and cookie < 40]
    # count the number of rows
    num_packs = len(filtered)
    return num_packs","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [1, 2, 3, 4],
    'Leaf': [[1, 3, 4, 5, 8, 9], [0, 1, 1], [1, 5, 7], [8]]
})
# Call the tool to solve the problem
count_bags_with_20_to_40_broken_cookies(df)
```","def count_groups_within_range_in_stem_leaf(data_frame, stem_col, leaf_col, min_threshold, max_threshold):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of groups and a range of values, and returns the number of groups that have values within the specified range.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    min_threshold (int): The minimum threshold value for filtering items.
    max_threshold (int): The maximum threshold value for filtering items.
    
    Returns:
    int: The number of items with values within the specified range.
    """"""
    # Initialize the list to calculate items in each group
    items = []
    
    # Calculate the total value of items in each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Filter the items where the total value is within the specified range
    filtered = [item for item in items if item >= min_threshold and item < max_threshold]
    
    # Count the number of items
    num_items = len(filtered)
    
    return num_items","data = {
    ""Stem"": [1, 2, 3, 4],
    ""Leaf"": [[1, 3, 4, 5, 8, 9], [0, 1, 1], [1, 5, 7], [8]]
}

df = pd.DataFrame(data)
print(count_groups_within_range_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf"", min_threshold=20, max_threshold=40))"
What is the total cost for 1+1/4 pounds of farfalle pasta?,8.75,"penne pasta | $5 per pound
spirali pasta | $4 per pound
farfalle pasta | $7 per pound
rotini pasta | $6 per pound
fusilli pasta | $4 per pound
rigatoni pasta | $5 per pound",6,7519,"import pandas as pd

def calculate_cost_for_weight(df, item, weight):
    """"""
    This function takes in a pandas DataFrame representing a price table, an item name, and a weight, and returns the total cost of the item for the given weight.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing items and their prices per pound with columns 'Item' and 'Price per pound'.
    item (str): The name of the item.
    weight (float): The weight of the item.
    Returns:
    float: The total cost of the item for the given weight.
    """"""
    # Filter the DataFrame for the specific item
    item_df = df[df['Item'] == item]
    if not item_df.empty:
        # Extract the price per pound for the item
        price_per_pound = item_df['Price per pound'].values[0]
        # Calculate the total cost for the given weight
        total_cost = weight * price_per_pound
        return total_cost
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Item': ['penne pasta', 'spirali pasta', 'farfalle pasta', 'rotini pasta', 'fusilli pasta', 'rigatoni pasta'],
    'Price per pound': [5, 4, 7, 6, 4, 5]
})

# Call the tool to solve the problem
weight = 1 + 1/4
item = 'farfalle pasta'
total_cost = calculate_cost_for_weight(df, item, weight)
print(total_cost)
```","def calculate_total_cost_from_unit_prices_and_weight(item_prices_df, item_col, unit_price_col, item_name, item_weight):
    """"""
    This function takes in a pandas DataFrame representing a table of item prices and a given weight, and returns the total cost of the item based on the prices and weight.
    
    Args:
    item_prices_df (pd.DataFrame): A pandas DataFrame containing item names and their prices.
    item_col (str): The column name for the item names.
    unit_price_col (str): The column name for the item prices.
    item_name (str): The name of the item.
    item_weight (float): The weight of the item.
    
    Returns:
    float: The total cost of the item for the given weight.
    """"""
    # Filter the DataFrame for the specific item name
    item_price_df = item_prices_df[item_prices_df[item_col] == item_name]
    if not item_price_df.empty:
        # Extract the price per unit for the item
        price_per_unit = item_price_df[unit_price_col].values[0]
        # Calculate the total cost for the given weight
        total_cost = item_weight * price_per_unit
        return total_cost
    else:
        return None","item_prices_data = {
    'Item': ['penne pasta', 'spirali pasta', 'farfalle pasta', 'rotini pasta', 'fusilli pasta', 'rigatoni pasta'],
    'Price per pound': [5, 4, 7, 6, 4, 5]
}

item_prices_df = pd.DataFrame(item_prices_data)

item_name = ""farfalle pasta""
item_weight = 1 + 1/4
print(calculate_total_cost_from_unit_prices_and_weight(item_prices_df, ""Item"", ""Price per pound"", item_name, item_weight))"
An insurance company compiled the number of doctor visits made by some patients last year. How many patients did not go to the doctor last year?,14.0,"Number of trips | Frequency
0 | 14
1 | 4
2 | 15
3 | 5
4 | 10
5 | 19",7,16818,"import pandas as pd

def count_patients_with_no_visits(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of doctor visits and returns the number of patients who did not go to the doctor last year.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of doctor visits and their frequencies with columns 'Number of trips' and 'Frequency'.
    Returns:
    int: The number of patients who did not go to the doctor last year.
    """"""
    # Filter the DataFrame for the patients who did not go to the doctor
    no_visit_df = df[df['Number of trips'] == 0]
    
    # If there are no such patients, return 0
    if no_visit_df.empty:
        return 0
    
    # Otherwise, return the frequency of patients who did not go to the doctor
    return no_visit_df['Frequency'].values[0]","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of trips': [0, 1, 2, 3, 4, 5],
    'Frequency': [14, 4, 15, 5, 10, 19]
})

# Call the tool to solve the problem
print(count_patients_with_no_visits(df))
```","def count_frequency_of_specific_value(data_frame, value_col, frequency_col, specific_value):
    """"""
    This function takes in a pandas DataFrame representing a frequency table, a specific value, and returns the frequency of the specific value in the table.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing values and their frequencies.
    value_col (str): The column name for the values.
    frequency_col (str): The column name for the frequencies.
    specific_value (int): The specific value to count the frequency of.
    
    Returns:
    int: The frequency of the specific value in the table.
    """"""
    # Filter the DataFrame for the specific value
    specific_value_df = data_frame[data_frame[value_col] == specific_value]
    
    # If there are no such values, return 0
    if specific_value_df.empty:
        return 0
    
    # Otherwise, return the frequency of the specific value
    return specific_value_df[frequency_col].values[0]","data = {
    'Number of trips': [0, 1, 2, 3, 4, 5],
    'Frequency': [14, 4, 15, 5, 10, 19]
}

df = pd.DataFrame(data)
print(count_frequency_of_specific_value(data_frame=df, value_col=""Number of trips"", frequency_col=""Frequency"", specific_value=0))"
Scarlett's class recorded how many states each student has visited. What is the range of the numbers?,8.0,"Name | Number of states
Scarlett | 46
Nancy | 42
Dillon | 46
Wyatt | 42
Luca | 38
Cara | 42
Kenneth | 46",5,1823,"import pandas as pd

def calculate_range(df):
    """"""
    This function takes in a pandas DataFrame representing a table of students and the number of states they have visited, and returns the range of the numbers using pandas.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing student names and the number of states they have visited with columns 'Name' and 'Number of states'.
    Returns:
    int: The range of the numbers of states visited.
    """"""
    # Calculate the maximum and minimum number of states visited
    max_states = df['Number of states'].max()
    min_states = df['Number of states'].min()
    
    # Calculate the range
    range_states = max_states - min_states
    
    return range_states","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Name': ['Scarlett', 'Nancy', 'Dillon', 'Wyatt', 'Luca', 'Cara', 'Kenneth'],
    'Number of states': [46, 42, 46, 42, 38, 42, 46]
})

# Call the tool to solve the problem
range_states = calculate_range(df)

# Print the answer
print(range_states)
```","def calculate_range_of_column_values(data_frame, column_name):
    """"""
    This function takes in a pandas DataFrame and a column name, and returns the range of the values in the specified column.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the data.
    column_name (str): The name of the column for which the range of values is to be calculated.
    
    Returns:
    float: The range of the values in the specified column.
    """"""
    # Calculate the maximum and minimum values in the column
    max_value = data_frame[column_name].max()
    min_value = data_frame[column_name].min()
    
    # Calculate the range
    value_range = max_value - min_value
    
    return value_range","data = {
    'Name': ['Scarlett', 'Nancy', 'Dillon', 'Wyatt', 'Luca', 'Cara', 'Kenneth'],
    'Number of states': [46, 42, 46, 42, 38, 42, 46]
}

df = pd.DataFrame(data)
print(calculate_range_of_column_values(data_frame=df, column_name='Number of states'))"
Each twig has 5 grasshoppers. How many grasshoppers are on 4 twigs?,20.0,"Number of twigs | Number of grasshoppers
1 | 5
2 | 10
3 | 15
4 | ?",2,2965,"def calculate_grasshoppers_on_twigs(twigs):
    """"""
    This function takes in the number of twigs and returns the number of grasshoppers on the twigs, given that each twig has 5 grasshoppers.
    Args:
    twigs (int): The number of twigs.
    Returns:
    int: The number of grasshoppers on the twigs.
    """"""
    grasshoppers = twigs * 5
    return grasshoppers","```python
# Call the tool to solve the problem
calculate_grasshoppers_on_twigs(4)
```","def calculate_total_items_from_ratio(num_groups, ratio_per_group):
    """"""
    This function takes in the number of groups and a ratio, and returns the total number of items based on the ratio.
    
    Args:
    num_groups (int): The number of groups.
    ratio_per_group (int): The ratio of items per group.
    
    Returns:
    int: The total number of items.
    """"""
    # Calculate the total number of items
    total_items = num_groups * ratio_per_group
    
    return total_items","print(calculate_total_items_from_ratio(num_groups=4, ratio_per_group=5))"
An architecture student measured the heights of all the buildings downtown. How many buildings are less than 30 meters tall?,3.0,"Stem | Leaf 
1 | 5
2 | 1, 2
3 | 1, 2, 3, 4, 5, 7
4 | 0, 3, 3, 4, 5, 6, 6
5 | 1, 2, 4, 4",6,3922,"import pandas as pd
def count_buildings_less_than_30_meters(df):
    """"""
    This function takes in a pandas dataframe of building heights, and returns the number of buildings that are less than 30 meters tall.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the heights of buildings.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of buildings that are less than 30 meters tall.
    """"""
    # prepare a list to calculate height of each building
    heights = []
    # calculate the height of each building
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            heights.append(stem * 10 + leaf[j])
    # filter the buildings where the height is less than 30 meters
    filtered = [height for height in heights if height < 30]
    # count the number of rows
    num_buildings = len(filtered)
    return num_buildings","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [1, 2, 3, 4, 5],
    'Leaf': [[5], [1, 2], [1, 2, 3, 4, 5, 7], [0, 3, 3, 4, 5, 6, 6], [1, 2, 4, 4]]
})
# Call the tool to solve the problem
count_buildings_less_than_30_meters(df)
```","def count_groups_below_threshold_in_stem_leaf(data_frame, stem_col, leaf_col, item_threshold):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of groups and a threshold value, and returns the number of groups that have values less than the threshold.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    item_threshold (int): The threshold value for filtering items.
    
    Returns:
    int: The number of items with values less than the threshold.
    """"""
    # Initialize the list to calculate items in each group
    items = []
    
    # Calculate the total value of items in each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Filter the items where the total value is less than the threshold
    filtered = [item for item in items if item < item_threshold]
    
    # Count the number of items
    num_items = len(filtered)
    
    return num_items","data = {
    ""Stem"": [1, 2, 3, 4, 5],
    ""Leaf"": [[5], [1, 2], [1, 2, 3, 4, 5, 7], [0, 3, 3, 4, 5, 6, 6], [1, 2, 4, 4]]
}

df = pd.DataFrame(data)
print(count_groups_below_threshold_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf"", item_threshold=30))"
Mary looked at her e-mail outbox to see how many e-mails she sent each day. What is the mode of the numbers?,67.0,"Day | Number of e-mails
Wednesday | 84
Thursday | 67
Friday | 71
Saturday | 71
Sunday | 67
Monday | 67
Tuesday | 84",5,10944,"import pandas as pd
from collections import Counter

def calculate_mode(df):
    """"""
    This function takes in a pandas DataFrame representing a table of days and number of emails, and returns the mode of the number of emails.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing days and number of emails with columns 'Day' and 'Number of e-mails'.
    Returns:
    int: The mode of the number of emails.
    """"""
    # Extract the 'Number of e-mails' column
    emails = df['Number of e-mails']
    
    # Calculate the frequency of each number of emails
    counter = Counter(emails)
    
    # Find the number of emails with the highest frequency
    mode = counter.most_common(1)[0][0]
    
    return mode","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],
    'Number of e-mails': [84, 67, 71, 71, 67, 67, 84]
})
# Call the tool to solve the problem
calculate_mode(df)
```","from collections import Counter

def calculate_mode_of_column(df, column_name):
    """"""
    This function takes in a pandas DataFrame and a column name, and returns the mode of the column.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame.
    column_name (str): The name of the column to calculate the mode of.
    
    Returns:
    int: The mode of the column.
    """"""
    # Extract the column
    column = df[column_name]
    
    # Calculate the frequency of each value in the column
    counter = Counter(column)
    
    # Find the value with the highest frequency
    mode = counter.most_common(1)[0][0]
    
    return mode","df = pd.DataFrame({
    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],
    'Number of e-mails': [84, 67, 71, 71, 67, 67, 84]
})
print(calculate_mode_of_column(df, 'Number of e-mails'))"
An archer recalled how many times he hit the bull's-eye in the past 7 days. What is the mode of the numbers?,9.0,"Day | Number of bull's-eyes
Wednesday | 9
Thursday | 8
Friday | 9
Saturday | 8
Sunday | 9
Monday | 11
Tuesday | 11",5,2620,"import pandas as pd
from collections import Counter

def calculate_mode(df):
    """"""
    This function takes in a pandas DataFrame containing the number of bull's-eyes per day and returns the mode of the numbers.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of bull's-eyes per day with columns 'Day' and 'Number of bull's-eyes'.
    Returns:
    int: The mode of the numbers.
    """"""
    # Extract the number of bull's-eyes column
    bullseyes = df[""Number of bull's-eyes""].tolist()
    
    # Calculate the frequency of each number
    counter = Counter(bullseyes)
    
    # Find the mode
    mode = counter.most_common(1)[0][0]
    
    return mode","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],
    'Number of bull\'s-eyes': [9, 8, 9, 8, 9, 11, 11]
})
# Call the tool to solve the problem
mode = calculate_mode(df)
print(mode)
```","def calculate_mode_from_dataframe_column(data_frame, number_col):
    """"""
    This function takes in a pandas DataFrame and a column name containing numbers, and returns the mode of the numbers in that column.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing a column with numbers.
    number_col (str): The column name for the numbers.
    
    Returns:
    int: The mode of the numbers in the specified column.
    """"""
    # Extract the numbers from the specified column
    numbers = data_frame[number_col].tolist()
    
    # Calculate the frequency of each number
    counter = Counter(numbers)
    
    # Find the mode
    mode = counter.most_common(1)[0][0]
    
    return mode","df = pd.DataFrame({
    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],
    'Number of bull\'s-eyes': [9, 8, 9, 8, 9, 11, 11]
})

print(calculate_mode_from_dataframe_column(data_frame=df, number_col=""Number of bull's-eyes""))"
A front desk clerk looked up how many guests the hotel had each day. What is the range of the numbers?,22.0,"Day | Number of guests
Friday | 50
Saturday | 34
Sunday | 38
Monday | 56
Tuesday | 38
Wednesday | 46
Thursday | 53",5,8161,"import pandas as pd

def calculate_range(df):
    """"""
    This function takes in a pandas DataFrame containing a column of numbers and returns the range of the numbers.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing a column of numbers.
    Returns:
    int: The range of the numbers in the DataFrame.
    """"""
    # Find the minimum and maximum values in the DataFrame
    min_value = df['Number of guests'].min()
    max_value = df['Number of guests'].max()
    
    # Calculate the range
    range_value = max_value - min_value
    
    return range_value","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],
    'Number of guests': [50, 34, 38, 56, 38, 46, 53]
})

# Call the tool to solve the problem
range_value = calculate_range(df)
print(range_value)
```","def calculate_range_of_numbers_in_column(df, num_col):
    """"""
    This function takes in a pandas DataFrame containing a column of numbers and returns the range of the numbers in the specified column.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing a column of numbers.
    num_col (str): The column name for the numbers.
    
    Returns:
    int: The range of the numbers in the specified column.
    """"""
    # Find the minimum and maximum values in the DataFrame
    min_value = df[num_col].min()
    max_value = df[num_col].max()
    
    # Calculate the range
    range_value = max_value - min_value
    
    return range_value","df = pd.DataFrame({
    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],
    'Number of guests': [50, 34, 38, 56, 38, 46, 53]
})

range_value = calculate_range_of_numbers_in_column(df, 'Number of guests')
print(range_value)"
An art instructor kept track of how many total pictures were painted by each of the people enrolled in his class. How many people painted fewer than 2 pictures?,29.0,"Pictures painted | Frequency
0 | 10
1 | 19
2 | 12
3 | 8",8,12125,"import pandas as pd

def count_people_painted_fewer_than_2(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of pictures painted and returns the number of people who painted fewer than 2 pictures.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of pictures painted and their frequencies with columns 'Pictures painted' and 'Frequency'.
    Returns:
    int: The number of people who painted fewer than 2 pictures.
    """"""
    # Filter the DataFrame for the rows where the number of pictures painted is less than 2
    filtered_df = df[df['Pictures painted'] < 2]
    
    # Sum the frequencies of these rows to get the total number of people who painted fewer than 2 pictures
    num_people = filtered_df['Frequency'].sum()
    
    return num_people","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Pictures painted': [0, 1, 2, 3],
    'Frequency': [10, 19, 12, 8]
})
# Call the tool to solve the problem
count_people_painted_fewer_than_2(df)
```","def count_entities_below_threshold_in_frequency_table(data_frame, entity_col, frequency_col, threshold):
    """"""
    This function takes in a pandas DataFrame representing a frequency table and a threshold value, and returns the number of entities with a frequency less than the threshold.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the frequency table with columns specified by entity_col and frequency_col.
    entity_col (str): The column name for the entities.
    frequency_col (str): The column name for the frequencies.
    threshold (int): The threshold value for filtering entities.
    
    Returns:
    int: The number of entities with a frequency less than the threshold.
    """"""
    # Filter the DataFrame for the rows where the frequency is less than the threshold
    filtered_df = data_frame[data_frame[entity_col] < threshold]
    
    # Sum the frequencies of these rows to get the total number of entities
    num_entities = filtered_df[frequency_col].sum()
    
    return num_entities","data = {
    'Pictures painted': [0, 1, 2, 3],
    'Frequency': [10, 19, 12, 8]
}

df = pd.DataFrame(data)
print(count_entities_below_threshold_in_frequency_table(data_frame=df, entity_col=""Pictures painted"", frequency_col=""Frequency"", threshold=2))"
Will has $158. How much money will Will have left if he buys a wedding cake and a pecan pie?,74.0,"apple tart | $19
wedding cake | $71
peach pie | $12
key lime pie | $12
pecan pie | $13
apple pie | $14",5,12497,"import pandas as pd

def calculate_remaining_money(menu_df, budget, items):
    """"""
    This function takes in a pandas DataFrame representing a menu table, a budget, and a list of items to buy, and returns the remaining money after buying the items using pandas.
    Args:
    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.
    budget (float): The initial budget.
    items (list): A list of menu item names to buy.
    Returns:
    float: The remaining money after buying the items.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the items and calculate the cost for each item
    for item in items:
        # Filter the DataFrame for the specific item
        item_df = menu_df[menu_df['Item'] == item]
        if not item_df.empty:
            item_price = item_df['Price'].values[0]
            total_cost += item_price
    
    # Calculate the remaining money
    remaining_money = budget - total_cost
    
    return remaining_money","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
menu_df = pd.DataFrame({
    'Item': ['apple tart', 'wedding cake', 'peach pie', 'key lime pie', 'pecan pie', 'apple pie'],
    'Price': [19, 71, 12, 12, 13, 14]
})

# Call the tool to solve the problem
remaining_money = calculate_remaining_money(menu_df, 158, ['wedding cake', 'pecan pie'])
print(remaining_money)
```","def calculate_remaining_budget_after_purchases(item_prices_df, item_col, price_col, initial_budget, items_to_buy):
    """"""
    This function takes in a pandas DataFrame representing a table of item prices, an initial budget, and a list of items to buy, and returns the remaining budget after buying the items.
    
    Args:
    item_prices_df (pd.DataFrame): A pandas DataFrame containing item names and their prices.
    item_col (str): The column name for the item names.
    price_col (str): The column name for the item prices.
    initial_budget (float): The initial budget.
    items_to_buy (list): A list of item names to buy.
    
    Returns:
    float: The remaining budget after buying the items.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the item names and calculate the cost for each item
    for item_name in items_to_buy:
        # Filter the DataFrame for the specific item name
        item_price_df = item_prices_df[item_prices_df[item_col] == item_name]
        if not item_price_df.empty:
            item_price = item_price_df[price_col].values[0]
            total_cost += item_price
    
    # Calculate the remaining budget
    remaining_budget = initial_budget - total_cost
    
    return remaining_budget","item_prices_data = {
    'Item': ['apple tart', 'wedding cake', 'peach pie', 'key lime pie', 'pecan pie', 'apple pie'],
    'Price': [19, 71, 12, 12, 13, 14]
}

item_prices_df = pd.DataFrame(item_prices_data)

items_to_buy = ['wedding cake', 'pecan pie']
print(calculate_remaining_budget_after_purchases(item_prices_df, ""Item"", ""Price"", 158, items_to_buy))"
How much money does Nina need to buy 7 bottles of mouthwash?,25.76,"bottle of hand lotion | $2.99
hairbrush | $4.63
bottle of mouthwash | $3.68
bottle of sunscreen | $3.59
box of bandages | $2.34",7,8231,"import pandas as pd

def calculate_total_cost_single_item(menu_df, item_name, quantity):
    """"""
    This function takes in a pandas DataFrame representing a menu table, an item name, and a quantity, and returns the total cost of the orders using pandas.
    Args:
    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.
    item_name (str): The name of the item to be ordered.
    quantity (int): The number of items to be ordered.
    Returns:
    float: The total cost of the orders.
    """"""
    # Filter the DataFrame for the specific item
    item_df = menu_df[menu_df['Item'] == item_name]
    if not item_df.empty:
        item_price = item_df['Price'].values[0]
        total_cost = quantity * item_price
    else:
        total_cost = 0.0
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
menu_df = pd.DataFrame({
    'Item': ['bottle of hand lotion', 'hairbrush', 'bottle of mouthwash', 'bottle of sunscreen', 'box of bandages'],
    'Price': [2.99, 4.63, 3.68, 3.59, 2.34]
})

# Call the tool to solve the problem
total_cost = calculate_total_cost_single_item(menu_df, 'bottle of mouthwash', 7)
print(total_cost)
```","def calculate_total_cost_for_single_item(item_prices_df, item_col, unit_price_col, item_name, quantity):
    """"""
    This function takes in a pandas DataFrame representing a table of item prices, an item name, and a quantity, and returns the total cost of the item based on the price and quantity.
    
    Args:
    item_prices_df (pd.DataFrame): A pandas DataFrame containing item names and their prices.
    item_col (str): The column name for the item names.
    unit_price_col (str): The column name for the item prices.
    item_name (str): The name of the item.
    quantity (int): The quantity of the item.
    
    Returns:
    float: The total cost of the item.
    """"""
    # Filter the DataFrame for the specific item name
    item_price_df = item_prices_df[item_prices_df[item_col] == item_name]
    if not item_price_df.empty:
        item_price = item_price_df[unit_price_col].values[0]
        total_cost = quantity * item_price
    else:
        total_cost = 0.0
    
    return total_cost","item_prices_data = {
    'Item': ['bottle of hand lotion', 'hairbrush', 'bottle of mouthwash', 'bottle of sunscreen', 'box of bandages'],
    'Price': [2.99, 4.63, 3.68, 3.59, 2.34]
}

item_prices_df = pd.DataFrame(item_prices_data)

print(calculate_total_cost_for_single_item(item_prices_df, ""Item"", ""Price"", 'bottle of mouthwash', 7))"
Akira buys 3+7/10 kilograms of dock washers. What is the total cost?,14.8,"lock washers | $3 per kilogram
square washers | $3 per kilogram
dock washers | $4 per kilogram
fender washers | $3 per kilogram
star washers | $3 per kilogram",6,10718,"import pandas as pd

def calculate_cost(df, item, weight):
    """"""
    This function takes in a pandas DataFrame representing a table of items and their prices per kilogram, the name of an item, and the weight of the item in kilograms, and returns the total cost of the item.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing items and their prices per kilogram with columns 'Item' and 'Price per kilogram'.
    item (str): The name of the item.
    weight (float): The weight of the item in kilograms.
    Returns:
    float: The total cost of the item.
    """"""
    # Filter the DataFrame for the specific item
    item_df = df[df['Item'] == item]
    if not item_df.empty:
        # Extract the price per kilogram
        price_per_kg = item_df['Price per kilogram'].values[0]
        # Calculate the total cost
        total_cost = weight * price_per_kg
        return total_cost
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Item': ['lock washers', 'square washers', 'dock washers', 'fender washers', 'star washers'],
    'Price per kilogram': [3, 3, 4, 3, 3]
})
# Call the tool to solve the problem
total_cost = calculate_cost(df, 'dock washers', 3+7/10)
print(total_cost)
```","def calculate_total_cost_from_unit_weight_prices_and_weight(item_prices_df, item_col, unit_price_col, item_name, item_weight):
    """"""
    This function takes in a pandas DataFrame representing a table of item prices per unit weight, the name of an item, and the weight of the item, and returns the total cost of the item based on the prices and weight.
    
    Args:
    item_prices_df (pd.DataFrame): A pandas DataFrame containing item names and their prices per unit weight.
    item_col (str): The column name for the item names.
    unit_price_col (str): The column name for the item prices per unit weight.
    item_name (str): The name of the item.
    item_weight (float): The weight of the item.
    
    Returns:
    float: The total cost of the item.
    """"""
    # Filter the DataFrame for the specific item name
    item_price_df = item_prices_df[item_prices_df[item_col] == item_name]
    if not item_price_df.empty:
        # Extract the price per unit weight
        price_per_unit_weight = item_price_df[unit_price_col].values[0]
        # Calculate the total cost
        total_cost = item_weight * price_per_unit_weight
        return total_cost
    else:
        return None","item_prices_data = {
    'Item': ['lock washers', 'square washers', 'dock washers', 'fender washers', 'star washers'],
    'Price per kilogram': [3, 3, 4, 3, 3]
}

item_prices_df = pd.DataFrame(item_prices_data)

item_name = ""dock washers""
item_weight = 3 + 7/10
print(calculate_total_cost_from_unit_weight_prices_and_weight(item_prices_df, ""Item"", ""Price per kilogram"", item_name, item_weight))"
The members of the track team compared how many miles they ran last week. What is the mode of the numbers?,4.0,"Name | Miles
Sophie | 7
Jacob | 3
Alana | 4
Trevor | 4
Edwin | 7
Nolan | 4",7,3400,"import pandas as pd
from collections import Counter

def calculate_mode(df):
    """"""
    This function takes in a pandas DataFrame representing a table of names and miles run, and returns the mode of the miles run.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing names and miles run with columns 'Name' and 'Miles'.
    Returns:
    int: The mode of the miles run.
    """"""
    # Extract the 'Miles' column from the DataFrame
    miles = df['Miles']
    
    # Use the Counter class from the collections module to count the frequency of each number of miles run
    counter = Counter(miles)
    
    # Find the number of miles run that has the highest frequency
    mode = counter.most_common(1)[0][0]
    
    return mode","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Name': ['Sophie', 'Jacob', 'Alana', 'Trevor', 'Edwin', 'Nolan'],
    'Miles': [7, 3, 4, 4, 7, 4]
})
# Call the tool to solve the problem
calculate_mode(df)
```","def calculate_mode_of_column(data_frame, column_name):
    """"""
    This function takes in a pandas DataFrame and a column name, and returns the mode of the specified column.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the data.
    column_name (str): The name of the column for which the mode should be calculated.
    
    Returns:
    int: The mode of the specified column.
    """"""
    # Extract the specified column from the DataFrame
    column_data = data_frame[column_name]
    
    # Use the Counter class from the collections module to count the frequency of each value in the column
    counter = Counter(column_data)
    
    # Find the value in the column that has the highest frequency
    mode = counter.most_common(1)[0][0]
    
    return mode","data = {
    'Name': ['Sophie', 'Jacob', 'Alana', 'Trevor', 'Edwin', 'Nolan'],
    'Miles': [7, 3, 4, 4, 7, 4]
}

df = pd.DataFrame(data)
print(calculate_mode_of_column(data_frame=df, column_name=""Miles""))"
Each laundry hamper has 5 pairs of jeans. How many pairs of jeans are in 3 laundry hampers?,15.0,"Number of laundry hampers | Number of pairs of jeans
1 | 5
2 | 10
3 | ?",1,8937,"def calculate_jeans_in_hampers(df, hamper_count):
    """"""
    This function takes in a pandas DataFrame representing a table of laundry hampers and the number of jeans in each, and a count of hampers, and returns the number of jeans in the given number of hampers.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of laundry hampers and the number of jeans in each with columns 'Number of laundry hampers' and 'Number of pairs of jeans'.
    hamper_count (int): The number of laundry hampers.
    Returns:
    int: The number of jeans in the given number of hampers.
    """"""
    # Get the number of jeans in one hamper
    jeans_per_hamper = df[df['Number of laundry hampers'] == 1]['Number of pairs of jeans'].values[0]
    
    # Calculate the number of jeans in the given number of hampers
    total_jeans = jeans_per_hamper * hamper_count
    
    return total_jeans","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of laundry hampers': [1, 2],
    'Number of pairs of jeans': [5, 10]
})

# Call the tool to solve the problem
calculate_jeans_in_hampers(df, 3)
```","def calculate_items_in_groups(df, group_col, item_col, group_count):
    """"""
    This function takes in a pandas DataFrame representing a table of group-item counts, a column name for groups, a column name for items, and a count of groups, and returns the number of items in the given number of groups.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of groups and the number of items in each with columns specified by group_col and item_col.
    group_col (str): The column name for the groups.
    item_col (str): The column name for the items.
    group_count (int): The number of groups.
    
    Returns:
    int: The number of items in the given number of groups.
    """"""
    # Get the number of items in one group
    items_per_group = df[df[group_col] == 1][item_col].values[0]
    
    # Calculate the number of items in the given number of groups
    total_items = items_per_group * group_count
    
    return total_items","df = pd.DataFrame({
    'Number of laundry hampers': [1, 2],
    'Number of pairs of jeans': [5, 10]
})

print(calculate_items_in_groups(df, 'Number of laundry hampers', 'Number of pairs of jeans', 3))"
A farm equipment company kept a record of the number of tractors made each month. How many tractors did the company make in total in July and August?,643.0,"Month | Number of tractors
July | 158
August | 485
September | 357",3,6938,"import pandas as pd

def calculate_total_tractors(df, months):
    """"""
    This function takes in a pandas DataFrame representing a record of tractors made each month and a list of months, and returns the total number of tractors made in these months.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing months and the number of tractors made with columns 'Month' and 'Number of tractors'.
    months (list): A list of months for which the total number of tractors is to be calculated.
    Returns:
    int: The total number of tractors made in the given months.
    """"""
    # Filter the DataFrame for the specific months
    df_filtered = df[df['Month'].isin(months)]
    
    # Calculate the total number of tractors
    total_tractors = df_filtered['Number of tractors'].sum()
    
    return total_tractors","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Month': ['July', 'August', 'September'],
    'Number of tractors': [158, 485, 357]
})

# Call the tool to solve the problem
total_tractors = calculate_total_tractors(df, ['July', 'August'])
print(total_tractors)
```","def calculate_total_items_in_periods(df, period_col, item_count_col, periods_list):
    """"""
    This function takes in a pandas DataFrame representing a table of item counts per period and a list of periods, and returns the total number of items produced in these periods.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing periods and the number of items produced with columns specified by period_col and item_count_col.
    period_col (str): The column name for the periods.
    item_count_col (str): The column name for the item counts.
    periods_list (list): A list of periods for which the total number of items is to be calculated.
    
    Returns:
    int: The total number of items produced in the given periods.
    """"""
    # Filter the DataFrame for the specific periods
    df_filtered = df[df[period_col].isin(periods_list)]
    
    # Calculate the total number of items
    total_items = df_filtered[item_count_col].sum()
    
    return total_items","df = pd.DataFrame({
    'Month': ['July', 'August', 'September'],
    'Number of tractors': [158, 485, 357]
})

print(calculate_total_items_in_periods(df, 'Month', 'Number of tractors', ['July', 'August']))"
"A Girl Scout troop recorded how many boxes of cookies they sold each day for a week. According to the table, what was the rate of change between Thursday and Friday?",3.0,"Day | Boxes of cookies
Tuesday | 31
Wednesday | 29
Thursday | 29
Friday | 32
Saturday | 31",7,12831,"import pandas as pd

def calculate_rate_of_change(df, day1, day2):
    """"""
    This function takes in a pandas DataFrame representing a table of daily cookie sales and two days, and returns the rate of change between the two days.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing daily cookie sales with columns 'Day' and 'Boxes of cookies'.
    day1 (str): The first day to compare.
    day2 (str): The second day to compare.
    Returns:
    float: The rate of change between the two days.
    """"""
    # Filter the DataFrame for the specific days
    day1_df = df[df['Day'] == day1]
    day2_df = df[df['Day'] == day2]
    
    # Check if both days are in the DataFrame
    if not day1_df.empty and not day2_df.empty:
        # Calculate the rate of change
        day1_sales = day1_df['Boxes of cookies'].values[0]
        day2_sales = day2_df['Boxes of cookies'].values[0]
        rate_of_change = day2_sales - day1_sales
        return rate_of_change
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    'Boxes of cookies': [31, 29, 29, 32, 31]
})
# Call the tool to solve the problem
rate_of_change = calculate_rate_of_change(df, 'Thursday', 'Friday')
print(rate_of_change)
```","def calculate_rate_of_change_between_data_points(data_frame, index_col, value_col, data_point1, data_point2):
    """"""
    This function takes in a pandas DataFrame representing a table with a column of values and two data points, and returns the rate of change between the two data points based on the value column.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing a column of values and an index column.
    index_col (str): The column name for the index column.
    value_col (str): The column name for the value column.
    data_point1 (str): The first data point to compare.
    data_point2 (str): The second data point to compare.
    
    Returns:
    float: The rate of change between the two data points.
    """"""
    # Filter the DataFrame for the specific data points
    data_point1_df = data_frame[data_frame[index_col] == data_point1]
    data_point2_df = data_frame[data_frame[index_col] == data_point2]
    
    # Check if both data points are in the DataFrame
    if not data_point1_df.empty and not data_point2_df.empty:
        # Calculate the rate of change
        value1 = data_point1_df[value_col].values[0]
        value2 = data_point2_df[value_col].values[0]
        rate_of_change = value2 - value1
        return rate_of_change
    else:
        return None","data = {
    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    'Boxes of cookies': [31, 29, 29, 32, 31]
}

df = pd.DataFrame(data)
print(calculate_rate_of_change_between_data_points(data_frame=df, index_col=""Day"", value_col=""Boxes of cookies"", data_point1=""Thursday"", data_point2=""Friday""))"
Shawn figured out the scores at the end of a card game. Which score did the greatest number of people receive?,4.0,"Score | Frequency
4 | 19
5 | 14
6 | 18
7 | 6
8 | 16
9 | 12
10 | 0",8,3495,"import pandas as pd

def find_most_common_score(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of scores and returns the score with the greatest frequency.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing scores and their frequencies with columns 'Score' and 'Frequency'.
    Returns:
    int: The score with the greatest frequency.
    """"""
    # Find the row with the maximum frequency
    max_frequency_row = df[df['Frequency'] == df['Frequency'].max()]
    
    # Get the score from the row
    most_common_score = max_frequency_row['Score'].values[0]
    
    return most_common_score","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Score': [4, 5, 6, 7, 8, 9, 10],
    'Frequency': [19, 14, 18, 6, 16, 12, 0]
})
# Call the tool to solve the problem
most_common_score = find_most_common_score(df)
print(most_common_score)
```","def find_most_common_value_in_frequency_table(frequency_table_df, value_col, frequency_col):
    """"""
    This function takes in a pandas DataFrame representing a frequency table and returns the value with the greatest frequency.
    
    Args:
    frequency_table_df (pd.DataFrame): A pandas DataFrame containing values and their frequencies.
    value_col (str): The column name for the values.
    frequency_col (str): The column name for the frequencies.
    
    Returns:
    int/float/str: The value with the greatest frequency.
    """"""
    # Find the row with the maximum frequency
    max_frequency_row = frequency_table_df[frequency_table_df[frequency_col] == frequency_table_df[frequency_col].max()]
    
    # Get the value from the row
    most_common_value = max_frequency_row[value_col].values[0]
    
    return most_common_value","frequency_table_data = {
    'Score': [4, 5, 6, 7, 8, 9, 10],
    'Frequency': [19, 14, 18, 6, 16, 12, 0]
}

frequency_table_df = pd.DataFrame(frequency_table_data)

print(find_most_common_value_in_frequency_table(frequency_table_df, ""Score"", ""Frequency""))"
Destiny's classmates recorded how many books they read last year. What is the median of the numbers?,71.0,"Name | Number of books
Destiny | 70
Jenny | 74
Leah | 74
Anita | 70
Wyatt | 71
Tommy | 72
Nate | 71",5,10051,"import pandas as pd
import numpy as np

def calculate_median(df):
    """"""
    This function takes in a pandas DataFrame representing a table of names and the number of books read, and returns the median number of books read using numpy.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing names and the number of books read with columns 'Name' and 'Number of books'.
    Returns:
    float: The median number of books read.
    """"""
    # Extract the 'Number of books' column and convert it to a numpy array
    books_array = df['Number of books'].to_numpy()
    
    # Calculate and return the median
    median_books = np.median(books_array)
    
    return median_books","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Name': ['Destiny', 'Jenny', 'Leah', 'Anita', 'Wyatt', 'Tommy', 'Nate'],
    'Number of books': [70, 74, 74, 70, 71, 72, 71]
})

# Call the tool to solve the problem
median_books = calculate_median(df)
print(median_books)
```","def calculate_median_of_numerical_column(df, num_col):
    """"""
    This function takes in a pandas DataFrame and a numerical column name, and returns the median of the numerical column using numpy.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing at least one numerical column.
    num_col (str): The column name for the numerical values.
    
    Returns:
    float: The median of the numerical column.
    """"""
    # Extract the numerical column and convert it to a numpy array
    num_array = df[num_col].to_numpy()
    
    # Calculate and return the median
    median_num = np.median(num_array)
    
    return median_num","df = pd.DataFrame({
    'Name': ['Destiny', 'Jenny', 'Leah', 'Anita', 'Wyatt', 'Tommy', 'Nate'],
    'Number of books': [70, 74, 74, 70, 71, 72, 71]
})

print(calculate_median_of_numerical_column(df, 'Number of books'))"
Sue works at Scoops ice cream shop. The frequency chart shows how many times each topping was ordered during two of her shifts. How many more times were rainbow sprinkles ordered than chocolate chips?,2.0,"Topping | Frequency
caramel sauce | 4
chocolate chips | 7
gummy candies | 3
rainbow sprinkles | 9",5,4564,"import pandas as pd

def calculate_difference(df, topping1, topping2):
    """"""
    This function takes in a pandas DataFrame representing a frequency chart of toppings and two topping names, and returns the difference in the number of times the two toppings were ordered.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing topping names and their frequencies with columns 'Topping' and 'Frequency'.
    topping1 (str): The name of the first topping.
    topping2 (str): The name of the second topping.
    Returns:
    int: The difference in the number of times the two toppings were ordered.
    """"""
    # Get the frequency of the first topping
    topping1_frequency = df[df['Topping'] == topping1]['Frequency'].values[0]
    
    # Get the frequency of the second topping
    topping2_frequency = df[df['Topping'] == topping2]['Frequency'].values[0]
    
    # Calculate and return the difference
    return abs(topping1_frequency - topping2_frequency)","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Topping': ['caramel sauce', 'chocolate chips', 'gummy candies', 'rainbow sprinkles'],
    'Frequency': [4, 7, 3, 9]
})

# Call the tool to solve the problem
difference = calculate_difference(df, 'rainbow sprinkles', 'chocolate chips')
print(difference)
```","def calculate_frequency_difference(data_frame, item_col, frequency_col, item1, item2):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of items and two item names, and returns the difference in the number of times the two items were ordered.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing item names and their frequencies.
    item_col (str): The column name for the item names.
    frequency_col (str): The column name for the item frequencies.
    item1 (str): The name of the first item.
    item2 (str): The name of the second item.
    
    Returns:
    int: The difference in the number of times the two items were ordered.
    """"""
    # Get the frequency of the first item
    item1_frequency = data_frame[data_frame[item_col] == item1][frequency_col].values[0]
    
    # Get the frequency of the second item
    item2_frequency = data_frame[data_frame[item_col] == item2][frequency_col].values[0]
    
    # Calculate and return the difference
    return abs(item1_frequency - item2_frequency)","data = {
    'Topping': ['caramel sauce', 'chocolate chips', 'gummy candies', 'rainbow sprinkles'],
    'Frequency': [4, 7, 3, 9]
}

df = pd.DataFrame(data)
print(calculate_frequency_difference(data_frame=df, item_col=""Topping"", frequency_col=""Frequency"", item1=""rainbow sprinkles"", item2=""chocolate chips""))"
Bernard counted the total number of shells collected by his friends during a walk on the beach. How many people found at least 4 seashells?,26.0,"Seashells found | Frequency
0 | 9
1 | 12
2 | 6
3 | 11
4 | 10
5 | 16",7,4964,"import pandas as pd

def count_people_with_at_least_4_seashells(df):
    """"""
    This function takes in a pandas DataFrame representing a table of seashells found and their frequencies, and returns the number of people who found at least 4 seashells.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of seashells found and their frequencies with columns 'Seashells found' and 'Frequency'.
    Returns:
    int: The number of people who found at least 4 seashells.
    """"""
    # Filter the DataFrame for rows where the number of seashells found is greater than or equal to 4
    filtered_df = df[df['Seashells found'] >= 4]
    
    # Calculate the total number of people who found at least 4 seashells
    total_people = filtered_df['Frequency'].sum()
    
    return total_people","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Seashells found': [0, 1, 2, 3, 4, 5],
    'Frequency': [9, 12, 6, 11, 10, 16]
})
# Call the tool to solve the problem
count_people_with_at_least_4_seashells(df)
```","def count_people_with_at_least_threshold_items(data_frame, item_col, frequency_col, item_threshold):
    """"""
    This function takes in a pandas DataFrame representing a table of items found and their frequencies, and returns the number of people who found at least a certain threshold of items.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the number of items found and their frequencies with columns specified by item_col and frequency_col.
    item_col (str): The column name for the item counts.
    frequency_col (str): The column name for the frequencies.
    item_threshold (int): The threshold value for filtering items.
    
    Returns:
    int: The number of people who found at least the threshold number of items.
    """"""
    # Filter the DataFrame for rows where the number of items found is greater than or equal to the threshold
    filtered_df = data_frame[data_frame[item_col] >= item_threshold]
    
    # Calculate the total number of people who found at least the threshold number of items
    total_people = filtered_df[frequency_col].sum()
    
    return total_people","data = {
    'Seashells found': [0, 1, 2, 3, 4, 5],
    'Frequency': [9, 12, 6, 11, 10, 16]
}

df = pd.DataFrame(data)
print(count_people_with_at_least_threshold_items(data_frame=df, item_col=""Seashells found"", frequency_col=""Frequency"", item_threshold=4))"
The Newberry Ski Resort asked its guests how many times they went sledding last winter. How many guests went sledding exactly 5 times last winter?,20.0,"Number of times | Frequency
0 | 14
1 | 9
2 | 1
3 | 5
4 | 4
5 | 20
6 | 2",7,16285,"import pandas as pd

def get_frequency(df, target_value):
    """"""
    This function takes in a pandas DataFrame representing a frequency table and a target value, and returns the frequency of the target value.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing a frequency table with columns 'Number of times' and 'Frequency'.
    target_value (int): The target value for which the frequency is to be found.
    Returns:
    int: The frequency of the target value.
    """"""
    # Filter the DataFrame for the specific target value
    target_df = df[df['Number of times'] == target_value]
    if not target_df.empty:
        frequency = target_df['Frequency'].values[0]
        return frequency
    else:
        return 0","```python
# Create a pandas DataFrame for the frequency table
data = {'Number of times': [0, 1, 2, 3, 4, 5, 6],
        'Frequency': [14, 9, 1, 5, 4, 20, 2]}
frequency_df = pd.DataFrame(data)

# Find the frequency of guests who went sledding exactly 5 times
target_value = 5
frequency = get_frequency(frequency_df, target_value)
print(frequency)
```","def get_frequency_from_table(df, value_col, frequency_col, target_value):
    """"""
    This function takes in a pandas DataFrame representing a frequency table, column names for values and frequencies, and a target value, and returns the frequency of the target value.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing a frequency table.
    value_col (str): The column name for the values.
    frequency_col (str): The column name for the frequencies.
    target_value (int): The target value for which the frequency is to be found.
    
    Returns:
    int: The frequency of the target value.
    """"""
    # Filter the DataFrame for the specific target value
    target_df = df[df[value_col] == target_value]
    if not target_df.empty:
        frequency = target_df[frequency_col].values[0]
        return frequency
    else:
        return 0","data = {'Number of times': [0, 1, 2, 3, 4, 5, 6],
        'Frequency': [14, 9, 1, 5, 4, 20, 2]}
frequency_df = pd.DataFrame(data)

target_value = 5
print(get_frequency_from_table(df=frequency_df, value_col='Number of times', frequency_col='Frequency', target_value=target_value))"
A game show viewer monitors how often a wheel numbered 1 through 5 stops at each number. Which number was spun the most times?,2.0,"Number spun | Frequency
1 | 13
2 | 18
3 | 2
4 | 10
5 | 11",8,14407,"import pandas as pd

def find_most_spun_number(df):
    """"""
    This function takes in a pandas DataFrame representing a table of spun numbers and their frequencies, and returns the number that was spun the most times.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing spun numbers and their frequencies with columns 'Number spun' and 'Frequency'.
    Returns:
    int: The number that was spun the most times.
    """"""
    # Find the row with the maximum frequency
    max_frequency_row = df[df['Frequency'] == df['Frequency'].max()]
    
    # Get the number spun from the row
    most_spun_number = max_frequency_row['Number spun'].values[0]
    
    return most_spun_number","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number spun': [1, 2, 3, 4, 5],
    'Frequency': [13, 18, 2, 10, 11]
})

# Call the tool to solve the problem
most_spun_number = find_most_spun_number(df)
print(most_spun_number)
```","def find_item_with_highest_frequency(data_frame, item_col, frequency_col):
    """"""
    This function takes in a pandas DataFrame representing a table of items and their frequencies, and returns the item with the highest frequency.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing items and their frequencies.
    item_col (str): The column name for the items.
    frequency_col (str): The column name for the frequencies.
    
    Returns:
    object: The item with the highest frequency.
    """"""
    # Find the row with the maximum frequency
    max_frequency_row = data_frame[data_frame[frequency_col] == data_frame[frequency_col].max()]
    
    # Get the item from the row
    highest_frequency_item = max_frequency_row[item_col].values[0]
    
    return highest_frequency_item","data = {
    'Number spun': [1, 2, 3, 4, 5],
    'Frequency': [13, 18, 2, 10, 11]
}

df = pd.DataFrame(data)
print(find_item_with_highest_frequency(data_frame=df, item_col=""Number spun"", frequency_col=""Frequency""))"
Some students in a biology class compared how many times they went to the park last week to work on their plant research projects. How many students went to the park fewer than 2 times?,25.0,"Number of trips | Frequency
0 | 7
1 | 18
2 | 17
3 | 19
4 | 9",8,15779,"import pandas as pd

def count_students_with_fewer_than_2_trips(df):
    """"""
    This function takes in a pandas DataFrame representing the number of trips and their frequency, and returns the number of students who went to the park fewer than 2 times.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of trips and their frequency with columns 'Number of trips' and 'Frequency'.
    Returns:
    int: The number of students who went to the park fewer than 2 times.
    """"""
    # Filter the DataFrame for the rows with fewer than 2 trips
    filtered_df = df[df['Number of trips'] < 2]
    
    # Calculate the total number of students who went to the park fewer than 2 times
    total_students = filtered_df['Frequency'].sum()
    
    return total_students","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of trips': [0, 1, 2, 3, 4],
    'Frequency': [7, 18, 17, 19, 9]
})

# Call the tool to solve the problem
count_students_with_fewer_than_2_trips(df)
```","def count_items_below_threshold(data_frame, trip_col, frequency_col, trip_threshold):
    """"""
    This function takes in a pandas DataFrame representing a table of trip frequencies and a threshold value, and returns the number of items with trip values below the threshold.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the trip frequencies with columns specified by trip_col and frequency_col.
    trip_col (str): The column name for the trip values.
    frequency_col (str): The column name for the frequency values.
    trip_threshold (int): The threshold value for filtering trips.
    
    Returns:
    int: The number of items with trip values below the threshold.
    """"""
    # Filter the DataFrame for the rows with trip values below the threshold
    filtered_df = data_frame[data_frame[trip_col] < trip_threshold]
    
    # Calculate the total number of items with trip values below the threshold
    total_items = filtered_df[frequency_col].sum()
    
    return total_items","data = {
    'Number of trips': [0, 1, 2, 3, 4],
    'Frequency': [7, 18, 17, 19, 9]
}

df = pd.DataFrame(data)
print(count_items_below_threshold(data_frame=df, trip_col=""Number of trips"", frequency_col=""Frequency"", trip_threshold=2))"
A grocery store monitored how many paper bags were used in the past 5 days. How many more paper bags did the grocery store use on Friday than on Sunday?,415.0,"Day | Number of paper bags
Friday | 774
Saturday | 520
Sunday | 359
Monday | 653
Tuesday | 231",3,1538,"import pandas as pd

def calculate_difference(df, day1, day2):
    """"""
    This function takes in a pandas DataFrame representing a table of paper bags used per day and two days, and returns the difference in the number of paper bags used between the two days.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing days and the number of paper bags used with columns 'Day' and 'Number of paper bags'.
    day1 (str): The first day.
    day2 (str): The second day.
    Returns:
    int: The difference in the number of paper bags used between the two days.
    """"""
    # Filter the DataFrame for the specific days
    day1_df = df[df['Day'] == day1]
    day2_df = df[df['Day'] == day2]
    
    # Calculate the difference in the number of paper bags used
    difference = day1_df['Number of paper bags'].values[0] - day2_df['Number of paper bags'].values[0]
    
    return difference","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],
    'Number of paper bags': [774, 520, 359, 653, 231]
})

# Call the tool to solve the problem
difference = calculate_difference(df, 'Friday', 'Sunday')
print(difference)
```","def calculate_difference_between_rows(data_frame, common_col, value_col, row1, row2):
    """"""
    This function takes in a pandas DataFrame, a common column, a value column, and two rows to compare, and returns the difference in values between the two rows based on the common column.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the data.
    common_col (str): The column name for the common column.
    value_col (str): The column name for the value column.
    row1 (str): The first row to compare.
    row2 (str): The second row to compare.
    
    Returns:
    float: The difference in values between the two rows based on the common column.
    """"""
    # Filter the DataFrame for the specific rows
    row1_df = data_frame[data_frame[common_col] == row1]
    row2_df = data_frame[data_frame[common_col] == row2]
    
    # Calculate the difference in values
    difference = row1_df[value_col].values[0] - row2_df[value_col].values[0]
    
    return difference","data = {
    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],
    'Number of paper bags': [774, 520, 359, 653, 231]
}

df = pd.DataFrame(data)
print(calculate_difference_between_rows(data_frame=df, common_col=""Day"", value_col=""Number of paper bags"", row1=""Friday"", row2=""Sunday""))"
A business magazine surveyed its readers about their commute times. How many commutes are exactly 43 minutes?,1.0,"Stem | Leaf 
2 | 0, 0, 3, 5, 7
3 | 8
4 | 3, 4, 8
5 | 2, 6, 7, 7, 8, 8
6 | 5
7 | 1, 2, 3, 3, 4, 8
8 | 3
9 | 0",4,94,"import pandas as pd
def count_commutes_of_43_minutes(df):
    """"""
    This function takes in a pandas dataframe of commute times, and returns the number of commutes that are exactly 43 minutes.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the commute times.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of commutes that are exactly 43 minutes.
    """"""
    # prepare a list to calculate commute times
    commute_times = []
    # calculate the total commute time in each row
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            commute_times.append(stem * 10 + leaf[j])
    # filter the commutes where the total commute time is exactly 43 minutes
    filtered = [time for time in commute_times if time == 43]
    # count the number of rows
    num_commutes = len(filtered)
    return num_commutes","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],
    'Leaf': [[0, 0, 3, 5, 7], [8], [3, 4, 8], [2, 6, 7, 7, 8, 8], [5], [1, 2, 3, 3, 4, 8], [3], [0]]
})
# Call the tool to solve the problem
count_commutes_of_43_minutes(df)
```","def count_instances_with_specific_value_in_stem_leaf(data_frame, stem_col, leaf_col, specific_value):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of instances and a specific value, and returns the number of instances that have values equal to the specific value.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    specific_value (int): The specific value for filtering items.
    
    Returns:
    int: The number of items with values equal to the specific value.
    """"""
    # Initialize the list to calculate items in each group
    items = []
    
    # Calculate the total value of items in each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Filter the items where the total value is equal to the specific value
    filtered = [item for item in items if item == specific_value]
    
    # Count the number of items
    num_items = len(filtered)
    
    return num_items","data = {
    ""Stem"": [2, 3, 4, 5, 6, 7, 8, 9],
    ""Leaf"": [[0, 0, 3, 5, 7], [8], [3, 4, 8], [2, 6, 7, 7, 8, 8], [5], [1, 2, 3, 3, 4, 8], [3], [0]]
}

df = pd.DataFrame(data)
print(count_instances_with_specific_value_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf"", specific_value=43))"
"During Fitness Day at school, Jen and her classmates took part in a pull-up competition, keeping track of the results. How many people did exactly 67 pull-ups?",0.0,"Stem | Leaf 
4 | 9
5 | 2, 4, 7
6 | 0, 3, 4, 5
7 | 3, 3, 4, 9
8 | 
9 | 0",7,10261,"import pandas as pd

def count_people_with_67_pullups(df):
    """"""
    This function takes in a pandas dataframe of pull-up results, and returns the number of people who did exactly 67 pull-ups.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the pull-up results.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of people who did exactly 67 pull-ups.
    """"""
    # prepare a list to calculate pull-ups for each person
    pullups = []
    # calculate the total number of pull-ups for each person
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            pullups.append(stem * 10 + leaf[j])
    # filter the people who did exactly 67 pull-ups
    filtered = [pullup for pullup in pullups if pullup == 67]
    # count the number of people
    num_people = len(filtered)
    return num_people","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [4, 5, 6, 7, 8, 9],
    'Leaf': [[9], [2, 4, 7], [0, 3, 4, 5], [3, 3, 4, 9], [], [0]]
})
# Call the tool to solve the problem
count_people_with_67_pullups(df)
```","def count_groups_with_specific_value_in_stem_leaf(data_frame, stem_col, leaf_col, specific_score):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of groups and a specific score, and returns the number of groups that have exactly the specific score.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of scores with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    specific_score (int): The specific score for filtering groups.
    
    Returns:
    int: The number of groups with exactly the specific score.
    """"""
    # Initialize the list to calculate scores in each group
    scores = []
    
    # Calculate the total score for each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            scores.append(stem * 10 + leaf[j])
    
    # Filter the groups where the total score is exactly the specific score
    filtered = [score for score in scores if score == specific_score]
    
    # Count the number of groups
    num_groups = len(filtered)
    
    return num_groups","data = {
    ""Stem"": [4, 5, 6, 7, 8, 9],
    ""Leaf"": [[9], [2, 4, 7], [0, 3, 4, 5], [3, 3, 4, 9], [], [0]]
}

df = pd.DataFrame(data)
print(count_groups_with_specific_value_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf"", specific_score=67))"
"An environmental agency examined how many trees were planted by different organizations. In all, how many trees were planted by Let it Grow and Heal the Earth?",890.0,"Organization | Number of trees planted
Let it Grow | 410
Heal the Earth | 480
Dreaming Green | 296
Acorns to Oaks | 179
Make it Green | 391",3,6300,"import pandas as pd

def calculate_total_trees_planted(df, organizations):
    """"""
    This function takes in a pandas DataFrame representing a table of organizations and the number of trees they planted, and a list of organizations, and returns the total number of trees planted by the organizations in the list.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing organizations and the number of trees they planted with columns 'Organization' and 'Number of trees planted'.
    organizations (list): A list of organization names.
    Returns:
    int: The total number of trees planted by the organizations in the list.
    """"""
    # Initialize the total number of trees
    total_trees = 0
    
    # Iterate through the organizations and calculate the total number of trees planted
    for organization in organizations:
        # Filter the DataFrame for the specific organization
        organization_df = df[df['Organization'] == organization]
        if not organization_df.empty:
            number_of_trees = organization_df['Number of trees planted'].values[0]
            total_trees += number_of_trees
    
    return total_trees","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Organization': ['Let it Grow', 'Heal the Earth', 'Dreaming Green', 'Acorns to Oaks', 'Make it Green'],
    'Number of trees planted': [410, 480, 296, 179, 391]
})

# Define the organizations
organizations = ['Let it Grow', 'Heal the Earth']

# Call the tool to solve the problem
total_trees = calculate_total_trees_planted(df, organizations)

# Print the result
print(total_trees)
```","def calculate_total_items_for_organizations(df, organization_col, item_count_col, organization_list):
    """"""
    This function takes in a pandas DataFrame representing a table of organizations and their item counts, and a list of organizations, and returns the total number of items for the organizations in the list.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing organizations and their item counts.
    organization_col (str): The column name for the organizations.
    item_count_col (str): The column name for the item counts.
    organization_list (list): A list of organization names.
    
    Returns:
    int: The total number of items for the organizations in the list.
    """"""
    # Initialize the total number of items
    total_items = 0
    
    # Iterate through the organizations and calculate the total number of items
    for organization in organization_list:
        # Filter the DataFrame for the specific organization
        organization_df = df[df[organization_col] == organization]
        if not organization_df.empty:
            number_of_items = organization_df[item_count_col].values[0]
            total_items += number_of_items
    
    return total_items","df = pd.DataFrame({
    'Organization': ['Let it Grow', 'Heal the Earth', 'Dreaming Green', 'Acorns to Oaks', 'Make it Green'],
    'Number of trees planted': [410, 480, 296, 179, 391]
})

organization_list = ['Let it Grow', 'Heal the Earth']
print(calculate_total_items_for_organizations(df, 'Organization', 'Number of trees planted', organization_list))"
Each necklace has 2 rubies. How many rubies are on 3 necklaces?,6.0,"Number of necklaces | Number of rubies
1 | 2
2 | 4
3 | ?",2,13731,"def calculate_rubies(necklaces):
    """"""
    This function takes in the number of necklaces and returns the number of rubies on them.
    Args:
    necklaces (int): The number of necklaces.
    Returns:
    int: The number of rubies on the necklaces.
    """"""
    # Each necklace has 2 rubies
    rubies_per_necklace = 2
    # Calculate the total number of rubies
    total_rubies = necklaces * rubies_per_necklace
    return total_rubies","```python
# Call the tool to solve the problem
calculate_rubies(3)
```","def calculate_total_items(num_groups, items_per_group):
    """"""
    This function takes in the number of groups and a fixed ratio of items per group, and returns the total number of items.
    
    Args:
    num_groups (int): The number of groups.
    items_per_group (int): The fixed ratio of items per group.
    
    Returns:
    int: The total number of items.
    """"""
    # Calculate the total number of items
    total_items = num_groups * items_per_group
    
    return total_items","print(calculate_total_items(num_groups=3, items_per_group=2))"
Nina kept track of the number of characters in each book she read. How many books had at least 30 characters but fewer than 50 characters?,10.0,"Stem | Leaf 
1 | 0, 6, 7, 8
2 | 1, 2, 7, 9
3 | 6, 7, 8, 8, 9
4 | 5, 5, 5, 6, 9
5 | 0, 1, 5, 7, 7",8,11197,"import pandas as pd
def count_books_with_30_to_50_characters(df):
    """"""
    This function takes in a pandas dataframe of books and their character counts, and returns the number of books that have at least 30 characters but fewer than 50 characters.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of characters per book.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of books that have at least 30 characters but fewer than 50 characters.
    """"""
    # prepare a list to calculate characters in each book
    characters = []
    # calculate the total number of characters in each book
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            characters.append(stem * 10 + leaf[j])
    # filter the books where the total number of characters is greater than or equal to 30 and less than 50
    filtered = [character for character in characters if character >= 30 and character < 50]
    # count the number of rows
    num_books = len(filtered)
    return num_books","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [1, 2, 3, 4, 5],
    'Leaf': [[0, 6, 7, 8], [1, 2, 7, 9], [6, 7, 8, 8, 9], [5, 5, 5, 6, 9], [0, 1, 5, 7, 7]]
})
# Call the tool to solve the problem
count_books_with_30_to_50_characters(df)
```","def count_groups_within_thresholds_in_stem_leaf(data_frame, stem_col, leaf_col, lower_threshold, upper_threshold):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of groups and lower and upper threshold values, and returns the number of groups that have values greater than or equal to the lower threshold and less than the upper threshold.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    lower_threshold (int): The lower threshold value for filtering items.
    upper_threshold (int): The upper threshold value for filtering items.
    
    Returns:
    int: The number of items with values within the thresholds.
    """"""
    # Initialize the list to calculate items in each group
    items = []
    
    # Calculate the total value of items in each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Filter the items where the total value is within the thresholds
    filtered = [item for item in items if item >= lower_threshold and item < upper_threshold]
    
    # Count the number of items
    num_items = len(filtered)
    
    return num_items","data = {
    ""Stem"": [1, 2, 3, 4, 5],
    ""Leaf"": [[0, 6, 7, 8], [1, 2, 7, 9], [6, 7, 8, 8, 9], [5, 5, 5, 6, 9], [0, 1, 5, 7, 7]]
}

df = pd.DataFrame(data)
print(count_groups_within_thresholds_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf"", lower_threshold=30, upper_threshold=50))"
Professor Marshall informed his students of their scores on the midterm exam. How many students scored at least 40 points but fewer than 90 points?,9.0,"Stem | Leaf 
1 | 1, 7, 7, 7
2 | 3, 4, 6, 7, 9
3 | 1, 2, 3, 6
4 | 1, 8
5 | 4, 8
6 | 0, 7, 7
7 | 
8 | 8, 8
9 | 0",8,7223,"import pandas as pd

def count_students_in_range(df, min_score, max_score):
    """"""
    This function takes in a pandas dataframe of student scores, a minimum score, and a maximum score, and returns the number of students who scored within the specified range.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing student scores in stem and leaf format.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    min_score (int): The minimum score (inclusive) for the range.
    max_score (int): The maximum score (exclusive) for the range.
    Returns:
    int: The number of students who scored within the specified range.
    """"""
    # prepare a list to store scores
    scores = []
    # calculate the score for each student
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            scores.append(stem * 10 + leaf[j])
    # filter the scores within the specified range
    filtered = [score for score in scores if min_score <= score < max_score]
    # count the number of students
    num_students = len(filtered)
    return num_students","We should first create a pandas dataframe with the data from the table. Note that some elements are empty, so we need to fill them with empty lists. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],
    'Leaf': [[1, 7, 7, 7], [3, 4, 6, 7, 9], [1, 2, 3, 6], [1, 8], [4, 8], [0, 7, 7], [], [8, 8], [0]]
})
# Call the tool to solve the problem
count_students_in_range(df, 40, 90)
```","def count_items_in_range_from_stem_leaf(data_frame, stem_col, leaf_col, min_value, max_value):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of items and a range of values, and returns the number of items that have values within the specified range.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    min_value (int): The minimum value (inclusive) for the range.
    max_value (int): The maximum value (exclusive) for the range.
    
    Returns:
    int: The number of items with values within the specified range.
    """"""
    # Initialize the list to calculate items in each group
    items = []
    
    # Calculate the total value of items in each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Filter the items where the total value is within the specified range
    filtered = [item for item in items if min_value <= item < max_value]
    
    # Count the number of items
    num_items = len(filtered)
    
    return num_items","data = {
    ""Stem"": [1, 2, 3, 4, 5, 6, 7, 8, 9],
    ""Leaf"": [[1, 7, 7, 7], [3, 4, 6, 7, 9], [1, 2, 3, 6], [1, 8], [4, 8], [0, 7, 7], [], [8, 8], [0]]
}

df = pd.DataFrame(data)
print(count_items_in_range_from_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf"", min_value=40, max_value=90))"
"As part of a stuffed animal drive for the local children's hospital, the students at Wells Elementary School record how many stuffed animals they have collected. How many students have fewer than 2 stuffed animals?",12.0,"Number of stuffed animals | Frequency
0 | 7
1 | 5
2 | 4
3 | 11
4 | 10
5 | 0",7,5705,"import pandas as pd

def count_students_with_fewer_than_2_stuffed_animals(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of the number of stuffed animals collected by students, and returns the number of students who have collected fewer than 2 stuffed animals.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of stuffed animals and their frequencies with columns 'Number of stuffed animals' and 'Frequency'.
    Returns:
    int: The number of students who have collected fewer than 2 stuffed animals.
    """"""
    # Filter the DataFrame for the rows where the number of stuffed animals is less than 2
    filtered_df = df[df['Number of stuffed animals'] < 2]
    
    # Sum the frequencies of these rows to get the total number of students
    num_students = filtered_df['Frequency'].sum()
    
    return num_students","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of stuffed animals': [0, 1, 2, 3, 4, 5],
    'Frequency': [7, 5, 4, 11, 10, 0]
})
# Call the tool to solve the problem
count_students_with_fewer_than_2_stuffed_animals(df)
```","def count_occurrences_below_threshold_in_frequency_table(data_frame, item_col, frequency_col, item_threshold):
    """"""
    This function takes in a pandas DataFrame representing a frequency table and a threshold value, and returns the total number of occurrences where the item count is less than the threshold.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the frequency table with columns specified by item_col and frequency_col.
    item_col (str): The column name for the item counts.
    frequency_col (str): The column name for the frequencies.
    item_threshold (int): The threshold value for filtering item counts.
    
    Returns:
    int: The total number of occurrences where the item count is less than the threshold.
    """"""
    # Filter the DataFrame for the rows where the item count is less than the threshold
    filtered_df = data_frame[data_frame[item_col] < item_threshold]
    
    # Sum the frequencies of these rows to get the total number of occurrences
    num_occurrences = filtered_df[frequency_col].sum()
    
    return num_occurrences","df = pd.DataFrame({
    'Number of stuffed animals': [0, 1, 2, 3, 4, 5],
    'Frequency': [7, 5, 4, 11, 10, 0]
})
print(count_occurrences_below_threshold_in_frequency_table(data_frame=df, item_col='Number of stuffed animals', frequency_col='Frequency', item_threshold=2))"
"Nolan is selling candy bars to raise money for his baseball team. The frequency chart shows the types of candy bars he has already sold. Nolan sold half of the chocolate raspberry bars and all of the white chocolate bars to his history teacher, Ms. Gomez. How many candy bars did she buy?",19.0,"Type | Frequency
dark chocolate | 25
chocolate raspberry | 22
chocolate caramel | 15
white chocolate | 8",5,13492,"import pandas as pd

def calculate_candy_bars_sold(df, sold_dict):
    """"""
    This function takes in a pandas DataFrame representing a frequency chart of candy bars and a dictionary of sold candy bars, and returns the total number of candy bars sold.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing types of candy bars and their frequencies with columns 'Type' and 'Frequency'.
    sold_dict (dict): A dictionary where the keys are candy bar types and the values are the proportion of each type sold.
    Returns:
    int: The total number of candy bars sold.
    """"""
    # Initialize the total number of candy bars sold
    total_sold = 0
    
    # Iterate through the candy bar types and calculate the number sold for each type
    for type, proportion in sold_dict.items():
        # Filter the DataFrame for the specific type
        type_df = df[df['Type'] == type]
        if not type_df.empty:
            type_frequency = type_df['Frequency'].values[0]
            total_sold += proportion * type_frequency
    
    return total_sold","We should first create a pandas dataframe with the data from the table. Then we create a dictionary with the proportion of each type of candy bars sold to Ms. Gomez. Finally, we call the tool to solve the problem and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Type': ['dark chocolate', 'chocolate raspberry', 'chocolate caramel', 'white chocolate'],
    'Frequency': [25, 22, 15, 8]
})

# Create a dictionary with the proportion of each type of candy bars sold to Ms. Gomez
sold_dict = {'chocolate raspberry': 0.5, 'white chocolate': 1}

# Call the tool to solve the problem
candy_bars_sold = calculate_candy_bars_sold(df, sold_dict)
print(candy_bars_sold)
```","def calculate_total_items_sold_from_frequency_and_proportions(frequency_df, item_col, frequency_col, sold_proportions):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of items and a dictionary of proportions of each item sold, and returns the total number of items sold.
    
    Args:
    frequency_df (pd.DataFrame): A pandas DataFrame containing item types and their frequencies.
    item_col (str): The column name for the item types.
    frequency_col (str): The column name for the item frequencies.
    sold_proportions (dict): A dictionary where the keys are item types and the values are the proportions of each type sold.
    
    Returns:
    int: The total number of items sold.
    """"""
    # Initialize the total number of items sold
    total_sold = 0
    
    # Iterate through the item types and calculate the number sold for each type
    for item_type, proportion in sold_proportions.items():
        # Filter the DataFrame for the specific item type
        item_df = frequency_df[frequency_df[item_col] == item_type]
        if not item_df.empty:
            item_frequency = item_df[frequency_col].values[0]
            total_sold += proportion * item_frequency
    
    return total_sold","frequency_data = {
    'Type': ['dark chocolate', 'chocolate raspberry', 'chocolate caramel', 'white chocolate'],
    'Frequency': [25, 22, 15, 8]
}

frequency_df = pd.DataFrame(frequency_data)

sold_proportions = {'chocolate raspberry': 0.5, 'white chocolate': 1}
print(calculate_total_items_sold_from_frequency_and_proportions(frequency_df, ""Type"", ""Frequency"", sold_proportions))"
Jack counted the number of cookies eaten by each customer at last week's bake sale. How many customers ate at least 2 cookies last week?,35.0,"Cookies eaten | Frequency
1 | 14
2 | 8
3 | 10
4 | 11
5 | 6",7,7396,"import pandas as pd

def count_customers(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of cookies eaten by customers, and returns the number of customers who ate at least 2 cookies.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of cookies eaten and the frequency with columns 'Cookies eaten' and 'Frequency'.
    Returns:
    int: The number of customers who ate at least 2 cookies.
    """"""
    # Filter the DataFrame for the customers who ate at least 2 cookies
    filtered_df = df[df['Cookies eaten'] >= 2]
    
    # Sum the frequency column to get the total number of customers
    total_customers = filtered_df['Frequency'].sum()
    
    return total_customers","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Cookies eaten': [1, 2, 3, 4, 5],
    'Frequency': [14, 8, 10, 11, 6]
})

# Call the tool to solve the problem
count_customers(df)
```","def count_entities_above_threshold_in_frequency_table(data_frame, entity_col, frequency_col, threshold):
    """"""
    This function takes in a pandas DataFrame representing a frequency table and a threshold value, and returns the number of entities that have values greater than or equal to the threshold.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the frequency table with columns specified by entity_col and frequency_col.
    entity_col (str): The column name for the entity values.
    frequency_col (str): The column name for the frequency values.
    threshold (int): The threshold value for filtering entities.
    
    Returns:
    int: The number of entities with values greater than or equal to the threshold.
    """"""
    # Filter the DataFrame for the entities that meet or exceed the threshold
    filtered_df = data_frame[data_frame[entity_col] >= threshold]
    
    # Sum the frequency column to get the total number of entities
    total_entities = filtered_df[frequency_col].sum()
    
    return total_entities","df = pd.DataFrame({
    'Cookies eaten': [1, 2, 3, 4, 5],
    'Frequency': [14, 8, 10, 11, 6]
})

print(count_entities_above_threshold_in_frequency_table(data_frame=df, entity_col='Cookies eaten', frequency_col='Frequency', threshold=2))"
The parents running this year's craft sale counted the number of key chains made by volunteers. How many people made fewer than 3 key chains?,26.0,"Key chains made | Frequency
1 | 7
2 | 19
3 | 16
4 | 18
5 | 2
6 | 9",7,331,"import pandas as pd

def count_people_made_fewer_than_3_key_chains(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of key chains made by volunteers, and returns the number of people who made fewer than 3 key chains.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of key chains made and their frequencies with columns 'Key chains made' and 'Frequency'.
    Returns:
    int: The number of people who made fewer than 3 key chains.
    """"""
    # Filter the DataFrame for the rows where the number of key chains made is less than 3
    filtered_df = df[df['Key chains made'] < 3]
    
    # Sum the frequencies of these rows to get the total number of people who made fewer than 3 key chains
    num_people = filtered_df['Frequency'].sum()
    
    return num_people","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Key chains made': [1, 2, 3, 4, 5, 6],
    'Frequency': [7, 19, 16, 18, 2, 9]
})
# Call the tool to solve the problem
count_people_made_fewer_than_3_key_chains(df)
```","def count_frequency_below_threshold(data_frame, item_col, frequency_col, item_threshold):
    """"""
    This function takes in a pandas DataFrame representing a frequency table and a threshold value, and returns the total frequency of items with values less than the threshold.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the frequency table with columns specified by item_col and frequency_col.
    item_col (str): The column name for the item values.
    frequency_col (str): The column name for the frequencies.
    item_threshold (int): The threshold value for filtering items.
    
    Returns:
    int: The total frequency of items with values less than the threshold.
    """"""
    # Filter the DataFrame for the rows where the item value is less than the threshold
    filtered_df = data_frame[data_frame[item_col] < item_threshold]
    
    # Sum the frequencies of these rows to get the total frequency
    total_frequency = filtered_df[frequency_col].sum()
    
    return total_frequency","df = pd.DataFrame({
    'Key chains made': [1, 2, 3, 4, 5, 6],
    'Frequency': [7, 19, 16, 18, 2, 9]
})
print(count_frequency_below_threshold(data_frame=df, item_col='Key chains made', frequency_col='Frequency', item_threshold=3))"
A business magazine surveyed its readers about their commute times. How many commutes are exactly 50 minutes?,1.0,"Stem | Leaf 
1 | 5, 9
2 | 
3 | 2
4 | 
5 | 0
6 | 0, 4, 7, 8
7 | 
8 | 
9 | 0",4,2494,"import pandas as pd
def count_commutes_of_50_minutes(df):
    """"""
    This function takes in a pandas dataframe of commute times, and returns the number of commutes that are exactly 50 minutes.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the commute times.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of commutes that are exactly 50 minutes.
    """"""
    # prepare a list to calculate commute times
    commute_times = []
    # calculate the total commute time in each row
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            commute_times.append(stem * 10 + leaf[j])
    # filter the commutes where the total commute time is exactly 50 minutes
    filtered = [time for time in commute_times if time == 50]
    # count the number of rows
    num_commutes = len(filtered)
    return num_commutes","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],
    'Leaf': [[5, 9], [], [2], [], [0], [0, 4, 7, 8], [], [], [0]]
})
# Call the tool to solve the problem
count_commutes_of_50_minutes(df)
```","def count_items_with_specific_value_in_stem_leaf(data_frame, stem_col, leaf_col, specific_value):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of items and a specific value, and returns the number of items that have values equal to the specific value.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    specific_value (int): The specific value for filtering items.
    
    Returns:
    int: The number of items with values equal to the specific value.
    """"""
    # Initialize the list to calculate items in each group
    items = []
    
    # Calculate the total value of items in each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Filter the items where the total value is equal to the specific value
    filtered = [item for item in items if item == specific_value]
    
    # Count the number of items
    num_items = len(filtered)
    
    return num_items","data = {
    ""Stem"": [1, 2, 3, 4, 5, 6, 7, 8, 9],
    ""Leaf"": [[5, 9], [], [2], [], [0], [0, 4, 7, 8], [], [], [0]]
}

df = pd.DataFrame(data)
print(count_items_with_specific_value_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf"", specific_value=50))"
Each branch has 10 apples. How many apples are on 3 branches?,30.0,"Number of branches | Number of apples
1 | 10
2 | 20
3 | ?",1,5198,"def calculate_apples_on_branches(df, target_branches):
    """"""
    This function takes in a pandas DataFrame representing a table of branches and apples, and calculates the number of apples on the target number of branches.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of branches and the corresponding number of apples with columns 'Number of branches' and 'Number of apples'.
    target_branches (int): The target number of branches to calculate the number of apples for.
    Returns:
    int: The number of apples on the target number of branches.
    """"""
    # Calculate the number of apples per branch
    apples_per_branch = df['Number of apples'][0] / df['Number of branches'][0]
    
    # Calculate the number of apples on the target number of branches
    apples_on_target_branches = target_branches * apples_per_branch
    
    return int(apples_on_target_branches)","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of branches': [1, 2],
    'Number of apples': [10, 20]
})

# Call the tool to solve the problem
apples_on_3_branches = calculate_apples_on_branches(df, 3)
print(apples_on_3_branches)
```","def calculate_items_on_target_groups(data_frame, group_col, item_col, target_groups):
    """"""
    This function takes in a pandas DataFrame representing a table of groups and items, and calculates the number of items on the target number of groups.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the number of groups and the corresponding number of items with columns specified by group_col and item_col.
    group_col (str): The column name for the group values.
    item_col (str): The column name for the item values.
    target_groups (int): The target number of groups to calculate the number of items for.
    
    Returns:
    int: The number of items on the target number of groups.
    """"""
    # Calculate the number of items per group
    items_per_group = data_frame[item_col][0] / data_frame[group_col][0]
    
    # Calculate the number of items on the target number of groups
    items_on_target_groups = target_groups * items_per_group
    
    return int(items_on_target_groups)","data = {
    'Number of branches': [1, 2],
    'Number of apples': [10, 20]
}

df = pd.DataFrame(data)
print(calculate_items_on_target_groups(data_frame=df, group_col=""Number of branches"", item_col=""Number of apples"", target_groups=3))"
Each bin has 2 blue blocks. How many blue blocks are in 3 bins?,6.0,"Number of bins | Number of blue blocks
1 | 2
2 | 4
3 | ?",2,14292,"def calculate_blue_blocks(df, num_bins):
    """"""
    This function takes in a pandas DataFrame representing a table of the number of bins and the corresponding number of blue blocks, and a number of bins, and returns the number of blue blocks in the given number of bins.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of bins and the corresponding number of blue blocks with columns 'Number of bins' and 'Number of blue blocks'.
    num_bins (int): The number of bins.
    Returns:
    int: The number of blue blocks in the given number of bins.
    """"""
    # Calculate the number of blue blocks per bin
    blocks_per_bin = df['Number of blue blocks'][0] / df['Number of bins'][0]
    
    # Calculate the number of blue blocks in the given number of bins
    num_blocks = blocks_per_bin * num_bins
    
    return int(num_blocks)","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of bins': [1, 2],
    'Number of blue blocks': [2, 4]
})

# Call the tool to solve the problem
num_blocks = calculate_blue_blocks(df, 3)
print(num_blocks)
```","def calculate_total_items_from_group_counts(data_frame, group_col, item_col, num_groups):
    """"""
    This function takes in a pandas DataFrame representing a table of item counts per group, a column name for the groups, a column name for the items, and a number of groups, and returns the total number of items in the given number of groups.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the number of groups and the corresponding number of items.
    group_col (str): The column name for the groups.
    item_col (str): The column name for the items.
    num_groups (int): The number of groups.
    
    Returns:
    int: The total number of items in the given number of groups.
    """"""
    # Calculate the number of items per group
    items_per_group = data_frame[item_col][0] / data_frame[group_col][0]
    
    # Calculate the number of items in the given number of groups
    num_items = items_per_group * num_groups
    
    return int(num_items)","data_frame = pd.DataFrame({
    'Number of bins': [1, 2],
    'Number of blue blocks': [2, 4]
})

print(calculate_total_items_from_group_counts(data_frame, 'Number of bins', 'Number of blue blocks', 3))"
"While hanging Christmas lights for neighbors, Darnell counted the number of broken lights on each string. What is the smallest number of broken lights?",10.0,"Stem | Leaf 
1 | 0, 0, 3, 6
2 | 2, 7, 8, 8
3 | 0, 9, 9
4 | 5, 7, 9
5 | 0, 1, 5, 7, 9
6 | 0, 4, 9
7 | 
8 | 8, 8
9 | 0",8,15069,"import pandas as pd

def find_smallest_number(df):
    """"""
    This function takes in a pandas dataframe of broken lights per string, and returns the smallest number of broken lights.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken lights per string.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The smallest number of broken lights.
    """"""
    # prepare a list to calculate broken lights in each string
    broken_lights = []
    # calculate the total number of broken lights in each string
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            broken_lights.append(stem * 10 + leaf[j])
    # find the smallest number of broken lights
    smallest_number = min(broken_lights)
    return smallest_number","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],
    'Leaf': [[0, 0, 3, 6], [2, 7, 8, 8], [0, 9, 9], [5, 7, 9], [0, 1, 5, 7, 9], [0, 4, 9], [], [8, 8], [0]]
})
# Call the tool to solve the problem
find_smallest_number(df)
```","def find_smallest_number_in_stem_leaf(data_frame, stem_col, leaf_col):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of items and returns the smallest number in the plot.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    
    Returns:
    int: The smallest number in the stem-and-leaf plot.
    """"""
    # Initialize the list to calculate items in each group
    items = []
    
    # Calculate the total value of items in each group
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Find the smallest number in the items
    smallest_number = min(items)
    
    return smallest_number","data = {
    ""Stem"": [1, 2, 3, 4, 5, 6, 7, 8, 9],
    ""Leaf"": [[0, 0, 3, 6], [2, 7, 8, 8], [0, 9, 9], [5, 7, 9], [0, 1, 5, 7, 9], [0, 4, 9], [], [8, 8], [0]]
}

df = pd.DataFrame(data)
print(find_smallest_number_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf""))"
A stock broker followed the stock prices of a certain set of companies. How much did Watson and Partners's stock cost on Thursday?,4.0,"Company | Wednesday | Thursday
Watson and Partners | $1 | $4
Thompson Corporation | $12 | $3
Computer Data Company | $15 | $20",5,6861,"import pandas as pd

def get_stock_price(df, company, day):
    """"""
    This function takes in a pandas DataFrame representing a stock price table, a company name, and a day, and returns the stock price of the company on the given day.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing stock prices with columns 'Company', 'Wednesday', 'Thursday', etc.
    company (str): The name of the company.
    day (str): The day of the week.
    Returns:
    float: The stock price of the company on the given day.
    """"""
    # Filter the DataFrame for the specific company
    company_df = df[df['Company'] == company]
    if not company_df.empty:
        # Get the stock price on the given day
        stock_price = company_df[day].values[0]
        return stock_price
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Company': ['Watson and Partners', 'Thompson Corporation', 'Computer Data Company'],
    'Wednesday': [1, 12, 15],
    'Thursday': [4, 3, 20]
})
# Call the tool to solve the problem
print(get_stock_price(df, 'Watson and Partners', 'Thursday'))
```","def get_cell_value_by_row_and_column_criteria(data_frame, row_col, col_name, row_value, col_value):
    """"""
    This function takes in a pandas DataFrame, row and column criteria, and returns the value of the cell that matches the criteria.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing data with columns specified by row_col and col_name.
    row_col (str): The column name for the row criteria.
    col_name (str): The column name for the column criteria.
    row_value (str): The value of the row criteria.
    col_value (str): The value of the column criteria.
    
    Returns:
    float: The value of the cell that matches the row and column criteria.
    """"""
    # Filter the DataFrame for the specific row criteria
    row_filtered_df = data_frame[data_frame[row_col] == row_value]
    if not row_filtered_df.empty:
        # Get the cell value based on the column criteria
        cell_value = row_filtered_df[col_value].values[0]
        return cell_value
    else:
        return None","data = {
    'Company': ['Watson and Partners', 'Thompson Corporation', 'Computer Data Company'],
    'Wednesday': [1, 12, 15],
    'Thursday': [4, 3, 20]
}

df = pd.DataFrame(data)
print(get_cell_value_by_row_and_column_criteria(data_frame=df, row_col=""Company"", col_name=""Thursday"", row_value=""Watson and Partners"", col_value=""Thursday""))"
"While planning a class party, the students voted for their favorite cookies. How many more girls voted for chocolate chip than sugar?",8.0,"Cookie | Boys | Girls
Chocolate chip | 7 | 10
Cinnamon | 12 | 20
Sugar | 13 | 2
Oatmeal | 12 | 18
Lemon | 20 | 12",4,10395,"import pandas as pd

def calculate_cookie_difference(df, cookie1, cookie2, gender):
    """"""
    This function takes in a pandas DataFrame representing a cookie voting table, and calculates the difference in votes between two cookies for a specific gender.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing cookie voting data with columns 'Cookie', 'Boys', and 'Girls'.
    cookie1 (str): The name of the first cookie.
    cookie2 (str): The name of the second cookie.
    gender (str): The gender for which the difference in votes should be calculated ('Boys' or 'Girls').
    Returns:
    int: The difference in votes between the two cookies for the specified gender.
    """"""
    # Filter the DataFrame for the specific cookies
    cookie1_df = df[df['Cookie'] == cookie1]
    cookie2_df = df[df['Cookie'] == cookie2]
    
    # Get the number of votes for each cookie for the specified gender
    cookie1_votes = cookie1_df[gender].values[0]
    cookie2_votes = cookie2_df[gender].values[0]
    
    # Calculate the difference in votes
    vote_difference = abs(cookie1_votes - cookie2_votes)
    
    return vote_difference","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Cookie': ['Chocolate chip', 'Cinnamon', 'Sugar', 'Oatmeal', 'Lemon'],
    'Boys': [7, 12, 13, 12, 20],
    'Girls': [10, 20, 2, 18, 12]
})

# Call the tool to solve the problem
difference = calculate_cookie_difference(df, 'Chocolate chip', 'Sugar', 'Girls')
print(difference)
```","def calculate_vote_difference_between_two_items_for_group(votes_df, item_col, group_col, item1, item2):
    """"""
    This function takes in a pandas DataFrame representing a voting table, and calculates the difference in votes between two items for a specific group.
    
    Args:
    votes_df (pd.DataFrame): A pandas DataFrame containing voting data with columns specified by item_col and group_col.
    item_col (str): The column name for the item names.
    group_col (str): The column name for the group names.
    item1 (str): The name of the first item.
    item2 (str): The name of the second item.
    
    Returns:
    int: The difference in votes between the two items for the specified group.
    """"""
    # Filter the DataFrame for the specific items
    item1_df = votes_df[votes_df[item_col] == item1]
    item2_df = votes_df[votes_df[item_col] == item2]
    
    # Get the number of votes for each item for the specified group
    item1_votes = item1_df[group_col].values[0]
    item2_votes = item2_df[group_col].values[0]
    
    # Calculate the difference in votes
    vote_difference = abs(item1_votes - item2_votes)
    
    return vote_difference","votes_data = {
    'Cookie': ['Chocolate chip', 'Cinnamon', 'Sugar', 'Oatmeal', 'Lemon'],
    'Boys': [7, 12, 13, 12, 20],
    'Girls': [10, 20, 2, 18, 12]
}

votes_df = pd.DataFrame(votes_data)

print(calculate_vote_difference_between_two_items_for_group(votes_df, ""Cookie"", ""Girls"", ""Chocolate chip"", ""Sugar""))"
"On the first day of music class, students submitted a survey. One survey question asked students to report which music genre they prefer. Another question asked students how frequently they sing in the shower. What is the probability that a randomly selected student sings in the shower 1-2 times a week and prefers rock? Simplify any fractions.",0.125," | Country | Rock
0 times a week | 2 | 6
1-2 times a week | 6 | 2",8,11002,"import pandas as pd

def calculate_probability(df, shower_frequency, music_genre):
    """"""
    This function takes in a pandas DataFrame representing a survey table, a shower frequency, and a music genre, and returns the probability that a randomly selected student sings in the shower with the given frequency and prefers the given music genre.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing survey results with columns 'Shower Frequency', 'Country', 'Rock'.
    shower_frequency (str): A string representing the shower frequency.
    music_genre (str): A string representing the music genre.
    Returns:
    float: The probability that a randomly selected student sings in the shower with the given frequency and prefers the given music genre.
    """"""
    # Calculate the total number of students
    total_students = df['Country'].sum() + df['Rock'].sum()
    
    # Filter the DataFrame for the specific shower frequency
    frequency_df = df[df['Shower Frequency'] == shower_frequency]
    
    # Get the number of students who sing in the shower with the given frequency and prefer the given music genre
    genre_students = frequency_df[music_genre].values[0]
    
    # Calculate the probability
    probability = genre_students / total_students
    
    return probability","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Shower Frequency': ['0 times a week', '1-2 times a week'],
    'Country': [2, 6],
    'Rock': [6, 2]
})

# Call the tool to solve the problem
probability = calculate_probability(df, '1-2 times a week', 'Rock')
print(probability)
```","def calculate_probability_of_event(frequency_df, frequency_col, event_cols, event_frequency, event_name):
    """"""
    This function takes in a pandas DataFrame representing a frequency table, a frequency column, event columns, an event frequency, and an event name, and returns the probability of the event.
    
    Args:
    frequency_df (pd.DataFrame): A pandas DataFrame containing frequencies with columns specified by frequency_col and event_cols.
    frequency_col (str): The column name for the frequencies.
    event_cols (list): A list of column names for the events.
    event_frequency (str): The frequency of the event.
    event_name (str): The name of the event.
    
    Returns:
    float: The probability of the event.
    """"""
    # Calculate the total number of events
    total_events = sum([frequency_df[event_col].sum() for event_col in event_cols])
    
    # Filter the DataFrame for the specific event frequency
    event_frequency_df = frequency_df[frequency_df[frequency_col] == event_frequency]
    
    # Get the number of events with the given frequency and name
    event_count = event_frequency_df[event_name].values[0]
    
    # Calculate the probability
    probability = event_count / total_events
    
    return probability","frequency_data = {
    'Shower Frequency': ['0 times a week', '1-2 times a week'],
    'Country': [2, 6],
    'Rock': [6, 2]
}

frequency_df = pd.DataFrame(frequency_data)

print(calculate_probability_of_event(frequency_df, 'Shower Frequency', ['Country', 'Rock'], '1-2 times a week', 'Rock'))"
"Mrs. Williamson told students how many rounds to expect in the spelling bee based on previous years. According to the table, what was the rate of change between 2018 and 2019?",3.0,"Year | Rounds
2015 | 9
2016 | 14
2017 | 6
2018 | 12
2019 | 15",7,12450,"import pandas as pd

def calculate_rate_of_change(df, year1, year2):
    """"""
    This function takes in a pandas DataFrame representing a table of years and rounds, and calculates the rate of change between two given years.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing years and rounds with columns 'Year' and 'Rounds'.
    year1 (int): The first year to compare.
    year2 (int): The second year to compare.
    Returns:
    float: The rate of change between the two years.
    """"""
    # Filter the DataFrame for the specific years
    year1_df = df[df['Year'] == year1]
    year2_df = df[df['Year'] == year2]
    
    if not year1_df.empty and not year2_df.empty:
        rounds1 = year1_df['Rounds'].values[0]
        rounds2 = year2_df['Rounds'].values[0]
        
        # Calculate the rate of change
        rate_of_change = rounds2 - rounds1
        return rate_of_change
    else:
        return None","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Year': [2015, 2016, 2017, 2018, 2019],
    'Rounds': [9, 14, 6, 12, 15]
})

# Call the tool to solve the problem
rate_of_change = calculate_rate_of_change(df, 2018, 2019)
print(rate_of_change)
```","def calculate_rate_of_change_between_two_attributes(df, attribute_col, value_col, attribute1, attribute2):
    """"""
    This function takes in a pandas DataFrame representing a table of attributes and values, and calculates the rate of change between the values of two given attributes.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing attributes and values.
    attribute_col (str): The column name for the attributes.
    value_col (str): The column name for the values.
    attribute1 (int or str): The first attribute to compare.
    attribute2 (int or str): The second attribute to compare.
    
    Returns:
    float: The rate of change between the values of the two attributes, or None if either attribute is not found in the DataFrame.
    """"""
    # Filter the DataFrame for the specific attributes
    attribute1_df = df[df[attribute_col] == attribute1]
    attribute2_df = df[df[attribute_col] == attribute2]
    
    if not attribute1_df.empty and not attribute2_df.empty:
        value1 = attribute1_df[value_col].values[0]
        value2 = attribute2_df[value_col].values[0]
        
        # Calculate the rate of change
        rate_of_change = value2 - value1
        return rate_of_change
    else:
        return None","df = pd.DataFrame({
    'Year': [2015, 2016, 2017, 2018, 2019],
    'Rounds': [9, 14, 6, 12, 15]
})

print(calculate_rate_of_change_between_two_attributes(df, 'Year', 'Rounds', 2018, 2019))"
Each plate has 10 bagels. How many bagels are on 6 plates?,60.0,"Number of plates | Number of bagels
1 | 10
2 | 20
3 | 30
4 | 40
5 | 50
6 | ?",1,14144,"def calculate_bagels(plates):
    """"""
    This function takes in the number of plates and returns the number of bagels based on the given ratio.
    Args:
    plates (int): The number of plates.
    Returns:
    int: The number of bagels.
    """"""
    # The ratio of plates to bagels is 1:10
    bagels = plates * 10
    return bagels","```python
# Call the tool to solve the problem
calculate_bagels(6)
```","def calculate_items_from_ratio(groups, ratio):
    """"""
    This function takes in the number of groups and a ratio, and returns the total number of items based on the given ratio.
    
    Args:
    groups (int): The number of groups.
    ratio (int): The ratio of items per group.
    
    Returns:
    int: The total number of items.
    """"""
    # Calculate the total number of items based on the ratio
    items = groups * ratio
    return items","print(calculate_items_from_ratio(groups=6, ratio=10))"
Trent counted the number of pieces of pepperoni on each pizza he made. What is the largest number of pieces of pepperoni?,49.0,"Stem | Leaf 
1 | 2, 4, 5, 7, 7
2 | 1, 7
3 | 3, 8
4 | 0, 2, 2, 2, 3, 3, 4, 7, 9",7,6086,"import pandas as pd

def find_max_pepperoni(df):
    """"""
    This function takes in a pandas dataframe of pepperoni per pizza, and returns the maximum number of pepperoni on a pizza.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of pepperoni per pizza.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The maximum number of pepperoni on a pizza.
    """"""
    # prepare a list to calculate pepperoni on each pizza
    pepperoni = []
    # calculate the total number of pepperoni on each pizza
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            pepperoni.append(stem * 10 + leaf[j])
    # find the maximum number of pepperoni
    max_pepperoni = max(pepperoni)
    return max_pepperoni","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [1, 2, 3, 4],
    'Leaf': [[2, 4, 5, 7, 7], [1, 7], [3, 8], [0, 2, 2, 2, 3, 3, 4, 7, 9]]
})
# Call the tool to solve the problem
print(find_max_pepperoni(df))
```","def find_max_value_in_stem_leaf(data_frame, stem_col, leaf_col):
    """"""
    This function takes in a pandas DataFrame representing a stem-and-leaf plot of items, and returns the maximum value among the items.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.
    stem_col (str): The column name for the stem values.
    leaf_col (str): The column name for the leaf values.
    
    Returns:
    int: The maximum value among the items.
    """"""
    # Initialize the list to calculate items
    items = []
    
    # Calculate the total value of items
    for i in range(len(data_frame)):
        stem = data_frame[stem_col][i]
        leaf = data_frame[leaf_col][i]
        for j in range(len(leaf)):
            items.append(stem * 10 + leaf[j])
    
    # Find the maximum value among the items
    max_value = max(items)
    
    return max_value","data = {
    ""Stem"": [1, 2, 3, 4],
    ""Leaf"": [[2, 4, 5, 7, 7], [1, 7], [3, 8], [0, 2, 2, 2, 3, 3, 4, 7, 9]]
}

df = pd.DataFrame(data)
print(find_max_value_in_stem_leaf(data_frame=df, stem_col=""Stem"", leaf_col=""Leaf""))"
A researcher working for a cereal company surveyed people about their cereal consumption habits. How many people ate cereal more than 2 times?,11.0,"Times eaten | Frequency
0 | 11
1 | 18
2 | 13
3 | 1
4 | 10",7,11267,"import pandas as pd

def count_people_eating_cereal_more_than_2_times(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of cereal consumption habits, and returns the number of people who ate cereal more than 2 times.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the times eaten and their frequencies with columns 'Times eaten' and 'Frequency'.
    Returns:
    int: The number of people who ate cereal more than 2 times.
    """"""
    # Filter the DataFrame for the times eaten more than 2
    filtered_df = df[df['Times eaten'] > 2]
    
    # Sum up the frequencies
    total_people = filtered_df['Frequency'].sum()
    
    return total_people","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Times eaten': [0, 1, 2, 3, 4],
    'Frequency': [11, 18, 13, 1, 10]
})
# Call the tool to solve the problem
count_people_eating_cereal_more_than_2_times(df)
```","def count_items_with_condition_in_frequency_table(data_frame, value_col, frequency_col, condition_func):
    """"""
    This function takes in a pandas DataFrame representing a frequency table, a value column, a frequency column, and a condition function, and returns the number of items that meet the condition based on the frequencies.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the value column and the frequency column.
    value_col (str): The column name for the values.
    frequency_col (str): The column name for the frequencies.
    condition_func (function): A function that takes a value and returns a boolean indicating whether the condition is met.
    
    Returns:
    int: The number of items that meet the condition based on the frequencies.
    """"""
    # Filter the DataFrame for the values that meet the condition
    filtered_df = data_frame[data_frame[value_col].apply(condition_func)]
    
    # Sum up the frequencies
    total_items = filtered_df[frequency_col].sum()
    
    return total_items","data = {
    'Times eaten': [0, 1, 2, 3, 4],
    'Frequency': [11, 18, 13, 1, 10]
}

df = pd.DataFrame(data)

# Define the condition function
def more_than_2_times(value):
    return value > 2

print(count_items_with_condition_in_frequency_table(data_frame=df, value_col=""Times eaten"", frequency_col=""Frequency"", condition_func=more_than_2_times))"
A game show viewer monitors how often a wheel numbered 1 through 5 stops at each number. How many people are there in all?,71.0,"Number spun | Frequency
1 | 20
2 | 13
3 | 16
4 | 10
5 | 12",8,5302,"import pandas as pd

def calculate_total_people(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency table and returns the total number of people.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number spun and its frequency with columns 'Number spun' and 'Frequency'.
    Returns:
    int: The total number of people.
    """"""
    # Sum up the frequency column to get the total number of people
    total_people = df['Frequency'].sum()
    
    return total_people","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number spun': [1, 2, 3, 4, 5],
    'Frequency': [20, 13, 16, 10, 12]
})
# Call the tool to solve the problem
total_people = calculate_total_people(df)
print(total_people)
```","def calculate_total_count_from_frequency_table(data_frame, frequency_col):
    """"""
    This function takes in a pandas DataFrame representing a frequency table and returns the total count of items based on the frequency column.
    
    Args:
    data_frame (pd.DataFrame): A pandas DataFrame containing the frequency table with a column specified by frequency_col.
    frequency_col (str): The column name for the frequency values.
    
    Returns:
    int: The total count of items.
    """"""
    # Sum up the frequency column to get the total count of items
    total_count = data_frame[frequency_col].sum()
    
    return total_count","data = {
    'Number spun': [1, 2, 3, 4, 5],
    'Frequency': [20, 13, 16, 10, 12]
}

df = pd.DataFrame(data)
print(calculate_total_count_from_frequency_table(data_frame=df, frequency_col=""Frequency""))"
Hillsdale Elementary School polled its students about their favorite vegetables in order to decide which ones to plant in the new school garden. How many students voted for broccoli?,6.0,"Vegetable | Upper elementary students | Lower elementary students
Broccoli | 1 | 5
Spinach | 17 | 2
Peas | 19 | 7",4,1562,"import pandas as pd

def count_votes_for_vegetable(df, vegetable):
    """"""
    This function takes in a pandas DataFrame representing a poll table and a string of vegetable name, and returns the total votes for the vegetable.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing vegetables and votes from upper and lower elementary students with columns 'Vegetable', 'Upper elementary students', and 'Lower elementary students'.
    vegetable (str): A string of the vegetable name.
    Returns:
    int: The total votes for the vegetable.
    """"""
    # Filter the DataFrame for the specific vegetable
    vegetable_df = df[df['Vegetable'] == vegetable]
    if not vegetable_df.empty:
        # Sum the votes from upper and lower elementary students
        total_votes = vegetable_df['Upper elementary students'].values[0] + vegetable_df['Lower elementary students'].values[0]
        return total_votes
    else:
        return 0","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Vegetable': ['Broccoli', 'Spinach', 'Peas'],
    'Upper elementary students': [1, 17, 19],
    'Lower elementary students': [5, 2, 7]
})
# Call the tool to solve the problem
votes_for_broccoli = count_votes_for_vegetable(df, 'Broccoli')
print(votes_for_broccoli)
```","def count_votes_for_item_from_groups(votes_df, item_col, group_cols, item_name):
    """"""
    This function takes in a pandas DataFrame representing a table of votes from different groups and a string of item name, and returns the total votes for the item.
    
    Args:
    votes_df (pd.DataFrame): A pandas DataFrame containing item names and votes from different groups.
    item_col (str): The column name for the item names.
    group_cols (list): A list of column names for the groups.
    item_name (str): A string of the item name.
    
    Returns:
    int: The total votes for the item.
    """"""
    # Filter the DataFrame for the specific item name
    item_votes_df = votes_df[votes_df[item_col] == item_name]
    if not item_votes_df.empty:
        # Sum the votes from all groups
        total_votes = sum(item_votes_df[group].values[0] for group in group_cols)
        return total_votes
    else:
        return 0","votes_data = {
    'Vegetable': ['Broccoli', 'Spinach', 'Peas'],
    'Upper elementary students': [1, 17, 19],
    'Lower elementary students': [5, 2, 7]
}

votes_df = pd.DataFrame(votes_data)

print(count_votes_for_item_from_groups(votes_df, ""Vegetable"", [""Upper elementary students"", ""Lower elementary students""], ""Broccoli""))"
Each laundry basket has 10 shirts. How many shirts are in 4 laundry baskets?,40.0,"Number of laundry baskets | Number of shirts
1 | 10
2 | 20
3 | 30
4 | ?",1,11697,"def calculate_shirts_in_baskets(basket_count):
    """"""
    This function takes in the number of laundry baskets and returns the number of shirts in those baskets.
    Args:
    basket_count (int): The number of laundry baskets.
    Returns:
    int: The number of shirts in the given number of laundry baskets.
    """"""
    # Each basket contains 10 shirts
    shirts_per_basket = 10
    # Calculate the total number of shirts
    total_shirts = basket_count * shirts_per_basket
    return total_shirts","We should first initialize the number of laundry baskets, then call the tool to solve the problem, and print out the answer.
```python
# Initialize the number of laundry baskets
basket_count = 4
# Call the tool to solve the problem
calculate_shirts_in_baskets(basket_count)
```","def calculate_total_items_in_groups(group_count, items_per_group):
    """"""
    This function takes in the number of groups and the number of items per group, and returns the total number of items.
    
    Args:
    group_count (int): The number of groups.
    items_per_group (int): The number of items in each group.
    
    Returns:
    int: The total number of items.
    """"""
    # Calculate the total number of items
    total_items = group_count * items_per_group
    return total_items","group_count = 4
items_per_group = 10
print(calculate_total_items_in_groups(group_count, items_per_group))"
A sports fan decided to examine the pattern of medals won by certain countries at several Olympic games. How many medals did Finland win in 2004?,2.0,"Country | 2004 | 2008
Finland | 2 | 4
Brazil | 10 | 15
Romania | 19 | 8",5,12077,"import pandas as pd

def get_medals_won(df, country, year):
    """"""
    This function takes in a pandas DataFrame representing a table of medals won by countries at several Olympic games, a country name, and a year, and returns the number of medals won by the specified country in the specified year.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing countries and the number of medals they won in different years. The DataFrame should have 'Country' as one of the columns and the rest of the columns should be years.
    country (str): The name of the country.
    year (str): The year.
    Returns:
    int: The number of medals won by the specified country in the specified year.
    """"""
    # Filter the DataFrame for the specific country
    country_df = df[df['Country'] == country]
    
    # If the country is found in the DataFrame, return the number of medals won in the specified year
    if not country_df.empty:
        return country_df[year].values[0]
    
    # If the country is not found in the DataFrame, return 0
    return 0","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Country': ['Finland', 'Brazil', 'Romania'],
    '2004': [2, 10, 19],
    '2008': [4, 15, 8]
})

# Call the tool to solve the problem
medals = get_medals_won(df, 'Finland', '2004')
print(medals)
```","def get_value_by_row_and_column_labels(df, row_label_col, row_label, col_label):
    """"""
    This function takes in a pandas DataFrame, a column name for row labels, a row label, and a column label, and returns the value in the cell specified by the row and column labels.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame.
    row_label_col (str): The column name for the row labels.
    row_label (str): The row label.
    col_label (str): The column label.
    
    Returns:
    object: The value in the cell specified by the row and column labels. If the row label is not found in the DataFrame, returns None.
    """"""
    # Filter the DataFrame for the specific row label
    row_df = df[df[row_label_col] == row_label]
    
    # If the row label is found in the DataFrame, return the value in the specified column
    if not row_df.empty:
        return row_df[col_label].values[0]
    
    # If the row label is not found in the DataFrame, return None
    return None","df = pd.DataFrame({
    'Country': ['Finland', 'Brazil', 'Romania'],
    '2004': [2, 10, 19],
    '2008': [4, 15, 8]
})

print(get_value_by_row_and_column_labels(df, 'Country', 'Finland', '2004'))"
Trisha baked cookies each day for a bake sale. How many more cookies did Trisha bake on Monday than on Tuesday?,134.0,"Day | Number of cookies
Saturday | 232
Sunday | 120
Monday | 269
Tuesday | 135",3,3241,"import pandas as pd

def calculate_cookie_difference(df, day1, day2):
    """"""
    This function takes in a pandas DataFrame representing a table of cookies baked per day and two days, and returns the difference in the number of cookies baked between the two days.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing days and the number of cookies baked with columns 'Day' and 'Number of cookies'.
    day1 (str): The first day to compare.
    day2 (str): The second day to compare.
    Returns:
    int: The difference in the number of cookies baked between the two days.
    """"""
    # Filter the DataFrame for the specific days
    day1_df = df[df['Day'] == day1]
    day2_df = df[df['Day'] == day2]
    
    # Get the number of cookies for each day
    day1_cookies = day1_df['Number of cookies'].values[0]
    day2_cookies = day2_df['Number of cookies'].values[0]
    
    # Calculate the difference in the number of cookies
    cookie_difference = day1_cookies - day2_cookies
    
    return cookie_difference","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday'],
    'Number of cookies': [232, 120, 269, 135]
})
# Call the tool to solve the problem
print(calculate_cookie_difference(df, 'Monday', 'Tuesday'))
```","def calculate_difference_between_two_categories(df, category_col, value_col, category1, category2):
    """"""
    This function takes in a pandas DataFrame representing a table of categories and values, and two categories, and returns the difference in values between the two categories.
    
    Args:
    df (pd.DataFrame): A pandas DataFrame containing categories and their values.
    category_col (str): The column name for the categories.
    value_col (str): The column name for the values.
    category1 (str): The first category to compare.
    category2 (str): The second category to compare.
    
    Returns:
    int: The difference in values between the two categories.
    """"""
    # Filter the DataFrame for the specific categories
    category1_df = df[df[category_col] == category1]
    category2_df = df[df[category_col] == category2]
    
    # Get the value for each category
    category1_value = category1_df[value_col].values[0]
    category2_value = category2_df[value_col].values[0]
    
    # Calculate the difference in values
    value_difference = category1_value - category2_value
    
    return value_difference","df = pd.DataFrame({
    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday'],
    'Number of cookies': [232, 120, 269, 135]
})
print(calculate_difference_between_two_categories(df, 'Day', 'Number of cookies', 'Monday', 'Tuesday'))"
