question,answer,table,level,tool_id,code,api_call
"While hanging Christmas lights for neighbors, Jen counted the number of broken lights on each string. How many strings had exactly 74 broken lights?",0.0,"Stem | Leaf 
5 | 1, 2, 2, 6, 7
6 | 4, 7, 7
7 | 1
8 | 4, 8",4,13872,"import pandas as pd
def count_strings_with_74_broken_lights(df):
    """"""
    This function takes in a pandas dataframe of broken lights per string, and returns the number of strings that have exactly 74 broken lights.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken lights per string.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of strings that have exactly 74 broken lights.
    """"""
    # prepare a list to calculate broken lights in each string
    broken_lights = []
    # calculate the total number of broken lights in each string
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            broken_lights.append(stem * 10 + leaf[j])
    # filter the strings where the total number of broken lights is exactly 74
    filtered = [light for light in broken_lights if light == 74]
    # count the number of rows
    num_strings = len(filtered)
    return num_strings","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [5, 6, 7, 8],
    'Leaf': [[1, 2, 2, 6, 7], [4, 7, 7], [1], [4, 8]]
})
# Call the tool to solve the problem
count_strings_with_74_broken_lights(df)
```"
"How much money does Alec need to buy a wooden block, a yellow toy car, and a plastic horse?",0.94,"plastic horse | $0.11
wooden block | $0.67
shapes stencil | $0.68
yellow toy car | $0.16",5,5930,"import pandas as pd

def calculate_total_cost(menu_df, orders):
    """"""
    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.
    Args:
    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.
    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.
    Returns:
    float: The total cost of the orders.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the menu items and calculate the cost for each ordered item
    for item, quantity in orders.items():
        # Filter the DataFrame for the specific item
        item_df = menu_df[menu_df['Item'] == item]
        if not item_df.empty:
            item_price = item_df['Price'].values[0]
            total_cost += quantity * item_price
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we create a dictionary with the items Alec wants to buy and the quantity of each item. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Item': ['plastic horse', 'wooden block', 'shapes stencil', 'yellow toy car'],
    'Price': [0.11, 0.67, 0.68, 0.16]
})

# Initialize the orders
orders = {
    'wooden block': 1,
    'yellow toy car': 1,
    'plastic horse': 1
}

# Call the tool to solve the problem
total_cost = calculate_total_cost(df, orders)
print(f'Alec needs ${total_cost} to buy a wooden block, a yellow toy car, and a plastic horse.')
```"
A game show program recorded the scores of its contestants. How many contestants scored more than 8?,21.0,"Score | Frequency
5 | 3
6 | 19
7 | 8
8 | 6
9 | 11
10 | 10",7,15416,"import pandas as pd

def count_contestants_with_score_above(df, score):
    """"""
    This function takes in a pandas DataFrame representing a score frequency table and a score, and returns the number of contestants who scored above the given score.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing scores and their frequencies with columns 'Score' and 'Frequency'.
    score (int): The score to compare against.
    Returns:
    int: The number of contestants who scored above the given score.
    """"""
    # Filter the DataFrame for scores above the given score
    filtered_df = df[df['Score'] > score]
    
    # Sum the frequencies of the filtered scores
    num_contestants = filtered_df['Frequency'].sum()
    
    return num_contestants","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Score': [5, 6, 7, 8, 9, 10],
    'Frequency': [3, 19, 8, 6, 11, 10]
})
# Call the tool to solve the problem
count_contestants_with_score_above(df, 8)
```"
Each package has 5 yellow highlighters. How many yellow highlighters are in 4 packages?,20.0,"Number of packages | Number of yellow highlighters
1 | 5
2 | 10
3 | 15
4 | ?",1,10969,"import pandas as pd

def calculate_highlighters_in_packages(df, num_packages):
    """"""
    This function takes in a pandas DataFrame representing the number of yellow highlighters in packages and the number of packages, and returns the total number of yellow highlighters in the given number of packages.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of packages and the number of yellow highlighters with columns 'Number of packages' and 'Number of yellow highlighters'.
    num_packages (int): The number of packages for which the total number of yellow highlighters is to be calculated.
    Returns:
    int: The total number of yellow highlighters in the given number of packages.
    """"""
    # Calculate the number of yellow highlighters per package
    highlighters_per_package = df['Number of yellow highlighters'][0] / df['Number of packages'][0]
    
    # Calculate the total number of yellow highlighters in the given number of packages
    total_highlighters = num_packages * highlighters_per_package
    
    return int(total_highlighters)","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of packages': [1, 2, 3, 4],
    'Number of yellow highlighters': [5, 10, 15, '?']
})

# Call the tool to solve the problem
num_highlighters = calculate_highlighters_in_packages(df, 4)
print(f'There are {num_highlighters} yellow highlighters in 4 packages.')
```"
"Jackson is a sandwich maker at a local deli. Last week, he tracked the number of peanut butter and jelly sandwiches ordered, noting the flavor of jelly and type of peanut butter requested. What is the probability that a randomly selected sandwich was made with chunky peanut butter and grape jelly? Simplify any fractions.",0.2307692308," | Strawberry jelly | Grape jelly
Creamy peanut butter | 3 | 4
Chunky peanut butter | 3 | 3",8,10601,"import pandas as pd

def calculate_probability(df):
    """"""
    This function takes in a pandas DataFrame representing a table of sandwich orders, and returns the probability that a randomly selected sandwich was made with chunky peanut butter and grape jelly.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing sandwich orders with columns 'Strawberry jelly', 'Grape jelly' and index 'Creamy peanut butter', 'Chunky peanut butter'.
    Returns:
    float: The probability that a randomly selected sandwich was made with chunky peanut butter and grape jelly.
    """"""
    # Calculate the total number of sandwiches
    total_sandwiches = df['Strawberry jelly'].sum() + df['Grape jelly'].sum()
    
    # Calculate the number of sandwiches made with chunky peanut butter and grape jelly
    chunky_grape_sandwiches = df.loc['Chunky peanut butter', 'Grape jelly']
    
    # Calculate the probability
    probability = chunky_grape_sandwiches / total_sandwiches
    
    return probability","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Strawberry jelly': [3, 3],
    'Grape jelly': [4, 3]
}, index=['Creamy peanut butter', 'Chunky peanut butter'])

# Call the tool to solve the problem
probability = calculate_probability(df)

# Print the answer
print(probability)
```"
"A dog show enthusiast recorded the weight of the winning dog at recent dog shows. According to the table, what was the rate of change between 2015 and 2016?",-1.0,"Year | Weight (kg)
2014 | 40
2015 | 46
2016 | 45
2017 | 43
2018 | 42",7,16668,"import pandas as pd

def calculate_rate_of_change(df, year1, year2):
    """"""
    This function takes in a pandas DataFrame representing a table of years and weights, and calculates the rate of change between two given years.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing years and weights with columns 'Year' and 'Weight (kg)'.
    year1 (int): The first year to calculate the rate of change.
    year2 (int): The second year to calculate the rate of change.
    Returns:
    float: The rate of change between the two years.
    """"""
    # Filter the DataFrame for the specific years
    year1_df = df[df['Year'] == year1]
    year2_df = df[df['Year'] == year2]
    
    # Check if both years are present in the DataFrame
    if not year1_df.empty and not year2_df.empty:
        weight1 = year1_df['Weight (kg)'].values[0]
        weight2 = year2_df['Weight (kg)'].values[0]
        
        # Calculate the rate of change
        rate_of_change = (weight2 - weight1) / (year2 - year1)
        return rate_of_change
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Year': [2014, 2015, 2016, 2017, 2018],
    'Weight (kg)': [40, 46, 45, 43, 42]
})

# Call the tool to solve the problem
rate_of_change = calculate_rate_of_change(df, 2015, 2016)
print(rate_of_change)
```"
A juice shop tracked how many smoothies it sold in the past 5 days. What is the median of the numbers?,63.0,"Day | Number of smoothies
Tuesday | 66
Wednesday | 59
Thursday | 63
Friday | 71
Saturday | 62",5,9679,"import pandas as pd

def calculate_median(df, column_name):
    """"""
    This function takes in a pandas DataFrame and a column name, and returns the median of the values in that column.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the data.
    column_name (str): The name of the column containing the values to calculate the median.
    Returns:
    float: The median of the values in the specified column.
    """"""
    # Sort the values in the specified column
    sorted_values = df[column_name].sort_values().reset_index(drop=True)
    
    # Calculate the median
    n = len(sorted_values)
    if n % 2 == 0:
        median = (sorted_values[n // 2 - 1] + sorted_values[n // 2]) / 2
    else:
        median = sorted_values[n // 2]
    
    return median","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    'Number of smoothies': [66, 59, 63, 71, 62]
})
# Call the tool to solve the problem
median_smoothies = calculate_median(df, 'Number of smoothies')
print(median_smoothies)
```"
"Mrs. Davis told students how many rounds to expect in the spelling bee based on previous years. According to the table, what was the rate of change between 2017 and 2018?",5.0,"Year | Rounds
2015 | 14
2016 | 12
2017 | 9
2018 | 14
2019 | 13",7,3738,"import pandas as pd

def calculate_rate_of_change(df, start_year, end_year):
    """"""
    This function takes in a pandas DataFrame representing a table of years and rounds, and two years, and returns the rate of change between the two years.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing years and rounds with columns 'Year' and 'Rounds'.
    start_year (int): The start year for the rate of change calculation.
    end_year (int): The end year for the rate of change calculation.
    Returns:
    float: The rate of change between the two years.
    """"""
    # Filter the DataFrame for the start year and end year
    start_year_df = df[df['Year'] == start_year]
    end_year_df = df[df['Year'] == end_year]
    
    # Check if the start year and end year exist in the DataFrame
    if not start_year_df.empty and not end_year_df.empty:
        # Calculate the rate of change
        rate_of_change = end_year_df['Rounds'].values[0] - start_year_df['Rounds'].values[0]
        return rate_of_change
    else:
        return None","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Year': [2015, 2016, 2017, 2018, 2019],
    'Rounds': [14, 12, 9, 14, 13]
})

# Call the tool to solve the problem
rate_of_change = calculate_rate_of_change(df, 2017, 2018)
print(rate_of_change)
```"
"A Girl Scout troop recorded how many boxes of cookies they sold each day for a week. According to the table, what was the rate of change between Wednesday and Thursday?",2.0,"Day | Boxes of cookies
Sunday | 12
Monday | 21
Tuesday | 18
Wednesday | 13
Thursday | 15",8,17196,"import pandas as pd

def calculate_rate_of_change(df, day1, day2):
    """"""
    This function takes in a pandas DataFrame representing a table of daily cookie sales, and two days, and returns the rate of change in cookie sales between the two days.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing daily cookie sales with columns 'Day' and 'Boxes of cookies'.
    day1 (str): The first day.
    day2 (str): The second day.
    Returns:
    float: The rate of change in cookie sales between the two days.
    """"""
    # Filter the DataFrame for the specific days
    day1_df = df[df['Day'] == day1]
    day2_df = df[df['Day'] == day2]
    
    # Check if the days are in the DataFrame
    if not day1_df.empty and not day2_df.empty:
        # Calculate the rate of change
        rate_of_change = (day2_df['Boxes of cookies'].values[0] - day1_df['Boxes of cookies'].values[0]) / day1_df['Boxes of cookies'].values[0]
        return rate_of_change
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],
    'Boxes of cookies': [12, 21, 18, 13, 15]
})

# Call the tool to solve the problem
rate_of_change = calculate_rate_of_change(df, 'Wednesday', 'Thursday')
print(rate_of_change)
```"
Nora buys 3/4 of a kilogram of coriander. What is the total cost?,3.0,"cumin | $3/kg
pepper | $2/kg
turmeric | $3/kg
coriander | $4/kg",6,3606,"import pandas as pd

def calculate_spice_cost(spice_df, spice, quantity):
    """"""
    This function takes in a pandas DataFrame representing a spice table, the name of a spice, and a quantity, and returns the total cost of the spice using pandas.
    Args:
    spice_df (pd.DataFrame): A pandas DataFrame containing spices and their prices with columns 'Spice' and 'Price'.
    spice (str): The name of the spice.
    quantity (float): The quantity of the spice in kilograms.
    Returns:
    float: The total cost of the spice.
    """"""
    # Filter the DataFrame for the specific spice
    spice_df = spice_df[spice_df['Spice'] == spice]
    if not spice_df.empty:
        spice_price = spice_df['Price'].values[0]
        total_cost = quantity * spice_price
    else:
        total_cost = 0.0
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
spice_df = pd.DataFrame({
    'Spice': ['cumin', 'pepper', 'turmeric', 'coriander'],
    'Price': [3, 2, 3, 4]
})

# Call the tool to solve the problem
total_cost = calculate_spice_cost(spice_df, 'coriander', 0.75)
print(total_cost)
```"
A customer at a sushi restaurant was examining the types of sushi rolls offered on the menu. Rolls vary by type of fish and level of spiciness. Rolls only contain one type of fish. What is the probability that a randomly selected sushi roll contains salmon and is labeled a little spicy? Simplify any fractions.,0.3," | Not spicy | A little spicy
Yellowtail | 2 | 3
Salmon | 2 | 3",8,5681,"import pandas as pd

def calculate_probability(df, fish_type, spiciness):
    """"""
    This function takes in a pandas DataFrame representing a sushi menu table, a fish type, and a spiciness level, and returns the probability of a randomly selected sushi roll containing the specified fish type and spiciness level.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing sushi roll types and their quantities.
    fish_type (str): The type of fish.
    spiciness (str): The level of spiciness.
    Returns:
    float: The probability of a randomly selected sushi roll containing the specified fish type and spiciness level.
    """"""
    # Calculate the total number of sushi rolls
    total_rolls = df.sum().sum()
    
    # Get the number of rolls with the specified fish type and spiciness level
    specific_rolls = df.loc[fish_type, spiciness]
    
    # Calculate and return the probability
    probability = specific_rolls / total_rolls
    return probability","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Not spicy': [2, 2],
    'A little spicy': [3, 3]
}, index=['Yellowtail', 'Salmon'])

# Call the tool to solve the problem
probability = calculate_probability(df, 'Salmon', 'A little spicy')
print(probability)
```"
"A Girl Scout troop recorded how many boxes of cookies they sold each day for a week. According to the table, what was the rate of change between Tuesday and Wednesday?",2.0,"Day | Boxes of cookies
Monday | 44
Tuesday | 46
Wednesday | 48
Thursday | 43
Friday | 38",7,1686,"import pandas as pd

def calculate_rate_of_change(df, day1, day2):
    """"""
    This function takes in a pandas DataFrame representing a table of daily sales, and two days, and returns the rate of change in sales between the two days.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing daily sales with columns 'Day' and 'Boxes of cookies'.
    day1 (str): The first day.
    day2 (str): The second day.
    Returns:
    float: The rate of change in sales between the two days.
    """"""
    # Filter the DataFrame for the specific days
    day1_sales = df[df['Day'] == day1]['Boxes of cookies'].values[0]
    day2_sales = df[df['Day'] == day2]['Boxes of cookies'].values[0]
    
    # Calculate the rate of change
    rate_of_change = (day2_sales - day1_sales) / day1_sales
    
    return rate_of_change","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],
    'Boxes of cookies': [44, 46, 48, 43, 38]
})

# Call the tool to solve the problem
rate_of_change = calculate_rate_of_change(df, 'Tuesday', 'Wednesday')
print(rate_of_change)
```"
How much money does Samantha need to buy an African safari vacation package and a Hawaiian vacation package?,1728.0,"African safari vacation package | $787.00
Caribbean vacation package | $927.00
Hawaiian vacation package | $941.00
Australian vacation package | $553.00",4,10504,"import pandas as pd

def calculate_total_cost_vacation(vacation_df, packages):
    """"""
    This function takes in a pandas DataFrame representing a vacation packages table and a list of packages, and returns the total cost of the packages using pandas.
    Args:
    vacation_df (pd.DataFrame): A pandas DataFrame containing vacation packages and their prices with columns 'Package' and 'Price'.
    packages (list): A list where the elements are vacation package names.
    Returns:
    float: The total cost of the packages.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the vacation packages and calculate the cost for each selected package
    for package in packages:
        # Filter the DataFrame for the specific package
        package_df = vacation_df[vacation_df['Package'] == package]
        if not package_df.empty:
            package_price = package_df['Price'].values[0]
            total_cost += package_price
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Package': ['African safari vacation package', 'Caribbean vacation package', 'Hawaiian vacation package', 'Australian vacation package'],
    'Price': [787.00, 927.00, 941.00, 553.00]
})
# Call the tool to solve the problem
total_cost = calculate_total_cost_vacation(df, ['African safari vacation package', 'Hawaiian vacation package'])
print(total_cost)
```"
"How much money does Annie need to buy a chest of drawers, a TV stand, and a nightstand?",151.59,"TV stand | $16.67
chest of drawers | $59.60
hammock | $35.90
rocking chair | $39.90
wooden stool | $29.99
nightstand | $75.32",4,11595,"import pandas as pd

def calculate_total_cost(menu_df, orders):
    """"""
    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.
    Args:
    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.
    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.
    Returns:
    float: The total cost of the orders.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the menu items and calculate the cost for each ordered item
    for item, quantity in orders.items():
        # Filter the DataFrame for the specific item
        item_df = menu_df[menu_df['Item'] == item]
        if not item_df.empty:
            item_price = item_df['Price'].values[0]
            total_cost += quantity * item_price
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we create a dictionary with the items that Annie wants to buy and the quantity of each item. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Item': ['TV stand', 'chest of drawers', 'hammock', 'rocking chair', 'wooden stool', 'nightstand'],
    'Price': [16.67, 59.60, 35.90, 39.90, 29.99, 75.32]
})

# Initialize the orders
orders = {
    'chest of drawers': 1,
    'TV stand': 1,
    'nightstand': 1
}

# Call the tool to solve the problem
total_cost = calculate_total_cost(df, orders)
print(f""Annie needs ${total_cost} to buy a chest of drawers, a TV stand, and a nightstand."")
```"
"Lila's Crafts is interested in offering a scarf knitting class, so the store considers how many scarves people already own. How many people have more than 2 scarves?",29.0,"Number of scarves | Frequency
0 | 7
1 | 12
2 | 4
3 | 3
4 | 10
5 | 16",7,4816,"import pandas as pd

def count_people_with_more_than_2_scarves(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of the number of scarves people own, and returns the number of people who own more than 2 scarves.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of scarves and their frequencies with columns 'Number of scarves' and 'Frequency'.
    Returns:
    int: The number of people who own more than 2 scarves.
    """"""
    # Filter the DataFrame for the rows where the number of scarves is more than 2
    filtered_df = df[df['Number of scarves'] > 2]
    
    # Sum the frequencies of these rows to get the total number of people who own more than 2 scarves
    num_people = filtered_df['Frequency'].sum()
    
    return num_people","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of scarves': [0, 1, 2, 3, 4, 5],
    'Frequency': [7, 12, 4, 3, 10, 16]
})
# Call the tool to solve the problem
count_people_with_more_than_2_scarves(df)
```"
"Every year Georgetown has a citywide relay and reports the winning times. According to the table, what was the rate of change between 2012 and 2013?",17.0,"Year | Winning time (minutes)
2009 | 23
2010 | 39
2011 | 32
2012 | 21
2013 | 38",8,2082,"import pandas as pd

def calculate_rate_of_change(df, start_year, end_year):
    """"""
    This function takes in a pandas DataFrame representing a table of winning times for each year and two years, and returns the rate of change of winning times between the two years.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing years and winning times with columns 'Year' and 'Winning time (minutes)'.
    start_year (int): The start year for calculating the rate of change.
    end_year (int): The end year for calculating the rate of change.
    Returns:
    float: The rate of change of winning times between the two years.
    """"""
    # Filter the DataFrame for the start year and end year
    start_year_df = df[df['Year'] == start_year]
    end_year_df = df[df['Year'] == end_year]
    
    # Check if the DataFrame for the start year and end year is not empty
    if not start_year_df.empty and not end_year_df.empty:
        # Calculate the rate of change
        rate_of_change = (end_year_df['Winning time (minutes)'].values[0] - start_year_df['Winning time (minutes)'].values[0]) / (end_year - start_year)
        return rate_of_change
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Year': [2009, 2010, 2011, 2012, 2013],
    'Winning time (minutes)': [23, 39, 32, 21, 38]
})
# Call the tool to solve the problem
rate_of_change = calculate_rate_of_change(df, 2012, 2013)
print(rate_of_change)
```"
The members of the track team compared how many miles they ran last week. What is the mode of the numbers?,8.0,"Name | Miles
Samuel | 8
Emmett | 8
Lola | 6
Bob | 8
Deb | 5
Camille | 10
Jonah | 5
Oliver | 6",8,8608,"import pandas as pd
from collections import Counter

def calculate_mode(df):
    """"""
    This function takes in a pandas DataFrame containing names and miles, and returns the mode of the miles.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing names and miles with columns 'Name' and 'Miles'.
    Returns:
    int: The mode of the miles.
    """"""
    # Extract the miles column from the DataFrame
    miles = df['Miles'].tolist()
    
    # Calculate the frequency of each mile value
    counter = Counter(miles)
    
    # Find the mode
    mode = counter.most_common(1)[0][0]
    
    return mode","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Name': ['Samuel', 'Emmett', 'Lola', 'Bob', 'Deb', 'Camille', 'Jonah', 'Oliver'],
    'Miles': [8, 8, 6, 8, 5, 10, 5, 6]
})
# Call the tool to solve the problem
print(calculate_mode(df))
```"
Some farmers compared how many tractors they own. What is the median of the numbers?,9.0,"Farmer | Number of tractors
Farmer Tom | 9
Farmer Alex | 9
Farmer Walt | 7
Farmer Susie | 10
Farmer Andy | 12",5,3453,"import pandas as pd
import numpy as np

def calculate_median(df):
    """"""
    This function takes in a pandas DataFrame representing a table of farmers and their number of tractors, and returns the median number of tractors.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing farmers and their number of tractors with columns 'Farmer' and 'Number of tractors'.
    Returns:
    float: The median number of tractors.
    """"""
    # Extract the 'Number of tractors' column and convert it to a numpy array
    tractors = df['Number of tractors'].values
    
    # Calculate and return the median
    return np.median(tractors)","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Farmer': ['Farmer Tom', 'Farmer Alex', 'Farmer Walt', 'Farmer Susie', 'Farmer Andy'],
    'Number of tractors': [9, 9, 7, 10, 12]
})
# Call the tool to solve the problem
median_tractors = calculate_median(df)
print(median_tractors)
```"
A newspaper researched how many grocery stores there are in each town. What is the range of the numbers?,5.0,"Town | Number of stores
Marion | 9
Greenwood | 8
Springfield | 10
Salem | 8
Riverside | 5
Ashland | 5
Richmond | 8
Columbia | 10",7,14595,"import pandas as pd

def calculate_range(df):
    """"""
    This function takes in a pandas DataFrame representing a table of towns and their number of stores, and returns the range of the number of stores.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing towns and their number of stores with columns 'Town' and 'Number of stores'.
    Returns:
    int: The range of the number of stores.
    """"""
    # Calculate the range of the number of stores
    range_stores = df['Number of stores'].max() - df['Number of stores'].min()
    
    return range_stores","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Town': ['Marion', 'Greenwood', 'Springfield', 'Salem', 'Riverside', 'Ashland', 'Richmond', 'Columbia'],
    'Number of stores': [9, 8, 10, 8, 5, 5, 8, 10]
})

# Call the tool to solve the problem
range_stores = calculate_range(df)

# Print the answer
print(range_stores)
```"
Garrett's classmates revealed how many science articles they read. What is the mode of the numbers?,10.0,"Name | Number of science articles
Garrett | 10
Elijah | 4
Lee | 10
Hanson | 6
Regan | 6
Charlie | 4
Francesca | 10
Desmond | 9",7,2441,"import pandas as pd
from scipy import stats

def calculate_mode(df):
    """"""
    This function takes in a pandas DataFrame representing a table of names and the number of science articles they read, and returns the mode of the numbers using pandas and scipy.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing names and the number of science articles they read with columns 'Name' and 'Number of science articles'.
    Returns:
    int: The mode of the numbers.
    """"""
    # Extract the 'Number of science articles' column
    articles = df['Number of science articles']
    
    # Calculate the mode using scipy's mode function
    mode = stats.mode(articles)
    
    return mode.mode[0]","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Name': ['Garrett', 'Elijah', 'Lee', 'Hanson', 'Regan', 'Charlie', 'Francesca', 'Desmond'],
    'Number of science articles': [10, 4, 10, 6, 6, 4, 10, 9]
})
# Call the tool to solve the problem
mode = calculate_mode(df)
print(mode)
```"
An architecture student measured the heights of all the buildings downtown. How many buildings are exactly 23 meters tall?,0.0,"Stem | Leaf 
2 | 4
3 | 1, 2, 5
4 | 0, 4
5 | 
6 | 0, 4
7 | 3",5,16588,"import pandas as pd

def count_buildings_with_exact_height(df, target_height):
    """"""
    This function takes in a pandas dataframe of building heights and a target height, and returns the number of buildings with the exact target height.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the building heights in stem and leaf format.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    target_height (int): The target height to count the number of buildings.
    Returns:
    int: The number of buildings with the exact target height.
    """"""
    # prepare a list to store building heights
    heights = []
    # calculate the height of each building
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            heights.append(stem * 10 + leaf[j])
    # filter the buildings with the exact target height
    filtered = [height for height in heights if height == target_height]
    # count the number of buildings
    num_buildings = len(filtered)
    return num_buildings","We should first create a pandas dataframe with the data from the table. Note that some elements are empty, so we need to fill them with empty lists. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [2, 3, 4, 5, 6, 7],
    'Leaf': [[4], [1, 2, 5], [0, 4], [], [0, 4], [3]]
})
# Call the tool to solve the problem
count_buildings_with_exact_height(df, 23)
```"
"For a study on numerical psychology, people were polled about which number between 1 and 5 they like most, and why. How many people said 2?",20.0,"Favorite number | Frequency
1 | 5
2 | 20
3 | 17
4 | 14
5 | 15",8,7581,"import pandas as pd

def get_frequency(df, number):
    """"""
    This function takes in a pandas DataFrame representing a frequency table and a number, and returns the frequency of the number using pandas.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing favorite numbers and their frequencies with columns 'Favorite number' and 'Frequency'.
    number (int): The number to get the frequency for.
    Returns:
    int: The frequency of the number.
    """"""
    # Filter the DataFrame for the specific number
    number_df = df[df['Favorite number'] == number]
    if not number_df.empty:
        frequency = number_df['Frequency'].values[0]
        return frequency
    else:
        return 0","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Favorite number': [1, 2, 3, 4, 5],
    'Frequency': [5, 20, 17, 14, 15]
})

# Call the tool to solve the problem
number_of_people = get_frequency(df, 2)
print(number_of_people)
```"
What is the total cost for 1+3/10 kilograms of chocolate chip cookie dough?,2.6,"double chocolate cookie dough | $2/kilogram
chocolate chip cookie dough | $2/kilogram
peanut butter cookie dough | $3/kilogram
oatmeal raisin cookie dough | $3/kilogram
snickerdoodle cookie dough | $2/kilogram
gingersnap cookie dough | $3/kilogram",6,1943,"import pandas as pd

def calculate_cost_for_weight(df, item, weight):
    """"""
    This function takes in a pandas DataFrame representing a table of cookie dough types and their prices per kilogram, an item name, and a weight in kilograms, and returns the cost for that weight of the item.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing cookie dough types and their prices per kilogram with columns 'Item' and 'Price_per_kg'.
    item (str): The name of the cookie dough type.
    weight (float): The weight in kilograms.
    Returns:
    float: The cost for the specified weight of the item.
    """"""
    # Filter the DataFrame for the specific item
    item_df = df[df['Item'] == item]
    if not item_df.empty:
        item_price_per_kg = item_df['Price_per_kg'].values[0]
        cost = weight * item_price_per_kg
        return cost
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Item': ['double chocolate cookie dough', 'chocolate chip cookie dough', 'peanut butter cookie dough', 'oatmeal raisin cookie dough', 'snickerdoodle cookie dough', 'gingersnap cookie dough'],
    'Price_per_kg': [2, 2, 3, 3, 2, 3]
})

# Call the tool to solve the problem
item = 'chocolate chip cookie dough'
weight = 1 + 3/10
cost = calculate_cost_for_weight(df, item, weight)
print(cost)
```"
Francesca buys 3+1/10 pounds of vine-ripened tomatoes. How much does she spend?,18.6,"cherry tomatoes | $5/pound
roma tomatoes | $3/pound
pear tomatoes | $4/pound
vine-ripened tomatoes | $6/pound
heirloom tomatoes | $5/pound",6,6402,"import pandas as pd

def calculate_cost_of_tomatoes(df, tomato_type, weight):
    """"""
    This function takes in a pandas DataFrame representing a table of tomato types and their prices per pound, the type of tomato, and the weight of the tomatoes in pounds, and returns the total cost.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing tomato types and their prices per pound with columns 'Tomato Type' and 'Price per Pound'.
    tomato_type (str): The type of tomato.
    weight (float): The weight of the tomatoes in pounds.
    Returns:
    float: The total cost of the tomatoes.
    """"""
    # Filter the DataFrame for the specific tomato type
    tomato_df = df[df['Tomato Type'] == tomato_type]
    if not tomato_df.empty:
        price_per_pound = tomato_df['Price per Pound'].values[0]
        total_cost = weight * price_per_pound
        return total_cost
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Tomato Type': ['cherry tomatoes', 'roma tomatoes', 'pear tomatoes', 'vine-ripened tomatoes', 'heirloom tomatoes'],
    'Price per Pound': [5, 3, 4, 6, 5]
})
# Call the tool to solve the problem
total_cost = calculate_cost_of_tomatoes(df, 'vine-ripened tomatoes', 3.1)
print(total_cost)
```"
How much money does Harold need to buy a watering can and a rake?,40.83,"wrench | $14.14
hammer | $22.84
rake | $21.58
watering can | $19.25
lawn mower | $51.26
broom | $15.02",8,1623,"import pandas as pd

def calculate_total_cost(menu_df, orders):
    """"""
    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.
    Args:
    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.
    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.
    Returns:
    float: The total cost of the orders.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the menu items and calculate the cost for each ordered item
    for item, quantity in orders.items():
        # Filter the DataFrame for the specific item
        item_df = menu_df[menu_df['Item'] == item]
        if not item_df.empty:
            item_price = item_df['Price'].values[0]
            total_cost += quantity * item_price
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we create a dictionary with the items Harold wants to buy and the quantity of each item. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Item': ['wrench', 'hammer', 'rake', 'watering can', 'lawn mower', 'broom'],
    'Price': [14.14, 22.84, 21.58, 19.25, 51.26, 15.02]
})

# Initialize the orders
orders = {'watering can': 1, 'rake': 1}

# Call the tool to solve the problem
total_cost = calculate_total_cost(df, orders)
print(total_cost)
```"
The members of the track team compared how many miles they ran last week. What is the mode of the numbers?,20.0,"Name | Miles
Liz | 20
Stacy | 20
Reagan | 20
Alana | 16
Pam | 20
Hugo | 16
Evelyn | 18
Vince | 18",5,5410,"import pandas as pd
from scipy import stats

def calculate_mode(df):
    """"""
    This function takes in a pandas DataFrame representing a table of names and miles run, and returns the mode of the miles run using pandas and scipy.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing names and miles run with columns 'Name' and 'Miles'.
    Returns:
    float: The mode of the miles run.
    """"""
    # Extract the 'Miles' column from the DataFrame
    miles = df['Miles']
    
    # Calculate and return the mode
    mode = stats.mode(miles)
    
    return mode.mode[0]","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Name': ['Liz', 'Stacy', 'Reagan', 'Alana', 'Pam', 'Hugo', 'Evelyn', 'Vince'],
    'Miles': [20, 20, 20, 16, 20, 16, 18, 18]
})

# Call the tool to solve the problem
mode = calculate_mode(df)

# Print the answer
print(mode)
```"
Lillian has $15.00. How much money will Lillian have left if she buys a mystery novel and a paperback book?,3.0,"hardcover book | $9.00
crossword puzzle book | $8.00
math book | $6.00
science-fiction book | $2.00
mystery novel | $8.00
paperback book | $4.00",4,5375,"import pandas as pd

def calculate_remaining_money(menu_df, orders, initial_money):
    """"""
    This function takes in a pandas DataFrame representing a menu table, a dictionary of orders, and the initial amount of money, and returns the remaining money after the orders using pandas.
    Args:
    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.
    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.
    initial_money (float): The initial amount of money.
    Returns:
    float: The remaining money after the orders.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the menu items and calculate the cost for each ordered item
    for item, quantity in orders.items():
        # Filter the DataFrame for the specific item
        item_df = menu_df[menu_df['Item'] == item]
        if not item_df.empty:
            item_price = item_df['Price'].values[0]
            total_cost += quantity * item_price
    
    # Calculate the remaining money
    remaining_money = initial_money - total_cost
    
    return remaining_money","We should first create a pandas dataframe with the data from the table. Then we create a dictionary for the orders. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
menu_df = pd.DataFrame({
    'Item': ['hardcover book', 'crossword puzzle book', 'math book', 'science-fiction book', 'mystery novel', 'paperback book'],
    'Price': [9.00, 8.00, 6.00, 2.00, 8.00, 4.00]
})

# Initialize the orders
orders = {
    'mystery novel': 1,
    'paperback book': 1
}

# Call the tool to solve the problem
remaining_money = calculate_remaining_money(menu_df, orders, 15.00)
print(f'Lillian will have ${remaining_money} left.')
```"
Each necklace has 5 rubies. How many rubies are on 5 necklaces?,25.0,"Number of necklaces | Number of rubies
1 | 5
2 | 10
3 | 15
4 | 20
5 | ?",2,6282,"import pandas as pd

def calculate_rubies(df, num_necklaces):
    """"""
    This function takes in a pandas DataFrame representing a table of necklaces and rubies, and a number of necklaces, and returns the number of rubies on the given number of necklaces.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of necklaces and the corresponding number of rubies with columns 'Number of necklaces' and 'Number of rubies'.
    num_necklaces (int): The number of necklaces.
    Returns:
    int: The number of rubies on the given number of necklaces.
    """"""
    # Get the number of rubies per necklace
    rubies_per_necklace = df['Number of rubies'][0] / df['Number of necklaces'][0]
    
    # Calculate the number of rubies on the given number of necklaces
    num_rubies = rubies_per_necklace * num_necklaces
    
    return num_rubies","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of necklaces': [1, 2, 3, 4],
    'Number of rubies': [5, 10, 15, 20]
})

# Call the tool to solve the problem
num_rubies = calculate_rubies(df, 5)
print(f'There are {num_rubies} rubies on 5 necklaces.')
```"
A toy store employee counted the number of toys in each bin in the sale section. What is the smallest number of toys?,44.0,"Stem | Leaf 
4 | 4, 8
5 | 
6 | 0, 1, 2, 7, 9, 9
7 | 2, 4, 4, 8
8 | 0, 6, 7, 7
9 | 0",4,13336,"import pandas as pd
def find_smallest_number_of_toys(df):
    """"""
    This function takes in a pandas dataframe of the number of toys in each bin, and returns the smallest number of toys.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of toys in each bin.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The smallest number of toys.
    """"""
    # prepare a list to calculate toys in each bin
    toys = []
    # calculate the total number of toys in each bin
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            toys.append(stem * 10 + leaf[j])
    # find the smallest number of toys
    smallest = min(toys)
    return smallest","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [4, 5, 6, 7, 8, 9],
    'Leaf': [[4, 8], [], [0, 1, 2, 7, 9, 9], [2, 4, 4, 8], [0, 6, 7, 7], [0]]
})
# Call the tool to solve the problem
find_smallest_number_of_toys(df)
```"
How much more does a book about dogs cost than a book about trains?,9.0,"book about the Olympics | $13.00
book about music | $13.00
book about dogs | $19.00
book about hiking | $23.00
book about trains | $10.00
book about dinosaurs | $19.00",8,8695,"import pandas as pd

def calculate_price_difference(df, item1, item2):
    """"""
    This function takes in a pandas DataFrame representing a book price table and two book titles, and returns the price difference between the two books.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing book titles and their prices with columns 'Title' and 'Price'.
    item1 (str): The title of the first book.
    item2 (str): The title of the second book.
    Returns:
    float: The price difference between the two books.
    """"""
    # Filter the DataFrame for the specific items
    item1_df = df[df['Title'] == item1]
    item2_df = df[df['Title'] == item2]
    
    # Check if both items exist in the DataFrame
    if not item1_df.empty and not item2_df.empty:
        item1_price = item1_df['Price'].values[0]
        item2_price = item2_df['Price'].values[0]
        
        # Calculate and return the price difference
        return abs(item1_price - item2_price)
    else:
        return None","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Title': ['book about the Olympics', 'book about music', 'book about dogs', 'book about hiking', 'book about trains', 'book about dinosaurs'],
    'Price': [13.00, 13.00, 19.00, 23.00, 10.00, 19.00]
})

# Call the tool to solve the problem
price_difference = calculate_price_difference(df, 'book about dogs', 'book about trains')
print(price_difference)
```"
Franklin buys 3+3/10 pounds of light brown sugar. What is the total cost?,13.2,"maple syrup | $3 per pound
powdered sugar | $3 per pound
agave syrup | $6 per pound
light brown sugar | $4 per pound",6,6284,"import pandas as pd

def calculate_cost(df, item, weight):
    """"""
    This function takes in a pandas DataFrame representing a price table, an item name, and a weight, and returns the total cost of the item.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing items and their prices per pound with columns 'Item' and 'Price'.
    item (str): The name of the item.
    weight (float): The weight of the item in pounds.
    Returns:
    float: The total cost of the item.
    """"""
    # Filter the DataFrame for the specific item
    item_df = df[df['Item'] == item]
    if not item_df.empty:
        item_price = item_df['Price'].values[0]
        total_cost = weight * item_price
        return total_cost
    else:
        return ""Item not found in the price list.""","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Item': ['maple syrup', 'powdered sugar', 'agave syrup', 'light brown sugar'],
    'Price': [3, 3, 6, 4]
})

# Call the tool to solve the problem
total_cost = calculate_cost(df, 'light brown sugar', 3.3)
print(total_cost)
```"
How much money does Emilia need to buy a Hawaiian vacation package and a European vacation package?,8383.0,"African safari vacation package | $1,031
Hawaiian vacation package | $3,200
European vacation package | $5,183
Australian vacation package | $4,098
Jamaican vacation package | $6,532
Caribbean vacation package | $2,150",4,2141,"import pandas as pd

def calculate_vacation_cost(vacation_df, packages):
    """"""
    This function takes in a pandas DataFrame representing a vacation packages table and a list of packages, and returns the total cost of the packages using pandas.
    Args:
    vacation_df (pd.DataFrame): A pandas DataFrame containing vacation packages and their prices with columns 'Package' and 'Price'.
    packages (list): A list where the elements are vacation package names.
    Returns:
    float: The total cost of the packages.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the vacation packages and calculate the cost for each selected package
    for package in packages:
        # Filter the DataFrame for the specific package
        package_df = vacation_df[vacation_df['Package'] == package]
        if not package_df.empty:
            package_price = package_df['Price'].values[0]
            total_cost += package_price
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Package': ['African safari vacation package', 'Hawaiian vacation package', 'European vacation package', 'Australian vacation package', 'Jamaican vacation package', 'Caribbean vacation package'],
    'Price': [1031, 3200, 5183, 4098, 6532, 2150]
})

# Call the tool to solve the problem
total_cost = calculate_vacation_cost(df, ['Hawaiian vacation package', 'European vacation package'])
print(total_cost)
```"
Look at Thad's pay stub. Thad lives in a state that has state income tax. How much did Thad make after taxes?,763.28,"Employee | Pay period |
Thad James | June 12-18 |
Total earnings | | $1,100.00
Federal income tax | $172.02 |
State income tax | $80.70 |
Other taxes | $84.00 |
Total taxes | | ?
Pay after taxes | | ?",5,15059,"import pandas as pd

def calculate_pay_after_taxes(pay_stub_df):
    """"""
    This function takes in a pandas DataFrame representing a pay stub table and calculates the pay after taxes.
    Args:
    pay_stub_df (pd.DataFrame): A pandas DataFrame containing pay stub information with columns 'Item' and 'Amount'.
    Returns:
    float: The pay after taxes.
    """"""
    # Extract the total earnings, federal income tax, state income tax, and other taxes
    total_earnings = pay_stub_df.loc[pay_stub_df['Item'] == 'Total earnings', 'Amount'].values[0]
    federal_income_tax = pay_stub_df.loc[pay_stub_df['Item'] == 'Federal income tax', 'Amount'].values[0]
    state_income_tax = pay_stub_df.loc[pay_stub_df['Item'] == 'State income tax', 'Amount'].values[0]
    other_taxes = pay_stub_df.loc[pay_stub_df['Item'] == 'Other taxes', 'Amount'].values[0]
    
    # Calculate the total taxes
    total_taxes = federal_income_tax + state_income_tax + other_taxes
    
    # Calculate the pay after taxes
    pay_after_taxes = total_earnings - total_taxes
    
    return pay_after_taxes","```python
# Initialize the table into a dataframe
pay_stub_df = pd.DataFrame({
    'Item': ['Total earnings', 'Federal income tax', 'State income tax', 'Other taxes'],
    'Amount': [1100.00, 172.02, 80.70, 84.00]
})

# Call the tool to solve the problem
pay_after_taxes = calculate_pay_after_taxes(pay_stub_df)

# Print the answer
print(pay_after_taxes)
```"
How much money does Erin need to buy 6 cockatoos?,466.26,"finch | $21.44
rabbit | $83.66
cockatoo | $77.71
chameleon | $63.24",7,3095,"import pandas as pd

def calculate_cost_for_animal(df, animal, quantity):
    """"""
    This function takes in a pandas DataFrame representing a table of animals and their prices, the name of an animal, and a quantity, and returns the total cost for the specified quantity of the animal.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing animals and their prices with columns 'Animal' and 'Price'.
    animal (str): The name of the animal.
    quantity (int): The quantity of the animal.
    Returns:
    float: The total cost for the specified quantity of the animal.
    """"""
    # Filter the DataFrame for the specific animal
    animal_df = df[df['Animal'] == animal]
    if not animal_df.empty:
        animal_price = animal_df['Price'].values[0]
        total_cost = quantity * animal_price
        return total_cost
    else:
        return ""Animal not found in the list.""","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Animal': ['finch', 'rabbit', 'cockatoo', 'chameleon'],
    'Price': [21.44, 83.66, 77.71, 63.24]
})
# Call the tool to solve the problem
total_cost = calculate_cost_for_animal(df, 'cockatoo', 6)
print(total_cost)
```"
"This morning, Mr. Beasley released the scores from last week's spelling test. How many students scored at least 40 points but fewer than 70 points?",14.0,"Stem | Leaf 
4 | 0, 2, 5, 7, 8, 9
5 | 9
6 | 0, 0, 3, 4, 5, 7, 7
7 | 6, 7, 7
8 | 0, 3, 5, 6, 9",7,6677,"import pandas as pd
def count_students_with_scores_between_40_and_70(df):
    """"""
    This function takes in a pandas dataframe of students' scores, and returns the number of students that scored at least 40 points but fewer than 70 points.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the students' scores.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of students that scored at least 40 points but fewer than 70 points.
    """"""
    # prepare a list to calculate scores of each student
    scores = []
    # calculate the score of each student
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            scores.append(stem * 10 + leaf[j])
    # filter the students where the score is greater than or equal to 40 and less than 70
    filtered = [score for score in scores if score >= 40 and score < 70]
    # count the number of students
    num_students = len(filtered)
    return num_students","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [4, 5, 6, 7, 8],
    'Leaf': [[0, 2, 5, 7, 8, 9], [9], [0, 0, 3, 4, 5, 7, 7], [6, 7, 7], [0, 3, 5, 6, 9]]
})
# Call the tool to solve the problem
count_students_with_scores_between_40_and_70(df)
```"
"The financial aid office at Thornton University produced an internal report on the number of students receiving scholarships. According to the table, what was the rate of change between 2012 and 2013?",-2.0,"Year | Students
2010 | 21
2011 | 19
2012 | 15
2013 | 13
2014 | 18",8,16392,"import pandas as pd

def calculate_rate_of_change(df, year1, year2):
    """"""
    This function takes in a pandas DataFrame representing a table of students receiving scholarships per year, and two years, and returns the rate of change of students receiving scholarships between the two years.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing years and the number of students receiving scholarships with columns 'Year' and 'Students'.
    year1 (int): The first year.
    year2 (int): The second year.
    Returns:
    float: The rate of change of students receiving scholarships between the two years.
    """"""
    # Filter the DataFrame for the specific years
    year1_df = df[df['Year'] == year1]
    year2_df = df[df['Year'] == year2]
    
    # Check if the years exist in the DataFrame
    if not year1_df.empty and not year2_df.empty:
        # Calculate the rate of change
        rate_of_change = (year2_df['Students'].values[0] - year1_df['Students'].values[0]) / year1_df['Students'].values[0]
        return rate_of_change
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Year': [2010, 2011, 2012, 2013, 2014],
    'Students': [21, 19, 15, 13, 18]
})
# Call the tool to solve the problem
rate_of_change = calculate_rate_of_change(df, 2012, 2013)
print(rate_of_change)
```"
Look at Antwan's pay stub. Antwan lives in a state without state income tax. How much did Antwan make after taxes?,1215.78,"Employee | Pay period |
Antwan Chandler | October 16-31 |
Total earnings | | $1,503.00
Federal income tax | $172.32 |
Other taxes | $114.90 |
Total taxes | | ?
Pay after taxes | | ?",5,6973,"import pandas as pd

def calculate_pay_after_taxes(pay_stub_df):
    """"""
    This function takes in a pandas DataFrame representing a pay stub table and calculates the pay after taxes.
    Args:
    pay_stub_df (pd.DataFrame): A pandas DataFrame containing pay stub information with columns 'Item' and 'Amount'.
    Returns:
    float: The pay after taxes.
    """"""
    # Extract the total earnings and taxes from the DataFrame
    total_earnings = pay_stub_df.loc[pay_stub_df['Item'] == 'Total earnings', 'Amount'].values[0]
    total_taxes = pay_stub_df.loc[pay_stub_df['Item'] == 'Total taxes', 'Amount'].values[0]
    
    # Calculate the pay after taxes
    pay_after_taxes = total_earnings - total_taxes
    
    return pay_after_taxes","We should first create a pandas dataframe with the data from the table. Note that some elements are empty, so we need to fill them with None. Then we calculate the total taxes by adding up the federal income tax and other taxes. After that, we update the total taxes in the dataframe. Finally, we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Item': ['Total earnings', 'Federal income tax', 'Other taxes', 'Total taxes', 'Pay after taxes'],
    'Amount': [1503.00, 172.32, 114.90, None, None]
})

# Calculate the total taxes
total_taxes = df.loc[df['Item'] == 'Federal income tax', 'Amount'].values[0] + df.loc[df['Item'] == 'Other taxes', 'Amount'].values[0]

# Update the total taxes in the dataframe
df.loc[df['Item'] == 'Total taxes', 'Amount'] = total_taxes

# Call the tool to solve the problem
pay_after_taxes = calculate_pay_after_taxes(df)

# Print out the answer
print(f""Antwan made ${pay_after_taxes} after taxes."")
```"
How much money does Pete need to buy 6 crystal sculptures and 7 lamps?,1008.21,"chandelier | $94.14
lamp | $77.25
crystal vase | $63.41
crystal sculpture | $77.91",8,9831,"import pandas as pd

def calculate_total_cost(menu_df, orders):
    """"""
    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.
    Args:
    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.
    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.
    Returns:
    float: The total cost of the orders.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the menu items and calculate the cost for each ordered item
    for item, quantity in orders.items():
        # Filter the DataFrame for the specific item
        item_df = menu_df[menu_df['Item'] == item]
        if not item_df.empty:
            item_price = item_df['Price'].values[0]
            total_cost += quantity * item_price
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we create a dictionary to represent the orders. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Item': ['chandelier', 'lamp', 'crystal vase', 'crystal sculpture'],
    'Price': [94.14, 77.25, 63.41, 77.91]
})

# Initialize the orders
orders = {'crystal sculpture': 6, 'lamp': 7}

# Call the tool to solve the problem
total_cost = calculate_total_cost(df, orders)
print(total_cost)
```"
"If Ian buys 1 kilogram of rib, how much will he spend?",4.0,"shank | $4 per kilogram
flank | $2 per kilogram
brisket | $2 per kilogram
loin | $3 per kilogram
rib | $4 per kilogram",6,14068,"import pandas as pd

def calculate_cost(df, item, quantity):
    """"""
    This function takes in a pandas DataFrame representing a price table, an item name, and a quantity, and returns the total cost of the item.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.
    item (str): The name of the item.
    quantity (int): The quantity of the item.
    Returns:
    float: The total cost of the item.
    """"""
    # Filter the DataFrame for the specific item
    item_df = df[df['Item'] == item]
    if not item_df.empty:
        item_price = item_df['Price'].values[0]
        total_cost = quantity * item_price
        return total_cost
    else:
        return ""Item not found in the price list.""","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Item': ['shank', 'flank', 'brisket', 'loin', 'rib'],
    'Price': [4, 2, 2, 3, 4]
})

# Call the tool to solve the problem
total_cost = calculate_cost(df, 'rib', 1)
print(total_cost)
```"
How much money does Florence need to buy an African safari vacation package and an Australian vacation package?,11013.0,"Caribbean vacation package | $2,915
European vacation package | $3,753
Jamaican vacation package | $8,991
African safari vacation package | $6,160
Australian vacation package | $4,853",7,5243,"import pandas as pd

def calculate_total_cost_vacation(vacation_df, packages):
    """"""
    This function takes in a pandas DataFrame representing a vacation packages table and a list of packages, and returns the total cost of the packages using pandas.
    Args:
    vacation_df (pd.DataFrame): A pandas DataFrame containing vacation packages and their prices with columns 'Package' and 'Price'.
    packages (list): A list where the elements are vacation package names.
    Returns:
    float: The total cost of the packages.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the vacation packages and calculate the cost for each ordered package
    for package in packages:
        # Filter the DataFrame for the specific package
        package_df = vacation_df[vacation_df['Package'] == package]
        if not package_df.empty:
            package_price = package_df['Price'].values[0]
            total_cost += package_price
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
vacation_df = pd.DataFrame({
    'Package': ['Caribbean vacation package', 'European vacation package', 'Jamaican vacation package', 'African safari vacation package', 'Australian vacation package'],
    'Price': [2915, 3753, 8991, 6160, 4853]
})

# Define the packages Florence wants to buy
packages = ['African safari vacation package', 'Australian vacation package']

# Call the tool to solve the problem
total_cost = calculate_total_cost_vacation(vacation_df, packages)
print(total_cost)
```"
The Kingwood Soup Company recorded the number of rotten tomatoes in each barrel it received. How many barrels had at least 17 rotten tomatoes?,7.0,"Stem | Leaf 
1 | 7
2 | 
3 | 7, 8
4 | 4
5 | 7
6 | 6
7 | 
8 | 3",5,11265,"import pandas as pd

def count_barrels_with_17_rotten_tomatoes(df):
    """"""
    This function takes in a pandas dataframe of rotten tomatoes per barrel, and returns the number of barrels that have at least 17 rotten tomatoes.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of rotten tomatoes per barrel.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of barrels that have at least 17 rotten tomatoes.
    """"""
    # prepare a list to calculate rotten tomatoes in each barrel
    rotten_tomatoes = []
    # calculate the total number of rotten tomatoes in each barrel
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            rotten_tomatoes.append(stem * 10 + leaf[j])
    # filter the barrels where the total number of rotten tomatoes is greater than or equal to 17
    filtered = [tomato for tomato in rotten_tomatoes if tomato >= 17]
    # count the number of rows
    num_barrels = len(filtered)
    return num_barrels","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],
    'Leaf': [[7], [], [7, 8], [4], [7], [6], [], [3]]
})
# Call the tool to solve the problem
count_barrels_with_17_rotten_tomatoes(df)
```"
"An administrator at the Department of Motor Vehicles (DMV) tracked the average wait time from month to month. According to the table, what was the rate of change between February and March?",9.0,"Month | Waiting time (minutes)
January | 37
February | 19
March | 28
April | 42
May | 19",7,4125,"import pandas as pd

def calculate_rate_of_change(df, month1, month2):
    """"""
    This function takes in a pandas DataFrame representing a table of average wait times per month, and two months, and returns the rate of change of wait time between the two months.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing months and their corresponding wait times with columns 'Month' and 'Waiting time (minutes)'.
    month1 (str): The first month.
    month2 (str): The second month.
    Returns:
    float: The rate of change of wait time between the two months.
    """"""
    # Filter the DataFrame for the specific months
    month1_df = df[df['Month'] == month1]
    month2_df = df[df['Month'] == month2]
    
    # Check if the months exist in the DataFrame
    if not month1_df.empty and not month2_df.empty:
        # Calculate the rate of change
        rate_of_change = (month2_df['Waiting time (minutes)'].values[0] - month1_df['Waiting time (minutes)'].values[0]) / month1_df['Waiting time (minutes)'].values[0]
        return rate_of_change
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Month': ['January', 'February', 'March', 'April', 'May'],
    'Waiting time (minutes)': [37, 19, 28, 42, 19]
})
# Call the tool to solve the problem
rate_of_change = calculate_rate_of_change(df, 'February', 'March')
print(rate_of_change)
```"
A bagel wholesaler examined the bagel sales of each of the retail stores that it served. How many more everything bagels than cinnamon-raisin bagels did Westside Bagels sell?,5.0,"Shop | Cinnamon-raisin bagels | Everything bagels
Downtown Bagels | 8 | 12
Bagel City | 20 | 11
Westside Bagels | 8 | 13
Jimmy's Bagels | 3 | 16",5,17078,"import pandas as pd

def calculate_bagel_difference(df, shop_name):
    """"""
    This function takes in a pandas DataFrame representing a bagel sales table and a shop name, and returns the difference in sales between everything bagels and cinnamon-raisin bagels for the specified shop.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing bagel sales data with columns 'Shop', 'Cinnamon-raisin bagels', and 'Everything bagels'.
    shop_name (str): The name of the shop for which to calculate the bagel sales difference.
    Returns:
    int: The difference in sales between everything bagels and cinnamon-raisin bagels for the specified shop.
    """"""
    # Filter the DataFrame for the specific shop
    shop_df = df[df['Shop'] == shop_name]
    if not shop_df.empty:
        # Calculate the difference in sales
        difference = shop_df['Everything bagels'].values[0] - shop_df['Cinnamon-raisin bagels'].values[0]
        return difference
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Shop': ['Downtown Bagels', 'Bagel City', 'Westside Bagels', 'Jimmy\'s Bagels'],
    'Cinnamon-raisin bagels': [8, 20, 8, 3],
    'Everything bagels': [12, 11, 13, 16]
})
# Call the tool to solve the problem
print(calculate_bagel_difference(df, 'Westside Bagels'))
```"
How much money does Cassie need to buy a green marble and a colorful pinwheel?,0.12,"colorful pinwheel | $0.05
green marble | $0.07
wooden block | $0.01
blue plastic block | $0.05
red kazoo | $0.07
green bouncy ball | $0.09",3,12457,"import pandas as pd

def calculate_total_cost(menu_df, orders):
    """"""
    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.
    Args:
    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.
    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.
    Returns:
    float: The total cost of the orders.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the menu items and calculate the cost for each ordered item
    for item, quantity in orders.items():
        # Filter the DataFrame for the specific item
        item_df = menu_df[menu_df['Item'] == item]
        if not item_df.empty:
            item_price = item_df['Price'].values[0]
            total_cost += quantity * item_price
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we create a dictionary of orders with the items Cassie wants to buy. Finally, we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
menu_df = pd.DataFrame({
    'Item': ['colorful pinwheel', 'green marble', 'wooden block', 'blue plastic block', 'red kazoo', 'green bouncy ball'],
    'Price': [0.05, 0.07, 0.01, 0.05, 0.07, 0.09]
})

# Create a dictionary of orders
orders = {'colorful pinwheel': 1, 'green marble': 1}

# Call the tool to solve the problem
total_cost = calculate_total_cost(menu_df, orders)
print(total_cost)
```"
How much money does Jeremiah need to buy 5 navy blue bath mats and 4 flannel sheets?,180.6,"beach towel | $16.43
quilt | $34.21
flannel sheet | $20.60
pillow | $12.85
navy blue bath mat | $19.64
beach blanket | $11.17",8,11850,"import pandas as pd

def calculate_total_cost(menu_df, orders):
    """"""
    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.
    Args:
    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.
    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.
    Returns:
    float: The total cost of the orders.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the menu items and calculate the cost for each ordered item
    for item, quantity in orders.items():
        # Filter the DataFrame for the specific item
        item_df = menu_df[menu_df['Item'] == item]
        if not item_df.empty:
            item_price = item_df['Price'].values[0]
            total_cost += quantity * item_price
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we create a dictionary to represent the orders. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Item': ['beach towel', 'quilt', 'flannel sheet', 'pillow', 'navy blue bath mat', 'beach blanket'],
    'Price': [16.43, 34.21, 20.60, 12.85, 19.64, 11.17]
})

# Initialize the orders
orders = {
    'navy blue bath mat': 5,
    'flannel sheet': 4
}

# Call the tool to solve the problem
total_cost = calculate_total_cost(df, orders)

# Print out the answer
print(f""Jeremiah needs ${total_cost:.2f} to buy 5 navy blue bath mats and 4 flannel sheets."")
```"
Each pile has 10 magazines. How many magazines are in 3 piles?,30.0,"Number of piles | Number of magazines
1 | 10
2 | 20
3 | ?",1,10935,"import pandas as pd

def calculate_magazines(df, piles):
    """"""
    This function takes in a pandas DataFrame representing a table of piles and magazines, and a number of piles, and returns the number of magazines in the given number of piles.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of piles and the corresponding number of magazines with columns 'Number of piles' and 'Number of magazines'.
    piles (int): The number of piles for which to calculate the number of magazines.
    Returns:
    int: The number of magazines in the given number of piles.
    """"""
    # Get the number of magazines per pile from the DataFrame
    magazines_per_pile = df['Number of magazines'][0] / df['Number of piles'][0]
    
    # Calculate the number of magazines in the given number of piles
    magazines = piles * magazines_per_pile
    
    return int(magazines)","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of piles': [1, 2],
    'Number of magazines': [10, 20]
})

# Call the tool to solve the problem
magazines_in_3_piles = calculate_magazines(df, 3)
print(magazines_in_3_piles)
```"
The employees at Levi's Construction monitored the number of cracked window panes in each shipment they received. How many shipments had exactly 75 cracked window panes?,4.0,"Stem | Leaf 
4 | 6, 7
5 | 0, 6
6 | 
7 | 5, 5, 5, 5, 8
8 | 
9 | 0",4,3009,"import pandas as pd

def count_shipments_with_75_cracked_panes(df):
    """"""
    This function takes in a pandas dataframe of cracked window panes per shipment, and returns the number of shipments that have exactly 75 cracked window panes.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of cracked window panes per shipment.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of shipments that have exactly 75 cracked window panes.
    """"""
    # prepare a list to calculate panes in each shipment
    panes = []
    # calculate the total number of cracked window panes in each shipment
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            panes.append(stem * 10 + leaf[j])
    # filter the shipments where the total number of cracked window panes is exactly 75
    filtered = [pane for pane in panes if pane == 75]
    # count the number of rows
    num_shipments = len(filtered)
    return num_shipments","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [4, 5, 6, 7, 8, 9],
    'Leaf': [[6, 7], [0, 6], [], [5, 5, 5, 5, 8], [], [0]]
})
# Call the tool to solve the problem
count_shipments_with_75_cracked_panes(df)
```"
How much more does a coffee table cost than a wooden stool?,17.92,"kitchen table | $57.08
wooden stool | $47.63
chest of drawers | $89.86
footstool | $45.99
coffee table | $65.55
nightstand | $63.41",4,12692,"import pandas as pd

def calculate_price_difference(furniture_df, item1, item2):
    """"""
    This function takes in a pandas DataFrame representing a furniture price table and two item names, and returns the price difference between the two items.
    Args:
    furniture_df (pd.DataFrame): A pandas DataFrame containing furniture items and their prices with columns 'Item' and 'Price'.
    item1 (str): The name of the first item.
    item2 (str): The name of the second item.
    Returns:
    float: The price difference between the two items.
    """"""
    # Filter the DataFrame for the specific items
    item1_df = furniture_df[furniture_df['Item'] == item1]
    item2_df = furniture_df[furniture_df['Item'] == item2]
    
    # Check if both items exist in the DataFrame
    if not item1_df.empty and not item2_df.empty:
        item1_price = item1_df['Price'].values[0]
        item2_price = item2_df['Price'].values[0]
        
        # Calculate and return the price difference
        return abs(item1_price - item2_price)
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
furniture_df = pd.DataFrame({
    'Item': ['kitchen table', 'wooden stool', 'chest of drawers', 'footstool', 'coffee table', 'nightstand'],
    'Price': [57.08, 47.63, 89.86, 45.99, 65.55, 63.41]
})

# Call the tool to solve the problem
price_difference = calculate_price_difference(furniture_df, 'coffee table', 'wooden stool')
print(price_difference)
```"
Employees at Dalton's Movies tracked the number of movies that customers rented last month. How many customers rented a movie exactly 5 times last month?,3.0,"Number of times | Frequency
0 | 12
1 | 15
2 | 0
3 | 13
4 | 10
5 | 3
6 | 14",8,10171,"import pandas as pd

def count_customers(df, times):
    """"""
    This function takes in a pandas DataFrame representing a frequency table and a number of times, and returns the frequency of the given number of times using pandas.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of times and their frequencies with columns 'Number of times' and 'Frequency'.
    times (int): The number of times to look for in the DataFrame.
    Returns:
    int: The frequency of the given number of times.
    """"""
    # Filter the DataFrame for the specific number of times
    times_df = df[df['Number of times'] == times]
    if not times_df.empty:
        frequency = times_df['Frequency'].values[0]
        return frequency
    else:
        return 0","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of times': [0, 1, 2, 3, 4, 5, 6],
    'Frequency': [12, 15, 0, 13, 10, 3, 14]
})
# Call the tool to solve the problem
count_customers(df, 5)
```"
The members of the science club shared how many times they had been to the zoo last year. How many members went to the zoo at least 3 times?,36.0,"Number of trips | Frequency
0 | 2
1 | 9
2 | 13
3 | 16
4 | 20",8,811,"import pandas as pd

def count_members(df):
    """"""
    This function takes in a pandas dataframe of the number of trips to the zoo and their frequency, and returns the number of members who went to the zoo at least 3 times.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of trips to the zoo and their frequency.
    The dataframe should contain ""Number of trips"" and ""Frequency"" columns.
    Returns:
    int: The number of members who went to the zoo at least 3 times.
    """"""
    # filter the dataframe where the number of trips is greater than or equal to 3
    filtered_df = df[df['Number of trips'] >= 3]
    # sum the frequency column
    num_members = filtered_df['Frequency'].sum()
    return num_members","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of trips': [0, 1, 2, 3, 4],
    'Frequency': [2, 9, 13, 16, 20]
})
# Call the tool to solve the problem
count_members(df)
```"
A cookie factory monitored the number of broken cookies per pack yesterday. How many packs had exactly 38 broken cookies?,4.0,"Stem | Leaf 
2 | 0, 2, 2, 4
3 | 4, 8, 8, 8, 8
4 | 6, 6
5 | 0, 8
6 | 0, 0, 1, 9
7 | 1, 2, 3, 3, 4, 7",8,12956,"import pandas as pd
def count_packs_with_38_broken_cookies(df):
    """"""
    This function takes in a pandas dataframe of broken cookies per pack, and returns the number of packs that have exactly 38 broken cookies.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken cookies per pack.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of packs that have exactly 38 broken cookies.
    """"""
    # prepare a list to calculate cookies in each pack
    cookies = []
    # calculate the total number of broken cookies in each pack
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            cookies.append(stem * 10 + leaf[j])
    # filter the packs where the total number of broken cookies is exactly 38
    filtered = [cookie for cookie in cookies if cookie == 38]
    # count the number of rows
    num_packs = len(filtered)
    return num_packs","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [2, 3, 4, 5, 6, 7],
    'Leaf': [[0, 2, 2, 4], [4, 8, 8, 8, 8], [6, 6], [0, 8], [0, 0, 1, 9], [1, 2, 3, 3, 4, 7]]
})
# Call the tool to solve the problem
count_packs_with_38_broken_cookies(df)
```"
Arianna counted the number of pieces of pepperoni on each pizza she made. What is the smallest number of pieces of pepperoni?,16.0,"Stem | Leaf 
1 | 6, 6
2 | 4
3 | 0, 3, 7, 8
4 | 1, 8",7,12455,"import pandas as pd
def find_smallest_number(df):
    """"""
    This function takes in a pandas dataframe of pepperoni per pizza, and returns the smallest number of pepperoni.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of pepperoni per pizza.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The smallest number of pepperoni.
    """"""
    # prepare a list to calculate pepperoni in each pizza
    pepperoni = []
    # calculate the total number of pepperoni in each pizza
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            pepperoni.append(stem * 10 + leaf[j])
    # find the smallest number of pepperoni
    smallest = min(pepperoni)
    return smallest","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [1, 2, 3, 4],
    'Leaf': [[6, 6], [4], [0, 3, 7, 8], [1, 8]]
})
# Call the tool to solve the problem
print(find_smallest_number(df))
```"
How much more does a designer watch cost than a designer handbag?,2414.0,"designer watch | $3,964.00
designer coat | $1,765.00
designer handbag | $1,550.00
designer ball gown | $7,488.00
pair of designer shoes | $5,748.00
pair of designer boots | $2,038.00",8,1789,"import pandas as pd

def calculate_price_difference(df, item1, item2):
    """"""
    This function takes in a pandas DataFrame representing a table of items and their prices, and two item names, and returns the price difference between the two items.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.
    item1 (str): The name of the first item.
    item2 (str): The name of the second item.
    Returns:
    float: The price difference between the two items.
    """"""
    # Filter the DataFrame for the specific items
    item1_df = df[df['Item'] == item1]
    item2_df = df[df['Item'] == item2]
    
    # Check if the items exist in the DataFrame
    if not item1_df.empty and not item2_df.empty:
        # Get the prices of the items
        item1_price = item1_df['Price'].values[0]
        item2_price = item2_df['Price'].values[0]
        
        # Calculate and return the price difference
        return item1_price - item2_price
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Item': ['designer watch', 'designer coat', 'designer handbag', 'designer ball gown', 'pair of designer shoes', 'pair of designer boots'],
    'Price': [3964.00, 1765.00, 1550.00, 7488.00, 5748.00, 2038.00]
})
# Call the tool to solve the problem
price_difference = calculate_price_difference(df, 'designer watch', 'designer handbag')
print(price_difference)
```"
How much more does a ball signed by a famous football player cost than a book signed by a famous author?,1009.0,"ball signed by a famous football player | $2,322.00
book signed by a famous author | $1,313.00
shirt signed by a famous soccer player | $2,331.00
painting signed by a famous artist | $2,387.00
photograph signed by a famous movie star | $7,634.00
photograph signed by a famous television star | $1,556.00",5,13526,"import pandas as pd

def calculate_price_difference(df, item1, item2):
    """"""
    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the price difference between two items.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.
    item1 (str): The name of the first item.
    item2 (str): The name of the second item.
    Returns:
    float: The price difference between the two items.
    """"""
    # Filter the DataFrame for the specific items
    item1_df = df[df['Item'] == item1]
    item2_df = df[df['Item'] == item2]
    
    # Check if both items are in the DataFrame
    if not item1_df.empty and not item2_df.empty:
        item1_price = item1_df['Price'].values[0]
        item2_price = item2_df['Price'].values[0]
        price_difference = item1_price - item2_price
        return price_difference
    else:
        raise ValueError(""One or both items not found in the DataFrame."")","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Item': ['ball signed by a famous football player', 'book signed by a famous author', 'shirt signed by a famous soccer player', 'painting signed by a famous artist', 'photograph signed by a famous movie star', 'photograph signed by a famous television star'],
    'Price': [2322.00, 1313.00, 2331.00, 2387.00, 7634.00, 1556.00]
})

# Call the tool to solve the problem
price_difference = calculate_price_difference(df, 'ball signed by a famous football player', 'book signed by a famous author')
print(price_difference)
```"
"For an assignment, Marshall looked at which countries got the most Nobel Prizes in various decades. How many more Nobel Prize winners did Canada have in the 1990s than in the 1980s?",5.0,"Country | 1980s | 1990s
Italy | 3 | 1
Japan | 2 | 1
Germany | 11 | 7
Canada | 3 | 8",5,13842,"import pandas as pd

def calculate_difference(df, country, column1, column2):
    """"""
    This function takes in a pandas DataFrame, a country name, and two column names, and returns the difference in the number of Nobel Prize winners between the two columns for the specified country.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of Nobel Prize winners for different countries in different decades.
    country (str): The name of the country.
    column1 (str): The name of the first column.
    column2 (str): The name of the second column.
    Returns:
    int: The difference in the number of Nobel Prize winners between the two columns for the specified country.
    """"""
    # Filter the DataFrame for the specific country
    country_df = df[df['Country'] == country]
    if not country_df.empty:
        # Calculate the difference in the number of Nobel Prize winners between the two columns
        difference = country_df[column2].values[0] - country_df[column1].values[0]
        return difference
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Country': ['Italy', 'Japan', 'Germany', 'Canada'],
    '1980s': [3, 2, 11, 3],
    '1990s': [1, 1, 7, 8]
})
# Call the tool to solve the problem
difference = calculate_difference(df, 'Canada', '1980s', '1990s')
print(difference)
```"
Wayne wants to buy 1+3/10 pounds of chocolate pudding. How much will he spend?,6.5,"rice pudding | $5 per lb
chocolate pudding | $5 per lb
pistachio pudding | $6 per lb
tapioca pudding | $5 per lb
vanilla pudding | $7 per lb",6,10618,"import pandas as pd

def calculate_cost(menu_df, item, weight):
    """"""
    This function takes in a pandas DataFrame representing a menu table, an item name, and the weight of the item to be purchased, and returns the total cost of the item.
    Args:
    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price per lb'.
    item (str): The name of the item to be purchased.
    weight (float): The weight of the item to be purchased.
    Returns:
    float: The total cost of the item.
    """"""
    # Filter the DataFrame for the specific item
    item_df = menu_df[menu_df['Item'] == item]
    if not item_df.empty:
        item_price_per_lb = item_df['Price per lb'].values[0]
        total_cost = weight * item_price_per_lb
        return total_cost
    else:
        return ""Item not found in the menu.""","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
menu_df = pd.DataFrame({
    'Item': ['rice pudding', 'chocolate pudding', 'pistachio pudding', 'tapioca pudding', 'vanilla pudding'],
    'Price per lb': [5, 5, 6, 5, 7]
})

# Call the tool to solve the problem
total_cost = calculate_cost(menu_df, 'chocolate pudding', 1.3)
print(total_cost)
```"
"At a science museum, visitors can compete to see who has a faster reaction time. Competitors watch a red screen, and the moment they see it turn from red to green, they push a button. The machine records their reaction times and also asks competitors to report their gender. What is the probability that a randomly selected competitor was female and reacted in less than 0.3 seconds? Simplify any fractions.",0.2941176471," | Less than 0.3 seconds | 0.3 to 0.7 seconds
Male | 4 | 4
Female | 5 | 4",8,17109,"import pandas as pd

def calculate_probability(df, gender, reaction_time):
    """"""
    This function takes in a pandas DataFrame representing a table of reaction times and genders, and returns the probability that a randomly selected competitor was of a certain gender and had a certain reaction time.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing reaction times and genders with columns 'Less than 0.3 seconds', '0.3 to 0.7 seconds' and index 'Male', 'Female'.
    gender (str): The gender to calculate the probability for.
    reaction_time (str): The reaction time to calculate the probability for.
    Returns:
    float: The probability that a randomly selected competitor was of a certain gender and had a certain reaction time.
    """"""
    # Calculate the total number of competitors
    total_competitors = df.sum().sum()
    
    # Calculate the number of competitors of the specified gender with the specified reaction time
    num_competitors = df.loc[gender, reaction_time]
    
    # Calculate the probability
    probability = num_competitors / total_competitors
    
    return probability","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Less than 0.3 seconds': [4, 5],
    '0.3 to 0.7 seconds': [4, 4]
}, index=['Male', 'Female'])

# Call the tool to solve the problem
probability = calculate_probability(df, 'Female', 'Less than 0.3 seconds')
print(probability)
```"
Juan looked at his e-mail outbox to see how many e-mails he sent each day. What is the median of the numbers?,25.0,"Day | Number of e-mails
Wednesday | 22
Thursday | 35
Friday | 27
Saturday | 22
Sunday | 25",5,12590,"import pandas as pd

def calculate_median(df, column_name):
    """"""
    This function takes in a pandas DataFrame and a column name, and returns the median of the values in the specified column.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the data.
    column_name (str): The name of the column containing the values for which the median should be calculated.
    Returns:
    float: The median of the values in the specified column.
    """"""
    # Sort the DataFrame by the specified column
    sorted_df = df.sort_values(by=column_name)
    
    # Calculate the median
    n = len(sorted_df)
    if n % 2 == 0:
        median1 = sorted_df[column_name].iloc[n//2]
        median2 = sorted_df[column_name].iloc[n//2 - 1]
        median = (median1 + median2) / 2
    else:
        median = sorted_df[column_name].iloc[n//2]
    
    return median","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],
    'Number of e-mails': [22, 35, 27, 22, 25]
})
# Call the tool to solve the problem
median = calculate_median(df, 'Number of e-mails')
print(median)
```"
How much more does a Thoroughbred horse cost than a Morgan horse?,908.0,"Clydesdale horse | $2,509
Hanoverian horse | $9,879
Morgan horse | $1,527
Quarter horse | $6,543
Arabian horse | $5,130
Thoroughbred horse | $2,435",4,8887,"import pandas as pd

def horse_price_difference(horse_df, horse1, horse2):
    """"""
    This function takes in a pandas DataFrame representing a horse price table and the names of two horses, and returns the price difference between the two horses.
    Args:
    horse_df (pd.DataFrame): A pandas DataFrame containing horse breeds and their prices with columns 'Breed' and 'Price'.
    horse1 (str): The name of the first horse breed.
    horse2 (str): The name of the second horse breed.
    Returns:
    float: The price difference between the two horse breeds.
    """"""
    # Filter the DataFrame for the specific horse breeds
    horse1_df = horse_df[horse_df['Breed'] == horse1]
    horse2_df = horse_df[horse_df['Breed'] == horse2]
    
    # Check if both horse breeds are in the DataFrame
    if not horse1_df.empty and not horse2_df.empty:
        horse1_price = horse1_df['Price'].values[0]
        horse2_price = horse2_df['Price'].values[0]
        price_difference = abs(horse1_price - horse2_price)
        return price_difference
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
horse_df = pd.DataFrame({
    'Breed': ['Clydesdale horse', 'Hanoverian horse', 'Morgan horse', 'Quarter horse', 'Arabian horse', 'Thoroughbred horse'],
    'Price': [2509, 9879, 1527, 6543, 5130, 2435]
})

# Call the tool to solve the problem
price_difference = horse_price_difference(horse_df, 'Thoroughbred horse', 'Morgan horse')

# Print the answer
print(f""The Thoroughbred horse costs ${price_difference} more than the Morgan horse."")
```"
How much money does Sanjay need to buy 8 barbecue grills?,4816.0,"leaf blower | $207.00
fountain | $238.00
barbecue grill | $602.00
swing set | $353.00",7,6577,"import pandas as pd

def calculate_cost_for_items(menu_df, item, quantity):
    """"""
    This function takes in a pandas DataFrame representing a menu table, an item and the quantity of the item, and returns the total cost of the item using pandas.
    Args:
    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.
    item (str): The name of the item.
    quantity (int): The quantity of the item.
    Returns:
    float: The total cost of the item.
    """"""
    # Filter the DataFrame for the specific item
    item_df = menu_df[menu_df['Item'] == item]
    if not item_df.empty:
        item_price = item_df['Price'].values[0]
        total_cost = quantity * item_price
    else:
        total_cost = 0.0
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
menu_df = pd.DataFrame({
    'Item': ['leaf blower', 'fountain', 'barbecue grill', 'swing set'],
    'Price': [207.00, 238.00, 602.00, 353.00]
})

# Call the tool to solve the problem
total_cost = calculate_cost_for_items(menu_df, 'barbecue grill', 8)
print(total_cost)
```"
"For a social studies project, Bridget counted the number of classrooms in each school in the city. How many schools have at least 30 classrooms?",19.0,"Stem | Leaf 
2 | 3, 4, 4, 6
3 | 0, 2, 2, 3, 5, 5, 6, 7, 8
4 | 2, 2, 2, 2, 6, 9, 9
5 | 0, 8, 9",7,15857,"import pandas as pd
def count_schools_with_30_classrooms(df):
    """"""
    This function takes in a pandas dataframe of the number of classrooms in each school, and returns the number of schools that have at least 30 classrooms.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of classrooms in each school.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of schools that have at least 30 classrooms.
    """"""
    # prepare a list to calculate classrooms in each school
    classrooms = []
    # calculate the total number of classrooms in each school
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            classrooms.append(stem * 10 + leaf[j])
    # filter the schools where the total number of classrooms is greater than or equal to 30
    filtered = [classroom for classroom in classrooms if classroom >= 30]
    # count the number of rows
    num_schools = len(filtered)
    return num_schools","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [2, 3, 4, 5],
    'Leaf': [[3, 4, 4, 6], [0, 2, 2, 3, 5, 5, 6, 7, 8], [2, 2, 2, 2, 6, 9, 9], [0, 8, 9]]
})
# Call the tool to solve the problem
count_schools_with_30_classrooms(df)
```"
A high school basketball coach counted the number of points her team scored each game. What is the smallest number of points?,20.0,"Stem | Leaf 
2 | 0, 4
3 | 4, 5
4 | 9
5 | 6, 7, 8
6 | 0, 6, 6
7 | 5, 6
8 | 0, 4, 5, 5
9 | 0",7,11036,"import pandas as pd

def find_smallest_points(df):
    """"""
    This function takes in a pandas dataframe of points scored per game, and returns the smallest number of points scored.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of points scored per game.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The smallest number of points scored.
    """"""
    # prepare a list to calculate points in each game
    points = []
    # calculate the total number of points in each game
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            points.append(stem * 10 + leaf[j])
    # find the smallest number of points
    smallest_points = min(points)
    return smallest_points","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],
    'Leaf': [[0, 4], [4, 5], [9], [6, 7, 8], [0, 6, 6], [5, 6], [0, 4, 5, 5], [0]]
})
# Call the tool to solve the problem
find_smallest_points(df)
```"
The Hampton Chamber of Commerce compared the local dealerships' vehicle sales. What fraction of the vehicles were sold by Tri-City Cars? Simplify your answer.,0.4479638009,"Dealership | Number of vehicles
Clearance Cars | 770
Best-Value Autos | 180
Tri-City Cars | 990
Other | 270",7,861,"import pandas as pd
from fractions import Fraction

def calculate_fraction(df, dealership_name):
    """"""
    This function takes in a pandas DataFrame representing a table of vehicle sales by dealership and a dealership name, and returns the fraction of vehicles sold by the specified dealership.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing dealership names and the number of vehicles sold with columns 'Dealership' and 'Number of vehicles'.
    dealership_name (str): The name of the dealership.
    Returns:
    Fraction: The fraction of vehicles sold by the specified dealership.
    """"""
    # Filter the DataFrame for the specific dealership
    dealership_df = df[df['Dealership'] == dealership_name]
    if not dealership_df.empty:
        # Calculate the total number of vehicles sold
        total_vehicles = df['Number of vehicles'].sum()
        # Calculate the number of vehicles sold by the specified dealership
        dealership_vehicles = dealership_df['Number of vehicles'].values[0]
        # Calculate and return the fraction of vehicles sold by the specified dealership
        return Fraction(dealership_vehicles, total_vehicles).limit_denominator()
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Dealership': ['Clearance Cars', 'Best-Value Autos', 'Tri-City Cars', 'Other'],
    'Number of vehicles': [770, 180, 990, 270]
})
# Call the tool to solve the problem
fraction = calculate_fraction(df, 'Tri-City Cars')
print(fraction)
```"
The county released data about how many schools there are in each town. What is the mean of the numbers?,6.0,"Town | Number of schools
Greenwood | 2
Richmond | 7
Mayfield | 4
Salem | 9
Ashland | 7
Chesterton | 7",6,12987,"import pandas as pd
import numpy as np

def calculate_mean(df):
    """"""
    This function takes in a pandas DataFrame representing a table of towns and their number of schools, and returns the mean number of schools.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing town names and their number of schools with columns 'Town' and 'Number of schools'.
    Returns:
    float: The mean number of schools.
    """"""
    # Calculate the mean of the 'Number of schools' column
    mean = np.mean(df['Number of schools'])
    
    return mean","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Town': ['Greenwood', 'Richmond', 'Mayfield', 'Salem', 'Ashland', 'Chesterton'],
    'Number of schools': [2, 7, 4, 9, 7, 7]
})

# Call the tool to solve the problem
mean = calculate_mean(df)
print(mean)
```"
"As part of a statistics project, a math class weighed all the children who were willing to participate. What is the weight of the lightest child?",21.0,"Stem | Leaf 
2 | 1
3 | 
4 | 2, 3, 5, 6
5 | 7, 9, 9
6 | 1",8,12012,"import pandas as pd

def find_lightest_child(df):
    """"""
    This function takes in a pandas dataframe of children's weights, and returns the weight of the lightest child.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the weights of children.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The weight of the lightest child.
    """"""
    # prepare a list to calculate weight of each child
    weights = []
    # calculate the weight of each child
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            weights.append(stem * 10 + leaf[j])
    # find the minimum weight
    min_weight = min(weights)
    return min_weight","We should first create a pandas dataframe with the data from the table. Note that some elements are empty, so we need to fill them with empty lists. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [2, 3, 4, 5, 6],
    'Leaf': [[1], [], [2, 3, 5, 6], [7, 9, 9], [1]]
})
# Call the tool to solve the problem
print(find_lightest_child(df))
```"
Mr. Clarke recorded the scores of his students on the most recent math quiz. How many students are there in all?,53.0,"Score | Frequency
5 | 13
6 | 2
7 | 8
8 | 11
9 | 4
10 | 15",8,2878,"import pandas as pd

def calculate_total_students(score_frequency_df):
    """"""
    This function takes in a pandas DataFrame representing a score frequency table and returns the total number of students.
    Args:
    score_frequency_df (pd.DataFrame): A pandas DataFrame containing scores and their frequencies with columns 'Score' and 'Frequency'.
    Returns:
    int: The total number of students.
    """"""
    # Calculate the total number of students by summing the frequencies
    total_students = score_frequency_df['Frequency'].sum()
    
    return total_students","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Score': [5, 6, 7, 8, 9, 10],
    'Frequency': [13, 2, 8, 11, 4, 15]
})
# Call the tool to solve the problem
total_students = calculate_total_students(df)
print(total_students)
```"
Norwood Property Management reviewed the number of vacant apartments at each its apartment complexes over time. How many more vacant apartments did University Apartments have in August than in September?,3.0,"Apartment complex | August | September
Shadyside Apartments | 2 | 5
Creekside Apartments | 1 | 9
University Apartments | 19 | 16",4,5497,"import pandas as pd

def calculate_difference_vacant_apartments(df, complex_name, month1, month2):
    """"""
    This function takes in a pandas DataFrame representing a table of vacant apartments, the name of the apartment complex, and two months, and returns the difference in the number of vacant apartments between the two months.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of vacant apartments per complex and month with columns 'Apartment complex', 'August', 'September'.
    complex_name (str): The name of the apartment complex to calculate the difference for.
    month1 (str): The first month to compare.
    month2 (str): The second month to compare.
    Returns:
    int: The difference in the number of vacant apartments between the two months for the specified apartment complex.
    """"""
    # Filter the DataFrame for the specific apartment complex
    complex_df = df[df['Apartment complex'] == complex_name]
    
    if not complex_df.empty:
        # Get the number of vacant apartments for each month
        vacant_month1 = complex_df[month1].values[0]
        vacant_month2 = complex_df[month2].values[0]
        
        # Calculate the difference in the number of vacant apartments
        difference = vacant_month1 - vacant_month2
        
        return difference
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Apartment complex': ['Shadyside Apartments', 'Creekside Apartments', 'University Apartments'],
    'August': [2, 1, 19],
    'September': [5, 9, 16]
})

# Call the tool to solve the problem
difference = calculate_difference_vacant_apartments(df, 'University Apartments', 'August', 'September')
print(difference)
```"
How much money does Troy need to buy 3 chameleons and 5 finches?,477.0,"pot-bellied pig | $74
finch | $57
scorpion | $47
chameleon | $64
chinchilla | $83
cockatoo | $40",8,5859,"import pandas as pd

def calculate_total_cost(menu_df, orders):
    """"""
    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.
    Args:
    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.
    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.
    Returns:
    float: The total cost of the orders.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the menu items and calculate the cost for each ordered item
    for item, quantity in orders.items():
        # Filter the DataFrame for the specific item
        item_df = menu_df[menu_df['Item'] == item]
        if not item_df.empty:
            item_price = item_df['Price'].values[0]
            total_cost += quantity * item_price
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we create a dictionary of orders with the number of chameleons and finches Troy wants to buy. Finally, we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
menu_df = pd.DataFrame({
    'Item': ['pot-bellied pig', 'finch', 'scorpion', 'chameleon', 'chinchilla', 'cockatoo'],
    'Price': [74, 57, 47, 64, 83, 40]
})

# Create a dictionary of orders
orders = {'chameleon': 3, 'finch': 5}

# Call the tool to solve the problem
total_cost = calculate_total_cost(menu_df, orders)
print(total_cost)
```"
"Each year the Georgetown School District publishes its annual budget, which includes information on the sports program's per-student spending. According to the table, what was the rate of change between 2011 and 2012?",1.0,"Year | Per-student budget
2010 | $34
2011 | $48
2012 | $49
2013 | $39
2014 | $40",7,9519,"import pandas as pd

def calculate_rate_of_change(df, start_year, end_year):
    """"""
    This function takes in a pandas DataFrame representing a budget table and two years, and returns the rate of change of the per-student budget between the two years.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing years and per-student budgets with columns 'Year' and 'Per-student budget'.
    start_year (int): The start year for the rate of change calculation.
    end_year (int): The end year for the rate of change calculation.
    Returns:
    float: The rate of change of the per-student budget between the two years.
    """"""
    # Filter the DataFrame for the start year and end year
    start_year_df = df[df['Year'] == start_year]
    end_year_df = df[df['Year'] == end_year]
    
    # Check if the start year and end year exist in the DataFrame
    if not start_year_df.empty and not end_year_df.empty:
        # Calculate the rate of change
        start_year_budget = start_year_df['Per-student budget'].values[0]
        end_year_budget = end_year_df['Per-student budget'].values[0]
        rate_of_change = (end_year_budget - start_year_budget) / start_year_budget
        return rate_of_change
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Year': [2010, 2011, 2012, 2013, 2014],
    'Per-student budget': [34, 48, 49, 39, 40]
})
# Call the tool to solve the problem
rate_of_change = calculate_rate_of_change(df, 2011, 2012)
print(rate_of_change)
```"
Hakim has $6.90. How much money will Hakim have left if he buys a textbook and a mystery novel?,1.59,"hardcover book | $2.61
spelling workbook | $2.08
poetry book | $3.15
textbook | $2.37
mystery novel | $2.94",5,5038,"import pandas as pd

def calculate_remaining_money(menu_df, budget, items):
    """"""
    This function takes in a pandas DataFrame representing a menu table, a budget, and a list of items to buy, and returns the remaining money after buying the items using pandas.
    Args:
    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.
    budget (float): The initial budget.
    items (list): A list of item names to buy.
    Returns:
    float: The remaining money after buying the items.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the items and calculate the cost for each item
    for item in items:
        # Filter the DataFrame for the specific item
        item_df = menu_df[menu_df['Item'] == item]
        if not item_df.empty:
            item_price = item_df['Price'].values[0]
            total_cost += item_price
    
    # Calculate the remaining money
    remaining_money = budget - total_cost
    
    return remaining_money","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
menu_df = pd.DataFrame({
    'Item': ['hardcover book', 'spelling workbook', 'poetry book', 'textbook', 'mystery novel'],
    'Price': [2.61, 2.08, 3.15, 2.37, 2.94]
})

# Call the tool to solve the problem
remaining_money = calculate_remaining_money(menu_df, 6.90, ['textbook', 'mystery novel'])
print(f""Hakim will have ${remaining_money:.2f} left."")
```"
Each package has 10 erasers. How many erasers are in 3 packages?,30.0,"Number of packages | Number of erasers
1 | 10
2 | 20
3 | ?",2,659,"def calculate_erasers_in_packages(df, num_packages):
    """"""
    This function takes in a pandas DataFrame representing a table of packages and erasers, and a number of packages, and returns the number of erasers in the given number of packages.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of packages and the corresponding number of erasers with columns 'Number of packages' and 'Number of erasers'.
    num_packages (int): The number of packages.
    Returns:
    int: The number of erasers in the given number of packages.
    """"""
    # Find the number of erasers per package
    erasers_per_package = df['Number of erasers'][0] / df['Number of packages'][0]
    
    # Calculate the number of erasers in the given number of packages
    num_erasers = erasers_per_package * num_packages
    
    return num_erasers","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of packages': [1, 2, 3],
    'Number of erasers': [10, 20, '?']
})
# Call the tool to solve the problem
num_erasers = calculate_erasers_in_packages(df, 3)
print(f'There are {num_erasers} erasers in 3 packages.')
```"
A cookie factory monitored the number of broken cookies per pack yesterday. How many packs had at least 20 broken cookies but less than 40 broken cookies?,6.0,"Stem | Leaf 
1 | 1, 3, 4, 5, 8, 9
2 | 0, 1, 1
3 | 1, 5, 7
4 | 8",6,8092,"import pandas as pd
def count_bags_with_20_to_40_broken_cookies(df):
    """"""
    This function takes in a pandas dataframe of broken cookies per pack, and returns the number of packs that have at least 20 but less than 40 broken cookies.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken cookies per pack.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of packs that have at least 20 but less than 40 broken cookies.
    """"""
    # prepare a list to calculate cookies in each pack
    cookies = []
    # calculate the total number of broken cookies in each pack
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            cookies.append(stem * 10 + leaf[j])
    # filter the packs where the total number of broken cookies is greater than or equal to 20 but less than 40
    filtered = [cookie for cookie in cookies if cookie >= 20 and cookie < 40]
    # count the number of rows
    num_packs = len(filtered)
    return num_packs","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [1, 2, 3, 4],
    'Leaf': [[1, 3, 4, 5, 8, 9], [0, 1, 1], [1, 5, 7], [8]]
})
# Call the tool to solve the problem
count_bags_with_20_to_40_broken_cookies(df)
```"
How much money does Tim need to buy a jar of grape jelly and a jar of tomato sauce?,5.52,"jar of tomato sauce | $3.24
jar of grape jelly | $2.28
bottle of chocolate syrup | $1.83
bottle of vegetable oil | $2.91",8,8237,"import pandas as pd

def calculate_total_cost(menu_df, orders):
    """"""
    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.
    Args:
    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.
    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.
    Returns:
    float: The total cost of the orders.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the menu items and calculate the cost for each ordered item
    for item, quantity in orders.items():
        # Filter the DataFrame for the specific item
        item_df = menu_df[menu_df['Item'] == item]
        if not item_df.empty:
            item_price = item_df['Price'].values[0]
            total_cost += quantity * item_price
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we create a dictionary of orders. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
menu_df = pd.DataFrame({
    'Item': ['jar of tomato sauce', 'jar of grape jelly', 'bottle of chocolate syrup', 'bottle of vegetable oil'],
    'Price': [3.24, 2.28, 1.83, 2.91]
})

# Initialize the orders
orders = {
    'jar of tomato sauce': 1,
    'jar of grape jelly': 1
}

# Call the tool to solve the problem
total_cost = calculate_total_cost(menu_df, orders)
print(f'Tim needs ${total_cost} to buy a jar of grape jelly and a jar of tomato sauce.')
```"
What is the total cost for 1+1/4 pounds of farfalle pasta?,8.75,"penne pasta | $5 per pound
spirali pasta | $4 per pound
farfalle pasta | $7 per pound
rotini pasta | $6 per pound
fusilli pasta | $4 per pound
rigatoni pasta | $5 per pound",6,7519,"import pandas as pd

def calculate_cost_for_weight(df, item, weight):
    """"""
    This function takes in a pandas DataFrame representing a price table, an item name, and a weight, and returns the total cost of the item for the given weight.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing items and their prices per pound with columns 'Item' and 'Price per pound'.
    item (str): The name of the item.
    weight (float): The weight of the item.
    Returns:
    float: The total cost of the item for the given weight.
    """"""
    # Filter the DataFrame for the specific item
    item_df = df[df['Item'] == item]
    if not item_df.empty:
        # Extract the price per pound for the item
        price_per_pound = item_df['Price per pound'].values[0]
        # Calculate the total cost for the given weight
        total_cost = weight * price_per_pound
        return total_cost
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Item': ['penne pasta', 'spirali pasta', 'farfalle pasta', 'rotini pasta', 'fusilli pasta', 'rigatoni pasta'],
    'Price per pound': [5, 4, 7, 6, 4, 5]
})

# Call the tool to solve the problem
weight = 1 + 1/4
item = 'farfalle pasta'
total_cost = calculate_cost_for_weight(df, item, weight)
print(total_cost)
```"
How much more does a board game cost than a jar of clay?,7.75,"toy dinosaur | $4.78
jar of clay | $2.12
board game | $9.87
mystery game | $8.84
trivia game | $9.92",8,10045,"import pandas as pd

def calculate_price_difference(df, item1, item2):
    """"""
    This function takes in a pandas DataFrame representing a price list and two item names, and returns the price difference between the two items.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.
    item1 (str): The name of the first item.
    item2 (str): The name of the second item.
    Returns:
    float: The price difference between the two items.
    """"""
    # Filter the DataFrame for the specific items
    item1_df = df[df['Item'] == item1]
    item2_df = df[df['Item'] == item2]
    
    # Check if the items exist in the DataFrame
    if not item1_df.empty and not item2_df.empty:
        item1_price = item1_df['Price'].values[0]
        item2_price = item2_df['Price'].values[0]
        
        # Calculate and return the price difference
        return abs(item1_price - item2_price)
    else:
        return None","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Item': ['toy dinosaur', 'jar of clay', 'board game', 'mystery game', 'trivia game'],
    'Price': [4.78, 2.12, 9.87, 8.84, 9.92]
})

# Call the tool to solve the problem
price_difference = calculate_price_difference(df, 'board game', 'jar of clay')

# Print the answer
print(price_difference)
```"
"For a social studies project, Pedro counted the number of classrooms in each school in the city. What is the smallest number of classrooms?",26.0,"Stem | Leaf 
2 | 6
3 | 
4 | 3, 9
5 | 
6 | 5, 9
7 | 0",4,8616,"import pandas as pd

def find_smallest_number(df):
    """"""
    This function takes in a pandas dataframe of stem and leaf plot, and returns the smallest number.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the stem and leaf plot.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The smallest number in the stem and leaf plot.
    """"""
    # prepare a list to calculate numbers in the plot
    numbers = []
    # calculate the total number of classrooms in each school
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            numbers.append(stem * 10 + leaf[j])
    # find the smallest number
    smallest_number = min(numbers)
    return smallest_number","We should first create a pandas dataframe with the data from the table. Note that some elements are empty, so we need to fill them with empty lists. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [2, 3, 4, 5, 6, 7],
    'Leaf': [[6], [], [3, 9], [], [5, 9], [0]]
})
# Call the tool to solve the problem
find_smallest_number(df)
```"
Braden has $127.00. How much money will Braden have left if he buys a red clay pot and a hammock?,26.0,"red clay pot | $29.00
hammock | $72.00
fountain | $67.00
leaf blower | $65.00
lawn chair | $14.00",4,9746,"import pandas as pd

def calculate_remaining_money(menu_df, orders, initial_money):
    """"""
    This function takes in a pandas DataFrame representing a menu table, a dictionary of orders, and the initial amount of money, and returns the remaining money after purchasing the items using pandas.
    Args:
    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.
    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.
    initial_money (float): The initial amount of money.
    Returns:
    float: The remaining money after purchasing the items.
    """"""
    # Calculate the total cost of the orders
    total_cost = calculate_total_cost(menu_df, orders)
    
    # Calculate the remaining money
    remaining_money = initial_money - total_cost
    
    return remaining_money","We should first create a pandas dataframe with the data from the table. Then we create a dictionary of orders. Finally, we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Item': ['red clay pot', 'hammock', 'fountain', 'leaf blower', 'lawn chair'],
    'Price': [29.00, 72.00, 67.00, 65.00, 14.00]
})

# Initialize the orders
orders = {'red clay pot': 1, 'hammock': 1}

# Call the tool to solve the problem
remaining_money = calculate_remaining_money(df, orders, 127.00)

# Print the remaining money
print(remaining_money)
```"
An insurance company compiled the number of doctor visits made by some patients last year. How many patients did not go to the doctor last year?,14.0,"Number of trips | Frequency
0 | 14
1 | 4
2 | 15
3 | 5
4 | 10
5 | 19",7,16818,"import pandas as pd

def count_patients_with_no_visits(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of doctor visits and returns the number of patients who did not go to the doctor last year.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of doctor visits and their frequencies with columns 'Number of trips' and 'Frequency'.
    Returns:
    int: The number of patients who did not go to the doctor last year.
    """"""
    # Filter the DataFrame for the patients who did not go to the doctor
    no_visit_df = df[df['Number of trips'] == 0]
    
    # If there are no such patients, return 0
    if no_visit_df.empty:
        return 0
    
    # Otherwise, return the frequency of patients who did not go to the doctor
    return no_visit_df['Frequency'].values[0]","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of trips': [0, 1, 2, 3, 4, 5],
    'Frequency': [14, 4, 15, 5, 10, 19]
})

# Call the tool to solve the problem
print(count_patients_with_no_visits(df))
```"
Scarlett's class recorded how many states each student has visited. What is the range of the numbers?,8.0,"Name | Number of states
Scarlett | 46
Nancy | 42
Dillon | 46
Wyatt | 42
Luca | 38
Cara | 42
Kenneth | 46",5,1823,"import pandas as pd

def calculate_range(df):
    """"""
    This function takes in a pandas DataFrame representing a table of students and the number of states they have visited, and returns the range of the numbers using pandas.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing student names and the number of states they have visited with columns 'Name' and 'Number of states'.
    Returns:
    int: The range of the numbers of states visited.
    """"""
    # Calculate the maximum and minimum number of states visited
    max_states = df['Number of states'].max()
    min_states = df['Number of states'].min()
    
    # Calculate the range
    range_states = max_states - min_states
    
    return range_states","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Name': ['Scarlett', 'Nancy', 'Dillon', 'Wyatt', 'Luca', 'Cara', 'Kenneth'],
    'Number of states': [46, 42, 46, 42, 38, 42, 46]
})

# Call the tool to solve the problem
range_states = calculate_range(df)

# Print the answer
print(range_states)
```"
A flight attendant was counting the number of passengers present to see if any upgrades could be offered. The flight attendant's list contained passengers' Frequent Flyer status as well as number of bags checked. What is the probability that a randomly selected passenger has 0 checked bags and silver status? Simplify any fractions.,0.375," | Bronze status | Silver status
0 checked bags | 3 | 6
1 checked bag | 5 | 2",8,3734,"import pandas as pd

def calculate_probability(df):
    """"""
    This function takes in a pandas DataFrame representing a table of passengers' Frequent Flyer status and number of bags checked, and returns the probability that a randomly selected passenger has 0 checked bags and silver status.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing passengers' Frequent Flyer status and number of bags checked with columns 'Bronze status', 'Silver status' and index '0 checked bags', '1 checked bag'.
    Returns:
    float: The probability that a randomly selected passenger has 0 checked bags and silver status.
    """"""
    # Calculate the total number of passengers
    total_passengers = df['Bronze status'].sum() + df['Silver status'].sum()
    
    # Calculate the number of passengers with 0 checked bags and silver status
    passengers_with_0_checked_bags_and_silver_status = df.loc['0 checked bags', 'Silver status']
    
    # Calculate the probability
    probability = passengers_with_0_checked_bags_and_silver_status / total_passengers
    
    return probability","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Bronze status': [3, 5],
    'Silver status': [6, 2]
}, index=['0 checked bags', '1 checked bag'])

# Call the tool to solve the problem
probability = calculate_probability(df)

# Print the answer
print(f""The probability that a randomly selected passenger has 0 checked bags and silver status is {probability}."")
```"
Each twig has 5 grasshoppers. How many grasshoppers are on 4 twigs?,20.0,"Number of twigs | Number of grasshoppers
1 | 5
2 | 10
3 | 15
4 | ?",2,2965,"def calculate_grasshoppers_on_twigs(twigs):
    """"""
    This function takes in the number of twigs and returns the number of grasshoppers on the twigs, given that each twig has 5 grasshoppers.
    Args:
    twigs (int): The number of twigs.
    Returns:
    int: The number of grasshoppers on the twigs.
    """"""
    grasshoppers = twigs * 5
    return grasshoppers","```python
# Call the tool to solve the problem
calculate_grasshoppers_on_twigs(4)
```"
A newspaper researched how many grocery stores there are in each town. What is the mode of the numbers?,7.0,"Town | Number of stores
Mayfield | 7
Watertown | 8
Richmond | 7
Greenwood | 10
Chesterton | 7
Springfield | 10",6,2241,"import pandas as pd
from scipy import stats

def calculate_mode(df):
    """"""
    This function takes in a pandas DataFrame representing a table of towns and their number of stores, and returns the mode of the number of stores using pandas and scipy.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing town names and their number of stores with columns 'Town' and 'Number of stores'.
    Returns:
    int: The mode of the number of stores.
    """"""
    # Extract the 'Number of stores' column
    stores = df['Number of stores']
    
    # Calculate and return the mode
    mode = stats.mode(stores)
    
    return mode.mode[0]","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Town': ['Mayfield', 'Watertown', 'Richmond', 'Greenwood', 'Chesterton', 'Springfield'],
    'Number of stores': [7, 8, 7, 10, 7, 10]
})

# Call the tool to solve the problem
calculate_mode(df)
```"
How much money does Kayla need to buy a broom and a mop?,15.0,"broom | $7
bucket | $3
measuring tape | $3
mop | $8
wrench | $5
padlock | $6",3,9670,"import pandas as pd

def calculate_total_cost(menu_df, orders):
    """"""
    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.
    Args:
    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.
    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.
    Returns:
    float: The total cost of the orders.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the menu items and calculate the cost for each ordered item
    for item, quantity in orders.items():
        # Filter the DataFrame for the specific item
        item_df = menu_df[menu_df['Item'] == item]
        if not item_df.empty:
            item_price = item_df['Price'].values[0]
            total_cost += quantity * item_price
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we create a dictionary for the orders. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
menu_df = pd.DataFrame({
    'Item': ['broom', 'bucket', 'measuring tape', 'mop', 'wrench', 'padlock'],
    'Price': [7, 3, 3, 8, 5, 6]
})

# Initialize the orders
orders = {'broom': 1, 'mop': 1}

# Call the tool to solve the problem
total_cost = calculate_total_cost(menu_df, orders)
print(f'Kayla needs ${total_cost} to buy a broom and a mop.')
```"
An architecture student measured the heights of all the buildings downtown. How many buildings are less than 30 meters tall?,3.0,"Stem | Leaf 
1 | 5
2 | 1, 2
3 | 1, 2, 3, 4, 5, 7
4 | 0, 3, 3, 4, 5, 6, 6
5 | 1, 2, 4, 4",6,3922,"import pandas as pd
def count_buildings_less_than_30_meters(df):
    """"""
    This function takes in a pandas dataframe of building heights, and returns the number of buildings that are less than 30 meters tall.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the heights of buildings.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of buildings that are less than 30 meters tall.
    """"""
    # prepare a list to calculate height of each building
    heights = []
    # calculate the height of each building
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            heights.append(stem * 10 + leaf[j])
    # filter the buildings where the height is less than 30 meters
    filtered = [height for height in heights if height < 30]
    # count the number of rows
    num_buildings = len(filtered)
    return num_buildings","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [1, 2, 3, 4, 5],
    'Leaf': [[5], [1, 2], [1, 2, 3, 4, 5, 7], [0, 3, 3, 4, 5, 6, 6], [1, 2, 4, 4]]
})
# Call the tool to solve the problem
count_buildings_less_than_30_meters(df)
```"
"Juan kept track of how long it took to finish his homework each day. According to the table, what was the rate of change between Tuesday and Wednesday?",-6.0,"Day | Minutes
Tuesday | 21
Wednesday | 15
Thursday | 13
Friday | 17
Saturday | 18",8,2276,"import pandas as pd

def calculate_rate_of_change(df, day1, day2):
    """"""
    This function takes in a pandas DataFrame representing a table of days and minutes, and two days, and returns the rate of change between the two days.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing days and minutes with columns 'Day' and 'Minutes'.
    day1 (str): The first day.
    day2 (str): The second day.
    Returns:
    float: The rate of change between the two days.
    """"""
    # Filter the DataFrame for the specific days
    day1_df = df[df['Day'] == day1]
    day2_df = df[df['Day'] == day2]
    
    # Check if the days are in the DataFrame
    if not day1_df.empty and not day2_df.empty:
        # Calculate the rate of change
        rate_of_change = (day2_df['Minutes'].values[0] - day1_df['Minutes'].values[0]) / 1
        return rate_of_change
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    'Minutes': [21, 15, 13, 17, 18]
})
# Call the tool to solve the problem
rate_of_change = calculate_rate_of_change(df, 'Tuesday', 'Wednesday')
print(rate_of_change)
```"
"A school administrator who was concerned about grade inflation looked over the number of straight-A students from year to year. According to the table, what was the rate of change between 2011 and 2012?",-6.0,"Year | Students
2009 | 7
2010 | 24
2011 | 24
2012 | 18
2013 | 9",7,7160,"import pandas as pd

def calculate_rate_of_change(df, start_year, end_year):
    """"""
    This function takes in a pandas DataFrame representing a table of the number of straight-A students per year and two years, and returns the rate of change of the number of straight-A students between the two years.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing years and the number of straight-A students with columns 'Year' and 'Students'.
    start_year (int): The start year for the rate of change calculation.
    end_year (int): The end year for the rate of change calculation.
    Returns:
    float: The rate of change of the number of straight-A students between the two years.
    """"""
    # Filter the DataFrame for the start year and end year
    start_year_df = df[df['Year'] == start_year]
    end_year_df = df[df['Year'] == end_year]
    
    # Check if the start year and end year exist in the DataFrame
    if not start_year_df.empty and not end_year_df.empty:
        # Calculate the rate of change
        start_year_students = start_year_df['Students'].values[0]
        end_year_students = end_year_df['Students'].values[0]
        rate_of_change = (end_year_students - start_year_students) / start_year_students
        return rate_of_change
    else:
        return None","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Year': [2009, 2010, 2011, 2012, 2013],
    'Students': [7, 24, 24, 18, 9]
})

# Call the tool to solve the problem
rate_of_change = calculate_rate_of_change(df, 2011, 2012)
print(rate_of_change)
```"
Mary looked at her e-mail outbox to see how many e-mails she sent each day. What is the mode of the numbers?,67.0,"Day | Number of e-mails
Wednesday | 84
Thursday | 67
Friday | 71
Saturday | 71
Sunday | 67
Monday | 67
Tuesday | 84",5,10944,"import pandas as pd
from collections import Counter

def calculate_mode(df):
    """"""
    This function takes in a pandas DataFrame representing a table of days and number of emails, and returns the mode of the number of emails.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing days and number of emails with columns 'Day' and 'Number of e-mails'.
    Returns:
    int: The mode of the number of emails.
    """"""
    # Extract the 'Number of e-mails' column
    emails = df['Number of e-mails']
    
    # Calculate the frequency of each number of emails
    counter = Counter(emails)
    
    # Find the number of emails with the highest frequency
    mode = counter.most_common(1)[0][0]
    
    return mode","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],
    'Number of e-mails': [84, 67, 71, 71, 67, 67, 84]
})
# Call the tool to solve the problem
calculate_mode(df)
```"
An archer recalled how many times he hit the bull's-eye in the past 7 days. What is the mode of the numbers?,9.0,"Day | Number of bull's-eyes
Wednesday | 9
Thursday | 8
Friday | 9
Saturday | 8
Sunday | 9
Monday | 11
Tuesday | 11",5,2620,"import pandas as pd
from collections import Counter

def calculate_mode(df):
    """"""
    This function takes in a pandas DataFrame containing the number of bull's-eyes per day and returns the mode of the numbers.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of bull's-eyes per day with columns 'Day' and 'Number of bull's-eyes'.
    Returns:
    int: The mode of the numbers.
    """"""
    # Extract the number of bull's-eyes column
    bullseyes = df[""Number of bull's-eyes""].tolist()
    
    # Calculate the frequency of each number
    counter = Counter(bullseyes)
    
    # Find the mode
    mode = counter.most_common(1)[0][0]
    
    return mode","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],
    'Number of bull\'s-eyes': [9, 8, 9, 8, 9, 11, 11]
})
# Call the tool to solve the problem
mode = calculate_mode(df)
print(mode)
```"
A front desk clerk looked up how many guests the hotel had each day. What is the range of the numbers?,22.0,"Day | Number of guests
Friday | 50
Saturday | 34
Sunday | 38
Monday | 56
Tuesday | 38
Wednesday | 46
Thursday | 53",5,8161,"import pandas as pd

def calculate_range(df):
    """"""
    This function takes in a pandas DataFrame containing a column of numbers and returns the range of the numbers.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing a column of numbers.
    Returns:
    int: The range of the numbers in the DataFrame.
    """"""
    # Find the minimum and maximum values in the DataFrame
    min_value = df['Number of guests'].min()
    max_value = df['Number of guests'].max()
    
    # Calculate the range
    range_value = max_value - min_value
    
    return range_value","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'],
    'Number of guests': [50, 34, 38, 56, 38, 46, 53]
})

# Call the tool to solve the problem
range_value = calculate_range(df)
print(range_value)
```"
How much money does Lillian need to buy a fountain and a picnic table?,690.0,"picnic table | $427.00
fountain | $263.00
swing set | $378.00
iron bench | $198.00
lawn mower | $221.00",5,12896,"import pandas as pd

def calculate_total_cost(menu_df, orders):
    """"""
    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.
    Args:
    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.
    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.
    Returns:
    float: The total cost of the orders.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the menu items and calculate the cost for each ordered item
    for item, quantity in orders.items():
        # Filter the DataFrame for the specific item
        item_df = menu_df[menu_df['Item'] == item]
        if not item_df.empty:
            item_price = item_df['Price'].values[0]
            total_cost += quantity * item_price
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
menu_df = pd.DataFrame({
    'Item': ['picnic table', 'fountain', 'swing set', 'iron bench', 'lawn mower'],
    'Price': [427.00, 263.00, 378.00, 198.00, 221.00]
})

# Define the orders
orders = {'fountain': 1, 'picnic table': 1}

# Call the tool to solve the problem
total_cost = calculate_total_cost(menu_df, orders)
print(total_cost)
```"
Krysta tracked how many laps she ran in the past 5 days. What is the median of the numbers?,7.0,"Day | Number of laps
Thursday | 5
Friday | 9
Saturday | 10
Sunday | 7
Monday | 7",8,4441,"import pandas as pd
import numpy as np

def calculate_median(df):
    """"""
    This function takes in a pandas DataFrame representing a table of days and number of laps, and returns the median number of laps.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing days and number of laps with columns 'Day' and 'Number of laps'.
    Returns:
    float: The median number of laps.
    """"""
    # Extract the 'Number of laps' column and calculate its median
    median_laps = np.median(df['Number of laps'])
    
    return median_laps","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday'],
    'Number of laps': [5, 9, 10, 7, 7]
})

# Call the tool to solve the problem
median_laps = calculate_median(df)

# Print the answer
print(median_laps)
```"
"Mr. Hatfield, a P.E. teacher, wrote down how much weight each of his students could lift. How many people lifted less than 55 pounds?",1.0,"Stem | Leaf 
5 | 2
6 | 9
7 | 1, 3
8 | 3
9 | 0",8,16335,"import pandas as pd

def count_students_lifting_less_than_55(df):
    """"""
    This function takes in a pandas dataframe of students' weight lifting records, and returns the number of students who lifted less than 55 pounds.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the weight lifting records of students.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of students who lifted less than 55 pounds.
    """"""
    # prepare a list to store the weights lifted by each student
    weights = []
    # calculate the weight lifted by each student
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            weights.append(stem * 10 + leaf[j])
    # filter the students who lifted less than 55 pounds
    filtered = [weight for weight in weights if weight < 55]
    # count the number of students
    num_students = len(filtered)
    return num_students","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [5, 6, 7, 8, 9],
    'Leaf': [[2], [9], [1, 3], [3], [0]]
})
# Call the tool to solve the problem
count_students_lifting_less_than_55(df)
```"
An art instructor kept track of how many total pictures were painted by each of the people enrolled in his class. How many people painted fewer than 2 pictures?,29.0,"Pictures painted | Frequency
0 | 10
1 | 19
2 | 12
3 | 8",8,12125,"import pandas as pd

def count_people_painted_fewer_than_2(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of pictures painted and returns the number of people who painted fewer than 2 pictures.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of pictures painted and their frequencies with columns 'Pictures painted' and 'Frequency'.
    Returns:
    int: The number of people who painted fewer than 2 pictures.
    """"""
    # Filter the DataFrame for the rows where the number of pictures painted is less than 2
    filtered_df = df[df['Pictures painted'] < 2]
    
    # Sum the frequencies of these rows to get the total number of people who painted fewer than 2 pictures
    num_people = filtered_df['Frequency'].sum()
    
    return num_people","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Pictures painted': [0, 1, 2, 3],
    'Frequency': [10, 19, 12, 8]
})
# Call the tool to solve the problem
count_people_painted_fewer_than_2(df)
```"
A museum curator counted the number of paintings in each exhibit at the art museum. How many exhibits have exactly 17 paintings?,3.0,"Stem | Leaf 
1 | 5, 7, 7, 7
2 | 4, 9
3 | 2, 4
4 | 
5 | 4, 5
6 | 2, 8
7 | 9
8 | 
9 | 0",4,903,"import pandas as pd
def count_exhibits_with_17_paintings(df):
    """"""
    This function takes in a pandas dataframe of paintings per exhibit, and returns the number of exhibits that have exactly 17 paintings.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of paintings per exhibit.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of exhibits that have exactly 17 paintings.
    """"""
    # prepare a list to calculate paintings in each exhibit
    paintings = []
    # calculate the total number of paintings in each exhibit
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            paintings.append(stem * 10 + leaf[j])
    # filter the exhibits where the total number of paintings is exactly 17
    filtered = [painting for painting in paintings if painting == 17]
    # count the number of rows
    num_exhibits = len(filtered)
    return num_exhibits","We should first create a pandas dataframe with the data from the table. Note that some elements are empty, so we need to fill them with empty lists. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],
    'Leaf': [[5, 7, 7, 7], [4, 9], [2, 4], [], [4, 5], [2, 8], [9], [], [0]]
})
# Call the tool to solve the problem
count_exhibits_with_17_paintings(df)
```"
Will has $158. How much money will Will have left if he buys a wedding cake and a pecan pie?,74.0,"apple tart | $19
wedding cake | $71
peach pie | $12
key lime pie | $12
pecan pie | $13
apple pie | $14",5,12497,"import pandas as pd

def calculate_remaining_money(menu_df, budget, items):
    """"""
    This function takes in a pandas DataFrame representing a menu table, a budget, and a list of items to buy, and returns the remaining money after buying the items using pandas.
    Args:
    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.
    budget (float): The initial budget.
    items (list): A list of menu item names to buy.
    Returns:
    float: The remaining money after buying the items.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the items and calculate the cost for each item
    for item in items:
        # Filter the DataFrame for the specific item
        item_df = menu_df[menu_df['Item'] == item]
        if not item_df.empty:
            item_price = item_df['Price'].values[0]
            total_cost += item_price
    
    # Calculate the remaining money
    remaining_money = budget - total_cost
    
    return remaining_money","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
menu_df = pd.DataFrame({
    'Item': ['apple tart', 'wedding cake', 'peach pie', 'key lime pie', 'pecan pie', 'apple pie'],
    'Price': [19, 71, 12, 12, 13, 14]
})

# Call the tool to solve the problem
remaining_money = calculate_remaining_money(menu_df, 158, ['wedding cake', 'pecan pie'])
print(remaining_money)
```"
"At a hot air balloon festival, Trent made note of how many passengers were in each balloon and the color of each balloon. What is the probability that a randomly selected hot air balloon is yellow and contains 1 passenger? Simplify any fractions.",0.2777777778," | 1 passenger | 2 passengers
Blue | 4 | 5
Yellow | 5 | 4",8,8318,"import pandas as pd

def calculate_probability(df, color, passengers):
    """"""
    This function takes in a pandas DataFrame representing a table of hot air balloon colors and passenger counts, and returns the probability that a randomly selected hot air balloon is of a specific color and contains a specific number of passengers.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing hot air balloon colors and passenger counts.
    color (str): The color of the hot air balloon.
    passengers (int): The number of passengers in the hot air balloon.
    Returns:
    float: The probability that a randomly selected hot air balloon is of the specified color and contains the specified number of passengers.
    """"""
    # Calculate the total number of hot air balloons
    total_balloons = df.sum().sum()
    
    # Filter the DataFrame for the specific color and number of passengers
    specific_balloons = df.loc[color, str(passengers)]
    
    # Calculate the probability
    probability = specific_balloons / total_balloons
    
    return probability","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    '1 passenger': {'Blue': 4, 'Yellow': 5},
    '2 passengers': {'Blue': 5, 'Yellow': 4}
})

# Call the tool to solve the problem
probability = calculate_probability(df, 'Yellow', 1)
print(f""The probability that a randomly selected hot air balloon is yellow and contains 1 passenger is {probability}"")
```"
How much money does Nina need to buy 7 bottles of mouthwash?,25.76,"bottle of hand lotion | $2.99
hairbrush | $4.63
bottle of mouthwash | $3.68
bottle of sunscreen | $3.59
box of bandages | $2.34",7,8231,"import pandas as pd

def calculate_total_cost_single_item(menu_df, item_name, quantity):
    """"""
    This function takes in a pandas DataFrame representing a menu table, an item name, and a quantity, and returns the total cost of the orders using pandas.
    Args:
    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.
    item_name (str): The name of the item to be ordered.
    quantity (int): The number of items to be ordered.
    Returns:
    float: The total cost of the orders.
    """"""
    # Filter the DataFrame for the specific item
    item_df = menu_df[menu_df['Item'] == item_name]
    if not item_df.empty:
        item_price = item_df['Price'].values[0]
        total_cost = quantity * item_price
    else:
        total_cost = 0.0
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
menu_df = pd.DataFrame({
    'Item': ['bottle of hand lotion', 'hairbrush', 'bottle of mouthwash', 'bottle of sunscreen', 'box of bandages'],
    'Price': [2.99, 4.63, 3.68, 3.59, 2.34]
})

# Call the tool to solve the problem
total_cost = calculate_total_cost_single_item(menu_df, 'bottle of mouthwash', 7)
print(total_cost)
```"
"Sally, who rents properties for a living, measures all the offices in a building she is renting. How many offices are at least 33 square meters but less than 53 square meters?",8.0,"Stem | Leaf 
3 | 3, 9
4 | 2, 4, 5, 6, 9
5 | 1, 3, 4, 5
6 | 9
7 | 6, 6, 8, 9
8 | 4, 4, 4
9 | 0",7,9248,"import pandas as pd
def count_offices(df):
    """"""
    This function takes in a pandas dataframe of office sizes, and returns the number of offices that are at least 33 square meters but less than 53 square meters.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the sizes of offices.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of offices that are at least 33 square meters but less than 53 square meters.
    """"""
    # prepare a list to calculate size of each office
    sizes = []
    # calculate the total size of each office
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            sizes.append(stem * 10 + leaf[j])
    # filter the offices where the size is greater than or equal to 33 and less than 53
    filtered = [size for size in sizes if size >= 33 and size < 53]
    # count the number of rows
    num_offices = len(filtered)
    return num_offices","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [3, 4, 5, 6, 7, 8, 9],
    'Leaf': [[3, 9], [2, 4, 5, 6, 9], [1, 3, 4, 5], [9], [6, 6, 8, 9], [4, 4, 4], [0]]
})
# Call the tool to solve the problem
count_offices(df)
```"
A pet store owner had her staff count the number of fish in each tank. How many tanks have at least 52 fish but fewer than 55 fish?,2.0,"Stem | Leaf 
3 | 0, 1, 8, 9
4 | 1, 2, 3, 3, 8
5 | 2, 4, 8
6 | 0, 3, 3, 6, 7, 8, 9
7 | 1",6,12247,"import pandas as pd

def count_tanks_with_fish_range(df, min_fish, max_fish):
    """"""
    This function takes in a pandas dataframe of fish counts per tank, and returns the number of tanks that have at least min_fish but fewer than max_fish fish.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of fish per tank.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    min_fish (int): The minimum number of fish in the range.
    max_fish (int): The maximum number of fish in the range (exclusive).
    Returns:
    int: The number of tanks that have at least min_fish but fewer than max_fish fish.
    """"""
    # prepare a list to calculate fish in each tank
    fish_counts = []
    # calculate the total number of fish in each tank
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            fish_counts.append(stem * 10 + leaf[j])
    # filter the tanks where the total number of fish is within the specified range
    filtered = [count for count in fish_counts if min_fish <= count < max_fish]
    # count the number of rows
    num_tanks = len(filtered)
    return num_tanks","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [3, 4, 5, 6, 7],
    'Leaf': [[0, 1, 8, 9], [1, 2, 3, 3, 8], [2, 4, 8], [0, 3, 3, 6, 7, 8, 9], [1]]
})
# Call the tool to solve the problem
count_tanks_with_fish_range(df, 52, 55)
```"
How much more does a grilled steak cost than eggplant parmesan?,2.42,"cheese pizza | $7.87
eggplant parmesan | $6.11
lasagna | $7.61
grilled steak | $8.53
pasta with pesto sauce | $7.07
pasta with mushrooms | $7.55",7,9545,"import pandas as pd

def price_difference(menu_df, item1, item2):
    """"""
    This function takes in a pandas DataFrame representing a menu table and two menu items, and returns the price difference between the two items.
    Args:
    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.
    item1 (str): The name of the first menu item.
    item2 (str): The name of the second menu item.
    Returns:
    float: The price difference between the two menu items.
    """"""
    # Filter the DataFrame for the specific items
    item1_df = menu_df[menu_df['Item'] == item1]
    item2_df = menu_df[menu_df['Item'] == item2]
    
    # Check if both items are in the menu
    if not item1_df.empty and not item2_df.empty:
        item1_price = item1_df['Price'].values[0]
        item2_price = item2_df['Price'].values[0]
        return abs(item1_price - item2_price)
    else:
        return None","```python
# Initialize the table into a dataframe
menu_df = pd.DataFrame({
    'Item': ['cheese pizza', 'eggplant parmesan', 'lasagna', 'grilled steak', 'pasta with pesto sauce', 'pasta with mushrooms'],
    'Price': [7.87, 6.11, 7.61, 8.53, 7.07, 7.55]
})

# Call the tool to solve the problem
price_difference(menu_df, 'grilled steak', 'eggplant parmesan')
```"
Dale bought 4+1/5 kilograms of macadamia nuts. How much did he spend?,16.8,"pine nuts | $4 per kg
macadamia nuts | $4 per kg
chestnuts | $5 per kg
pistachios | $3 per kg",6,2605,"import pandas as pd

def calculate_cost(nuts_df, nut_type, weight):
    """"""
    This function takes in a pandas DataFrame representing a nuts price table, the type of nut and the weight of the nut, and returns the total cost.
    Args:
    nuts_df (pd.DataFrame): A pandas DataFrame containing nut types and their prices with columns 'Nut' and 'Price'.
    nut_type (str): The type of nut.
    weight (float): The weight of the nut in kilograms.
    Returns:
    float: The total cost.
    """"""
    # Filter the DataFrame for the specific nut type
    nut_df = nuts_df[nuts_df['Nut'] == nut_type]
    if not nut_df.empty:
        nut_price = nut_df['Price'].values[0]
        total_cost = weight * nut_price
    else:
        total_cost = 0.0
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
nuts_df = pd.DataFrame({
    'Nut': ['pine nuts', 'macadamia nuts', 'chestnuts', 'pistachios'],
    'Price': [4, 4, 5, 3]
})
# Call the tool to solve the problem
total_cost = calculate_cost(nuts_df, 'macadamia nuts', 4.2)
print(total_cost)
```"
Akira buys 3+7/10 kilograms of dock washers. What is the total cost?,14.8,"lock washers | $3 per kilogram
square washers | $3 per kilogram
dock washers | $4 per kilogram
fender washers | $3 per kilogram
star washers | $3 per kilogram",6,10718,"import pandas as pd

def calculate_cost(df, item, weight):
    """"""
    This function takes in a pandas DataFrame representing a table of items and their prices per kilogram, the name of an item, and the weight of the item in kilograms, and returns the total cost of the item.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing items and their prices per kilogram with columns 'Item' and 'Price per kilogram'.
    item (str): The name of the item.
    weight (float): The weight of the item in kilograms.
    Returns:
    float: The total cost of the item.
    """"""
    # Filter the DataFrame for the specific item
    item_df = df[df['Item'] == item]
    if not item_df.empty:
        # Extract the price per kilogram
        price_per_kg = item_df['Price per kilogram'].values[0]
        # Calculate the total cost
        total_cost = weight * price_per_kg
        return total_cost
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Item': ['lock washers', 'square washers', 'dock washers', 'fender washers', 'star washers'],
    'Price per kilogram': [3, 3, 4, 3, 3]
})
# Call the tool to solve the problem
total_cost = calculate_cost(df, 'dock washers', 3+7/10)
print(total_cost)
```"
The members of the track team compared how many miles they ran last week. What is the mode of the numbers?,4.0,"Name | Miles
Sophie | 7
Jacob | 3
Alana | 4
Trevor | 4
Edwin | 7
Nolan | 4",7,3400,"import pandas as pd
from collections import Counter

def calculate_mode(df):
    """"""
    This function takes in a pandas DataFrame representing a table of names and miles run, and returns the mode of the miles run.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing names and miles run with columns 'Name' and 'Miles'.
    Returns:
    int: The mode of the miles run.
    """"""
    # Extract the 'Miles' column from the DataFrame
    miles = df['Miles']
    
    # Use the Counter class from the collections module to count the frequency of each number of miles run
    counter = Counter(miles)
    
    # Find the number of miles run that has the highest frequency
    mode = counter.most_common(1)[0][0]
    
    return mode","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Name': ['Sophie', 'Jacob', 'Alana', 'Trevor', 'Edwin', 'Nolan'],
    'Miles': [7, 3, 4, 4, 7, 4]
})
# Call the tool to solve the problem
calculate_mode(df)
```"
Each laundry hamper has 5 pairs of jeans. How many pairs of jeans are in 3 laundry hampers?,15.0,"Number of laundry hampers | Number of pairs of jeans
1 | 5
2 | 10
3 | ?",1,8937,"def calculate_jeans_in_hampers(df, hamper_count):
    """"""
    This function takes in a pandas DataFrame representing a table of laundry hampers and the number of jeans in each, and a count of hampers, and returns the number of jeans in the given number of hampers.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of laundry hampers and the number of jeans in each with columns 'Number of laundry hampers' and 'Number of pairs of jeans'.
    hamper_count (int): The number of laundry hampers.
    Returns:
    int: The number of jeans in the given number of hampers.
    """"""
    # Get the number of jeans in one hamper
    jeans_per_hamper = df[df['Number of laundry hampers'] == 1]['Number of pairs of jeans'].values[0]
    
    # Calculate the number of jeans in the given number of hampers
    total_jeans = jeans_per_hamper * hamper_count
    
    return total_jeans","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of laundry hampers': [1, 2],
    'Number of pairs of jeans': [5, 10]
})

# Call the tool to solve the problem
calculate_jeans_in_hampers(df, 3)
```"
Meg wrote down how many glasses of water she drank during the past 5 days. What is the mean of the numbers?,6.0,"Day | Number of glasses
Tuesday | 3
Wednesday | 8
Thursday | 6
Friday | 7
Saturday | 6",6,13740,"import pandas as pd

def calculate_mean(df):
    """"""
    This function takes in a pandas DataFrame representing a table of days and the number of glasses of water drank, and returns the mean number of glasses drank.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing days and the number of glasses of water drank with columns 'Day' and 'Number of glasses'.
    Returns:
    float: The mean number of glasses of water drank.
    """"""
    # Calculate the mean of the 'Number of glasses' column
    mean_glasses = df['Number of glasses'].mean()
    
    return mean_glasses","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    'Number of glasses': [3, 8, 6, 7, 6]
})

# Call the tool to solve the problem
mean_glasses = calculate_mean(df)
print(mean_glasses)
```"
Riley wants to buy 3.6 pounds of sunflower seed oil. How much will she spend?,10.8,"canola oil | $5/lb
vegetable oil | $5/lb
olive oil | $8/lb
soybean oil | $7/lb
peanut oil | $7/lb
cottonseed oil | $8/lb
sunflower seed oil | $3/lb",6,7224,"import pandas as pd

def calculate_cost_of_oil(oil_df, oil_type, quantity):
    """"""
    This function takes in a pandas DataFrame representing a table of oil types and their prices, the type of oil, and the quantity of oil, and returns the total cost.
    Args:
    oil_df (pd.DataFrame): A pandas DataFrame containing oil types and their prices with columns 'Oil' and 'Price'.
    oil_type (str): The type of oil.
    quantity (float): The quantity of oil in pounds.
    Returns:
    float: The total cost of the oil.
    """"""
    # Filter the DataFrame for the specific oil type
    oil_df = oil_df[oil_df['Oil'] == oil_type]
    if not oil_df.empty:
        oil_price = oil_df['Price'].values[0]
        total_cost = quantity * oil_price
        return total_cost
    else:
        return ""Oil type not found in the table.""","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Oil': ['canola oil', 'vegetable oil', 'olive oil', 'soybean oil', 'peanut oil', 'cottonseed oil', 'sunflower seed oil'],
    'Price': [5, 5, 8, 7, 7, 8, 3]
})

# Call the tool to solve the problem
total_cost = calculate_cost_of_oil(df, 'sunflower seed oil', 3.6)
print(f'Riley will spend ${total_cost} on 3.6 pounds of sunflower seed oil.')
```"
Eric counted the boxes of cereal in a grocery store with different sizes and numbers of prizes. What is the probability that a randomly selected box of cereal is mini size and contains two prizes? Simplify any fractions.,0.1428571429," | One prize | Two prizes
Mini size | 5 | 2
Regular size | 4 | 3",8,14391,"import pandas as pd

def calculate_probability(df, size, prizes):
    """"""
    This function takes in a pandas DataFrame representing a table of cereal boxes with different sizes and numbers of prizes, and returns the probability that a randomly selected box of cereal is of a specific size and contains a specific number of prizes.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of cereal boxes with different sizes and numbers of prizes. The DataFrame should have columns 'Size', 'One prize', and 'Two prizes'.
    size (str): The size of the cereal box.
    prizes (int): The number of prizes in the cereal box.
    Returns:
    float: The probability that a randomly selected box of cereal is of the specified size and contains the specified number of prizes.
    """"""
    # Calculate the total number of cereal boxes
    total_boxes = df['One prize'].sum() + df['Two prizes'].sum()
    
    # Filter the DataFrame for the specific size
    size_df = df[df['Size'] == size]
    
    # Get the number of boxes of the specified size with the specified number of prizes
    num_boxes = size_df[str(prizes) + ' prizes'].values[0]
    
    # Calculate the probability
    probability = num_boxes / total_boxes
    
    return probability","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Size': ['Mini size', 'Regular size'],
    'One prize': [5, 4],
    'Two prizes': [2, 3]
})
# Call the tool to solve the problem
probability = calculate_probability(df, 'Mini size', 2)
print(f""The probability that a randomly selected box of cereal is mini size and contains two prizes is {probability}"")
```"
A farm equipment company kept a record of the number of tractors made each month. How many tractors did the company make in total in July and August?,643.0,"Month | Number of tractors
July | 158
August | 485
September | 357",3,6938,"import pandas as pd

def calculate_total_tractors(df, months):
    """"""
    This function takes in a pandas DataFrame representing a record of tractors made each month and a list of months, and returns the total number of tractors made in these months.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing months and the number of tractors made with columns 'Month' and 'Number of tractors'.
    months (list): A list of months for which the total number of tractors is to be calculated.
    Returns:
    int: The total number of tractors made in the given months.
    """"""
    # Filter the DataFrame for the specific months
    df_filtered = df[df['Month'].isin(months)]
    
    # Calculate the total number of tractors
    total_tractors = df_filtered['Number of tractors'].sum()
    
    return total_tractors","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Month': ['July', 'August', 'September'],
    'Number of tractors': [158, 485, 357]
})

# Call the tool to solve the problem
total_tractors = calculate_total_tractors(df, ['July', 'August'])
print(total_tractors)
```"
Brooke's classmates revealed how many science articles they read. What is the mean of the numbers?,5.0,"Name | Number of science articles
Brooke | 2
Susan | 2
Quincy | 8
Pam | 8
Julian | 6
Luca | 4",7,3692,"import pandas as pd

def calculate_mean(df):
    """"""
    This function takes in a pandas DataFrame representing a table of names and the number of science articles they read, and returns the mean number of articles read.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing names and the number of science articles read with columns 'Name' and 'Number of science articles'.
    Returns:
    float: The mean number of science articles read.
    """"""
    # Calculate the mean of the 'Number of science articles' column
    mean_articles = df['Number of science articles'].mean()
    
    return mean_articles","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Name': ['Brooke', 'Susan', 'Quincy', 'Pam', 'Julian', 'Luca'],
    'Number of science articles': [2, 2, 8, 8, 6, 4]
})

# Call the tool to solve the problem
mean_articles = calculate_mean(df)

# Print the result
print(mean_articles)
```"
Jake tracked the maximum daily wind speed for 6 days. What is the range of the numbers?,12.0,"Day | Wind speed (miles per hour)
Friday | 21
Saturday | 23
Sunday | 32
Monday | 28
Tuesday | 26
Wednesday | 20",5,6220,"import pandas as pd

def calculate_range(df, column_name):
    """"""
    This function takes in a pandas DataFrame and a column name, and returns the range of the values in the specified column.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the data.
    column_name (str): The name of the column for which the range should be calculated.
    Returns:
    float: The range of the values in the specified column.
    """"""
    # Find the minimum and maximum values in the specified column
    min_value = df[column_name].min()
    max_value = df[column_name].max()
    
    # Calculate the range
    range_value = max_value - min_value
    
    return range_value","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday'],
    'Wind speed (miles per hour)': [21, 23, 32, 28, 26, 20]
})
# Call the tool to solve the problem
range_value = calculate_range(df, 'Wind speed (miles per hour)')
print(range_value)
```"
"A Girl Scout troop recorded how many boxes of cookies they sold each day for a week. According to the table, what was the rate of change between Thursday and Friday?",3.0,"Day | Boxes of cookies
Tuesday | 31
Wednesday | 29
Thursday | 29
Friday | 32
Saturday | 31",7,12831,"import pandas as pd

def calculate_rate_of_change(df, day1, day2):
    """"""
    This function takes in a pandas DataFrame representing a table of daily cookie sales and two days, and returns the rate of change between the two days.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing daily cookie sales with columns 'Day' and 'Boxes of cookies'.
    day1 (str): The first day to compare.
    day2 (str): The second day to compare.
    Returns:
    float: The rate of change between the two days.
    """"""
    # Filter the DataFrame for the specific days
    day1_df = df[df['Day'] == day1]
    day2_df = df[df['Day'] == day2]
    
    # Check if both days are in the DataFrame
    if not day1_df.empty and not day2_df.empty:
        # Calculate the rate of change
        day1_sales = day1_df['Boxes of cookies'].values[0]
        day2_sales = day2_df['Boxes of cookies'].values[0]
        rate_of_change = day2_sales - day1_sales
        return rate_of_change
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    'Boxes of cookies': [31, 29, 29, 32, 31]
})
# Call the tool to solve the problem
rate_of_change = calculate_rate_of_change(df, 'Thursday', 'Friday')
print(rate_of_change)
```"
How much more does a shirt signed by a famous soccer player cost than a skate signed by a famous figure skater?,173.0,"shirt signed by a famous soccer player | $631.00
photograph signed by a famous movie star | $493.00
skate signed by a famous figure skater | $458.00
bat signed by a famous baseball player | $559.00",5,12953,"import pandas as pd

def calculate_price_difference(menu_df, item1, item2):
    """"""
    This function takes in a pandas DataFrame representing a table of items and their prices, and returns the price difference between two items.
    Args:
    menu_df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.
    item1 (str): The name of the first item.
    item2 (str): The name of the second item.
    Returns:
    float: The price difference between the two items.
    """"""
    # Filter the DataFrame for the specific items
    item1_df = menu_df[menu_df['Item'] == item1]
    item2_df = menu_df[menu_df['Item'] == item2]
    
    # Check if both items are in the DataFrame
    if not item1_df.empty and not item2_df.empty:
        item1_price = item1_df['Price'].values[0]
        item2_price = item2_df['Price'].values[0]
        price_difference = item1_price - item2_price
        return price_difference
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Item': ['shirt signed by a famous soccer player', 'photograph signed by a famous movie star', 'skate signed by a famous figure skater', 'bat signed by a famous baseball player'],
    'Price': [631.00, 493.00, 458.00, 559.00]
})
# Call the tool to solve the problem
price_difference = calculate_price_difference(df, 'shirt signed by a famous soccer player', 'skate signed by a famous figure skater')
print(price_difference)
```"
Khan's Flooring sponsored a survey about home flooring preferences. What fraction of respondents preferred linoleum flooring? Simplify your answer.,0.4404761905,"Flooring | Number of respondents
Carpet | 470
Linoleum | 740
Other | 470",7,1235,"import pandas as pd

def calculate_fraction(df, target):
    """"""
    This function takes in a pandas DataFrame representing a survey result and a target preference, and returns the fraction of respondents who preferred the target.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing survey results with columns 'Flooring' and 'Number of respondents'.
    target (str): The target preference.
    Returns:
    float: The fraction of respondents who preferred the target.
    """"""
    # Calculate the total number of respondents
    total_respondents = df['Number of respondents'].sum()
    
    # Filter the DataFrame for the target preference
    target_df = df[df['Flooring'] == target]
    
    # If the target preference is not in the DataFrame, return 0
    if target_df.empty:
        return 0
    
    # Calculate the number of respondents who preferred the target
    target_respondents = target_df['Number of respondents'].values[0]
    
    # Calculate and return the fraction
    return target_respondents / total_respondents","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Flooring': ['Carpet', 'Linoleum', 'Other'],
    'Number of respondents': [470, 740, 470]
})

# Call the tool to solve the problem
fraction = calculate_fraction(df, 'Linoleum')

# Print the answer
print(fraction)
```"
The Hillsdale Public Library serves a diverse community and has a foreign language section catering to non-English speakers. What fraction of foreign language books are in Russian? Simplify your answer.,0.1477272727,"Language | Number of books
Korean | 660
Chinese | 450
Russian | 390
Arabic | 410
Vietnamese | 730",7,7236,"import pandas as pd

def calculate_fraction_of_russian_books(df):
    """"""
    This function takes in a pandas DataFrame representing a table of foreign language books and their counts, and returns the fraction of books that are in Russian.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing foreign language books and their counts with columns 'Language' and 'Number of books'.
    Returns:
    tuple: A tuple containing the numerator and denominator of the simplified fraction of Russian books.
    """"""
    from math import gcd
    
    # Get the number of Russian books
    russian_books = df[df['Language'] == 'Russian']['Number of books'].values[0]
    
    # Calculate the total number of foreign language books
    total_books = df['Number of books'].sum()
    
    # Calculate the greatest common divisor of the Russian books and total books
    common_divisor = gcd(russian_books, total_books)
    
    # Simplify the fraction
    simplified_numerator = russian_books // common_divisor
    simplified_denominator = total_books // common_divisor
    
    return (simplified_numerator, simplified_denominator)","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Language': ['Korean', 'Chinese', 'Russian', 'Arabic', 'Vietnamese'],
    'Number of books': [660, 450, 390, 410, 730]
})

# Call the tool to solve the problem
fraction = calculate_fraction_of_russian_books(df)
print(f""The fraction of foreign language books that are in Russian is {fraction[0]}/{fraction[1]}"")
```"
A car dealership tracked the number of cars sold each month. What is the mean of the numbers?,25.0,"Month | Number of cars
September | 30
October | 28
November | 27
December | 17
January | 32
February | 16",5,12122,"import pandas as pd

def calculate_mean(df):
    """"""
    This function takes in a pandas DataFrame representing a table of the number of cars sold each month, and returns the mean of the numbers using pandas.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing months and the number of cars sold with columns 'Month' and 'Number of cars'.
    Returns:
    float: The mean of the numbers.
    """"""
    # Calculate the mean of the 'Number of cars' column
    mean = df['Number of cars'].mean()
    
    return mean","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Month': ['September', 'October', 'November', 'December', 'January', 'February'],
    'Number of cars': [30, 28, 27, 17, 32, 16]
})
# Call the tool to solve the problem
mean = calculate_mean(df)
print(mean)
```"
How much money does Wanda need to buy a map of Africa and a book of crossword puzzles?,15.0,"book of crossword puzzles | $8
dog calendar | $9
map of Africa | $7
map of the United States | $9
map of Canada | $8",4,13833,"import pandas as pd

def calculate_total_cost(menu_df, orders):
    """"""
    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.
    Args:
    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.
    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.
    Returns:
    float: The total cost of the orders.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the menu items and calculate the cost for each ordered item
    for item, quantity in orders.items():
        # Filter the DataFrame for the specific item
        item_df = menu_df[menu_df['Item'] == item]
        if not item_df.empty:
            item_price = item_df['Price'].values[0]
            total_cost += quantity * item_price
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we create a dictionary of orders with the items Wanda wants to buy. Finally, we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
menu_df = pd.DataFrame({
    'Item': ['book of crossword puzzles', 'dog calendar', 'map of Africa', 'map of the United States', 'map of Canada'],
    'Price': [8, 9, 7, 9, 8]
})

# Create a dictionary of orders
orders = {'map of Africa': 1, 'book of crossword puzzles': 1}

# Call the tool to solve the problem
total_cost = calculate_total_cost(menu_df, orders)
print(total_cost)
```"
Shawn figured out the scores at the end of a card game. Which score did the greatest number of people receive?,4.0,"Score | Frequency
4 | 19
5 | 14
6 | 18
7 | 6
8 | 16
9 | 12
10 | 0",8,3495,"import pandas as pd

def find_most_common_score(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of scores and returns the score with the greatest frequency.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing scores and their frequencies with columns 'Score' and 'Frequency'.
    Returns:
    int: The score with the greatest frequency.
    """"""
    # Find the row with the maximum frequency
    max_frequency_row = df[df['Frequency'] == df['Frequency'].max()]
    
    # Get the score from the row
    most_common_score = max_frequency_row['Score'].values[0]
    
    return most_common_score","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Score': [4, 5, 6, 7, 8, 9, 10],
    'Frequency': [19, 14, 18, 6, 16, 12, 0]
})
# Call the tool to solve the problem
most_common_score = find_most_common_score(df)
print(most_common_score)
```"
Destiny's classmates recorded how many books they read last year. What is the median of the numbers?,71.0,"Name | Number of books
Destiny | 70
Jenny | 74
Leah | 74
Anita | 70
Wyatt | 71
Tommy | 72
Nate | 71",5,10051,"import pandas as pd
import numpy as np

def calculate_median(df):
    """"""
    This function takes in a pandas DataFrame representing a table of names and the number of books read, and returns the median number of books read using numpy.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing names and the number of books read with columns 'Name' and 'Number of books'.
    Returns:
    float: The median number of books read.
    """"""
    # Extract the 'Number of books' column and convert it to a numpy array
    books_array = df['Number of books'].to_numpy()
    
    # Calculate and return the median
    median_books = np.median(books_array)
    
    return median_books","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Name': ['Destiny', 'Jenny', 'Leah', 'Anita', 'Wyatt', 'Tommy', 'Nate'],
    'Number of books': [70, 74, 74, 70, 71, 72, 71]
})

# Call the tool to solve the problem
median_books = calculate_median(df)
print(median_books)
```"
Sue works at Scoops ice cream shop. The frequency chart shows how many times each topping was ordered during two of her shifts. How many more times were rainbow sprinkles ordered than chocolate chips?,2.0,"Topping | Frequency
caramel sauce | 4
chocolate chips | 7
gummy candies | 3
rainbow sprinkles | 9",5,4564,"import pandas as pd

def calculate_difference(df, topping1, topping2):
    """"""
    This function takes in a pandas DataFrame representing a frequency chart of toppings and two topping names, and returns the difference in the number of times the two toppings were ordered.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing topping names and their frequencies with columns 'Topping' and 'Frequency'.
    topping1 (str): The name of the first topping.
    topping2 (str): The name of the second topping.
    Returns:
    int: The difference in the number of times the two toppings were ordered.
    """"""
    # Get the frequency of the first topping
    topping1_frequency = df[df['Topping'] == topping1]['Frequency'].values[0]
    
    # Get the frequency of the second topping
    topping2_frequency = df[df['Topping'] == topping2]['Frequency'].values[0]
    
    # Calculate and return the difference
    return abs(topping1_frequency - topping2_frequency)","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Topping': ['caramel sauce', 'chocolate chips', 'gummy candies', 'rainbow sprinkles'],
    'Frequency': [4, 7, 3, 9]
})

# Call the tool to solve the problem
difference = calculate_difference(df, 'rainbow sprinkles', 'chocolate chips')
print(difference)
```"
Bernard counted the total number of shells collected by his friends during a walk on the beach. How many people found at least 4 seashells?,26.0,"Seashells found | Frequency
0 | 9
1 | 12
2 | 6
3 | 11
4 | 10
5 | 16",7,4964,"import pandas as pd

def count_people_with_at_least_4_seashells(df):
    """"""
    This function takes in a pandas DataFrame representing a table of seashells found and their frequencies, and returns the number of people who found at least 4 seashells.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of seashells found and their frequencies with columns 'Seashells found' and 'Frequency'.
    Returns:
    int: The number of people who found at least 4 seashells.
    """"""
    # Filter the DataFrame for rows where the number of seashells found is greater than or equal to 4
    filtered_df = df[df['Seashells found'] >= 4]
    
    # Calculate the total number of people who found at least 4 seashells
    total_people = filtered_df['Frequency'].sum()
    
    return total_people","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Seashells found': [0, 1, 2, 3, 4, 5],
    'Frequency': [9, 12, 6, 11, 10, 16]
})
# Call the tool to solve the problem
count_people_with_at_least_4_seashells(df)
```"
The Newberry Ski Resort asked its guests how many times they went sledding last winter. How many guests went sledding exactly 5 times last winter?,20.0,"Number of times | Frequency
0 | 14
1 | 9
2 | 1
3 | 5
4 | 4
5 | 20
6 | 2",7,16285,"import pandas as pd

def get_frequency(df, target_value):
    """"""
    This function takes in a pandas DataFrame representing a frequency table and a target value, and returns the frequency of the target value.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing a frequency table with columns 'Number of times' and 'Frequency'.
    target_value (int): The target value for which the frequency is to be found.
    Returns:
    int: The frequency of the target value.
    """"""
    # Filter the DataFrame for the specific target value
    target_df = df[df['Number of times'] == target_value]
    if not target_df.empty:
        frequency = target_df['Frequency'].values[0]
        return frequency
    else:
        return 0","```python
# Create a pandas DataFrame for the frequency table
data = {'Number of times': [0, 1, 2, 3, 4, 5, 6],
        'Frequency': [14, 9, 1, 5, 4, 20, 2]}
frequency_df = pd.DataFrame(data)

# Find the frequency of guests who went sledding exactly 5 times
target_value = 5
frequency = get_frequency(frequency_df, target_value)
print(frequency)
```"
A game show viewer monitors how often a wheel numbered 1 through 5 stops at each number. Which number was spun the most times?,2.0,"Number spun | Frequency
1 | 13
2 | 18
3 | 2
4 | 10
5 | 11",8,14407,"import pandas as pd

def find_most_spun_number(df):
    """"""
    This function takes in a pandas DataFrame representing a table of spun numbers and their frequencies, and returns the number that was spun the most times.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing spun numbers and their frequencies with columns 'Number spun' and 'Frequency'.
    Returns:
    int: The number that was spun the most times.
    """"""
    # Find the row with the maximum frequency
    max_frequency_row = df[df['Frequency'] == df['Frequency'].max()]
    
    # Get the number spun from the row
    most_spun_number = max_frequency_row['Number spun'].values[0]
    
    return most_spun_number","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number spun': [1, 2, 3, 4, 5],
    'Frequency': [13, 18, 2, 10, 11]
})

# Call the tool to solve the problem
most_spun_number = find_most_spun_number(df)
print(most_spun_number)
```"
Some students in a biology class compared how many times they went to the park last week to work on their plant research projects. How many students went to the park fewer than 2 times?,25.0,"Number of trips | Frequency
0 | 7
1 | 18
2 | 17
3 | 19
4 | 9",8,15779,"import pandas as pd

def count_students_with_fewer_than_2_trips(df):
    """"""
    This function takes in a pandas DataFrame representing the number of trips and their frequency, and returns the number of students who went to the park fewer than 2 times.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of trips and their frequency with columns 'Number of trips' and 'Frequency'.
    Returns:
    int: The number of students who went to the park fewer than 2 times.
    """"""
    # Filter the DataFrame for the rows with fewer than 2 trips
    filtered_df = df[df['Number of trips'] < 2]
    
    # Calculate the total number of students who went to the park fewer than 2 times
    total_students = filtered_df['Frequency'].sum()
    
    return total_students","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of trips': [0, 1, 2, 3, 4],
    'Frequency': [7, 18, 17, 19, 9]
})

# Call the tool to solve the problem
count_students_with_fewer_than_2_trips(df)
```"
The parks department compared how many basketball hoops there are at each park. What is the median of the numbers?,6.0,"Park | Number of basketball hoops
Westfield Park | 6
Heron Park | 4
Mooreland Park | 6
Kelly Park | 10
Pinehurst Park | 5",5,12888,"import pandas as pd
import numpy as np

def calculate_median(df):
    """"""
    This function takes in a pandas DataFrame representing a table of parks and the number of basketball hoops at each park, and returns the median number of basketball hoops.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing park names and the number of basketball hoops at each park with columns 'Park' and 'Number of basketball hoops'.
    Returns:
    float: The median number of basketball hoops.
    """"""
    # Extract the 'Number of basketball hoops' column and calculate its median
    median_hoops = np.median(df['Number of basketball hoops'])
    
    return median_hoops","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Park': ['Westfield Park', 'Heron Park', 'Mooreland Park', 'Kelly Park', 'Pinehurst Park'],
    'Number of basketball hoops': [6, 4, 6, 10, 5]
})
# Call the tool to solve the problem
median_hoops = calculate_median(df)
print(median_hoops)
```"
A grocery store monitored how many paper bags were used in the past 5 days. How many more paper bags did the grocery store use on Friday than on Sunday?,415.0,"Day | Number of paper bags
Friday | 774
Saturday | 520
Sunday | 359
Monday | 653
Tuesday | 231",3,1538,"import pandas as pd

def calculate_difference(df, day1, day2):
    """"""
    This function takes in a pandas DataFrame representing a table of paper bags used per day and two days, and returns the difference in the number of paper bags used between the two days.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing days and the number of paper bags used with columns 'Day' and 'Number of paper bags'.
    day1 (str): The first day.
    day2 (str): The second day.
    Returns:
    int: The difference in the number of paper bags used between the two days.
    """"""
    # Filter the DataFrame for the specific days
    day1_df = df[df['Day'] == day1]
    day2_df = df[df['Day'] == day2]
    
    # Calculate the difference in the number of paper bags used
    difference = day1_df['Number of paper bags'].values[0] - day2_df['Number of paper bags'].values[0]
    
    return difference","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],
    'Number of paper bags': [774, 520, 359, 653, 231]
})

# Call the tool to solve the problem
difference = calculate_difference(df, 'Friday', 'Sunday')
print(difference)
```"
Some teachers compared how many students are in their classes. What is the median of the numbers?,39.0,"Teacher | Number of students
Ms. Katz | 35
Mrs. King | 40
Mrs. Woodworth | 35
Miss Jones | 39
Mr. Cohen | 39",5,8979,"import pandas as pd
import numpy as np

def calculate_median(df, column_name):
    """"""
    This function takes in a pandas DataFrame and a column name, and returns the median of the values in that column.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the data.
    column_name (str): The name of the column containing the values to calculate the median.
    Returns:
    float: The median of the values in the specified column.
    """"""
    # Extract the values from the specified column
    values = df[column_name].values
    
    # Calculate the median using numpy
    median = np.median(values)
    
    return median","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Teacher': ['Ms. Katz', 'Mrs. King', 'Mrs. Woodworth', 'Miss Jones', 'Mr. Cohen'],
    'Number of students': [35, 40, 35, 39, 39]
})
# Call the tool to solve the problem
median = calculate_median(df, 'Number of students')
print(median)
```"
A business magazine surveyed its readers about their commute times. How many commutes are exactly 43 minutes?,1.0,"Stem | Leaf 
2 | 0, 0, 3, 5, 7
3 | 8
4 | 3, 4, 8
5 | 2, 6, 7, 7, 8, 8
6 | 5
7 | 1, 2, 3, 3, 4, 8
8 | 3
9 | 0",4,94,"import pandas as pd
def count_commutes_of_43_minutes(df):
    """"""
    This function takes in a pandas dataframe of commute times, and returns the number of commutes that are exactly 43 minutes.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the commute times.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of commutes that are exactly 43 minutes.
    """"""
    # prepare a list to calculate commute times
    commute_times = []
    # calculate the total commute time in each row
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            commute_times.append(stem * 10 + leaf[j])
    # filter the commutes where the total commute time is exactly 43 minutes
    filtered = [time for time in commute_times if time == 43]
    # count the number of rows
    num_commutes = len(filtered)
    return num_commutes","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],
    'Leaf': [[0, 0, 3, 5, 7], [8], [3, 4, 8], [2, 6, 7, 7, 8, 8], [5], [1, 2, 3, 3, 4, 8], [3], [0]]
})
# Call the tool to solve the problem
count_commutes_of_43_minutes(df)
```"
How much money does Sandra need to buy a padlock and a wrench?,15.0,"measuring tape | $7
bucket | $6
padlock | $7
wrench | $8",5,11547,"import pandas as pd

def calculate_total_cost(menu_df, orders):
    """"""
    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.
    Args:
    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.
    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.
    Returns:
    float: The total cost of the orders.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the menu items and calculate the cost for each ordered item
    for item, quantity in orders.items():
        # Filter the DataFrame for the specific item
        item_df = menu_df[menu_df['Item'] == item]
        if not item_df.empty:
            item_price = item_df['Price'].values[0]
            total_cost += quantity * item_price
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we create a dictionary for the orders. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Item': ['measuring tape', 'bucket', 'padlock', 'wrench'],
    'Price': [7, 6, 7, 8]
})
# Initialize the orders
orders = {'padlock': 1, 'wrench': 1}
# Call the tool to solve the problem
total_cost = calculate_total_cost(df, orders)
print(f""Sandra needs ${total_cost} to buy a padlock and a wrench."")
```"
"During Fitness Day at school, Jen and her classmates took part in a pull-up competition, keeping track of the results. How many people did exactly 67 pull-ups?",0.0,"Stem | Leaf 
4 | 9
5 | 2, 4, 7
6 | 0, 3, 4, 5
7 | 3, 3, 4, 9
8 | 
9 | 0",7,10261,"import pandas as pd

def count_people_with_67_pullups(df):
    """"""
    This function takes in a pandas dataframe of pull-up results, and returns the number of people who did exactly 67 pull-ups.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the pull-up results.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of people who did exactly 67 pull-ups.
    """"""
    # prepare a list to calculate pull-ups for each person
    pullups = []
    # calculate the total number of pull-ups for each person
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            pullups.append(stem * 10 + leaf[j])
    # filter the people who did exactly 67 pull-ups
    filtered = [pullup for pullup in pullups if pullup == 67]
    # count the number of people
    num_people = len(filtered)
    return num_people","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [4, 5, 6, 7, 8, 9],
    'Leaf': [[9], [2, 4, 7], [0, 3, 4, 5], [3, 3, 4, 9], [], [0]]
})
# Call the tool to solve the problem
count_people_with_67_pullups(df)
```"
How much money does Tommy need to buy a ceramic vase and a chandelier?,139.0,"ceramic vase | $48
rug | $36
chandelier | $91
oil painting | $96
crystal vase | $53
crystal sculpture | $72",8,6754,"import pandas as pd

def calculate_total_cost(menu_df, orders):
    """"""
    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.
    Args:
    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.
    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.
    Returns:
    float: The total cost of the orders.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the menu items and calculate the cost for each ordered item
    for item, quantity in orders.items():
        # Filter the DataFrame for the specific item
        item_df = menu_df[menu_df['Item'] == item]
        if not item_df.empty:
            item_price = item_df['Price'].values[0]
            total_cost += quantity * item_price
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we create a dictionary of orders, and call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
menu_df = pd.DataFrame({
    'Item': ['ceramic vase', 'rug', 'chandelier', 'oil painting', 'crystal vase', 'crystal sculpture'],
    'Price': [48, 36, 91, 96, 53, 72]
})

# Create a dictionary of orders
orders = {'ceramic vase': 1, 'chandelier': 1}

# Call the tool to solve the problem
total_cost = calculate_total_cost(menu_df, orders)
print(total_cost)
```"
"An environmental agency examined how many trees were planted by different organizations. In all, how many trees were planted by Let it Grow and Heal the Earth?",890.0,"Organization | Number of trees planted
Let it Grow | 410
Heal the Earth | 480
Dreaming Green | 296
Acorns to Oaks | 179
Make it Green | 391",3,6300,"import pandas as pd

def calculate_total_trees_planted(df, organizations):
    """"""
    This function takes in a pandas DataFrame representing a table of organizations and the number of trees they planted, and a list of organizations, and returns the total number of trees planted by the organizations in the list.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing organizations and the number of trees they planted with columns 'Organization' and 'Number of trees planted'.
    organizations (list): A list of organization names.
    Returns:
    int: The total number of trees planted by the organizations in the list.
    """"""
    # Initialize the total number of trees
    total_trees = 0
    
    # Iterate through the organizations and calculate the total number of trees planted
    for organization in organizations:
        # Filter the DataFrame for the specific organization
        organization_df = df[df['Organization'] == organization]
        if not organization_df.empty:
            number_of_trees = organization_df['Number of trees planted'].values[0]
            total_trees += number_of_trees
    
    return total_trees","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Organization': ['Let it Grow', 'Heal the Earth', 'Dreaming Green', 'Acorns to Oaks', 'Make it Green'],
    'Number of trees planted': [410, 480, 296, 179, 391]
})

# Define the organizations
organizations = ['Let it Grow', 'Heal the Earth']

# Call the tool to solve the problem
total_trees = calculate_total_trees_planted(df, organizations)

# Print the result
print(total_trees)
```"
Each necklace has 2 rubies. How many rubies are on 3 necklaces?,6.0,"Number of necklaces | Number of rubies
1 | 2
2 | 4
3 | ?",2,13731,"def calculate_rubies(necklaces):
    """"""
    This function takes in the number of necklaces and returns the number of rubies on them.
    Args:
    necklaces (int): The number of necklaces.
    Returns:
    int: The number of rubies on the necklaces.
    """"""
    # Each necklace has 2 rubies
    rubies_per_necklace = 2
    # Calculate the total number of rubies
    total_rubies = necklaces * rubies_per_necklace
    return total_rubies","```python
# Call the tool to solve the problem
calculate_rubies(3)
```"
"As part of a statistics project, a math class weighed all the children who were willing to participate. How many children weighed at least 18 pounds but less than 51 pounds?",10.0,"Stem | Leaf 
1 | 2, 3, 4, 9, 9
2 | 0, 3
3 | 0
4 | 1, 1, 6, 8, 9
5 | 1, 5, 6, 6, 7, 9
6 | 2",6,1426,"import pandas as pd

def count_children_in_weight_range(df, min_weight, max_weight):
    """"""
    This function takes in a pandas dataframe of children's weights, and returns the number of children that have a weight within the specified range.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the children's weights.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    min_weight (int): The minimum weight (inclusive) for the range.
    max_weight (int): The maximum weight (exclusive) for the range.
    Returns:
    int: The number of children that have a weight within the specified range.
    """"""
    # prepare a list to calculate weights of each child
    weights = []
    # calculate the total weight of each child
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            weights.append(stem * 10 + leaf[j])
    # filter the children where the weight is within the specified range
    filtered = [weight for weight in weights if min_weight <= weight < max_weight]
    # count the number of rows
    num_children = len(filtered)
    return num_children","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [1, 2, 3, 4, 5, 6],
    'Leaf': [[2, 3, 4, 9, 9], [0, 3], [0], [1, 1, 6, 8, 9], [1, 5, 6, 6, 7, 9], [2]]
})
# Call the tool to solve the problem
count_children_in_weight_range(df, 18, 51)
```"
"Sandra attended her town's annual Worm Charming Competition. Contestants are assigned to a square foot of land, where they have 30 minutes to ""charm"" worms to the surface of the dirt using a single technique. Sandra observed contestants' charming techniques, and kept track of how many worms surfaced. What is the probability that a randomly selected contestant tried raking the ground and charmed 5-10 worms? Simplify any fractions.",0.3125," | 5-10 worms | 11-20 worms
Tapping the ground | 6 | 2
Raking the ground | 5 | 3",8,8688,"import pandas as pd

def calculate_probability(df, technique, worm_range):
    """"""
    This function takes in a pandas DataFrame representing a table of worm charming techniques and their results, a technique, and a worm range, and returns the probability of a randomly selected contestant using the specified technique and achieving the specified worm range.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing worm charming techniques and their results with columns 'Technique', '5-10 worms', '11-20 worms'.
    technique (str): The worm charming technique to calculate the probability for.
    worm_range (str): The worm range to calculate the probability for.
    Returns:
    float: The probability of a randomly selected contestant using the specified technique and achieving the specified worm range.
    """"""
    # Calculate the total number of contestants
    total_contestants = df['5-10 worms'].sum() + df['11-20 worms'].sum()
    
    # Filter the DataFrame for the specific technique
    technique_df = df[df['Technique'] == technique]
    
    # Calculate the number of contestants who used the specified technique and achieved the specified worm range
    technique_worm_range_contestants = technique_df[worm_range].values[0]
    
    # Calculate the probability
    probability = technique_worm_range_contestants / total_contestants
    
    return probability","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Technique': ['Tapping the ground', 'Raking the ground'],
    '5-10 worms': [6, 5],
    '11-20 worms': [2, 3]
})
# Call the tool to solve the problem
probability = calculate_probability(df, 'Raking the ground', '5-10 worms')
print(f""The probability is {probability}"")
```"
The parks department compared how many basketball hoops there are at each park. What is the mean of the numbers?,6.0,"Park | Number of basketball hoops
Linden Park | 7
Kelly Park | 7
Riverfront Park | 1
Otter Park | 8
Crestview Park | 4
Mooreland Park | 10
Westfield Park | 5
Palm Park | 6",6,1583,"import pandas as pd

def calculate_mean(df):
    """"""
    This function takes in a pandas DataFrame representing a table of parks and the number of basketball hoops at each park, and returns the mean number of basketball hoops.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing park names and the number of basketball hoops at each park with columns 'Park' and 'Number of basketball hoops'.
    Returns:
    float: The mean number of basketball hoops.
    """"""
    # Calculate the mean of the 'Number of basketball hoops' column
    mean = df['Number of basketball hoops'].mean()
    
    return mean","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Park': ['Linden Park', 'Kelly Park', 'Riverfront Park', 'Otter Park', 'Crestview Park', 'Mooreland Park', 'Westfield Park', 'Palm Park'],
    'Number of basketball hoops': [7, 7, 1, 8, 4, 10, 5, 6]
})
# Call the tool to solve the problem
mean = calculate_mean(df)
print(mean)
```"
How much more does a video game cost than a toy guitar?,27.0,"stuffed animal | $10
video game | $51
mystery game | $10
toy guitar | $24
chess board | $16
toy rocket | $76",8,11092,"import pandas as pd

def calculate_price_difference(df, item1, item2):
    """"""
    This function takes in a pandas DataFrame representing a price list and two item names, and returns the price difference between the two items.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.
    item1 (str): The name of the first item.
    item2 (str): The name of the second item.
    Returns:
    float: The price difference between the two items.
    """"""
    # Filter the DataFrame for the specific items
    item1_df = df[df['Item'] == item1]
    item2_df = df[df['Item'] == item2]
    
    # Check if the items exist in the DataFrame
    if not item1_df.empty and not item2_df.empty:
        item1_price = item1_df['Price'].values[0]
        item2_price = item2_df['Price'].values[0]
        
        # Calculate and return the price difference
        return abs(item1_price - item2_price)
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Item': ['stuffed animal', 'video game', 'mystery game', 'toy guitar', 'chess board', 'toy rocket'],
    'Price': [10, 51, 10, 24, 16, 76]
})
# Call the tool to solve the problem
price_difference = calculate_price_difference(df, 'video game', 'toy guitar')
print(price_difference)
```"
Nina kept track of the number of characters in each book she read. How many books had at least 30 characters but fewer than 50 characters?,10.0,"Stem | Leaf 
1 | 0, 6, 7, 8
2 | 1, 2, 7, 9
3 | 6, 7, 8, 8, 9
4 | 5, 5, 5, 6, 9
5 | 0, 1, 5, 7, 7",8,11197,"import pandas as pd
def count_books_with_30_to_50_characters(df):
    """"""
    This function takes in a pandas dataframe of books and their character counts, and returns the number of books that have at least 30 characters but fewer than 50 characters.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of characters per book.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of books that have at least 30 characters but fewer than 50 characters.
    """"""
    # prepare a list to calculate characters in each book
    characters = []
    # calculate the total number of characters in each book
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            characters.append(stem * 10 + leaf[j])
    # filter the books where the total number of characters is greater than or equal to 30 and less than 50
    filtered = [character for character in characters if character >= 30 and character < 50]
    # count the number of rows
    num_books = len(filtered)
    return num_books","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [1, 2, 3, 4, 5],
    'Leaf': [[0, 6, 7, 8], [1, 2, 7, 9], [6, 7, 8, 8, 9], [5, 5, 5, 6, 9], [0, 1, 5, 7, 7]]
})
# Call the tool to solve the problem
count_books_with_30_to_50_characters(df)
```"
Professor Marshall informed his students of their scores on the midterm exam. How many students scored at least 40 points but fewer than 90 points?,9.0,"Stem | Leaf 
1 | 1, 7, 7, 7
2 | 3, 4, 6, 7, 9
3 | 1, 2, 3, 6
4 | 1, 8
5 | 4, 8
6 | 0, 7, 7
7 | 
8 | 8, 8
9 | 0",8,7223,"import pandas as pd

def count_students_in_range(df, min_score, max_score):
    """"""
    This function takes in a pandas dataframe of student scores, a minimum score, and a maximum score, and returns the number of students who scored within the specified range.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing student scores in stem and leaf format.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    min_score (int): The minimum score (inclusive) for the range.
    max_score (int): The maximum score (exclusive) for the range.
    Returns:
    int: The number of students who scored within the specified range.
    """"""
    # prepare a list to store scores
    scores = []
    # calculate the score for each student
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            scores.append(stem * 10 + leaf[j])
    # filter the scores within the specified range
    filtered = [score for score in scores if min_score <= score < max_score]
    # count the number of students
    num_students = len(filtered)
    return num_students","We should first create a pandas dataframe with the data from the table. Note that some elements are empty, so we need to fill them with empty lists. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],
    'Leaf': [[1, 7, 7, 7], [3, 4, 6, 7, 9], [1, 2, 3, 6], [1, 8], [4, 8], [0, 7, 7], [], [8, 8], [0]]
})
# Call the tool to solve the problem
count_students_in_range(df, 40, 90)
```"
Lee counted the number of desks in each classroom at his school. How many classrooms have at least 23 desks?,5.0,"Stem | Leaf 
1 | 2, 5
2 | 1
3 | 0, 2, 6
4 | 5, 9",8,16687,"import pandas as pd
def count_classrooms_with_23_desks(df):
    """"""
    This function takes in a pandas dataframe of desks per classroom, and returns the number of classrooms that have at least 23 desks.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of desks per classroom.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of classrooms that have at least 23 desks.
    """"""
    # prepare a list to calculate desks in each classroom
    desks = []
    # calculate the total number of desks in each classroom
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            desks.append(stem * 10 + leaf[j])
    # filter the classrooms where the total number of desks is greater than or equal to 23
    filtered = [desk for desk in desks if desk >= 23]
    # count the number of rows
    num_classrooms = len(filtered)
    return num_classrooms","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [1, 2, 3, 4],
    'Leaf': [[2, 5], [1], [0, 2, 6], [5, 9]]
})
# Call the tool to solve the problem
count_classrooms_with_23_desks(df)
```"
A waitress kept track of how many hours she worked each day. What is the mean of the numbers?,9.0,"Day | Hours
Thursday | 10
Friday | 10
Saturday | 9
Sunday | 10
Monday | 7
Tuesday | 8",8,9091,"import pandas as pd

def calculate_mean(df, column_name):
    """"""
    This function takes in a pandas DataFrame and a column name, and returns the mean of the values in that column.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the data.
    column_name (str): The name of the column containing the values to calculate the mean.
    Returns:
    float: The mean of the values in the specified column.
    """"""
    # Calculate the sum of the values in the column
    total = df[column_name].sum()
    
    # Calculate the number of values in the column
    num_values = len(df[column_name])
    
    # Calculate the mean
    mean = total / num_values
    
    return mean","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday'],
    'Hours': [10, 10, 9, 10, 7, 8]
})
# Call the tool to solve the problem
mean_hours = calculate_mean(df, 'Hours')
print(mean_hours)
```"
"As part of a stuffed animal drive for the local children's hospital, the students at Wells Elementary School record how many stuffed animals they have collected. How many students have fewer than 2 stuffed animals?",12.0,"Number of stuffed animals | Frequency
0 | 7
1 | 5
2 | 4
3 | 11
4 | 10
5 | 0",7,5705,"import pandas as pd

def count_students_with_fewer_than_2_stuffed_animals(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of the number of stuffed animals collected by students, and returns the number of students who have collected fewer than 2 stuffed animals.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of stuffed animals and their frequencies with columns 'Number of stuffed animals' and 'Frequency'.
    Returns:
    int: The number of students who have collected fewer than 2 stuffed animals.
    """"""
    # Filter the DataFrame for the rows where the number of stuffed animals is less than 2
    filtered_df = df[df['Number of stuffed animals'] < 2]
    
    # Sum the frequencies of these rows to get the total number of students
    num_students = filtered_df['Frequency'].sum()
    
    return num_students","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of stuffed animals': [0, 1, 2, 3, 4, 5],
    'Frequency': [7, 5, 4, 11, 10, 0]
})
# Call the tool to solve the problem
count_students_with_fewer_than_2_stuffed_animals(df)
```"
The county released data about how many schools there are in each town. What is the range of the numbers?,8.0,"Town | Number of schools
Richmond | 1
Salem | 9
Riverside | 8
Ashland | 3
Chesterton | 8
Columbia | 1
Mayfield | 6
Marion | 6",7,8038,"import pandas as pd

def calculate_range(df):
    """"""
    This function takes in a pandas DataFrame representing a table of towns and their number of schools, and returns the range of the number of schools.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing town names and their number of schools with columns 'Town' and 'Number of schools'.
    Returns:
    int: The range of the number of schools.
    """"""
    # Calculate the range of the number of schools
    range_schools = df['Number of schools'].max() - df['Number of schools'].min()
    
    return range_schools","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Town': ['Richmond', 'Salem', 'Riverside', 'Ashland', 'Chesterton', 'Columbia', 'Mayfield', 'Marion'],
    'Number of schools': [1, 9, 8, 3, 8, 1, 6, 6]
})
# Call the tool to solve the problem
calculate_range(df)
```"
"Nolan is selling candy bars to raise money for his baseball team. The frequency chart shows the types of candy bars he has already sold. Nolan sold half of the chocolate raspberry bars and all of the white chocolate bars to his history teacher, Ms. Gomez. How many candy bars did she buy?",19.0,"Type | Frequency
dark chocolate | 25
chocolate raspberry | 22
chocolate caramel | 15
white chocolate | 8",5,13492,"import pandas as pd

def calculate_candy_bars_sold(df, sold_dict):
    """"""
    This function takes in a pandas DataFrame representing a frequency chart of candy bars and a dictionary of sold candy bars, and returns the total number of candy bars sold.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing types of candy bars and their frequencies with columns 'Type' and 'Frequency'.
    sold_dict (dict): A dictionary where the keys are candy bar types and the values are the proportion of each type sold.
    Returns:
    int: The total number of candy bars sold.
    """"""
    # Initialize the total number of candy bars sold
    total_sold = 0
    
    # Iterate through the candy bar types and calculate the number sold for each type
    for type, proportion in sold_dict.items():
        # Filter the DataFrame for the specific type
        type_df = df[df['Type'] == type]
        if not type_df.empty:
            type_frequency = type_df['Frequency'].values[0]
            total_sold += proportion * type_frequency
    
    return total_sold","We should first create a pandas dataframe with the data from the table. Then we create a dictionary with the proportion of each type of candy bars sold to Ms. Gomez. Finally, we call the tool to solve the problem and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Type': ['dark chocolate', 'chocolate raspberry', 'chocolate caramel', 'white chocolate'],
    'Frequency': [25, 22, 15, 8]
})

# Create a dictionary with the proportion of each type of candy bars sold to Ms. Gomez
sold_dict = {'chocolate raspberry': 0.5, 'white chocolate': 1}

# Call the tool to solve the problem
candy_bars_sold = calculate_candy_bars_sold(df, sold_dict)
print(candy_bars_sold)
```"
"Fans of the Winchester baseball team compared the number of games won by their team each year. According to the table, what was the rate of change between 2008 and 2009?",-2.0,"Year | Games won
2006 | 9
2007 | 2
2008 | 17
2009 | 15
2010 | 8",8,7295,"import pandas as pd

def calculate_rate_of_change(df, start_year, end_year):
    """"""
    This function takes in a pandas DataFrame representing a table of games won each year and two years, and returns the rate of change of games won between the two years.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing years and the number of games won each year with columns 'Year' and 'Games won'.
    start_year (int): The start year for calculating the rate of change.
    end_year (int): The end year for calculating the rate of change.
    Returns:
    float: The rate of change of games won between the two years.
    """"""
    # Filter the DataFrame for the start year and end year
    start_year_df = df[df['Year'] == start_year]
    end_year_df = df[df['Year'] == end_year]
    
    # Check if the start year and end year exist in the DataFrame
    if not start_year_df.empty and not end_year_df.empty:
        # Calculate the rate of change
        start_year_games_won = start_year_df['Games won'].values[0]
        end_year_games_won = end_year_df['Games won'].values[0]
        rate_of_change = (end_year_games_won - start_year_games_won) / (end_year - start_year)
        
        return rate_of_change
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Year': [2006, 2007, 2008, 2009, 2010],
    'Games won': [9, 2, 17, 15, 8]
})

# Call the tool to solve the problem
rate_of_change = calculate_rate_of_change(df, 2008, 2009)
print(rate_of_change)
```"
Jack counted the number of cookies eaten by each customer at last week's bake sale. How many customers ate at least 2 cookies last week?,35.0,"Cookies eaten | Frequency
1 | 14
2 | 8
3 | 10
4 | 11
5 | 6",7,7396,"import pandas as pd

def count_customers(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of cookies eaten by customers, and returns the number of customers who ate at least 2 cookies.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of cookies eaten and the frequency with columns 'Cookies eaten' and 'Frequency'.
    Returns:
    int: The number of customers who ate at least 2 cookies.
    """"""
    # Filter the DataFrame for the customers who ate at least 2 cookies
    filtered_df = df[df['Cookies eaten'] >= 2]
    
    # Sum the frequency column to get the total number of customers
    total_customers = filtered_df['Frequency'].sum()
    
    return total_customers","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Cookies eaten': [1, 2, 3, 4, 5],
    'Frequency': [14, 8, 10, 11, 6]
})

# Call the tool to solve the problem
count_customers(df)
```"
How much money does Audrey need to buy a brass clip and an elastic band?,0.12,"brass clip | $0.04
short steel screw | $0.04
four-inch nail | $0.09
elastic band | $0.08",4,5075,"import pandas as pd

def calculate_cost(menu_df, items):
    """"""
    This function takes in a pandas DataFrame representing a table of items and their prices, and a list of items to be purchased, and returns the total cost of the items using pandas.
    Args:
    menu_df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.
    items (list): A list of item names to be purchased.
    Returns:
    float: The total cost of the items.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the items and calculate the cost for each item
    for item in items:
        # Filter the DataFrame for the specific item
        item_df = menu_df[menu_df['Item'] == item]
        if not item_df.empty:
            item_price = item_df['Price'].values[0]
            total_cost += item_price
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
menu_df = pd.DataFrame({
    'Item': ['brass clip', 'short steel screw', 'four-inch nail', 'elastic band'],
    'Price': [0.04, 0.04, 0.09, 0.08]
})

# Define the items to be purchased
items = ['brass clip', 'elastic band']

# Call the tool to solve the problem
total_cost = calculate_cost(menu_df, items)

# Print the total cost
print(f'The total cost is ${total_cost:.2f}')
```"
Some friends played miniature golf and wrote down their scores. What is the median of the numbers?,34.0,"Name | Score
Audrey | 27
Clare | 43
Jasmine | 41
Emmy | 36
Olivia | 33
Devin | 30
Henry | 34",5,10844,"import pandas as pd

def calculate_median(df, column_name):
    """"""
    This function takes in a pandas DataFrame and a column name, and returns the median of the values in the specified column.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the data.
    column_name (str): The name of the column containing the values for which the median should be calculated.
    Returns:
    float: The median of the values in the specified column.
    """"""
    # Sort the DataFrame by the specified column
    sorted_df = df.sort_values(by=column_name)
    
    # Calculate the median
    n = len(sorted_df)
    if n % 2 == 0:
        median = (sorted_df.iloc[n//2 - 1][column_name] + sorted_df.iloc[n//2][column_name]) / 2
    else:
        median = sorted_df.iloc[n//2][column_name]
    
    return median","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Name': ['Audrey', 'Clare', 'Jasmine', 'Emmy', 'Olivia', 'Devin', 'Henry'],
    'Score': [27, 43, 41, 36, 33, 30, 34]
})
# Call the tool to solve the problem
median_score = calculate_median(df, 'Score')
print(median_score)
```"
How much money does Brody need to buy a piece of black obsidian and an orange agate?,0.14,"piece of black obsidian | $0.09
smooth piece of sea glass | $0.08
orange agate | $0.05
piece of polished granite | $0.02",3,15880,"import pandas as pd

def calculate_total_cost(menu_df, orders):
    """"""
    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.
    Args:
    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.
    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.
    Returns:
    float: The total cost of the orders.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the menu items and calculate the cost for each ordered item
    for item, quantity in orders.items():
        # Filter the DataFrame for the specific item
        item_df = menu_df[menu_df['Item'] == item]
        if not item_df.empty:
            item_price = item_df['Price'].values[0]
            total_cost += quantity * item_price
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we create a dictionary of orders. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
menu_df = pd.DataFrame({
    'Item': ['piece of black obsidian', 'smooth piece of sea glass', 'orange agate', 'piece of polished granite'],
    'Price': [0.09, 0.08, 0.05, 0.02]
})

# Initialize the orders
orders = {
    'piece of black obsidian': 1,
    'orange agate': 1
}

# Call the tool to solve the problem
total_cost = calculate_total_cost(menu_df, orders)

# Print out the answer
print(f'Brody needs ${total_cost} to buy a piece of black obsidian and an orange agate.')
```"
William went on a vacation to an amusement park and counted how many rides he went on each day. What is the median of the numbers?,6.0,"Day | Number of rides
Tuesday | 4
Wednesday | 6
Thursday | 8
Friday | 8
Saturday | 6",7,11701,"import pandas as pd
import numpy as np

def calculate_median(df):
    """"""
    This function takes in a pandas DataFrame representing a table of days and number of rides, and returns the median number of rides.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing days and number of rides with columns 'Day' and 'Number of rides'.
    Returns:
    float: The median number of rides.
    """"""
    # Extract the 'Number of rides' column and calculate its median
    median_rides = np.median(df['Number of rides'])
    
    return median_rides","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    'Number of rides': [4, 6, 8, 8, 6]
})
# Call the tool to solve the problem
median_rides = calculate_median(df)
print(median_rides)
```"
The parks department compared how many soccer fields there are at each park. What is the mean of the numbers?,6.0,"Park | Number of soccer fields
Moon Park | 3
Lighthouse Park | 7
Middle Park | 8
Elmhurst Park | 8
Juniper Park | 9
Canyon Park | 8
Windy Hill Park | 2
Madison Park | 3",5,11299,"import pandas as pd

def calculate_mean(df, column_name):
    """"""
    This function takes in a pandas DataFrame and a column name, and returns the mean of the values in the specified column.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the data.
    column_name (str): The name of the column to calculate the mean for.
    Returns:
    float: The mean of the values in the specified column.
    """"""
    # Calculate the mean of the specified column
    mean_value = df[column_name].mean()
    
    return mean_value","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Park': ['Moon Park', 'Lighthouse Park', 'Middle Park', 'Elmhurst Park', 'Juniper Park', 'Canyon Park', 'Windy Hill Park', 'Madison Park'],
    'Number of soccer fields': [3, 7, 8, 8, 9, 8, 2, 3]
})
# Call the tool to solve the problem
mean_value = calculate_mean(df, 'Number of soccer fields')
print(mean_value)
```"
A real estate agent counted the number of offices per floor in the building she is selling. How many floors have exactly 61 offices?,3.0,"Stem | Leaf 
5 | 3
6 | 1, 1, 1
7 | 4, 8
8 | 0, 7, 7
9 | 0",8,16162,"import pandas as pd

def count_floors_with_61_offices(df):
    """"""
    This function takes in a pandas dataframe of offices per floor, and returns the number of floors that have exactly 61 offices.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of offices per floor.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of floors that have exactly 61 offices.
    """"""
    # prepare a list to calculate offices in each floor
    offices = []
    # calculate the total number of offices in each floor
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            offices.append(stem * 10 + leaf[j])
    # filter the floors where the total number of offices is exactly 61
    filtered = [office for office in offices if office == 61]
    # count the number of rows
    num_floors = len(filtered)
    return num_floors","We should first create a pandas dataframe with the data from the table. Note that some elements are not lists, so we need to convert them into lists. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [5, 6, 7, 8, 9],
    'Leaf': [[3], [1, 1, 1], [4, 8], [0, 7, 7], [0]]
})
# Call the tool to solve the problem
count_floors_with_61_offices(df)
```"
Darnell bought 2 pounds of fusilli pasta and 1 pound of penne pasta. How much did he spend?,13.0,"rigatoni pasta | $5/pound
spirali pasta | $7/pound
penne pasta | $5/pound
fusilli pasta | $4/pound",7,14995,"import pandas as pd

def calculate_spending(menu_df, orders):
    """"""
    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.
    Args:
    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.
    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.
    Returns:
    float: The total cost of the orders.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the menu items and calculate the cost for each ordered item
    for item, quantity in orders.items():
        # Filter the DataFrame for the specific item
        item_df = menu_df[menu_df['Item'] == item]
        if not item_df.empty:
            item_price = item_df['Price'].values[0]
            total_cost += quantity * item_price
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we create a dictionary to represent the orders. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
menu_df = pd.DataFrame({
    'Item': ['rigatoni pasta', 'spirali pasta', 'penne pasta', 'fusilli pasta'],
    'Price': [5, 7, 5, 4]
})

# Initialize the orders
orders = {
    'fusilli pasta': 2,
    'penne pasta': 1
}

# Call the tool to solve the problem
total_cost = calculate_spending(menu_df, orders)

# Print out the answer
print(f'Darnell spent ${total_cost}.')
```"
The school district compared how many swings each elementary school has. What is the mean of the numbers?,5.0,"School | Number of swings
Jefferson Elementary | 4
Valley Elementary | 5
Boyd Elementary | 7
Canyon Elementary | 7
Sierra Elementary | 2",7,8,"import pandas as pd

def calculate_mean(df, column_name):
    """"""
    This function takes in a pandas DataFrame and a column name, and returns the mean of the values in the specified column.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the data.
    column_name (str): The name of the column for which the mean should be calculated.
    Returns:
    float: The mean of the values in the specified column.
    """"""
    # Calculate the mean of the specified column
    mean_value = df[column_name].mean()
    
    return mean_value","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'School': ['Jefferson Elementary', 'Valley Elementary', 'Boyd Elementary', 'Canyon Elementary', 'Sierra Elementary'],
    'Number of swings': [4, 5, 7, 7, 2]
})
# Call the tool to solve the problem
mean_value = calculate_mean(df, 'Number of swings')
print(mean_value)
```"
Sophia baked cookies each day for a bake sale. What is the mean of the numbers?,72.0,"Day | Number of cookies
Wednesday | 77
Thursday | 73
Friday | 63
Saturday | 74
Sunday | 73",5,17217,"import pandas as pd
import numpy as np

def calculate_mean(df):
    """"""
    This function takes in a pandas DataFrame representing a table of days and number of cookies, and returns the mean number of cookies baked.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing days and number of cookies with columns 'Day' and 'Number of cookies'.
    Returns:
    float: The mean number of cookies baked.
    """"""
    # Calculate the mean using numpy
    mean = np.mean(df['Number of cookies'])
    
    return mean","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],
    'Number of cookies': [77, 73, 63, 74, 73]
})

# Call the tool to solve the problem
mean = calculate_mean(df)
print(mean)
```"
The parents running this year's craft sale counted the number of key chains made by volunteers. How many people made fewer than 3 key chains?,26.0,"Key chains made | Frequency
1 | 7
2 | 19
3 | 16
4 | 18
5 | 2
6 | 9",7,331,"import pandas as pd

def count_people_made_fewer_than_3_key_chains(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of key chains made by volunteers, and returns the number of people who made fewer than 3 key chains.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of key chains made and their frequencies with columns 'Key chains made' and 'Frequency'.
    Returns:
    int: The number of people who made fewer than 3 key chains.
    """"""
    # Filter the DataFrame for the rows where the number of key chains made is less than 3
    filtered_df = df[df['Key chains made'] < 3]
    
    # Sum the frequencies of these rows to get the total number of people who made fewer than 3 key chains
    num_people = filtered_df['Frequency'].sum()
    
    return num_people","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Key chains made': [1, 2, 3, 4, 5, 6],
    'Frequency': [7, 19, 16, 18, 2, 9]
})
# Call the tool to solve the problem
count_people_made_fewer_than_3_key_chains(df)
```"
Professor Yang informed his students of their scores on the midterm exam. How many students scored fewer than 100 points?,21.0,"Stem | Leaf 
2 | 1, 5, 7
3 | 4, 8
4 | 3, 4
5 | 5, 7
6 | 1, 4
7 | 2, 2, 7
8 | 0, 2, 3, 6, 9
9 | 0, 0",4,2810,"import pandas as pd

def count_students_with_less_than_100(df):
    """"""
    This function takes in a pandas dataframe of students' scores, and returns the number of students who scored fewer than 100 points.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the students' scores.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of students who scored fewer than 100 points.
    """"""
    # prepare a list to store scores
    scores = []
    # calculate the score of each student
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            scores.append(stem * 10 + leaf[j])
    # filter the students where the score is less than 100
    filtered = [score for score in scores if score < 100]
    # count the number of students
    num_students = len(filtered)
    return num_students","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],
    'Leaf': [[1, 5, 7], [4, 8], [3, 4], [5, 7], [1, 4], [2, 2, 7], [0, 2, 3, 6, 9], [0, 0]]
})
# Call the tool to solve the problem
count_students_with_less_than_100(df)
```"
A business magazine surveyed its readers about their commute times. How many commutes are exactly 50 minutes?,1.0,"Stem | Leaf 
1 | 5, 9
2 | 
3 | 2
4 | 
5 | 0
6 | 0, 4, 7, 8
7 | 
8 | 
9 | 0",4,2494,"import pandas as pd
def count_commutes_of_50_minutes(df):
    """"""
    This function takes in a pandas dataframe of commute times, and returns the number of commutes that are exactly 50 minutes.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the commute times.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of commutes that are exactly 50 minutes.
    """"""
    # prepare a list to calculate commute times
    commute_times = []
    # calculate the total commute time in each row
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            commute_times.append(stem * 10 + leaf[j])
    # filter the commutes where the total commute time is exactly 50 minutes
    filtered = [time for time in commute_times if time == 50]
    # count the number of rows
    num_commutes = len(filtered)
    return num_commutes","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],
    'Leaf': [[5, 9], [], [2], [], [0], [0, 4, 7, 8], [], [], [0]]
})
# Call the tool to solve the problem
count_commutes_of_50_minutes(df)
```"
"Mrs. Landry hosts an annual art contest for kids, and she keeps a record of the number of entries each year. According to the table, what was the rate of change between 2009 and 2010?",15.0,"Year | Number of entries
2007 | 14
2008 | 16
2009 | 13
2010 | 28
2011 | 28",8,8598,"import pandas as pd

def calculate_rate_of_change(df, start_year, end_year):
    """"""
    This function takes in a pandas DataFrame representing a table of number of entries per year and two years, and returns the rate of change between the two years.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing years and number of entries with columns 'Year' and 'Number of entries'.
    start_year (int): The start year for calculating the rate of change.
    end_year (int): The end year for calculating the rate of change.
    Returns:
    float: The rate of change between the two years.
    """"""
    # Filter the DataFrame for the start year and end year
    start_year_df = df[df['Year'] == start_year]
    end_year_df = df[df['Year'] == end_year]
    
    # Check if the start year and end year exist in the DataFrame
    if not start_year_df.empty and not end_year_df.empty:
        # Calculate the rate of change
        start_entries = start_year_df['Number of entries'].values[0]
        end_entries = end_year_df['Number of entries'].values[0]
        rate_of_change = (end_entries - start_entries) / start_entries
        return rate_of_change
    else:
        return None","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Year': [2007, 2008, 2009, 2010, 2011],
    'Number of entries': [14, 16, 13, 28, 28]
})

# Call the tool to solve the problem
rate_of_change = calculate_rate_of_change(df, 2009, 2010)
print(rate_of_change)
```"
A tennis fan counted the number of matches won by her favorite players last summer. How many players won fewer than 2 matches last summer?,20.0,"Tennis matches won | Frequency
0 | 1
1 | 19
2 | 14
3 | 15",7,16209,"import pandas as pd

def count_players_won_less_than_2(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of tennis matches won, and returns the number of players who won fewer than 2 matches.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of matches won and the frequency of players with columns 'Tennis matches won' and 'Frequency'.
    Returns:
    int: The number of players who won fewer than 2 matches.
    """"""
    # Filter the DataFrame for the players who won fewer than 2 matches
    filtered_df = df[df['Tennis matches won'] < 2]
    
    # Sum the frequency of these players
    num_players = filtered_df['Frequency'].sum()
    
    return num_players","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Tennis matches won': [0, 1, 2, 3],
    'Frequency': [1, 19, 14, 15]
})

# Call the tool to solve the problem
count_players_won_less_than_2(df)
```"
"Mrs. Johnson, the biology teacher, asked her students how many times they went to the science museum last year. How many students went to the science museum exactly 6 times last year?",7.0,"Number of trips | Frequency
0 | 20
1 | 14
2 | 8
3 | 15
4 | 18
5 | 10
6 | 7",8,1166,"import pandas as pd

def count_students_with_exact_visits(df, visits):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of museum visits and a number of visits, and returns the number of students who visited the museum exactly that number of times.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of museum visits and their frequencies with columns 'Number of trips' and 'Frequency'.
    visits (int): The number of museum visits to count.
    Returns:
    int: The number of students who visited the museum exactly the specified number of times.
    """"""
    # Filter the DataFrame for the specific number of visits
    visits_df = df[df['Number of trips'] == visits]
    if not visits_df.empty:
        # Return the frequency for the specified number of visits
        return visits_df['Frequency'].values[0]
    else:
        # If no students visited the museum exactly the specified number of times, return 0
        return 0","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of trips': [0, 1, 2, 3, 4, 5, 6],
    'Frequency': [20, 14, 8, 15, 18, 10, 7]
})
# Call the tool to solve the problem
print(count_students_with_exact_visits(df, 6))
```"
"Victoria buys 5 pounds of spaghetti squash, 4 pounds of globe squash, and 5 pounds of pumpkin. What is the total cost?",21.41,"globe squash | $1.89 per pound
zucchini | $2.39 per pound
spaghetti squash | $0.69 per pound
pumpkin | $2.08 per pound",8,14195,"import pandas as pd

def calculate_total_cost(menu_df, orders):
    """"""
    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.
    Args:
    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.
    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.
    Returns:
    float: The total cost of the orders.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the menu items and calculate the cost for each ordered item
    for item, quantity in orders.items():
        # Filter the DataFrame for the specific item
        item_df = menu_df[menu_df['Item'] == item]
        if not item_df.empty:
            item_price = item_df['Price'].values[0]
            total_cost += quantity * item_price
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we create a dictionary for the orders. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
menu_df = pd.DataFrame({
    'Item': ['globe squash', 'zucchini', 'spaghetti squash', 'pumpkin'],
    'Price': [1.89, 2.39, 0.69, 2.08]
})

# Initialize the orders
orders = {
    'spaghetti squash': 5,
    'globe squash': 4,
    'pumpkin': 5
}

# Call the tool to solve the problem
total_cost = calculate_total_cost(menu_df, orders)
print(f'The total cost is ${total_cost:.2f}')
```"
How much more does a book about Africa cost than a book about dinosaurs?,4.72,"book about dinosaurs | $19.44
book about dogs | $21.63
book about sharks | $16.92
book about Africa | $24.16",7,6762,"import pandas as pd

def calculate_price_difference(df, item1, item2):
    """"""
    This function takes in a pandas DataFrame representing a book price table and two book names, and returns the price difference between the two books.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing book names and their prices with columns 'Book' and 'Price'.
    item1 (str): The name of the first book.
    item2 (str): The name of the second book.
    Returns:
    float: The price difference between the two books.
    """"""
    # Filter the DataFrame for the specific books
    book1_df = df[df['Book'] == item1]
    book2_df = df[df['Book'] == item2]
    
    # Check if both books are in the DataFrame
    if not book1_df.empty and not book2_df.empty:
        # Calculate the price difference
        price_difference = book2_df['Price'].values[0] - book1_df['Price'].values[0]
        return price_difference
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Book': ['book about dinosaurs', 'book about dogs', 'book about sharks', 'book about Africa'],
    'Price': [19.44, 21.63, 16.92, 24.16]
})
# Call the tool to solve the problem
price_difference = calculate_price_difference(df, 'book about dinosaurs', 'book about Africa')
print(price_difference)
```"
Clarence counted the number of pieces of pepperoni on each pizza he made. How many pizzas had at least 20 pieces of pepperoni?,9.0,"Stem | Leaf 
1 | 9, 9
2 | 3, 7, 8
3 | 3
4 | 1, 2, 3, 4, 9",8,16736,"import pandas as pd
def count_pizzas_with_20_pepperoni(df):
    """"""
    This function takes in a pandas dataframe of pepperoni per pizza, and returns the number of pizzas that have at least 20 pieces of pepperoni.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of pepperoni per pizza.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of pizzas that have at least 20 pieces of pepperoni.
    """"""
    # prepare a list to calculate pepperoni in each pizza
    pepperoni = []
    # calculate the total number of pepperoni in each pizza
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            pepperoni.append(stem * 10 + leaf[j])
    # filter the pizzas where the total number of pepperoni is greater than or equal to 20
    filtered = [pizza for pizza in pepperoni if pizza >= 20]
    # count the number of rows
    num_pizzas = len(filtered)
    return num_pizzas","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [1, 2, 3, 4],
    'Leaf': [[9, 9], [3, 7, 8], [3], [1, 2, 3, 4, 9]]
})
# Call the tool to solve the problem
count_pizzas_with_20_pepperoni(df)
```"
Each branch has 10 apples. How many apples are on 3 branches?,30.0,"Number of branches | Number of apples
1 | 10
2 | 20
3 | ?",1,5198,"def calculate_apples_on_branches(df, target_branches):
    """"""
    This function takes in a pandas DataFrame representing a table of branches and apples, and calculates the number of apples on the target number of branches.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of branches and the corresponding number of apples with columns 'Number of branches' and 'Number of apples'.
    target_branches (int): The target number of branches to calculate the number of apples for.
    Returns:
    int: The number of apples on the target number of branches.
    """"""
    # Calculate the number of apples per branch
    apples_per_branch = df['Number of apples'][0] / df['Number of branches'][0]
    
    # Calculate the number of apples on the target number of branches
    apples_on_target_branches = target_branches * apples_per_branch
    
    return int(apples_on_target_branches)","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of branches': [1, 2],
    'Number of apples': [10, 20]
})

# Call the tool to solve the problem
apples_on_3_branches = calculate_apples_on_branches(df, 3)
print(apples_on_3_branches)
```"
Each bin has 2 blue blocks. How many blue blocks are in 3 bins?,6.0,"Number of bins | Number of blue blocks
1 | 2
2 | 4
3 | ?",2,14292,"def calculate_blue_blocks(df, num_bins):
    """"""
    This function takes in a pandas DataFrame representing a table of the number of bins and the corresponding number of blue blocks, and a number of bins, and returns the number of blue blocks in the given number of bins.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of bins and the corresponding number of blue blocks with columns 'Number of bins' and 'Number of blue blocks'.
    num_bins (int): The number of bins.
    Returns:
    int: The number of blue blocks in the given number of bins.
    """"""
    # Calculate the number of blue blocks per bin
    blocks_per_bin = df['Number of blue blocks'][0] / df['Number of bins'][0]
    
    # Calculate the number of blue blocks in the given number of bins
    num_blocks = blocks_per_bin * num_bins
    
    return int(num_blocks)","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of bins': [1, 2],
    'Number of blue blocks': [2, 4]
})

# Call the tool to solve the problem
num_blocks = calculate_blue_blocks(df, 3)
print(num_blocks)
```"
The players on a quiz show received the following scores. What is the median of the numbers?,10.0,"Name | Score
Hunter | 5
Dalton | 1
Franklin | 12
Rosa | 19
Gabriel | 10",5,1717,"import pandas as pd
import numpy as np

def calculate_median(df):
    """"""
    This function takes in a pandas DataFrame representing a score table and returns the median score.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing player names and their scores with columns 'Name' and 'Score'.
    Returns:
    float: The median score.
    """"""
    # Extract the 'Score' column and calculate its median
    median_score = np.median(df['Score'])
    
    return median_score","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Name': ['Hunter', 'Dalton', 'Franklin', 'Rosa', 'Gabriel'],
    'Score': [5, 1, 12, 19, 10]
})

# Call the tool to solve the problem
median_score = calculate_median(df)
print(median_score)
```"
"A pair of Grant High School hockey fans counted the number of games won by the school each year. According to the table, what was the rate of change between 2015 and 2016?",-1.0,"Year | Games won
2013 | 11
2014 | 14
2015 | 5
2016 | 4
2017 | 18",7,12808,"import pandas as pd

def calculate_rate_of_change(df, year1, year2):
    """"""
    This function takes in a pandas DataFrame representing a table of games won each year and two years, and returns the rate of change in games won between the two years.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing years and the number of games won each year with columns 'Year' and 'Games won'.
    year1 (int): The first year.
    year2 (int): The second year.
    Returns:
    float: The rate of change in games won between the two years.
    """"""
    # Filter the DataFrame for the specific years
    year1_df = df[df['Year'] == year1]
    year2_df = df[df['Year'] == year2]
    
    # Check if the years exist in the DataFrame
    if not year1_df.empty and not year2_df.empty:
        # Calculate the rate of change
        rate_of_change = (year2_df['Games won'].values[0] - year1_df['Games won'].values[0]) / (year2 - year1)
        return rate_of_change
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Year': [2013, 2014, 2015, 2016, 2017],
    'Games won': [11, 14, 5, 4, 18]
})
# Call the tool to solve the problem
rate_of_change = calculate_rate_of_change(df, 2015, 2016)
print(rate_of_change)
```"
"Every afternoon, Deb enjoys a cup of hot tea in one of her many teacups. Once, Deb counted all the teacups in her collection, noting their colors and size. What is the probability that a randomly selected cup is green and medium? Simplify any fractions.",0.2222222222," | Small | Medium
Green | 7 | 4
Yellow | 4 | 3",8,15052,"import pandas as pd

def calculate_probability(teacup_df):
    """"""
    This function takes in a pandas DataFrame representing a table of teacups and their colors and sizes, and returns the probability that a randomly selected cup is green and medium.
    Args:
    teacup_df (pd.DataFrame): A pandas DataFrame containing teacup colors and sizes with columns 'Small', 'Medium' and index as 'Color'.
    Returns:
    float: The probability that a randomly selected cup is green and medium.
    """"""
    # Calculate the total number of teacups
    total_teacups = teacup_df.sum().sum()
    
    # Calculate the number of green and medium teacups
    green_medium_teacups = teacup_df.loc['Green', 'Medium']
    
    # Calculate the probability
    probability = green_medium_teacups / total_teacups
    
    return probability","```python
# Initialize the table into a dataframe
teacup_df = pd.DataFrame({
    'Small': [7, 4],
    'Medium': [4, 3]
}, index=['Green', 'Yellow'])

# Call the tool to solve the problem
probability = calculate_probability(teacup_df)

# Print the answer
print(""The probability that a randomly selected cup is green and medium is:"", probability)
```"
How much money does Logan need to buy 8 pieces of elegant stationery?,6.96,"purple envelope | $0.51
orange envelope | $0.83
sheet of blue and yellow paper | $0.66
sheet of bright yellow paper | $0.75
piece of elegant stationery | $0.87",8,4162,"import pandas as pd

def calculate_total_cost_single_item(menu_df, item, quantity):
    """"""
    This function takes in a pandas DataFrame representing a menu table, an item name and a quantity, and returns the total cost of the orders using pandas.
    Args:
    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.
    item (str): The name of the item to be ordered.
    quantity (int): The quantity of the item to be ordered.
    Returns:
    float: The total cost of the orders.
    """"""
    # Filter the DataFrame for the specific item
    item_df = menu_df[menu_df['Item'] == item]
    if not item_df.empty:
        item_price = item_df['Price'].values[0]
        total_cost = quantity * item_price
    else:
        total_cost = 0.0
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
menu_df = pd.DataFrame({
    'Item': ['purple envelope', 'orange envelope', 'sheet of blue and yellow paper', 'sheet of bright yellow paper', 'piece of elegant stationery'],
    'Price': [0.51, 0.83, 0.66, 0.75, 0.87]
})

# Call the tool to solve the problem
total_cost = calculate_total_cost_single_item(menu_df, 'piece of elegant stationery', 8)
print(total_cost)
```"
How much more does a bright blue desktop cost than a super desktop?,7370.0,"bright blue desktop | $9,651.00
business desktop | $1,412.00
wide-screen laptop | $7,210.00
super desktop | $2,281.00
kids' desktop | $3,263.00
business laptop | $2,292.00",8,2763,"import pandas as pd

def calculate_price_difference(menu_df, item1, item2):
    """"""
    This function takes in a pandas DataFrame representing a menu table and two item names, and returns the price difference between the two items.
    Args:
    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.
    item1 (str): The name of the first item.
    item2 (str): The name of the second item.
    Returns:
    float: The price difference between the two items.
    """"""
    # Filter the DataFrame for the specific items
    item1_df = menu_df[menu_df['Item'] == item1]
    item2_df = menu_df[menu_df['Item'] == item2]
    
    # Check if both items exist in the DataFrame
    if not item1_df.empty and not item2_df.empty:
        item1_price = item1_df['Price'].values[0]
        item2_price = item2_df['Price'].values[0]
        price_difference = item1_price - item2_price
        return price_difference
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
menu_df = pd.DataFrame({
    'Item': ['bright blue desktop', 'business desktop', 'wide-screen laptop', 'super desktop', 'kids\' desktop', 'business laptop'],
    'Price': [9651.00, 1412.00, 7210.00, 2281.00, 3263.00, 2292.00]
})

# Call the tool to solve the problem
price_difference = calculate_price_difference(menu_df, 'bright blue desktop', 'super desktop')
print(price_difference)
```"
"While hanging Christmas lights for neighbors, Darnell counted the number of broken lights on each string. What is the smallest number of broken lights?",10.0,"Stem | Leaf 
1 | 0, 0, 3, 6
2 | 2, 7, 8, 8
3 | 0, 9, 9
4 | 5, 7, 9
5 | 0, 1, 5, 7, 9
6 | 0, 4, 9
7 | 
8 | 8, 8
9 | 0",8,15069,"import pandas as pd

def find_smallest_number(df):
    """"""
    This function takes in a pandas dataframe of broken lights per string, and returns the smallest number of broken lights.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of broken lights per string.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The smallest number of broken lights.
    """"""
    # prepare a list to calculate broken lights in each string
    broken_lights = []
    # calculate the total number of broken lights in each string
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            broken_lights.append(stem * 10 + leaf[j])
    # find the smallest number of broken lights
    smallest_number = min(broken_lights)
    return smallest_number","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],
    'Leaf': [[0, 0, 3, 6], [2, 7, 8, 8], [0, 9, 9], [5, 7, 9], [0, 1, 5, 7, 9], [0, 4, 9], [], [8, 8], [0]]
})
# Call the tool to solve the problem
find_smallest_number(df)
```"
Each truck has 5 rakes. How many rakes are in 5 trucks?,25.0,"Number of trucks | Number of rakes
1 | 5
2 | 10
3 | 15
4 | 20
5 | ?",1,6438,"import pandas as pd

def calculate_rakes_in_trucks(df, num_trucks):
    """"""
    This function takes in a pandas DataFrame representing a table of trucks and rakes, and returns the number of rakes in the given number of trucks.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of trucks and the corresponding number of rakes with columns 'Number of trucks' and 'Number of rakes'.
    num_trucks (int): The number of trucks for which the number of rakes is to be calculated.
    Returns:
    int: The number of rakes in the given number of trucks.
    """"""
    # Check if the number of trucks is already in the DataFrame
    truck_df = df[df['Number of trucks'] == num_trucks]
    if not truck_df.empty:
        return truck_df['Number of rakes'].values[0]
    
    # If the number of trucks is not in the DataFrame, calculate the number of rakes using the given pattern
    rakes_per_truck = df['Number of rakes'][0] / df['Number of trucks'][0]
    return int(num_trucks * rakes_per_truck)","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of trucks': [1, 2, 3, 4],
    'Number of rakes': [5, 10, 15, 20]
})
# Call the tool to solve the problem
print(calculate_rakes_in_trucks(df, 5))
```"
A stock broker followed the stock prices of a certain set of companies. How much did Watson and Partners's stock cost on Thursday?,4.0,"Company | Wednesday | Thursday
Watson and Partners | $1 | $4
Thompson Corporation | $12 | $3
Computer Data Company | $15 | $20",5,6861,"import pandas as pd

def get_stock_price(df, company, day):
    """"""
    This function takes in a pandas DataFrame representing a stock price table, a company name, and a day, and returns the stock price of the company on the given day.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing stock prices with columns 'Company', 'Wednesday', 'Thursday', etc.
    company (str): The name of the company.
    day (str): The day of the week.
    Returns:
    float: The stock price of the company on the given day.
    """"""
    # Filter the DataFrame for the specific company
    company_df = df[df['Company'] == company]
    if not company_df.empty:
        # Get the stock price on the given day
        stock_price = company_df[day].values[0]
        return stock_price
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Company': ['Watson and Partners', 'Thompson Corporation', 'Computer Data Company'],
    'Wednesday': [1, 12, 15],
    'Thursday': [4, 3, 20]
})
# Call the tool to solve the problem
print(get_stock_price(df, 'Watson and Partners', 'Thursday'))
```"
"While planning a class party, the students voted for their favorite cookies. How many more girls voted for chocolate chip than sugar?",8.0,"Cookie | Boys | Girls
Chocolate chip | 7 | 10
Cinnamon | 12 | 20
Sugar | 13 | 2
Oatmeal | 12 | 18
Lemon | 20 | 12",4,10395,"import pandas as pd

def calculate_cookie_difference(df, cookie1, cookie2, gender):
    """"""
    This function takes in a pandas DataFrame representing a cookie voting table, and calculates the difference in votes between two cookies for a specific gender.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing cookie voting data with columns 'Cookie', 'Boys', and 'Girls'.
    cookie1 (str): The name of the first cookie.
    cookie2 (str): The name of the second cookie.
    gender (str): The gender for which the difference in votes should be calculated ('Boys' or 'Girls').
    Returns:
    int: The difference in votes between the two cookies for the specified gender.
    """"""
    # Filter the DataFrame for the specific cookies
    cookie1_df = df[df['Cookie'] == cookie1]
    cookie2_df = df[df['Cookie'] == cookie2]
    
    # Get the number of votes for each cookie for the specified gender
    cookie1_votes = cookie1_df[gender].values[0]
    cookie2_votes = cookie2_df[gender].values[0]
    
    # Calculate the difference in votes
    vote_difference = abs(cookie1_votes - cookie2_votes)
    
    return vote_difference","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Cookie': ['Chocolate chip', 'Cinnamon', 'Sugar', 'Oatmeal', 'Lemon'],
    'Boys': [7, 12, 13, 12, 20],
    'Girls': [10, 20, 2, 18, 12]
})

# Call the tool to solve the problem
difference = calculate_cookie_difference(df, 'Chocolate chip', 'Sugar', 'Girls')
print(difference)
```"
A veterinarian weighed all the dogs that visited his office last month. How many dogs weighed at least 46 pounds but less than 65 pounds?,4.0,"Stem | Leaf 
2 | 4, 4
3 | 5, 9
4 | 2, 2, 6, 7, 8
5 | 
6 | 0
7 | 4, 5
8 | 0, 3, 4
9 | 0",6,74,"import pandas as pd
def count_dogs_in_weight_range(df, min_weight, max_weight):
    """"""
    This function takes in a pandas dataframe of dog weights, and returns the number of dogs that weigh at least min_weight pounds but less than max_weight pounds.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the weights of dogs. The dataframe should contain ""Stem"" and ""Leaf"" columns.
    min_weight (int): The minimum weight (inclusive).
    max_weight (int): The maximum weight (exclusive).
    Returns:
    int: The number of dogs that weigh at least min_weight pounds but less than max_weight pounds.
    """"""
    # prepare a list to calculate weight of each dog
    weights = []
    # calculate the weight of each dog
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            weights.append(stem * 10 + leaf[j])
    # filter the dogs where the weight is greater than or equal to min_weight and less than max_weight
    filtered = [weight for weight in weights if weight >= min_weight and weight < max_weight]
    # count the number of rows
    num_dogs = len(filtered)
    return num_dogs","We should first create a pandas dataframe with the data from the table. Note that some elements are empty, so we need to fill them with empty lists. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],
    'Leaf': [[4, 4], [5, 9], [2, 2, 6, 7, 8], [], [0], [4, 5], [0, 3, 4], [0]]
})
# Call the tool to solve the problem
count_dogs_in_weight_range(df, 46, 65)
```"
Sofia's classmates revealed how many science articles they read. What is the mean of the numbers?,5.0,"Name | Number of science articles
Sofia | 4
Michelle | 5
Gordon | 3
Emilio | 8
Zachary | 6
Pamela | 2
Hugo | 8
Joel | 4",8,16223,"import pandas as pd
import numpy as np

def calculate_mean(df):
    """"""
    This function takes in a pandas DataFrame representing a table of names and the number of science articles they read, and returns the mean number of articles read.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing names and the number of science articles they read with columns 'Name' and 'Number of science articles'.
    Returns:
    float: The mean number of science articles read.
    """"""
    # Calculate the mean of the 'Number of science articles' column
    mean_articles = np.mean(df['Number of science articles'])
    
    return mean_articles","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Name': ['Sofia', 'Michelle', 'Gordon', 'Emilio', 'Zachary', 'Pamela', 'Hugo', 'Joel'],
    'Number of science articles': [4, 5, 3, 8, 6, 2, 8, 4]
})

# Call the tool to solve the problem
mean_articles = calculate_mean(df)

# Print the answer
print(mean_articles)
```"
How much money does Clara need to buy 6 chests of drawers and 4 nightstands?,876.58,"bookcase | $92.32
footstool | $31.07
nightstand | $86.62
chest of drawers | $88.35
set of bunk beds | $88.37
kitchen table | $62.88",8,14335,"import pandas as pd

def calculate_total_cost(furniture_df, orders):
    """"""
    This function takes in a pandas DataFrame representing a furniture price table and a dictionary of orders, and returns the total cost of the orders using pandas.
    Args:
    furniture_df (pd.DataFrame): A pandas DataFrame containing furniture items and their prices with columns 'Item' and 'Price'.
    orders (dict): A dictionary where the keys are furniture item names and the values are the number of orders for each item.
    Returns:
    float: The total cost of the orders.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the furniture items and calculate the cost for each ordered item
    for item, quantity in orders.items():
        # Filter the DataFrame for the specific item
        item_df = furniture_df[furniture_df['Item'] == item]
        if not item_df.empty:
            item_price = item_df['Price'].values[0]
            total_cost += quantity * item_price
    
    return total_cost","```python
# Initialize the table into a dataframe
furniture_df = pd.DataFrame({
    'Item': ['bookcase', 'footstool', 'nightstand', 'chest of drawers', 'set of bunk beds', 'kitchen table'],
    'Price': [92.32, 31.07, 86.62, 88.35, 88.37, 62.88]
})

# Define the orders
orders = {'chest of drawers': 6, 'nightstand': 4}

# Call the tool to solve the problem
total_cost = calculate_total_cost(furniture_df, orders)

# Print the answer
print(total_cost)
```"
"In a recent election at Henderson University, five people ran for student body president. What fraction of votes were for Brooke? Simplify your answer.",0.1111111111,"Candidate | Votes
Brooke | 210
Brianna | 610
Lauren | 280
Mitchell | 620
Patrick | 170",7,13521,"import pandas as pd

def calculate_vote_fraction(df, candidate):
    """"""
    This function takes in a pandas DataFrame representing a voting table and a candidate's name, and returns the fraction of votes for the candidate.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing candidates and their votes with columns 'Candidate' and 'Votes'.
    candidate (str): The name of the candidate.
    Returns:
    float: The fraction of votes for the candidate.
    """"""
    # Calculate the total votes
    total_votes = df['Votes'].sum()
    
    # Filter the DataFrame for the specific candidate
    candidate_df = df[df['Candidate'] == candidate]
    if not candidate_df.empty:
        candidate_votes = candidate_df['Votes'].values[0]
        vote_fraction = candidate_votes / total_votes
    else:
        vote_fraction = 0.0
    
    return vote_fraction","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Candidate': ['Brooke', 'Brianna', 'Lauren', 'Mitchell', 'Patrick'],
    'Votes': [210, 610, 280, 620, 170]
})

# Call the tool to solve the problem
fraction = calculate_vote_fraction(df, 'Brooke')

# Print the answer
print(fraction)
```"
"On the first day of music class, students submitted a survey. One survey question asked students to report which music genre they prefer. Another question asked students how frequently they sing in the shower. What is the probability that a randomly selected student sings in the shower 1-2 times a week and prefers rock? Simplify any fractions.",0.125," | Country | Rock
0 times a week | 2 | 6
1-2 times a week | 6 | 2",8,11002,"import pandas as pd

def calculate_probability(df, shower_frequency, music_genre):
    """"""
    This function takes in a pandas DataFrame representing a survey table, a shower frequency, and a music genre, and returns the probability that a randomly selected student sings in the shower with the given frequency and prefers the given music genre.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing survey results with columns 'Shower Frequency', 'Country', 'Rock'.
    shower_frequency (str): A string representing the shower frequency.
    music_genre (str): A string representing the music genre.
    Returns:
    float: The probability that a randomly selected student sings in the shower with the given frequency and prefers the given music genre.
    """"""
    # Calculate the total number of students
    total_students = df['Country'].sum() + df['Rock'].sum()
    
    # Filter the DataFrame for the specific shower frequency
    frequency_df = df[df['Shower Frequency'] == shower_frequency]
    
    # Get the number of students who sing in the shower with the given frequency and prefer the given music genre
    genre_students = frequency_df[music_genre].values[0]
    
    # Calculate the probability
    probability = genre_students / total_students
    
    return probability","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Shower Frequency': ['0 times a week', '1-2 times a week'],
    'Country': [2, 6],
    'Rock': [6, 2]
})

# Call the tool to solve the problem
probability = calculate_probability(df, '1-2 times a week', 'Rock')
print(probability)
```"
A pet store owner had his staff count the number of fish in each tank. How many tanks have at least 30 fish but fewer than 70 fish?,8.0,"Stem | Leaf 
1 | 0, 0, 6, 9
2 | 4
3 | 4, 5
4 | 4
5 | 0
6 | 4, 7, 8, 9
7 | 7
8 | 
9 | 0",4,13341,"import pandas as pd
def count_tanks_with_30_to_70_fish(df):
    """"""
    This function takes in a pandas dataframe of fish per tank, and returns the number of tanks that have at least 30 fish but fewer than 70 fish.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of fish per tank.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of tanks that have at least 30 fish but fewer than 70 fish.
    """"""
    # prepare a list to calculate fish in each tank
    fish = []
    # calculate the total number of fish in each tank
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            fish.append(stem * 10 + leaf[j])
    # filter the tanks where the total number of fish is greater than or equal to 30 and less than 70
    filtered = [f for f in fish if f >= 30 and f < 70]
    # count the number of rows
    num_tanks = len(filtered)
    return num_tanks","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],
    'Leaf': [[0, 0, 6, 9], [4], [4, 5], [4], [0], [4, 7, 8, 9], [7], [], [0]]
})
# Call the tool to solve the problem
count_tanks_with_30_to_70_fish(df)
```"
"Mrs. Williamson told students how many rounds to expect in the spelling bee based on previous years. According to the table, what was the rate of change between 2018 and 2019?",3.0,"Year | Rounds
2015 | 9
2016 | 14
2017 | 6
2018 | 12
2019 | 15",7,12450,"import pandas as pd

def calculate_rate_of_change(df, year1, year2):
    """"""
    This function takes in a pandas DataFrame representing a table of years and rounds, and calculates the rate of change between two given years.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing years and rounds with columns 'Year' and 'Rounds'.
    year1 (int): The first year to compare.
    year2 (int): The second year to compare.
    Returns:
    float: The rate of change between the two years.
    """"""
    # Filter the DataFrame for the specific years
    year1_df = df[df['Year'] == year1]
    year2_df = df[df['Year'] == year2]
    
    if not year1_df.empty and not year2_df.empty:
        rounds1 = year1_df['Rounds'].values[0]
        rounds2 = year2_df['Rounds'].values[0]
        
        # Calculate the rate of change
        rate_of_change = rounds2 - rounds1
        return rate_of_change
    else:
        return None","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Year': [2015, 2016, 2017, 2018, 2019],
    'Rounds': [9, 14, 6, 12, 15]
})

# Call the tool to solve the problem
rate_of_change = calculate_rate_of_change(df, 2018, 2019)
print(rate_of_change)
```"
Each plate has 10 bagels. How many bagels are on 6 plates?,60.0,"Number of plates | Number of bagels
1 | 10
2 | 20
3 | 30
4 | 40
5 | 50
6 | ?",1,14144,"def calculate_bagels(plates):
    """"""
    This function takes in the number of plates and returns the number of bagels based on the given ratio.
    Args:
    plates (int): The number of plates.
    Returns:
    int: The number of bagels.
    """"""
    # The ratio of plates to bagels is 1:10
    bagels = plates * 10
    return bagels","```python
# Call the tool to solve the problem
calculate_bagels(6)
```"
"Kurt, who rents properties for a living, measures all the offices in a building he is renting. How many offices are exactly 44 square meters?",2.0,"Stem | Leaf 
1 | 2
2 | 5
3 | 9
4 | 1, 4, 4, 6, 7
5 | 
6 | 7, 8
7 | 
8 | 9",7,549,"import pandas as pd

def count_offices_with_44_sqm(df):
    """"""
    This function takes in a pandas dataframe of office sizes, and returns the number of offices that are exactly 44 square meters.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the sizes of offices.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of offices that are exactly 44 square meters.
    """"""
    # prepare a list to calculate size of each office
    sizes = []
    # calculate the size of each office
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            sizes.append(stem * 10 + leaf[j])
    # filter the offices where the size is exactly 44 square meters
    filtered = [size for size in sizes if size == 44]
    # count the number of rows
    num_offices = len(filtered)
    return num_offices","We should first create a pandas dataframe with the data from the table. Note that some elements are empty, so we need to fill them with empty lists. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],
    'Leaf': [[2], [5], [9], [1, 4, 4, 6, 7], [], [7, 8], [], [9]]
})
# Call the tool to solve the problem
count_offices_with_44_sqm(df)
```"
Trent counted the number of pieces of pepperoni on each pizza he made. What is the largest number of pieces of pepperoni?,49.0,"Stem | Leaf 
1 | 2, 4, 5, 7, 7
2 | 1, 7
3 | 3, 8
4 | 0, 2, 2, 2, 3, 3, 4, 7, 9",7,6086,"import pandas as pd

def find_max_pepperoni(df):
    """"""
    This function takes in a pandas dataframe of pepperoni per pizza, and returns the maximum number of pepperoni on a pizza.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of pepperoni per pizza.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The maximum number of pepperoni on a pizza.
    """"""
    # prepare a list to calculate pepperoni on each pizza
    pepperoni = []
    # calculate the total number of pepperoni on each pizza
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            pepperoni.append(stem * 10 + leaf[j])
    # find the maximum number of pepperoni
    max_pepperoni = max(pepperoni)
    return max_pepperoni","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [1, 2, 3, 4],
    'Leaf': [[2, 4, 5, 7, 7], [1, 7], [3, 8], [0, 2, 2, 2, 3, 3, 4, 7, 9]]
})
# Call the tool to solve the problem
print(find_max_pepperoni(df))
```"
How much money does Emily need to buy 4 garnet rings and 5 jade necklaces?,7022.0,"opal pendant | $851.00
jade necklace | $834.00
diamond bracelet | $911.00
silver necklace | $198.00
garnet ring | $713.00",7,3928,"import pandas as pd

def calculate_total_cost(jewelry_df, orders):
    """"""
    This function takes in a pandas DataFrame representing a jewelry table and a dictionary of orders, and returns the total cost of the orders using pandas.
    Args:
    jewelry_df (pd.DataFrame): A pandas DataFrame containing jewelry items and their prices with columns 'Item' and 'Price'.
    orders (dict): A dictionary where the keys are jewelry item names and the values are the number of orders for each item.
    Returns:
    float: The total cost of the orders.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the jewelry items and calculate the cost for each ordered item
    for item, quantity in orders.items():
        # Filter the DataFrame for the specific item
        item_df = jewelry_df[jewelry_df['Item'] == item]
        if not item_df.empty:
            item_price = item_df['Price'].values[0]
            total_cost += quantity * item_price
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we create a dictionary for the orders. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
jewelry_df = pd.DataFrame({
    'Item': ['opal pendant', 'jade necklace', 'diamond bracelet', 'silver necklace', 'garnet ring'],
    'Price': [851.00, 834.00, 911.00, 198.00, 713.00]
})

# Initialize the orders
orders = {
    'garnet ring': 4,
    'jade necklace': 5
}

# Call the tool to solve the problem
total_cost = calculate_total_cost(jewelry_df, orders)
print(f'Emily needs ${total_cost} to buy 4 garnet rings and 5 jade necklaces.')
```"
Matt went to the store and bought 3 pounds of hazelnuts and 1 pound of walnuts. How much did he spend?,25.99,"cashews | $8.72 per lb
almonds | $8.94 per lb
walnuts | $7.54 per lb
pecans | $8.27 per lb
hazelnuts | $6.15 per lb
peanuts | $3.02 per lb",8,4220,"import pandas as pd

def calculate_nut_cost(nuts_df, orders):
    """"""
    This function takes in a pandas DataFrame representing a nuts price table and a dictionary of orders, and returns the total cost of the orders using pandas.
    Args:
    nuts_df (pd.DataFrame): A pandas DataFrame containing nut types and their prices per pound with columns 'Nut' and 'Price_per_lb'.
    orders (dict): A dictionary where the keys are nut types and the values are the number of pounds for each type.
    Returns:
    float: The total cost of the orders.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the nut types and calculate the cost for each ordered type
    for nut, quantity in orders.items():
        # Filter the DataFrame for the specific nut type
        nut_df = nuts_df[nuts_df['Nut'] == nut]
        if not nut_df.empty:
            nut_price = nut_df['Price_per_lb'].values[0]
            total_cost += quantity * nut_price
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we create a dictionary to represent the orders. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
nuts_df = pd.DataFrame({
    'Nut': ['cashews', 'almonds', 'walnuts', 'pecans', 'hazelnuts', 'peanuts'],
    'Price_per_lb': [8.72, 8.94, 7.54, 8.27, 6.15, 3.02]
})

# Initialize the orders
orders = {'hazelnuts': 3, 'walnuts': 1}

# Call the tool to solve the problem
total_cost = calculate_nut_cost(nuts_df, orders)

# Print out the answer
print(f'Matt spent ${total_cost:.2f}')
```"
Bridget counted the number of peanuts in each bag of trail mix. How many bags had exactly 66 peanuts?,0.0,"Stem | Leaf 
1 | 9
2 | 4
3 | 4
4 | 5
5 | 7
6 | 
7 | 
8 | 6
9 | 0",7,4780,"import pandas as pd
def count_bags_with_66_peanuts(df):
    """"""
    This function takes in a pandas dataframe of peanuts per bag, and returns the number of bags that have exactly 66 peanuts.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of peanuts per bag.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    Returns:
    int: The number of bags that have exactly 66 peanuts.
    """"""
    # prepare a list to calculate peanuts in each bag
    peanuts = []
    # calculate the total number of peanuts in each bag
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            peanuts.append(stem * 10 + leaf[j])
    # filter the bags where the total number of peanuts is exactly 66
    filtered = [peanut for peanut in peanuts if peanut == 66]
    # count the number of rows
    num_bags = len(filtered)
    return num_bags","We should first create a pandas dataframe with the data from the table. Note that some elements are empty, so we need to fill them with empty lists. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],
    'Leaf': [[9], [4], [4], [5], [7], [], [], [6], [0]]
})
# Call the tool to solve the problem
count_bags_with_66_peanuts(df)
```"
"Mr. Newman, the English teacher, had his students track the number of books they read last month. How many students read at least 3 books last month?",6.0,"Books read | Frequency
0 | 9
1 | 19
2 | 1
3 | 2
4 | 4",7,13346,"import pandas as pd

def count_students_read_at_least_3_books(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of books read by students, and returns the number of students who read at least 3 books.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of books read and the frequency of students who read that many books. The DataFrame should have columns 'Books read' and 'Frequency'.
    Returns:
    int: The number of students who read at least 3 books.
    """"""
    # Filter the DataFrame for students who read at least 3 books
    filtered_df = df[df['Books read'] >= 3]
    
    # Sum the frequency column of the filtered DataFrame to get the total number of students
    num_students = filtered_df['Frequency'].sum()
    
    return num_students","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Books read': [0, 1, 2, 3, 4],
    'Frequency': [9, 19, 1, 2, 4]
})

# Call the tool to solve the problem
count_students_read_at_least_3_books(df)
```"
Each roof has 2 sparrows. How many sparrows are on 6 roofs?,12.0,"Number of roofs | Number of sparrows
1 | 2
2 | 4
3 | 6
4 | 8
5 | 10
6 | ?",1,14459,"def calculate_sparrows_on_roofs(df, num_roofs):
    """"""
    This function takes in a pandas DataFrame representing a table of the number of sparrows on each roof and the number of roofs, and returns the number of sparrows on the specified number of roofs.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number of roofs and the corresponding number of sparrows with columns 'Number of roofs' and 'Number of sparrows'.
    num_roofs (int): The number of roofs.
    Returns:
    int: The number of sparrows on the specified number of roofs.
    """"""
    # Find the number of sparrows per roof
    sparrows_per_roof = df['Number of sparrows'][0] / df['Number of roofs'][0]
    
    # Calculate the number of sparrows on the specified number of roofs
    num_sparrows = sparrows_per_roof * num_roofs
    
    return num_sparrows","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number of roofs': [1, 2, 3, 4, 5],
    'Number of sparrows': [2, 4, 6, 8, 10]
})

# Call the tool to solve the problem
num_sparrows = calculate_sparrows_on_roofs(df, 6)
print(num_sparrows)
```"
Emmett counted the number of articles in several different magazines. How many magazines had at least 37 articles but less than 48 articles?,4.0,"Stem | Leaf 
1 | 0, 1, 5
2 | 0, 0, 2, 4, 7, 8, 8
3 | 0, 0
4 | 0, 0, 1, 2",8,10924,"import pandas as pd

def count_magazines_in_range(df, min_articles, max_articles):
    """"""
    This function takes in a pandas dataframe of magazine articles, a minimum number of articles, and a maximum number of articles,
    and returns the number of magazines that have at least the minimum number of articles but less than the maximum number of articles.
    Args:
    df (pandas.DataFrame): A pandas DataFrame object containing the number of articles per magazine.
    The dataframe should contain ""Stem"" and ""Leaf"" columns.
    min_articles (int): The minimum number of articles a magazine should have.
    max_articles (int): The maximum number of articles a magazine should have.
    Returns:
    int: The number of magazines that have at least the minimum number of articles but less than the maximum number of articles.
    """"""
    # prepare a list to calculate articles in each magazine
    articles = []
    # calculate the total number of articles in each magazine
    for i in range(len(df)):
        stem = df['Stem'][i]
        leaf = df['Leaf'][i]
        for j in range(len(leaf)):
            articles.append(stem * 10 + leaf[j])
    # filter the magazines where the total number of articles is in the specified range
    filtered = [article for article in articles if min_articles <= article < max_articles]
    # count the number of rows
    num_magazines = len(filtered)
    return num_magazines","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Stem': [1, 2, 3, 4],
    'Leaf': [[0, 1, 5], [0, 0, 2, 4, 7, 8, 8], [0, 0], [0, 0, 1, 2]]
})
# Call the tool to solve the problem
count_magazines_in_range(df, 37, 48)
```"
"If Kathleen buys 5 pounds of lemon sours and 5 pounds of yogurt-covered peanuts, how much will she spend?",40.0,"gummy bears | $3 per pound
chocolates | $1 per pound
lemon sours | $4 per pound
yogurt-covered peanuts | $4 per pound
chocolate-covered raisins | $1 per pound",7,7155,"import pandas as pd

def calculate_total_cost(menu_df, orders):
    """"""
    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.
    Args:
    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.
    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.
    Returns:
    float: The total cost of the orders.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the menu items and calculate the cost for each ordered item
    for item, quantity in orders.items():
        # Filter the DataFrame for the specific item
        item_df = menu_df[menu_df['Item'] == item]
        if not item_df.empty:
            item_price = item_df['Price'].values[0]
            total_cost += quantity * item_price
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we create a dictionary for the orders. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
menu_df = pd.DataFrame({
    'Item': ['gummy bears', 'chocolates', 'lemon sours', 'yogurt-covered peanuts', 'chocolate-covered raisins'],
    'Price': [3, 1, 4, 4, 1]
})

# Initialize the orders
orders = {
    'lemon sours': 5,
    'yogurt-covered peanuts': 5
}

# Call the tool to solve the problem
total_cost = calculate_total_cost(menu_df, orders)
print(f'The total cost is ${total_cost}.')
```"
A researcher working for a cereal company surveyed people about their cereal consumption habits. How many people ate cereal more than 2 times?,11.0,"Times eaten | Frequency
0 | 11
1 | 18
2 | 13
3 | 1
4 | 10",7,11267,"import pandas as pd

def count_people_eating_cereal_more_than_2_times(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency table of cereal consumption habits, and returns the number of people who ate cereal more than 2 times.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the times eaten and their frequencies with columns 'Times eaten' and 'Frequency'.
    Returns:
    int: The number of people who ate cereal more than 2 times.
    """"""
    # Filter the DataFrame for the times eaten more than 2
    filtered_df = df[df['Times eaten'] > 2]
    
    # Sum up the frequencies
    total_people = filtered_df['Frequency'].sum()
    
    return total_people","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Times eaten': [0, 1, 2, 3, 4],
    'Frequency': [11, 18, 13, 1, 10]
})
# Call the tool to solve the problem
count_people_eating_cereal_more_than_2_times(df)
```"
A game show viewer monitors how often a wheel numbered 1 through 5 stops at each number. How many people are there in all?,71.0,"Number spun | Frequency
1 | 20
2 | 13
3 | 16
4 | 10
5 | 12",8,5302,"import pandas as pd

def calculate_total_people(df):
    """"""
    This function takes in a pandas DataFrame representing a frequency table and returns the total number of people.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing the number spun and its frequency with columns 'Number spun' and 'Frequency'.
    Returns:
    int: The total number of people.
    """"""
    # Sum up the frequency column to get the total number of people
    total_people = df['Frequency'].sum()
    
    return total_people","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Number spun': [1, 2, 3, 4, 5],
    'Frequency': [20, 13, 16, 10, 12]
})
# Call the tool to solve the problem
total_people = calculate_total_people(df)
print(total_people)
```"
How much more does a macaw cost than a python?,505.0,"parrot | $251
cockatiel | $667
macaw | $623
python | $118
tortoise | $635
llama | $231",7,2864,"import pandas as pd

def calculate_price_difference(df, item1, item2):
    """"""
    This function takes in a pandas DataFrame representing a price table and two item names, and returns the price difference between the two items.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing items and their prices with columns 'Item' and 'Price'.
    item1 (str): The name of the first item.
    item2 (str): The name of the second item.
    Returns:
    float: The price difference between the two items.
    """"""
    # Filter the DataFrame for the specific items
    item1_df = df[df['Item'] == item1]
    item2_df = df[df['Item'] == item2]
    
    # Check if the items exist in the DataFrame
    if not item1_df.empty and not item2_df.empty:
        item1_price = item1_df['Price'].values[0]
        item2_price = item2_df['Price'].values[0]
        
        # Calculate and return the price difference
        return abs(item1_price - item2_price)
    else:
        return None","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Item': ['parrot', 'cockatiel', 'macaw', 'python', 'tortoise', 'llama'],
    'Price': [251, 667, 623, 118, 635, 231]
})
# Call the tool to solve the problem
price_difference = calculate_price_difference(df, 'macaw', 'python')
print(price_difference)
```"
What is the total cost for 3 pounds of couscous and 5 pounds of oats?,20.38,"barley | $2.73/pound
wheat | $2.65/pound
couscous | $1.86/pound
rice | $2.08/pound
oats | $2.96/pound",7,945,"import pandas as pd

def calculate_total_cost(menu_df, orders):
    """"""
    This function takes in a pandas DataFrame representing a menu table and a dictionary of orders, and returns the total cost of the orders using pandas.
    Args:
    menu_df (pd.DataFrame): A pandas DataFrame containing menu items and their prices with columns 'Item' and 'Price'.
    orders (dict): A dictionary where the keys are menu item names and the values are the number of orders for each item.
    Returns:
    float: The total cost of the orders.
    """"""
    # Initialize the total cost
    total_cost = 0.0
    
    # Iterate through the menu items and calculate the cost for each ordered item
    for item, quantity in orders.items():
        # Filter the DataFrame for the specific item
        item_df = menu_df[menu_df['Item'] == item]
        if not item_df.empty:
            item_price = item_df['Price'].values[0]
            total_cost += quantity * item_price
    
    return total_cost","We should first create a pandas dataframe with the data from the table. Then we create a dictionary for the orders. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
menu_df = pd.DataFrame({
    'Item': ['barley', 'wheat', 'couscous', 'rice', 'oats'],
    'Price': [2.73, 2.65, 1.86, 2.08, 2.96]
})

# Initialize the orders
orders = {'couscous': 3, 'oats': 5}

# Call the tool to solve the problem
total_cost = calculate_total_cost(menu_df, orders)
print(f'The total cost for 3 pounds of couscous and 5 pounds of oats is ${total_cost:.2f}')
```"
Hillsdale Elementary School polled its students about their favorite vegetables in order to decide which ones to plant in the new school garden. How many students voted for broccoli?,6.0,"Vegetable | Upper elementary students | Lower elementary students
Broccoli | 1 | 5
Spinach | 17 | 2
Peas | 19 | 7",4,1562,"import pandas as pd

def count_votes_for_vegetable(df, vegetable):
    """"""
    This function takes in a pandas DataFrame representing a poll table and a string of vegetable name, and returns the total votes for the vegetable.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing vegetables and votes from upper and lower elementary students with columns 'Vegetable', 'Upper elementary students', and 'Lower elementary students'.
    vegetable (str): A string of the vegetable name.
    Returns:
    int: The total votes for the vegetable.
    """"""
    # Filter the DataFrame for the specific vegetable
    vegetable_df = df[df['Vegetable'] == vegetable]
    if not vegetable_df.empty:
        # Sum the votes from upper and lower elementary students
        total_votes = vegetable_df['Upper elementary students'].values[0] + vegetable_df['Lower elementary students'].values[0]
        return total_votes
    else:
        return 0","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Vegetable': ['Broccoli', 'Spinach', 'Peas'],
    'Upper elementary students': [1, 17, 19],
    'Lower elementary students': [5, 2, 7]
})
# Call the tool to solve the problem
votes_for_broccoli = count_votes_for_vegetable(df, 'Broccoli')
print(votes_for_broccoli)
```"
Each laundry basket has 10 shirts. How many shirts are in 4 laundry baskets?,40.0,"Number of laundry baskets | Number of shirts
1 | 10
2 | 20
3 | 30
4 | ?",1,11697,"def calculate_shirts_in_baskets(basket_count):
    """"""
    This function takes in the number of laundry baskets and returns the number of shirts in those baskets.
    Args:
    basket_count (int): The number of laundry baskets.
    Returns:
    int: The number of shirts in the given number of laundry baskets.
    """"""
    # Each basket contains 10 shirts
    shirts_per_basket = 10
    # Calculate the total number of shirts
    total_shirts = basket_count * shirts_per_basket
    return total_shirts","We should first initialize the number of laundry baskets, then call the tool to solve the problem, and print out the answer.
```python
# Initialize the number of laundry baskets
basket_count = 4
# Call the tool to solve the problem
calculate_shirts_in_baskets(basket_count)
```"
The board of commerce gave a survey to determine how many employees work at each company. What is the median of the numbers?,77.0,"Company | Number of employees
Smith Electronics | 82
A to Z Books | 73
Country Bakery | 77
Township Real Estate | 66
Wakefield and Watson | 79",5,11297,"import pandas as pd
import numpy as np

def calculate_median(df):
    """"""
    This function takes in a pandas DataFrame representing a table of companies and their number of employees, and returns the median number of employees.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing company names and their number of employees with columns 'Company' and 'Number of employees'.
    Returns:
    float: The median number of employees.
    """"""
    # Extract the 'Number of employees' column and convert it to a numpy array
    num_employees = df['Number of employees'].values
    
    # Calculate and return the median
    return np.median(num_employees)","```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Company': ['Smith Electronics', 'A to Z Books', 'Country Bakery', 'Township Real Estate', 'Wakefield and Watson'],
    'Number of employees': [82, 73, 77, 66, 79]
})

# Call the tool to solve the problem
median = calculate_median(df)
print(median)
```"
A sports fan decided to examine the pattern of medals won by certain countries at several Olympic games. How many medals did Finland win in 2004?,2.0,"Country | 2004 | 2008
Finland | 2 | 4
Brazil | 10 | 15
Romania | 19 | 8",5,12077,"import pandas as pd

def get_medals_won(df, country, year):
    """"""
    This function takes in a pandas DataFrame representing a table of medals won by countries at several Olympic games, a country name, and a year, and returns the number of medals won by the specified country in the specified year.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing countries and the number of medals they won in different years. The DataFrame should have 'Country' as one of the columns and the rest of the columns should be years.
    country (str): The name of the country.
    year (str): The year.
    Returns:
    int: The number of medals won by the specified country in the specified year.
    """"""
    # Filter the DataFrame for the specific country
    country_df = df[df['Country'] == country]
    
    # If the country is found in the DataFrame, return the number of medals won in the specified year
    if not country_df.empty:
        return country_df[year].values[0]
    
    # If the country is not found in the DataFrame, return 0
    return 0","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Country': ['Finland', 'Brazil', 'Romania'],
    '2004': [2, 10, 19],
    '2008': [4, 15, 8]
})

# Call the tool to solve the problem
medals = get_medals_won(df, 'Finland', '2004')
print(medals)
```"
Trisha baked cookies each day for a bake sale. How many more cookies did Trisha bake on Monday than on Tuesday?,134.0,"Day | Number of cookies
Saturday | 232
Sunday | 120
Monday | 269
Tuesday | 135",3,3241,"import pandas as pd

def calculate_cookie_difference(df, day1, day2):
    """"""
    This function takes in a pandas DataFrame representing a table of cookies baked per day and two days, and returns the difference in the number of cookies baked between the two days.
    Args:
    df (pd.DataFrame): A pandas DataFrame containing days and the number of cookies baked with columns 'Day' and 'Number of cookies'.
    day1 (str): The first day to compare.
    day2 (str): The second day to compare.
    Returns:
    int: The difference in the number of cookies baked between the two days.
    """"""
    # Filter the DataFrame for the specific days
    day1_df = df[df['Day'] == day1]
    day2_df = df[df['Day'] == day2]
    
    # Get the number of cookies for each day
    day1_cookies = day1_df['Number of cookies'].values[0]
    day2_cookies = day2_df['Number of cookies'].values[0]
    
    # Calculate the difference in the number of cookies
    cookie_difference = day1_cookies - day2_cookies
    
    return cookie_difference","We should first create a pandas dataframe with the data from the table. Then we call the tool to solve the problem, and print out the answer.
```python
# Initialize the table into a dataframe
df = pd.DataFrame({
    'Day': ['Saturday', 'Sunday', 'Monday', 'Tuesday'],
    'Number of cookies': [232, 120, 269, 135]
})
# Call the tool to solve the problem
print(calculate_cookie_difference(df, 'Monday', 'Tuesday'))
```"
