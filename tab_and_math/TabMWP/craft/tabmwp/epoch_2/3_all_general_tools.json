{"question":"While writing a paper on making decisions in groups, Reagan researched the size of a number of committees. What is the size of the largest committee?","answer":90.0,"table":"Stem | Leaf \n3 | 1, 1, 4, 4, 5, 7, 8\n4 | 6\n5 | 2, 2, 4, 7\n6 | 5, 6, 8, 8, 9\n7 | 0, 9, 9\n8 | 1, 3, 4, 8\n9 | 0","level":5,"tool_id":12461,"code":"import pandas as pd\n\ndef find_largest_committee(df):\n    \"\"\"\n    This function takes in a pandas dataframe of committee sizes, and returns the size of the largest committee.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the sizes of committees.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The size of the largest committee.\n    \"\"\"\n    # prepare a list to calculate size of each committee\n    sizes = []\n    # calculate the size of each committee\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            sizes.append(stem * 10 + leaf[j])\n    # find the maximum size\n    max_size = max(sizes)\n    return max_size","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[1, 1, 4, 4, 5, 7, 8], [6], [2, 2, 4, 7], [5, 6, 8, 8, 9], [0, 9, 9], [1, 3, 4, 8], [0]]\n})\n# Call the tool to solve the problem\nprint(find_largest_committee(df))","tool":"def find_max_value_in_stem_leaf(data_frame, stem_col, leaf_col):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a stem-and-leaf plot of items, and returns the maximum value among the items.\n    \n    Args:\n    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.\n    stem_col (str): The column name for the stem values.\n    leaf_col (str): The column name for the leaf values.\n    \n    Returns:\n    int: The maximum value among the items.\n    \"\"\"\n    # Initialize the list to calculate items\n    items = []\n    \n    # Calculate the total value of items\n    for i in range(len(data_frame)):\n        stem = data_frame[stem_col][i]\n        leaf = data_frame[leaf_col][i]\n        for j in range(len(leaf)):\n            items.append(stem * 10 + leaf[j])\n    \n    # Find the maximum value\n    max_value = max(items)\n    \n    return max_value","tool_call":"data = {\n    \"Stem\": [3, 4, 5, 6, 7, 8, 9],\n    \"Leaf\": [[1, 1, 4, 4, 5, 7, 8], [6], [2, 2, 4, 7], [5, 6, 8, 8, 9], [0, 9, 9], [1, 3, 4, 8], [0]]\n}\n\ndf = pd.DataFrame(data)\nprint(find_max_value_in_stem_leaf(data_frame=df, stem_col=\"Stem\", leaf_col=\"Leaf\"))"}
{"question":"For an economics project, Denise determined the cost of ferry rides for bicycles and cars. How much does it cost to take a bicycle on the Ocracoke ferry?","answer":3.0,"table":"Ferry | Bicycle | Car\nOcracoke | $3 | $15\nFauntleroy-Vashon | $5 | $15\nSeattle-Bremerton | $8 | $12\nMukilteu-Clinton | $5 | $7","level":5,"tool_id":9734,"code":"import pandas as pd\n\ndef get_bicycle_cost_on_ferry(ferry_df, ferry_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry table and a ferry name, and returns the cost of taking a bicycle on the specified ferry.\n    Args:\n    ferry_df (pd.DataFrame): A pandas DataFrame containing ferry names and their costs for bicycles and cars with columns 'Ferry', 'Bicycle', and 'Car'.\n    ferry_name (str): The name of the ferry.\n    Returns:\n    float: The cost of taking a bicycle on the specified ferry.\n    \"\"\"\n    # Filter the DataFrame for the specific ferry\n    ferry_df = ferry_df[ferry_df['Ferry'] == ferry_name]\n    if not ferry_df.empty:\n        bicycle_cost = ferry_df['Bicycle'].values[0]\n        return bicycle_cost\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Ocracoke', 'Fauntleroy-Vashon', 'Seattle-Bremerton', 'Mukilteu-Clinton'],\n    'Bicycle': [3, 5, 8, 5],\n    'Car': [15, 15, 12, 7]\n})\n# Call the tool to solve the problem\nbicycle_cost = get_bicycle_cost_on_ferry(df, 'Ocracoke')\nprint(bicycle_cost)","tool":"def get_item_cost_for_entity(cost_df, entity_col, item_col, entity_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of entities and items and their costs, and returns the cost of the specified item for the specified entity.\n    \n    Args:\n    cost_df (pd.DataFrame): A pandas DataFrame containing entity names and their costs for various items.\n    entity_col (str): The column name for the entity names.\n    item_col (str): The column name for the item costs.\n    entity_name (str): The name of the entity.\n    \n    Returns:\n    float: The cost of the item for the specified entity.\n    \"\"\"\n    # Filter the DataFrame for the specific entity\n    entity_df = cost_df[cost_df[entity_col] == entity_name]\n    if not entity_df.empty:\n        item_cost = entity_df[item_col].values[0]\n        return item_cost\n    else:\n        return None","tool_call":"df = pd.DataFrame({\n    'Ferry': ['Ocracoke', 'Fauntleroy-Vashon', 'Seattle-Bremerton', 'Mukilteu-Clinton'],\n    'Bicycle': [3, 5, 8, 5],\n    'Car': [15, 15, 12, 7]\n})\nprint(get_item_cost_for_entity(cost_df=df, entity_col='Ferry', item_col='Bicycle', entity_name='Ocracoke'))"}
{"question":"Several people compared how many Web pages they had visited. How many more Web pages did Diego visit than Carla?","answer":591.0,"table":"Person | Number of Web pages\nAriel | 550\nDiego | 734\nCarla | 143\nGabriel | 343","level":3,"tool_id":16247,"code":"import pandas as pd\n\ndef calculate_difference(df, person1, person2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of people and the number of Web pages they visited, and returns the difference in the number of Web pages visited by two specified people.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing people's names and the number of Web pages they visited with columns 'Person' and 'Number of Web pages'.\n    person1 (str): The name of the first person.\n    person2 (str): The name of the second person.\n    Returns:\n    int: The difference in the number of Web pages visited by person1 and person2.\n    \"\"\"\n    # Filter the DataFrame for the specific people\n    person1_df = df[df['Person'] == person1]\n    person2_df = df[df['Person'] == person2]\n    \n    # Get the number of Web pages visited by each person\n    person1_pages = person1_df['Number of Web pages'].values[0]\n    person2_pages = person2_df['Number of Web pages'].values[0]\n    \n    # Calculate the difference\n    difference = person1_pages - person2_pages\n    \n    return difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Person': ['Ariel', 'Diego', 'Carla', 'Gabriel'],\n    'Number of Web pages': [550, 734, 143, 343]\n})\n\n# Call the tool to solve the problem\ndifference = calculate_difference(df, 'Diego', 'Carla')\nprint(difference)","tool":"def calculate_difference_between_two_entities(df, entity_col, value_col, entity1, entity2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of entities and their values, and returns the difference in values between two specified entities.\n    \n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing entities and their values.\n    entity_col (str): The column name for the entities.\n    value_col (str): The column name for the values.\n    entity1 (str): The name of the first entity.\n    entity2 (str): The name of the second entity.\n    \n    Returns:\n    int: The difference in values between entity1 and entity2.\n    \"\"\"\n    # Filter the DataFrame for the specific entities\n    entity1_df = df[df[entity_col] == entity1]\n    entity2_df = df[df[entity_col] == entity2]\n    \n    # Get the values for each entity\n    entity1_value = entity1_df[value_col].values[0]\n    entity2_value = entity2_df[value_col].values[0]\n    \n    # Calculate the difference\n    difference = entity1_value - entity2_value\n    \n    return difference","tool_call":"df = pd.DataFrame({\n    'Person': ['Ariel', 'Diego', 'Carla', 'Gabriel'],\n    'Number of Web pages': [550, 734, 143, 343]\n})\n\nprint(calculate_difference_between_two_entities(df, 'Person', 'Number of Web pages', 'Diego', 'Carla'))"}
{"question":"For an economics project, Eduardo determined the cost of ferry rides for bicycles and cars. How much higher is the fare for a car on the Mukilteu-Clinton ferry than on the Southport-Fort Fisher ferry?","answer":2.0,"table":"Ferry | Bicycle | Car\nFauntleroy-Vashon | $5 | $15\nOcracoke | $3 | $15\nSouthport-Fort Fisher | $2 | $5\nSeattle-Bremerton | $8 | $12\nMukilteu-Clinton | $5 | $7","level":5,"tool_id":16135,"code":"import pandas as pd\n\ndef calculate_fare_difference(df, ferry1, ferry2, vehicle_type):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry fare table, two ferry names, and a vehicle type, and returns the fare difference between the two ferries for the specified vehicle type.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ferry names and fares for bicycles and cars with columns 'Ferry', 'Bicycle', and 'Car'.\n    ferry1 (str): The name of the first ferry.\n    ferry2 (str): The name of the second ferry.\n    vehicle_type (str): The type of vehicle for which to calculate the fare difference ('Bicycle' or 'Car').\n    Returns:\n    float: The fare difference between the two ferries for the specified vehicle type.\n    \"\"\"\n    # Filter the DataFrame for the specified ferries\n    ferry1_df = df[df['Ferry'] == ferry1]\n    ferry2_df = df[df['Ferry'] == ferry2]\n    \n    # Check if both ferries are in the DataFrame\n    if not ferry1_df.empty and not ferry2_df.empty:\n        # Calculate the fare difference for the specified vehicle type\n        fare_difference = abs(ferry1_df[vehicle_type].values[0] - ferry2_df[vehicle_type].values[0])\n        return fare_difference\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Fauntleroy-Vashon', 'Ocracoke', 'Southport-Fort Fisher', 'Seattle-Bremerton', 'Mukilteu-Clinton'],\n    'Bicycle': [5, 3, 2, 8, 5],\n    'Car': [15, 15, 5, 12, 7]\n})\n\n# Call the tool to solve the problem\nfare_difference = calculate_fare_difference(df, 'Mukilteu-Clinton', 'Southport-Fort Fisher', 'Car')\nprint(fare_difference)","tool":"def calculate_difference_between_two_entities_in_category(fare_table, entity_col, category_col, entity1, entity2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a fare table, two entity names, and a category, and returns the fare difference between the two entities for the specified category.\n    \n    Args:\n    fare_table (pd.DataFrame): A pandas DataFrame containing entity names and fares for different categories.\n    entity_col (str): The column name for the entity names.\n    category_col (str): The column name for the category.\n    entity1 (str): The name of the first entity.\n    entity2 (str): The name of the second entity.\n    \n    Returns:\n    float: The fare difference between the two entities for the specified category.\n    \"\"\"\n    # Filter the DataFrame for the specified entities\n    entity1_df = fare_table[fare_table[entity_col] == entity1]\n    entity2_df = fare_table[fare_table[entity_col] == entity2]\n    \n    # Check if both entities are in the DataFrame\n    if not entity1_df.empty and not entity2_df.empty:\n        # Calculate the fare difference for the specified category\n        fare_difference = abs(entity1_df[category_col].values[0] - entity2_df[category_col].values[0])\n        return fare_difference\n    else:\n        return None","tool_call":"fare_table = pd.DataFrame({\n    'Ferry': ['Fauntleroy-Vashon', 'Ocracoke', 'Southport-Fort Fisher', 'Seattle-Bremerton', 'Mukilteu-Clinton'],\n    'Bicycle': [5, 3, 2, 8, 5],\n    'Car': [15, 15, 5, 12, 7]\n})\n\nprint(calculate_difference_between_two_entities_in_category(fare_table, 'Ferry', 'Car', 'Mukilteu-Clinton', 'Southport-Fort Fisher'))"}
{"question":"A transportation analyst compared various bridges' tolls. How much higher is the toll for a truck on the Golden Gate bridge than on the Fort Madison bridge?","answer":3.0,"table":"Bridge | Truck | Car\nGolden Gate | $7 | $6\nFort Madison | $4 | $1\nOakland Bay | $6 | $4","level":4,"tool_id":6103,"code":"import pandas as pd\n\ndef calculate_toll_difference(df, bridge1, bridge2, vehicle_type):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a toll table, two bridge names, and a vehicle type, and returns the difference in tolls between the two bridges for the specified vehicle type.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge names and their tolls for different vehicle types.\n    bridge1 (str): The name of the first bridge.\n    bridge2 (str): The name of the second bridge.\n    vehicle_type (str): The type of vehicle.\n    Returns:\n    float: The difference in tolls between the two bridges for the specified vehicle type.\n    \"\"\"\n    # Filter the DataFrame for the specific bridges and vehicle type\n    bridge1_df = df[df['Bridge'] == bridge1]\n    bridge2_df = df[df['Bridge'] == bridge2]\n    \n    # Get the tolls for the specified vehicle type on the two bridges\n    bridge1_toll = bridge1_df[vehicle_type].values[0]\n    bridge2_toll = bridge2_df[vehicle_type].values[0]\n    \n    # Calculate the difference in tolls\n    toll_difference = bridge1_toll - bridge2_toll\n    \n    return toll_difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['Golden Gate', 'Fort Madison', 'Oakland Bay'],\n    'Truck': [7, 4, 6],\n    'Car': [6, 1, 4]\n})\n# Call the tool to solve the problem\ntoll_difference = calculate_toll_difference(df, 'Golden Gate', 'Fort Madison', 'Truck')\nprint(toll_difference)","tool":"def calculate_difference_between_two_rows_for_column(df, row_id_col, value_col, row_id1, row_id2):\n    \"\"\"\n    This function takes in a pandas DataFrame, a column for row identifiers, a column for values, and two row identifiers, and returns the difference in values between the two rows for the specified column.\n    \n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing various rows and columns.\n    row_id_col (str): The column name for the row identifiers.\n    value_col (str): The column name for the values.\n    row_id1 (str): The identifier for the first row.\n    row_id2 (str): The identifier for the second row.\n    \n    Returns:\n    float: The difference in values between the two rows for the specified column.\n    \"\"\"\n    # Filter the DataFrame for the specific rows\n    row1_df = df[df[row_id_col] == row_id1]\n    row2_df = df[df[row_id_col] == row_id2]\n    \n    # Get the values for the specified column on the two rows\n    row1_value = row1_df[value_col].values[0]\n    row2_value = row2_df[value_col].values[0]\n    \n    # Calculate the difference in values\n    value_difference = row1_value - row2_value\n    \n    return value_difference","tool_call":"df = pd.DataFrame({\n    'Bridge': ['Golden Gate', 'Fort Madison', 'Oakland Bay'],\n    'Truck': [7, 4, 6],\n    'Car': [6, 1, 4]\n})\nprint(calculate_difference_between_two_rows_for_column(df, 'Bridge', 'Truck', 'Golden Gate', 'Fort Madison'))"}
{"question":"Each pen has 2 cows. How many cows are in 4 pens?","answer":8.0,"table":"Number of pens | Number of cows\n1 | 2\n2 | 4\n3 | 6\n4 | ?","level":1,"tool_id":13541,"code":"import pandas as pd\n\ndef find_cows_in_pens(df, target_pens):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of cows in pens and a target number of pens, and returns the number of cows in the target number of pens.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of pens and the corresponding number of cows with columns 'Number of pens' and 'Number of cows'.\n    target_pens (int): The target number of pens for which the number of cows needs to be found.\n    Returns:\n    int: The number of cows in the target number of pens.\n    \"\"\"\n    # Find the number of cows per pen\n    cows_per_pen = df['Number of cows'][0] \/ df['Number of pens'][0]\n    \n    # Calculate the number of cows in the target number of pens\n    cows_in_target_pens = target_pens * cows_per_pen\n    \n    return int(cows_in_target_pens)","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of pens': [1, 2, 3],\n    'Number of cows': [2, 4, 6]\n})\n\n# Call the tool to solve the problem\nprint(find_cows_in_pens(df, 4))","tool":"def calculate_items_in_target_groups(df, group_col, item_col, target_groups):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of item counts per group and a target number of groups, and returns the number of items in the target number of groups.\n    \n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of groups and the corresponding number of items with columns specified by group_col and item_col.\n    group_col (str): The column name for the group counts.\n    item_col (str): The column name for the item counts.\n    target_groups (int): The target number of groups for which the number of items needs to be found.\n    \n    Returns:\n    int: The number of items in the target number of groups.\n    \"\"\"\n    # Find the number of items per group\n    items_per_group = df[item_col][0] \/ df[group_col][0]\n    \n    # Calculate the number of items in the target number of groups\n    items_in_target_groups = target_groups * items_per_group\n    \n    return int(items_in_target_groups)","tool_call":"df = pd.DataFrame({\n    'Number of pens': [1, 2, 3],\n    'Number of cows': [2, 4, 6]\n})\n\nprint(calculate_items_in_target_groups(df, 'Number of pens', 'Number of cows', 4))"}
{"question":"For an economics project, Josiah determined the cost of ferry rides for bicycles and cars. How much does it cost to take a car on the Southport-Fort Fisher ferry?","answer":5.0,"table":"Ferry | Bicycle | Car\nFauntleroy-Vashon | $5 | $15\nOcracoke | $3 | $15\nMukilteu-Clinton | $5 | $7\nSouthport-Fort Fisher | $2 | $5","level":5,"tool_id":16138,"code":"import pandas as pd\n\ndef get_ferry_cost(ferry_df, ferry_name, vehicle_type):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry cost table, a ferry name, and a vehicle type, and returns the cost of the ferry ride for the specified vehicle type.\n    Args:\n    ferry_df (pd.DataFrame): A pandas DataFrame containing ferry names and their costs for different vehicle types with columns 'Ferry', 'Bicycle', and 'Car'.\n    ferry_name (str): The name of the ferry.\n    vehicle_type (str): The type of the vehicle.\n    Returns:\n    float: The cost of the ferry ride for the specified vehicle type.\n    \"\"\"\n    # Filter the DataFrame for the specific ferry\n    ferry_df = ferry_df[ferry_df['Ferry'] == ferry_name]\n    \n    # If the ferry is found in the DataFrame, return the cost for the specified vehicle type\n    if not ferry_df.empty:\n        return ferry_df[vehicle_type].values[0]\n    \n    # If the ferry is not found in the DataFrame, return None\n    return None","api_call":"# Initialize the table into a dataframe\nferry_df = pd.DataFrame({\n    'Ferry': ['Fauntleroy-Vashon', 'Ocracoke', 'Mukilteu-Clinton', 'Southport-Fort Fisher'],\n    'Bicycle': [5, 3, 5, 2],\n    'Car': [15, 15, 7, 5]\n})\n\n# Call the tool to solve the problem\ncost = get_ferry_cost(ferry_df, 'Southport-Fort Fisher', 'Car')\nprint(cost)","tool":"def get_service_cost_for_item(service_costs_df, service_col, item_col, service_name, item_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of service costs for various items, a service name, and an item name, and returns the cost of the service for the specified item.\n    \n    Args:\n    service_costs_df (pd.DataFrame): A pandas DataFrame containing service names and their costs for different items.\n    service_col (str): The column name for the service names.\n    item_col (str): The column name for the item names.\n    service_name (str): The name of the service.\n    item_name (str): The name of the item.\n    \n    Returns:\n    float: The cost of the service for the specified item, or None if the service is not found in the DataFrame.\n    \"\"\"\n    # Filter the DataFrame for the specific service\n    service_df = service_costs_df[service_costs_df[service_col] == service_name]\n    \n    # If the service is found in the DataFrame, return the cost for the specified item\n    if not service_df.empty:\n        return service_df[item_name].values[0]\n    \n    # If the service is not found in the DataFrame, return None\n    return None","tool_call":"service_costs_data = {\n    'Ferry': ['Fauntleroy-Vashon', 'Ocracoke', 'Mukilteu-Clinton', 'Southport-Fort Fisher'],\n    'Bicycle': [5, 3, 5, 2],\n    'Car': [15, 15, 7, 5]\n}\n\nservice_costs_df = pd.DataFrame(service_costs_data)\n\nprint(get_service_cost_for_item(service_costs_df, \"Ferry\", \"Car\", 'Southport-Fort Fisher', 'Car'))"}
{"question":"A transportation analyst compared various bridges' tolls. How much higher is the toll for a car on the Hatem bridge than on the Fort Madison bridge?","answer":4.0,"table":"Bridge | Truck | Car\nFort Madison | $4 | $1\nHatem | $10 | $5\nSan Mateo | $6 | $4\nGolden Gate | $7 | $6","level":4,"tool_id":7312,"code":"import pandas as pd\n\ndef calculate_toll_difference(df, bridge1, bridge2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a bridge toll table, and two bridge names, and returns the difference in car tolls between the two bridges.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge names and their tolls for trucks and cars with columns 'Bridge', 'Truck', and 'Car'.\n    bridge1 (str): The name of the first bridge.\n    bridge2 (str): The name of the second bridge.\n    Returns:\n    float: The difference in car tolls between the two bridges.\n    \"\"\"\n    # Filter the DataFrame for the specific bridges\n    bridge1_df = df[df['Bridge'] == bridge1]\n    bridge2_df = df[df['Bridge'] == bridge2]\n    \n    # Calculate the difference in car tolls\n    toll_difference = bridge1_df['Car'].values[0] - bridge2_df['Car'].values[0]\n    \n    return toll_difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['Fort Madison', 'Hatem', 'San Mateo', 'Golden Gate'],\n    'Truck': [4, 10, 6, 7],\n    'Car': [1, 5, 4, 6]\n})\n\n# Call the tool to solve the problem\ntoll_difference = calculate_toll_difference(df, 'Hatem', 'Fort Madison')\nprint(toll_difference)","tool":"def calculate_difference_between_two_entities(df, entity_col, attribute_col, entity1, entity2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of entities and their attributes, and two entity names, and returns the difference in the specified attribute between the two entities.\n    \n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing entity names and their attributes.\n    entity_col (str): The column name for the entity names.\n    attribute_col (str): The column name for the attribute values.\n    entity1 (str): The name of the first entity.\n    entity2 (str): The name of the second entity.\n    \n    Returns:\n    float: The difference in the attribute values between the two entities.\n    \"\"\"\n    # Filter the DataFrame for the specific entities\n    entity1_df = df[df[entity_col] == entity1]\n    entity2_df = df[df[entity_col] == entity2]\n    \n    # Calculate the difference in attribute values\n    attribute_difference = entity1_df[attribute_col].values[0] - entity2_df[attribute_col].values[0]\n    \n    return attribute_difference","tool_call":"df = pd.DataFrame({\n    'Bridge': ['Fort Madison', 'Hatem', 'San Mateo', 'Golden Gate'],\n    'Truck': [4, 10, 6, 7],\n    'Car': [1, 5, 4, 6]\n})\n\nprint(calculate_difference_between_two_entities(df, 'Bridge', 'Car', 'Hatem', 'Fort Madison'))"}
{"question":"A publisher invited authors to write stories for a special anthology. How many authors wrote exactly 4 stories?","answer":6.0,"table":"Stories written | Frequency\n1 | 19\n2 | 15\n3 | 7\n4 | 6\n5 | 0\n6 | 11","level":7,"tool_id":11526,"code":"import pandas as pd\n\ndef count_authors(df, num_stories):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a frequency table of stories written by authors and a number of stories, and returns the number of authors who wrote exactly that number of stories.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of stories written and their frequencies with columns 'Stories written' and 'Frequency'.\n    num_stories (int): The number of stories to filter by.\n    Returns:\n    int: The number of authors who wrote exactly num_stories stories.\n    \"\"\"\n    # Filter the DataFrame for the specific number of stories\n    stories_df = df[df['Stories written'] == num_stories]\n    if not stories_df.empty:\n        return stories_df['Frequency'].values[0]\n    else:\n        return 0","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stories written': [1, 2, 3, 4, 5, 6],\n    'Frequency': [19, 15, 7, 6, 0, 11]\n})\n# Call the tool to solve the problem\nnum_authors = count_authors(df, 4)\nprint(num_authors)","tool":"def count_frequency_of_specific_value(df, value_col, frequency_col, specific_value):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a frequency table, a specific value, and returns the frequency of that specific value in the table.\n    \n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing values and their frequencies.\n    value_col (str): The column name for the values.\n    frequency_col (str): The column name for the frequencies.\n    specific_value (int): The specific value to filter by.\n    \n    Returns:\n    int: The frequency of the specific value.\n    \"\"\"\n    # Filter the DataFrame for the specific value\n    value_df = df[df[value_col] == specific_value]\n    if not value_df.empty:\n        return value_df[frequency_col].values[0]\n    else:\n        return 0","tool_call":"df = pd.DataFrame({\n    'Stories written': [1, 2, 3, 4, 5, 6],\n    'Frequency': [19, 15, 7, 6, 0, 11]\n})\nprint(count_frequency_of_specific_value(df, 'Stories written', 'Frequency', 4))"}
{"question":"A publisher invited authors to write stories for a special anthology. How many authors wrote exactly 4 stories?","answer":5.0,"table":"Stories written | Frequency\n1 | 6\n2 | 11\n3 | 19\n4 | 5\n5 | 2","level":8,"tool_id":13604,"code":"import pandas as pd\n\ndef count_authors(df, num_stories):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a frequency table of stories written by authors and a number of stories, and returns the number of authors who wrote exactly that number of stories.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of stories written and their frequencies with columns 'Stories written' and 'Frequency'.\n    num_stories (int): The number of stories to filter by.\n    Returns:\n    int: The number of authors who wrote exactly num_stories stories.\n    \"\"\"\n    # Filter the DataFrame for the specific number of stories\n    stories_df = df[df['Stories written'] == num_stories]\n    if not stories_df.empty:\n        return stories_df['Frequency'].values[0]\n    else:\n        return 0","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stories written': [1, 2, 3, 4, 5],\n    'Frequency': [6, 11, 19, 5, 2]\n})\n# Call the tool to solve the problem\nprint(count_authors(df, 4))","tool":"def count_frequency_of_specific_value(df, value_col, frequency_col, specific_value):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a frequency table, a specific value, and returns the frequency of the specific value in the table.\n    \n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing values and their frequencies.\n    value_col (str): The column name for the values.\n    frequency_col (str): The column name for the frequencies.\n    specific_value (int): The specific value to filter by.\n    \n    Returns:\n    int: The frequency of the specific value.\n    \"\"\"\n    # Filter the DataFrame for the specific value\n    value_df = df[df[value_col] == specific_value]\n    if not value_df.empty:\n        return value_df[frequency_col].values[0]\n    else:\n        return 0","tool_call":"df = pd.DataFrame({\n    'Stories written': [1, 2, 3, 4, 5],\n    'Frequency': [6, 11, 19, 5, 2]\n})\nprint(count_frequency_of_specific_value(df, 'Stories written', 'Frequency', 4))"}
{"question":"Reagan's basketball team ordered new jerseys. She recorded the sizes they needed in a frequency chart. How many jerseys did they order?","answer":14.0,"table":"Size | Frequency\nsmall | 4\nmedium | 7\nlarge | 3","level":5,"tool_id":11005,"code":"import pandas as pd\n\ndef calculate_total_jerseys(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a frequency chart of jersey sizes, and returns the total number of jerseys ordered.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing jersey sizes and their frequencies with columns 'Size' and 'Frequency'.\n    Returns:\n    int: The total number of jerseys ordered.\n    \"\"\"\n    # Sum up the frequencies to get the total number of jerseys\n    total_jerseys = df['Frequency'].sum()\n    \n    return total_jerseys","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Size': ['small', 'medium', 'large'],\n    'Frequency': [4, 7, 3]\n})\n\n# Call the tool to solve the problem\ntotal_jerseys = calculate_total_jerseys(df)\n\n# Print the answer\nprint(total_jerseys)","tool":"def calculate_total_count_from_frequency_table(data_frame, item_col, frequency_col):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a frequency table of items, and returns the total count of items based on the frequencies.\n    \n    Args:\n    data_frame (pd.DataFrame): A pandas DataFrame containing item names and their frequencies.\n    item_col (str): The column name for the item names.\n    frequency_col (str): The column name for the item frequencies.\n    \n    Returns:\n    int: The total count of items.\n    \"\"\"\n    # Sum up the frequencies to get the total count of items\n    total_count = data_frame[frequency_col].sum()\n    \n    return total_count","tool_call":"data = {\n    'Size': ['small', 'medium', 'large'],\n    'Frequency': [4, 7, 3]\n}\n\ndf = pd.DataFrame(data)\nprint(calculate_total_count_from_frequency_table(data_frame=df, item_col=\"Size\", frequency_col=\"Frequency\"))"}
{"question":"For an economics project, Wesley determined the cost of ferry rides for bicycles and cars. How much does it cost to take a car on the Ocracoke ferry?","answer":15.0,"table":"Ferry | Bicycle | Car\nSeattle-Bremerton | $8 | $12\nSouthport-Fort Fisher | $2 | $5\nOcracoke | $3 | $15","level":4,"tool_id":16299,"code":"import pandas as pd\n\ndef get_ferry_cost(df, ferry_name, vehicle_type):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry cost table, a ferry name, and a vehicle type, and returns the cost of the ferry ride for the specified vehicle type.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ferry names, and costs for bicycles and cars with columns 'Ferry', 'Bicycle', and 'Car'.\n    ferry_name (str): The name of the ferry.\n    vehicle_type (str): The type of vehicle ('Bicycle' or 'Car').\n    Returns:\n    float: The cost of the ferry ride for the specified vehicle type.\n    \"\"\"\n    # Filter the DataFrame for the specific ferry\n    ferry_df = df[df['Ferry'] == ferry_name]\n    \n    # Get the cost for the specified vehicle type\n    if not ferry_df.empty:\n        cost = ferry_df[vehicle_type].values[0]\n        return cost\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Seattle-Bremerton', 'Southport-Fort Fisher', 'Ocracoke'],\n    'Bicycle': [8, 2, 3],\n    'Car': [12, 5, 15]\n})\n# Call the tool to solve the problem\nprint(get_ferry_cost(df, 'Ocracoke', 'Car'))","tool":"def get_cost_for_item_and_service(costs_df, item_col, service_col, item_name, service_type):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of costs for different items and services, and returns the cost for a specific item and service.\n    \n    Args:\n    costs_df (pd.DataFrame): A pandas DataFrame containing item names and costs for different services.\n    item_col (str): The column name for the item names.\n    service_col (str): The column name for the service types.\n    item_name (str): The name of the item.\n    service_type (str): The type of service.\n    \n    Returns:\n    float: The cost for the specified item and service.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = costs_df[costs_df[item_col] == item_name]\n    \n    # Get the cost for the specified service type\n    if not item_df.empty:\n        cost = item_df[service_type].values[0]\n        return cost\n    else:\n        return None","tool_call":"costs_data = {\n    'Ferry': ['Seattle-Bremerton', 'Southport-Fort Fisher', 'Ocracoke'],\n    'Bicycle': [8, 2, 3],\n    'Car': [12, 5, 15]\n}\n\ncosts_df = pd.DataFrame(costs_data)\n\nprint(get_cost_for_item_and_service(costs_df, \"Ferry\", [\"Bicycle\", \"Car\"], \"Ocracoke\", \"Car\"))"}
{"question":"The Mountain Moose Lodge has many customer reviews online. The number of reviews is shown in the frequency chart. Paula visits the Mountain Moose Lodge with her friends and has a great time. Paula and her friends leave 4 reviews that are all 5 stars. How many reviews does the Mountain Moose Lodge have now?","answer":155.0,"table":"Rating | Frequency\n5 stars | 81\n4 stars | 54\n3 stars | 5\n2 stars | 2\n1 star | 9","level":5,"tool_id":12148,"code":"import pandas as pd\n\ndef calculate_total_reviews(df, new_reviews):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a review table and a dictionary of new reviews, and returns the total number of reviews after adding the new reviews.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing review ratings and their frequencies with columns 'Rating' and 'Frequency'.\n    new_reviews (dict): A dictionary where the keys are review ratings and the values are the number of new reviews for each rating.\n    Returns:\n    int: The total number of reviews after adding the new reviews.\n    \"\"\"\n    # Iterate through the new reviews and add them to the corresponding rating in the DataFrame\n    for rating, quantity in new_reviews.items():\n        # Filter the DataFrame for the specific rating\n        rating_df = df[df['Rating'] == rating]\n        if not rating_df.empty:\n            df.loc[df['Rating'] == rating, 'Frequency'] += quantity\n    \n    # Calculate the total number of reviews\n    total_reviews = df['Frequency'].sum()\n    \n    return total_reviews","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Rating': ['5 stars', '4 stars', '3 stars', '2 stars', '1 star'],\n    'Frequency': [81, 54, 5, 2, 9]\n})\n\n# Initialize the new reviews\nnew_reviews = {'5 stars': 4}\n\n# Call the tool to solve the problem\ntotal_reviews = calculate_total_reviews(df, new_reviews)\nprint(total_reviews)","tool":"def update_total_items_from_frequencies_and_new_quantities(item_freq_df, item_col, frequency_col, new_item_quantities):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of item frequencies and a dictionary of new item quantities, and returns the total number of items after adding the new quantities based on the frequencies and new quantities.\n    \n    Args:\n    item_freq_df (pd.DataFrame): A pandas DataFrame containing item names and their frequencies.\n    item_col (str): The column name for the item names.\n    frequency_col (str): The column name for the item frequencies.\n    new_item_quantities (dict): A dictionary where the keys are item names and the values are the new quantities of each item.\n    \n    Returns:\n    int: The total number of items after adding the new quantities.\n    \"\"\"\n    # Iterate through the new item quantities and add them to the corresponding item in the DataFrame\n    for item_name, new_quantity in new_item_quantities.items():\n        # Filter the DataFrame for the specific item name\n        item_freq_df_filtered = item_freq_df[item_freq_df[item_col] == item_name]\n        if not item_freq_df_filtered.empty:\n            item_freq_df.loc[item_freq_df[item_col] == item_name, frequency_col] += new_quantity\n    \n    # Calculate the total number of items\n    total_items = item_freq_df[frequency_col].sum()\n    \n    return total_items","tool_call":"item_freq_data = {\n    'Rating': ['5 stars', '4 stars', '3 stars', '2 stars', '1 star'],\n    'Frequency': [81, 54, 5, 2, 9]\n}\n\nitem_freq_df = pd.DataFrame(item_freq_data)\n\nnew_item_quantities = {\"5 stars\": 4}\nprint(update_total_items_from_frequencies_and_new_quantities(item_freq_df, \"Rating\", \"Frequency\", new_item_quantities))"}
{"question":"Each office has 10 rulers. How many rulers are in 5 offices?","answer":50.0,"table":"Number of offices | Number of rulers\n1 | 10\n2 | 20\n3 | 30\n4 | 40\n5 | ?","level":1,"tool_id":12201,"code":"def calculate_rulers_in_offices(office_data):\n    \"\"\"\n    This function takes in a dictionary representing the number of offices and the number of rulers in each office, and calculates the number of rulers in 5 offices.\n    Args:\n    office_data (dict): A dictionary where the keys are the number of offices and the values are the number of rulers in each office.\n    Returns:\n    int: The number of rulers in 5 offices.\n    \"\"\"\n    # Calculate the number of rulers in 5 offices\n    rulers_in_5_offices = office_data[1] * 5\n\n    return rulers_in_5_offices","api_call":"# Initialize the table into a dictionary\noffice_data = {\n    1: 10,\n    2: 20,\n    3: 30,\n    4: 40\n}\n# Call the tool to solve the problem\nrulers_in_5_offices = calculate_rulers_in_offices(office_data)\nprint(rulers_in_5_offices)","tool":"def calculate_total_items_in_groups(group_data, item_per_group, num_groups):\n    \"\"\"\n    This function takes in a dictionary representing the number of groups and the number of items in each group, and calculates the total number of items in a certain number of groups.\n    \n    Args:\n    group_data (dict): A dictionary where the keys are the number of groups and the values are the number of items in each group.\n    item_per_group (int): The number of items in one group.\n    num_groups (int): The number of groups.\n    \n    Returns:\n    int: The total number of items in the specified number of groups.\n    \"\"\"\n    # Calculate the total number of items in the specified number of groups\n    total_items = group_data[item_per_group] * num_groups\n\n    return total_items","tool_call":"group_data = {\n    1: 10,\n    2: 20,\n    3: 30,\n    4: 40\n}\nprint(calculate_total_items_in_groups(group_data, 1, 5))"}
{"question":"For an economics project, Victor determined the cost of ferry rides for bicycles and cars. How much higher is the fare for a bicycle on the Mukilteu-Clinton ferry than on the Southport-Fort Fisher ferry?","answer":3.0,"table":"Ferry | Bicycle | Car\nSeattle-Bremerton | $8 | $12\nSouthport-Fort Fisher | $2 | $5\nMukilteu-Clinton | $5 | $7","level":4,"tool_id":1304,"code":"import pandas as pd\n\ndef calculate_fare_difference(df, ferry1, ferry2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry fare table, and two ferry names, and returns the difference in bicycle fare between the two ferries.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ferry names and their fares for bicycles and cars with columns 'Ferry', 'Bicycle', 'Car'.\n    ferry1 (str): The name of the first ferry.\n    ferry2 (str): The name of the second ferry.\n    Returns:\n    float: The difference in bicycle fare between the two ferries.\n    \"\"\"\n    # Filter the DataFrame for the specific ferries\n    ferry1_df = df[df['Ferry'] == ferry1]\n    ferry2_df = df[df['Ferry'] == ferry2]\n    \n    # Get the bicycle fare for each ferry\n    ferry1_bicycle_fare = ferry1_df['Bicycle'].values[0]\n    ferry2_bicycle_fare = ferry2_df['Bicycle'].values[0]\n    \n    # Calculate the difference in fare\n    fare_difference = ferry1_bicycle_fare - ferry2_bicycle_fare\n    \n    return fare_difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Seattle-Bremerton', 'Southport-Fort Fisher', 'Mukilteo-Clinton'],\n    'Bicycle': [8, 2, 5],\n    'Car': [12, 5, 7]\n})\n\n# Call the tool to solve the problem\nfare_difference = calculate_fare_difference(df, 'Mukilteo-Clinton', 'Southport-Fort Fisher')\n\n# Print the answer\nprint(fare_difference)","tool":"def calculate_cost_difference_between_two_entities(cost_df, entity_col, item_col, entity1, entity2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of costs for different entities and items, and two entity names, and returns the difference in cost for a specific item between the two entities.\n    \n    Args:\n    cost_df (pd.DataFrame): A pandas DataFrame containing entity names and their costs for different items.\n    entity_col (str): The column name for the entity names.\n    item_col (str): The column name for the item costs.\n    entity1 (str): The name of the first entity.\n    entity2 (str): The name of the second entity.\n    \n    Returns:\n    float: The difference in cost for the specific item between the two entities.\n    \"\"\"\n    # Filter the DataFrame for the specific entities\n    entity1_df = cost_df[cost_df[entity_col] == entity1]\n    entity2_df = cost_df[cost_df[entity_col] == entity2]\n    \n    # Get the cost for the item for each entity\n    entity1_item_cost = entity1_df[item_col].values[0]\n    entity2_item_cost = entity2_df[item_col].values[0]\n    \n    # Calculate the difference in cost\n    cost_difference = entity1_item_cost - entity2_item_cost\n    \n    return cost_difference","tool_call":"cost_data = {\n    'Ferry': ['Seattle-Bremerton', 'Southport-Fort Fisher', 'Mukilteo-Clinton'],\n    'Bicycle': [8, 2, 5],\n    'Car': [12, 5, 7]\n}\n\ncost_df = pd.DataFrame(cost_data)\n\nprint(calculate_cost_difference_between_two_entities(cost_df, \"Ferry\", \"Bicycle\", 'Mukilteo-Clinton', 'Southport-Fort Fisher'))"}
{"question":"Millersburg will decide whether to extend its public pool's hours by looking at the number of times its residents visited the pool last month. How many people went swimming exactly once last month?","answer":4.0,"table":"Number of times | Frequency\n1 | 4\n2 | 12\n3 | 16\n4 | 19","level":8,"tool_id":4405,"code":"import pandas as pd\n\ndef count_people_with_exact_visits(df, target_visits):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a frequency table of visits to a public pool and a target number of visits, and returns the number of people who visited the pool exactly the target number of times.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of times people visited the pool and the frequency of those visits with columns 'Number of times' and 'Frequency'.\n    target_visits (int): The target number of visits to filter the DataFrame.\n    Returns:\n    int: The number of people who visited the pool exactly the target number of times.\n    \"\"\"\n    # Filter the DataFrame for the target number of visits\n    target_df = df[df['Number of times'] == target_visits]\n    \n    # If the target number of visits is found in the DataFrame, return the corresponding frequency\n    if not target_df.empty:\n        return target_df['Frequency'].values[0]\n    else:\n        return 0","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of times': [1, 2, 3, 4],\n    'Frequency': [4, 12, 16, 19]\n})\n# Call the tool to solve the problem\nprint(count_people_with_exact_visits(df, 1))","tool":"def count_frequency_of_target_value(frequency_df, value_col, frequency_col, target_value):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a frequency table, a target value, and returns the frequency of the target value.\n    \n    Args:\n    frequency_df (pd.DataFrame): A pandas DataFrame containing values and their frequencies.\n    value_col (str): The column name for the values.\n    frequency_col (str): The column name for the frequencies.\n    target_value (int): The target value to filter the DataFrame.\n    \n    Returns:\n    int: The frequency of the target value.\n    \"\"\"\n    # Filter the DataFrame for the target value\n    target_df = frequency_df[frequency_df[value_col] == target_value]\n    \n    # If the target value is found in the DataFrame, return the corresponding frequency\n    if not target_df.empty:\n        return target_df[frequency_col].values[0]\n    else:\n        return 0","tool_call":"frequency_data = {\n    'Number of times': [1, 2, 3, 4],\n    'Frequency': [4, 12, 16, 19]\n}\n\nfrequency_df = pd.DataFrame(frequency_data)\n\nprint(count_frequency_of_target_value(frequency_df, 'Number of times', 'Frequency', 1))"}
{"question":"For an economics project, Rob determined the cost of ferry rides for bicycles and cars. How much does it cost to take a bicycle on the Southport-Fort Fisher ferry?","answer":2.0,"table":"Ferry | Bicycle | Car\nMukilteu-Clinton | $5 | $7\nSouthport-Fort Fisher | $2 | $5\nSeattle-Bremerton | $8 | $12\nOcracoke | $3 | $15","level":5,"tool_id":5738,"code":"import pandas as pd\n\ndef get_ferry_cost(ferry_df, ferry_name, vehicle_type):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry cost table, a ferry name, and a vehicle type, and returns the cost of the ferry ride for the specified vehicle type.\n    Args:\n    ferry_df (pd.DataFrame): A pandas DataFrame containing ferry names and their costs for bicycles and cars with columns 'Ferry', 'Bicycle', and 'Car'.\n    ferry_name (str): The name of the ferry.\n    vehicle_type (str): The type of vehicle ('Bicycle' or 'Car').\n    Returns:\n    float: The cost of the ferry ride for the specified vehicle type.\n    \"\"\"\n    # Filter the DataFrame for the specific ferry\n    ferry_row = ferry_df[ferry_df['Ferry'] == ferry_name]\n    \n    if not ferry_row.empty:\n        return ferry_row[vehicle_type].values[0]\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\nferry_df = pd.DataFrame({\n    'Ferry': ['Mukilteu-Clinton', 'Southport-Fort Fisher', 'Seattle-Bremerton', 'Ocracoke'],\n    'Bicycle': [5, 2, 8, 3],\n    'Car': [7, 5, 12, 15]\n})\n\n# Call the tool to solve the problem\ncost = get_ferry_cost(ferry_df, 'Southport-Fort Fisher', 'Bicycle')\nprint(cost)","tool":"def get_cost_for_service(data_frame, item_col, service_col, item_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of item costs for various services, an item name, and a service type, and returns the cost of the service for the specified item.\n    \n    Args:\n    data_frame (pd.DataFrame): A pandas DataFrame containing item names and their costs for various services.\n    item_col (str): The column name for the item names.\n    service_col (str): The column name for the service types.\n    item_name (str): The name of the item.\n    \n    Returns:\n    float: The cost of the service for the specified item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_row = data_frame[data_frame[item_col] == item_name]\n    \n    if not item_row.empty:\n        return item_row[service_col].values[0]\n    else:\n        return None","tool_call":"data = {\n    'Ferry': ['Mukilteu-Clinton', 'Southport-Fort Fisher', 'Seattle-Bremerton', 'Ocracoke'],\n    'Bicycle': [5, 2, 8, 3],\n    'Car': [7, 5, 12, 15]\n}\n\ndf = pd.DataFrame(data)\nprint(get_cost_for_service(data_frame=df, item_col='Ferry', service_col='Bicycle', item_name='Southport-Fort Fisher'))"}
{"question":"A transportation analyst compared various bridges' tolls. How much higher is the toll for a carpool on the Hatem bridge than on the Tacoma Narrows bridge?","answer":2.0,"table":"Bridge | Car | Carpool\nFort Madison | $1 | $1\nHatem | $5 | $5\nTacoma Narrows | $3 | $3\nGeorge Washington | $8 | $2","level":4,"tool_id":9030,"code":"import pandas as pd\n\ndef calculate_toll_difference(df, bridge1, bridge2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a bridge toll table and two bridge names, and returns the difference in carpool tolls between the two bridges.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge names and their tolls with columns 'Bridge', 'Car', and 'Carpool'.\n    bridge1 (str): The name of the first bridge.\n    bridge2 (str): The name of the second bridge.\n    Returns:\n    float: The difference in carpool tolls between the two bridges.\n    \"\"\"\n    # Filter the DataFrame for the specific bridges\n    bridge1_df = df[df['Bridge'] == bridge1]\n    bridge2_df = df[df['Bridge'] == bridge2]\n    \n    # Get the carpool tolls for the two bridges\n    bridge1_toll = bridge1_df['Carpool'].values[0]\n    bridge2_toll = bridge2_df['Carpool'].values[0]\n    \n    # Calculate the difference in tolls\n    toll_difference = bridge1_toll - bridge2_toll\n    \n    return toll_difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['Fort Madison', 'Hatem', 'Tacoma Narrows', 'George Washington'],\n    'Car': [1, 5, 3, 8],\n    'Carpool': [1, 5, 3, 2]\n})\n\n# Call the tool to solve the problem\ntoll_difference = calculate_toll_difference(df, 'Hatem', 'Tacoma Narrows')\n\n# Print the answer\nprint(toll_difference)","tool":"def calculate_attribute_difference_between_two_entities(df, entity_col, attribute_col, entity1, entity2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of entities and their attributes, two entity names, and an attribute name, and returns the difference in the attribute values between the two entities.\n    \n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing entity names and their attributes.\n    entity_col (str): The column name for the entity names.\n    attribute_col (str): The column name for the attribute values.\n    entity1 (str): The name of the first entity.\n    entity2 (str): The name of the second entity.\n    \n    Returns:\n    float: The difference in attribute values between the two entities.\n    \"\"\"\n    # Filter the DataFrame for the specific entities\n    entity1_df = df[df[entity_col] == entity1]\n    entity2_df = df[df[entity_col] == entity2]\n    \n    # Get the attribute values for the two entities\n    entity1_value = entity1_df[attribute_col].values[0]\n    entity2_value = entity2_df[attribute_col].values[0]\n    \n    # Calculate the difference in attribute values\n    attribute_difference = entity1_value - entity2_value\n    \n    return attribute_difference","tool_call":"df = pd.DataFrame({\n    'Bridge': ['Fort Madison', 'Hatem', 'Tacoma Narrows', 'George Washington'],\n    'Car': [1, 5, 3, 8],\n    'Carpool': [1, 5, 3, 2]\n})\n\nprint(calculate_attribute_difference_between_two_entities(df, 'Bridge', 'Carpool', 'Hatem', 'Tacoma Narrows'))"}
{"question":"A transportation analyst compared various bridges' tolls. How much higher is the toll for a carpool on the Hatem bridge than on the Tacoma Narrows bridge?","answer":2.0,"table":"Bridge | Car | Carpool\nHatem | $5 | $5\nTacoma Narrows | $3 | $3\nGeorge Washington | $8 | $2\nFort Madison | $1 | $1","level":5,"tool_id":3586,"code":"import pandas as pd\n\ndef calculate_toll_difference(df, bridge1, bridge2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a toll table and two bridge names, and returns the difference in tolls for carpools between the two bridges.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge names and their tolls with columns 'Bridge', 'Car', and 'Carpool'.\n    bridge1 (str): The name of the first bridge.\n    bridge2 (str): The name of the second bridge.\n    Returns:\n    float: The difference in tolls for carpools between the two bridges.\n    \"\"\"\n    # Filter the DataFrame for the specific bridges\n    bridge1_df = df[df['Bridge'] == bridge1]\n    bridge2_df = df[df['Bridge'] == bridge2]\n    \n    # Get the tolls for carpools on the two bridges\n    toll_bridge1 = bridge1_df['Carpool'].values[0]\n    toll_bridge2 = bridge2_df['Carpool'].values[0]\n    \n    # Calculate the difference in tolls\n    toll_difference = toll_bridge1 - toll_bridge2\n    \n    return toll_difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['Hatem', 'Tacoma Narrows', 'George Washington', 'Fort Madison'],\n    'Car': [5, 3, 8, 1],\n    'Carpool': [5, 3, 2, 1]\n})\n# Call the tool to solve the problem\ntoll_difference = calculate_toll_difference(df, 'Hatem', 'Tacoma Narrows')\nprint(toll_difference)","tool":"def calculate_attribute_difference_between_two_entities(df, entity_col, attribute_col, entity1, entity2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of entities and their attributes, and two entity names, and returns the difference in the attribute values between the two entities.\n    \n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing entity names and their attributes.\n    entity_col (str): The column name for the entity names.\n    attribute_col (str): The column name for the attribute values.\n    entity1 (str): The name of the first entity.\n    entity2 (str): The name of the second entity.\n    \n    Returns:\n    float: The difference in attribute values between the two entities.\n    \"\"\"\n    # Filter the DataFrame for the specific entities\n    entity1_df = df[df[entity_col] == entity1]\n    entity2_df = df[df[entity_col] == entity2]\n    \n    # Get the attribute values for the two entities\n    attribute_entity1 = entity1_df[attribute_col].values[0]\n    attribute_entity2 = entity2_df[attribute_col].values[0]\n    \n    # Calculate the difference in attribute values\n    attribute_difference = attribute_entity1 - attribute_entity2\n    \n    return attribute_difference","tool_call":"df = pd.DataFrame({\n    'Bridge': ['Hatem', 'Tacoma Narrows', 'George Washington', 'Fort Madison'],\n    'Car': [5, 3, 8, 1],\n    'Carpool': [5, 3, 2, 1]\n})\nprint(calculate_attribute_difference_between_two_entities(df, 'Bridge', 'Carpool', 'Hatem', 'Tacoma Narrows'))"}
{"question":"A transportation analyst compared various bridges' tolls. On the Hatem bridge, how much more is the toll for a truck than for a car?","answer":5.0,"table":"Bridge | Truck | Car\nHatem | $10 | $5\nGolden Gate | $7 | $6\nGeorge Washington | $16 | $8","level":4,"tool_id":1021,"code":"import pandas as pd\n\ndef calculate_toll_difference(df, bridge_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of bridge tolls and a bridge name, and returns the difference in tolls between a truck and a car for the specified bridge.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge tolls with columns 'Bridge', 'Truck', and 'Car'.\n    bridge_name (str): The name of the bridge for which the toll difference is to be calculated.\n    Returns:\n    float: The difference in tolls between a truck and a car for the specified bridge.\n    \"\"\"\n    # Filter the DataFrame for the specified bridge\n    bridge_df = df[df['Bridge'] == bridge_name]\n    \n    if not bridge_df.empty:\n        truck_toll = bridge_df['Truck'].values[0]\n        car_toll = bridge_df['Car'].values[0]\n        toll_difference = truck_toll - car_toll\n        return toll_difference\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['Hatem', 'Golden Gate', 'George Washington'],\n    'Truck': [10, 7, 16],\n    'Car': [5, 6, 8]\n})\n# Call the tool to solve the problem\ntoll_difference = calculate_toll_difference(df, 'Hatem')\nprint(toll_difference)","tool":"def calculate_difference_between_columns_for_specific_row(data_frame, key_col, value_col1, value_col2, key_value):\n    \"\"\"\n    This function takes in a pandas DataFrame, a key column, two value columns, and a key value, and returns the difference between the values of the two value columns for the row with the specified key value.\n    \n    Args:\n    data_frame (pd.DataFrame): A pandas DataFrame containing the data.\n    key_col (str): The column name for the key values.\n    value_col1 (str): The column name for the first value column.\n    value_col2 (str): The column name for the second value column.\n    key_value (str): The key value for which the difference is to be calculated.\n    \n    Returns:\n    float: The difference between the values of the two value columns for the row with the specified key value.\n    \"\"\"\n    # Filter the DataFrame for the specified key value\n    row_df = data_frame[data_frame[key_col] == key_value]\n    \n    if not row_df.empty:\n        value1 = row_df[value_col1].values[0]\n        value2 = row_df[value_col2].values[0]\n        difference = value1 - value2\n        return difference\n    else:\n        return None","tool_call":"data = {\n    'Bridge': ['Hatem', 'Golden Gate', 'George Washington'],\n    'Truck': [10, 7, 16],\n    'Car': [5, 6, 8]\n}\n\ndf = pd.DataFrame(data)\nprint(calculate_difference_between_columns_for_specific_row(data_frame=df, key_col=\"Bridge\", value_col1=\"Truck\", value_col2=\"Car\", key_value=\"Hatem\"))"}
{"question":"A transportation analyst compared various bridges' tolls. How much is the toll for a truck on the Golden Gate bridge?","answer":7.0,"table":"Bridge | Truck | Car\nGeorge Washington | $16 | $8\nGolden Gate | $7 | $6\nOakland Bay | $6 | $4","level":5,"tool_id":14702,"code":"import pandas as pd\n\ndef get_toll(df, bridge_name, vehicle_type):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a toll table, a bridge name, and a vehicle type, and returns the toll for the specified vehicle on the specified bridge.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge names and tolls for different vehicle types.\n    bridge_name (str): The name of the bridge.\n    vehicle_type (str): The type of vehicle.\n    Returns:\n    float: The toll for the specified vehicle on the specified bridge.\n    \"\"\"\n    # Filter the DataFrame for the specific bridge\n    bridge_df = df[df['Bridge'] == bridge_name]\n    if not bridge_df.empty:\n        # Get the toll for the specified vehicle type\n        toll = bridge_df[vehicle_type].values[0]\n        return toll\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['George Washington', 'Golden Gate', 'Oakland Bay'],\n    'Truck': [16, 7, 6],\n    'Car': [8, 6, 4]\n})\n# Call the tool to solve the problem\ntoll = get_toll(df, 'Golden Gate', 'Truck')\nprint(toll)","tool":"def get_value_based_on_row_and_column_criteria(table_df, row_criterion_col, row_criterion_value, column_criterion):\n    \"\"\"\n    This function takes in a pandas DataFrame, a column name for row criterion, a value for row criterion, and a column criterion, and returns the value in the table that meets both the row and column criteria.\n    \n    Args:\n    table_df (pd.DataFrame): A pandas DataFrame containing various data.\n    row_criterion_col (str): The column name for the row criterion.\n    row_criterion_value (str): The value for the row criterion.\n    column_criterion (str): The column criterion.\n    \n    Returns:\n    float: The value in the table that meets both the row and column criteria.\n    \"\"\"\n    # Filter the DataFrame for the specific row criterion\n    row_criterion_df = table_df[table_df[row_criterion_col] == row_criterion_value]\n    if not row_criterion_df.empty:\n        # Get the value for the specified column criterion\n        value = row_criterion_df[column_criterion].values[0]\n        return value\n    else:\n        return None","tool_call":"df = pd.DataFrame({\n    'Bridge': ['George Washington', 'Golden Gate', 'Oakland Bay'],\n    'Truck': [16, 7, 6],\n    'Car': [8, 6, 4]\n})\nprint(get_value_based_on_row_and_column_criteria(table_df=df, row_criterion_col='Bridge', row_criterion_value='Golden Gate', column_criterion='Truck'))"}
{"question":"A transportation analyst compared various bridges' tolls. How much higher is the toll for a car on the Golden Gate bridge than on the Oakland Bay bridge?","answer":2.0,"table":"Bridge | Truck | Car\nOakland Bay | $6 | $4\nFort Madison | $4 | $1\nHatem | $10 | $5\nGolden Gate | $7 | $6","level":4,"tool_id":6522,"code":"import pandas as pd\n\ndef calculate_toll_difference(df, bridge1, bridge2, vehicle_type):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of bridge tolls, and calculates the difference in tolls for a specific vehicle type between two bridges.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge names and their tolls for different vehicle types with columns 'Bridge', 'Truck', and 'Car'.\n    bridge1 (str): The name of the first bridge.\n    bridge2 (str): The name of the second bridge.\n    vehicle_type (str): The type of vehicle for which the toll difference is to be calculated. It should be either 'Truck' or 'Car'.\n    Returns:\n    float: The difference in tolls for the specified vehicle type between the two bridges.\n    \"\"\"\n    # Filter the DataFrame for the specific bridges\n    bridge1_df = df[df['Bridge'] == bridge1]\n    bridge2_df = df[df['Bridge'] == bridge2]\n    \n    # Get the tolls for the specified vehicle type on both bridges\n    bridge1_toll = bridge1_df[vehicle_type].values[0]\n    bridge2_toll = bridge2_df[vehicle_type].values[0]\n    \n    # Calculate the difference in tolls\n    toll_difference = abs(bridge1_toll - bridge2_toll)\n    \n    return toll_difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['Oakland Bay', 'Fort Madison', 'Hatem', 'Golden Gate'],\n    'Truck': [6, 4, 10, 7],\n    'Car': [4, 1, 5, 6]\n})\n# Call the tool to solve the problem\ntoll_difference = calculate_toll_difference(df, 'Golden Gate', 'Oakland Bay', 'Car')\nprint(toll_difference)","tool":"def calculate_value_difference_between_entities(data_frame, entity_col, category_col, entity1, entity2, category_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table with entities and their values for different categories, and calculates the difference in values for a specific category between two entities.\n    \n    Args:\n    data_frame (pd.DataFrame): A pandas DataFrame containing entity names and their values for different categories.\n    entity_col (str): The column name for the entity names.\n    category_col (str): The column name for the category values.\n    entity1 (str): The name of the first entity.\n    entity2 (str): The name of the second entity.\n    category_name (str): The name of the category for which the value difference is to be calculated.\n    \n    Returns:\n    float: The difference in values for the specified category between the two entities.\n    \"\"\"\n    # Filter the DataFrame for the specific entities\n    entity1_df = data_frame[data_frame[entity_col] == entity1]\n    entity2_df = data_frame[data_frame[entity_col] == entity2]\n    \n    # Get the values for the specified category for both entities\n    entity1_value = entity1_df[category_col].values[0]\n    entity2_value = entity2_df[category_col].values[0]\n    \n    # Calculate the difference in values\n    value_difference = abs(entity1_value - entity2_value)\n    \n    return value_difference","tool_call":"data = {\n    'Bridge': ['Oakland Bay', 'Fort Madison', 'Hatem', 'Golden Gate'],\n    'Truck': [6, 4, 10, 7],\n    'Car': [4, 1, 5, 6]\n}\n\ndf = pd.DataFrame(data)\nprint(calculate_value_difference_between_entities(data_frame=df, entity_col=\"Bridge\", category_col=\"Car\", entity1=\"Golden Gate\", entity2=\"Oakland Bay\", category_name=\"Car\"))"}
{"question":"For an economics project, Justin determined the cost of ferry rides for bicycles and cars. How much higher is the fare for a bicycle on the Seattle-Bremerton ferry than on the Fauntleroy-Vashon ferry?","answer":3.0,"table":"Ferry | Bicycle | Car\nOcracoke | $3 | $15\nFauntleroy-Vashon | $5 | $15\nMukilteu-Clinton | $5 | $7\nSeattle-Bremerton | $8 | $12","level":4,"tool_id":10104,"code":"import pandas as pd\n\ndef calculate_fare_difference(df, ferry1, ferry2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry fare table, and two ferry names, and returns the fare difference for a bicycle between the two ferries.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ferry names and their fares for bicycles and cars with columns 'Ferry', 'Bicycle', 'Car'.\n    ferry1 (str): The name of the first ferry.\n    ferry2 (str): The name of the second ferry.\n    Returns:\n    float: The fare difference for a bicycle between the two ferries.\n    \"\"\"\n    # Filter the DataFrame for the specific ferries\n    ferry1_df = df[df['Ferry'] == ferry1]\n    ferry2_df = df[df['Ferry'] == ferry2]\n    \n    # Check if the ferries exist in the DataFrame\n    if not ferry1_df.empty and not ferry2_df.empty:\n        # Calculate the fare difference\n        fare_difference = ferry1_df['Bicycle'].values[0] - ferry2_df['Bicycle'].values[0]\n        return fare_difference\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Ocracoke', 'Fauntleroy-Vashon', 'Mukilteo-Clinton', 'Seattle-Bremerton'],\n    'Bicycle': [3, 5, 5, 8],\n    'Car': [15, 15, 7, 12]\n})\n\n# Call the tool to solve the problem\nfare_difference = calculate_fare_difference(df, 'Seattle-Bremerton', 'Fauntleroy-Vashon')\n\n# Print the answer\nprint(fare_difference)","tool":"def calculate_fare_difference_for_vehicle_type(fares_df, ferry_col, vehicle_type_col, ferry1, ferry2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of ferry fares and two ferry names, and returns the fare difference for a specific vehicle type between the two ferries.\n    \n    Args:\n    fares_df (pd.DataFrame): A pandas DataFrame containing ferry names and their fares for various vehicle types.\n    ferry_col (str): The column name for the ferry names.\n    vehicle_type_col (str): The column name for the vehicle type fares.\n    ferry1 (str): The name of the first ferry.\n    ferry2 (str): The name of the second ferry.\n    \n    Returns:\n    float: The fare difference for the specific vehicle type between the two ferries.\n    \"\"\"\n    # Filter the DataFrame for the specific ferries\n    ferry1_df = fares_df[fares_df[ferry_col] == ferry1]\n    ferry2_df = fares_df[fares_df[ferry_col] == ferry2]\n    \n    # Check if the ferries exist in the DataFrame\n    if not ferry1_df.empty and not ferry2_df.empty:\n        # Calculate the fare difference\n        fare_difference = ferry1_df[vehicle_type_col].values[0] - ferry2_df[vehicle_type_col].values[0]\n        return fare_difference\n    else:\n        return None","tool_call":"fares_data = {\n    'Ferry': ['Ocracoke', 'Fauntleroy-Vashon', 'Mukilteo-Clinton', 'Seattle-Bremerton'],\n    'Bicycle': [3, 5, 5, 8],\n    'Car': [15, 15, 7, 12]\n}\n\nfares_df = pd.DataFrame(fares_data)\n\nprint(calculate_fare_difference_for_vehicle_type(fares_df, \"Ferry\", \"Bicycle\", 'Seattle-Bremerton', 'Fauntleroy-Vashon'))"}
{"question":"For an economics project, Bernard determined the cost of ferry rides for bicycles and cars. How much does it cost to take a bicycle on the Seattle-Bremerton ferry?","answer":8.0,"table":"Ferry | Bicycle | Car\nSouthport-Fort Fisher | $2 | $5\nFauntleroy-Vashon | $5 | $15\nOcracoke | $3 | $15\nMukilteu-Clinton | $5 | $7\nSeattle-Bremerton | $8 | $12","level":4,"tool_id":599,"code":"import pandas as pd\n\ndef get_bicycle_cost(df, ferry):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry cost table and a string representing the name of a ferry, and returns the cost of taking a bicycle on the specified ferry.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ferry names and their costs for bicycles and cars with columns 'Ferry', 'Bicycle', and 'Car'.\n    ferry (str): The name of the ferry.\n    Returns:\n    float: The cost of taking a bicycle on the specified ferry.\n    \"\"\"\n    # Filter the DataFrame for the specific ferry\n    ferry_df = df[df['Ferry'] == ferry]\n    if not ferry_df.empty:\n        bicycle_cost = ferry_df['Bicycle'].values[0]\n        return bicycle_cost\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Southport-Fort Fisher', 'Fauntleroy-Vashon', 'Ocracoke', 'Mukilteo-Clinton', 'Seattle-Bremerton'],\n    'Bicycle': [2, 5, 3, 5, 8],\n    'Car': [5, 15, 15, 7, 12]\n})\n# Call the tool to solve the problem\nbicycle_cost = get_bicycle_cost(df, 'Seattle-Bremerton')\nprint(bicycle_cost)","tool":"def get_item_cost_for_entity(df, entity_col, item_col, entity_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of entities and their item costs, and returns the cost of the item for the specified entity.\n    \n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing entities and their item costs.\n    entity_col (str): The column name for the entities.\n    item_col (str): The column name for the item costs.\n    entity_name (str): The name of the entity.\n    \n    Returns:\n    float: The cost of the item for the specified entity.\n    \"\"\"\n    # Filter the DataFrame for the specific entity\n    entity_df = df[df[entity_col] == entity_name]\n    if not entity_df.empty:\n        item_cost = entity_df[item_col].values[0]\n        return item_cost\n    else:\n        return None","tool_call":"df = pd.DataFrame({\n    'Ferry': ['Southport-Fort Fisher', 'Fauntleroy-Vashon', 'Ocracoke', 'Mukilteo-Clinton', 'Seattle-Bremerton'],\n    'Bicycle': [2, 5, 3, 5, 8],\n    'Car': [5, 15, 15, 7, 12]\n})\nprint(get_item_cost_for_entity(df, 'Ferry', 'Bicycle', 'Seattle-Bremerton'))"}
{"question":"Each block has 10 traffic cones. How many traffic cones are on 3 blocks?","answer":30.0,"table":"Number of blocks | Number of traffic cones\n1 | 10\n2 | 20\n3 | ?","level":2,"tool_id":14398,"code":"import pandas as pd\n\ndef calculate_traffic_cones(df, blocks):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of blocks and traffic cones, and a number of blocks, and returns the number of traffic cones on the given number of blocks.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of blocks and the corresponding number of traffic cones with columns 'Number of blocks' and 'Number of traffic cones'.\n    blocks (int): The number of blocks.\n    Returns:\n    int: The number of traffic cones on the given number of blocks.\n    \"\"\"\n    # Find the number of traffic cones per block\n    cones_per_block = df['Number of traffic cones'][0] \/ df['Number of blocks'][0]\n    \n    # Calculate the number of traffic cones on the given number of blocks\n    cones = cones_per_block * blocks\n    \n    return cones","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of blocks': [1, 2],\n    'Number of traffic cones': [10, 20]\n})\n\n# Call the tool to solve the problem\ncones_on_3_blocks = calculate_traffic_cones(df, 3)\nprint(cones_on_3_blocks)","tool":"def calculate_total_items_from_items_per_group_and_number_of_groups(df, group_col, item_col, number_of_groups):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of item counts per unit group and a given number of groups, and returns the total number of items in the groups.\n    \n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of groups and the corresponding number of items with columns specified by group_col and item_col.\n    group_col (str): The column name for the group counts.\n    item_col (str): The column name for the item counts.\n    number_of_groups (int): The number of groups.\n    \n    Returns:\n    float: The total number of items in the groups.\n    \"\"\"\n    # Find the number of items per group\n    items_per_group = df[item_col][0] \/ df[group_col][0]\n    \n    # Calculate the number of items in the given number of groups\n    total_items = items_per_group * number_of_groups\n    \n    return total_items","tool_call":"df = pd.DataFrame({\n    'Number of blocks': [1, 2],\n    'Number of traffic cones': [10, 20]\n})\n\nprint(calculate_total_items_from_items_per_group_and_number_of_groups(df, 'Number of blocks', 'Number of traffic cones', 3))"}
{"question":"A transportation analyst compared various bridges' tolls. How much higher is the toll for a car on the George Washington bridge than on the Fort Madison bridge?","answer":7.0,"table":"Bridge | Car | Carpool\nHatem | $5 | $5\nGeorge Washington | $8 | $2\nFort Madison | $1 | $1\nTacoma Narrows | $3 | $3","level":4,"tool_id":15172,"code":"import pandas as pd\n\ndef calculate_toll_difference(df, bridge1, bridge2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a bridge toll table and two bridge names, and returns the difference in tolls for a car between the two bridges.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge names and their tolls with columns 'Bridge', 'Car', and 'Carpool'.\n    bridge1 (str): The name of the first bridge.\n    bridge2 (str): The name of the second bridge.\n    Returns:\n    float: The difference in tolls for a car between the two bridges.\n    \"\"\"\n    # Filter the DataFrame for the specific bridges\n    bridge1_df = df[df['Bridge'] == bridge1]\n    bridge2_df = df[df['Bridge'] == bridge2]\n    \n    # Check if the bridges exist in the DataFrame\n    if not bridge1_df.empty and not bridge2_df.empty:\n        # Calculate the difference in tolls\n        toll_difference = bridge1_df['Car'].values[0] - bridge2_df['Car'].values[0]\n        return toll_difference\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['Hatem', 'George Washington', 'Fort Madison', 'Tacoma Narrows'],\n    'Car': [5, 8, 1, 3],\n    'Carpool': [5, 2, 1, 3]\n})\n\n# Call the tool to solve the problem\ntoll_difference = calculate_toll_difference(df, 'George Washington', 'Fort Madison')\n\n# Print the answer\nprint(toll_difference)","tool":"def calculate_difference_between_rows(data_frame, row_id_col, value_col, row_id1, row_id2):\n    \"\"\"\n    This function takes in a pandas DataFrame, a row identifier column, a value column, and two row identifiers, and returns the difference in values between the two rows based on the value column.\n    \n    Args:\n    data_frame (pd.DataFrame): A pandas DataFrame containing the data.\n    row_id_col (str): The column name for the row identifiers.\n    value_col (str): The column name for the values to calculate the difference.\n    row_id1 (str): The identifier for the first row.\n    row_id2 (str): The identifier for the second row.\n    \n    Returns:\n    float: The difference in values between the two rows.\n    \"\"\"\n    # Filter the DataFrame for the specific rows\n    row1_df = data_frame[data_frame[row_id_col] == row_id1]\n    row2_df = data_frame[data_frame[row_id_col] == row_id2]\n    \n    # Check if the rows exist in the DataFrame\n    if not row1_df.empty and not row2_df.empty:\n        # Calculate the difference in values\n        value_difference = row1_df[value_col].values[0] - row2_df[value_col].values[0]\n        return value_difference\n    else:\n        return None","tool_call":"df = pd.DataFrame({\n    'Bridge': ['Hatem', 'George Washington', 'Fort Madison', 'Tacoma Narrows'],\n    'Car': [5, 8, 1, 3],\n    'Carpool': [5, 2, 1, 3]\n})\n\ntoll_difference = calculate_difference_between_rows(data_frame=df, row_id_col='Bridge', value_col='Car', row_id1='George Washington', row_id2='Fort Madison')\nprint(toll_difference)"}
{"question":"A transportation analyst compared various bridges' tolls. How much higher is the toll for a car on the Hatem bridge than on the Tacoma Narrows bridge?","answer":2.0,"table":"Bridge | Car | Carpool\nHatem | $5 | $5\nFort Madison | $1 | $1\nTacoma Narrows | $3 | $3","level":5,"tool_id":14396,"code":"import pandas as pd\n\ndef calculate_toll_difference(df, bridge1, bridge2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a bridge toll table and two bridge names, and returns the difference in tolls for a car between the two bridges.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge names and their tolls with columns 'Bridge', 'Car', and 'Carpool'.\n    bridge1 (str): The name of the first bridge.\n    bridge2 (str): The name of the second bridge.\n    Returns:\n    float: The difference in tolls for a car between the two bridges.\n    \"\"\"\n    # Filter the DataFrame for the specific bridges\n    bridge1_df = df[df['Bridge'] == bridge1]\n    bridge2_df = df[df['Bridge'] == bridge2]\n    \n    # Get the tolls for a car on the two bridges\n    bridge1_toll = bridge1_df['Car'].values[0]\n    bridge2_toll = bridge2_df['Car'].values[0]\n    \n    # Calculate and return the difference in tolls\n    toll_difference = bridge1_toll - bridge2_toll\n    return toll_difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['Hatem', 'Fort Madison', 'Tacoma Narrows'],\n    'Car': [5, 1, 3],\n    'Carpool': [5, 1, 3]\n})\n\n# Call the tool to solve the problem\ntoll_difference = calculate_toll_difference(df, 'Hatem', 'Tacoma Narrows')\nprint(toll_difference)","tool":"def calculate_difference_between_two_entities(df, entity_col, value_col, entity1, entity2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of entities and their values, and two entity names, and returns the difference in values between the two entities.\n    \n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing entity names and their values.\n    entity_col (str): The column name for the entity names.\n    value_col (str): The column name for the entity values.\n    entity1 (str): The name of the first entity.\n    entity2 (str): The name of the second entity.\n    \n    Returns:\n    float: The difference in values between the two entities.\n    \"\"\"\n    # Filter the DataFrame for the specific entities\n    entity1_df = df[df[entity_col] == entity1]\n    entity2_df = df[df[entity_col] == entity2]\n    \n    # Get the values for the two entities\n    entity1_value = entity1_df[value_col].values[0]\n    entity2_value = entity2_df[value_col].values[0]\n    \n    # Calculate and return the difference in values\n    value_difference = entity1_value - entity2_value\n    return value_difference","tool_call":"df = pd.DataFrame({\n    'Bridge': ['Hatem', 'Fort Madison', 'Tacoma Narrows'],\n    'Car': [5, 1, 3],\n    'Carpool': [5, 1, 3]\n})\n\nprint(calculate_difference_between_two_entities(df, 'Bridge', 'Car', 'Hatem', 'Tacoma Narrows'))"}
{"question":"The owner of a plant nursery wrote down the number of roses on each bush. What is the smallest number of roses?","answer":16.0,"table":"Stem | Leaf \n1 | 6, 7\n2 | \n3 | 2, 8\n4 | 2\n5 | 3, 4\n6 | 5, 6\n7 | 3, 6\n8 | 2, 8","level":4,"tool_id":10001,"code":"import pandas as pd\n\ndef find_smallest_number_of_roses(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of roses per bush, and returns the smallest number of roses.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of roses per bush with columns 'Stem' and 'Leaf'.\n    Returns:\n    int: The smallest number of roses.\n    \"\"\"\n    # Initialize the smallest number of roses\n    smallest_roses = float('inf')\n    \n    # Iterate through the DataFrame to find the smallest number of roses\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            roses = stem * 10 + leaf[j]\n            if roses < smallest_roses:\n                smallest_roses = roses\n                \n    return smallest_roses","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[6, 7], [], [2, 8], [2], [3, 4], [5, 6], [3, 6], [2, 8]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_roses(df))","tool":"def find_smallest_value_in_stem_leaf(data_frame, stem_col, leaf_col):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a stem-and-leaf plot of items, and returns the smallest value among the items.\n    \n    Args:\n    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.\n    stem_col (str): The column name for the stem values.\n    leaf_col (str): The column name for the leaf values.\n    \n    Returns:\n    int: The smallest value among the items.\n    \"\"\"\n    # Initialize the smallest value\n    smallest_value = float('inf')\n    \n    # Iterate through the DataFrame to find the smallest value\n    for i in range(len(data_frame)):\n        stem = data_frame[stem_col][i]\n        leaf = data_frame[leaf_col][i]\n        for j in range(len(leaf)):\n            value = stem * 10 + leaf[j]\n            if value < smallest_value:\n                smallest_value = value\n                \n    return smallest_value","tool_call":"df = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[6, 7], [], [2, 8], [2], [3, 4], [5, 6], [3, 6], [2, 8]]\n})\nprint(find_smallest_value_in_stem_leaf(data_frame=df, stem_col=\"Stem\", leaf_col=\"Leaf\"))"}
{"question":"The owner of a plant nursery wrote down the number of roses on each bush. What is the smallest number of roses?","answer":35.0,"table":"Stem | Leaf \n3 | 5, 9\n4 | 0, 0, 1, 4, 6, 6, 6\n5 | 1, 2, 3, 4, 5, 6, 9, 9\n6 | 3, 3, 5, 7","level":7,"tool_id":14229,"code":"import pandas as pd\n\ndef find_smallest_number_of_roses(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of roses per bush, and returns the smallest number of roses on a bush.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of roses per bush with columns 'Stem' and 'Leaf'.\n    Returns:\n    int: The smallest number of roses on a bush.\n    \"\"\"\n    # Initialize the smallest number of roses\n    smallest_roses = float('inf')\n    \n    # Iterate through the DataFrame to find the smallest number of roses\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            roses = stem * 10 + leaf[j]\n            if roses < smallest_roses:\n                smallest_roses = roses\n                \n    return smallest_roses","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6],\n    'Leaf': [[5, 9], [0, 0, 1, 4, 6, 6, 6], [1, 2, 3, 4, 5, 6, 9, 9], [3, 3, 5, 7]]\n})\n\n# Call the tool to solve the problem\nprint(find_smallest_number_of_roses(df))","tool":"def find_smallest_value_in_stem_leaf(data_frame, stem_col, leaf_col):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a stem-and-leaf plot of items, and returns the smallest value among the items.\n    \n    Args:\n    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.\n    stem_col (str): The column name for the stem values.\n    leaf_col (str): The column name for the leaf values.\n    \n    Returns:\n    int: The smallest value among the items.\n    \"\"\"\n    # Initialize the smallest value\n    smallest_value = float('inf')\n    \n    # Iterate through the DataFrame to find the smallest value\n    for i in range(len(data_frame)):\n        stem = data_frame[stem_col][i]\n        leaf = data_frame[leaf_col][i]\n        for j in range(len(leaf)):\n            value = stem * 10 + leaf[j]\n            if value < smallest_value:\n                smallest_value = value\n                \n    return smallest_value","tool_call":"df = pd.DataFrame({\n    'Stem': [3, 4, 5, 6],\n    'Leaf': [[5, 9], [0, 0, 1, 4, 6, 6, 6], [1, 2, 3, 4, 5, 6, 9, 9], [3, 3, 5, 7]]\n})\n\nprint(find_smallest_value_in_stem_leaf(data_frame=df, stem_col='Stem', leaf_col='Leaf'))"}
{"question":"The owner of a plant nursery wrote down the number of roses on each bush. What is the smallest number of roses?","answer":27.0,"table":"Stem | Leaf \n2 | 7, 9\n3 | 2, 7\n4 | 0, 4, 4, 8, 9, 9\n5 | 4, 7\n6 | 1, 6\n7 | 2, 9, 9\n8 | 5\n9 | 0","level":8,"tool_id":8916,"code":"import pandas as pd\n\ndef find_smallest_number(df):\n    \"\"\"\n    This function takes in a pandas dataframe of roses per bush, and returns the smallest number of roses.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of roses per bush.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of roses.\n    \"\"\"\n    # prepare a list to calculate roses in each bush\n    roses = []\n    # calculate the total number of roses in each bush\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            roses.append(stem * 10 + leaf[j])\n    # find the smallest number of roses\n    smallest = min(roses)\n    return smallest","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[7, 9], [2, 7], [0, 4, 4, 8, 9, 9], [4, 7], [1, 6], [2, 9, 9], [5], [0]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number(df))","tool":"def find_smallest_number_in_stem_leaf(data_frame, stem_col, leaf_col):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a stem-and-leaf plot of items and returns the smallest number in the plot.\n    \n    Args:\n    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.\n    stem_col (str): The column name for the stem values.\n    leaf_col (str): The column name for the leaf values.\n    \n    Returns:\n    int: The smallest number in the stem-and-leaf plot.\n    \"\"\"\n    # Initialize the list to calculate items in each group\n    items = []\n    \n    # Calculate the total value of items in each group\n    for i in range(len(data_frame)):\n        stem = data_frame[stem_col][i]\n        leaf = data_frame[leaf_col][i]\n        for j in range(len(leaf)):\n            items.append(stem * 10 + leaf[j])\n    \n    # Find the smallest number\n    smallest = min(items)\n    \n    return smallest","tool_call":"data = {\n    \"Stem\": [2, 3, 4, 5, 6, 7, 8, 9],\n    \"Leaf\": [[7, 9], [2, 7], [0, 4, 4, 8, 9, 9], [4, 7], [1, 6], [2, 9, 9], [5], [0]]\n}\n\ndf = pd.DataFrame(data)\nprint(find_smallest_number_in_stem_leaf(data_frame=df, stem_col=\"Stem\", leaf_col=\"Leaf\"))"}
{"question":"For an economics project, Franklin determined the cost of ferry rides for bicycles and cars. How much higher is the fare for a bicycle on the Seattle-Bremerton ferry than on the Ocracoke ferry?","answer":5.0,"table":"Ferry | Car | Bicycle\nOcracoke | $15 | $3\nFauntleroy-Vashon | $15 | $5\nSeattle-Bremerton | $12 | $8\nSouthport-Fort Fisher | $5 | $2","level":5,"tool_id":2987,"code":"import pandas as pd\n\ndef calculate_fare_difference(df, ferry1, ferry2, vehicle_type):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry fare table, two ferry names, and a vehicle type, and returns the fare difference between the two ferries for the specified vehicle type.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ferry names, car fares, and bicycle fares with columns 'Ferry', 'Car', and 'Bicycle'.\n    ferry1 (str): The name of the first ferry.\n    ferry2 (str): The name of the second ferry.\n    vehicle_type (str): The type of vehicle for which the fare difference is to be calculated. It should be either 'Car' or 'Bicycle'.\n    Returns:\n    float: The fare difference between the two ferries for the specified vehicle type.\n    \"\"\"\n    # Filter the DataFrame for the specific ferries\n    ferry1_df = df[df['Ferry'] == ferry1]\n    ferry2_df = df[df['Ferry'] == ferry2]\n    \n    # Check if both ferries are in the DataFrame\n    if not ferry1_df.empty and not ferry2_df.empty:\n        # Calculate the fare difference\n        fare_difference = abs(ferry1_df[vehicle_type].values[0] - ferry2_df[vehicle_type].values[0])\n        return fare_difference\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Ocracoke', 'Fauntleroy-Vashon', 'Seattle-Bremerton', 'Southport-Fort Fisher'],\n    'Car': [15, 15, 12, 5],\n    'Bicycle': [3, 5, 8, 2]\n})\n# Call the tool to solve the problem\nfare_difference = calculate_fare_difference(df, 'Seattle-Bremerton', 'Ocracoke', 'Bicycle')\nprint(fare_difference)","tool":"def calculate_fare_difference_between_entities(fares_df, entity_col, entity1, entity2, vehicle_type_col):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of fares, two entity names, and a vehicle type column, and returns the fare difference between the two entities for the specified vehicle type.\n    \n    Args:\n    fares_df (pd.DataFrame): A pandas DataFrame containing entity names and fares for different vehicle types.\n    entity_col (str): The column name for the entity names.\n    entity1 (str): The name of the first entity.\n    entity2 (str): The name of the second entity.\n    vehicle_type_col (str): The column name for the vehicle type for which the fare difference is to be calculated.\n    \n    Returns:\n    float: The fare difference between the two entities for the specified vehicle type.\n    \"\"\"\n    # Filter the DataFrame for the specific entities\n    entity1_df = fares_df[fares_df[entity_col] == entity1]\n    entity2_df = fares_df[fares_df[entity_col] == entity2]\n    \n    # Check if both entities are in the DataFrame\n    if not entity1_df.empty and not entity2_df.empty:\n        # Calculate the fare difference\n        fare_difference = abs(entity1_df[vehicle_type_col].values[0] - entity2_df[vehicle_type_col].values[0])\n        return fare_difference\n    else:\n        return None","tool_call":"fares_data = {\n    'Ferry': ['Ocracoke', 'Fauntleroy-Vashon', 'Seattle-Bremerton', 'Southport-Fort Fisher'],\n    'Car': [15, 15, 12, 5],\n    'Bicycle': [3, 5, 8, 2]\n}\n\nfares_df = pd.DataFrame(fares_data)\n\nprint(calculate_fare_difference_between_entities(fares_df, \"Ferry\", \"Seattle-Bremerton\", \"Ocracoke\", \"Bicycle\"))"}
{"question":"An ecologist interested in the nesting patterns of birds counted the number of ducks at local lakes. How many pintail ducks live in Crescent Lake?","answer":2.0,"table":"Lake | Mallard ducks | Pintail ducks\nCrescent Lake | 10 | 2\nRipple Lake | 18 | 12\nAspen Lake | 2 | 2","level":5,"tool_id":1390,"code":"import pandas as pd\n\ndef count_pintail_ducks(df, lake_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of duck counts at local lakes and a lake name, and returns the number of pintail ducks at the specified lake.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing lake names and duck counts with columns 'Lake', 'Mallard ducks', and 'Pintail ducks'.\n    lake_name (str): The name of the lake.\n    Returns:\n    int: The number of pintail ducks at the specified lake.\n    \"\"\"\n    # Filter the DataFrame for the specific lake\n    lake_df = df[df['Lake'] == lake_name]\n    if not lake_df.empty:\n        # Return the number of pintail ducks at the specified lake\n        return lake_df['Pintail ducks'].values[0]\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Lake': ['Crescent Lake', 'Ripple Lake', 'Aspen Lake'],\n    'Mallard ducks': [10, 18, 2],\n    'Pintail ducks': [2, 12, 2]\n})\n# Call the tool to solve the problem\nprint(count_pintail_ducks(df, 'Crescent Lake'))","tool":"def get_item_count_in_specific_location(data_frame, location_col, item_col, specific_location):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of item counts in various locations, a location column name, an item column name, and a specific location, and returns the count of the item in the specific location.\n    \n    Args:\n    data_frame (pd.DataFrame): A pandas DataFrame containing item counts in various locations.\n    location_col (str): The column name for the location values.\n    item_col (str): The column name for the item counts.\n    specific_location (str): The specific location to retrieve the item count from.\n    \n    Returns:\n    int: The count of the item in the specific location.\n    \"\"\"\n    # Filter the DataFrame for the specific location\n    specific_location_df = data_frame[data_frame[location_col] == specific_location]\n    if not specific_location_df.empty:\n        # Return the count of the item in the specific location\n        return specific_location_df[item_col].values[0]\n    else:\n        return None","tool_call":"data = {\n    'Lake': ['Crescent Lake', 'Ripple Lake', 'Aspen Lake'],\n    'Mallard ducks': [10, 18, 2],\n    'Pintail ducks': [2, 12, 2]\n}\n\ndf = pd.DataFrame(data)\nprint(get_item_count_in_specific_location(data_frame=df, location_col=\"Lake\", item_col=\"Pintail ducks\", specific_location=\"Crescent Lake\"))"}
{"question":"Kenny's class is having a holiday party, and he is in charge of bringing juice. He decides to bring powdered juice mix and add water to it at school. There is a proportional relationship between the volume of water Kenny uses to make the juice (in liters), x, and the number of scoops of juice mix he uses, y. What is the constant of proportionality? Write your answer as a whole number or decimal.","answer":2.0,"table":"5 | 10\n6 | 12\n7 | 14\n8 | 16","level":7,"tool_id":4172,"code":"import pandas as pd\n\ndef calculate_constant_of_proportionality(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of the volume of water and the number of scoops of juice mix, and returns the constant of proportionality.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the volume of water and the number of scoops of juice mix with columns 'x' and 'y'.\n    Returns:\n    float: The constant of proportionality.\n    \"\"\"\n    # Calculate the constant of proportionality by dividing the number of scoops by the volume of water\n    df['k'] = df['y'] \/ df['x']\n    \n    # Return the mean of the constant of proportionality column\n    return df['k'].mean()","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'x': [5, 6, 7, 8],\n    'y': [10, 12, 14, 16]\n})\n# Call the tool to solve the problem\nprint(calculate_constant_of_proportionality(df))","tool":"def calculate_constant_of_proportionality_between_two_variables(data_frame, variable1_col, variable2_col):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of two variables and returns the constant of proportionality between the two variables.\n    \n    Args:\n    data_frame (pd.DataFrame): A pandas DataFrame containing the values of two variables with columns specified by variable1_col and variable2_col.\n    variable1_col (str): The column name for the first variable.\n    variable2_col (str): The column name for the second variable.\n    \n    Returns:\n    float: The constant of proportionality between the two variables.\n    \"\"\"\n    # Calculate the constant of proportionality by dividing the values of the second variable by the values of the first variable\n    data_frame['k'] = data_frame[variable2_col] \/ data_frame[variable1_col]\n    \n    # Return the mean of the constant of proportionality column\n    return data_frame['k'].mean()","tool_call":"data = {\n    'x': [5, 6, 7, 8],\n    'y': [10, 12, 14, 16]\n}\n\ndf = pd.DataFrame(data)\nprint(calculate_constant_of_proportionality_between_two_variables(data_frame=df, variable1_col='x', variable2_col='y'))"}
{"question":"Several people compared how many Web pages they had visited. How many more Web pages did Farid visit than Reba?","answer":296.0,"table":"Person | Number of Web pages\nSteven | 3,498\nFarid | 1,522\nHayley | 4,615\nReba | 1,226","level":3,"tool_id":12689,"code":"import pandas as pd\n\ndef calculate_difference(df, person1, person2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of people and the number of web pages they visited, and returns the difference in the number of web pages visited by two specified people.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing people's names and the number of web pages they visited with columns 'Person' and 'Number of Web pages'.\n    person1 (str): The name of the first person.\n    person2 (str): The name of the second person.\n    Returns:\n    int: The difference in the number of web pages visited by the two people.\n    \"\"\"\n    # Filter the DataFrame for the specific people\n    person1_df = df[df['Person'] == person1]\n    person2_df = df[df['Person'] == person2]\n    \n    # Get the number of web pages visited by each person\n    person1_pages = person1_df['Number of Web pages'].values[0]\n    person2_pages = person2_df['Number of Web pages'].values[0]\n    \n    # Calculate the difference\n    difference = person1_pages - person2_pages\n    \n    return difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Person': ['Steven', 'Farid', 'Hayley', 'Reba'],\n    'Number of Web pages': [3498, 1522, 4615, 1226]\n})\n# Call the tool to solve the problem\ndifference = calculate_difference(df, 'Farid', 'Reba')\nprint(difference)","tool":"def calculate_difference_between_two_entities(df, entity_col, value_col, entity1, entity2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of entities and their values, and returns the difference in values between two specified entities.\n    \n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing entities and their values.\n    entity_col (str): The column name for the entities.\n    value_col (str): The column name for the values.\n    entity1 (str): The name of the first entity.\n    entity2 (str): The name of the second entity.\n    \n    Returns:\n    int: The difference in values between the two entities.\n    \"\"\"\n    # Filter the DataFrame for the specific entities\n    entity1_df = df[df[entity_col] == entity1]\n    entity2_df = df[df[entity_col] == entity2]\n    \n    # Get the values for each entity\n    entity1_value = entity1_df[value_col].values[0]\n    entity2_value = entity2_df[value_col].values[0]\n    \n    # Calculate the difference\n    difference = entity1_value - entity2_value\n    \n    return difference","tool_call":"df = pd.DataFrame({\n    'Person': ['Steven', 'Farid', 'Hayley', 'Reba'],\n    'Number of Web pages': [3498, 1522, 4615, 1226]\n})\nprint(calculate_difference_between_two_entities(df, 'Person', 'Number of Web pages', 'Farid', 'Reba'))"}
{"question":"An ecologist interested in the nesting patterns of birds counted the number of ducks at local lakes. How many pintail ducks live in Midnight Lake?","answer":19.0,"table":"Lake | Pintail ducks | Wood ducks\nAspen Lake | 8 | 3\nMeadow Lake | 8 | 9\nMidnight Lake | 19 | 17","level":5,"tool_id":11645,"code":"import pandas as pd\n\ndef count_ducks(df, lake, duck_type):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of duck counts at different lakes, the name of a lake, and the type of duck, and returns the number of that type of duck at the specified lake.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of different types of ducks at different lakes. The DataFrame should have columns 'Lake', 'Pintail ducks', and 'Wood ducks'.\n    lake (str): The name of the lake.\n    duck_type (str): The type of duck.\n    Returns:\n    int: The number of the specified type of duck at the specified lake.\n    \"\"\"\n    # Filter the DataFrame for the specified lake\n    lake_df = df[df['Lake'] == lake]\n    \n    # If the lake is not in the DataFrame, return 0\n    if lake_df.empty:\n        return 0\n    \n    # Return the number of the specified type of duck at the specified lake\n    return lake_df[duck_type].values[0]","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Lake': ['Aspen Lake', 'Meadow Lake', 'Midnight Lake'],\n    'Pintail ducks': [8, 8, 19],\n    'Wood ducks': [3, 9, 17]\n})\n# Call the tool to solve the problem\nprint(count_ducks(df, 'Midnight Lake', 'Pintail ducks'))","tool":"def get_item_count_in_group(data_frame, group_col, item_col, group_name, item_type):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of item counts in different groups, the name of a group, and the type of item, and returns the count of that type of item in the specified group.\n    \n    Args:\n    data_frame (pd.DataFrame): A pandas DataFrame containing the number of different types of items in different groups.\n    group_col (str): The column name for the group names.\n    item_col (str): The column name for the item types.\n    group_name (str): The name of the group.\n    item_type (str): The type of item.\n    \n    Returns:\n    int: The count of the specified type of item in the specified group.\n    \"\"\"\n    # Filter the DataFrame for the specified group\n    group_df = data_frame[data_frame[group_col] == group_name]\n    \n    # If the group is not in the DataFrame, return 0\n    if group_df.empty:\n        return 0\n    \n    # Return the count of the specified type of item in the specified group\n    return group_df[item_col][item_type].values[0]","tool_call":"data = {\n    'Lake': ['Aspen Lake', 'Meadow Lake', 'Midnight Lake'],\n    'Pintail ducks': [8, 8, 19],\n    'Wood ducks': [3, 9, 17]\n}\n\ndf = pd.DataFrame(data)\nprint(get_item_count_in_group(data_frame=df, group_col=\"Lake\", item_col=\"Pintail ducks\", group_name=\"Midnight Lake\", item_type=\"Pintail ducks\"))"}
{"question":"The owner of a plant nursery wrote down the number of roses on each bush. How many bushes have fewer than 23 roses?","answer":1.0,"table":"Stem | Leaf \n1 | 3\n2 | 5\n3 | \n4 | 2, 6\n5 | \n6 | 2\n7 | 3, 6, 7, 8","level":6,"tool_id":13138,"code":"import pandas as pd\ndef count_bushes_with_less_than_23_roses(df):\n    \"\"\"\n    This function takes in a pandas dataframe of roses per bush, and returns the number of bushes that have less than 23 roses.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of roses per bush.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of bushes that have less than 23 roses.\n    \"\"\"\n    # prepare a list to calculate roses in each bush\n    roses = []\n    # calculate the total number of roses in each bush\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            roses.append(stem * 10 + leaf[j])\n    # filter the bushes where the total number of roses is less than 23\n    filtered = [rose for rose in roses if rose < 23]\n    # count the number of rows\n    num_bushes = len(filtered)\n    return num_bushes","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7],\n    'Leaf': [[3], [5], [], [2, 6], [], [2], [3, 6, 7, 8]]\n})\n# Call the tool to solve the problem\nprint(count_bushes_with_less_than_23_roses(df))","tool":"def count_groups_below_threshold_in_stem_leaf(data_frame, stem_col, leaf_col, item_threshold):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a stem-and-leaf plot of groups and a threshold value, and returns the number of groups that have values less than the threshold.\n    \n    Args:\n    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.\n    stem_col (str): The column name for the stem values.\n    leaf_col (str): The column name for the leaf values.\n    item_threshold (int): The threshold value for filtering items.\n    \n    Returns:\n    int: The number of items with values less than the threshold.\n    \"\"\"\n    # Initialize the list to calculate items in each group\n    items = []\n    \n    # Calculate the total value of items in each group\n    for i in range(len(data_frame)):\n        stem = data_frame[stem_col][i]\n        leaf = data_frame[leaf_col][i]\n        for j in range(len(leaf)):\n            items.append(stem * 10 + leaf[j])\n    \n    # Filter the items where the total value is less than the threshold\n    filtered = [item for item in items if item < item_threshold]\n    \n    # Count the number of items\n    num_items = len(filtered)\n    \n    return num_items","tool_call":"data = {\n    \"Stem\": [1, 2, 3, 4, 5, 6, 7],\n    \"Leaf\": [[3], [5], [], [2, 6], [], [2], [3, 6, 7, 8]]\n}\n\ndf = pd.DataFrame(data)\nprint(count_groups_below_threshold_in_stem_leaf(data_frame=df, stem_col=\"Stem\", leaf_col=\"Leaf\", item_threshold=23))"}
{"question":"For an economics project, Erik determined the cost of ferry rides for bicycles and cars. How much higher is the fare for a bicycle on the Fauntleroy-Vashon ferry than on the Ocracoke ferry?","answer":2.0,"table":"Ferry | Bicycle | Car\nMukilteu-Clinton | $5 | $7\nOcracoke | $3 | $15\nFauntleroy-Vashon | $5 | $15","level":4,"tool_id":16672,"code":"import pandas as pd\n\ndef calculate_fare_difference(df, ferry1, ferry2, vehicle_type):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry fare table, two ferry names, and a vehicle type, and returns the fare difference between the two ferries for the specified vehicle type.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ferry names and fares for bicycles and cars with columns 'Ferry', 'Bicycle', and 'Car'.\n    ferry1 (str): The name of the first ferry.\n    ferry2 (str): The name of the second ferry.\n    vehicle_type (str): The type of vehicle ('Bicycle' or 'Car').\n    Returns:\n    float: The fare difference between the two ferries for the specified vehicle type.\n    \"\"\"\n    # Filter the DataFrame for the specific ferries\n    ferry1_df = df[df['Ferry'] == ferry1]\n    ferry2_df = df[df['Ferry'] == ferry2]\n    \n    # Get the fares for the specified vehicle type\n    fare1 = ferry1_df[vehicle_type].values[0]\n    fare2 = ferry2_df[vehicle_type].values[0]\n    \n    # Calculate the fare difference\n    fare_difference = abs(fare1 - fare2)\n    \n    return fare_difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Mukilteu-Clinton', 'Ocracoke', 'Fauntleroy-Vashon'],\n    'Bicycle': [5, 3, 5],\n    'Car': [7, 15, 15]\n})\n\n# Call the tool to solve the problem\nfare_difference = calculate_fare_difference(df, 'Fauntleroy-Vashon', 'Ocracoke', 'Bicycle')\nprint(fare_difference)","tool":"def calculate_value_difference_between_entities(data_frame, entity_col, value_cols, entity1, entity2, category):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of entities with categories and their values, two entity names, and a category, and returns the value difference between the two entities for the specified category.\n    \n    Args:\n    data_frame (pd.DataFrame): A pandas DataFrame containing entity names and values for different categories.\n    entity_col (str): The column name for the entity names.\n    value_cols (list): A list of column names for the category values.\n    entity1 (str): The name of the first entity.\n    entity2 (str): The name of the second entity.\n    category (str): The category for which the value difference is to be calculated.\n    \n    Returns:\n    float: The value difference between the two entities for the specified category.\n    \"\"\"\n    # Filter the DataFrame for the specific entities\n    entity1_df = data_frame[data_frame[entity_col] == entity1]\n    entity2_df = data_frame[data_frame[entity_col] == entity2]\n    \n    # Get the values for the specified category\n    value1 = entity1_df[category].values[0]\n    value2 = entity2_df[category].values[0]\n    \n    # Calculate the value difference\n    value_difference = abs(value1 - value2)\n    \n    return value_difference","tool_call":"data = {\n    'Ferry': ['Mukilteo-Clinton', 'Ocracoke', 'Fauntleroy-Vashon'],\n    'Bicycle': [5, 3, 5],\n    'Car': [7, 15, 15]\n}\n\ndf = pd.DataFrame(data)\nprint(calculate_value_difference_between_entities(data_frame=df, entity_col=\"Ferry\", value_cols=[\"Bicycle\", \"Car\"], entity1=\"Fauntleroy-Vashon\", entity2=\"Ocracoke\", category=\"Bicycle\"))"}
{"question":"The owner of a plant nursery wrote down the number of roses on each bush. How many bushes have fewer than 40 roses?","answer":10.0,"table":"Stem | Leaf \n1 | 4, 4, 5\n2 | 4, 5\n3 | 6, 6, 6, 7, 9\n4 | 1, 1, 7\n5 | 0, 3, 7\n6 | 1, 9","level":8,"tool_id":10357,"code":"import pandas as pd\ndef count_bushes_with_less_than_40_roses(df):\n    \"\"\"\n    This function takes in a pandas dataframe of roses per bush, and returns the number of bushes that have less than 40 roses.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of roses per bush.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of bushes that have less than 40 roses.\n    \"\"\"\n    # prepare a list to calculate roses in each bush\n    roses = []\n    # calculate the total number of roses in each bush\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            roses.append(stem * 10 + leaf[j])\n    # filter the bushes where the total number of roses is less than 40\n    filtered = [rose for rose in roses if rose < 40]\n    # count the number of rows\n    num_bushes = len(filtered)\n    return num_bushes","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6],\n    'Leaf': [[4, 4, 5], [4, 5], [6, 6, 6, 7, 9], [1, 1, 7], [0, 3, 7], [1, 9]]\n})\n# Call the tool to solve the problem\nprint(count_bushes_with_less_than_40_roses(df))","tool":"def count_groups_below_threshold_in_stem_leaf(data_frame, stem_col, leaf_col, item_threshold):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a stem-and-leaf plot of groups and a threshold value, and returns the number of groups that have values less than the threshold.\n    \n    Args:\n    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.\n    stem_col (str): The column name for the stem values.\n    leaf_col (str): The column name for the leaf values.\n    item_threshold (int): The threshold value for filtering items.\n    \n    Returns:\n    int: The number of items with values less than the threshold.\n    \"\"\"\n    # Initialize the list to calculate items in each group\n    items = []\n    \n    # Calculate the total value of items in each group\n    for i in range(len(data_frame)):\n        stem = data_frame[stem_col][i]\n        leaf = data_frame[leaf_col][i]\n        for j in range(len(leaf)):\n            items.append(stem * 10 + leaf[j])\n    \n    # Filter the items where the total value is less than the threshold\n    filtered = [item for item in items if item < item_threshold]\n    \n    # Count the number of items\n    num_items = len(filtered)\n    \n    return num_items","tool_call":"data = {\n    \"Stem\": [1, 2, 3, 4, 5, 6],\n    \"Leaf\": [[4, 4, 5], [4, 5], [6, 6, 6, 7, 9], [1, 1, 7], [0, 3, 7], [1, 9]]\n}\n\ndf = pd.DataFrame(data)\nprint(count_groups_below_threshold_in_stem_leaf(data_frame=df, stem_col=\"Stem\", leaf_col=\"Leaf\", item_threshold=40))"}
{"question":"A transportation analyst compared various bridges' tolls. How much higher is the toll for a car on the George Washington bridge than on the Tacoma Narrows bridge?","answer":5.0,"table":"Bridge | Car | Carpool\nGeorge Washington | $8 | $2\nHatem | $5 | $5\nTacoma Narrows | $3 | $3","level":4,"tool_id":7564,"code":"import pandas as pd\n\ndef calculate_toll_difference(df, bridge1, bridge2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a toll table and two bridge names, and returns the difference in tolls for a car between the two bridges.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge names and their tolls with columns 'Bridge', 'Car', and 'Carpool'.\n    bridge1 (str): The name of the first bridge.\n    bridge2 (str): The name of the second bridge.\n    Returns:\n    float: The difference in tolls for a car between the two bridges.\n    \"\"\"\n    # Filter the DataFrame for the specific bridges\n    bridge1_df = df[df['Bridge'] == bridge1]\n    bridge2_df = df[df['Bridge'] == bridge2]\n    \n    # Get the tolls for a car on the two bridges\n    toll_bridge1 = bridge1_df['Car'].values[0]\n    toll_bridge2 = bridge2_df['Car'].values[0]\n    \n    # Calculate the difference in tolls\n    toll_difference = toll_bridge1 - toll_bridge2\n    \n    return toll_difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['George Washington', 'Hatem', 'Tacoma Narrows'],\n    'Car': [8, 5, 3],\n    'Carpool': [2, 5, 3]\n})\n\n# Call the tool to solve the problem\ntoll_difference = calculate_toll_difference(df, 'George Washington', 'Tacoma Narrows')\n\n# Print the answer\nprint(toll_difference)","tool":"def calculate_attribute_difference_between_two_entities(df, entity_col, attribute_col, entity1, entity2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of entities and their attributes, and two entity names, and returns the difference in the attribute between the two entities.\n    \n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing entity names and their attributes.\n    entity_col (str): The column name for the entity names.\n    attribute_col (str): The column name for the attribute.\n    entity1 (str): The name of the first entity.\n    entity2 (str): The name of the second entity.\n    \n    Returns:\n    float: The difference in the attribute between the two entities.\n    \"\"\"\n    # Filter the DataFrame for the specific entities\n    entity1_df = df[df[entity_col] == entity1]\n    entity2_df = df[df[entity_col] == entity2]\n    \n    # Get the attribute for the two entities\n    attribute_entity1 = entity1_df[attribute_col].values[0]\n    attribute_entity2 = entity2_df[attribute_col].values[0]\n    \n    # Calculate the difference in attributes\n    attribute_difference = attribute_entity1 - attribute_entity2\n    \n    return attribute_difference","tool_call":"df = pd.DataFrame({\n    'Bridge': ['George Washington', 'Hatem', 'Tacoma Narrows'],\n    'Car': [8, 5, 3],\n    'Carpool': [2, 5, 3]\n})\n\nprint(calculate_attribute_difference_between_two_entities(df, 'Bridge', 'Car', 'George Washington', 'Tacoma Narrows'))"}
{"question":"For an economics project, Raymond determined the cost of ferry rides for bicycles and cars. How much does it cost to take a car on the Seattle-Bremerton ferry?","answer":12.0,"table":"Ferry | Bicycle | Car\nSeattle-Bremerton | $8 | $12\nOcracoke | $3 | $15\nSouthport-Fort Fisher | $2 | $5\nMukilteu-Clinton | $5 | $7\nFauntleroy-Vashon | $5 | $15","level":5,"tool_id":11199,"code":"import pandas as pd\n\ndef get_ferry_cost(df, ferry_name, vehicle_type):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry cost table, a ferry name, and a vehicle type, and returns the cost of the ferry ride for the specified vehicle type.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ferry names and their costs for different vehicle types with columns 'Ferry', 'Bicycle', and 'Car'.\n    ferry_name (str): The name of the ferry.\n    vehicle_type (str): The type of the vehicle.\n    Returns:\n    float: The cost of the ferry ride for the specified vehicle type.\n    \"\"\"\n    # Filter the DataFrame for the specific ferry\n    ferry_df = df[df['Ferry'] == ferry_name]\n    if not ferry_df.empty:\n        # Get the cost for the specified vehicle type\n        cost = ferry_df[vehicle_type].values[0]\n        return cost\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Seattle-Bremerton', 'Ocracoke', 'Southport-Fort Fisher', 'Mukilteu-Clinton', 'Fauntleroy-Vashon'],\n    'Bicycle': [8, 3, 2, 5, 5],\n    'Car': [12, 15, 5, 7, 15]\n})\n# Call the tool to solve the problem\nprint(get_ferry_cost(df, 'Seattle-Bremerton', 'Car'))","tool":"def get_service_cost_for_item(df, service_col, item_col, service_name, item_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of service costs for various items, a service name, and an item name, and returns the cost of the service for the specified item.\n    \n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing service names and their costs for different items.\n    service_col (str): The column name for the service names.\n    item_col (str): The column name for the item names.\n    service_name (str): The name of the service.\n    item_name (str): The name of the item.\n    \n    Returns:\n    float: The cost of the service for the specified item.\n    \"\"\"\n    # Filter the DataFrame for the specific service\n    service_df = df[df[service_col] == service_name]\n    if not service_df.empty:\n        # Get the cost for the specified item\n        cost = service_df[item_col].values[0]\n        return cost\n    else:\n        return None","tool_call":"df = pd.DataFrame({\n    'Ferry': ['Seattle-Bremerton', 'Ocracoke', 'Southport-Fort Fisher', 'Mukilteu-Clinton', 'Fauntleroy-Vashon'],\n    'Bicycle': [8, 3, 2, 5, 5],\n    'Car': [12, 15, 5, 7, 15]\n})\nprint(get_service_cost_for_item(df, 'Ferry', 'Car', 'Seattle-Bremerton', 'Car'))"}
{"question":"For an economics project, Joy determined the cost of ferry rides for bicycles and cars. How much higher is the fare for a bicycle on the Seattle-Bremerton ferry than on the Fauntleroy-Vashon ferry?","answer":3.0,"table":"Ferry | Bicycle | Car\nSeattle-Bremerton | $8 | $12\nSouthport-Fort Fisher | $2 | $5\nFauntleroy-Vashon | $5 | $15\nOcracoke | $3 | $15\nMukilteu-Clinton | $5 | $7","level":5,"tool_id":7326,"code":"import pandas as pd\n\ndef calculate_fare_difference(df, ferry1, ferry2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry fare table and two ferry names, and returns the difference in bicycle fare between the two ferries.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ferry names and their fares for bicycles and cars with columns 'Ferry', 'Bicycle', and 'Car'.\n    ferry1 (str): The name of the first ferry.\n    ferry2 (str): The name of the second ferry.\n    Returns:\n    float: The difference in bicycle fare between the two ferries.\n    \"\"\"\n    # Filter the DataFrame for the specific ferries\n    ferry1_df = df[df['Ferry'] == ferry1]\n    ferry2_df = df[df['Ferry'] == ferry2]\n    \n    # Check if the ferries exist in the DataFrame\n    if not ferry1_df.empty and not ferry2_df.empty:\n        # Calculate the difference in bicycle fare\n        fare_difference = ferry1_df['Bicycle'].values[0] - ferry2_df['Bicycle'].values[0]\n        return fare_difference\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Seattle-Bremerton', 'Southport-Fort Fisher', 'Fauntleroy-Vashon', 'Ocracoke', 'Mukilteo-Clinton'],\n    'Bicycle': [8, 2, 5, 3, 5],\n    'Car': [12, 5, 15, 15, 7]\n})\n\n# Call the tool to solve the problem\nfare_difference = calculate_fare_difference(df, 'Seattle-Bremerton', 'Fauntleroy-Vashon')\n\n# Print the answer\nprint(fare_difference)","tool":"def calculate_fare_difference_between_items(df, item_col, fare_col, item1, item2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of items with different fare columns, and returns the difference in fare between two items for a specific fare column.\n    \n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing item names and their fares for different columns.\n    item_col (str): The column name for the item names.\n    fare_col (str): The column name for the fare values.\n    item1 (str): The name of the first item.\n    item2 (str): The name of the second item.\n    \n    Returns:\n    float: The difference in fare between the two items for the specified fare column.\n    \"\"\"\n    # Filter the DataFrame for the specific items\n    item1_df = df[df[item_col] == item1]\n    item2_df = df[df[item_col] == item2]\n    \n    # Check if the items exist in the DataFrame\n    if not item1_df.empty and not item2_df.empty:\n        # Calculate the difference in fare\n        fare_difference = item1_df[fare_col].values[0] - item2_df[fare_col].values[0]\n        return fare_difference\n    else:\n        return None","tool_call":"df = pd.DataFrame({\n    'Ferry': ['Seattle-Bremerton', 'Southport-Fort Fisher', 'Fauntleroy-Vashon', 'Ocracoke', 'Mukilteo-Clinton'],\n    'Bicycle': [8, 2, 5, 3, 5],\n    'Car': [12, 5, 15, 15, 7]\n})\n\nfare_difference = calculate_fare_difference_between_items(df, 'Ferry', 'Bicycle', 'Seattle-Bremerton', 'Fauntleroy-Vashon')\nprint(fare_difference)"}
{"question":"For an economics project, Layla determined the cost of ferry rides for bicycles and cars. How much does it cost to take a bicycle on the Southport-Fort Fisher ferry?","answer":2.0,"table":"Ferry | Car | Bicycle\nSeattle-Bremerton | $12 | $8\nMukilteu-Clinton | $7 | $5\nSouthport-Fort Fisher | $5 | $2\nFauntleroy-Vashon | $15 | $5\nOcracoke | $15 | $3","level":4,"tool_id":1902,"code":"import pandas as pd\n\ndef get_bicycle_ferry_cost(df, ferry_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry cost table and a ferry name, and returns the cost for a bicycle on the specified ferry.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ferry names and their costs for cars and bicycles with columns 'Ferry', 'Car', and 'Bicycle'.\n    ferry_name (str): The name of the ferry.\n    Returns:\n    float: The cost for a bicycle on the specified ferry.\n    \"\"\"\n    # Filter the DataFrame for the specific ferry\n    ferry_df = df[df['Ferry'] == ferry_name]\n    if not ferry_df.empty:\n        bicycle_cost = ferry_df['Bicycle'].values[0]\n        return bicycle_cost\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Seattle-Bremerton', 'Mukilteu-Clinton', 'Southport-Fort Fisher', 'Fauntleroy-Vashon', 'Ocracoke'],\n    'Car': [12, 7, 5, 15, 15],\n    'Bicycle': [8, 5, 2, 5, 3]\n})\n# Call the tool to solve the problem\nbicycle_cost = get_bicycle_ferry_cost(df, 'Southport-Fort Fisher')\nprint(bicycle_cost)","tool":"def get_item_cost_for_specific_entity(df, entity_col, item_col, entity_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of entities and their item costs, and returns the cost for a specific item for a specific entity.\n    \n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing entities and their item costs.\n    entity_col (str): The column name for the entities.\n    item_col (str): The column name for the item costs.\n    entity_name (str): The name of the specific entity.\n    \n    Returns:\n    float: The cost for the specific item for the specific entity.\n    \"\"\"\n    # Filter the DataFrame for the specific entity\n    entity_df = df[df[entity_col] == entity_name]\n    if not entity_df.empty:\n        item_cost = entity_df[item_col].values[0]\n        return item_cost\n    else:\n        return None","tool_call":"df = pd.DataFrame({\n    'Ferry': ['Seattle-Bremerton', 'Mukilteo-Clinton', 'Southport-Fort Fisher', 'Fauntleroy-Vashon', 'Ocracoke'],\n    'Car': [12, 7, 5, 15, 15],\n    'Bicycle': [8, 5, 2, 5, 3]\n})\nprint(get_item_cost_for_specific_entity(df, 'Ferry', 'Bicycle', 'Southport-Fort Fisher'))"}
{"question":"While writing a paper on making decisions in groups, Daniel researched the size of a number of committees. How many committees have fewer than 61 members?","answer":6.0,"table":"Stem | Leaf \n1 | 9\n2 | 6, 8\n3 | \n4 | 1, 5\n5 | 9\n6 | \n7 | \n8 | 9\n9 | 0","level":8,"tool_id":12885,"code":"import pandas as pd\ndef count_committees_with_fewer_than_61_members(df):\n    \"\"\"\n    This function takes in a pandas dataframe of committee sizes, and returns the number of committees that have fewer than 61 members.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the size of committees.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of committees that have fewer than 61 members.\n    \"\"\"\n    # prepare a list to calculate members in each committee\n    members = []\n    # calculate the total number of members in each committee\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            members.append(stem * 10 + leaf[j])\n    # filter the committees where the total number of members is less than 61\n    filtered = [member for member in members if member < 61]\n    # count the number of rows\n    num_committees = len(filtered)\n    return num_committees","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[9], [6, 8], [], [1, 5], [9], [], [], [9], [0]]\n})\n# Call the tool to solve the problem\nprint(count_committees_with_fewer_than_61_members(df))","tool":"def count_groups_below_threshold_in_stem_leaf(data_frame, stem_col, leaf_col, item_threshold):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a stem-and-leaf plot of groups and a threshold value, and returns the number of groups that have values less than the threshold.\n    \n    Args:\n    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.\n    stem_col (str): The column name for the stem values.\n    leaf_col (str): The column name for the leaf values.\n    item_threshold (int): The threshold value for filtering items.\n    \n    Returns:\n    int: The number of items with values less than the threshold.\n    \"\"\"\n    # Initialize the list to calculate items in each group\n    items = []\n    \n    # Calculate the total value of items in each group\n    for i in range(len(data_frame)):\n        stem = data_frame[stem_col][i]\n        leaf = data_frame[leaf_col][i]\n        for j in range(len(leaf)):\n            items.append(stem * 10 + leaf[j])\n    \n    # Filter the items where the total value is less than the threshold\n    filtered = [item for item in items if item < item_threshold]\n    \n    # Count the number of items\n    num_items = len(filtered)\n    \n    return num_items","tool_call":"data = {\n    \"Stem\": [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    \"Leaf\": [[9], [6, 8], [], [1, 5], [9], [], [], [9], [0]]\n}\n\ndf = pd.DataFrame(data)\nprint(count_groups_below_threshold_in_stem_leaf(data_frame=df, stem_col=\"Stem\", leaf_col=\"Leaf\", item_threshold=61))"}
{"question":"A reporter counted the number of masks local artists made for this year's masquerade ball. How many artists made exactly 6 masks?","answer":0.0,"table":"Masks made | Frequency\n1 | 17\n2 | 18\n3 | 9\n4 | 15\n5 | 2\n6 | 0","level":7,"tool_id":11192,"code":"import pandas as pd\n\ndef count_artists(df, masks):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a frequency table of masks made by artists and a number of masks, and returns the number of artists who made exactly that number of masks.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of masks made and the frequency of artists who made that number of masks. The DataFrame should have columns 'Masks made' and 'Frequency'.\n    masks (int): The number of masks to check.\n    Returns:\n    int: The number of artists who made exactly the specified number of masks.\n    \"\"\"\n    # Filter the DataFrame for the specified number of masks\n    masks_df = df[df['Masks made'] == masks]\n    if not masks_df.empty:\n        # Return the frequency of artists who made the specified number of masks\n        return masks_df['Frequency'].values[0]\n    else:\n        # If no artists made the specified number of masks, return 0\n        return 0","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Masks made': [1, 2, 3, 4, 5, 6],\n    'Frequency': [17, 18, 9, 15, 2, 0]\n})\n# Call the tool to solve the problem\nprint(count_artists(df, 6))","tool":"def count_frequency_of_value_in_frequency_table(df, value_col, frequency_col, target_value):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a frequency table, a target value, and returns the frequency of the target value in the table.\n    \n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing a frequency table with columns specified by value_col and frequency_col.\n    value_col (str): The column name for the values.\n    frequency_col (str): The column name for the frequencies.\n    target_value (int): The target value to check the frequency.\n    \n    Returns:\n    int: The frequency of the target value in the table. If the target value is not found in the table, it returns 0.\n    \"\"\"\n    # Filter the DataFrame for the target value\n    target_df = df[df[value_col] == target_value]\n    if not target_df.empty:\n        # Return the frequency of the target value\n        return target_df[frequency_col].values[0]\n    else:\n        # If the target value is not found in the table, return 0\n        return 0","tool_call":"df = pd.DataFrame({\n    'Masks made': [1, 2, 3, 4, 5, 6],\n    'Frequency': [17, 18, 9, 15, 2, 0]\n})\nprint(count_frequency_of_value_in_frequency_table(df, 'Masks made', 'Frequency', 6))"}
{"question":"For an economics project, Luca determined the cost of ferry rides for bicycles and cars. On the Fauntleroy-Vashon ferry, how much higher is the fare for a car than for a bicycle?","answer":10.0,"table":"Ferry | Bicycle | Car\nMukilteu-Clinton | $5 | $7\nSeattle-Bremerton | $8 | $12\nFauntleroy-Vashon | $5 | $15\nSouthport-Fort Fisher | $2 | $5\nOcracoke | $3 | $15","level":4,"tool_id":7333,"code":"import pandas as pd\n\ndef calculate_fare_difference(df, ferry_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry fare table and a ferry name, and returns the fare difference between a car and a bicycle for the given ferry.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ferry names and their fares for bicycles and cars with columns 'Ferry', 'Bicycle', and 'Car'.\n    ferry_name (str): The name of the ferry.\n    Returns:\n    float: The fare difference between a car and a bicycle for the given ferry.\n    \"\"\"\n    # Filter the DataFrame for the specific ferry\n    ferry_df = df[df['Ferry'] == ferry_name]\n    if not ferry_df.empty:\n        # Calculate the fare difference\n        fare_difference = ferry_df['Car'].values[0] - ferry_df['Bicycle'].values[0]\n        return fare_difference\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Mukilteo-Clinton', 'Seattle-Bremerton', 'Fauntleroy-Vashon', 'Southport-Fort Fisher', 'Ocracoke'],\n    'Bicycle': [5, 8, 5, 2, 3],\n    'Car': [7, 12, 15, 5, 15]\n})\n\n# Call the tool to solve the problem\nfare_difference = calculate_fare_difference(df, 'Fauntleroy-Vashon')\nprint(fare_difference)","tool":"def calculate_fare_difference_for_vehicles(fare_df, ferry_col, vehicle1_col, vehicle2_col, ferry_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a fare table and a ferry name, and returns the fare difference between two types of vehicles for the given ferry.\n    \n    Args:\n    fare_df (pd.DataFrame): A pandas DataFrame containing ferry names and their fares for two types of vehicles.\n    ferry_col (str): The column name for the ferry names.\n    vehicle1_col (str): The column name for the first type of vehicle.\n    vehicle2_col (str): The column name for the second type of vehicle.\n    ferry_name (str): The name of the ferry.\n    \n    Returns:\n    float: The fare difference between the two types of vehicles for the given ferry.\n    \"\"\"\n    # Filter the DataFrame for the specific ferry\n    ferry_df = fare_df[fare_df[ferry_col] == ferry_name]\n    if not ferry_df.empty:\n        # Calculate the fare difference\n        fare_difference = ferry_df[vehicle2_col].values[0] - ferry_df[vehicle1_col].values[0]\n        return fare_difference\n    else:\n        return None","tool_call":"fare_data = {\n    'Ferry': ['Mukilteo-Clinton', 'Seattle-Bremerton', 'Fauntleroy-Vashon', 'Southport-Fort Fisher', 'Ocracoke'],\n    'Bicycle': [5, 8, 5, 2, 3],\n    'Car': [7, 12, 15, 5, 15]\n}\n\nfare_df = pd.DataFrame(fare_data)\n\nprint(calculate_fare_difference_for_vehicles(fare_df, \"Ferry\", \"Bicycle\", \"Car\", \"Fauntleroy-Vashon\"))"}
{"question":"For an economics project, Lucy determined the cost of ferry rides for bicycles and cars. On the Ocracoke ferry, how much higher is the fare for a car than for a bicycle?","answer":12.0,"table":"Ferry | Bicycle | Car\nMukilteu-Clinton | $5 | $7\nSeattle-Bremerton | $8 | $12\nSouthport-Fort Fisher | $2 | $5\nOcracoke | $3 | $15\nFauntleroy-Vashon | $5 | $15","level":4,"tool_id":17185,"code":"import pandas as pd\n\ndef calculate_fare_difference(df, ferry_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry fare table and a ferry name, and returns the fare difference between a car and a bicycle for the specified ferry.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ferry names and their fares for bicycles and cars with columns 'Ferry', 'Bicycle', and 'Car'.\n    ferry_name (str): The name of the ferry.\n    Returns:\n    float: The fare difference between a car and a bicycle for the specified ferry.\n    \"\"\"\n    # Filter the DataFrame for the specific ferry\n    ferry_df = df[df['Ferry'] == ferry_name]\n    if not ferry_df.empty:\n        # Calculate the fare difference\n        fare_difference = ferry_df['Car'].values[0] - ferry_df['Bicycle'].values[0]\n        return fare_difference\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Mukilteu-Clinton', 'Seattle-Bremerton', 'Southport-Fort Fisher', 'Ocracoke', 'Fauntleroy-Vashon'],\n    'Bicycle': [5, 8, 2, 3, 5],\n    'Car': [7, 12, 5, 15, 15]\n})\n# Call the tool to solve the problem\nfare_difference = calculate_fare_difference(df, 'Ocracoke')\nprint(fare_difference)","tool":"def calculate_fare_difference_for_vehicles(fare_df, ferry_col, vehicle1_col, vehicle2_col, ferry_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a fare table and a ferry name, and returns the fare difference between two types of vehicles for the specified ferry.\n    \n    Args:\n    fare_df (pd.DataFrame): A pandas DataFrame containing ferry names and their fares for two types of vehicles.\n    ferry_col (str): The column name for the ferry names.\n    vehicle1_col (str): The column name for the first type of vehicle.\n    vehicle2_col (str): The column name for the second type of vehicle.\n    ferry_name (str): The name of the ferry.\n    \n    Returns:\n    float: The fare difference between the two types of vehicles for the specified ferry.\n    \"\"\"\n    # Filter the DataFrame for the specific ferry\n    ferry_df = fare_df[fare_df[ferry_col] == ferry_name]\n    if not ferry_df.empty:\n        # Calculate the fare difference\n        fare_difference = ferry_df[vehicle2_col].values[0] - ferry_df[vehicle1_col].values[0]\n        return fare_difference\n    else:\n        return None","tool_call":"fare_data = {\n    'Ferry': ['Mukilteu-Clinton', 'Seattle-Bremerton', 'Southport-Fort Fisher', 'Ocracoke', 'Fauntleroy-Vashon'],\n    'Bicycle': [5, 8, 2, 3, 5],\n    'Car': [7, 12, 5, 15, 15]\n}\n\nfare_df = pd.DataFrame(fare_data)\nprint(calculate_fare_difference_for_vehicles(fare_df, \"Ferry\", \"Bicycle\", \"Car\", \"Ocracoke\"))"}
{"question":"Each cage has 2 tortoises. How many tortoises are in 4 cages?","answer":8.0,"table":"Number of cages | Number of tortoises\n1 | 2\n2 | 4\n3 | 6\n4 | ?","level":2,"tool_id":14753,"code":"def calculate_tortoises_in_cages(df, num_cages):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of the number of tortoises in each cage and a number of cages, and returns the number of tortoises in the given number of cages.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of cages and the corresponding number of tortoises with columns 'Number of cages' and 'Number of tortoises'.\n    num_cages (int): The number of cages.\n    Returns:\n    int: The number of tortoises in the given number of cages.\n    \"\"\"\n    # Find the number of tortoises in one cage\n    tortoises_per_cage = df[df['Number of cages'] == 1]['Number of tortoises'].values[0]\n    \n    # Calculate the number of tortoises in the given number of cages\n    num_tortoises = num_cages * tortoises_per_cage\n    \n    return num_tortoises","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of cages': [1, 2, 3, 4],\n    'Number of tortoises': [2, 4, 6, None]\n})\n\n# Call the tool to solve the problem\nnum_tortoises = calculate_tortoises_in_cages(df, 4)\n\n# Print the answer\nprint(num_tortoises)","tool":"def calculate_items_in_groups(df, group_col, item_col, num_groups):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of the number of items in each group and a number of groups, and returns the number of items in the given number of groups.\n    \n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of groups and the corresponding number of items with columns specified by group_col and item_col.\n    group_col (str): The column name for the group counts.\n    item_col (str): The column name for the item counts.\n    num_groups (int): The number of groups.\n    \n    Returns:\n    int: The number of items in the given number of groups.\n    \"\"\"\n    # Find the number of items in one group\n    items_per_group = df[df[group_col] == 1][item_col].values[0]\n    \n    # Calculate the number of items in the given number of groups\n    num_items = num_groups * items_per_group\n    \n    return num_items","tool_call":"df = pd.DataFrame({\n    'Number of cages': [1, 2, 3, 4],\n    'Number of tortoises': [2, 4, 6, None]\n})\n\nprint(calculate_items_in_groups(df, 'Number of cages', 'Number of tortoises', 4))"}
{"question":"A transportation analyst compared various bridges' tolls. How much is the toll for a carpool on the Fort Madison bridge?","answer":1.0,"table":"Bridge | Car | Carpool\nHatem | $5 | $5\nGeorge Washington | $8 | $2\nFort Madison | $1 | $1","level":4,"tool_id":5185,"code":"import pandas as pd\n\ndef get_toll_for_carpool(df, bridge_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of bridge tolls and a bridge name, and returns the toll for a carpool on the specified bridge.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge names and their tolls for cars and carpools with columns 'Bridge', 'Car', and 'Carpool'.\n    bridge_name (str): The name of the bridge.\n    Returns:\n    float: The toll for a carpool on the specified bridge.\n    \"\"\"\n    # Filter the DataFrame for the specific bridge\n    bridge_df = df[df['Bridge'] == bridge_name]\n    if not bridge_df.empty:\n        carpool_toll = bridge_df['Carpool'].values[0]\n        return carpool_toll\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['Hatem', 'George Washington', 'Fort Madison'],\n    'Car': [5, 8, 1],\n    'Carpool': [5, 2, 1]\n})\n# Call the tool to solve the problem\ntoll = get_toll_for_carpool(df, 'Fort Madison')\nprint(toll)","tool":"def get_value_from_category_and_item(data_frame, category_col, item_col, item_name):\n    \"\"\"\n    This function takes in a pandas DataFrame, a category column, an item column, and an item name, and returns the value in the category column for the specified item.\n    \n    Args:\n    data_frame (pd.DataFrame): A pandas DataFrame containing various categories and items.\n    category_col (str): The column name for the categories.\n    item_col (str): The column name for the items.\n    item_name (str): The name of the item.\n    \n    Returns:\n    float: The value in the category column for the specified item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = data_frame[data_frame[item_col] == item_name]\n    if not item_df.empty:\n        category_value = item_df[category_col].values[0]\n        return category_value\n    else:\n        return None","tool_call":"df = pd.DataFrame({\n    'Bridge': ['Hatem', 'George Washington', 'Fort Madison'],\n    'Car': [5, 8, 1],\n    'Carpool': [5, 2, 1]\n})\nprint(get_value_from_category_and_item(data_frame=df, category_col='Carpool', item_col='Bridge', item_name='Fort Madison'))"}
{"question":"A transportation analyst compared various bridges' tolls. How much is the toll for a carpool on the Fort Madison bridge?","answer":1.0,"table":"Bridge | Car | Carpool\nFort Madison | $1 | $1\nHatem | $5 | $5\nGeorge Washington | $8 | $2\nTacoma Narrows | $3 | $3","level":5,"tool_id":15198,"code":"import pandas as pd\n\ndef get_toll_for_carpool(df, bridge_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a bridge toll table and a bridge name, and returns the toll for a carpool on the specified bridge.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge names and their tolls with columns 'Bridge', 'Car', and 'Carpool'.\n    bridge_name (str): The name of the bridge.\n    Returns:\n    float: The toll for a carpool on the specified bridge.\n    \"\"\"\n    # Filter the DataFrame for the specific bridge\n    bridge_df = df[df['Bridge'] == bridge_name]\n    if not bridge_df.empty:\n        carpool_toll = bridge_df['Carpool'].values[0]\n        return carpool_toll\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['Fort Madison', 'Hatem', 'George Washington', 'Tacoma Narrows'],\n    'Car': [1, 5, 8, 3],\n    'Carpool': [1, 5, 2, 3]\n})\n# Call the tool to solve the problem\ntoll = get_toll_for_carpool(df, 'Fort Madison')\nprint(toll)","tool":"def get_value_from_table_by_row_and_column(data_frame, row_col, value_col, row_name):\n    \"\"\"\n    This function takes in a pandas DataFrame, a row column name, a value column name, and a row name, and returns the value from the specified row and column.\n    \n    Args:\n    data_frame (pd.DataFrame): A pandas DataFrame containing various rows and columns.\n    row_col (str): The column name for the row names.\n    value_col (str): The column name for the values.\n    row_name (str): The name of the row.\n    \n    Returns:\n    float: The value from the specified row and column.\n    \"\"\"\n    # Filter the DataFrame for the specific row\n    row_df = data_frame[data_frame[row_col] == row_name]\n    if not row_df.empty:\n        value = row_df[value_col].values[0]\n        return value\n    else:\n        return None","tool_call":"data_frame = pd.DataFrame({\n    'Bridge': ['Fort Madison', 'Hatem', 'George Washington', 'Tacoma Narrows'],\n    'Car': [1, 5, 8, 3],\n    'Carpool': [1, 5, 2, 3]\n})\nprint(get_value_from_table_by_row_and_column(data_frame, 'Bridge', 'Carpool', 'Fort Madison'))"}
{"question":"Each hamburger place has 2 waiters. How many waiters are in 3 hamburger places?","answer":6.0,"table":"Number of hamburger places | Number of waiters\n1 | 2\n2 | 4\n3 | ?","level":2,"tool_id":8069,"code":"def calculate_waiters(hamburger_places, waiters_per_place):\n    \"\"\"\n    This function takes in the number of hamburger places and the number of waiters per place, and returns the total number of waiters.\n    Args:\n    hamburger_places (int): The number of hamburger places.\n    waiters_per_place (int): The number of waiters per hamburger place.\n    Returns:\n    int: The total number of waiters.\n    \"\"\"\n    return hamburger_places * waiters_per_place","api_call":"# Call the tool to solve the problem\nprint(calculate_waiters(3, 2))","tool":"def calculate_total_workers_from_places_and_workers_per_place(places, workers_per_place):\n    \"\"\"\n    This function takes in the number of places and the number of workers per place, and returns the total number of workers.\n    \n    Args:\n    places (int): The number of places.\n    workers_per_place (int): The number of workers per place.\n    \n    Returns:\n    int: The total number of workers.\n    \"\"\"\n    return places * workers_per_place","tool_call":"print(calculate_total_workers_from_places_and_workers_per_place(3, 2))"}
{"question":"Several people compared how many Web pages they had visited. How many more Web pages did Philip visit than Steven?","answer":544.0,"table":"Person | Number of Web pages\nJavier | 3,778\nHayley | 1,121\nPhilip | 2,752\nMaura | 4,955\nSteven | 2,208","level":3,"tool_id":7290,"code":"import pandas as pd\n\ndef calculate_difference(df, person1, person2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of people and the number of web pages they visited, and returns the difference in the number of web pages visited by two specified people.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing people's names and the number of web pages they visited with columns 'Person' and 'Number of Web pages'.\n    person1 (str): The name of the first person.\n    person2 (str): The name of the second person.\n    Returns:\n    int: The difference in the number of web pages visited by the two people.\n    \"\"\"\n    # Filter the DataFrame for the specific people\n    person1_df = df[df['Person'] == person1]\n    person2_df = df[df['Person'] == person2]\n    \n    # Get the number of web pages visited by each person\n    person1_pages = person1_df['Number of Web pages'].values[0]\n    person2_pages = person2_df['Number of Web pages'].values[0]\n    \n    # Calculate and return the difference\n    return abs(person1_pages - person2_pages)","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Person': ['Javier', 'Hayley', 'Philip', 'Maura', 'Steven'],\n    'Number of Web pages': [3778, 1121, 2752, 4955, 2208]\n})\n\n# Call the tool to solve the problem\ndifference = calculate_difference(df, 'Philip', 'Steven')\nprint(difference)","tool":"def calculate_absolute_difference_between_two_entities(df, entity_col, value_col, entity1, entity2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of entities and their values, and returns the absolute difference in values between two specified entities.\n    \n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing entities and their values.\n    entity_col (str): The column name for the entities.\n    value_col (str): The column name for the values.\n    entity1 (str): The name of the first entity.\n    entity2 (str): The name of the second entity.\n    \n    Returns:\n    int: The absolute difference in values between the two entities.\n    \"\"\"\n    # Filter the DataFrame for the specific entities\n    entity1_df = df[df[entity_col] == entity1]\n    entity2_df = df[df[entity_col] == entity2]\n    \n    # Get the value for each entity\n    entity1_value = entity1_df[value_col].values[0]\n    entity2_value = entity2_df[value_col].values[0]\n    \n    # Calculate and return the absolute difference\n    return abs(entity1_value - entity2_value)","tool_call":"df = pd.DataFrame({\n    'Person': ['Javier', 'Hayley', 'Philip', 'Maura', 'Steven'],\n    'Number of Web pages': [3778, 1121, 2752, 4955, 2208]\n})\n\nprint(calculate_absolute_difference_between_two_entities(df, 'Person', 'Number of Web pages', 'Philip', 'Steven'))"}
{"question":"Each restaurant table has 2 pepper shakers. How many pepper shakers are on 3 restaurant tables?","answer":6.0,"table":"Number of restaurant tables | Number of pepper shakers\n1 | 2\n2 | 4\n3 | ?","level":2,"tool_id":13860,"code":"def calculate_pepper_shakers(num_tables):\n    \"\"\"\n    This function takes in the number of restaurant tables and returns the number of pepper shakers based on the fact that each table has 2 pepper shakers.\n    Args:\n    num_tables (int): The number of restaurant tables.\n    Returns:\n    int: The number of pepper shakers.\n    \"\"\"\n    # Calculate the number of pepper shakers\n    num_pepper_shakers = num_tables * 2\n    return num_pepper_shakers","api_call":"# Call the tool to solve the problem\nprint(calculate_pepper_shakers(3))","tool":"def calculate_total_items_from_groups_and_items_per_group(num_groups, items_per_group):\n    \"\"\"\n    This function takes in the number of groups and the number of items per group, and returns the total number of items.\n    \n    Args:\n    num_groups (int): The number of groups.\n    items_per_group (int): The number of items per group.\n    \n    Returns:\n    int: The total number of items.\n    \"\"\"\n    # Calculate the total number of items\n    total_items = num_groups * items_per_group\n    return total_items","tool_call":"num_tables = 3\npepper_shakers_per_table = 2\nprint(calculate_total_items_from_groups_and_items_per_group(num_tables, pepper_shakers_per_table))"}
{"question":"For an economics project, Jenny determined the cost of ferry rides for bicycles and cars. How much does it cost to take a car on the Southport-Fort Fisher ferry?","answer":5.0,"table":"Ferry | Bicycle | Car\nOcracoke | $3 | $15\nFauntleroy-Vashon | $5 | $15\nSouthport-Fort Fisher | $2 | $5\nSeattle-Bremerton | $8 | $12\nMukilteu-Clinton | $5 | $7","level":5,"tool_id":1973,"code":"import pandas as pd\n\ndef get_ferry_cost(df, ferry_name, vehicle_type):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry cost table, a ferry name, and a vehicle type, and returns the cost of the ferry ride for the specified vehicle type.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ferry names and their costs for different vehicle types.\n    ferry_name (str): The name of the ferry.\n    vehicle_type (str): The type of vehicle (Bicycle or Car).\n    Returns:\n    float: The cost of the ferry ride for the specified vehicle type.\n    \"\"\"\n    # Filter the DataFrame for the specific ferry\n    ferry_df = df[df['Ferry'] == ferry_name]\n    if not ferry_df.empty:\n        # Get the cost for the specified vehicle type\n        cost = ferry_df[vehicle_type].values[0]\n        return cost\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Ocracoke', 'Fauntleroy-Vashon', 'Southport-Fort Fisher', 'Seattle-Bremerton', 'Mukilteo-Clinton'],\n    'Bicycle': [3, 5, 2, 8, 5],\n    'Car': [15, 15, 5, 12, 7]\n})\n# Call the tool to solve the problem\ncost = get_ferry_cost(df, 'Southport-Fort Fisher', 'Car')\nprint(cost)","tool":"def get_service_cost_for_item(df, service_col, item_col, service_name, item_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of service costs for various items, a service name, and an item name, and returns the cost of the service for the specified item.\n    \n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing service names and their costs for different items.\n    service_col (str): The column name for the service names.\n    item_col (str): The column name for the item names.\n    service_name (str): The name of the service.\n    item_name (str): The name of the item.\n    \n    Returns:\n    float: The cost of the service for the specified item.\n    \"\"\"\n    # Filter the DataFrame for the specific service\n    service_df = df[df[service_col] == service_name]\n    if not service_df.empty:\n        # Get the cost for the specified item\n        cost = service_df[item_name].values[0]\n        return cost\n    else:\n        return None","tool_call":"df = pd.DataFrame({\n    'Ferry': ['Ocracoke', 'Fauntleroy-Vashon', 'Southport-Fort Fisher', 'Seattle-Bremerton', 'Mukilteo-Clinton'],\n    'Bicycle': [3, 5, 2, 8, 5],\n    'Car': [15, 15, 5, 12, 7]\n})\nprint(get_service_cost_for_item(df, 'Ferry', 'Car', 'Southport-Fort Fisher', 'Car'))"}
{"question":"A transportation analyst compared various bridges' tolls. On the George Washington bridge, how much more is the toll for a car than for a carpool?","answer":6.0,"table":"Bridge | Car | Carpool\nFort Madison | $1 | $1\nTacoma Narrows | $3 | $3\nGeorge Washington | $8 | $2\nHatem | $5 | $5","level":5,"tool_id":4436,"code":"import pandas as pd\n\ndef calculate_toll_difference(df, bridge_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a bridge toll table and a bridge name, and returns the difference in toll between a car and a carpool for the specified bridge.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge names and their tolls for cars and carpools with columns 'Bridge', 'Car', and 'Carpool'.\n    bridge_name (str): The name of the bridge to calculate the toll difference for.\n    Returns:\n    float: The difference in toll between a car and a carpool for the specified bridge.\n    \"\"\"\n    # Filter the DataFrame for the specific bridge\n    bridge_df = df[df['Bridge'] == bridge_name]\n    if not bridge_df.empty:\n        car_toll = bridge_df['Car'].values[0]\n        carpool_toll = bridge_df['Carpool'].values[0]\n        toll_difference = car_toll - carpool_toll\n        return toll_difference\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['Fort Madison', 'Tacoma Narrows', 'George Washington', 'Hatem'],\n    'Car': [1, 3, 8, 5],\n    'Carpool': [1, 3, 2, 5]\n})\n# Call the tool to solve the problem\ntoll_difference = calculate_toll_difference(df, 'George Washington')\nprint(toll_difference)","tool":"def calculate_difference_between_two_columns_for_specific_row(table_df, row_name_col, row_name, column1, column2):\n    \"\"\"\n    This function takes in a pandas DataFrame, a row name, and two column names, and returns the difference between the values of the two columns for the specified row.\n    \n    Args:\n    table_df (pd.DataFrame): A pandas DataFrame containing various rows and columns.\n    row_name_col (str): The column name for the row names.\n    row_name (str): The name of the row to calculate the difference for.\n    column1 (str): The name of the first column.\n    column2 (str): The name of the second column.\n    \n    Returns:\n    float: The difference between the values of column1 and column2 for the specified row.\n    \"\"\"\n    # Filter the DataFrame for the specific row\n    row_df = table_df[table_df[row_name_col] == row_name]\n    if not row_df.empty:\n        column1_value = row_df[column1].values[0]\n        column2_value = row_df[column2].values[0]\n        value_difference = column1_value - column2_value\n        return value_difference\n    else:\n        return None","tool_call":"df = pd.DataFrame({\n    'Bridge': ['Fort Madison', 'Tacoma Narrows', 'George Washington', 'Hatem'],\n    'Car': [1, 3, 8, 5],\n    'Carpool': [1, 3, 2, 5]\n})\nprint(calculate_difference_between_two_columns_for_specific_row(table_df=df, row_name_col='Bridge', row_name='George Washington', column1='Car', column2='Carpool'))"}
{"question":"A transportation analyst compared various bridges' tolls. On the George Washington bridge, how much more is the toll for a car than for a carpool?","answer":6.0,"table":"Bridge | Car | Carpool\nGeorge Washington | $8 | $2\nHatem | $5 | $5\nFort Madison | $1 | $1\nTacoma Narrows | $3 | $3","level":5,"tool_id":6847,"code":"import pandas as pd\n\ndef calculate_toll_difference(df, bridge_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a bridge toll table and a bridge name, and returns the difference in toll between a car and a carpool for the specified bridge.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge names and their tolls for cars and carpools with columns 'Bridge', 'Car', and 'Carpool'.\n    bridge_name (str): The name of the bridge to calculate the toll difference for.\n    Returns:\n    float: The difference in toll between a car and a carpool for the specified bridge.\n    \"\"\"\n    # Filter the DataFrame for the specific bridge\n    bridge_df = df[df['Bridge'] == bridge_name]\n    if not bridge_df.empty:\n        car_toll = bridge_df['Car'].values[0]\n        carpool_toll = bridge_df['Carpool'].values[0]\n        toll_difference = car_toll - carpool_toll\n        return toll_difference\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['George Washington', 'Hatem', 'Fort Madison', 'Tacoma Narrows'],\n    'Car': [8, 5, 1, 3],\n    'Carpool': [2, 5, 1, 3]\n})\n# Call the tool to solve the problem\ntoll_difference = calculate_toll_difference(df, 'George Washington')\nprint(toll_difference)","tool":"def calculate_difference_between_columns_for_item(data_frame, item_col, value_col1, value_col2, item_name):\n    \"\"\"\n    This function takes in a pandas DataFrame, two column names, and an item name, and returns the difference between the values in the two columns for the specified item.\n    \n    Args:\n    data_frame (pd.DataFrame): A pandas DataFrame containing items and their values in two columns.\n    item_col (str): The column name for the item names.\n    value_col1 (str): The column name for the first set of values.\n    value_col2 (str): The column name for the second set of values.\n    item_name (str): The name of the item to calculate the difference for.\n    \n    Returns:\n    float: The difference between the values in the two columns for the specified item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_df = data_frame[data_frame[item_col] == item_name]\n    if not item_df.empty:\n        value1 = item_df[value_col1].values[0]\n        value2 = item_df[value_col2].values[0]\n        difference = value1 - value2\n        return difference\n    else:\n        return None","tool_call":"data = {\n    'Bridge': ['George Washington', 'Hatem', 'Fort Madison', 'Tacoma Narrows'],\n    'Car': [8, 5, 1, 3],\n    'Carpool': [2, 5, 1, 3]\n}\n\ndf = pd.DataFrame(data)\nprint(calculate_difference_between_columns_for_item(data_frame=df, item_col=\"Bridge\", value_col1=\"Car\", value_col2=\"Carpool\", item_name=\"George Washington\"))"}
{"question":"For an economics project, Jason determined the cost of ferry rides for bicycles and cars. On the Seattle-Bremerton ferry, how much higher is the fare for a car than for a bicycle?","answer":4.0,"table":"Ferry | Car | Bicycle\nMukilteu-Clinton | $7 | $5\nSeattle-Bremerton | $12 | $8\nOcracoke | $15 | $3","level":4,"tool_id":13773,"code":"import pandas as pd\n\ndef calculate_fare_difference(df, ferry_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry fare table and a ferry name, and returns the fare difference between a car and a bicycle for the specified ferry.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ferry names and their fares for cars and bicycles with columns 'Ferry', 'Car', and 'Bicycle'.\n    ferry_name (str): The name of the ferry for which the fare difference is to be calculated.\n    Returns:\n    float: The fare difference between a car and a bicycle for the specified ferry.\n    \"\"\"\n    # Filter the DataFrame for the specific ferry\n    ferry_df = df[df['Ferry'] == ferry_name]\n    \n    if not ferry_df.empty:\n        car_fare = ferry_df['Car'].values[0]\n        bicycle_fare = ferry_df['Bicycle'].values[0]\n        fare_difference = car_fare - bicycle_fare\n        return fare_difference\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Mukilteu-Clinton', 'Seattle-Bremerton', 'Ocracoke'],\n    'Car': [7, 12, 15],\n    'Bicycle': [5, 8, 3]\n})\n\n# Call the tool to solve the problem\nfare_difference = calculate_fare_difference(df, 'Seattle-Bremerton')\nprint(fare_difference)","tool":"def calculate_fare_difference_for_vehicles(ferry_fares_df, ferry_col, vehicle1_col, vehicle2_col, ferry_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of ferry fares and a ferry name, and returns the fare difference between two types of vehicles for the specified ferry.\n    \n    Args:\n    ferry_fares_df (pd.DataFrame): A pandas DataFrame containing ferry names and their fares for two types of vehicles.\n    ferry_col (str): The column name for the ferry names.\n    vehicle1_col (str): The column name for the first type of vehicle.\n    vehicle2_col (str): The column name for the second type of vehicle.\n    ferry_name (str): The name of the ferry for which the fare difference is to be calculated.\n    \n    Returns:\n    float: The fare difference between the two types of vehicles for the specified ferry.\n    \"\"\"\n    # Filter the DataFrame for the specific ferry\n    ferry_df = ferry_fares_df[ferry_fares_df[ferry_col] == ferry_name]\n    \n    if not ferry_df.empty:\n        vehicle1_fare = ferry_df[vehicle1_col].values[0]\n        vehicle2_fare = ferry_df[vehicle2_col].values[0]\n        fare_difference = vehicle1_fare - vehicle2_fare\n        return fare_difference\n    else:\n        return None","tool_call":"ferry_fares_data = {\n    'Ferry': ['Mukilteu-Clinton', 'Seattle-Bremerton', 'Ocracoke'],\n    'Car': [7, 12, 15],\n    'Bicycle': [5, 8, 3]\n}\n\nferry_fares_df = pd.DataFrame(ferry_fares_data)\n\nprint(calculate_fare_difference_for_vehicles(ferry_fares_df, \"Ferry\", \"Car\", \"Bicycle\", 'Seattle-Bremerton'))"}
{"question":"Jeffrey tracked the attendance at the school play. How many more people attended the play on Friday than on Sunday?","answer":7002.0,"table":"Day | Number of tickets\nWednesday | 3,141\nThursday | 5,694\nFriday | 8,862\nSaturday | 7,848\nSunday | 1,860","level":3,"tool_id":12308,"code":"import pandas as pd\n\ndef calculate_difference_in_attendance(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of attendance at a school play, and two days, and returns the difference in attendance between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing days and the number of tickets sold with columns 'Day' and 'Number of tickets'.\n    day1 (str): The first day to compare.\n    day2 (str): The second day to compare.\n    Returns:\n    int: The difference in attendance between the two days.\n    \"\"\"\n    # Filter the DataFrame for the specific days\n    day1_df = df[df['Day'] == day1]\n    day2_df = df[df['Day'] == day2]\n    \n    # Check if the days are in the DataFrame\n    if not day1_df.empty and not day2_df.empty:\n        # Calculate the difference in attendance\n        difference = day1_df['Number of tickets'].values[0] - day2_df['Number of tickets'].values[0]\n        return difference\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n    'Number of tickets': [3141, 5694, 8862, 7848, 1860]\n})\n# Call the tool to solve the problem\ndifference = calculate_difference_in_attendance(df, 'Friday', 'Sunday')\nprint(difference)","tool":"def calculate_difference_between_two_categories(df, category_col, value_col, category1, category2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of categories and their values, and two categories, and returns the difference in values between the two categories.\n    \n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing categories and their values.\n    category_col (str): The column name for the categories.\n    value_col (str): The column name for the values.\n    category1 (str): The first category to compare.\n    category2 (str): The second category to compare.\n    \n    Returns:\n    int: The difference in values between the two categories.\n    \"\"\"\n    # Filter the DataFrame for the specific categories\n    category1_df = df[df[category_col] == category1]\n    category2_df = df[df[category_col] == category2]\n    \n    # Check if the categories are in the DataFrame\n    if not category1_df.empty and not category2_df.empty:\n        # Calculate the difference in values\n        difference = category1_df[value_col].values[0] - category2_df[value_col].values[0]\n        return difference\n    else:\n        return None","tool_call":"df = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n    'Number of tickets': [3141, 5694, 8862, 7848, 1860]\n})\nprint(calculate_difference_between_two_categories(df, 'Day', 'Number of tickets', 'Friday', 'Sunday'))"}
{"question":"For an economics project, Savannah determined the cost of ferry rides for bicycles and cars. How much does it cost to take a car on the Fauntleroy-Vashon ferry?","answer":15.0,"table":"Ferry | Car | Bicycle\nSeattle-Bremerton | $12 | $8\nFauntleroy-Vashon | $15 | $5\nOcracoke | $15 | $3\nSouthport-Fort Fisher | $5 | $2\nMukilteu-Clinton | $7 | $5","level":5,"tool_id":1199,"code":"import pandas as pd\n\ndef get_ferry_cost(df, ferry_name, vehicle_type):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry cost table, a ferry name, and a vehicle type, and returns the cost of the ferry ride for the specified vehicle type.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ferry names and their costs for different vehicle types with columns 'Ferry', 'Car', and 'Bicycle'.\n    ferry_name (str): The name of the ferry.\n    vehicle_type (str): The type of the vehicle ('Car' or 'Bicycle').\n    Returns:\n    float: The cost of the ferry ride for the specified vehicle type.\n    \"\"\"\n    # Filter the DataFrame for the specific ferry\n    ferry_df = df[df['Ferry'] == ferry_name]\n    if not ferry_df.empty:\n        ferry_cost = ferry_df[vehicle_type].values[0]\n        return ferry_cost\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Seattle-Bremerton', 'Fauntleroy-Vashon', 'Ocracoke', 'Southport-Fort Fisher', 'Mukilteo-Clinton'],\n    'Car': [12, 15, 15, 5, 7],\n    'Bicycle': [8, 5, 3, 2, 5]\n})\n\n# Call the tool to solve the problem\nferry_cost = get_ferry_cost(df, 'Fauntleroy-Vashon', 'Car')\nprint(ferry_cost)","tool":"def get_service_cost_for_item(df, service_col, item_col, service_name, item_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of service costs for different items, a service name, and an item name, and returns the cost of the service for the specified item.\n    \n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing service names and their costs for different items.\n    service_col (str): The column name for the service names.\n    item_col (str): The column name for the item names.\n    service_name (str): The name of the service.\n    item_name (str): The name of the item.\n    \n    Returns:\n    float: The cost of the service for the specified item.\n    \"\"\"\n    # Filter the DataFrame for the specific service\n    service_df = df[df[service_col] == service_name]\n    if not service_df.empty:\n        service_cost = service_df[item_name].values[0]\n        return service_cost\n    else:\n        return None","tool_call":"df = pd.DataFrame({\n    'Ferry': ['Seattle-Bremerton', 'Fauntleroy-Vashon', 'Ocracoke', 'Southport-Fort Fisher', 'Mukilteo-Clinton'],\n    'Car': [12, 15, 15, 5, 7],\n    'Bicycle': [8, 5, 3, 2, 5]\n})\n\nprint(get_service_cost_for_item(df, 'Ferry', 'Car', 'Fauntleroy-Vashon', 'Car'))"}
{"question":"The owner of a plant nursery wrote down the number of roses on each bush. How many bushes have fewer than 96 roses?","answer":17.0,"table":"Stem | Leaf \n4 | 1, 4, 8, 8\n5 | 0, 1, 2\n6 | 1, 2, 4, 8\n7 | 0, 1, 2, 9\n8 | 4\n9 | 0","level":6,"tool_id":1260,"code":"import pandas as pd\ndef count_bushes_with_fewer_than_96_roses(df):\n    \"\"\"\n    This function takes in a pandas dataframe of roses per bush, and returns the number of bushes that have fewer than 96 roses.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of roses per bush.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of bushes that have fewer than 96 roses.\n    \"\"\"\n    # prepare a list to calculate roses in each bush\n    roses = []\n    # calculate the total number of roses in each bush\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            roses.append(stem * 10 + leaf[j])\n    # filter the bushes where the total number of roses is less than 96\n    filtered = [rose for rose in roses if rose < 96]\n    # count the number of rows\n    num_bushes = len(filtered)\n    return num_bushes","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7, 8, 9],\n    'Leaf': [[1, 4, 8, 8], [0, 1, 2], [1, 2, 4, 8], [0, 1, 2, 9], [4], [0]]\n})\n# Call the tool to solve the problem\nprint(count_bushes_with_fewer_than_96_roses(df))","tool":"def count_groups_below_threshold_in_stem_leaf(data_frame, stem_col, leaf_col, item_threshold):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a stem-and-leaf plot of groups and a threshold value, and returns the number of groups that have values less than the threshold.\n    \n    Args:\n    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.\n    stem_col (str): The column name for the stem values.\n    leaf_col (str): The column name for the leaf values.\n    item_threshold (int): The threshold value for filtering items.\n    \n    Returns:\n    int: The number of items with values less than the threshold.\n    \"\"\"\n    # Initialize the list to calculate items in each group\n    items = []\n    \n    # Calculate the total value of items in each group\n    for i in range(len(data_frame)):\n        stem = data_frame[stem_col][i]\n        leaf = data_frame[leaf_col][i]\n        for j in range(len(leaf)):\n            items.append(stem * 10 + leaf[j])\n    \n    # Filter the items where the total value is less than the threshold\n    filtered = [item for item in items if item < item_threshold]\n    \n    # Count the number of items\n    num_items = len(filtered)\n    \n    return num_items","tool_call":"data = {\n    \"Stem\": [4, 5, 6, 7, 8, 9],\n    \"Leaf\": [[1, 4, 8, 8], [0, 1, 2], [1, 2, 4, 8], [0, 1, 2, 9], [4], [0]]\n}\n\ndf = pd.DataFrame(data)\nprint(count_groups_below_threshold_in_stem_leaf(data_frame=df, stem_col=\"Stem\", leaf_col=\"Leaf\", item_threshold=96))"}
{"question":"For an economics project, Anita determined the cost of ferry rides for bicycles and cars. How much does it cost to take a car on the Ocracoke ferry?","answer":15.0,"table":"Ferry | Car | Bicycle\nOcracoke | $15 | $3\nSouthport-Fort Fisher | $5 | $2\nFauntleroy-Vashon | $15 | $5\nSeattle-Bremerton | $12 | $8\nMukilteu-Clinton | $7 | $5","level":4,"tool_id":30,"code":"import pandas as pd\n\ndef get_ferry_cost(ferry_df, ferry_name, vehicle_type):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry table, a ferry name, and a vehicle type, and returns the cost of the ferry ride for the specified vehicle type.\n    Args:\n    ferry_df (pd.DataFrame): A pandas DataFrame containing ferry names and their costs for cars and bicycles with columns 'Ferry', 'Car', and 'Bicycle'.\n    ferry_name (str): The name of the ferry.\n    vehicle_type (str): The type of vehicle ('Car' or 'Bicycle').\n    Returns:\n    float: The cost of the ferry ride for the specified vehicle type.\n    \"\"\"\n    # Filter the DataFrame for the specific ferry\n    ferry_row = ferry_df[ferry_df['Ferry'] == ferry_name]\n    \n    if not ferry_row.empty:\n        cost = ferry_row[vehicle_type].values[0]\n        return cost\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\nferry_df = pd.DataFrame({\n    'Ferry': ['Ocracoke', 'Southport-Fort Fisher', 'Fauntleroy-Vashon', 'Seattle-Bremerton', 'Mukilteo-Clinton'],\n    'Car': [15, 5, 15, 12, 7],\n    'Bicycle': [3, 2, 5, 8, 5]\n})\n\n# Call the tool to solve the problem\ncost = get_ferry_cost(ferry_df, 'Ocracoke', 'Car')\nprint(cost)","tool":"def get_cost_for_item_and_service(costs_df, item_col, service_col, item_name, service_type):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of item costs, an item name, and a service type, and returns the cost of the service for the specified item.\n    \n    Args:\n    costs_df (pd.DataFrame): A pandas DataFrame containing item names and their costs for various services.\n    item_col (str): The column name for the item names.\n    service_col (str): The column name for the service types.\n    item_name (str): The name of the item.\n    service_type (str): The type of service.\n    \n    Returns:\n    float: The cost of the service for the specified item.\n    \"\"\"\n    # Filter the DataFrame for the specific item\n    item_row = costs_df[costs_df[item_col] == item_name]\n    \n    if not item_row.empty:\n        cost = item_row[service_type].values[0]\n        return cost\n    else:\n        return None","tool_call":"costs_data = {\n    'Ferry': ['Ocracoke', 'Southport-Fort Fisher', 'Fauntleroy-Vashon', 'Seattle-Bremerton', 'Mukilteo-Clinton'],\n    'Car': [15, 5, 15, 12, 7],\n    'Bicycle': [3, 2, 5, 8, 5]\n}\n\ncosts_df = pd.DataFrame(costs_data)\n\ncost = get_cost_for_item_and_service(costs_df, 'Ferry', ['Car', 'Bicycle'], 'Ocracoke', 'Car')\nprint(cost)"}
{"question":"An agricultural agency is researching how much cheese people have been eating in different parts of the world. In 2006, how much more cheese did Germany consume per capita than Argentina?","answer":9.0,"table":"Country | 1996 | 2006\nAustria | 10 | 17\nGreat Britain | 9 | 10\nAustralia | 10 | 10\nArgentina | 11 | 11\nGermany | 12 | 20","level":4,"tool_id":10249,"code":"import pandas as pd\n\ndef calculate_cheese_difference(df, country1, country2, year):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of cheese consumption per capita in different countries and years, and returns the difference in cheese consumption between two countries in a specific year.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing cheese consumption per capita in different countries and years. The DataFrame should have 'Country' as one of the columns and years as the other columns.\n    country1 (str): The name of the first country.\n    country2 (str): The name of the second country.\n    year (str): The year to compare the cheese consumption.\n    Returns:\n    float: The difference in cheese consumption per capita between the two countries in the specified year.\n    \"\"\"\n    # Filter the DataFrame for the specific countries and year\n    country1_df = df[df['Country'] == country1]\n    country2_df = df[df['Country'] == country2]\n    \n    # Get the cheese consumption for the two countries in the specified year\n    country1_cheese = country1_df[year].values[0]\n    country2_cheese = country2_df[year].values[0]\n    \n    # Calculate the difference in cheese consumption\n    cheese_difference = country1_cheese - country2_cheese\n    \n    return cheese_difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Country': ['Austria', 'Great Britain', 'Australia', 'Argentina', 'Germany'],\n    '1996': [10, 9, 10, 11, 12],\n    '2006': [17, 10, 10, 11, 20]\n})\n\n# Call the tool to solve the problem\ncheese_difference = calculate_cheese_difference(df, 'Germany', 'Argentina', '2006')\nprint(cheese_difference)","tool":"def calculate_attribute_difference_between_entities_in_year(df, entity_col, entity1, entity2, attribute_year):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of attributes for different entities in different years, and returns the difference in the attribute between two entities in a specific year.\n    \n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing attributes for different entities in different years. The DataFrame should have the entity names as one of the columns and years as the other columns.\n    entity_col (str): The column name for the entity names.\n    entity1 (str): The name of the first entity.\n    entity2 (str): The name of the second entity.\n    attribute_year (str): The year to compare the attribute.\n    \n    Returns:\n    float: The difference in the attribute between the two entities in the specified year.\n    \"\"\"\n    # Filter the DataFrame for the specific entities and year\n    entity1_df = df[df[entity_col] == entity1]\n    entity2_df = df[df[entity_col] == entity2]\n    \n    # Get the attribute for the two entities in the specified year\n    entity1_attribute = entity1_df[attribute_year].values[0]\n    entity2_attribute = entity2_df[attribute_year].values[0]\n    \n    # Calculate the difference in the attribute\n    attribute_difference = entity1_attribute - entity2_attribute\n    \n    return attribute_difference","tool_call":"df = pd.DataFrame({\n    'Country': ['Austria', 'Great Britain', 'Australia', 'Argentina', 'Germany'],\n    '1996': [10, 9, 10, 11, 12],\n    '2006': [17, 10, 10, 11, 20]\n})\n\nprint(calculate_attribute_difference_between_entities_in_year(df, 'Country', 'Germany', 'Argentina', '2006'))"}
{"question":"An agricultural agency is researching how much cheese people have been eating in different parts of the world. In 2006, how much more cheese did Germany consume per capita than Argentina?","answer":9.0,"table":"Country | 1996 | 2006\nGreat Britain | 9 | 10\nArgentina | 11 | 11\nGermany | 12 | 20","level":4,"tool_id":4942,"code":"import pandas as pd\n\ndef cheese_consumption_difference(df, country1, country2, year):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of cheese consumption per capita, and returns the difference in cheese consumption between two countries in a specific year.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing cheese consumption per capita data with columns 'Country', '1996', '2006'.\n    country1 (str): The name of the first country.\n    country2 (str): The name of the second country.\n    year (str): The year to compare cheese consumption.\n    Returns:\n    float: The difference in cheese consumption per capita between the two countries in the specified year.\n    \"\"\"\n    # Filter the DataFrame for the specific countries\n    country1_df = df[df['Country'] == country1]\n    country2_df = df[df['Country'] == country2]\n    \n    # Get the cheese consumption per capita for each country in the specified year\n    country1_cheese = country1_df[year].values[0]\n    country2_cheese = country2_df[year].values[0]\n    \n    # Calculate the difference in cheese consumption per capita\n    difference = country1_cheese - country2_cheese\n    \n    return difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Country': ['Great Britain', 'Argentina', 'Germany'],\n    '1996': [9, 11, 12],\n    '2006': [10, 11, 20]\n})\n\n# Call the tool to solve the problem\ndifference = cheese_consumption_difference(df, 'Germany', 'Argentina', '2006')\nprint(difference)","tool":"def calculate_difference_in_attribute_between_entities(df, entity_col, entity1, entity2, attribute_year_col):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of entity attributes, and returns the difference in the attribute between two entities in a specific year.\n    \n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing entity attributes with columns specified by entity_col and attribute_year_col.\n    entity_col (str): The column name for the entities.\n    entity1 (str): The name of the first entity.\n    entity2 (str): The name of the second entity.\n    attribute_year_col (str): The column name for the attribute values in the specified year.\n    \n    Returns:\n    float: The difference in the attribute between the two entities in the specified year.\n    \"\"\"\n    # Filter the DataFrame for the specific entities\n    entity1_df = df[df[entity_col] == entity1]\n    entity2_df = df[df[entity_col] == entity2]\n    \n    # Get the attribute value for each entity in the specified year\n    entity1_attribute = entity1_df[attribute_year_col].values[0]\n    entity2_attribute = entity2_df[attribute_year_col].values[0]\n    \n    # Calculate the difference in the attribute\n    difference = entity1_attribute - entity2_attribute\n    \n    return difference","tool_call":"df = pd.DataFrame({\n    'Country': ['Great Britain', 'Argentina', 'Germany'],\n    '1996': [9, 11, 12],\n    '2006': [10, 11, 20]\n})\n\nprint(calculate_difference_in_attribute_between_entities(df, 'Country', 'Germany', 'Argentina', '2006'))"}
{"question":"The owner of a plant nursery wrote down the number of roses on each bush. How many bushes have exactly 43 roses?","answer":0.0,"table":"Stem | Leaf \n4 | 8, 9, 9\n5 | 9\n6 | 7, 8\n7 | 3, 9, 9","level":5,"tool_id":3509,"code":"import pandas as pd\ndef count_bushes_with_43_roses(df):\n    \"\"\"\n    This function takes in a pandas dataframe of roses per bush, and returns the number of bushes that have exactly 43 roses.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of roses per bush.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of bushes that have exactly 43 roses.\n    \"\"\"\n    # prepare a list to calculate roses in each bush\n    roses = []\n    # calculate the total number of roses in each bush\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            roses.append(stem * 10 + leaf[j])\n    # filter the bushes where the total number of roses is exactly 43\n    filtered = [rose for rose in roses if rose == 43]\n    # count the number of rows\n    num_bushes = len(filtered)\n    return num_bushes","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7],\n    'Leaf': [[8, 9, 9], [9], [7, 8], [3, 9, 9]]\n})\n# Call the tool to solve the problem\nprint(count_bushes_with_43_roses(df))","tool":"def count_groups_with_exact_number_in_stem_leaf(data_frame, stem_col, leaf_col, item_number):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a stem-and-leaf plot of groups and a specific item number, and returns the number of groups that have exactly the given number of items.\n    \n    Args:\n    data_frame (pd.DataFrame): A pandas DataFrame containing the stem-and-leaf plot of items with columns specified by stem_col and leaf_col.\n    stem_col (str): The column name for the stem values.\n    leaf_col (str): The column name for the leaf values.\n    item_number (int): The specific number of items for filtering groups.\n    \n    Returns:\n    int: The number of groups with exactly the given number of items.\n    \"\"\"\n    # Initialize the list to calculate items in each group\n    items = []\n    \n    # Calculate the total number of items in each group\n    for i in range(len(data_frame)):\n        stem = data_frame[stem_col][i]\n        leaf = data_frame[leaf_col][i]\n        for j in range(len(leaf)):\n            items.append(stem * 10 + leaf[j])\n    \n    # Filter the groups where the total number of items is exactly the given number\n    filtered = [item for item in items if item == item_number]\n    \n    # Count the number of groups\n    num_groups = len(filtered)\n    \n    return num_groups","tool_call":"data = {\n    \"Stem\": [4, 5, 6, 7],\n    \"Leaf\": [[8, 9, 9], [9], [7, 8], [3, 9, 9]]\n}\n\ndf = pd.DataFrame(data)\nprint(count_groups_with_exact_number_in_stem_leaf(data_frame=df, stem_col=\"Stem\", leaf_col=\"Leaf\", item_number=43))"}
{"question":"A biologist recorded the number of birds at lakes in Newport. How many more geese live in Moon Lake than Spring Lake?","answer":2.0,"table":"Lake | Swans | Geese\nBlue Lake | 5 | 3\nSpring Lake | 2 | 17\nMoon Lake | 8 | 19\nLong Lake | 10 | 16","level":5,"tool_id":16865,"code":"import pandas as pd\n\ndef calculate_difference(df, column, location1, location2):\n    \"\"\"\n    This function takes in a pandas DataFrame, a column name, and two location names, and returns the difference in the number of birds between the two locations.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of birds at different locations.\n    column (str): The column name of the bird type.\n    location1 (str): The name of the first location.\n    location2 (str): The name of the second location.\n    Returns:\n    int: The difference in the number of birds between the two locations.\n    \"\"\"\n    # Filter the DataFrame for the specific locations\n    location1_df = df[df['Lake'] == location1]\n    location2_df = df[df['Lake'] == location2]\n    \n    # Get the number of birds at each location\n    location1_birds = location1_df[column].values[0]\n    location2_birds = location2_df[column].values[0]\n    \n    # Calculate the difference in the number of birds\n    difference = location1_birds - location2_birds\n    \n    return difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Lake': ['Blue Lake', 'Spring Lake', 'Moon Lake', 'Long Lake'],\n    'Swans': [5, 2, 8, 10],\n    'Geese': [3, 17, 19, 16]\n})\n# Call the tool to solve the problem\ndifference = calculate_difference(df, 'Geese', 'Moon Lake', 'Spring Lake')\nprint(difference)","tool":"def calculate_difference_in_category_between_two_locations(df, location_col, category_col, location1, location2):\n    \"\"\"\n    This function takes in a pandas DataFrame, a location column name, a category column name, and two location names, and returns the difference in the count of the category between the two locations.\n    \n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing counts of categories at different locations.\n    location_col (str): The column name for the locations.\n    category_col (str): The column name for the category.\n    location1 (str): The name of the first location.\n    location2 (str): The name of the second location.\n    \n    Returns:\n    int: The difference in the count of the category between the two locations.\n    \"\"\"\n    # Filter the DataFrame for the specific locations\n    location1_df = df[df[location_col] == location1]\n    location2_df = df[df[location_col] == location2]\n    \n    # Get the count of the category at each location\n    location1_count = location1_df[category_col].values[0]\n    location2_count = location2_df[category_col].values[0]\n    \n    # Calculate the difference in the count of the category\n    difference = location1_count - location2_count\n    \n    return difference","tool_call":"df = pd.DataFrame({\n    'Lake': ['Blue Lake', 'Spring Lake', 'Moon Lake', 'Long Lake'],\n    'Swans': [5, 2, 8, 10],\n    'Geese': [3, 17, 19, 16]\n})\nprint(calculate_difference_in_category_between_two_locations(df, 'Lake', 'Geese', 'Moon Lake', 'Spring Lake'))"}
{"question":"Owen volunteered to bring hot dog toppings to the neighborhood barbecue. He asked his neighbors for the toppings they like and recorded their answers in a frequency chart. If 1\/5 of the people who like mustard prefer spicy mustard, how many people prefer spicy mustard?","answer":3.0,"table":"Topping | Frequency\nketchup | 3\nmustard | 15\nchili | 7","level":5,"tool_id":6672,"code":"import pandas as pd\n\ndef calculate_spicy_mustard_lovers(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a frequency chart of hot dog toppings and calculates the number of people who prefer spicy mustard.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing hot dog toppings and their frequencies with columns 'Topping' and 'Frequency'.\n    Returns:\n    int: The number of people who prefer spicy mustard.\n    \"\"\"\n    # Filter the DataFrame for mustard\n    mustard_df = df[df['Topping'] == 'mustard']\n    \n    # If mustard is in the DataFrame, calculate the number of people who prefer spicy mustard\n    if not mustard_df.empty:\n        mustard_lovers = mustard_df['Frequency'].values[0]\n        spicy_mustard_lovers = mustard_lovers \/ 5\n        return spicy_mustard_lovers\n    \n    # If mustard is not in the DataFrame, return 0\n    return 0","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Topping': ['ketchup', 'mustard', 'chili'],\n    'Frequency': [3, 15, 7]\n})\n# Call the tool to solve the problem\nspicy_mustard_lovers = calculate_spicy_mustard_lovers(df)\nprint(spicy_mustard_lovers)","tool":"def calculate_variant_preference(data_frame, item_col, frequency_col, item_name, variant_ratio):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a frequency chart of items, an item name, and a variant ratio, and calculates the number of people who prefer a variant of the item based on the given ratio.\n    \n    Args:\n    data_frame (pd.DataFrame): A pandas DataFrame containing item names and their frequencies.\n    item_col (str): The column name for the item names.\n    frequency_col (str): The column name for the item frequencies.\n    item_name (str): The name of the item to filter the DataFrame.\n    variant_ratio (float): The ratio of people who prefer the variant of the item.\n    \n    Returns:\n    float: The number of people who prefer the variant of the item.\n    \"\"\"\n    # Filter the DataFrame for the specific item name\n    item_df = data_frame[data_frame[item_col] == item_name]\n    \n    # If the item is in the DataFrame, calculate the number of people who prefer the variant\n    if not item_df.empty:\n        item_frequency = item_df[frequency_col].values[0]\n        variant_frequency = item_frequency * variant_ratio\n        return variant_frequency\n    \n    # If the item is not in the DataFrame, return 0\n    return 0","tool_call":"data = {\n    'Topping': ['ketchup', 'mustard', 'chili'],\n    'Frequency': [3, 15, 7]\n}\n\ndf = pd.DataFrame(data)\nprint(calculate_variant_preference(data_frame=df, item_col=\"Topping\", frequency_col=\"Frequency\", item_name=\"mustard\", variant_ratio=1\/5))"}
{"question":"Ellis Furniture Exports is shipping pieces of furniture made out of different types of wood. How many more pieces of maple furniture are there than pieces of oak furniture?","answer":14.0,"table":"Type of Wood | Beds | Bookcases\nMaple | 14 | 19\nOak | 15 | 4\nWalnut | 7 | 4\nPine | 4 | 5","level":4,"tool_id":4380,"code":"import pandas as pd\n\ndef calculate_difference(df, wood_type1, wood_type2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of furniture made out of different types of wood, and two types of wood. It returns the difference in the total number of pieces of furniture made from the two types of wood.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing types of wood and the number of pieces of furniture made from each type with columns 'Type of Wood', 'Beds', and 'Bookcases'.\n    wood_type1 (str): The first type of wood.\n    wood_type2 (str): The second type of wood.\n    Returns:\n    int: The difference in the total number of pieces of furniture made from the two types of wood.\n    \"\"\"\n    # Filter the DataFrame for the specific types of wood\n    wood_type1_df = df[df['Type of Wood'] == wood_type1]\n    wood_type2_df = df[df['Type of Wood'] == wood_type2]\n    \n    # Calculate the total number of pieces of furniture made from each type of wood\n    wood_type1_total = wood_type1_df['Beds'].values[0] + wood_type1_df['Bookcases'].values[0]\n    wood_type2_total = wood_type2_df['Beds'].values[0] + wood_type2_df['Bookcases'].values[0]\n    \n    # Calculate the difference in the total number of pieces of furniture made from the two types of wood\n    difference = wood_type1_total - wood_type2_total\n    \n    return difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Type of Wood': ['Maple', 'Oak', 'Walnut', 'Pine'],\n    'Beds': [14, 15, 7, 4],\n    'Bookcases': [19, 4, 4, 5]\n})\n\n# Call the tool to solve the problem\ndifference = calculate_difference(df, 'Maple', 'Oak')\nprint(difference)","tool":"def calculate_difference_between_categories(data_frame, category_col, item_col1, item_col2, category1, category2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of item counts per category, and two categories. It returns the difference in the total number of items made from the two categories.\n    \n    Args:\n    data_frame (pd.DataFrame): A pandas DataFrame containing categories and the number of items made from each category with columns specified by category_col, item_col1, and item_col2.\n    category_col (str): The column name for the categories.\n    item_col1 (str): The column name for the first item count.\n    item_col2 (str): The column name for the second item count.\n    category1 (str): The first category.\n    category2 (str): The second category.\n    \n    Returns:\n    int: The difference in the total number of items made from the two categories.\n    \"\"\"\n    # Filter the DataFrame for the specific categories\n    category1_df = data_frame[data_frame[category_col] == category1]\n    category2_df = data_frame[data_frame[category_col] == category2]\n    \n    # Calculate the total number of items made from each category\n    category1_total = category1_df[item_col1].values[0] + category1_df[item_col2].values[0]\n    category2_total = category2_df[item_col1].values[0] + category2_df[item_col2].values[0]\n    \n    # Calculate the difference in the total number of items made from the two categories\n    difference = category1_total - category2_total\n    \n    return difference","tool_call":"data = {\n    'Type of Wood': ['Maple', 'Oak', 'Walnut', 'Pine'],\n    'Beds': [14, 15, 7, 4],\n    'Bookcases': [19, 4, 4, 5]\n}\n\ndf = pd.DataFrame(data)\nprint(calculate_difference_between_categories(data_frame=df, category_col=\"Type of Wood\", item_col1=\"Beds\", item_col2=\"Bookcases\", category1=\"Maple\", category2=\"Oak\"))"}
