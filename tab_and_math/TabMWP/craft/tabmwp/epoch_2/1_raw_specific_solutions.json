{"question":"While writing a paper on making decisions in groups, Reagan researched the size of a number of committees. What is the size of the largest committee?","answer":90.0,"table":"Stem | Leaf \n3 | 1, 1, 4, 4, 5, 7, 8\n4 | 6\n5 | 2, 2, 4, 7\n6 | 5, 6, 8, 8, 9\n7 | 0, 9, 9\n8 | 1, 3, 4, 8\n9 | 0","level":5,"tool_id":12461,"code":"import pandas as pd\n\ndef find_largest_committee(df):\n    \"\"\"\n    This function takes in a pandas dataframe of committee sizes, and returns the size of the largest committee.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the sizes of committees.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The size of the largest committee.\n    \"\"\"\n    # prepare a list to calculate size of each committee\n    sizes = []\n    # calculate the size of each committee\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            sizes.append(stem * 10 + leaf[j])\n    # find the maximum size\n    max_size = max(sizes)\n    return max_size","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[1, 1, 4, 4, 5, 7, 8], [6], [2, 2, 4, 7], [5, 6, 8, 8, 9], [0, 9, 9], [1, 3, 4, 8], [0]]\n})\n# Call the tool to solve the problem\nprint(find_largest_committee(df))"}
{"question":"For an economics project, Denise determined the cost of ferry rides for bicycles and cars. How much does it cost to take a bicycle on the Ocracoke ferry?","answer":3.0,"table":"Ferry | Bicycle | Car\nOcracoke | $3 | $15\nFauntleroy-Vashon | $5 | $15\nSeattle-Bremerton | $8 | $12\nMukilteu-Clinton | $5 | $7","level":5,"tool_id":9734,"code":"import pandas as pd\n\ndef get_bicycle_cost_on_ferry(ferry_df, ferry_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry table and a ferry name, and returns the cost of taking a bicycle on the specified ferry.\n    Args:\n    ferry_df (pd.DataFrame): A pandas DataFrame containing ferry names and their costs for bicycles and cars with columns 'Ferry', 'Bicycle', and 'Car'.\n    ferry_name (str): The name of the ferry.\n    Returns:\n    float: The cost of taking a bicycle on the specified ferry.\n    \"\"\"\n    # Filter the DataFrame for the specific ferry\n    ferry_df = ferry_df[ferry_df['Ferry'] == ferry_name]\n    if not ferry_df.empty:\n        bicycle_cost = ferry_df['Bicycle'].values[0]\n        return bicycle_cost\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Ocracoke', 'Fauntleroy-Vashon', 'Seattle-Bremerton', 'Mukilteu-Clinton'],\n    'Bicycle': [3, 5, 8, 5],\n    'Car': [15, 15, 12, 7]\n})\n# Call the tool to solve the problem\nbicycle_cost = get_bicycle_cost_on_ferry(df, 'Ocracoke')\nprint(bicycle_cost)"}
{"question":"Several people compared how many Web pages they had visited. How many more Web pages did Diego visit than Carla?","answer":591.0,"table":"Person | Number of Web pages\nAriel | 550\nDiego | 734\nCarla | 143\nGabriel | 343","level":3,"tool_id":16247,"code":"import pandas as pd\n\ndef calculate_difference(df, person1, person2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of people and the number of Web pages they visited, and returns the difference in the number of Web pages visited by two specified people.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing people's names and the number of Web pages they visited with columns 'Person' and 'Number of Web pages'.\n    person1 (str): The name of the first person.\n    person2 (str): The name of the second person.\n    Returns:\n    int: The difference in the number of Web pages visited by person1 and person2.\n    \"\"\"\n    # Filter the DataFrame for the specific people\n    person1_df = df[df['Person'] == person1]\n    person2_df = df[df['Person'] == person2]\n    \n    # Get the number of Web pages visited by each person\n    person1_pages = person1_df['Number of Web pages'].values[0]\n    person2_pages = person2_df['Number of Web pages'].values[0]\n    \n    # Calculate the difference\n    difference = person1_pages - person2_pages\n    \n    return difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Person': ['Ariel', 'Diego', 'Carla', 'Gabriel'],\n    'Number of Web pages': [550, 734, 143, 343]\n})\n\n# Call the tool to solve the problem\ndifference = calculate_difference(df, 'Diego', 'Carla')\nprint(difference)"}
{"question":"Every summer, Janice goes on a week-long canoe trip with her childhood camp friends. After the trip, she usually purchases some oars from the destination city. Her collection of oars is organized by year and type of wood. What is the probability that a randomly selected oar was purchased in 2011 and was made from spruce wood? Simplify any fractions.","answer":0.2,"table":" | Spruce wood | Ash wood\n2010 | 6 | 5\n2011 | 4 | 5","level":8,"tool_id":12130,"code":"import pandas as pd\n\ndef calculate_probability(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of oars purchased by year and type of wood, and returns the probability that a randomly selected oar was purchased in 2011 and was made from spruce wood.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of oars purchased by year and type of wood.\n    Returns:\n    float: The probability that a randomly selected oar was purchased in 2011 and was made from spruce wood.\n    \"\"\"\n    # Calculate the total number of oars\n    total_oars = df.sum().sum()\n    \n    # Calculate the number of oars purchased in 2011 and made from spruce wood\n    spruce_2011 = df.loc[2011, 'Spruce wood']\n    \n    # Calculate the probability\n    probability = spruce_2011 \/ total_oars\n    \n    return probability","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Spruce wood': [6, 4],\n    'Ash wood': [5, 5]\n}, index=[2010, 2011])\n\n# Call the tool to solve the problem\nprobability = calculate_probability(df)\nprint(f\"The probability that a randomly selected oar was purchased in 2011 and was made from spruce wood is {probability}\")"}
{"question":"Pam designed the window displays at Bella's Boutique last summer. Here are Pam's finances for the summer. What was Pam's net income last summer?","answer":5518.0,"table":"Earnings from job at Bella's Boutique | $5,996\nIncome tax and other payroll taxes | $478","level":5,"tool_id":8226,"code":"import pandas as pd\n\ndef calculate_net_income(finances_df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a finances table and calculates the net income.\n    Args:\n    finances_df (pd.DataFrame): A pandas DataFrame containing finance items and their amounts with columns 'Item' and 'Amount'.\n    Returns:\n    float: The net income.\n    \"\"\"\n    # Initialize the net income\n    net_income = 0.0\n    \n    # Iterate through the finance items and calculate the net income\n    for index, row in finances_df.iterrows():\n        item = row['Item']\n        amount = row['Amount']\n        if 'Earnings' in item:\n            net_income += amount\n        elif 'tax' in item.lower():\n            net_income -= amount\n    \n    return net_income","api_call":"# Initialize the table into a dataframe\nfinances_df = pd.DataFrame({\n    'Item': ['Earnings from job at Bella\\'s Boutique', 'Income tax and other payroll taxes'],\n    'Amount': [5996, 478]\n})\n\n# Call the tool to solve the problem\nnet_income = calculate_net_income(finances_df)\nprint(f\"Pam's net income last summer was ${net_income}\")"}
{"question":"For an economics project, Eduardo determined the cost of ferry rides for bicycles and cars. How much higher is the fare for a car on the Mukilteu-Clinton ferry than on the Southport-Fort Fisher ferry?","answer":2.0,"table":"Ferry | Bicycle | Car\nFauntleroy-Vashon | $5 | $15\nOcracoke | $3 | $15\nSouthport-Fort Fisher | $2 | $5\nSeattle-Bremerton | $8 | $12\nMukilteu-Clinton | $5 | $7","level":5,"tool_id":16135,"code":"import pandas as pd\n\ndef calculate_fare_difference(df, ferry1, ferry2, vehicle_type):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry fare table, two ferry names, and a vehicle type, and returns the fare difference between the two ferries for the specified vehicle type.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ferry names and fares for bicycles and cars with columns 'Ferry', 'Bicycle', and 'Car'.\n    ferry1 (str): The name of the first ferry.\n    ferry2 (str): The name of the second ferry.\n    vehicle_type (str): The type of vehicle for which to calculate the fare difference ('Bicycle' or 'Car').\n    Returns:\n    float: The fare difference between the two ferries for the specified vehicle type.\n    \"\"\"\n    # Filter the DataFrame for the specified ferries\n    ferry1_df = df[df['Ferry'] == ferry1]\n    ferry2_df = df[df['Ferry'] == ferry2]\n    \n    # Check if both ferries are in the DataFrame\n    if not ferry1_df.empty and not ferry2_df.empty:\n        # Calculate the fare difference for the specified vehicle type\n        fare_difference = abs(ferry1_df[vehicle_type].values[0] - ferry2_df[vehicle_type].values[0])\n        return fare_difference\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Fauntleroy-Vashon', 'Ocracoke', 'Southport-Fort Fisher', 'Seattle-Bremerton', 'Mukilteu-Clinton'],\n    'Bicycle': [5, 3, 2, 8, 5],\n    'Car': [15, 15, 5, 12, 7]\n})\n\n# Call the tool to solve the problem\nfare_difference = calculate_fare_difference(df, 'Mukilteu-Clinton', 'Southport-Fort Fisher', 'Car')\nprint(fare_difference)"}
{"question":"A transportation analyst compared various bridges' tolls. How much higher is the toll for a truck on the Golden Gate bridge than on the Fort Madison bridge?","answer":3.0,"table":"Bridge | Truck | Car\nGolden Gate | $7 | $6\nFort Madison | $4 | $1\nOakland Bay | $6 | $4","level":4,"tool_id":6103,"code":"import pandas as pd\n\ndef calculate_toll_difference(df, bridge1, bridge2, vehicle_type):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a toll table, two bridge names, and a vehicle type, and returns the difference in tolls between the two bridges for the specified vehicle type.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge names and their tolls for different vehicle types.\n    bridge1 (str): The name of the first bridge.\n    bridge2 (str): The name of the second bridge.\n    vehicle_type (str): The type of vehicle.\n    Returns:\n    float: The difference in tolls between the two bridges for the specified vehicle type.\n    \"\"\"\n    # Filter the DataFrame for the specific bridges and vehicle type\n    bridge1_df = df[df['Bridge'] == bridge1]\n    bridge2_df = df[df['Bridge'] == bridge2]\n    \n    # Get the tolls for the specified vehicle type on the two bridges\n    bridge1_toll = bridge1_df[vehicle_type].values[0]\n    bridge2_toll = bridge2_df[vehicle_type].values[0]\n    \n    # Calculate the difference in tolls\n    toll_difference = bridge1_toll - bridge2_toll\n    \n    return toll_difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['Golden Gate', 'Fort Madison', 'Oakland Bay'],\n    'Truck': [7, 4, 6],\n    'Car': [6, 1, 4]\n})\n# Call the tool to solve the problem\ntoll_difference = calculate_toll_difference(df, 'Golden Gate', 'Fort Madison', 'Truck')\nprint(toll_difference)"}
{"question":"Javier was the lucky journalist assigned to cover the Best Beard Competition. He recorded the contestants' beard colors in his notepad. Javier also noted if the contestants were signed up for the mustache competition later in the day. What is the probability that a randomly selected contestant has a grey beard and is also in the mustache competition? Simplify any fractions.","answer":0.1176470588,"table":" | Only in the beard competition | Also in the mustache competition\nRed beard | 3 | 6\nGrey beard | 6 | 2","level":8,"tool_id":15496,"code":"import pandas as pd\n\ndef calculate_probability(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of contestants in a beard competition, and returns the probability that a randomly selected contestant has a grey beard and is also in the mustache competition.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of contestants with different beard colors and their participation in the mustache competition. The DataFrame should have columns 'Only in the beard competition' and 'Also in the mustache competition', and rows 'Red beard' and 'Grey beard'.\n    Returns:\n    float: The probability that a randomly selected contestant has a grey beard and is also in the mustache competition.\n    \"\"\"\n    # Calculate the total number of contestants\n    total_contestants = df['Only in the beard competition'].sum() + df['Also in the mustache competition'].sum()\n    \n    # Calculate the number of contestants with a grey beard and also in the mustache competition\n    grey_beard_mustache = df.loc['Grey beard', 'Also in the mustache competition']\n    \n    # Calculate the probability\n    probability = grey_beard_mustache \/ total_contestants\n    \n    return probability","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Only in the beard competition': [3, 6],\n    'Also in the mustache competition': [6, 2]\n}, index=['Red beard', 'Grey beard'])\n\n# Call the tool to calculate the probability\nprobability = calculate_probability(df)\n\n# Print the probability\nprint(probability)"}
{"question":"Each pen has 2 cows. How many cows are in 4 pens?","answer":8.0,"table":"Number of pens | Number of cows\n1 | 2\n2 | 4\n3 | 6\n4 | ?","level":1,"tool_id":13541,"code":"import pandas as pd\n\ndef find_cows_in_pens(df, target_pens):\n    \"\"\"\n    This function takes in a pandas DataFrame representing the number of cows in pens and a target number of pens, and returns the number of cows in the target number of pens.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of pens and the corresponding number of cows with columns 'Number of pens' and 'Number of cows'.\n    target_pens (int): The target number of pens for which the number of cows needs to be found.\n    Returns:\n    int: The number of cows in the target number of pens.\n    \"\"\"\n    # Find the number of cows per pen\n    cows_per_pen = df['Number of cows'][0] \/ df['Number of pens'][0]\n    \n    # Calculate the number of cows in the target number of pens\n    cows_in_target_pens = target_pens * cows_per_pen\n    \n    return int(cows_in_target_pens)","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of pens': [1, 2, 3],\n    'Number of cows': [2, 4, 6]\n})\n\n# Call the tool to solve the problem\nprint(find_cows_in_pens(df, 4))"}
{"question":"For an economics project, Josiah determined the cost of ferry rides for bicycles and cars. How much does it cost to take a car on the Southport-Fort Fisher ferry?","answer":5.0,"table":"Ferry | Bicycle | Car\nFauntleroy-Vashon | $5 | $15\nOcracoke | $3 | $15\nMukilteu-Clinton | $5 | $7\nSouthport-Fort Fisher | $2 | $5","level":5,"tool_id":16138,"code":"import pandas as pd\n\ndef get_ferry_cost(ferry_df, ferry_name, vehicle_type):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry cost table, a ferry name, and a vehicle type, and returns the cost of the ferry ride for the specified vehicle type.\n    Args:\n    ferry_df (pd.DataFrame): A pandas DataFrame containing ferry names and their costs for different vehicle types with columns 'Ferry', 'Bicycle', and 'Car'.\n    ferry_name (str): The name of the ferry.\n    vehicle_type (str): The type of the vehicle.\n    Returns:\n    float: The cost of the ferry ride for the specified vehicle type.\n    \"\"\"\n    # Filter the DataFrame for the specific ferry\n    ferry_df = ferry_df[ferry_df['Ferry'] == ferry_name]\n    \n    # If the ferry is found in the DataFrame, return the cost for the specified vehicle type\n    if not ferry_df.empty:\n        return ferry_df[vehicle_type].values[0]\n    \n    # If the ferry is not found in the DataFrame, return None\n    return None","api_call":"# Initialize the table into a dataframe\nferry_df = pd.DataFrame({\n    'Ferry': ['Fauntleroy-Vashon', 'Ocracoke', 'Mukilteu-Clinton', 'Southport-Fort Fisher'],\n    'Bicycle': [5, 3, 5, 2],\n    'Car': [15, 15, 7, 5]\n})\n\n# Call the tool to solve the problem\ncost = get_ferry_cost(ferry_df, 'Southport-Fort Fisher', 'Car')\nprint(cost)"}
{"question":"A transportation analyst compared various bridges' tolls. How much higher is the toll for a car on the Hatem bridge than on the Fort Madison bridge?","answer":4.0,"table":"Bridge | Truck | Car\nFort Madison | $4 | $1\nHatem | $10 | $5\nSan Mateo | $6 | $4\nGolden Gate | $7 | $6","level":4,"tool_id":7312,"code":"import pandas as pd\n\ndef calculate_toll_difference(df, bridge1, bridge2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a bridge toll table, and two bridge names, and returns the difference in car tolls between the two bridges.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge names and their tolls for trucks and cars with columns 'Bridge', 'Truck', and 'Car'.\n    bridge1 (str): The name of the first bridge.\n    bridge2 (str): The name of the second bridge.\n    Returns:\n    float: The difference in car tolls between the two bridges.\n    \"\"\"\n    # Filter the DataFrame for the specific bridges\n    bridge1_df = df[df['Bridge'] == bridge1]\n    bridge2_df = df[df['Bridge'] == bridge2]\n    \n    # Calculate the difference in car tolls\n    toll_difference = bridge1_df['Car'].values[0] - bridge2_df['Car'].values[0]\n    \n    return toll_difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['Fort Madison', 'Hatem', 'San Mateo', 'Golden Gate'],\n    'Truck': [4, 10, 6, 7],\n    'Car': [1, 5, 4, 6]\n})\n\n# Call the tool to solve the problem\ntoll_difference = calculate_toll_difference(df, 'Hatem', 'Fort Madison')\nprint(toll_difference)"}
{"question":"A publisher invited authors to write stories for a special anthology. How many authors wrote exactly 4 stories?","answer":6.0,"table":"Stories written | Frequency\n1 | 19\n2 | 15\n3 | 7\n4 | 6\n5 | 0\n6 | 11","level":7,"tool_id":11526,"code":"import pandas as pd\n\ndef count_authors(df, num_stories):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a frequency table of stories written by authors and a number of stories, and returns the number of authors who wrote exactly that number of stories.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of stories written and their frequencies with columns 'Stories written' and 'Frequency'.\n    num_stories (int): The number of stories to filter by.\n    Returns:\n    int: The number of authors who wrote exactly num_stories stories.\n    \"\"\"\n    # Filter the DataFrame for the specific number of stories\n    stories_df = df[df['Stories written'] == num_stories]\n    if not stories_df.empty:\n        return stories_df['Frequency'].values[0]\n    else:\n        return 0","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stories written': [1, 2, 3, 4, 5, 6],\n    'Frequency': [19, 15, 7, 6, 0, 11]\n})\n# Call the tool to solve the problem\nnum_authors = count_authors(df, 4)\nprint(num_authors)"}
{"question":"A publisher invited authors to write stories for a special anthology. How many authors wrote exactly 4 stories?","answer":5.0,"table":"Stories written | Frequency\n1 | 6\n2 | 11\n3 | 19\n4 | 5\n5 | 2","level":8,"tool_id":13604,"code":"import pandas as pd\n\ndef count_authors(df, num_stories):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a frequency table of stories written by authors and a number of stories, and returns the number of authors who wrote exactly that number of stories.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of stories written and their frequencies with columns 'Stories written' and 'Frequency'.\n    num_stories (int): The number of stories to filter by.\n    Returns:\n    int: The number of authors who wrote exactly num_stories stories.\n    \"\"\"\n    # Filter the DataFrame for the specific number of stories\n    stories_df = df[df['Stories written'] == num_stories]\n    if not stories_df.empty:\n        return stories_df['Frequency'].values[0]\n    else:\n        return 0","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stories written': [1, 2, 3, 4, 5],\n    'Frequency': [6, 11, 19, 5, 2]\n})\n# Call the tool to solve the problem\nprint(count_authors(df, 4))"}
{"question":"Reagan's basketball team ordered new jerseys. She recorded the sizes they needed in a frequency chart. How many jerseys did they order?","answer":14.0,"table":"Size | Frequency\nsmall | 4\nmedium | 7\nlarge | 3","level":5,"tool_id":11005,"code":"import pandas as pd\n\ndef calculate_total_jerseys(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a frequency chart of jersey sizes, and returns the total number of jerseys ordered.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing jersey sizes and their frequencies with columns 'Size' and 'Frequency'.\n    Returns:\n    int: The total number of jerseys ordered.\n    \"\"\"\n    # Sum up the frequencies to get the total number of jerseys\n    total_jerseys = df['Frequency'].sum()\n    \n    return total_jerseys","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Size': ['small', 'medium', 'large'],\n    'Frequency': [4, 7, 3]\n})\n\n# Call the tool to solve the problem\ntotal_jerseys = calculate_total_jerseys(df)\n\n# Print the answer\nprint(total_jerseys)"}
{"question":"For an economics project, Wesley determined the cost of ferry rides for bicycles and cars. How much does it cost to take a car on the Ocracoke ferry?","answer":15.0,"table":"Ferry | Bicycle | Car\nSeattle-Bremerton | $8 | $12\nSouthport-Fort Fisher | $2 | $5\nOcracoke | $3 | $15","level":4,"tool_id":16299,"code":"import pandas as pd\n\ndef get_ferry_cost(df, ferry_name, vehicle_type):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry cost table, a ferry name, and a vehicle type, and returns the cost of the ferry ride for the specified vehicle type.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ferry names, and costs for bicycles and cars with columns 'Ferry', 'Bicycle', and 'Car'.\n    ferry_name (str): The name of the ferry.\n    vehicle_type (str): The type of vehicle ('Bicycle' or 'Car').\n    Returns:\n    float: The cost of the ferry ride for the specified vehicle type.\n    \"\"\"\n    # Filter the DataFrame for the specific ferry\n    ferry_df = df[df['Ferry'] == ferry_name]\n    \n    # Get the cost for the specified vehicle type\n    if not ferry_df.empty:\n        cost = ferry_df[vehicle_type].values[0]\n        return cost\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Seattle-Bremerton', 'Southport-Fort Fisher', 'Ocracoke'],\n    'Bicycle': [8, 2, 3],\n    'Car': [12, 5, 15]\n})\n# Call the tool to solve the problem\nprint(get_ferry_cost(df, 'Ocracoke', 'Car'))"}
{"question":"The Mountain Moose Lodge has many customer reviews online. The number of reviews is shown in the frequency chart. Paula visits the Mountain Moose Lodge with her friends and has a great time. Paula and her friends leave 4 reviews that are all 5 stars. How many reviews does the Mountain Moose Lodge have now?","answer":155.0,"table":"Rating | Frequency\n5 stars | 81\n4 stars | 54\n3 stars | 5\n2 stars | 2\n1 star | 9","level":5,"tool_id":12148,"code":"import pandas as pd\n\ndef calculate_total_reviews(df, new_reviews):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a review table and a dictionary of new reviews, and returns the total number of reviews after adding the new reviews.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing review ratings and their frequencies with columns 'Rating' and 'Frequency'.\n    new_reviews (dict): A dictionary where the keys are review ratings and the values are the number of new reviews for each rating.\n    Returns:\n    int: The total number of reviews after adding the new reviews.\n    \"\"\"\n    # Iterate through the new reviews and add them to the corresponding rating in the DataFrame\n    for rating, quantity in new_reviews.items():\n        # Filter the DataFrame for the specific rating\n        rating_df = df[df['Rating'] == rating]\n        if not rating_df.empty:\n            df.loc[df['Rating'] == rating, 'Frequency'] += quantity\n    \n    # Calculate the total number of reviews\n    total_reviews = df['Frequency'].sum()\n    \n    return total_reviews","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Rating': ['5 stars', '4 stars', '3 stars', '2 stars', '1 star'],\n    'Frequency': [81, 54, 5, 2, 9]\n})\n\n# Initialize the new reviews\nnew_reviews = {'5 stars': 4}\n\n# Call the tool to solve the problem\ntotal_reviews = calculate_total_reviews(df, new_reviews)\nprint(total_reviews)"}
{"question":"Each office has 10 rulers. How many rulers are in 5 offices?","answer":50.0,"table":"Number of offices | Number of rulers\n1 | 10\n2 | 20\n3 | 30\n4 | 40\n5 | ?","level":1,"tool_id":12201,"code":"def calculate_rulers_in_offices(office_data):\n    \"\"\"\n    This function takes in a dictionary representing the number of offices and the number of rulers in each office, and calculates the number of rulers in 5 offices.\n    Args:\n    office_data (dict): A dictionary where the keys are the number of offices and the values are the number of rulers in each office.\n    Returns:\n    int: The number of rulers in 5 offices.\n    \"\"\"\n    # Calculate the number of rulers in 5 offices\n    rulers_in_5_offices = office_data[1] * 5\n\n    return rulers_in_5_offices","api_call":"# Initialize the table into a dictionary\noffice_data = {\n    1: 10,\n    2: 20,\n    3: 30,\n    4: 40\n}\n# Call the tool to solve the problem\nrulers_in_5_offices = calculate_rulers_in_offices(office_data)\nprint(rulers_in_5_offices)"}
{"question":"For an economics project, Victor determined the cost of ferry rides for bicycles and cars. How much higher is the fare for a bicycle on the Mukilteu-Clinton ferry than on the Southport-Fort Fisher ferry?","answer":3.0,"table":"Ferry | Bicycle | Car\nSeattle-Bremerton | $8 | $12\nSouthport-Fort Fisher | $2 | $5\nMukilteu-Clinton | $5 | $7","level":4,"tool_id":1304,"code":"import pandas as pd\n\ndef calculate_fare_difference(df, ferry1, ferry2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry fare table, and two ferry names, and returns the difference in bicycle fare between the two ferries.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ferry names and their fares for bicycles and cars with columns 'Ferry', 'Bicycle', 'Car'.\n    ferry1 (str): The name of the first ferry.\n    ferry2 (str): The name of the second ferry.\n    Returns:\n    float: The difference in bicycle fare between the two ferries.\n    \"\"\"\n    # Filter the DataFrame for the specific ferries\n    ferry1_df = df[df['Ferry'] == ferry1]\n    ferry2_df = df[df['Ferry'] == ferry2]\n    \n    # Get the bicycle fare for each ferry\n    ferry1_bicycle_fare = ferry1_df['Bicycle'].values[0]\n    ferry2_bicycle_fare = ferry2_df['Bicycle'].values[0]\n    \n    # Calculate the difference in fare\n    fare_difference = ferry1_bicycle_fare - ferry2_bicycle_fare\n    \n    return fare_difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Seattle-Bremerton', 'Southport-Fort Fisher', 'Mukilteo-Clinton'],\n    'Bicycle': [8, 2, 5],\n    'Car': [12, 5, 7]\n})\n\n# Call the tool to solve the problem\nfare_difference = calculate_fare_difference(df, 'Mukilteo-Clinton', 'Southport-Fort Fisher')\n\n# Print the answer\nprint(fare_difference)"}
{"question":"Morristown requires all dogs to be registered with the city and keeps records of the distribution of different breeds. What fraction of dogs registered with the city are Boxers? Simplify your answer.","answer":0.2981927711,"table":"Breed | Number of dogs registered\nYorkshire Terriers | 760\nBulldogs | 760\nGerman Shepherds | 270\nBoxers | 990\nOther | 540","level":7,"tool_id":6067,"code":"import pandas as pd\n\ndef calculate_fraction_of_boxers(df):\n    \"\"\"\n    This function takes in a pandas DataFrame containing the number of dogs registered for each breed and returns the fraction of dogs that are Boxers.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of dogs registered for each breed with columns 'Breed' and 'Number of dogs registered'.\n    Returns:\n    float: The fraction of dogs that are Boxers.\n    \"\"\"\n    # Calculate the total number of dogs registered\n    total_dogs = df['Number of dogs registered'].sum()\n    \n    # Filter the DataFrame for Boxers\n    boxers_df = df[df['Breed'] == 'Boxers']\n    \n    # Calculate the number of Boxers registered\n    num_boxers = boxers_df['Number of dogs registered'].values[0]\n    \n    # Calculate the fraction of dogs that are Boxers\n    fraction_of_boxers = num_boxers \/ total_dogs\n    \n    return fraction_of_boxers","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Breed': ['Yorkshire Terriers', 'Bulldogs', 'German Shepherds', 'Boxers', 'Other'],\n    'Number of dogs registered': [760, 760, 270, 990, 540]\n})\n\n# Call the tool to solve the problem\nfraction_of_boxers = calculate_fraction_of_boxers(df)\n\n# Print out the answer\nprint(f\"The fraction of dogs that are Boxers is {fraction_of_boxers}.\")"}
{"question":"For an economics project, Leroy determined the cost of ferry rides for bicycles and cars. How much does it cost to take a car on the Ocracoke ferry?","answer":15.0,"table":"Ferry | Bicycle | Car\nOcracoke | $3 | $15\nMukilteu-Clinton | $5 | $7\nSouthport-Fort Fisher | $2 | $5\nFauntleroy-Vashon | $5 | $15","level":4,"tool_id":14058,"code":"import pandas as pd\n\ndef get_ferry_cost(ferry_df, ferry_name, vehicle_type):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry cost table, a ferry name, and a vehicle type, and returns the cost of the ferry ride for the specified vehicle type.\n    Args:\n    ferry_df (pd.DataFrame): A pandas DataFrame containing ferry names and their costs for different vehicle types with columns 'Ferry', 'Bicycle', and 'Car'.\n    ferry_name (str): The name of the ferry.\n    vehicle_type (str): The type of the vehicle ('Bicycle' or 'Car').\n    Returns:\n    float: The cost of the ferry ride for the specified vehicle type.\n    \"\"\"\n    # Filter the DataFrame for the specific ferry\n    ferry_df = ferry_df[ferry_df['Ferry'] == ferry_name]\n    \n    # If the ferry is found in the DataFrame, return the cost for the specified vehicle type\n    if not ferry_df.empty:\n        return ferry_df[vehicle_type].values[0]\n    \n    # If the ferry is not found in the DataFrame, return None\n    return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Ocracoke', 'Mukilteu-Clinton', 'Southport-Fort Fisher', 'Fauntleroy-Vashon'],\n    'Bicycle': [3, 5, 2, 5],\n    'Car': [15, 7, 5, 15]\n})\n# Call the tool to solve the problem\ncost = get_ferry_cost(df, 'Ocracoke', 'Car')\nprint(f\"The cost to take a car on the Ocracoke ferry is ${cost}.\")"}
{"question":"For an economics project, Jon determined the cost of ferry rides for bicycles and cars. How much does it cost to take a car on the Ocracoke ferry?","answer":15.0,"table":"Ferry | Car | Bicycle\nFauntleroy-Vashon | $15 | $5\nSeattle-Bremerton | $12 | $8\nMukilteu-Clinton | $7 | $5\nOcracoke | $15 | $3\nSouthport-Fort Fisher | $5 | $2","level":4,"tool_id":11831,"code":"import pandas as pd\n\ndef get_ferry_cost(df, ferry_name, vehicle_type):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry cost table, a ferry name, and a vehicle type, and returns the cost of the ferry ride for the specified vehicle type.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ferry names and their costs for different vehicle types.\n    ferry_name (str): The name of the ferry.\n    vehicle_type (str): The type of vehicle (e.g., 'Car', 'Bicycle').\n    Returns:\n    float: The cost of the ferry ride for the specified vehicle type.\n    \"\"\"\n    # Filter the DataFrame for the specific ferry\n    ferry_df = df[df['Ferry'] == ferry_name]\n    if not ferry_df.empty:\n        # Get the cost for the specified vehicle type\n        cost = ferry_df[vehicle_type].values[0]\n        return cost\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Fauntleroy-Vashon', 'Seattle-Bremerton', 'Mukilteo-Clinton', 'Ocracoke', 'Southport-Fort Fisher'],\n    'Car': [15, 12, 7, 15, 5],\n    'Bicycle': [5, 8, 5, 3, 2]\n})\n\n# Call the tool to solve the problem\ncost = get_ferry_cost(df, 'Ocracoke', 'Car')\nprint(f\"The cost to take a car on the Ocracoke ferry is ${cost}.\")"}
{"question":"Millersburg will decide whether to extend its public pool's hours by looking at the number of times its residents visited the pool last month. How many people went swimming exactly once last month?","answer":4.0,"table":"Number of times | Frequency\n1 | 4\n2 | 12\n3 | 16\n4 | 19","level":8,"tool_id":4405,"code":"import pandas as pd\n\ndef count_people_with_exact_visits(df, target_visits):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a frequency table of visits to a public pool and a target number of visits, and returns the number of people who visited the pool exactly the target number of times.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of times people visited the pool and the frequency of those visits with columns 'Number of times' and 'Frequency'.\n    target_visits (int): The target number of visits to filter the DataFrame.\n    Returns:\n    int: The number of people who visited the pool exactly the target number of times.\n    \"\"\"\n    # Filter the DataFrame for the target number of visits\n    target_df = df[df['Number of times'] == target_visits]\n    \n    # If the target number of visits is found in the DataFrame, return the corresponding frequency\n    if not target_df.empty:\n        return target_df['Frequency'].values[0]\n    else:\n        return 0","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of times': [1, 2, 3, 4],\n    'Frequency': [4, 12, 16, 19]\n})\n# Call the tool to solve the problem\nprint(count_people_with_exact_visits(df, 1))"}
{"question":"For an economics project, Rob determined the cost of ferry rides for bicycles and cars. How much does it cost to take a bicycle on the Southport-Fort Fisher ferry?","answer":2.0,"table":"Ferry | Bicycle | Car\nMukilteu-Clinton | $5 | $7\nSouthport-Fort Fisher | $2 | $5\nSeattle-Bremerton | $8 | $12\nOcracoke | $3 | $15","level":5,"tool_id":5738,"code":"import pandas as pd\n\ndef get_ferry_cost(ferry_df, ferry_name, vehicle_type):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry cost table, a ferry name, and a vehicle type, and returns the cost of the ferry ride for the specified vehicle type.\n    Args:\n    ferry_df (pd.DataFrame): A pandas DataFrame containing ferry names and their costs for bicycles and cars with columns 'Ferry', 'Bicycle', and 'Car'.\n    ferry_name (str): The name of the ferry.\n    vehicle_type (str): The type of vehicle ('Bicycle' or 'Car').\n    Returns:\n    float: The cost of the ferry ride for the specified vehicle type.\n    \"\"\"\n    # Filter the DataFrame for the specific ferry\n    ferry_row = ferry_df[ferry_df['Ferry'] == ferry_name]\n    \n    if not ferry_row.empty:\n        return ferry_row[vehicle_type].values[0]\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\nferry_df = pd.DataFrame({\n    'Ferry': ['Mukilteu-Clinton', 'Southport-Fort Fisher', 'Seattle-Bremerton', 'Ocracoke'],\n    'Bicycle': [5, 2, 8, 3],\n    'Car': [7, 5, 12, 15]\n})\n\n# Call the tool to solve the problem\ncost = get_ferry_cost(ferry_df, 'Southport-Fort Fisher', 'Bicycle')\nprint(cost)"}
{"question":"A transportation analyst compared various bridges' tolls. How much higher is the toll for a carpool on the Hatem bridge than on the Tacoma Narrows bridge?","answer":2.0,"table":"Bridge | Car | Carpool\nFort Madison | $1 | $1\nHatem | $5 | $5\nTacoma Narrows | $3 | $3\nGeorge Washington | $8 | $2","level":4,"tool_id":9030,"code":"import pandas as pd\n\ndef calculate_toll_difference(df, bridge1, bridge2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a bridge toll table and two bridge names, and returns the difference in carpool tolls between the two bridges.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge names and their tolls with columns 'Bridge', 'Car', and 'Carpool'.\n    bridge1 (str): The name of the first bridge.\n    bridge2 (str): The name of the second bridge.\n    Returns:\n    float: The difference in carpool tolls between the two bridges.\n    \"\"\"\n    # Filter the DataFrame for the specific bridges\n    bridge1_df = df[df['Bridge'] == bridge1]\n    bridge2_df = df[df['Bridge'] == bridge2]\n    \n    # Get the carpool tolls for the two bridges\n    bridge1_toll = bridge1_df['Carpool'].values[0]\n    bridge2_toll = bridge2_df['Carpool'].values[0]\n    \n    # Calculate the difference in tolls\n    toll_difference = bridge1_toll - bridge2_toll\n    \n    return toll_difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['Fort Madison', 'Hatem', 'Tacoma Narrows', 'George Washington'],\n    'Car': [1, 5, 3, 8],\n    'Carpool': [1, 5, 3, 2]\n})\n\n# Call the tool to solve the problem\ntoll_difference = calculate_toll_difference(df, 'Hatem', 'Tacoma Narrows')\n\n# Print the answer\nprint(toll_difference)"}
{"question":"A transportation analyst compared various bridges' tolls. How much higher is the toll for a carpool on the Hatem bridge than on the Tacoma Narrows bridge?","answer":2.0,"table":"Bridge | Car | Carpool\nHatem | $5 | $5\nTacoma Narrows | $3 | $3\nGeorge Washington | $8 | $2\nFort Madison | $1 | $1","level":5,"tool_id":3586,"code":"import pandas as pd\n\ndef calculate_toll_difference(df, bridge1, bridge2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a toll table and two bridge names, and returns the difference in tolls for carpools between the two bridges.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge names and their tolls with columns 'Bridge', 'Car', and 'Carpool'.\n    bridge1 (str): The name of the first bridge.\n    bridge2 (str): The name of the second bridge.\n    Returns:\n    float: The difference in tolls for carpools between the two bridges.\n    \"\"\"\n    # Filter the DataFrame for the specific bridges\n    bridge1_df = df[df['Bridge'] == bridge1]\n    bridge2_df = df[df['Bridge'] == bridge2]\n    \n    # Get the tolls for carpools on the two bridges\n    toll_bridge1 = bridge1_df['Carpool'].values[0]\n    toll_bridge2 = bridge2_df['Carpool'].values[0]\n    \n    # Calculate the difference in tolls\n    toll_difference = toll_bridge1 - toll_bridge2\n    \n    return toll_difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['Hatem', 'Tacoma Narrows', 'George Washington', 'Fort Madison'],\n    'Car': [5, 3, 8, 1],\n    'Carpool': [5, 3, 2, 1]\n})\n# Call the tool to solve the problem\ntoll_difference = calculate_toll_difference(df, 'Hatem', 'Tacoma Narrows')\nprint(toll_difference)"}
{"question":"Brendan owns three dogs and monitors how much food they eat in a month. What fraction of the food was eaten by Bandit? Simplify your answer.","answer":0.3451327434,"table":"Dog | Kilograms of food\nBandit | 39\nPeanut | 34\nChance | 40","level":7,"tool_id":14464,"code":"import pandas as pd\nfrom fractions import Fraction\n\ndef calculate_food_fraction(df, dog_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of dogs and the amount of food they eat, and a dog's name, and returns the fraction of food that the dog ate.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing dog names and the amount of food they eat with columns 'Dog' and 'Kilograms of food'.\n    dog_name (str): The name of the dog.\n    Returns:\n    Fraction: The fraction of food that the dog ate.\n    \"\"\"\n    # Calculate the total amount of food\n    total_food = df['Kilograms of food'].sum()\n    \n    # Filter the DataFrame for the specific dog\n    dog_df = df[df['Dog'] == dog_name]\n    if not dog_df.empty:\n        dog_food = dog_df['Kilograms of food'].values[0]\n        # Calculate the fraction of food that the dog ate\n        food_fraction = Fraction(dog_food, total_food)\n        # Simplify the fraction\n        food_fraction = food_fraction.limit_denominator()\n    \n    return food_fraction","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Dog': ['Bandit', 'Peanut', 'Chance'],\n    'Kilograms of food': [39, 34, 40]\n})\n# Call the tool to solve the problem\nfood_fraction = calculate_food_fraction(df, 'Bandit')\nprint(food_fraction)"}
{"question":"A transportation analyst compared various bridges' tolls. On the Hatem bridge, how much more is the toll for a truck than for a car?","answer":5.0,"table":"Bridge | Truck | Car\nHatem | $10 | $5\nGolden Gate | $7 | $6\nGeorge Washington | $16 | $8","level":4,"tool_id":1021,"code":"import pandas as pd\n\ndef calculate_toll_difference(df, bridge_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of bridge tolls and a bridge name, and returns the difference in tolls between a truck and a car for the specified bridge.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge tolls with columns 'Bridge', 'Truck', and 'Car'.\n    bridge_name (str): The name of the bridge for which the toll difference is to be calculated.\n    Returns:\n    float: The difference in tolls between a truck and a car for the specified bridge.\n    \"\"\"\n    # Filter the DataFrame for the specified bridge\n    bridge_df = df[df['Bridge'] == bridge_name]\n    \n    if not bridge_df.empty:\n        truck_toll = bridge_df['Truck'].values[0]\n        car_toll = bridge_df['Car'].values[0]\n        toll_difference = truck_toll - car_toll\n        return toll_difference\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['Hatem', 'Golden Gate', 'George Washington'],\n    'Truck': [10, 7, 16],\n    'Car': [5, 6, 8]\n})\n# Call the tool to solve the problem\ntoll_difference = calculate_toll_difference(df, 'Hatem')\nprint(toll_difference)"}
{"question":"Baldwin, an aspiring meteorologist, spent the past few weekends studying the clouds. He took detailed notes on the types of clouds observed and the time of day they were observed. What is the probability that a randomly selected cloud was marked as stratus and was observed in the afternoon? Simplify any fractions.","answer":0.1666666667,"table":" | Morning | Afternoon\nStratocumulus | 3 | 4\nStratus | 3 | 2","level":8,"tool_id":9249,"code":"import pandas as pd\n\ndef calculate_probability(df, cloud_type, time_of_day):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of cloud observations, a cloud type, and a time of day, and returns the probability that a randomly selected cloud was of the specified type and was observed at the specified time of day.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing cloud types and their observations at different times of day.\n    cloud_type (str): The type of cloud.\n    time_of_day (str): The time of day.\n    Returns:\n    float: The probability that a randomly selected cloud was of the specified type and was observed at the specified time of day.\n    \"\"\"\n    # Calculate the total number of observations\n    total_observations = df.sum().sum()\n    \n    # Filter the DataFrame for the specified cloud type and time of day\n    cloud_df = df.loc[cloud_type, time_of_day]\n    \n    # Calculate the probability\n    probability = cloud_df \/ total_observations\n    \n    return probability","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Morning': [3, 3],\n    'Afternoon': [4, 2]\n}, index=['Stratocumulus', 'Stratus'])\n\n# Call the tool to solve the problem\nprobability = calculate_probability(df, 'Stratus', 'Afternoon')\nprint(probability)"}
{"question":"For an economics project, Nora determined the cost of ferry rides for bicycles and cars. How much higher is the fare for a car on the Fauntleroy-Vashon ferry than on the Southport-Fort Fisher ferry?","answer":10.0,"table":"Ferry | Bicycle | Car\nSouthport-Fort Fisher | $2 | $5\nSeattle-Bremerton | $8 | $12\nOcracoke | $3 | $15\nMukilteu-Clinton | $5 | $7\nFauntleroy-Vashon | $5 | $15","level":4,"tool_id":12221,"code":"import pandas as pd\n\ndef calculate_fare_difference(df, ferry1, ferry2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry fare table, and two ferry names, and returns the difference in car fare between the two ferries.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ferry names and their fares for bicycles and cars with columns 'Ferry', 'Bicycle', and 'Car'.\n    ferry1 (str): The name of the first ferry.\n    ferry2 (str): The name of the second ferry.\n    Returns:\n    float: The difference in car fare between the two ferries.\n    \"\"\"\n    # Filter the DataFrame for the specific ferries\n    ferry1_df = df[df['Ferry'] == ferry1]\n    ferry2_df = df[df['Ferry'] == ferry2]\n    \n    # Get the car fare for each ferry\n    ferry1_fare = ferry1_df['Car'].values[0]\n    ferry2_fare = ferry2_df['Car'].values[0]\n    \n    # Calculate and return the difference in fare\n    fare_difference = ferry1_fare - ferry2_fare\n    return fare_difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Southport-Fort Fisher', 'Seattle-Bremerton', 'Ocracoke', 'Mukilteo-Clinton', 'Fauntleroy-Vashon'],\n    'Bicycle': [2, 8, 3, 5, 5],\n    'Car': [5, 12, 15, 7, 15]\n})\n# Call the tool to solve the problem\nfare_difference = calculate_fare_difference(df, 'Fauntleroy-Vashon', 'Southport-Fort Fisher')\nprint(f\"The fare for a car on the Fauntleroy-Vashon ferry is ${fare_difference} higher than on the Southport-Fort Fisher ferry.\")"}
{"question":"A transportation analyst compared various bridges' tolls. How much is the toll for a truck on the Golden Gate bridge?","answer":7.0,"table":"Bridge | Truck | Car\nGeorge Washington | $16 | $8\nGolden Gate | $7 | $6\nOakland Bay | $6 | $4","level":5,"tool_id":14702,"code":"import pandas as pd\n\ndef get_toll(df, bridge_name, vehicle_type):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a toll table, a bridge name, and a vehicle type, and returns the toll for the specified vehicle on the specified bridge.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge names and tolls for different vehicle types.\n    bridge_name (str): The name of the bridge.\n    vehicle_type (str): The type of vehicle.\n    Returns:\n    float: The toll for the specified vehicle on the specified bridge.\n    \"\"\"\n    # Filter the DataFrame for the specific bridge\n    bridge_df = df[df['Bridge'] == bridge_name]\n    if not bridge_df.empty:\n        # Get the toll for the specified vehicle type\n        toll = bridge_df[vehicle_type].values[0]\n        return toll\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['George Washington', 'Golden Gate', 'Oakland Bay'],\n    'Truck': [16, 7, 6],\n    'Car': [8, 6, 4]\n})\n# Call the tool to solve the problem\ntoll = get_toll(df, 'Golden Gate', 'Truck')\nprint(toll)"}
{"question":"A transportation analyst compared various bridges' tolls. How much higher is the toll for a car on the Golden Gate bridge than on the Oakland Bay bridge?","answer":2.0,"table":"Bridge | Truck | Car\nOakland Bay | $6 | $4\nFort Madison | $4 | $1\nHatem | $10 | $5\nGolden Gate | $7 | $6","level":4,"tool_id":6522,"code":"import pandas as pd\n\ndef calculate_toll_difference(df, bridge1, bridge2, vehicle_type):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of bridge tolls, and calculates the difference in tolls for a specific vehicle type between two bridges.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge names and their tolls for different vehicle types with columns 'Bridge', 'Truck', and 'Car'.\n    bridge1 (str): The name of the first bridge.\n    bridge2 (str): The name of the second bridge.\n    vehicle_type (str): The type of vehicle for which the toll difference is to be calculated. It should be either 'Truck' or 'Car'.\n    Returns:\n    float: The difference in tolls for the specified vehicle type between the two bridges.\n    \"\"\"\n    # Filter the DataFrame for the specific bridges\n    bridge1_df = df[df['Bridge'] == bridge1]\n    bridge2_df = df[df['Bridge'] == bridge2]\n    \n    # Get the tolls for the specified vehicle type on both bridges\n    bridge1_toll = bridge1_df[vehicle_type].values[0]\n    bridge2_toll = bridge2_df[vehicle_type].values[0]\n    \n    # Calculate the difference in tolls\n    toll_difference = abs(bridge1_toll - bridge2_toll)\n    \n    return toll_difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['Oakland Bay', 'Fort Madison', 'Hatem', 'Golden Gate'],\n    'Truck': [6, 4, 10, 7],\n    'Car': [4, 1, 5, 6]\n})\n# Call the tool to solve the problem\ntoll_difference = calculate_toll_difference(df, 'Golden Gate', 'Oakland Bay', 'Car')\nprint(toll_difference)"}
{"question":"For an economics project, Justin determined the cost of ferry rides for bicycles and cars. How much higher is the fare for a bicycle on the Seattle-Bremerton ferry than on the Fauntleroy-Vashon ferry?","answer":3.0,"table":"Ferry | Bicycle | Car\nOcracoke | $3 | $15\nFauntleroy-Vashon | $5 | $15\nMukilteu-Clinton | $5 | $7\nSeattle-Bremerton | $8 | $12","level":4,"tool_id":10104,"code":"import pandas as pd\n\ndef calculate_fare_difference(df, ferry1, ferry2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry fare table, and two ferry names, and returns the fare difference for a bicycle between the two ferries.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ferry names and their fares for bicycles and cars with columns 'Ferry', 'Bicycle', 'Car'.\n    ferry1 (str): The name of the first ferry.\n    ferry2 (str): The name of the second ferry.\n    Returns:\n    float: The fare difference for a bicycle between the two ferries.\n    \"\"\"\n    # Filter the DataFrame for the specific ferries\n    ferry1_df = df[df['Ferry'] == ferry1]\n    ferry2_df = df[df['Ferry'] == ferry2]\n    \n    # Check if the ferries exist in the DataFrame\n    if not ferry1_df.empty and not ferry2_df.empty:\n        # Calculate the fare difference\n        fare_difference = ferry1_df['Bicycle'].values[0] - ferry2_df['Bicycle'].values[0]\n        return fare_difference\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Ocracoke', 'Fauntleroy-Vashon', 'Mukilteo-Clinton', 'Seattle-Bremerton'],\n    'Bicycle': [3, 5, 5, 8],\n    'Car': [15, 15, 7, 12]\n})\n\n# Call the tool to solve the problem\nfare_difference = calculate_fare_difference(df, 'Seattle-Bremerton', 'Fauntleroy-Vashon')\n\n# Print the answer\nprint(fare_difference)"}
{"question":"Matthew was the lucky journalist assigned to cover the Best Beard Competition. He recorded the contestants' beard colors in his notepad. Matthew also noted if the contestants were signed up for the mustache competition later in the day. What is the probability that a randomly selected contestant has a grey beard and is only in the beard competition? Simplify any fractions.","answer":0.15,"table":" | Only in the beard competition | Also in the mustache competition\nRed beard | 3 | 10\nGrey beard | 3 | 4","level":8,"tool_id":15106,"code":"import pandas as pd\n\ndef calculate_probability(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of contestants in a beard competition, and returns the probability that a randomly selected contestant has a grey beard and is only in the beard competition.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of contestants with different beard colors and their participation in the competitions. The DataFrame should have columns 'Only in the beard competition' and 'Also in the mustache competition', and index 'Red beard' and 'Grey beard'.\n    Returns:\n    float: The probability that a randomly selected contestant has a grey beard and is only in the beard competition.\n    \"\"\"\n    # Calculate the total number of contestants\n    total_contestants = df.sum().sum()\n    \n    # Calculate the number of contestants with a grey beard and only in the beard competition\n    grey_beard_only_beard_competition = df.loc['Grey beard', 'Only in the beard competition']\n    \n    # Calculate the probability\n    probability = grey_beard_only_beard_competition \/ total_contestants\n    \n    return probability","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Only in the beard competition': [3, 3],\n    'Also in the mustache competition': [10, 4]\n}, index=['Red beard', 'Grey beard'])\n\n# Call the tool to solve the problem\nprobability = calculate_probability(df)\n\n# Print the answer\nprint(f\"The probability that a randomly selected contestant has a grey beard and is only in the beard competition is {probability}.\")"}
{"question":"A transportation analyst compared various bridges' tolls. How much higher is the toll for a truck on the San Mateo bridge than on the Fort Madison bridge?","answer":2.0,"table":"Bridge | Truck | Car\nFort Madison | $4 | $1\nOakland Bay | $6 | $4\nHatem | $10 | $5\nSan Mateo | $6 | $4","level":4,"tool_id":6058,"code":"import pandas as pd\n\ndef calculate_toll_difference(df, bridge1, bridge2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a toll table and two bridge names, and returns the difference in truck tolls between the two bridges.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge names and their tolls for trucks and cars with columns 'Bridge', 'Truck', and 'Car'.\n    bridge1 (str): The name of the first bridge.\n    bridge2 (str): The name of the second bridge.\n    Returns:\n    float: The difference in truck tolls between the two bridges.\n    \"\"\"\n    # Filter the DataFrame for the specific bridges\n    bridge1_df = df[df['Bridge'] == bridge1]\n    bridge2_df = df[df['Bridge'] == bridge2]\n    \n    # Get the truck tolls for the two bridges\n    bridge1_toll = bridge1_df['Truck'].values[0]\n    bridge2_toll = bridge2_df['Truck'].values[0]\n    \n    # Calculate and return the difference in tolls\n    toll_difference = bridge2_toll - bridge1_toll\n    return toll_difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['Fort Madison', 'Oakland Bay', 'Hatem', 'San Mateo'],\n    'Truck': [4, 6, 10, 6],\n    'Car': [1, 4, 5, 4]\n})\n\n# Call the tool to solve the problem\ntoll_difference = calculate_toll_difference(df, 'San Mateo', 'Fort Madison')\nprint(toll_difference)"}
{"question":"For an economics project, Bernard determined the cost of ferry rides for bicycles and cars. How much does it cost to take a bicycle on the Seattle-Bremerton ferry?","answer":8.0,"table":"Ferry | Bicycle | Car\nSouthport-Fort Fisher | $2 | $5\nFauntleroy-Vashon | $5 | $15\nOcracoke | $3 | $15\nMukilteu-Clinton | $5 | $7\nSeattle-Bremerton | $8 | $12","level":4,"tool_id":599,"code":"import pandas as pd\n\ndef get_bicycle_cost(df, ferry):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry cost table and a string representing the name of a ferry, and returns the cost of taking a bicycle on the specified ferry.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ferry names and their costs for bicycles and cars with columns 'Ferry', 'Bicycle', and 'Car'.\n    ferry (str): The name of the ferry.\n    Returns:\n    float: The cost of taking a bicycle on the specified ferry.\n    \"\"\"\n    # Filter the DataFrame for the specific ferry\n    ferry_df = df[df['Ferry'] == ferry]\n    if not ferry_df.empty:\n        bicycle_cost = ferry_df['Bicycle'].values[0]\n        return bicycle_cost\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Southport-Fort Fisher', 'Fauntleroy-Vashon', 'Ocracoke', 'Mukilteo-Clinton', 'Seattle-Bremerton'],\n    'Bicycle': [2, 5, 3, 5, 8],\n    'Car': [5, 15, 15, 7, 12]\n})\n# Call the tool to solve the problem\nbicycle_cost = get_bicycle_cost(df, 'Seattle-Bremerton')\nprint(bicycle_cost)"}
{"question":"Bryce owns three dogs and monitors how much food they eat in a month. What fraction of the food was eaten by Scout? Simplify your answer.","answer":0.5925925926,"table":"Dog | Kilograms of food\nLucky | 25\nGinger | 8\nScout | 48","level":7,"tool_id":8247,"code":"import pandas as pd\nfrom fractions import Fraction\n\ndef calculate_food_fraction(df, dog_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of dogs and the amount of food they eat, and a dog's name, and returns the fraction of food eaten by the specified dog.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing dog names and the amount of food they eat with columns 'Dog' and 'Kilograms of food'.\n    dog_name (str): The name of the dog.\n    Returns:\n    Fraction: The fraction of food eaten by the specified dog.\n    \"\"\"\n    # Calculate the total amount of food eaten by all dogs\n    total_food = df['Kilograms of food'].sum()\n    \n    # Filter the DataFrame for the specified dog\n    dog_df = df[df['Dog'] == dog_name]\n    if not dog_df.empty:\n        dog_food = dog_df['Kilograms of food'].values[0]\n        # Calculate and return the fraction of food eaten by the specified dog\n        return Fraction(dog_food, total_food).limit_denominator()\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Dog': ['Lucky', 'Ginger', 'Scout'],\n    'Kilograms of food': [25, 8, 48]\n})\n# Call the tool to solve the problem\nprint(calculate_food_fraction(df, 'Scout'))"}
{"question":"For an economics project, Tucker determined the cost of ferry rides for bicycles and cars. How much higher is the fare for a bicycle on the Fauntleroy-Vashon ferry than on the Ocracoke ferry?","answer":2.0,"table":"Ferry | Car | Bicycle\nOcracoke | $15 | $3\nFauntleroy-Vashon | $15 | $5\nSouthport-Fort Fisher | $5 | $2\nMukilteu-Clinton | $7 | $5\nSeattle-Bremerton | $12 | $8","level":5,"tool_id":9832,"code":"import pandas as pd\n\ndef calculate_fare_difference(df, ferry1, ferry2, vehicle_type):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry fare table, two ferry names, and a vehicle type, and returns the fare difference for the vehicle type between the two ferries.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ferry names and their fares for different vehicle types with columns 'Ferry', 'Car', and 'Bicycle'.\n    ferry1 (str): The name of the first ferry.\n    ferry2 (str): The name of the second ferry.\n    vehicle_type (str): The type of vehicle ('Car' or 'Bicycle').\n    Returns:\n    float: The fare difference for the vehicle type between the two ferries.\n    \"\"\"\n    # Filter the DataFrame for the specific ferries\n    ferry1_df = df[df['Ferry'] == ferry1]\n    ferry2_df = df[df['Ferry'] == ferry2]\n    \n    # Get the fares for the vehicle type on the two ferries\n    ferry1_fare = ferry1_df[vehicle_type].values[0]\n    ferry2_fare = ferry2_df[vehicle_type].values[0]\n    \n    # Calculate and return the fare difference\n    fare_difference = ferry2_fare - ferry1_fare\n    return fare_difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Ocracoke', 'Fauntleroy-Vashon', 'Southport-Fort Fisher', 'Mukilteu-Clinton', 'Seattle-Bremerton'],\n    'Car': [15, 15, 5, 7, 12],\n    'Bicycle': [3, 5, 2, 5, 8]\n})\n\n# Call the tool to solve the problem\nfare_difference = calculate_fare_difference(df, 'Ocracoke', 'Fauntleroy-Vashon', 'Bicycle')\nprint(f\"The fare for a bicycle on the Fauntleroy-Vashon ferry is ${fare_difference} higher than on the Ocracoke ferry.\")"}
{"question":"Each block has 10 traffic cones. How many traffic cones are on 3 blocks?","answer":30.0,"table":"Number of blocks | Number of traffic cones\n1 | 10\n2 | 20\n3 | ?","level":2,"tool_id":14398,"code":"import pandas as pd\n\ndef calculate_traffic_cones(df, blocks):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of blocks and traffic cones, and a number of blocks, and returns the number of traffic cones on the given number of blocks.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of blocks and the corresponding number of traffic cones with columns 'Number of blocks' and 'Number of traffic cones'.\n    blocks (int): The number of blocks.\n    Returns:\n    int: The number of traffic cones on the given number of blocks.\n    \"\"\"\n    # Find the number of traffic cones per block\n    cones_per_block = df['Number of traffic cones'][0] \/ df['Number of blocks'][0]\n    \n    # Calculate the number of traffic cones on the given number of blocks\n    cones = cones_per_block * blocks\n    \n    return cones","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of blocks': [1, 2],\n    'Number of traffic cones': [10, 20]\n})\n\n# Call the tool to solve the problem\ncones_on_3_blocks = calculate_traffic_cones(df, 3)\nprint(cones_on_3_blocks)"}
{"question":"For an economics project, Will determined the cost of ferry rides for bicycles and cars. How much higher is the fare for a bicycle on the Seattle-Bremerton ferry than on the Ocracoke ferry?","answer":5.0,"table":"Ferry | Bicycle | Car\nOcracoke | $3 | $15\nSouthport-Fort Fisher | $2 | $5\nSeattle-Bremerton | $8 | $12","level":4,"tool_id":6629,"code":"import pandas as pd\n\ndef calculate_fare_difference(df, ferry1, ferry2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry fare table and two ferry names, and returns the fare difference for a bicycle between the two ferries.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ferry names and their fares for bicycles and cars with columns 'Ferry', 'Bicycle', and 'Car'.\n    ferry1 (str): The name of the first ferry.\n    ferry2 (str): The name of the second ferry.\n    Returns:\n    float: The fare difference for a bicycle between the two ferries.\n    \"\"\"\n    # Filter the DataFrame for the specific ferries\n    ferry1_df = df[df['Ferry'] == ferry1]\n    ferry2_df = df[df['Ferry'] == ferry2]\n    \n    # Calculate the fare difference\n    fare_difference = ferry1_df['Bicycle'].values[0] - ferry2_df['Bicycle'].values[0]\n    \n    return fare_difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Ocracoke', 'Southport-Fort Fisher', 'Seattle-Bremerton'],\n    'Bicycle': [3, 2, 8],\n    'Car': [15, 5, 12]\n})\n\n# Call the tool to solve the problem\nfare_difference = calculate_fare_difference(df, 'Seattle-Bremerton', 'Ocracoke')\n\n# Print the answer\nprint(f\"The fare for a bicycle on the Seattle-Bremerton ferry is ${fare_difference} higher than on the Ocracoke ferry.\")"}
{"question":"Oakland requires all dogs to be registered with the city and keeps records of the distribution of different breeds. What fraction of dogs registered with the city are German Shepherds? Simplify your answer.","answer":0.4388888889,"table":"Breed | Number of dogs registered\nGerman Shepherds | 790\nLabrador Retrievers | 350\nOther | 660","level":7,"tool_id":4444,"code":"import pandas as pd\n\ndef calculate_fraction_of_dogs(df, breed):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of dog breeds and their number of registrations, and returns the fraction of dogs of a specific breed.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing dog breeds and their number of registrations with columns 'Breed' and 'Number of dogs registered'.\n    breed (str): The breed of dog for which the fraction is to be calculated.\n    Returns:\n    float: The fraction of dogs of the specified breed.\n    \"\"\"\n    # Filter the DataFrame for the specific breed\n    breed_df = df[df['Breed'] == breed]\n    if not breed_df.empty:\n        breed_count = breed_df['Number of dogs registered'].values[0]\n        total_count = df['Number of dogs registered'].sum()\n        fraction = breed_count \/ total_count\n        return fraction\n    else:\n        return 0.0","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Breed': ['German Shepherds', 'Labrador Retrievers', 'Other'],\n    'Number of dogs registered': [790, 350, 660]\n})\n# Call the tool to solve the problem\nfraction = calculate_fraction_of_dogs(df, 'German Shepherds')\nprint(f\"The fraction of dogs that are German Shepherds is {fraction}.\")"}
{"question":"A transportation analyst compared various bridges' tolls. How much higher is the toll for a car on the George Washington bridge than on the Fort Madison bridge?","answer":7.0,"table":"Bridge | Car | Carpool\nHatem | $5 | $5\nGeorge Washington | $8 | $2\nFort Madison | $1 | $1\nTacoma Narrows | $3 | $3","level":4,"tool_id":15172,"code":"import pandas as pd\n\ndef calculate_toll_difference(df, bridge1, bridge2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a bridge toll table and two bridge names, and returns the difference in tolls for a car between the two bridges.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge names and their tolls with columns 'Bridge', 'Car', and 'Carpool'.\n    bridge1 (str): The name of the first bridge.\n    bridge2 (str): The name of the second bridge.\n    Returns:\n    float: The difference in tolls for a car between the two bridges.\n    \"\"\"\n    # Filter the DataFrame for the specific bridges\n    bridge1_df = df[df['Bridge'] == bridge1]\n    bridge2_df = df[df['Bridge'] == bridge2]\n    \n    # Check if the bridges exist in the DataFrame\n    if not bridge1_df.empty and not bridge2_df.empty:\n        # Calculate the difference in tolls\n        toll_difference = bridge1_df['Car'].values[0] - bridge2_df['Car'].values[0]\n        return toll_difference\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['Hatem', 'George Washington', 'Fort Madison', 'Tacoma Narrows'],\n    'Car': [5, 8, 1, 3],\n    'Carpool': [5, 2, 1, 3]\n})\n\n# Call the tool to solve the problem\ntoll_difference = calculate_toll_difference(df, 'George Washington', 'Fort Madison')\n\n# Print the answer\nprint(toll_difference)"}
{"question":"A transportation analyst compared various bridges' tolls. How much higher is the toll for a car on the Hatem bridge than on the Tacoma Narrows bridge?","answer":2.0,"table":"Bridge | Truck | Car\nTacoma Narrows | $4 | $3\nGolden Gate | $7 | $6\nHatem | $10 | $5","level":5,"tool_id":12874,"code":"import pandas as pd\n\ndef calculate_toll_difference(df, bridge1, bridge2, vehicle_type):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a toll table, two bridge names, and a vehicle type, and returns the difference in tolls between the two bridges for the specified vehicle type.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge names and their tolls for different vehicle types.\n    bridge1 (str): The name of the first bridge.\n    bridge2 (str): The name of the second bridge.\n    vehicle_type (str): The type of vehicle.\n    Returns:\n    float: The difference in tolls between the two bridges for the specified vehicle type.\n    \"\"\"\n    # Filter the DataFrame for the specific bridges and vehicle type\n    bridge1_df = df[df['Bridge'] == bridge1]\n    bridge2_df = df[df['Bridge'] == bridge2]\n    \n    # Get the tolls for the specified vehicle type on the two bridges\n    toll_bridge1 = bridge1_df[vehicle_type].values[0]\n    toll_bridge2 = bridge2_df[vehicle_type].values[0]\n    \n    # Calculate the difference in tolls\n    toll_difference = toll_bridge2 - toll_bridge1\n    \n    return toll_difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['Tacoma Narrows', 'Golden Gate', 'Hatem'],\n    'Truck': [4, 7, 10],\n    'Car': [3, 6, 5]\n})\n# Call the tool to solve the problem\ntoll_difference = calculate_toll_difference(df, 'Hatem', 'Tacoma Narrows', 'Car')\nprint(toll_difference)"}
{"question":"A transportation analyst compared various bridges' tolls. How much higher is the toll for a car on the Hatem bridge than on the Tacoma Narrows bridge?","answer":2.0,"table":"Bridge | Car | Carpool\nHatem | $5 | $5\nFort Madison | $1 | $1\nTacoma Narrows | $3 | $3","level":5,"tool_id":14396,"code":"import pandas as pd\n\ndef calculate_toll_difference(df, bridge1, bridge2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a bridge toll table and two bridge names, and returns the difference in tolls for a car between the two bridges.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge names and their tolls with columns 'Bridge', 'Car', and 'Carpool'.\n    bridge1 (str): The name of the first bridge.\n    bridge2 (str): The name of the second bridge.\n    Returns:\n    float: The difference in tolls for a car between the two bridges.\n    \"\"\"\n    # Filter the DataFrame for the specific bridges\n    bridge1_df = df[df['Bridge'] == bridge1]\n    bridge2_df = df[df['Bridge'] == bridge2]\n    \n    # Get the tolls for a car on the two bridges\n    bridge1_toll = bridge1_df['Car'].values[0]\n    bridge2_toll = bridge2_df['Car'].values[0]\n    \n    # Calculate and return the difference in tolls\n    toll_difference = bridge1_toll - bridge2_toll\n    return toll_difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['Hatem', 'Fort Madison', 'Tacoma Narrows'],\n    'Car': [5, 1, 3],\n    'Carpool': [5, 1, 3]\n})\n\n# Call the tool to solve the problem\ntoll_difference = calculate_toll_difference(df, 'Hatem', 'Tacoma Narrows')\nprint(toll_difference)"}
{"question":"The owner of a plant nursery wrote down the number of roses on each bush. What is the smallest number of roses?","answer":16.0,"table":"Stem | Leaf \n1 | 6, 7\n2 | \n3 | 2, 8\n4 | 2\n5 | 3, 4\n6 | 5, 6\n7 | 3, 6\n8 | 2, 8","level":4,"tool_id":10001,"code":"import pandas as pd\n\ndef find_smallest_number_of_roses(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of roses per bush, and returns the smallest number of roses.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of roses per bush with columns 'Stem' and 'Leaf'.\n    Returns:\n    int: The smallest number of roses.\n    \"\"\"\n    # Initialize the smallest number of roses\n    smallest_roses = float('inf')\n    \n    # Iterate through the DataFrame to find the smallest number of roses\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            roses = stem * 10 + leaf[j]\n            if roses < smallest_roses:\n                smallest_roses = roses\n                \n    return smallest_roses","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8],\n    'Leaf': [[6, 7], [], [2, 8], [2], [3, 4], [5, 6], [3, 6], [2, 8]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number_of_roses(df))"}
{"question":"The owner of a plant nursery wrote down the number of roses on each bush. What is the smallest number of roses?","answer":35.0,"table":"Stem | Leaf \n3 | 5, 9\n4 | 0, 0, 1, 4, 6, 6, 6\n5 | 1, 2, 3, 4, 5, 6, 9, 9\n6 | 3, 3, 5, 7","level":7,"tool_id":14229,"code":"import pandas as pd\n\ndef find_smallest_number_of_roses(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of roses per bush, and returns the smallest number of roses on a bush.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of roses per bush with columns 'Stem' and 'Leaf'.\n    Returns:\n    int: The smallest number of roses on a bush.\n    \"\"\"\n    # Initialize the smallest number of roses\n    smallest_roses = float('inf')\n    \n    # Iterate through the DataFrame to find the smallest number of roses\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            roses = stem * 10 + leaf[j]\n            if roses < smallest_roses:\n                smallest_roses = roses\n                \n    return smallest_roses","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [3, 4, 5, 6],\n    'Leaf': [[5, 9], [0, 0, 1, 4, 6, 6, 6], [1, 2, 3, 4, 5, 6, 9, 9], [3, 3, 5, 7]]\n})\n\n# Call the tool to solve the problem\nprint(find_smallest_number_of_roses(df))"}
{"question":"The owner of a plant nursery wrote down the number of roses on each bush. What is the smallest number of roses?","answer":27.0,"table":"Stem | Leaf \n2 | 7, 9\n3 | 2, 7\n4 | 0, 4, 4, 8, 9, 9\n5 | 4, 7\n6 | 1, 6\n7 | 2, 9, 9\n8 | 5\n9 | 0","level":8,"tool_id":8916,"code":"import pandas as pd\n\ndef find_smallest_number(df):\n    \"\"\"\n    This function takes in a pandas dataframe of roses per bush, and returns the smallest number of roses.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of roses per bush.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The smallest number of roses.\n    \"\"\"\n    # prepare a list to calculate roses in each bush\n    roses = []\n    # calculate the total number of roses in each bush\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            roses.append(stem * 10 + leaf[j])\n    # find the smallest number of roses\n    smallest = min(roses)\n    return smallest","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[7, 9], [2, 7], [0, 4, 4, 8, 9, 9], [4, 7], [1, 6], [2, 9, 9], [5], [0]]\n})\n# Call the tool to solve the problem\nprint(find_smallest_number(df))"}
{"question":"For an economics project, Franklin determined the cost of ferry rides for bicycles and cars. How much higher is the fare for a bicycle on the Seattle-Bremerton ferry than on the Ocracoke ferry?","answer":5.0,"table":"Ferry | Car | Bicycle\nOcracoke | $15 | $3\nFauntleroy-Vashon | $15 | $5\nSeattle-Bremerton | $12 | $8\nSouthport-Fort Fisher | $5 | $2","level":5,"tool_id":2987,"code":"import pandas as pd\n\ndef calculate_fare_difference(df, ferry1, ferry2, vehicle_type):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry fare table, two ferry names, and a vehicle type, and returns the fare difference between the two ferries for the specified vehicle type.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ferry names, car fares, and bicycle fares with columns 'Ferry', 'Car', and 'Bicycle'.\n    ferry1 (str): The name of the first ferry.\n    ferry2 (str): The name of the second ferry.\n    vehicle_type (str): The type of vehicle for which the fare difference is to be calculated. It should be either 'Car' or 'Bicycle'.\n    Returns:\n    float: The fare difference between the two ferries for the specified vehicle type.\n    \"\"\"\n    # Filter the DataFrame for the specific ferries\n    ferry1_df = df[df['Ferry'] == ferry1]\n    ferry2_df = df[df['Ferry'] == ferry2]\n    \n    # Check if both ferries are in the DataFrame\n    if not ferry1_df.empty and not ferry2_df.empty:\n        # Calculate the fare difference\n        fare_difference = abs(ferry1_df[vehicle_type].values[0] - ferry2_df[vehicle_type].values[0])\n        return fare_difference\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Ocracoke', 'Fauntleroy-Vashon', 'Seattle-Bremerton', 'Southport-Fort Fisher'],\n    'Car': [15, 15, 12, 5],\n    'Bicycle': [3, 5, 8, 2]\n})\n# Call the tool to solve the problem\nfare_difference = calculate_fare_difference(df, 'Seattle-Bremerton', 'Ocracoke', 'Bicycle')\nprint(fare_difference)"}
{"question":"An ecologist interested in the nesting patterns of birds counted the number of ducks at local lakes. How many pintail ducks live in Crescent Lake?","answer":2.0,"table":"Lake | Mallard ducks | Pintail ducks\nCrescent Lake | 10 | 2\nRipple Lake | 18 | 12\nAspen Lake | 2 | 2","level":5,"tool_id":1390,"code":"import pandas as pd\n\ndef count_pintail_ducks(df, lake_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of duck counts at local lakes and a lake name, and returns the number of pintail ducks at the specified lake.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing lake names and duck counts with columns 'Lake', 'Mallard ducks', and 'Pintail ducks'.\n    lake_name (str): The name of the lake.\n    Returns:\n    int: The number of pintail ducks at the specified lake.\n    \"\"\"\n    # Filter the DataFrame for the specific lake\n    lake_df = df[df['Lake'] == lake_name]\n    if not lake_df.empty:\n        # Return the number of pintail ducks at the specified lake\n        return lake_df['Pintail ducks'].values[0]\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Lake': ['Crescent Lake', 'Ripple Lake', 'Aspen Lake'],\n    'Mallard ducks': [10, 18, 2],\n    'Pintail ducks': [2, 12, 2]\n})\n# Call the tool to solve the problem\nprint(count_pintail_ducks(df, 'Crescent Lake'))"}
{"question":"Kenny's class is having a holiday party, and he is in charge of bringing juice. He decides to bring powdered juice mix and add water to it at school. There is a proportional relationship between the volume of water Kenny uses to make the juice (in liters), x, and the number of scoops of juice mix he uses, y. What is the constant of proportionality? Write your answer as a whole number or decimal.","answer":2.0,"table":"5 | 10\n6 | 12\n7 | 14\n8 | 16","level":7,"tool_id":4172,"code":"import pandas as pd\n\ndef calculate_constant_of_proportionality(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of the volume of water and the number of scoops of juice mix, and returns the constant of proportionality.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the volume of water and the number of scoops of juice mix with columns 'x' and 'y'.\n    Returns:\n    float: The constant of proportionality.\n    \"\"\"\n    # Calculate the constant of proportionality by dividing the number of scoops by the volume of water\n    df['k'] = df['y'] \/ df['x']\n    \n    # Return the mean of the constant of proportionality column\n    return df['k'].mean()","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'x': [5, 6, 7, 8],\n    'y': [10, 12, 14, 16]\n})\n# Call the tool to solve the problem\nprint(calculate_constant_of_proportionality(df))"}
{"question":"Several people compared how many Web pages they had visited. How many more Web pages did Farid visit than Reba?","answer":296.0,"table":"Person | Number of Web pages\nSteven | 3,498\nFarid | 1,522\nHayley | 4,615\nReba | 1,226","level":3,"tool_id":12689,"code":"import pandas as pd\n\ndef calculate_difference(df, person1, person2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of people and the number of web pages they visited, and returns the difference in the number of web pages visited by two specified people.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing people's names and the number of web pages they visited with columns 'Person' and 'Number of Web pages'.\n    person1 (str): The name of the first person.\n    person2 (str): The name of the second person.\n    Returns:\n    int: The difference in the number of web pages visited by the two people.\n    \"\"\"\n    # Filter the DataFrame for the specific people\n    person1_df = df[df['Person'] == person1]\n    person2_df = df[df['Person'] == person2]\n    \n    # Get the number of web pages visited by each person\n    person1_pages = person1_df['Number of Web pages'].values[0]\n    person2_pages = person2_df['Number of Web pages'].values[0]\n    \n    # Calculate the difference\n    difference = person1_pages - person2_pages\n    \n    return difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Person': ['Steven', 'Farid', 'Hayley', 'Reba'],\n    'Number of Web pages': [3498, 1522, 4615, 1226]\n})\n# Call the tool to solve the problem\ndifference = calculate_difference(df, 'Farid', 'Reba')\nprint(difference)"}
{"question":"For an economics project, Regan determined the cost of ferry rides for bicycles and cars. How much higher is the fare for a bicycle on the Seattle-Bremerton ferry than on the Southport-Fort Fisher ferry?","answer":6.0,"table":"Ferry | Car | Bicycle\nSouthport-Fort Fisher | $5 | $2\nOcracoke | $15 | $3\nSeattle-Bremerton | $12 | $8\nMukilteu-Clinton | $7 | $5","level":5,"tool_id":9401,"code":"import pandas as pd\n\ndef calculate_fare_difference(df, ferry1, ferry2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry fare table, and two ferry names, and returns the fare difference for a bicycle between the two ferries.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ferry names and their fares for cars and bicycles with columns 'Ferry', 'Car', and 'Bicycle'.\n    ferry1 (str): The name of the first ferry.\n    ferry2 (str): The name of the second ferry.\n    Returns:\n    float: The fare difference for a bicycle between the two ferries.\n    \"\"\"\n    # Filter the DataFrame for the specific ferries\n    ferry1_df = df[df['Ferry'] == ferry1]\n    ferry2_df = df[df['Ferry'] == ferry2]\n    \n    # Calculate the fare difference\n    fare_difference = ferry1_df['Bicycle'].values[0] - ferry2_df['Bicycle'].values[0]\n    \n    return fare_difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Southport-Fort Fisher', 'Ocracoke', 'Seattle-Bremerton', 'Mukilteu-Clinton'],\n    'Car': [5, 15, 12, 7],\n    'Bicycle': [2, 3, 8, 5]\n})\n\n# Call the tool to solve the problem\nfare_difference = calculate_fare_difference(df, 'Seattle-Bremerton', 'Southport-Fort Fisher')\nprint(f\"The fare for a bicycle on the Seattle-Bremerton ferry is ${fare_difference} higher than on the Southport-Fort Fisher ferry.\")"}
{"question":"An ecologist interested in the nesting patterns of birds counted the number of ducks at local lakes. How many pintail ducks live in Midnight Lake?","answer":19.0,"table":"Lake | Pintail ducks | Wood ducks\nAspen Lake | 8 | 3\nMeadow Lake | 8 | 9\nMidnight Lake | 19 | 17","level":5,"tool_id":11645,"code":"import pandas as pd\n\ndef count_ducks(df, lake, duck_type):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of duck counts at different lakes, the name of a lake, and the type of duck, and returns the number of that type of duck at the specified lake.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of different types of ducks at different lakes. The DataFrame should have columns 'Lake', 'Pintail ducks', and 'Wood ducks'.\n    lake (str): The name of the lake.\n    duck_type (str): The type of duck.\n    Returns:\n    int: The number of the specified type of duck at the specified lake.\n    \"\"\"\n    # Filter the DataFrame for the specified lake\n    lake_df = df[df['Lake'] == lake]\n    \n    # If the lake is not in the DataFrame, return 0\n    if lake_df.empty:\n        return 0\n    \n    # Return the number of the specified type of duck at the specified lake\n    return lake_df[duck_type].values[0]","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Lake': ['Aspen Lake', 'Meadow Lake', 'Midnight Lake'],\n    'Pintail ducks': [8, 8, 19],\n    'Wood ducks': [3, 9, 17]\n})\n# Call the tool to solve the problem\nprint(count_ducks(df, 'Midnight Lake', 'Pintail ducks'))"}
{"question":"The owner of a plant nursery wrote down the number of roses on each bush. How many bushes have fewer than 23 roses?","answer":1.0,"table":"Stem | Leaf \n1 | 3\n2 | 5\n3 | \n4 | 2, 6\n5 | \n6 | 2\n7 | 3, 6, 7, 8","level":6,"tool_id":13138,"code":"import pandas as pd\ndef count_bushes_with_less_than_23_roses(df):\n    \"\"\"\n    This function takes in a pandas dataframe of roses per bush, and returns the number of bushes that have less than 23 roses.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of roses per bush.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of bushes that have less than 23 roses.\n    \"\"\"\n    # prepare a list to calculate roses in each bush\n    roses = []\n    # calculate the total number of roses in each bush\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            roses.append(stem * 10 + leaf[j])\n    # filter the bushes where the total number of roses is less than 23\n    filtered = [rose for rose in roses if rose < 23]\n    # count the number of rows\n    num_bushes = len(filtered)\n    return num_bushes","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7],\n    'Leaf': [[3], [5], [], [2, 6], [], [2], [3, 6, 7, 8]]\n})\n# Call the tool to solve the problem\nprint(count_bushes_with_less_than_23_roses(df))"}
{"question":"For an economics project, Erik determined the cost of ferry rides for bicycles and cars. How much higher is the fare for a bicycle on the Fauntleroy-Vashon ferry than on the Ocracoke ferry?","answer":2.0,"table":"Ferry | Bicycle | Car\nMukilteu-Clinton | $5 | $7\nOcracoke | $3 | $15\nFauntleroy-Vashon | $5 | $15","level":4,"tool_id":16672,"code":"import pandas as pd\n\ndef calculate_fare_difference(df, ferry1, ferry2, vehicle_type):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry fare table, two ferry names, and a vehicle type, and returns the fare difference between the two ferries for the specified vehicle type.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ferry names and fares for bicycles and cars with columns 'Ferry', 'Bicycle', and 'Car'.\n    ferry1 (str): The name of the first ferry.\n    ferry2 (str): The name of the second ferry.\n    vehicle_type (str): The type of vehicle ('Bicycle' or 'Car').\n    Returns:\n    float: The fare difference between the two ferries for the specified vehicle type.\n    \"\"\"\n    # Filter the DataFrame for the specific ferries\n    ferry1_df = df[df['Ferry'] == ferry1]\n    ferry2_df = df[df['Ferry'] == ferry2]\n    \n    # Get the fares for the specified vehicle type\n    fare1 = ferry1_df[vehicle_type].values[0]\n    fare2 = ferry2_df[vehicle_type].values[0]\n    \n    # Calculate the fare difference\n    fare_difference = abs(fare1 - fare2)\n    \n    return fare_difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Mukilteu-Clinton', 'Ocracoke', 'Fauntleroy-Vashon'],\n    'Bicycle': [5, 3, 5],\n    'Car': [7, 15, 15]\n})\n\n# Call the tool to solve the problem\nfare_difference = calculate_fare_difference(df, 'Fauntleroy-Vashon', 'Ocracoke', 'Bicycle')\nprint(fare_difference)"}
{"question":"Each cage has 2 rabbits. How many rabbits are in 4 cages?","answer":8.0,"table":"Number of cages | Number of rabbits\n1 | 2\n2 | 4\n3 | 6\n4 | ?","level":1,"tool_id":7454,"code":"def find_missing_value(df, column_with_missing_value, column_with_known_value, known_value):\n    \"\"\"\n    This function takes in a pandas DataFrame with a missing value, the name of the column with the missing value, the name of the column with a known value, and the known value.\n    It returns the missing value by finding the row with the known value and calculating the missing value based on the relationship between the columns.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the table with a missing value.\n    column_with_missing_value (str): The name of the column with the missing value.\n    column_with_known_value (str): The name of the column with a known value.\n    known_value (int or float): The known value in the column_with_known_value.\n    Returns:\n    int or float: The missing value in the column_with_missing_value.\n    \"\"\"\n    # Find the row with the known value\n    row_with_known_value = df[df[column_with_known_value] == known_value]\n    \n    # Calculate the missing value based on the relationship between the columns\n    missing_value = row_with_known_value[column_with_missing_value].values[0] * (known_value \/ row_with_known_value[column_with_known_value].values[0])\n    \n    return missing_value","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of cages': [1, 2, 3, 4],\n    'Number of rabbits': [2, 4, 6, None]\n})\n# Call the tool to solve the problem\nmissing_value = find_missing_value(df, 'Number of rabbits', 'Number of cages', 4)\nprint(missing_value)"}
{"question":"The owner of a plant nursery wrote down the number of roses on each bush. How many bushes have fewer than 40 roses?","answer":10.0,"table":"Stem | Leaf \n1 | 4, 4, 5\n2 | 4, 5\n3 | 6, 6, 6, 7, 9\n4 | 1, 1, 7\n5 | 0, 3, 7\n6 | 1, 9","level":8,"tool_id":10357,"code":"import pandas as pd\ndef count_bushes_with_less_than_40_roses(df):\n    \"\"\"\n    This function takes in a pandas dataframe of roses per bush, and returns the number of bushes that have less than 40 roses.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of roses per bush.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of bushes that have less than 40 roses.\n    \"\"\"\n    # prepare a list to calculate roses in each bush\n    roses = []\n    # calculate the total number of roses in each bush\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            roses.append(stem * 10 + leaf[j])\n    # filter the bushes where the total number of roses is less than 40\n    filtered = [rose for rose in roses if rose < 40]\n    # count the number of rows\n    num_bushes = len(filtered)\n    return num_bushes","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6],\n    'Leaf': [[4, 4, 5], [4, 5], [6, 6, 6, 7, 9], [1, 1, 7], [0, 3, 7], [1, 9]]\n})\n# Call the tool to solve the problem\nprint(count_bushes_with_less_than_40_roses(df))"}
{"question":"A transportation analyst compared various bridges' tolls. How much higher is the toll for a car on the George Washington bridge than on the Tacoma Narrows bridge?","answer":5.0,"table":"Bridge | Car | Carpool\nGeorge Washington | $8 | $2\nHatem | $5 | $5\nTacoma Narrows | $3 | $3","level":4,"tool_id":7564,"code":"import pandas as pd\n\ndef calculate_toll_difference(df, bridge1, bridge2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a toll table and two bridge names, and returns the difference in tolls for a car between the two bridges.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge names and their tolls with columns 'Bridge', 'Car', and 'Carpool'.\n    bridge1 (str): The name of the first bridge.\n    bridge2 (str): The name of the second bridge.\n    Returns:\n    float: The difference in tolls for a car between the two bridges.\n    \"\"\"\n    # Filter the DataFrame for the specific bridges\n    bridge1_df = df[df['Bridge'] == bridge1]\n    bridge2_df = df[df['Bridge'] == bridge2]\n    \n    # Get the tolls for a car on the two bridges\n    toll_bridge1 = bridge1_df['Car'].values[0]\n    toll_bridge2 = bridge2_df['Car'].values[0]\n    \n    # Calculate the difference in tolls\n    toll_difference = toll_bridge1 - toll_bridge2\n    \n    return toll_difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['George Washington', 'Hatem', 'Tacoma Narrows'],\n    'Car': [8, 5, 3],\n    'Carpool': [2, 5, 3]\n})\n\n# Call the tool to solve the problem\ntoll_difference = calculate_toll_difference(df, 'George Washington', 'Tacoma Narrows')\n\n# Print the answer\nprint(toll_difference)"}
{"question":"For an economics project, Raymond determined the cost of ferry rides for bicycles and cars. How much does it cost to take a car on the Seattle-Bremerton ferry?","answer":12.0,"table":"Ferry | Bicycle | Car\nSeattle-Bremerton | $8 | $12\nOcracoke | $3 | $15\nSouthport-Fort Fisher | $2 | $5\nMukilteu-Clinton | $5 | $7\nFauntleroy-Vashon | $5 | $15","level":5,"tool_id":11199,"code":"import pandas as pd\n\ndef get_ferry_cost(df, ferry_name, vehicle_type):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry cost table, a ferry name, and a vehicle type, and returns the cost of the ferry ride for the specified vehicle type.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ferry names and their costs for different vehicle types with columns 'Ferry', 'Bicycle', and 'Car'.\n    ferry_name (str): The name of the ferry.\n    vehicle_type (str): The type of the vehicle.\n    Returns:\n    float: The cost of the ferry ride for the specified vehicle type.\n    \"\"\"\n    # Filter the DataFrame for the specific ferry\n    ferry_df = df[df['Ferry'] == ferry_name]\n    if not ferry_df.empty:\n        # Get the cost for the specified vehicle type\n        cost = ferry_df[vehicle_type].values[0]\n        return cost\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Seattle-Bremerton', 'Ocracoke', 'Southport-Fort Fisher', 'Mukilteu-Clinton', 'Fauntleroy-Vashon'],\n    'Bicycle': [8, 3, 2, 5, 5],\n    'Car': [12, 15, 5, 7, 15]\n})\n# Call the tool to solve the problem\nprint(get_ferry_cost(df, 'Seattle-Bremerton', 'Car'))"}
{"question":"For an economics project, Joy determined the cost of ferry rides for bicycles and cars. How much higher is the fare for a bicycle on the Seattle-Bremerton ferry than on the Fauntleroy-Vashon ferry?","answer":3.0,"table":"Ferry | Bicycle | Car\nSeattle-Bremerton | $8 | $12\nSouthport-Fort Fisher | $2 | $5\nFauntleroy-Vashon | $5 | $15\nOcracoke | $3 | $15\nMukilteu-Clinton | $5 | $7","level":5,"tool_id":7326,"code":"import pandas as pd\n\ndef calculate_fare_difference(df, ferry1, ferry2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry fare table and two ferry names, and returns the difference in bicycle fare between the two ferries.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ferry names and their fares for bicycles and cars with columns 'Ferry', 'Bicycle', and 'Car'.\n    ferry1 (str): The name of the first ferry.\n    ferry2 (str): The name of the second ferry.\n    Returns:\n    float: The difference in bicycle fare between the two ferries.\n    \"\"\"\n    # Filter the DataFrame for the specific ferries\n    ferry1_df = df[df['Ferry'] == ferry1]\n    ferry2_df = df[df['Ferry'] == ferry2]\n    \n    # Check if the ferries exist in the DataFrame\n    if not ferry1_df.empty and not ferry2_df.empty:\n        # Calculate the difference in bicycle fare\n        fare_difference = ferry1_df['Bicycle'].values[0] - ferry2_df['Bicycle'].values[0]\n        return fare_difference\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Seattle-Bremerton', 'Southport-Fort Fisher', 'Fauntleroy-Vashon', 'Ocracoke', 'Mukilteo-Clinton'],\n    'Bicycle': [8, 2, 5, 3, 5],\n    'Car': [12, 5, 15, 15, 7]\n})\n\n# Call the tool to solve the problem\nfare_difference = calculate_fare_difference(df, 'Seattle-Bremerton', 'Fauntleroy-Vashon')\n\n# Print the answer\nprint(fare_difference)"}
{"question":"Eddie tracked the attendance at the school play. How many more people attended the play on Monday than on Saturday?","answer":450.0,"table":"Day | Number of tickets\nSaturday | 388\nSunday | 277\nMonday | 838","level":3,"tool_id":13073,"code":"import pandas as pd\n\ndef calculate_difference(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of attendance and two days, and returns the difference in attendance between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing days and the number of tickets with columns 'Day' and 'Number of tickets'.\n    day1 (str): The first day.\n    day2 (str): The second day.\n    Returns:\n    int: The difference in attendance between the two days.\n    \"\"\"\n    # Filter the DataFrame for the specific days\n    day1_df = df[df['Day'] == day1]\n    day2_df = df[df['Day'] == day2]\n    \n    # Get the number of tickets for each day\n    day1_tickets = day1_df['Number of tickets'].values[0]\n    day2_tickets = day2_df['Number of tickets'].values[0]\n    \n    # Calculate the difference in attendance\n    difference = day2_tickets - day1_tickets\n    \n    return difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Saturday', 'Sunday', 'Monday'],\n    'Number of tickets': [388, 277, 838]\n})\n\n# Call the tool to solve the problem\ndifference = calculate_difference(df, 'Monday', 'Saturday')\nprint(difference)"}
{"question":"Josh was the lucky journalist assigned to cover the Best Beard Competition. He recorded the contestants' beard colors in his notepad. Josh also noted if the contestants were signed up for the mustache competition later in the day. What is the probability that a randomly selected contestant has a grey beard and is only in the beard competition? Simplify any fractions.","answer":0.3333333333,"table":" | Only in the beard competition | Also in the mustache competition\nRed beard | 5 | 5\nGrey beard | 6 | 2","level":8,"tool_id":12065,"code":"import pandas as pd\n\ndef calculate_probability(df, target_row, target_col):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of beard colors and competition participation, and calculates the probability of a specific condition.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of contestants in each category with columns 'Only in the beard competition' and 'Also in the mustache competition', and rows 'Red beard' and 'Grey beard'.\n    target_row (str): The row label of the target condition (e.g., 'Grey beard').\n    target_col (str): The column label of the target condition (e.g., 'Only in the beard competition').\n    Returns:\n    float: The probability of the target condition.\n    \"\"\"\n    # Calculate the total number of contestants\n    total_contestants = df.sum().sum()\n    \n    # Get the number of contestants in the target condition\n    target_contestants = df.loc[target_row, target_col]\n    \n    # Calculate the probability\n    probability = target_contestants \/ total_contestants\n    \n    return probability","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Only in the beard competition': [5, 6],\n    'Also in the mustache competition': [5, 2]\n}, index=['Red beard', 'Grey beard'])\n\n# Call the tool to solve the problem\nprobability = calculate_probability(df, 'Grey beard', 'Only in the beard competition')\n\n# Print the answer\nprint(f\"The probability that a randomly selected contestant has a grey beard and is only in the beard competition is {probability}.\")"}
{"question":"For an economics project, Layla determined the cost of ferry rides for bicycles and cars. How much does it cost to take a bicycle on the Southport-Fort Fisher ferry?","answer":2.0,"table":"Ferry | Car | Bicycle\nSeattle-Bremerton | $12 | $8\nMukilteu-Clinton | $7 | $5\nSouthport-Fort Fisher | $5 | $2\nFauntleroy-Vashon | $15 | $5\nOcracoke | $15 | $3","level":4,"tool_id":1902,"code":"import pandas as pd\n\ndef get_bicycle_ferry_cost(df, ferry_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry cost table and a ferry name, and returns the cost for a bicycle on the specified ferry.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ferry names and their costs for cars and bicycles with columns 'Ferry', 'Car', and 'Bicycle'.\n    ferry_name (str): The name of the ferry.\n    Returns:\n    float: The cost for a bicycle on the specified ferry.\n    \"\"\"\n    # Filter the DataFrame for the specific ferry\n    ferry_df = df[df['Ferry'] == ferry_name]\n    if not ferry_df.empty:\n        bicycle_cost = ferry_df['Bicycle'].values[0]\n        return bicycle_cost\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Seattle-Bremerton', 'Mukilteu-Clinton', 'Southport-Fort Fisher', 'Fauntleroy-Vashon', 'Ocracoke'],\n    'Car': [12, 7, 5, 15, 15],\n    'Bicycle': [8, 5, 2, 5, 3]\n})\n# Call the tool to solve the problem\nbicycle_cost = get_bicycle_ferry_cost(df, 'Southport-Fort Fisher')\nprint(bicycle_cost)"}
{"question":"While writing a paper on making decisions in groups, Daniel researched the size of a number of committees. How many committees have fewer than 61 members?","answer":6.0,"table":"Stem | Leaf \n1 | 9\n2 | 6, 8\n3 | \n4 | 1, 5\n5 | 9\n6 | \n7 | \n8 | 9\n9 | 0","level":8,"tool_id":12885,"code":"import pandas as pd\ndef count_committees_with_fewer_than_61_members(df):\n    \"\"\"\n    This function takes in a pandas dataframe of committee sizes, and returns the number of committees that have fewer than 61 members.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the size of committees.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of committees that have fewer than 61 members.\n    \"\"\"\n    # prepare a list to calculate members in each committee\n    members = []\n    # calculate the total number of members in each committee\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            members.append(stem * 10 + leaf[j])\n    # filter the committees where the total number of members is less than 61\n    filtered = [member for member in members if member < 61]\n    # count the number of rows\n    num_committees = len(filtered)\n    return num_committees","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Leaf': [[9], [6, 8], [], [1, 5], [9], [], [], [9], [0]]\n})\n# Call the tool to solve the problem\nprint(count_committees_with_fewer_than_61_members(df))"}
{"question":"A reporter counted the number of masks local artists made for this year's masquerade ball. How many artists made exactly 6 masks?","answer":0.0,"table":"Masks made | Frequency\n1 | 17\n2 | 18\n3 | 9\n4 | 15\n5 | 2\n6 | 0","level":7,"tool_id":11192,"code":"import pandas as pd\n\ndef count_artists(df, masks):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a frequency table of masks made by artists and a number of masks, and returns the number of artists who made exactly that number of masks.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of masks made and the frequency of artists who made that number of masks. The DataFrame should have columns 'Masks made' and 'Frequency'.\n    masks (int): The number of masks to check.\n    Returns:\n    int: The number of artists who made exactly the specified number of masks.\n    \"\"\"\n    # Filter the DataFrame for the specified number of masks\n    masks_df = df[df['Masks made'] == masks]\n    if not masks_df.empty:\n        # Return the frequency of artists who made the specified number of masks\n        return masks_df['Frequency'].values[0]\n    else:\n        # If no artists made the specified number of masks, return 0\n        return 0","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Masks made': [1, 2, 3, 4, 5, 6],\n    'Frequency': [17, 18, 9, 15, 2, 0]\n})\n# Call the tool to solve the problem\nprint(count_artists(df, 6))"}
{"question":"Matthew was the lucky journalist assigned to cover the Best Beard Competition. He recorded the contestants' beard colors in his notepad. Matthew also noted if the contestants were signed up for the mustache competition later in the day. What is the probability that a randomly selected contestant has a red beard and is only in the beard competition? Simplify any fractions.","answer":0.2142857143,"table":" | Only in the beard competition | Also in the mustache competition\nRed beard | 3 | 3\nGrey beard | 3 | 5","level":8,"tool_id":15114,"code":"import pandas as pd\n\ndef calculate_probability(df, beard_color, competition):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of beard competition data, a beard color, and a competition type, and returns the probability of a randomly selected contestant having the specified beard color and being in the specified competition.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing beard competition data with columns 'Only in the beard competition' and 'Also in the mustache competition', and index as beard colors.\n    beard_color (str): The color of the beard.\n    competition (str): The type of competition ('Only in the beard competition' or 'Also in the mustache competition').\n    Returns:\n    float: The probability of a randomly selected contestant having the specified beard color and being in the specified competition.\n    \"\"\"\n    # Calculate the total number of contestants\n    total_contestants = df.sum().sum()\n    \n    # Get the number of contestants with the specified beard color and in the specified competition\n    num_contestants = df.loc[beard_color, competition]\n    \n    # Calculate the probability\n    probability = num_contestants \/ total_contestants\n    \n    return probability","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Only in the beard competition': [3, 3],\n    'Also in the mustache competition': [3, 5]\n}, index=['Red beard', 'Grey beard'])\n\n# Call the tool to solve the problem\nprobability = calculate_probability(df, 'Red beard', 'Only in the beard competition')\n\n# Print out the answer\nprint(f\"The probability that a randomly selected contestant has a red beard and is only in the beard competition is {probability}.\")"}
{"question":"Newberry requires all dogs to be registered with the city and keeps records of the distribution of different breeds. What fraction of dogs registered with the city are Beagles? Simplify your answer.","answer":0.1809210526,"table":"Breed | Number of dogs registered\nBeagles | 550\nGerman Shepherds | 930\nYorkshire Terriers | 1,000\nGolden Retrievers | 160\nOther | 400","level":7,"tool_id":7590,"code":"import pandas as pd\n\ndef calculate_fraction(df, breed):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of dog breeds and their numbers, and a breed name, and returns the fraction of dogs of that breed.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing dog breeds and their numbers with columns 'Breed' and 'Number of dogs registered'.\n    breed (str): The breed of dog to calculate the fraction for.\n    Returns:\n    float: The fraction of dogs of the specified breed.\n    \"\"\"\n    # Calculate the total number of dogs\n    total_dogs = df['Number of dogs registered'].sum()\n    \n    # Filter the DataFrame for the specific breed\n    breed_df = df[df['Breed'] == breed]\n    if not breed_df.empty:\n        breed_count = breed_df['Number of dogs registered'].values[0]\n        # Calculate and return the fraction\n        return breed_count \/ total_dogs\n    else:\n        return 0","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Breed': ['Beagles', 'German Shepherds', 'Yorkshire Terriers', 'Golden Retrievers', 'Other'],\n    'Number of dogs registered': [550, 930, 1000, 160, 400]\n})\n# Call the tool to solve the problem\nfraction = calculate_fraction(df, 'Beagles')\nprint(fraction)"}
{"question":"For an economics project, Luca determined the cost of ferry rides for bicycles and cars. On the Fauntleroy-Vashon ferry, how much higher is the fare for a car than for a bicycle?","answer":10.0,"table":"Ferry | Bicycle | Car\nMukilteu-Clinton | $5 | $7\nSeattle-Bremerton | $8 | $12\nFauntleroy-Vashon | $5 | $15\nSouthport-Fort Fisher | $2 | $5\nOcracoke | $3 | $15","level":4,"tool_id":7333,"code":"import pandas as pd\n\ndef calculate_fare_difference(df, ferry_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry fare table and a ferry name, and returns the fare difference between a car and a bicycle for the given ferry.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ferry names and their fares for bicycles and cars with columns 'Ferry', 'Bicycle', and 'Car'.\n    ferry_name (str): The name of the ferry.\n    Returns:\n    float: The fare difference between a car and a bicycle for the given ferry.\n    \"\"\"\n    # Filter the DataFrame for the specific ferry\n    ferry_df = df[df['Ferry'] == ferry_name]\n    if not ferry_df.empty:\n        # Calculate the fare difference\n        fare_difference = ferry_df['Car'].values[0] - ferry_df['Bicycle'].values[0]\n        return fare_difference\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Mukilteo-Clinton', 'Seattle-Bremerton', 'Fauntleroy-Vashon', 'Southport-Fort Fisher', 'Ocracoke'],\n    'Bicycle': [5, 8, 5, 2, 3],\n    'Car': [7, 12, 15, 5, 15]\n})\n\n# Call the tool to solve the problem\nfare_difference = calculate_fare_difference(df, 'Fauntleroy-Vashon')\nprint(fare_difference)"}
{"question":"For an economics project, Lucy determined the cost of ferry rides for bicycles and cars. On the Ocracoke ferry, how much higher is the fare for a car than for a bicycle?","answer":12.0,"table":"Ferry | Bicycle | Car\nMukilteu-Clinton | $5 | $7\nSeattle-Bremerton | $8 | $12\nSouthport-Fort Fisher | $2 | $5\nOcracoke | $3 | $15\nFauntleroy-Vashon | $5 | $15","level":4,"tool_id":17185,"code":"import pandas as pd\n\ndef calculate_fare_difference(df, ferry_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry fare table and a ferry name, and returns the fare difference between a car and a bicycle for the specified ferry.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ferry names and their fares for bicycles and cars with columns 'Ferry', 'Bicycle', and 'Car'.\n    ferry_name (str): The name of the ferry.\n    Returns:\n    float: The fare difference between a car and a bicycle for the specified ferry.\n    \"\"\"\n    # Filter the DataFrame for the specific ferry\n    ferry_df = df[df['Ferry'] == ferry_name]\n    if not ferry_df.empty:\n        # Calculate the fare difference\n        fare_difference = ferry_df['Car'].values[0] - ferry_df['Bicycle'].values[0]\n        return fare_difference\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Mukilteu-Clinton', 'Seattle-Bremerton', 'Southport-Fort Fisher', 'Ocracoke', 'Fauntleroy-Vashon'],\n    'Bicycle': [5, 8, 2, 3, 5],\n    'Car': [7, 12, 5, 15, 15]\n})\n# Call the tool to solve the problem\nfare_difference = calculate_fare_difference(df, 'Ocracoke')\nprint(fare_difference)"}
{"question":"Each cage has 2 tortoises. How many tortoises are in 4 cages?","answer":8.0,"table":"Number of cages | Number of tortoises\n1 | 2\n2 | 4\n3 | 6\n4 | ?","level":2,"tool_id":14753,"code":"def calculate_tortoises_in_cages(df, num_cages):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of the number of tortoises in each cage and a number of cages, and returns the number of tortoises in the given number of cages.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of cages and the corresponding number of tortoises with columns 'Number of cages' and 'Number of tortoises'.\n    num_cages (int): The number of cages.\n    Returns:\n    int: The number of tortoises in the given number of cages.\n    \"\"\"\n    # Find the number of tortoises in one cage\n    tortoises_per_cage = df[df['Number of cages'] == 1]['Number of tortoises'].values[0]\n    \n    # Calculate the number of tortoises in the given number of cages\n    num_tortoises = num_cages * tortoises_per_cage\n    \n    return num_tortoises","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of cages': [1, 2, 3, 4],\n    'Number of tortoises': [2, 4, 6, None]\n})\n\n# Call the tool to solve the problem\nnum_tortoises = calculate_tortoises_in_cages(df, 4)\n\n# Print the answer\nprint(num_tortoises)"}
{"question":"A transportation analyst compared various bridges' tolls. How much is the toll for a carpool on the Fort Madison bridge?","answer":1.0,"table":"Bridge | Car | Carpool\nHatem | $5 | $5\nGeorge Washington | $8 | $2\nFort Madison | $1 | $1","level":4,"tool_id":5185,"code":"import pandas as pd\n\ndef get_toll_for_carpool(df, bridge_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of bridge tolls and a bridge name, and returns the toll for a carpool on the specified bridge.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge names and their tolls for cars and carpools with columns 'Bridge', 'Car', and 'Carpool'.\n    bridge_name (str): The name of the bridge.\n    Returns:\n    float: The toll for a carpool on the specified bridge.\n    \"\"\"\n    # Filter the DataFrame for the specific bridge\n    bridge_df = df[df['Bridge'] == bridge_name]\n    if not bridge_df.empty:\n        carpool_toll = bridge_df['Carpool'].values[0]\n        return carpool_toll\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['Hatem', 'George Washington', 'Fort Madison'],\n    'Car': [5, 8, 1],\n    'Carpool': [5, 2, 1]\n})\n# Call the tool to solve the problem\ntoll = get_toll_for_carpool(df, 'Fort Madison')\nprint(toll)"}
{"question":"A transportation analyst compared various bridges' tolls. How much is the toll for a carpool on the Fort Madison bridge?","answer":1.0,"table":"Bridge | Car | Carpool\nFort Madison | $1 | $1\nHatem | $5 | $5\nGeorge Washington | $8 | $2\nTacoma Narrows | $3 | $3","level":5,"tool_id":15198,"code":"import pandas as pd\n\ndef get_toll_for_carpool(df, bridge_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a bridge toll table and a bridge name, and returns the toll for a carpool on the specified bridge.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge names and their tolls with columns 'Bridge', 'Car', and 'Carpool'.\n    bridge_name (str): The name of the bridge.\n    Returns:\n    float: The toll for a carpool on the specified bridge.\n    \"\"\"\n    # Filter the DataFrame for the specific bridge\n    bridge_df = df[df['Bridge'] == bridge_name]\n    if not bridge_df.empty:\n        carpool_toll = bridge_df['Carpool'].values[0]\n        return carpool_toll\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['Fort Madison', 'Hatem', 'George Washington', 'Tacoma Narrows'],\n    'Car': [1, 5, 8, 3],\n    'Carpool': [1, 5, 2, 3]\n})\n# Call the tool to solve the problem\ntoll = get_toll_for_carpool(df, 'Fort Madison')\nprint(toll)"}
{"question":"Every summer, Britney goes on a week-long canoe trip with her childhood camp friends. After the trip, she usually purchases some oars from the destination city. Her collection of oars is organized by year and type of wood. What is the probability that a randomly selected oar was purchased in 2011 and was made from spruce wood? Simplify any fractions.","answer":0.2857142857,"table":" | Spruce wood | Ash wood\n2010 | 2 | 5\n2011 | 4 | 3","level":8,"tool_id":15449,"code":"import pandas as pd\n\ndef calculate_probability(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of oars purchased by year and type of wood, and returns the probability that a randomly selected oar was purchased in 2011 and was made from spruce wood.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of oars purchased by year and type of wood.\n    Returns:\n    float: The probability that a randomly selected oar was purchased in 2011 and was made from spruce wood.\n    \"\"\"\n    # Calculate the total number of oars\n    total_oars = df.sum().sum()\n    \n    # Calculate the number of oars purchased in 2011 and made from spruce wood\n    spruce_2011 = df.loc[2011, 'Spruce wood']\n    \n    # Calculate the probability\n    probability = spruce_2011 \/ total_oars\n    \n    return probability","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Spruce wood': [2, 4],\n    'Ash wood': [5, 3]\n}, index=[2010, 2011])\n\n# Call the tool to solve the problem\nprobability = calculate_probability(df)\nprint(probability)"}
{"question":"Kensington requires all dogs to be registered with the city and keeps records of the distribution of different breeds. What fraction of dogs registered with the city are German Shepherds? Simplify your answer.","answer":0.2166666667,"table":"Breed | Number of dogs registered\nGerman Shepherds | 520\nGolden Retrievers | 990\nOther | 890","level":7,"tool_id":10046,"code":"import pandas as pd\n\ndef calculate_fraction(df, breed):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of dog breeds and their numbers, and a breed name, and returns the fraction of dogs of that breed.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing dog breeds and their numbers with columns 'Breed' and 'Number of dogs registered'.\n    breed (str): The breed name.\n    Returns:\n    float: The fraction of dogs of the specified breed.\n    \"\"\"\n    # Get the total number of dogs\n    total_dogs = df['Number of dogs registered'].sum()\n    \n    # Get the number of dogs of the specified breed\n    breed_dogs = df[df['Breed'] == breed]['Number of dogs registered'].values[0]\n    \n    # Calculate and return the fraction\n    return breed_dogs \/ total_dogs","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Breed': ['German Shepherds', 'Golden Retrievers', 'Other'],\n    'Number of dogs registered': [520, 990, 890]\n})\n\n# Call the tool to solve the problem\nfraction = calculate_fraction(df, 'German Shepherds')\nprint(f\"The fraction of dogs that are German Shepherds is {fraction}\")"}
{"question":"As part of a food drive, four friends collected canned food. What fraction of the cans were collected by Jared? Simplify your answer.","answer":0.0261437908,"table":"Name | Number of cans of food\nRyan | 410\nSue | 730\nJared | 40\nTanner | 350","level":7,"tool_id":10874,"code":"import pandas as pd\n\ndef calculate_fraction(df, name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of names and the number of cans of food they collected, and a name, and returns the fraction of cans collected by the given name.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing names and the number of cans of food they collected with columns 'Name' and 'Number of cans of food'.\n    name (str): The name of the person for whom to calculate the fraction of cans collected.\n    Returns:\n    float: The fraction of cans collected by the given name.\n    \"\"\"\n    # Calculate the total number of cans collected\n    total_cans = df['Number of cans of food'].sum()\n    \n    # Filter the DataFrame for the specific name\n    name_df = df[df['Name'] == name]\n    if not name_df.empty:\n        name_cans = name_df['Number of cans of food'].values[0]\n        # Calculate and return the fraction of cans collected by the given name\n        return name_cans \/ total_cans\n    else:\n        return 0","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Ryan', 'Sue', 'Jared', 'Tanner'],\n    'Number of cans of food': [410, 730, 40, 350]\n})\n# Call the tool to solve the problem\nfraction = calculate_fraction(df, 'Jared')\nprint(f\"The fraction of cans collected by Jared is {fraction}\")"}
{"question":"Each hamburger place has 2 waiters. How many waiters are in 3 hamburger places?","answer":6.0,"table":"Number of hamburger places | Number of waiters\n1 | 2\n2 | 4\n3 | ?","level":2,"tool_id":8069,"code":"def calculate_waiters(hamburger_places, waiters_per_place):\n    \"\"\"\n    This function takes in the number of hamburger places and the number of waiters per place, and returns the total number of waiters.\n    Args:\n    hamburger_places (int): The number of hamburger places.\n    waiters_per_place (int): The number of waiters per hamburger place.\n    Returns:\n    int: The total number of waiters.\n    \"\"\"\n    return hamburger_places * waiters_per_place","api_call":"# Call the tool to solve the problem\nprint(calculate_waiters(3, 2))"}
{"question":"Several people compared how many Web pages they had visited. How many more Web pages did Philip visit than Steven?","answer":544.0,"table":"Person | Number of Web pages\nJavier | 3,778\nHayley | 1,121\nPhilip | 2,752\nMaura | 4,955\nSteven | 2,208","level":3,"tool_id":7290,"code":"import pandas as pd\n\ndef calculate_difference(df, person1, person2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of people and the number of web pages they visited, and returns the difference in the number of web pages visited by two specified people.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing people's names and the number of web pages they visited with columns 'Person' and 'Number of Web pages'.\n    person1 (str): The name of the first person.\n    person2 (str): The name of the second person.\n    Returns:\n    int: The difference in the number of web pages visited by the two people.\n    \"\"\"\n    # Filter the DataFrame for the specific people\n    person1_df = df[df['Person'] == person1]\n    person2_df = df[df['Person'] == person2]\n    \n    # Get the number of web pages visited by each person\n    person1_pages = person1_df['Number of Web pages'].values[0]\n    person2_pages = person2_df['Number of Web pages'].values[0]\n    \n    # Calculate and return the difference\n    return abs(person1_pages - person2_pages)","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Person': ['Javier', 'Hayley', 'Philip', 'Maura', 'Steven'],\n    'Number of Web pages': [3778, 1121, 2752, 4955, 2208]\n})\n\n# Call the tool to solve the problem\ndifference = calculate_difference(df, 'Philip', 'Steven')\nprint(difference)"}
{"question":"Each restaurant table has 2 pepper shakers. How many pepper shakers are on 3 restaurant tables?","answer":6.0,"table":"Number of restaurant tables | Number of pepper shakers\n1 | 2\n2 | 4\n3 | ?","level":2,"tool_id":13860,"code":"def calculate_pepper_shakers(num_tables):\n    \"\"\"\n    This function takes in the number of restaurant tables and returns the number of pepper shakers based on the fact that each table has 2 pepper shakers.\n    Args:\n    num_tables (int): The number of restaurant tables.\n    Returns:\n    int: The number of pepper shakers.\n    \"\"\"\n    # Calculate the number of pepper shakers\n    num_pepper_shakers = num_tables * 2\n    return num_pepper_shakers","api_call":"# Call the tool to solve the problem\nprint(calculate_pepper_shakers(3))"}
{"question":"Billy owns three dogs and monitors how much food they eat in a month. What fraction of the food was eaten by Echo? Simplify your answer.","answer":0.5222222222,"table":"Dog | Kilograms of food\nBandit | 9\nEcho | 47\nBuddy | 34","level":7,"tool_id":13777,"code":"import pandas as pd\nfrom fractions import Fraction\n\ndef calculate_food_fraction(df, dog_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of dogs and the amount of food they eat, and a dog's name, and returns the fraction of food that the dog ate.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing dog names and the amount of food they eat with columns 'Dog' and 'Kilograms of food'.\n    dog_name (str): The name of the dog.\n    Returns:\n    Fraction: The fraction of food that the dog ate.\n    \"\"\"\n    # Calculate the total amount of food\n    total_food = df['Kilograms of food'].sum()\n    \n    # Filter the DataFrame for the specific dog\n    dog_df = df[df['Dog'] == dog_name]\n    if not dog_df.empty:\n        dog_food = dog_df['Kilograms of food'].values[0]\n        # Calculate the fraction of food that the dog ate\n        food_fraction = Fraction(dog_food, total_food)\n        # Simplify the fraction\n        food_fraction = food_fraction.limit_denominator()\n    \n    return food_fraction","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Dog': ['Bandit', 'Echo', 'Buddy'],\n    'Kilograms of food': [9, 47, 34]\n})\n\n# Call the tool to solve the problem\nfood_fraction = calculate_food_fraction(df, 'Echo')\n\n# Print the answer\nprint(food_fraction)"}
{"question":"As part of a food drive, three friends collected canned food. What fraction of the cans were collected by Will? Simplify your answer.","answer":0.3448275862,"table":"Name | Number of cans of food\nSally | 84\nWill | 90\nErik | 87","level":7,"tool_id":6124,"code":"import pandas as pd\n\ndef calculate_fraction(df, name):\n    \"\"\"\n    This function takes in a pandas DataFrame containing names and the number of cans of food collected, and returns the fraction of cans collected by the given name.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing names and the number of cans of food collected with columns 'Name' and 'Number of cans of food'.\n    name (str): The name of the person for whom the fraction of cans collected is to be calculated.\n    Returns:\n    tuple: A tuple containing the numerator and denominator of the simplified fraction.\n    \"\"\"\n    from math import gcd\n    \n    # Get the number of cans collected by the given name\n    cans_collected_by_name = df[df['Name'] == name]['Number of cans of food'].values[0]\n    \n    # Calculate the total number of cans collected\n    total_cans_collected = df['Number of cans of food'].sum()\n    \n    # Calculate the greatest common divisor of the numerator and denominator\n    gcd_value = gcd(cans_collected_by_name, total_cans_collected)\n    \n    # Simplify the fraction\n    simplified_numerator = cans_collected_by_name \/\/ gcd_value\n    simplified_denominator = total_cans_collected \/\/ gcd_value\n    \n    return (simplified_numerator, simplified_denominator)","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Name': ['Sally', 'Will', 'Erik'],\n    'Number of cans of food': [84, 90, 87]\n})\n\n# Call the tool to solve the problem\nfraction = calculate_fraction(df, 'Will')\n\n# Print the answer\nprint(f\"The fraction of the cans collected by Will is {fraction[0]}\/{fraction[1]}\")"}
{"question":"For an economics project, Jenny determined the cost of ferry rides for bicycles and cars. How much does it cost to take a car on the Southport-Fort Fisher ferry?","answer":5.0,"table":"Ferry | Bicycle | Car\nOcracoke | $3 | $15\nFauntleroy-Vashon | $5 | $15\nSouthport-Fort Fisher | $2 | $5\nSeattle-Bremerton | $8 | $12\nMukilteu-Clinton | $5 | $7","level":5,"tool_id":1973,"code":"import pandas as pd\n\ndef get_ferry_cost(df, ferry_name, vehicle_type):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry cost table, a ferry name, and a vehicle type, and returns the cost of the ferry ride for the specified vehicle type.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ferry names and their costs for different vehicle types.\n    ferry_name (str): The name of the ferry.\n    vehicle_type (str): The type of vehicle (Bicycle or Car).\n    Returns:\n    float: The cost of the ferry ride for the specified vehicle type.\n    \"\"\"\n    # Filter the DataFrame for the specific ferry\n    ferry_df = df[df['Ferry'] == ferry_name]\n    if not ferry_df.empty:\n        # Get the cost for the specified vehicle type\n        cost = ferry_df[vehicle_type].values[0]\n        return cost\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Ocracoke', 'Fauntleroy-Vashon', 'Southport-Fort Fisher', 'Seattle-Bremerton', 'Mukilteo-Clinton'],\n    'Bicycle': [3, 5, 2, 8, 5],\n    'Car': [15, 15, 5, 12, 7]\n})\n# Call the tool to solve the problem\ncost = get_ferry_cost(df, 'Southport-Fort Fisher', 'Car')\nprint(cost)"}
{"question":"Nolan owns three dogs and monitors how much food they eat in a month. What fraction of the food was eaten by Taffy? Simplify your answer.","answer":0.301369863,"table":"Dog | Kilograms of food\nTaffy | 22\nFluffy | 9\nCheckers | 42","level":7,"tool_id":15410,"code":"import pandas as pd\nfrom fractions import Fraction\n\ndef calculate_food_fraction(df, dog_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of dogs and the amount of food they eat, and a dog's name, and returns the fraction of food that the dog ate.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing dog names and the amount of food they eat with columns 'Dog' and 'Kilograms of food'.\n    dog_name (str): The name of the dog.\n    Returns:\n    Fraction: The fraction of food that the dog ate.\n    \"\"\"\n    # Calculate the total amount of food\n    total_food = df['Kilograms of food'].sum()\n    \n    # Filter the DataFrame for the specific dog\n    dog_df = df[df['Dog'] == dog_name]\n    if not dog_df.empty:\n        dog_food = dog_df['Kilograms of food'].values[0]\n        # Calculate the fraction of food that the dog ate\n        food_fraction = Fraction(dog_food, total_food)\n        # Simplify the fraction\n        food_fraction = food_fraction.limit_denominator()\n    \n    return food_fraction","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Dog': ['Taffy', 'Fluffy', 'Checkers'],\n    'Kilograms of food': [22, 9, 42]\n})\n# Call the tool to solve the problem\nprint(calculate_food_fraction(df, 'Taffy'))"}
{"question":"A transportation analyst compared various bridges' tolls. On the George Washington bridge, how much more is the toll for a car than for a carpool?","answer":6.0,"table":"Bridge | Car | Carpool\nFort Madison | $1 | $1\nTacoma Narrows | $3 | $3\nGeorge Washington | $8 | $2\nHatem | $5 | $5","level":5,"tool_id":4436,"code":"import pandas as pd\n\ndef calculate_toll_difference(df, bridge_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a bridge toll table and a bridge name, and returns the difference in toll between a car and a carpool for the specified bridge.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge names and their tolls for cars and carpools with columns 'Bridge', 'Car', and 'Carpool'.\n    bridge_name (str): The name of the bridge to calculate the toll difference for.\n    Returns:\n    float: The difference in toll between a car and a carpool for the specified bridge.\n    \"\"\"\n    # Filter the DataFrame for the specific bridge\n    bridge_df = df[df['Bridge'] == bridge_name]\n    if not bridge_df.empty:\n        car_toll = bridge_df['Car'].values[0]\n        carpool_toll = bridge_df['Carpool'].values[0]\n        toll_difference = car_toll - carpool_toll\n        return toll_difference\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['Fort Madison', 'Tacoma Narrows', 'George Washington', 'Hatem'],\n    'Car': [1, 3, 8, 5],\n    'Carpool': [1, 3, 2, 5]\n})\n# Call the tool to solve the problem\ntoll_difference = calculate_toll_difference(df, 'George Washington')\nprint(toll_difference)"}
{"question":"A transportation analyst compared various bridges' tolls. On the George Washington bridge, how much more is the toll for a car than for a carpool?","answer":6.0,"table":"Bridge | Car | Carpool\nGeorge Washington | $8 | $2\nHatem | $5 | $5\nFort Madison | $1 | $1\nTacoma Narrows | $3 | $3","level":5,"tool_id":6847,"code":"import pandas as pd\n\ndef calculate_toll_difference(df, bridge_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a bridge toll table and a bridge name, and returns the difference in toll between a car and a carpool for the specified bridge.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing bridge names and their tolls for cars and carpools with columns 'Bridge', 'Car', and 'Carpool'.\n    bridge_name (str): The name of the bridge to calculate the toll difference for.\n    Returns:\n    float: The difference in toll between a car and a carpool for the specified bridge.\n    \"\"\"\n    # Filter the DataFrame for the specific bridge\n    bridge_df = df[df['Bridge'] == bridge_name]\n    if not bridge_df.empty:\n        car_toll = bridge_df['Car'].values[0]\n        carpool_toll = bridge_df['Carpool'].values[0]\n        toll_difference = car_toll - carpool_toll\n        return toll_difference\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Bridge': ['George Washington', 'Hatem', 'Fort Madison', 'Tacoma Narrows'],\n    'Car': [8, 5, 1, 3],\n    'Carpool': [2, 5, 1, 3]\n})\n# Call the tool to solve the problem\ntoll_difference = calculate_toll_difference(df, 'George Washington')\nprint(toll_difference)"}
{"question":"For an economics project, Jason determined the cost of ferry rides for bicycles and cars. On the Seattle-Bremerton ferry, how much higher is the fare for a car than for a bicycle?","answer":4.0,"table":"Ferry | Car | Bicycle\nMukilteu-Clinton | $7 | $5\nSeattle-Bremerton | $12 | $8\nOcracoke | $15 | $3","level":4,"tool_id":13773,"code":"import pandas as pd\n\ndef calculate_fare_difference(df, ferry_name):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry fare table and a ferry name, and returns the fare difference between a car and a bicycle for the specified ferry.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ferry names and their fares for cars and bicycles with columns 'Ferry', 'Car', and 'Bicycle'.\n    ferry_name (str): The name of the ferry for which the fare difference is to be calculated.\n    Returns:\n    float: The fare difference between a car and a bicycle for the specified ferry.\n    \"\"\"\n    # Filter the DataFrame for the specific ferry\n    ferry_df = df[df['Ferry'] == ferry_name]\n    \n    if not ferry_df.empty:\n        car_fare = ferry_df['Car'].values[0]\n        bicycle_fare = ferry_df['Bicycle'].values[0]\n        fare_difference = car_fare - bicycle_fare\n        return fare_difference\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Mukilteu-Clinton', 'Seattle-Bremerton', 'Ocracoke'],\n    'Car': [7, 12, 15],\n    'Bicycle': [5, 8, 3]\n})\n\n# Call the tool to solve the problem\nfare_difference = calculate_fare_difference(df, 'Seattle-Bremerton')\nprint(fare_difference)"}
{"question":"Jeffrey tracked the attendance at the school play. How many more people attended the play on Friday than on Sunday?","answer":7002.0,"table":"Day | Number of tickets\nWednesday | 3,141\nThursday | 5,694\nFriday | 8,862\nSaturday | 7,848\nSunday | 1,860","level":3,"tool_id":12308,"code":"import pandas as pd\n\ndef calculate_difference_in_attendance(df, day1, day2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of attendance at a school play, and two days, and returns the difference in attendance between the two days.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing days and the number of tickets sold with columns 'Day' and 'Number of tickets'.\n    day1 (str): The first day to compare.\n    day2 (str): The second day to compare.\n    Returns:\n    int: The difference in attendance between the two days.\n    \"\"\"\n    # Filter the DataFrame for the specific days\n    day1_df = df[df['Day'] == day1]\n    day2_df = df[df['Day'] == day2]\n    \n    # Check if the days are in the DataFrame\n    if not day1_df.empty and not day2_df.empty:\n        # Calculate the difference in attendance\n        difference = day1_df['Number of tickets'].values[0] - day2_df['Number of tickets'].values[0]\n        return difference\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Day': ['Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n    'Number of tickets': [3141, 5694, 8862, 7848, 1860]\n})\n# Call the tool to solve the problem\ndifference = calculate_difference_in_attendance(df, 'Friday', 'Sunday')\nprint(difference)"}
{"question":"Richmond will decide whether to extend its public pool's hours by looking at the number of times its residents visited the pool last month. How many people are there in all?","answer":44.0,"table":"Number of times | Frequency\n1 | 13\n2 | 1\n3 | 9\n4 | 11\n5 | 6\n6 | 4","level":8,"tool_id":11273,"code":"import pandas as pd\n\ndef calculate_total_people(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a frequency table and returns the total number of people.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the frequency table with columns 'Number of times' and 'Frequency'.\n    Returns:\n    int: The total number of people.\n    \"\"\"\n    # Initialize the total number of people\n    total_people = 0\n    \n    # Iterate through the rows of the DataFrame and calculate the total number of people\n    for index, row in df.iterrows():\n        total_people += row['Number of times'] * row['Frequency']\n    \n    return total_people","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Number of times': [1, 2, 3, 4, 5, 6],\n    'Frequency': [13, 1, 9, 11, 6, 4]\n})\n\n# Call the tool to solve the problem\ntotal_people = calculate_total_people(df)\n\n# Print the answer\nprint(total_people)"}
{"question":"For an economics project, Savannah determined the cost of ferry rides for bicycles and cars. How much does it cost to take a car on the Fauntleroy-Vashon ferry?","answer":15.0,"table":"Ferry | Car | Bicycle\nSeattle-Bremerton | $12 | $8\nFauntleroy-Vashon | $15 | $5\nOcracoke | $15 | $3\nSouthport-Fort Fisher | $5 | $2\nMukilteu-Clinton | $7 | $5","level":5,"tool_id":1199,"code":"import pandas as pd\n\ndef get_ferry_cost(df, ferry_name, vehicle_type):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry cost table, a ferry name, and a vehicle type, and returns the cost of the ferry ride for the specified vehicle type.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ferry names and their costs for different vehicle types with columns 'Ferry', 'Car', and 'Bicycle'.\n    ferry_name (str): The name of the ferry.\n    vehicle_type (str): The type of the vehicle ('Car' or 'Bicycle').\n    Returns:\n    float: The cost of the ferry ride for the specified vehicle type.\n    \"\"\"\n    # Filter the DataFrame for the specific ferry\n    ferry_df = df[df['Ferry'] == ferry_name]\n    if not ferry_df.empty:\n        ferry_cost = ferry_df[vehicle_type].values[0]\n        return ferry_cost\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Seattle-Bremerton', 'Fauntleroy-Vashon', 'Ocracoke', 'Southport-Fort Fisher', 'Mukilteo-Clinton'],\n    'Car': [12, 15, 15, 5, 7],\n    'Bicycle': [8, 5, 3, 2, 5]\n})\n\n# Call the tool to solve the problem\nferry_cost = get_ferry_cost(df, 'Fauntleroy-Vashon', 'Car')\nprint(ferry_cost)"}
{"question":"For a few weeks, a music producer kept track of newly released songs on a music streaming website. He recorded the music genre and number of times the song was played on its release date. What is the probability that a randomly selected song was country and had 0-500 plays? Simplify any fractions.","answer":0.15,"table":" | 0-500 plays | 501-1,000 plays\nCountry | 3 | 5\nRock | 5 | 7","level":8,"tool_id":10272,"code":"import pandas as pd\n\ndef calculate_probability(df, genre, plays):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a music streaming table, a genre, and a play range, and returns the probability that a randomly selected song was of the given genre and had plays within the given range.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing music genres and the number of plays with columns 'Genre', '0-500 plays', '501-1,000 plays'.\n    genre (str): The genre of the song.\n    plays (str): The play range of the song.\n    Returns:\n    float: The probability that a randomly selected song was of the given genre and had plays within the given range.\n    \"\"\"\n    # Calculate the total number of songs\n    total_songs = df['0-500 plays'].sum() + df['501-1,000 plays'].sum()\n    \n    # Filter the DataFrame for the specific genre\n    genre_df = df[df['Genre'] == genre]\n    \n    # Calculate the number of songs of the given genre and play range\n    genre_plays = genre_df[plays].values[0]\n    \n    # Calculate the probability\n    probability = genre_plays \/ total_songs\n    \n    return probability","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Genre': ['Country', 'Rock'],\n    '0-500 plays': [3, 5],\n    '501-1,000 plays': [5, 7]\n})\n# Call the tool to solve the problem\nprobability = calculate_probability(df, 'Country', '0-500 plays')\nprint(f\"The probability that a randomly selected song was country and had 0-500 plays is {probability}\")"}
{"question":"For a few weeks, a music producer kept track of newly released songs on a music streaming website. He recorded the music genre and number of times the song was played on its release date. What is the probability that a randomly selected song was country and had 0-500 plays? Simplify any fractions.","answer":0.1764705882,"table":" | 0-500 plays | 501-1,000 plays\nCountry | 3 | 5\nRock | 3 | 6","level":8,"tool_id":12233,"code":"import pandas as pd\n\ndef calculate_probability(df, genre, plays):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a music streaming table, a genre, and a play range, and returns the probability that a randomly selected song was of the given genre and had plays within the given range.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing music genres and the number of plays with columns 'Genre', '0-500 plays', '501-1,000 plays'.\n    genre (str): The genre of the song.\n    plays (str): The play range of the song.\n    Returns:\n    float: The probability that a randomly selected song was of the given genre and had plays within the given range.\n    \"\"\"\n    # Calculate the total number of songs\n    total_songs = df['0-500 plays'].sum() + df['501-1,000 plays'].sum()\n    \n    # Filter the DataFrame for the specific genre\n    genre_df = df[df['Genre'] == genre]\n    \n    # Calculate the number of songs of the given genre and play range\n    genre_songs = genre_df[plays].values[0]\n    \n    # Calculate the probability\n    probability = genre_songs \/ total_songs\n    \n    return probability","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Genre': ['Country', 'Rock'],\n    '0-500 plays': [3, 3],\n    '501-1,000 plays': [5, 6]\n})\n# Call the tool to solve the problem\nprobability = calculate_probability(df, 'Country', '0-500 plays')\nprint(f\"The probability that a randomly selected song was country and had 0-500 plays is {probability}\")"}
{"question":"For a few weeks, a music producer kept track of newly released songs on a music streaming website. He recorded the music genre and number of times the song was played on its release date. What is the probability that a randomly selected song was country and had 0-500 plays? Simplify any fractions.","answer":0.3846153846,"table":" | 0-500 plays | 501-1,000 plays\nCountry | 5 | 3\nRock | 3 | 2","level":8,"tool_id":14645,"code":"import pandas as pd\n\ndef calculate_probability(df, genre, plays):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a music streaming table, a genre, and a play range, and returns the probability that a randomly selected song was of the given genre and had plays within the given range.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing music genres and number of plays with columns 'Genre', '0-500 plays', '501-1,000 plays'.\n    genre (str): The genre of the song.\n    plays (str): The range of plays.\n    Returns:\n    float: The probability that a randomly selected song was of the given genre and had plays within the given range.\n    \"\"\"\n    # Calculate the total number of songs\n    total_songs = df['0-500 plays'].sum() + df['501-1,000 plays'].sum()\n    \n    # Filter the DataFrame for the specific genre\n    genre_df = df[df['Genre'] == genre]\n    \n    # Calculate the number of songs of the given genre with the given play range\n    genre_plays = genre_df[plays].values[0]\n    \n    # Calculate the probability\n    probability = genre_plays \/ total_songs\n    \n    return probability","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Genre': ['Country', 'Rock'],\n    '0-500 plays': [5, 3],\n    '501-1,000 plays': [3, 2]\n})\n\n# Call the tool to solve the problem\nprobability = calculate_probability(df, 'Country', '0-500 plays')\nprint(f\"The probability that a randomly selected song was country and had 0-500 plays is {probability}\")"}
{"question":"The owner of a plant nursery wrote down the number of roses on each bush. How many bushes have fewer than 96 roses?","answer":17.0,"table":"Stem | Leaf \n4 | 1, 4, 8, 8\n5 | 0, 1, 2\n6 | 1, 2, 4, 8\n7 | 0, 1, 2, 9\n8 | 4\n9 | 0","level":6,"tool_id":1260,"code":"import pandas as pd\ndef count_bushes_with_fewer_than_96_roses(df):\n    \"\"\"\n    This function takes in a pandas dataframe of roses per bush, and returns the number of bushes that have fewer than 96 roses.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of roses per bush.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of bushes that have fewer than 96 roses.\n    \"\"\"\n    # prepare a list to calculate roses in each bush\n    roses = []\n    # calculate the total number of roses in each bush\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            roses.append(stem * 10 + leaf[j])\n    # filter the bushes where the total number of roses is less than 96\n    filtered = [rose for rose in roses if rose < 96]\n    # count the number of rows\n    num_bushes = len(filtered)\n    return num_bushes","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7, 8, 9],\n    'Leaf': [[1, 4, 8, 8], [0, 1, 2], [1, 2, 4, 8], [0, 1, 2, 9], [4], [0]]\n})\n# Call the tool to solve the problem\nprint(count_bushes_with_fewer_than_96_roses(df))"}
{"question":"For an economics project, Anita determined the cost of ferry rides for bicycles and cars. How much does it cost to take a car on the Ocracoke ferry?","answer":15.0,"table":"Ferry | Car | Bicycle\nOcracoke | $15 | $3\nSouthport-Fort Fisher | $5 | $2\nFauntleroy-Vashon | $15 | $5\nSeattle-Bremerton | $12 | $8\nMukilteu-Clinton | $7 | $5","level":4,"tool_id":30,"code":"import pandas as pd\n\ndef get_ferry_cost(ferry_df, ferry_name, vehicle_type):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry table, a ferry name, and a vehicle type, and returns the cost of the ferry ride for the specified vehicle type.\n    Args:\n    ferry_df (pd.DataFrame): A pandas DataFrame containing ferry names and their costs for cars and bicycles with columns 'Ferry', 'Car', and 'Bicycle'.\n    ferry_name (str): The name of the ferry.\n    vehicle_type (str): The type of vehicle ('Car' or 'Bicycle').\n    Returns:\n    float: The cost of the ferry ride for the specified vehicle type.\n    \"\"\"\n    # Filter the DataFrame for the specific ferry\n    ferry_row = ferry_df[ferry_df['Ferry'] == ferry_name]\n    \n    if not ferry_row.empty:\n        cost = ferry_row[vehicle_type].values[0]\n        return cost\n    else:\n        return None","api_call":"# Initialize the table into a dataframe\nferry_df = pd.DataFrame({\n    'Ferry': ['Ocracoke', 'Southport-Fort Fisher', 'Fauntleroy-Vashon', 'Seattle-Bremerton', 'Mukilteo-Clinton'],\n    'Car': [15, 5, 15, 12, 7],\n    'Bicycle': [3, 2, 5, 8, 5]\n})\n\n# Call the tool to solve the problem\ncost = get_ferry_cost(ferry_df, 'Ocracoke', 'Car')\nprint(cost)"}
{"question":"Kenji was the lucky journalist assigned to cover the Best Beard Competition. He recorded the contestants' beard colors in his notepad. Kenji also noted if the contestants were signed up for the mustache competition later in the day. What is the probability that a randomly selected contestant has a grey beard and is only in the beard competition? Simplify any fractions.","answer":0.1666666667,"table":" | Only in the beard competition | Also in the mustache competition\nRed beard | 5 | 6\nGrey beard | 3 | 4","level":8,"tool_id":13596,"code":"import pandas as pd\n\ndef calculate_probability(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of contestants in a beard competition, and returns the probability that a randomly selected contestant has a grey beard and is only in the beard competition.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of contestants with different beard colors and their participation in the competitions. The DataFrame should have columns 'Only in the beard competition' and 'Also in the mustache competition', and index 'Red beard' and 'Grey beard'.\n    Returns:\n    float: The probability that a randomly selected contestant has a grey beard and is only in the beard competition.\n    \"\"\"\n    # Calculate the total number of contestants\n    total_contestants = df['Only in the beard competition'].sum() + df['Also in the mustache competition'].sum()\n    \n    # Calculate the number of contestants with a grey beard and only in the beard competition\n    grey_beard_only_beard_competition = df.loc['Grey beard', 'Only in the beard competition']\n    \n    # Calculate the probability\n    probability = grey_beard_only_beard_competition \/ total_contestants\n    \n    return probability","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Only in the beard competition': [5, 3],\n    'Also in the mustache competition': [6, 4]\n}, index=['Red beard', 'Grey beard'])\n\n# Call the tool to solve the problem\nprobability = calculate_probability(df)\nprint(probability)"}
{"question":"An agricultural agency is researching how much cheese people have been eating in different parts of the world. In 2006, how much more cheese did Germany consume per capita than Argentina?","answer":9.0,"table":"Country | 1996 | 2006\nAustria | 10 | 17\nGreat Britain | 9 | 10\nAustralia | 10 | 10\nArgentina | 11 | 11\nGermany | 12 | 20","level":4,"tool_id":10249,"code":"import pandas as pd\n\ndef calculate_cheese_difference(df, country1, country2, year):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of cheese consumption per capita in different countries and years, and returns the difference in cheese consumption between two countries in a specific year.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing cheese consumption per capita in different countries and years. The DataFrame should have 'Country' as one of the columns and years as the other columns.\n    country1 (str): The name of the first country.\n    country2 (str): The name of the second country.\n    year (str): The year to compare the cheese consumption.\n    Returns:\n    float: The difference in cheese consumption per capita between the two countries in the specified year.\n    \"\"\"\n    # Filter the DataFrame for the specific countries and year\n    country1_df = df[df['Country'] == country1]\n    country2_df = df[df['Country'] == country2]\n    \n    # Get the cheese consumption for the two countries in the specified year\n    country1_cheese = country1_df[year].values[0]\n    country2_cheese = country2_df[year].values[0]\n    \n    # Calculate the difference in cheese consumption\n    cheese_difference = country1_cheese - country2_cheese\n    \n    return cheese_difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Country': ['Austria', 'Great Britain', 'Australia', 'Argentina', 'Germany'],\n    '1996': [10, 9, 10, 11, 12],\n    '2006': [17, 10, 10, 11, 20]\n})\n\n# Call the tool to solve the problem\ncheese_difference = calculate_cheese_difference(df, 'Germany', 'Argentina', '2006')\nprint(cheese_difference)"}
{"question":"An agricultural agency is researching how much cheese people have been eating in different parts of the world. In 2006, how much more cheese did Germany consume per capita than Argentina?","answer":9.0,"table":"Country | 1996 | 2006\nGreat Britain | 9 | 10\nArgentina | 11 | 11\nGermany | 12 | 20","level":4,"tool_id":4942,"code":"import pandas as pd\n\ndef cheese_consumption_difference(df, country1, country2, year):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of cheese consumption per capita, and returns the difference in cheese consumption between two countries in a specific year.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing cheese consumption per capita data with columns 'Country', '1996', '2006'.\n    country1 (str): The name of the first country.\n    country2 (str): The name of the second country.\n    year (str): The year to compare cheese consumption.\n    Returns:\n    float: The difference in cheese consumption per capita between the two countries in the specified year.\n    \"\"\"\n    # Filter the DataFrame for the specific countries\n    country1_df = df[df['Country'] == country1]\n    country2_df = df[df['Country'] == country2]\n    \n    # Get the cheese consumption per capita for each country in the specified year\n    country1_cheese = country1_df[year].values[0]\n    country2_cheese = country2_df[year].values[0]\n    \n    # Calculate the difference in cheese consumption per capita\n    difference = country1_cheese - country2_cheese\n    \n    return difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Country': ['Great Britain', 'Argentina', 'Germany'],\n    '1996': [9, 11, 12],\n    '2006': [10, 11, 20]\n})\n\n# Call the tool to solve the problem\ndifference = cheese_consumption_difference(df, 'Germany', 'Argentina', '2006')\nprint(difference)"}
{"question":"The owner of a plant nursery wrote down the number of roses on each bush. How many bushes have exactly 43 roses?","answer":0.0,"table":"Stem | Leaf \n4 | 8, 9, 9\n5 | 9\n6 | 7, 8\n7 | 3, 9, 9","level":5,"tool_id":3509,"code":"import pandas as pd\ndef count_bushes_with_43_roses(df):\n    \"\"\"\n    This function takes in a pandas dataframe of roses per bush, and returns the number of bushes that have exactly 43 roses.\n    Args:\n    df (pandas.DataFrame): A pandas DataFrame object containing the number of roses per bush.\n    The dataframe should contain \"Stem\" and \"Leaf\" columns.\n    Returns:\n    int: The number of bushes that have exactly 43 roses.\n    \"\"\"\n    # prepare a list to calculate roses in each bush\n    roses = []\n    # calculate the total number of roses in each bush\n    for i in range(len(df)):\n        stem = df['Stem'][i]\n        leaf = df['Leaf'][i]\n        for j in range(len(leaf)):\n            roses.append(stem * 10 + leaf[j])\n    # filter the bushes where the total number of roses is exactly 43\n    filtered = [rose for rose in roses if rose == 43]\n    # count the number of rows\n    num_bushes = len(filtered)\n    return num_bushes","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Stem': [4, 5, 6, 7],\n    'Leaf': [[8, 9, 9], [9], [7, 8], [3, 9, 9]]\n})\n# Call the tool to solve the problem\nprint(count_bushes_with_43_roses(df))"}
{"question":"A biologist recorded the number of birds at lakes in Newport. How many more geese live in Moon Lake than Spring Lake?","answer":2.0,"table":"Lake | Swans | Geese\nBlue Lake | 5 | 3\nSpring Lake | 2 | 17\nMoon Lake | 8 | 19\nLong Lake | 10 | 16","level":5,"tool_id":16865,"code":"import pandas as pd\n\ndef calculate_difference(df, column, location1, location2):\n    \"\"\"\n    This function takes in a pandas DataFrame, a column name, and two location names, and returns the difference in the number of birds between the two locations.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing the number of birds at different locations.\n    column (str): The column name of the bird type.\n    location1 (str): The name of the first location.\n    location2 (str): The name of the second location.\n    Returns:\n    int: The difference in the number of birds between the two locations.\n    \"\"\"\n    # Filter the DataFrame for the specific locations\n    location1_df = df[df['Lake'] == location1]\n    location2_df = df[df['Lake'] == location2]\n    \n    # Get the number of birds at each location\n    location1_birds = location1_df[column].values[0]\n    location2_birds = location2_df[column].values[0]\n    \n    # Calculate the difference in the number of birds\n    difference = location1_birds - location2_birds\n    \n    return difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Lake': ['Blue Lake', 'Spring Lake', 'Moon Lake', 'Long Lake'],\n    'Swans': [5, 2, 8, 10],\n    'Geese': [3, 17, 19, 16]\n})\n# Call the tool to solve the problem\ndifference = calculate_difference(df, 'Geese', 'Moon Lake', 'Spring Lake')\nprint(difference)"}
{"question":"For an economics project, Ernest determined the cost of ferry rides for bicycles and cars. How much higher is the fare for a bicycle on the Mukilteu-Clinton ferry than on the Southport-Fort Fisher ferry?","answer":3.0,"table":"Ferry | Car | Bicycle\nSouthport-Fort Fisher | $5 | $2\nMukilteu-Clinton | $7 | $5\nSeattle-Bremerton | $12 | $8","level":4,"tool_id":2338,"code":"import pandas as pd\n\ndef calculate_fare_difference(df, ferry1, ferry2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a ferry fare table and two ferry names, and returns the fare difference for a bicycle between the two ferries.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing ferry names and their fares for cars and bicycles with columns 'Ferry', 'Car', and 'Bicycle'.\n    ferry1 (str): The name of the first ferry.\n    ferry2 (str): The name of the second ferry.\n    Returns:\n    float: The fare difference for a bicycle between the two ferries.\n    \"\"\"\n    # Filter the DataFrame for the specific ferries\n    ferry1_df = df[df['Ferry'] == ferry1]\n    ferry2_df = df[df['Ferry'] == ferry2]\n    \n    # Calculate the fare difference\n    fare_difference = ferry1_df['Bicycle'].values[0] - ferry2_df['Bicycle'].values[0]\n    \n    return fare_difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Ferry': ['Southport-Fort Fisher', 'Mukilteu-Clinton', 'Seattle-Bremerton'],\n    'Car': [5, 7, 12],\n    'Bicycle': [2, 5, 8]\n})\n\n# Call the tool to solve the problem\nfare_difference = calculate_fare_difference(df, 'Mukilteu-Clinton', 'Southport-Fort Fisher')\nprint(f\"The fare for a bicycle on the Mukilteu-Clinton ferry is ${fare_difference} higher than on the Southport-Fort Fisher ferry.\")"}
{"question":"Owen volunteered to bring hot dog toppings to the neighborhood barbecue. He asked his neighbors for the toppings they like and recorded their answers in a frequency chart. If 1\/5 of the people who like mustard prefer spicy mustard, how many people prefer spicy mustard?","answer":3.0,"table":"Topping | Frequency\nketchup | 3\nmustard | 15\nchili | 7","level":5,"tool_id":6672,"code":"import pandas as pd\n\ndef calculate_spicy_mustard_lovers(df):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a frequency chart of hot dog toppings and calculates the number of people who prefer spicy mustard.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing hot dog toppings and their frequencies with columns 'Topping' and 'Frequency'.\n    Returns:\n    int: The number of people who prefer spicy mustard.\n    \"\"\"\n    # Filter the DataFrame for mustard\n    mustard_df = df[df['Topping'] == 'mustard']\n    \n    # If mustard is in the DataFrame, calculate the number of people who prefer spicy mustard\n    if not mustard_df.empty:\n        mustard_lovers = mustard_df['Frequency'].values[0]\n        spicy_mustard_lovers = mustard_lovers \/ 5\n        return spicy_mustard_lovers\n    \n    # If mustard is not in the DataFrame, return 0\n    return 0","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Topping': ['ketchup', 'mustard', 'chili'],\n    'Frequency': [3, 15, 7]\n})\n# Call the tool to solve the problem\nspicy_mustard_lovers = calculate_spicy_mustard_lovers(df)\nprint(spicy_mustard_lovers)"}
{"question":"Ellis Furniture Exports is shipping pieces of furniture made out of different types of wood. How many more pieces of maple furniture are there than pieces of oak furniture?","answer":14.0,"table":"Type of Wood | Beds | Bookcases\nMaple | 14 | 19\nOak | 15 | 4\nWalnut | 7 | 4\nPine | 4 | 5","level":4,"tool_id":4380,"code":"import pandas as pd\n\ndef calculate_difference(df, wood_type1, wood_type2):\n    \"\"\"\n    This function takes in a pandas DataFrame representing a table of furniture made out of different types of wood, and two types of wood. It returns the difference in the total number of pieces of furniture made from the two types of wood.\n    Args:\n    df (pd.DataFrame): A pandas DataFrame containing types of wood and the number of pieces of furniture made from each type with columns 'Type of Wood', 'Beds', and 'Bookcases'.\n    wood_type1 (str): The first type of wood.\n    wood_type2 (str): The second type of wood.\n    Returns:\n    int: The difference in the total number of pieces of furniture made from the two types of wood.\n    \"\"\"\n    # Filter the DataFrame for the specific types of wood\n    wood_type1_df = df[df['Type of Wood'] == wood_type1]\n    wood_type2_df = df[df['Type of Wood'] == wood_type2]\n    \n    # Calculate the total number of pieces of furniture made from each type of wood\n    wood_type1_total = wood_type1_df['Beds'].values[0] + wood_type1_df['Bookcases'].values[0]\n    wood_type2_total = wood_type2_df['Beds'].values[0] + wood_type2_df['Bookcases'].values[0]\n    \n    # Calculate the difference in the total number of pieces of furniture made from the two types of wood\n    difference = wood_type1_total - wood_type2_total\n    \n    return difference","api_call":"# Initialize the table into a dataframe\ndf = pd.DataFrame({\n    'Type of Wood': ['Maple', 'Oak', 'Walnut', 'Pine'],\n    'Beds': [14, 15, 7, 4],\n    'Bookcases': [19, 4, 4, 5]\n})\n\n# Call the tool to solve the problem\ndifference = calculate_difference(df, 'Maple', 'Oak')\nprint(difference)"}
